!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$2	src/madness/tensor/mtxmq_graveyard/mtxm_gen.h	/^sub     $2, NK$/;"	v
1	src/apps/moldft/fci/fci.F	/^1     format(\/11x,'small full configuration interaction program'\/$/;"	l	program:fci	file:
1	src/apps/moldft/fci/fci_3pdm.F	/^ 1    format(\/' No. of 3-particle coupling coeffs = ', 1p,d9.2)$/;"	l	subroutine:fci_3pdm	file:
1	src/apps/moldft/fci/fci_davids.F	/^ 1    format($/;"	l	function:fci_davids	file:
1	src/apps/moldft/fci/fci_err.F	/^ 1    format(\/$/;"	l	subroutine:fci_err	file:
1	src/apps/moldft/fci/fci_ograph.F	/^ 1          format(1x,i4,8(5x,i4,5x):\/5x,8(5x,i4,5x))$/;"	l	subroutine:fci_ograph	file:
1	src/apps/moldft/fci/fci_output.F	/^ 1       continue$/;"	l	subroutine:fci_output	file:
1	src/apps/moldft/fci/fci_prntri.F	/^    1 format(2x,1x,6(7x,i5))$/;"	l	subroutine:fci_prntri	file:
1	src/apps/moldft/fci/fci_prspnad.F	/^ 1    format(\/'  Spin-adaption matrix for', i3, ' open-shells '\/$/;"	l	subroutine:fci_prspnad	file:
1	src/apps/moldft/fci/fci_prteop.F	/^1     format(\/' one electron coupling coefficients (i j K J value)'\/)$/;"	l	subroutine:fci_prteop	file:
1	src/apps/moldft/fci/fci_prvec.F	/^ 1    format(\/$/;"	l	subroutine:fci_print_vector	file:
1	src/apps/moldft/fci/fci_setup.F	/^ 1          format(1x,i6,4x,2i4,4x,10i2)$/;"	l	subroutine:fci_setup	file:
1	src/apps/moldft/fci/fci_tinit.F	/^ 1    format('  Started ',a,': call number',f10.0,' at', f9.1,'s')$/;"	l	subroutine:fci_tstart	file:
1	src/apps/moldft/fci/fci_tinit.F	/^ 1    format(' Finished ',a,': call number',f10.0,' at', f9.1,'s',$/;"	l	subroutine:fci_tfinish	file:
1	src/apps/moldft/fci/fci_tinit.F	/^ 1    format(\/'  FCI timing information '\/$/;"	l	subroutine:fci_tprint	file:
1	src/apps/moldft/fci/timer.f	/^ 1    format(1x,i8,2f10.3,2x,2f10.3)$/;"	l	file:
10	src/apps/moldft/fci/daxpy.F	/^ 10   continue$/;"	l	subroutine:daxpy	file:
10	src/apps/moldft/fci/dcopy.F	/^   10 continue$/;"	l	subroutine:dcopy	file:
10	src/apps/moldft/fci/ddot.F	/^   10 continue$/;"	l	function:ddot	file:
10	src/apps/moldft/fci/dgemm.F	/^ 10            CONTINUE$/;"	l	subroutine:DGEMM	file:
10	src/apps/moldft/fci/dscal.F	/^   10 continue$/;"	l	subroutine:dscal	file:
10	src/apps/moldft/fci/fci_1pdm.F	/^ 10      continue               ! iwalk loop$/;"	l	subroutine:fci_1pdm	file:
10	src/apps/moldft/fci/fci_2pdm.F	/^ 10   continue                  ! iwalk loop$/;"	l	subroutine:fci_2pdm	file:
10	src/apps/moldft/fci/fci_3pdm.F	/^ 10         continue            ! iwalk loop$/;"	l	subroutine:fci_3pdm	file:
10	src/apps/moldft/fci/fci_cntone.F	/^ 10      continue$/;"	l	subroutine:fci_cntone	file:
10	src/apps/moldft/fci/fci_davids.F	/^ 10      if (converged) then$/;"	l	function:fci_davids	file:
10	src/apps/moldft/fci/fci_detwalk.F	/^ 10   middle = (left+right)\/2$/;"	l	subroutine:fci_det_to_walk	file:
10	src/apps/moldft/fci/fci_dfill.F	/^10        ipt=ipt+iskip$/;"	l	subroutine:dfill	file:
10	src/apps/moldft/fci/fci_diags.F	/^ 10   continue$/;"	l	subroutine:fci_diags	file:
10	src/apps/moldft/fci/fci_hami.F	/^ 10   continue$/;"	l	subroutine:fci_hamil2	file:
10	src/apps/moldft/fci/fci_hv.F	/^ 10   kblmax = max(kdimmx, nint(numav*avgdim)) ! Max dets per block$/;"	l	subroutine:fci_hv	file:
10	src/apps/moldft/fci/fci_ifill.F	/^10        ipt=ipt+iskip$/;"	l	subroutine:ifill	file:
10	src/apps/moldft/fci/fci_load.F	/^10    read (5,*,end=20) gg,i,j,k,l$/;"	l	subroutine:fci_load	file:
10	src/apps/moldft/fci/fci_mfndoc.F	/^ 10   continue$/;"	l	subroutine:fci_mfind_occ	file:
10	src/apps/moldft/fci/fci_mfndwt.F	/^ 10   continue$/;"	l	subroutine:fci_mfind_weight	file:
10	src/apps/moldft/fci/fci_mgraph.F	/^ 10   continue$/;"	l	subroutine:fci_mgraph	file:
10	src/apps/moldft/fci/fci_ofndoc.F	/^ 10   continue$/;"	l	subroutine:fci_ofind_occ	file:
10	src/apps/moldft/fci/fci_ofndwt.F	/^ 10   continue$/;"	l	subroutine:fci_ofind_weight	file:
10	src/apps/moldft/fci/fci_ograph.F	/^ 10   continue$/;"	l	subroutine:fci_ograph	file:
10	src/apps/moldft/fci/fci_onepdm.F	/^ 10   continue                  ! iwalk loop$/;"	l	subroutine:fci_onepdm	file:
10	src/apps/moldft/fci/fci_output.F	/^ 10      continue$/;"	l	subroutine:fci_output	file:
10	src/apps/moldft/fci/fci_setup.F	/^ 10   continue$/;"	l	subroutine:fci_setup	file:
10	src/apps/moldft/fci/fci_sigma.F	/^ 10   if (kwalk.gt.nwalko) goto 20$/;"	l	subroutine:fci_sigma	file:
10	src/apps/moldft/fci/fci_solve.F	/^ 10      continue$/;"	l	subroutine:fci_guess	file:
10	src/apps/moldft/fci/fci_srt1cc.F	/^ 10   continue$/;"	l	subroutine:fci_srt1cc	file:
10	src/apps/moldft/fci/fci_tinit.F	/^ 10   fci_strlen = i$/;"	l	function:fci_strlen	file:
10	src/apps/moldft/fci/fci_tinit.F	/^ 10   used = (used+now)\/dfloat(i)$/;"	l	subroutine:fci_tprint	file:
10	src/apps/moldft/fci/idamax.F	/^   10 continue$/;"	l	function:idamax	file:
10	src/apps/moldft/fci/renorm.F	/^ 10      continue$/;"	l	subroutine:renorm	file:
10	src/apps/moldft/fci/rsg.f	/^   10 b = a - 1.0d0$/;"	l	function:epslon	file:
10	src/apps/moldft/fci/rsg.f	/^   10 call  rrreduc(nm,n,a,b,fv2,ierr)$/;"	l	subroutine:rsg	file:
10	src/apps/moldft/fci/rsg.f	/^   10 continue$/;"	l	function:pythag	file:
10	src/apps/moldft/fci/screen.F	/^ 10      continue$/;"	l	subroutine:screen	file:
10	src/apps/moldft/fci/timer.f	/^ 10   nloop = 10000000\/n + 1$/;"	l	file:
10	src/apps/moldft/fci/yacobi.F	/^   10 u(i)=zero$/;"	l	subroutine:yacobi	file:
10	src/apps/moldft/fci/yacobi.F	/^10    continue$/;"	l	subroutine:order	file:
100	src/apps/moldft/fci/fci_hsort.F	/^ 100  continue $/;"	l	subroutine:fci_heapify	file:
100	src/apps/moldft/fci/fci_mgraph.F	/^ 100        continue$/;"	l	subroutine:fci_mgraph	file:
100	src/apps/moldft/fci/fci_ograph.F	/^ 100           continue$/;"	l	subroutine:fci_ograph	file:
100	src/apps/moldft/fci/rsg.f	/^  100 continue$/;"	l	subroutine:rrrebak	file:
100	src/apps/moldft/fci/rsg.f	/^  100 continue$/;"	l	subroutine:tttred1	file:
100	src/apps/moldft/fci/rsg.f	/^  100 continue$/;"	l	subroutine:tttred2	file:
100	src/apps/moldft/fci/rsg.f	/^  100 do 200 i = 1, nn$/;"	l	subroutine:rrreduc	file:
100	src/apps/moldft/fci/rsg.f	/^  100 e(i-1) = e(i)$/;"	l	subroutine:tttql2	file:
100	src/apps/moldft/fci/rsg.f	/^  100 e2(i-1) = e2(i)$/;"	l	subroutine:tttqlrat	file:
1000	src/apps/moldft/fci/fci_davids.F	/^ 1000 continue$/;"	l	function:fci_davids	file:
1000	src/apps/moldft/fci/fci_output.F	/^ 1000 format (\/1h ,8x,7('   ',i3,3x),('   ',i3))$/;"	l	subroutine:fci_output	file:
1000	src/apps/moldft/fci/rsg.f	/^ 1000 ierr = 7 * n + 1$/;"	l	subroutine:rrreduc	file:
1000	src/apps/moldft/fci/rsg.f	/^ 1000 ierr = l$/;"	l	subroutine:tttql2	file:
1000	src/apps/moldft/fci/rsg.f	/^ 1000 ierr = l$/;"	l	subroutine:tttqlrat	file:
1001	src/apps/moldft/fci/rsg.f	/^ 1001 return$/;"	l	subroutine:rrreduc	file:
1001	src/apps/moldft/fci/rsg.f	/^ 1001 return$/;"	l	subroutine:tttql2	file:
1001	src/apps/moldft/fci/rsg.f	/^ 1001 return$/;"	l	subroutine:tttqlrat	file:
101	src/apps/moldft/fci/fci_prntri.F	/^ 101  continue$/;"	l	subroutine:fci_prntri	file:
102	src/apps/moldft/fci/rsg.f	/^  102    continue$/;"	l	subroutine:tttqlrat	file:
105	src/apps/moldft/fci/rsg.f	/^  105    do 110 m = l, n$/;"	l	subroutine:tttqlrat	file:
11	src/apps/moldft/fci/fci_onelcc.F	/^ 11               format(2i5,5x,20i3)$/;"	l	subroutine:fci_onelcc	file:
11	src/apps/moldft/fci/fci_onepdm.F	/^ 11   format(\/' Weights for averaging density matrix ', 20f10.6)$/;"	l	subroutine:fci_onepdm	file:
11	src/apps/moldft/fci/fci_output.F	/^ 11   continue$/;"	l	subroutine:fci_output	file:
11	src/apps/moldft/fci/fci_solve.F	/^ 11      format(' Guess for root ', i2, ' is determinant ', $/;"	l	subroutine:fci_guess	file:
110	src/apps/moldft/fci/dgemm.F	/^ 110                    CONTINUE$/;"	l	subroutine:DGEMM	file:
110	src/apps/moldft/fci/fci_mgraph.F	/^ 110              continue$/;"	l	subroutine:fci_mgraph	file:
110	src/apps/moldft/fci/fci_ograph.F	/^ 110     continue$/;"	l	subroutine:fci_ograph	file:
110	src/apps/moldft/fci/rsg.f	/^  110    continue$/;"	l	subroutine:tttql2	file:
110	src/apps/moldft/fci/rsg.f	/^  110    continue$/;"	l	subroutine:tttqlrat	file:
1101	src/apps/moldft/fci/fci.F	/^ 1101    format(1x,i5,2x,f20.8)$/;"	l	program:fci	file:
1101	src/apps/moldft/fci/fci_mgraph.F	/^ 1101       format('           ',11(5x,i2,5x)\/$/;"	l	subroutine:fci_mgraph	file:
12	src/apps/moldft/fci/fci_prvec.F	/^ 12         format('(1x,i8,4x,i6,2x,i4,4x,f9.6,4x,',i2,$/;"	l	subroutine:fci_print_vector	file:
120	src/apps/moldft/fci/dgemm.F	/^ 120                 CONTINUE$/;"	l	subroutine:DGEMM	file:
120	src/apps/moldft/fci/fci_mgraph.F	/^ 120        continue$/;"	l	subroutine:fci_mgraph	file:
120	src/apps/moldft/fci/rsg.f	/^  120    if (m .eq. l) go to 210$/;"	l	subroutine:tttqlrat	file:
120	src/apps/moldft/fci/rsg.f	/^  120    if (m .eq. l) go to 220$/;"	l	subroutine:tttql2	file:
120	src/apps/moldft/fci/rsg.f	/^  120    scale = scale + dabs(d(k))$/;"	l	subroutine:tttred1	file:
120	src/apps/moldft/fci/rsg.f	/^  120    scale = scale + dabs(d(k))$/;"	l	subroutine:tttred2	file:
1201	src/apps/moldft/fci/fci_mgraph.F	/^ 1201       format(' level ',i3\/'           ',11(5x,i2,5x))$/;"	l	subroutine:fci_mgraph	file:
1202	src/apps/moldft/fci/fci_mgraph.F	/^ 1202       format('           ',11(2x,i3,2x,i3,2x))$/;"	l	subroutine:fci_mgraph	file:
1231	src/apps/moldft/fci/yacobi.F	/^1231  continue$/;"	l	subroutine:yacobi	file:
125	src/apps/moldft/fci/rsg.f	/^  125    continue$/;"	l	subroutine:tttred1	file:
130	src/apps/moldft/fci/rsg.f	/^  130    e(i) = 0.0d0$/;"	l	subroutine:tttred1	file:
130	src/apps/moldft/fci/rsg.f	/^  130    e(i) = d(l)$/;"	l	subroutine:tttred2	file:
130	src/apps/moldft/fci/rsg.f	/^  130    if (j .eq. 30) go to 1000$/;"	l	subroutine:tttql2	file:
130	src/apps/moldft/fci/rsg.f	/^  130    if (j .eq. 30) go to 1000$/;"	l	subroutine:tttqlrat	file:
135	src/apps/moldft/fci/rsg.f	/^  135    continue$/;"	l	subroutine:tttred2	file:
140	src/apps/moldft/fci/rsg.f	/^  140    d(i) = d(i) - h$/;"	l	subroutine:tttql2	file:
140	src/apps/moldft/fci/rsg.f	/^  140    d(i) = d(i) - h$/;"	l	subroutine:tttqlrat	file:
140	src/apps/moldft/fci/rsg.f	/^  140    do 150 k = 1, l$/;"	l	subroutine:tttred1	file:
140	src/apps/moldft/fci/rsg.f	/^  140    do 150 k = 1, l$/;"	l	subroutine:tttred2	file:
145	src/apps/moldft/fci/rsg.f	/^  145    f = f + h$/;"	l	subroutine:tttql2	file:
15	src/apps/moldft/fci/fci_output.F	/^ 15   continue$/;"	l	subroutine:fci_output	file:
150	src/apps/moldft/fci/rsg.f	/^  150    continue$/;"	l	subroutine:tttred1	file:
150	src/apps/moldft/fci/rsg.f	/^  150    continue$/;"	l	subroutine:tttred2	file:
160	src/apps/moldft/fci/dgemm.F	/^ 160                    CONTINUE$/;"	l	subroutine:DGEMM	file:
160	src/apps/moldft/fci/rsg.f	/^  160       x = x - b(i,k) * a(j,k)$/;"	l	subroutine:rrreduc	file:
17	src/apps/moldft/fci/fci_onelcc.F	/^ 17         format(i5,20(i3,f5.1,2x))$/;"	l	subroutine:fci_onelcc	file:
170	src/apps/moldft/fci/dgemm.F	/^ 170                 CONTINUE$/;"	l	subroutine:DGEMM	file:
170	src/apps/moldft/fci/rsg.f	/^  170    e(j) = 0.0d0$/;"	l	subroutine:tttred1	file:
170	src/apps/moldft/fci/rsg.f	/^  170    e(j) = 0.0d0$/;"	l	subroutine:tttred2	file:
180	src/apps/moldft/fci/rsg.f	/^  180       a(j,i) = x \/ y$/;"	l	subroutine:rrreduc	file:
180	src/apps/moldft/fci/rsg.f	/^  180       continue$/;"	l	subroutine:tttql2	file:
190	src/apps/moldft/fci/dgemm.F	/^ 190                    CONTINUE$/;"	l	subroutine:DGEMM	file:
2	src/apps/moldft/fci/fci_ograph.F	/^ 2          format(5x,8(1x,3i4,1x):\/5x,8(1x,3i4,1x))$/;"	l	subroutine:fci_ograph	file:
2	src/apps/moldft/fci/fci_output.F	/^ 2    continue$/;"	l	subroutine:fci_output	file:
2	src/apps/moldft/fci/fci_prntri.F	/^    2 format(2x,4x,6(4x,a8))$/;"	l	subroutine:fci_prntri	file:
2	src/apps/moldft/fci/fci_prspnad.F	/^ 2    format(1x,1000(4x,i4:))$/;"	l	subroutine:fci_prspnad	file:
2	src/apps/moldft/fci/fci_prteop.F	/^2     format(3(2i3,2i6,i3,4x))$/;"	l	subroutine:fci_prteop	file:
2	src/apps/moldft/fci/fci_setup.F	/^ 2       format(\/' index from orbital configurations to ci vector'\/\/$/;"	l	subroutine:fci_setup	file:
2	src/apps/moldft/fci/fci_tinit.F	/^ 2          format(2x,a20,2x,f10.0,2x,f9.1)$/;"	l	subroutine:fci_tprint	file:
20	src/apps/moldft/fci/daxpy.F	/^ 20   m = mod(n,4)$/;"	l	subroutine:daxpy	file:
20	src/apps/moldft/fci/dcopy.F	/^   20 m = mod(n,7)$/;"	l	subroutine:dcopy	file:
20	src/apps/moldft/fci/ddot.F	/^   20 m = mod(n,5)$/;"	l	function:ddot	file:
20	src/apps/moldft/fci/dgemm.F	/^ 20         CONTINUE$/;"	l	subroutine:DGEMM	file:
20	src/apps/moldft/fci/dscal.F	/^   20 m = mod(n,5)$/;"	l	subroutine:dscal	file:
20	src/apps/moldft/fci/fci_davids.F	/^ 20      converged = .true.$/;"	l	function:fci_davids	file:
20	src/apps/moldft/fci/fci_detwalk.F	/^ 20   if (indexo(owalk).eq.indexo(owalk+1)) then$/;"	l	subroutine:fci_det_to_walk	file:
20	src/apps/moldft/fci/fci_diags.F	/^ 20         continue$/;"	l	subroutine:fci_diags	file:
20	src/apps/moldft/fci/fci_hami.F	/^ 20         continue$/;"	l	subroutine:fci_hamil2	file:
20	src/apps/moldft/fci/fci_load.F	/^20    continue$/;"	l	subroutine:fci_load	file:
20	src/apps/moldft/fci/fci_mfndoc.F	/^ 20      continue$/;"	l	subroutine:fci_mfind_occ	file:
20	src/apps/moldft/fci/fci_mgraph.F	/^ 20      continue$/;"	l	subroutine:fci_mgraph	file:
20	src/apps/moldft/fci/fci_ofndoc.F	/^ 20      continue$/;"	l	subroutine:fci_ofind_occ	file:
20	src/apps/moldft/fci/fci_ograph.F	/^ 20      continue$/;"	l	subroutine:fci_ograph	file:
20	src/apps/moldft/fci/fci_sigma.F	/^ 20   continue$/;"	l	subroutine:fci_sigma	file:
20	src/apps/moldft/fci/fci_spnad.F	/^ 20      continue$/;"	l	subroutine:fci_spin_adapt	file:
20	src/apps/moldft/fci/fci_spnad.F	/^ 20      continue$/;"	l	subroutine:fci_spin_adapt_nvec	file:
20	src/apps/moldft/fci/fci_srt1cc.F	/^ 20   continue$/;"	l	subroutine:fci_srt1cc	file:
20	src/apps/moldft/fci/idamax.F	/^   20 dmax = dabs(dx(1))$/;"	l	function:idamax	file:
20	src/apps/moldft/fci/renorm.F	/^ 20         continue$/;"	l	subroutine:renorm	file:
20	src/apps/moldft/fci/rsg.f	/^   20       x = x - b(i,k) * b(j,k)$/;"	l	subroutine:rrreduc	file:
20	src/apps/moldft/fci/rsg.f	/^   20 call  tttred2(nm,n,a,w,fv1,z)$/;"	l	subroutine:rsg	file:
20	src/apps/moldft/fci/rsg.f	/^   20 pythag = p$/;"	l	function:pythag	file:
20	src/apps/moldft/fci/screen.F	/^ 20      continue$/;"	l	subroutine:screen	file:
20	src/apps/moldft/fci/yacobi.F	/^   20 continue$/;"	l	subroutine:yacobi	file:
20	src/apps/moldft/fci/yacobi.F	/^20        continue$/;"	l	subroutine:order	file:
200	src/apps/moldft/fci/dgemm.F	/^ 200                 CONTINUE$/;"	l	subroutine:DGEMM	file:
200	src/apps/moldft/fci/fci_prntri.F	/^ 200  ii=ii+1$/;"	l	subroutine:fci_prntri	file:
200	src/apps/moldft/fci/rsg.f	/^  200       continue$/;"	l	subroutine:tttred1	file:
200	src/apps/moldft/fci/rsg.f	/^  200       continue$/;"	l	subroutine:tttred2	file:
200	src/apps/moldft/fci/rsg.f	/^  200    continue$/;"	l	subroutine:tttql2	file:
200	src/apps/moldft/fci/rsg.f	/^  200    continue$/;"	l	subroutine:tttqlrat	file:
200	src/apps/moldft/fci/rsg.f	/^  200 continue$/;"	l	subroutine:rrreduc	file:
200	src/apps/moldft/fci/rsg.f	/^  200 return$/;"	l	subroutine:rrrebak	file:
2000	src/apps/moldft/fci/fci_output.F	/^ 2000 format (a1,i4,1x,8f9.4)$/;"	l	subroutine:fci_output	file:
201	src/apps/moldft/fci/fci_prntri.F	/^ 201  return$/;"	l	subroutine:fci_prntri	file:
210	src/apps/moldft/fci/rsg.f	/^  210    p = d(l) + f$/;"	l	subroutine:tttqlrat	file:
220	src/apps/moldft/fci/rsg.f	/^  220       e(j) = g$/;"	l	subroutine:tttred1	file:
220	src/apps/moldft/fci/rsg.f	/^  220       e(j) = g$/;"	l	subroutine:tttred2	file:
220	src/apps/moldft/fci/rsg.f	/^  220       x = x - a(k,j) * b(i,k)$/;"	l	subroutine:rrreduc	file:
220	src/apps/moldft/fci/rsg.f	/^  220    d(l) = d(l) + f$/;"	l	subroutine:tttql2	file:
222	src/apps/moldft/fci/fci_ograph.F	/^ 222        format(1x,i8,2x,20i2)$/;"	l	subroutine:fci_ograph	file:
230	src/apps/moldft/fci/rsg.f	/^  230    continue$/;"	l	subroutine:tttqlrat	file:
240	src/apps/moldft/fci/rsg.f	/^  240       if (j .eq. 1) go to 280$/;"	l	subroutine:rrreduc	file:
240	src/apps/moldft/fci/rsg.f	/^  240    continue$/;"	l	subroutine:tttred1	file:
240	src/apps/moldft/fci/rsg.f	/^  240    continue$/;"	l	subroutine:tttred2	file:
240	src/apps/moldft/fci/rsg.f	/^  240 continue$/;"	l	subroutine:tttql2	file:
245	src/apps/moldft/fci/rsg.f	/^  245    continue$/;"	l	subroutine:tttred1	file:
245	src/apps/moldft/fci/rsg.f	/^  245    continue$/;"	l	subroutine:tttred2	file:
250	src/apps/moldft/fci/rsg.f	/^  250    e(j) = e(j) - h * d(j)$/;"	l	subroutine:tttred1	file:
250	src/apps/moldft/fci/rsg.f	/^  250    e(j) = e(j) - hh * d(j)$/;"	l	subroutine:tttred2	file:
250	src/apps/moldft/fci/rsg.f	/^  250    i = 1$/;"	l	subroutine:tttqlrat	file:
260	src/apps/moldft/fci/rsg.f	/^  260       a(k,j) = a(k,j) - f * e(k) - g * d(k)$/;"	l	subroutine:tttred1	file:
260	src/apps/moldft/fci/rsg.f	/^  260       x = x - a(j,k) * b(i,k)$/;"	l	subroutine:rrreduc	file:
260	src/apps/moldft/fci/rsg.f	/^  260       z(k,j) = z(k,j) - f * e(k) - g * d(k)$/;"	l	subroutine:tttred2	file:
260	src/apps/moldft/fci/rsg.f	/^  260    continue$/;"	l	subroutine:tttql2	file:
270	src/apps/moldft/fci/rsg.f	/^  270    d(i) = p$/;"	l	subroutine:tttqlrat	file:
280	src/apps/moldft/fci/rsg.f	/^  280       a(i,j) = x \/ dl(i)$/;"	l	subroutine:rrreduc	file:
280	src/apps/moldft/fci/rsg.f	/^  280    continue$/;"	l	subroutine:tttql2	file:
280	src/apps/moldft/fci/rsg.f	/^  280    continue$/;"	l	subroutine:tttred1	file:
280	src/apps/moldft/fci/rsg.f	/^  280    continue$/;"	l	subroutine:tttred2	file:
285	src/apps/moldft/fci/rsg.f	/^  285    do 290 j = 1, l$/;"	l	subroutine:tttred1	file:
290	src/apps/moldft/fci/rsg.f	/^  290    continue$/;"	l	subroutine:tttred1	file:
290	src/apps/moldft/fci/rsg.f	/^  290    d(i) = h$/;"	l	subroutine:tttred2	file:
290	src/apps/moldft/fci/rsg.f	/^  290 continue$/;"	l	subroutine:tttqlrat	file:
3	src/apps/moldft/fci/fci_davids.F	/^ 3          format(6x,4i5,2x,f15.8,f12.8,f8.1)$/;"	l	function:fci_davids	file:
3	src/apps/moldft/fci/fci_ograph.F	/^ 3       format(1x,' orbital configuration graph '\/\/$/;"	l	subroutine:fci_ograph	file:
3	src/apps/moldft/fci/fci_output.F	/^ 3    return$/;"	l	subroutine:fci_output	file:
3	src/apps/moldft/fci/fci_prntri.F	/^    3 format(2x,i2,2x,6f12.6)$/;"	l	subroutine:fci_prntri	file:
3	src/apps/moldft/fci/fci_prspnad.F	/^ 3       format(1x,1000f8.4)$/;"	l	subroutine:fci_prspnad	file:
3	src/apps/moldft/fci/fci_tinit.F	/^ 3    format(\/1p,'  Timing overhead=',d8.1,'\/call, #calls=',$/;"	l	subroutine:fci_tprint	file:
30	src/apps/moldft/fci/daxpy.F	/^ 30   continue$/;"	l	subroutine:daxpy	file:
30	src/apps/moldft/fci/dcopy.F	/^   30 continue$/;"	l	subroutine:dcopy	file:
30	src/apps/moldft/fci/ddot.F	/^   30 continue$/;"	l	function:ddot	file:
30	src/apps/moldft/fci/dgemm.F	/^ 30            CONTINUE$/;"	l	subroutine:DGEMM	file:
30	src/apps/moldft/fci/dscal.F	/^   30 continue$/;"	l	subroutine:dscal	file:
30	src/apps/moldft/fci/fci_diags.F	/^ 30            continue$/;"	l	subroutine:fci_diags	file:
30	src/apps/moldft/fci/fci_hami.F	/^ 30            continue$/;"	l	subroutine:fci_hamil2	file:
30	src/apps/moldft/fci/fci_mgraph.F	/^ 30         continue$/;"	l	subroutine:fci_mgraph	file:
30	src/apps/moldft/fci/fci_ograph.F	/^ 30            continue$/;"	l	subroutine:fci_ograph	file:
30	src/apps/moldft/fci/fci_sigma.F	/^ 30      continue$/;"	l	subroutine:fci_sigma	file:
30	src/apps/moldft/fci/fci_spnad.F	/^ 30   continue$/;"	l	subroutine:fci_spin_adapt	file:
30	src/apps/moldft/fci/fci_spnad.F	/^ 30   continue$/;"	l	subroutine:fci_spin_adapt_nvec	file:
30	src/apps/moldft/fci/fci_srt1cc.F	/^ 30   continue$/;"	l	subroutine:fci_srt1cc	file:
30	src/apps/moldft/fci/idamax.F	/^   30 continue$/;"	l	function:idamax	file:
30	src/apps/moldft/fci/yacobi.F	/^   30 continue$/;"	l	subroutine:yacobi	file:
30	src/apps/moldft/fci/yacobi.F	/^30                  v(k,j)=t$/;"	l	subroutine:order	file:
300	src/apps/moldft/fci/rsg.f	/^  300 continue$/;"	l	subroutine:rrreduc	file:
300	src/apps/moldft/fci/rsg.f	/^  300 continue$/;"	l	subroutine:tttql2	file:
300	src/apps/moldft/fci/rsg.f	/^  300 continue$/;"	l	subroutine:tttred1	file:
300	src/apps/moldft/fci/rsg.f	/^  300 continue$/;"	l	subroutine:tttred2	file:
3000	src/apps/moldft/fci/fci_output.F	/^ 3000 format (\/' zero matrix'\/)$/;"	l	subroutine:fci_output	file:
31	src/apps/moldft/fci/fci_2pdm.F	/^ 31   format(\/' No. of non-zero two-body coupling coeffs ', 1p, d9.2\/)$/;"	l	subroutine:fci_2pdm	file:
31	src/apps/moldft/fci/yacobi.F	/^   31 continue$/;"	l	subroutine:yacobi	file:
330	src/apps/moldft/fci/rsg.f	/^  330    d(k) = z(k,i) \/ h$/;"	l	subroutine:tttred2	file:
340	src/apps/moldft/fci/rsg.f	/^  340       g = g + z(k,i) * z(k,j)$/;"	l	subroutine:tttred2	file:
35	src/apps/moldft/fci/yacobi.F	/^   35 continue$/;"	l	subroutine:yacobi	file:
360	src/apps/moldft/fci/rsg.f	/^  360    continue$/;"	l	subroutine:tttred2	file:
380	src/apps/moldft/fci/rsg.f	/^  380    do 400 k = 1, l$/;"	l	subroutine:tttred2	file:
4	src/apps/moldft/fci/fci_output.F	/^ 4          continue$/;"	l	subroutine:fci_output	file:
4	src/apps/moldft/fci/fci_prntri.F	/^    4 format(\/)$/;"	l	subroutine:fci_prntri	file:
40	src/apps/moldft/fci/daxpy.F	/^ 40   mp1 = m + 1$/;"	l	subroutine:daxpy	file:
40	src/apps/moldft/fci/dcopy.F	/^   40 mp1 = m + 1$/;"	l	subroutine:dcopy	file:
40	src/apps/moldft/fci/ddot.F	/^   40 mp1 = m + 1$/;"	l	function:ddot	file:
40	src/apps/moldft/fci/dgemm.F	/^ 40         CONTINUE$/;"	l	subroutine:DGEMM	file:
40	src/apps/moldft/fci/dscal.F	/^   40 mp1 = m + 1$/;"	l	subroutine:dscal	file:
40	src/apps/moldft/fci/fci_diags.F	/^ 40                  continue$/;"	l	subroutine:fci_diags	file:
40	src/apps/moldft/fci/fci_hami.F	/^ 40                  continue$/;"	l	subroutine:fci_hamil2	file:
40	src/apps/moldft/fci/fci_mgraph.F	/^ 40            continue$/;"	l	subroutine:fci_mgraph	file:
40	src/apps/moldft/fci/fci_ograph.F	/^ 40   continue$/;"	l	subroutine:fci_ograph	file:
40	src/apps/moldft/fci/fci_sigma.F	/^ 40      continue$/;"	l	subroutine:fci_sigma	file:
40	src/apps/moldft/fci/fci_spnad.F	/^ 40      continue$/;"	l	subroutine:fci_spin_adapt	file:
40	src/apps/moldft/fci/fci_spnad.F	/^ 40      continue$/;"	l	subroutine:fci_spin_adapt_nvec	file:
40	src/apps/moldft/fci/fci_srt1cc.F	/^ 40   continue$/;"	l	subroutine:fci_srt1cc	file:
40	src/apps/moldft/fci/rsg.f	/^   40       if (j .ne. i) go to 60$/;"	l	subroutine:rrreduc	file:
400	src/apps/moldft/fci/rsg.f	/^  400    z(k,i) = 0.0d0$/;"	l	subroutine:tttred2	file:
45	src/apps/moldft/fci/yacobi.F	/^   45 kj=l(jbig)+i$/;"	l	subroutine:yacobi	file:
46	src/apps/moldft/fci/yacobi.F	/^   46 kj=l(i)+jbig$/;"	l	subroutine:yacobi	file:
47	src/apps/moldft/fci/yacobi.F	/^   47 ki=l(ibig)+i$/;"	l	subroutine:yacobi	file:
48	src/apps/moldft/fci/yacobi.F	/^   48 ki=l(i)+ibig$/;"	l	subroutine:yacobi	file:
5	src/apps/moldft/fci/fci_cntone.F	/^ 5    continue$/;"	l	subroutine:fci_cntone	file:
5	src/apps/moldft/fci/fci_output.F	/^ 5          write (6,2000) ctl,k,(z(k,i), i = begin,last)$/;"	l	subroutine:fci_output	file:
5	src/apps/moldft/fci/idamax.F	/^    5    ix = ix + incx$/;"	l	function:idamax	file:
50	src/apps/moldft/fci/daxpy.F	/^ 50   continue$/;"	l	subroutine:daxpy	file:
50	src/apps/moldft/fci/dcopy.F	/^   50 continue$/;"	l	subroutine:dcopy	file:
50	src/apps/moldft/fci/ddot.F	/^   50 continue$/;"	l	function:ddot	file:
50	src/apps/moldft/fci/dscal.F	/^   50 continue$/;"	l	subroutine:dscal	file:
50	src/apps/moldft/fci/fci_diags.F	/^ 50               do 60 iiel = iello,ielhi$/;"	l	subroutine:fci_diags	file:
50	src/apps/moldft/fci/fci_hami.F	/^ 50               do 60 iiel = kelbas,ieltop$/;"	l	subroutine:fci_hamil2	file:
50	src/apps/moldft/fci/fci_mgraph.F	/^ 50      continue$/;"	l	subroutine:fci_mgraph	file:
50	src/apps/moldft/fci/fci_ograph.F	/^ 50   continue$/;"	l	subroutine:fci_ograph	file:
50	src/apps/moldft/fci/fci_sigma.F	/^ 50      continue$/;"	l	subroutine:fci_sigma	file:
50	src/apps/moldft/fci/fci_spnad.F	/^ 50         continue$/;"	l	subroutine:fci_spin_adapt	file:
50	src/apps/moldft/fci/fci_spnad.F	/^ 50         continue$/;"	l	subroutine:fci_spin_adapt_nvec	file:
50	src/apps/moldft/fci/fci_srt1cc.F	/^ 50   continue$/;"	l	subroutine:fci_srt1cc	file:
50	src/apps/moldft/fci/rsg.f	/^   50 return$/;"	l	subroutine:rsg	file:
50	src/apps/moldft/fci/yacobi.F	/^   50 d=c*a(ki)+s*a(kj)$/;"	l	subroutine:yacobi	file:
500	src/apps/moldft/fci/rsg.f	/^  500 continue$/;"	l	subroutine:tttred2	file:
501	src/apps/moldft/fci/yacobi.F	/^  501 continue$/;"	l	subroutine:yacobi	file:
502	src/apps/moldft/fci/yacobi.F	/^  502 continue$/;"	l	subroutine:yacobi	file:
503	src/apps/moldft/fci/yacobi.F	/^  503 ij=ij+n$/;"	l	subroutine:yacobi	file:
51	src/apps/moldft/fci/yacobi.F	/^   51 b=abs(a(ki))$/;"	l	subroutine:yacobi	file:
510	src/apps/moldft/fci/rsg.f	/^  510 do 520 i = 1, n$/;"	l	subroutine:tttred2	file:
52	src/apps/moldft/fci/fci_mgraph.F	/^ 52      continue$/;"	l	subroutine:fci_mgraph	file:
52	src/apps/moldft/fci/yacobi.F	/^   52 b=abs(a(kj))$/;"	l	subroutine:yacobi	file:
520	src/apps/moldft/fci/rsg.f	/^  520 continue$/;"	l	subroutine:tttred2	file:
53	src/apps/moldft/fci/fci_mgraph.F	/^ 53      continue$/;"	l	subroutine:fci_mgraph	file:
54	src/apps/moldft/fci/yacobi.F	/^   54 if (i.eq.1) go to 60$/;"	l	subroutine:yacobi	file:
55	src/apps/moldft/fci/yacobi.F	/^   55 im1=i-1$/;"	l	subroutine:yacobi	file:
555	src/apps/moldft/fci/fci_davids.F	/^ 555     call fci_davids_redmat(workfile, n, nsub, buflen, $/;"	l	function:fci_davids	file:
58	src/apps/moldft/fci/yacobi.F	/^   58 continue$/;"	l	subroutine:yacobi	file:
60	src/apps/moldft/fci/ddot.F	/^   60 ddot = dtemp$/;"	l	function:ddot	file:
60	src/apps/moldft/fci/fci_diags.F	/^ 60               continue$/;"	l	subroutine:fci_diags	file:
60	src/apps/moldft/fci/fci_hami.F	/^ 60               continue$/;"	l	subroutine:fci_hamil2	file:
60	src/apps/moldft/fci/fci_mgraph.F	/^ 60      continue$/;"	l	subroutine:fci_mgraph	file:
60	src/apps/moldft/fci/fci_ograph.F	/^ 60      continue$/;"	l	subroutine:fci_ograph	file:
60	src/apps/moldft/fci/rsg.f	/^   60       b(j,i) = x \/ y$/;"	l	subroutine:rrreduc	file:
60	src/apps/moldft/fci/rsg.f	/^   60       x = x - b(k,i) * z(k,j)$/;"	l	subroutine:rrrebak	file:
60	src/apps/moldft/fci/yacobi.F	/^   60 continue$/;"	l	subroutine:yacobi	file:
70	src/apps/moldft/fci/fci_mgraph.F	/^ 70         continue$/;"	l	subroutine:fci_mgraph	file:
70	src/apps/moldft/fci/fci_ograph.F	/^ 70         continue$/;"	l	subroutine:fci_ograph	file:
77	src/apps/moldft/fci/fci_2pdm.F	/^ 77         format(' H(',i2,',',i2,') = ', f20.8)$/;"	l	subroutine:fci_2pdm	file:
80	src/apps/moldft/fci/dgemm.F	/^ 80                     CONTINUE$/;"	l	subroutine:DGEMM	file:
80	src/apps/moldft/fci/fci_mgraph.F	/^ 80            continue$/;"	l	subroutine:fci_mgraph	file:
80	src/apps/moldft/fci/fci_ograph.F	/^ 80   continue$/;"	l	subroutine:fci_ograph	file:
80	src/apps/moldft/fci/rsg.f	/^   80       z(i,j) = x \/ dl(i)$/;"	l	subroutine:rrrebak	file:
80	src/apps/moldft/fci/rsg.f	/^   80    z(j,i) = a(j,i)$/;"	l	subroutine:tttred2	file:
80	src/apps/moldft/fci/rsg.f	/^   80 continue$/;"	l	subroutine:rrreduc	file:
88	src/apps/moldft/fci/fci_onelcc.F	/^ 88         format(a,2x,20(i2,'(',i2,')',2x))$/;"	l	subroutine:fci_onelcc	file:
90	src/apps/moldft/fci/dgemm.F	/^ 90                  CONTINUE$/;"	l	subroutine:DGEMM	file:
90	src/apps/moldft/fci/fci_mgraph.F	/^ 90      continue$/;"	l	subroutine:fci_mgraph	file:
90	src/apps/moldft/fci/fci_ograph.F	/^ 90      continue$/;"	l	subroutine:fci_ograph	file:
999	src/apps/moldft/fci/yacobi.F	/^  999 continue$/;"	l	subroutine:yacobi	file:
A	src/apps/chem/corepotential.h	/^    std::vector<double> A;$/;"	m	struct:madness::CorePotential
A	src/apps/ii/systolic.h	/^        DistributedMatrix<T>& A;        \/\/< internal data$/;"	m	class:madness::SystolicMatrixAlgorithm
A	src/apps/polar/corepotential.h	/^    std::vector<double> A;$/;"	m	struct:CorePotential
A	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-defaulted_functions.cxx	/^    A(int foo): foo(foo) {}$/;"	f	struct:A
A	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-defaulted_functions.cxx	/^struct A {$/;"	s	file:
A	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-deleted_functions.cxx	/^    A(int) {}$/;"	f	struct:A
A	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-deleted_functions.cxx	/^struct A {$/;"	s	file:
A	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-deleted_functions_fail_compile.cxx	/^struct A {$/;"	s	file:
A	src/madness/mra/tools/mathutil.py	/^    A = zeromatrix(n,n)$/;"	v
A	src/madness/tensor/systolic.h	/^        DistributedMatrix<T>& A;$/;"	m	class:madness::SystolicMatrixAlgorithm
A	src/madness/world/test_ar.cc	/^    A(float a = 0.0) : a(a) {};$/;"	f	class:A
A	src/madness/world/test_ar.cc	/^class A {$/;"	c	file:
A	src/madness/world/test_prof.cc	/^class A {$/;"	c	file:
A	src/madness/world/test_vec.cc	/^    A() : val(0) {$/;"	f	class:A
A	src/madness/world/test_vec.cc	/^    A(const A& a) : val(a.val) {$/;"	f	class:A
A	src/madness/world/test_vec.cc	/^    A(int val) : val(val) {$/;"	f	class:A
A	src/madness/world/test_vec.cc	/^class A {$/;"	c	file:
AA	src/apps/nick/wavef.h	/^    complexd AA;$/;"	m	class:ScatteringWF
AAmBB	src/apps/nick/wavef.h	/^    complexd AAmBB;$/;"	m	class:ScatteringWF
ABC	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define ABC(disp,dest) \\$/;"	d
ABC2	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define ABC2(disp,dest) \\$/;"	d
ABGV	doc/Latex/implementation.tex	/^\\section{ABGV}$/;"	s
ABX	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    ABX=2,$/;"	e	enum:elem::HermitianGenDefiniteEigTypeNS::HermitianGenDefiniteEigType
AC	src/apps/chem/AC.h	/^    AC(){$/;"	f	class:madness::AC
AC	src/apps/chem/AC.h	/^   AC(ACParameters<NDIM> ac_param): ac_param_(ac_param) {}$/;"	f	class:madness::AC
AC	src/apps/chem/AC.h	/^   AC(World &world, std::shared_ptr<SCF> calc){$/;"	f	class:madness::AC
AC	src/apps/chem/AC.h	/^   AC(const AC& other): ac_param_(other.ac_param_){}$/;"	f	class:madness::AC
AC	src/apps/chem/AC.h	/^class AC{$/;"	c	namespace:madness
ACParameters	src/apps/chem/AC.h	/^	ACParameters(){$/;"	f	struct:madness::ACParameters
ACParameters	src/apps/chem/AC.h	/^	ACParameters(const ACParameters &other)$/;"	f	struct:madness::ACParameters
ACParameters	src/apps/chem/AC.h	/^struct ACParameters{$/;"	s	namespace:madness
ACos	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::ACos(value_type v)  { return acos(v); }$/;"	f	class:mu::Parser
ACosh	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::ACosh(value_type v) { return log(v + sqrt(v * v - 1)); }$/;"	f	class:mu::Parser
ADD_FAILURE	src/madness/external/gtest/include/gtest/gtest.h	1863;"	d
ADD_FAILURE_AT	src/madness/external/gtest/include/gtest/gtest.h	1867;"	d
ADJOINT	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    ADJOINT$/;"	e	enum:elem::OrientationNS::Orientation
ALIGNMENT	src/madness/world/worldrmi.h	/^        static const size_t ALIGNMENT = 64;$/;"	m	class:madness::RMI
ALL_OPTS	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	965;"	d	file:
ALL_PAIRTYPE	src/apps/chem/PNOParameters.h	/^enum PairType{MP2_PAIRTYPE,CISPD_PAIRTYPE,ALL_PAIRTYPE,NONE_PAIRTYPE,UNKNOWN_PAIRTYPE};$/;"	e	enum:madness::PairType
ANY_SOURCE	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int ANY_SOURCE = MPI_ANY_SOURCE;$/;"	m	namespace:elem::mpi
ANY_TAG	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int ANY_TAG = MPI_ANY_TAG;$/;"	m	namespace:elem::mpi
API_EXPORT	src/madness/external/muParser/muParserDLL.h	30;"	d
API_EXPORT	src/madness/external/muParser/muParserDLL.h	32;"	d
API_EXPORT	src/madness/external/muParser/muParserDLL.h	35;"	d
APPLY	src/apps/chem/SCF.cc	/^complex_functionT APPLY(const complex_operatorT *q1d,$/;"	f	namespace:madness
APPLY	src/apps/chem/SCF.h	/^	complex_functionT APPLY(const complex_operatorT* q1d, const complex_functionT& psi) {$/;"	f	class:madness::SCF
APPLY	src/apps/polar/moldft.cc	/^    complex_functionT APPLY(const complex_operatorT *q1d, const complex_functionT &psi)$/;"	f	struct:Calculation
APPLY	src/apps/tdse/tdse.cc	/^complex_functionT APPLY(const complex_operatorT* q1d, const complex_functionT& psi) {$/;"	f
APPLY	src/apps/tdse/tdse4.cc	/^complex_functionT APPLY(const complex_operatorT* Ge, const complex_operatorT* Gn, const complex_functionT& psi) {$/;"	f
APPLY	src/examples/tdse1d.cc	115;"	d	file:
APPLY	src/examples/testspectralprop.cc	/^complex_function_1d APPLY(complex_operatorT* q1d, const complex_function_1d& psi) {$/;"	f
AR	src/madness/tensor/mtxmq_bg/Makefile	/^   AR = powerpc-bgp-linux-ar$/;"	m
AR	src/madness/tensor/mtxmq_bg/Makefile	/^   AR = powerpc64-bgq-linux-ar$/;"	m
AR	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   AR = powerpc-bgp-linux-ar$/;"	m
AR	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   AR = powerpc64-bgq-linux-ar$/;"	m
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	404;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	407;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	416;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	418;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	422;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	433;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	436;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	439;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	443;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	395;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	398;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	407;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	413;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	416;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	419;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	424;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	427;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
ARCHIVE_COOKIE	src/madness/world/archive.h	58;"	d
ARCHIVE_MAJOR_VERSION	src/madness/world/archive.h	61;"	d
ARCHIVE_MINOR_VERSION	src/madness/world/archive.h	63;"	d
ARCHIVE_REGISTER_TYPE	src/madness/world/archive.h	146;"	d
ARCHIVE_REGISTER_TYPE_AND_PTR	src/madness/world/archive.h	158;"	d
ARCHIVE_REGISTER_TYPE_AND_PTR_NAMES	src/madness/world/archive.h	183;"	d
ARCHIVE_REGISTER_TYPE_INSTANTIATE_HERE	src/madness/world/archive_type_names.cc	42;"	d	file:
ARCHIVE_REGISTER_TYPE_INSTANTIATE_HERE	src/madness/world/test_ar.cc	41;"	d	file:
ARCHIVE_REGISTER_TYPE_NAME	src/madness/world/archive.h	172;"	d
ARCHIVE_REGISTER_TYPE_XLC_EXTRA	src/madness/world/archive.h	134;"	d
ARCHIVE_REGISTER_TYPE_XLC_EXTRA	src/madness/world/archive.h	137;"	d
ARFLAGS	src/apps/moldft/fci/GNUmakefile	/^   ARFLAGS = urs$/;"	m
ARFLAGS	src/madness/tensor/mtxmq_bg/Makefile	/^   ARFLAGS = cru$/;"	m
ARFLAGS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   ARFLAGS = cru$/;"	m
ASCENDING	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    ASCENDING$/;"	e	enum:elem::SortTypeNS::SortType
ASCII	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    ASCII,$/;"	e	enum:elem::FileFormatNS::FileFormat
ASCII_MATLAB	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    ASCII_MATLAB,$/;"	e	enum:elem::FileFormatNS::FileFormat
ASSERT_ANY_THROW	src/madness/external/gtest/include/gtest/gtest.h	1908;"	d
ASSERT_DEATH	src/madness/external/gtest/include/gtest/gtest-death-test.h	179;"	d
ASSERT_DEATH_IF_SUPPORTED	src/madness/external/gtest/include/gtest/gtest-death-test.h	283;"	d
ASSERT_DEATH_IF_SUPPORTED	src/madness/external/gtest/include/gtest/gtest-death-test.h	288;"	d
ASSERT_DEBUG_DEATH	src/madness/external/gtest/include/gtest/gtest-death-test.h	261;"	d
ASSERT_DEBUG_DEATH	src/madness/external/gtest/include/gtest/gtest-death-test.h	269;"	d
ASSERT_DOUBLE_EQ	src/madness/external/gtest/include/gtest/gtest.h	2094;"	d
ASSERT_EQ	src/madness/external/gtest/include/gtest/gtest.h	2011;"	d
ASSERT_EXIT	src/madness/external/gtest/include/gtest/gtest-death-test.h	168;"	d
ASSERT_FALSE	src/madness/external/gtest/include/gtest/gtest.h	1923;"	d
ASSERT_FLOAT_EQ	src/madness/external/gtest/include/gtest/gtest.h	2090;"	d
ASSERT_GE	src/madness/external/gtest/include/gtest/gtest.h	2027;"	d
ASSERT_GT	src/madness/external/gtest/include/gtest/gtest.h	2031;"	d
ASSERT_HRESULT_FAILED	src/madness/external/gtest/include/gtest/gtest.h	2139;"	d
ASSERT_HRESULT_SUCCEEDED	src/madness/external/gtest/include/gtest/gtest.h	2133;"	d
ASSERT_LE	src/madness/external/gtest/include/gtest/gtest.h	2019;"	d
ASSERT_LT	src/madness/external/gtest/include/gtest/gtest.h	2023;"	d
ASSERT_NE	src/madness/external/gtest/include/gtest/gtest.h	2015;"	d
ASSERT_NEAR	src/madness/external/gtest/include/gtest/gtest.h	2102;"	d
ASSERT_NO_FATAL_FAILURE	src/madness/external/gtest/include/gtest/gtest.h	2154;"	d
ASSERT_NO_THROW	src/madness/external/gtest/include/gtest/gtest.h	1906;"	d
ASSERT_PRED1	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	119;"	d
ASSERT_PRED2	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	167;"	d
ASSERT_PRED3	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	222;"	d
ASSERT_PRED4	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	284;"	d
ASSERT_PRED5	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	353;"	d
ASSERT_PRED_FORMAT1	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	117;"	d
ASSERT_PRED_FORMAT2	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	165;"	d
ASSERT_PRED_FORMAT3	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	220;"	d
ASSERT_PRED_FORMAT4	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	282;"	d
ASSERT_PRED_FORMAT5	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	351;"	d
ASSERT_SORTED_EIGENPAIRS	src/madness/external/elemental/external/pmrrr/include/pmrrr.h	201;"	d
ASSERT_STRCASEEQ	src/madness/external/gtest/include/gtest/gtest.h	2063;"	d
ASSERT_STRCASENE	src/madness/external/gtest/include/gtest/gtest.h	2065;"	d
ASSERT_STREQ	src/madness/external/gtest/include/gtest/gtest.h	2059;"	d
ASSERT_STRNE	src/madness/external/gtest/include/gtest/gtest.h	2061;"	d
ASSERT_THROW	src/madness/external/gtest/include/gtest/gtest.h	1904;"	d
ASSERT_TRUE	src/madness/external/gtest/include/gtest/gtest.h	1920;"	d
ASin	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::ASin(value_type v)  { return asin(v); }$/;"	f	class:mu::Parser
ASinh	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::ASinh(value_type v) { return log(v + sqrt(v * v + 1)); }$/;"	f	class:mu::Parser
ATI	src/madness/world/archive.h	166;"	d
ATN	src/madness/world/archive.h	164;"	d
ATTR_ORDERED	src/madness/world/worldrmi.h	/^        static const attrT ATTR_ORDERED=0x1;$/;"	m	class:madness::RMI
ATTR_UNORDERED	src/madness/world/worldrmi.h	/^        static const attrT ATTR_UNORDERED=0x0;$/;"	m	class:madness::RMI
ATan	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::ATan(value_type v)  { return atan(v); }$/;"	f	class:mu::Parser
ATanh	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::ATanh(value_type v) { return ((value_type)0.5 * log((1 + v) \/ (1 - v))); }$/;"	f	class:mu::Parser
AUTO	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    AUTO, \/\/ Automatically detect from file extension$/;"	e	enum:elem::FileFormatNS::FileFormat
AV	src/apps/ii/eigen_solver.cc	/^    DistributedMatrix<T>& AV; \/\/\/ concatnated two matrix A and V. V will holds eigen vector after calcuration$/;"	m	class:SystolicEigensolver	file:
AV	src/apps/ii/testsystolic.cc	/^    DistributedMatrix<T>& AV; \/\/\/ concatnated two matrix A and V. V will holds eigen vector after calcuration$/;"	m	class:SystolicEigensolver	file:
AXBX	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    AXBX=1,$/;"	e	enum:elem::HermitianGenDefiniteEigTypeNS::HermitianGenDefiniteEigType
Abort	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline void Abort() { abort(); }$/;"	f	namespace:testing::internal::posix
Abort	src/madness/external/gtest/src/gtest-death-test.cc	/^void DeathTestImpl::Abort(AbortReason reason) {$/;"	f	class:testing::internal::DeathTestImpl
Abort	src/madness/external/gtest/src/gtest-port.cc	/^void Abort() {$/;"	f	namespace:testing::internal::posix
Abort	src/madness/world/safempi.h	/^        void Abort(int code=1) const {$/;"	f	class:SafeMPI::Intracomm
AbortReason	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  enum AbortReason {$/;"	g	class:testing::internal::DeathTest
Abs	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Abs( const F& alpha )$/;"	f	namespace:elem
Abs	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Abs(value_type v)  { return fabs(v);  }$/;"	f	class:mu::Parser
AbstractBlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^class AbstractBlockDistMatrix$/;"	c	namespace:elem
AbstractBlockDistMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AbstractBlockDistMatrix$/;"	f	class:elem::AbstractBlockDistMatrix
AbstractDistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^class AbstractDistMatrix$/;"	c	namespace:elem
AbstractDistMatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AbstractDistMatrix( const elem::Grid& grid, Int root )$/;"	f	class:elem::AbstractDistMatrix
AbstractSocketWriter	src/madness/external/gtest/src/gtest-internal-inl.h	/^  class AbstractSocketWriter {$/;"	c	class:testing::internal::StreamingListener
AbstractVectorSpace	src/madness/tensor/gmres.h	/^            AbstractVectorSpace(World &world) : world(world) {}$/;"	f	class:madness::AbstractVectorSpace
AbstractVectorSpace	src/madness/tensor/gmres.h	/^    class AbstractVectorSpace {$/;"	c	namespace:madness
Abstraction overhead	doc/Latex/parallel-runtime.tex	/^\\subsection{Abstraction overhead}$/;"	b
Accept	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment
Accept	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration
Accept	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument
Accept	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement
Accept	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText
Accept	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown
Accumulate	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-variadic_templates.cxx	/^int Accumulate()$/;"	f
Accumulate	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-variadic_templates.cxx	/^int Accumulate(T v, Ts... vs)$/;"	f
Acos	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Acos( const F& alpha )$/;"	f	namespace:elem
Acosh	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Acosh( const F& alpha )$/;"	f	namespace:elem
Add	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet
AddArgument	src/madness/external/gtest/src/gtest-death-test.cc	/^  void AddArgument(const char* argument) {$/;"	f	class:testing::internal::Arguments
AddArguments	src/madness/external/gtest/src/gtest-death-test.cc	/^  void AddArguments(const ::std::vector<Str>& arguments) {$/;"	f	class:testing::internal::Arguments
AddAssignOp	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::AddAssignOp(value_type *a_pVar)$/;"	f	class:mu::ParserByteCode
AddCallback	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::AddCallback( const string_type &a_strName,$/;"	f	class:mu::ParserBase
AddEnvironment	src/madness/external/gtest/src/gtest.cc	/^Environment* UnitTest::AddEnvironment(Environment* env) {$/;"	f	class:testing::UnitTest
AddFlags	src/madness/external/muParser/muParserToken.h	/^      void AddFlags(int a_iFlags)$/;"	f	class:mu::ParserToken
AddFun	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::AddFun(void *a_pFun, int a_iArgc)$/;"	f	class:mu::ParserByteCode
AddGlobalTestEnvironment	src/madness/external/gtest/include/gtest/gtest.h	/^inline Environment* AddGlobalTestEnvironment(Environment* env) {$/;"	f	namespace:testing
AddInLocalData	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLT.hpp	/^inline void AddInLocalData$/;"	f	namespace:elem::trsm
AddOp	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::AddOp(ECmdCode a_Oprt)$/;"	f	class:mu::ParserByteCode
AddRef	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddRef	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddReference	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddReference	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddStrFun	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::AddStrFun(void *a_pFun, int a_iArgc, int a_iIdx)$/;"	f	class:mu::ParserByteCode
AddTestCaseInstantiation	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  int AddTestCaseInstantiation(const string& instantiation_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AddTestInfo	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void AddTestInfo(Test::SetUpTestCaseFunc set_up_tc,$/;"	f	class:testing::internal::UnitTestImpl
AddTestInfo	src/madness/external/gtest/src/gtest.cc	/^void TestCase::AddTestInfo(TestInfo * test_info) {$/;"	f	class:testing::TestCase
AddTestName	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  bool AddTestName(const char* file, int line, const char* case_name,$/;"	f	class:testing::internal::TypedTestCasePState
AddTestPartResult	src/madness/external/gtest/src/gtest.cc	/^void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {$/;"	f	class:testing::TestResult
AddTestPattern	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  void AddTestPattern(const char* test_case_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AddVal	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::AddVal(value_type a_fVal)$/;"	f	class:mu::ParserByteCode
AddValIdent	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::AddValIdent(identfun_type a_pCallback)$/;"	f	class:mu::ParserBase
AddValIdent	src/madness/external/muParser/muParserTokenReader.cpp	/^  void ParserTokenReader::AddValIdent(identfun_type a_pCallback)$/;"	f	class:mu::ParserTokenReader
AddVar	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::AddVar(value_type *a_pVar)$/;"	f	class:mu::ParserByteCode
Adder	src/madness/world/test_atomicint.cc	/^class Adder : public PoolTaskInterface {$/;"	c	file:
Adjoint	src/madness/external/elemental/include/elemental/blas-like/level1/Adjoint.hpp	/^Adjoint( const BlockDistMatrix<T,U,V>& A, BlockDistMatrix<T,W,Z>& B )$/;"	f	namespace:elem
Adjoint	src/madness/external/elemental/include/elemental/blas-like/level1/Adjoint.hpp	/^Adjoint( const DistMatrix<T,U,V>& A, DistMatrix<T,W,Z>& B )$/;"	f	namespace:elem
Adjoint	src/madness/external/elemental/include/elemental/blas-like/level1/Adjoint.hpp	/^Adjoint( const Matrix<T>& A, Matrix<T>& B )$/;"	f	namespace:elem
AdjointColAllGather	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointColAllGather$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointColAllGather	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointColAllGather( DistMatrix<T,V,UGath>& A ) const$/;"	f	class:elem::GeneralDistMatrix
AdjointColFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointColFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointColFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointColFilterFrom( const DistMatrix<T,V,UGath>& A )$/;"	f	class:elem::GeneralDistMatrix
AdjointColSumScatterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointColSumScatterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointColSumScatterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointColSumScatterFrom$/;"	f	class:elem::GeneralDistMatrix
AdjointColSumScatterUpdate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointColSumScatterUpdate$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointColSumScatterUpdate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointColSumScatterUpdate$/;"	f	class:elem::GeneralDistMatrix
AdjointPartialColAllGather	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointPartialColAllGather$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointPartialColAllGather	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointPartialColAllGather$/;"	f	class:elem::GeneralDistMatrix
AdjointPartialColFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointPartialColFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointPartialColFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointPartialColFilterFrom$/;"	f	class:elem::GeneralDistMatrix
AdjointPartialColSumScatterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointPartialColSumScatterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointPartialColSumScatterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointPartialColSumScatterFrom$/;"	f	class:elem::GeneralDistMatrix
AdjointPartialColSumScatterUpdate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointPartialColSumScatterUpdate$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointPartialColSumScatterUpdate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointPartialColSumScatterUpdate$/;"	f	class:elem::GeneralDistMatrix
AdjointPartialRowFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointPartialRowFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointPartialRowFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointPartialRowFilterFrom$/;"	f	class:elem::GeneralDistMatrix
AdjointRowFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AdjointRowFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
AdjointRowFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AdjointRowFilterFrom( const DistMatrix<T,VGath,U>& A )$/;"	f	class:elem::GeneralDistMatrix
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Advance	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
AfterCholesky	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/Cholesky.hpp	/^AfterCholesky( UpperOrLower uplo, const DistMatrix<F>& A )$/;"	f	namespace:elem::hpd_det
AfterCholesky	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/Cholesky.hpp	/^AfterCholesky( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem::hpd_det
AfterLUPartialPiv	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General/LUPartialPiv.hpp	/^AfterLUPartialPiv( DistMatrix<F>& A, const DistMatrix<Int,VC,STAR>& pPerm )$/;"	f	namespace:elem::inverse
AfterLUPartialPiv	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General/LUPartialPiv.hpp	/^AfterLUPartialPiv( Matrix<F>& A, const Matrix<Int>& pPerm )$/;"	f	namespace:elem::inverse
AfterLUPartialPiv	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/LUPartialPiv.hpp	/^AfterLUPartialPiv$/;"	f	namespace:elem::det
AfterLUPartialPiv	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/LUPartialPiv.hpp	/^AfterLUPartialPiv( const Matrix<F>& A, const Matrix<Int>& pPerm )$/;"	f	namespace:elem::det
Aint	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^typedef MPI_Aint Aint;$/;"	t	namespace:elem::mpi
Akernel	src/madness/tensor/gfit.cc	/^double Akernel(double p) {$/;"	f
Align	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Align$/;"	f	class:elem::AbstractBlockDistMatrix
Align	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Align( Int colAlign, Int rowAlign, bool constrain )$/;"	f	class:elem::AbstractDistMatrix
AlignAndResize	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AlignAndResize$/;"	f	class:elem::AbstractBlockDistMatrix
AlignAndResize	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AlignAndResize$/;"	f	class:elem::AbstractDistMatrix
AlignCols	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AlignCols$/;"	f	class:elem::AbstractBlockDistMatrix
AlignCols	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AlignCols( Int colAlign, bool constrain )$/;"	f	class:elem::AbstractDistMatrix
AlignColsAndResize	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AlignColsAndResize$/;"	f	class:elem::AbstractBlockDistMatrix
AlignColsAndResize	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AlignColsAndResize$/;"	f	class:elem::AbstractDistMatrix
AlignColsWith	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AlignColsWith$/;"	f	class:elem::AbstractBlockDistMatrix
AlignColsWith	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AlignColsWith$/;"	f	class:elem::GeneralBlockDistMatrix
AlignColsWith	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AlignColsWith$/;"	f	class:elem::AbstractDistMatrix
AlignColsWith	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AlignColsWith$/;"	f	class:elem::GeneralDistMatrix
AlignRows	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AlignRows$/;"	f	class:elem::AbstractBlockDistMatrix
AlignRows	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AlignRows( Int rowAlign, bool constrain )$/;"	f	class:elem::AbstractDistMatrix
AlignRowsAndResize	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AlignRowsAndResize$/;"	f	class:elem::AbstractBlockDistMatrix
AlignRowsAndResize	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AlignRowsAndResize$/;"	f	class:elem::AbstractDistMatrix
AlignRowsWith	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AlignRowsWith$/;"	f	class:elem::AbstractBlockDistMatrix
AlignRowsWith	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AlignRowsWith$/;"	f	class:elem::GeneralBlockDistMatrix
AlignRowsWith	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AlignRowsWith$/;"	f	class:elem::AbstractDistMatrix
AlignRowsWith	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AlignRowsWith$/;"	f	class:elem::GeneralDistMatrix
AlignWith	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AlignWith$/;"	f	class:elem::AbstractBlockDistMatrix
AlignWith	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AlignWith$/;"	f	class:elem::AbstractDistMatrix
AllGather	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::AllGather$/;"	f	class:elem::GeneralBlockDistMatrix
AllGather	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::AllGather( DistMatrix<T,UGath,VGath>& A ) const$/;"	f	class:elem::GeneralDistMatrix
AllGather	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void AllGather$/;"	f	namespace:elem::mpi
AllReduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T AllReduce( T sb, Comm comm )$/;"	f	namespace:elem::mpi
AllReduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T AllReduce( T sb, Op op, Comm comm )$/;"	f	namespace:elem::mpi
AllReduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void AllReduce$/;"	f	namespace:elem::mpi
AllReduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void AllReduce( Complex<R>* buf, int count, Op op, Comm comm )$/;"	f	namespace:elem::mpi
AllReduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void AllReduce( T* buf, int count, Comm comm )$/;"	f	namespace:elem::mpi
AllReduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void AllReduce( T* buf, int count, Op op, Comm comm )$/;"	f	namespace:elem::mpi
AllReduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void AllReduce( const T* sbuf, T* rbuf, int count, Comm comm )$/;"	f	namespace:elem::mpi
AllReduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void AllReduce( const T* sbuf, T* rbuf, int count, Op op, Comm comm )$/;"	f	namespace:elem::mpi
AllReduceTag	src/madness/world/worldgop.h	/^        struct AllReduceTag { };$/;"	s	class:madness::WorldGopInterface
AllToAll	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void AllToAll$/;"	f	namespace:elem::mpi
AllocatedMemory	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AllocatedMemory() const $/;"	f	class:elem::AbstractBlockDistMatrix
AllocatedMemory	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AllocatedMemory() const { return matrix_.MemorySize(); }$/;"	f	class:elem::AbstractDistMatrix
Allreduce	src/madness/world/safempi.h	/^        void Allreduce(const void* sendbuf, void* recvbuf, const int count, const MPI_Datatype datatype, const MPI_Op op) const {$/;"	f	class:SafeMPI::Intracomm
AlmostEquals	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  bool AlmostEquals(const FloatingPoint& rhs) const {$/;"	f	class:testing::internal::FloatingPoint
AlwaysFalse	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^inline bool AlwaysFalse() { return !AlwaysTrue(); }$/;"	f	namespace:testing::internal
AlwaysTrue	src/madness/external/gtest/src/gtest.cc	/^bool AlwaysTrue() {$/;"	f	namespace:testing::internal
AmArg	src/madness/world/worldam.h	/^        AmArg() {}$/;"	f	class:madness::AmArg
AmArg	src/madness/world/worldam.h	/^    class AmArg {$/;"	c	namespace:madness
AnalysisSorter	src/apps/chem/molecularbasis.h	/^        AnalysisSorter(const Tensor<T>& v) : v(v) {}$/;"	f	class:madness::AtomicBasisSet::AnalysisSorter
AnalysisSorter	src/apps/chem/molecularbasis.h	/^    class AnalysisSorter {$/;"	c	class:madness::AtomicBasisSet
AnalysisSorter	src/apps/hf/molecularbasis.h	/^        AnalysisSorter(const Tensor<T>& v) : v(v) {}$/;"	f	class:AtomicBasisSet::AnalysisSorter
AnalysisSorter	src/apps/hf/molecularbasis.h	/^    class AnalysisSorter {$/;"	c	class:AtomicBasisSet
AnalysisSorter	src/apps/polar/molecularbasis.h	/^        AnalysisSorter(const Tensor<T>& v) : v(v) {}$/;"	f	class:AtomicBasisSet::AnalysisSorter
AnalysisSorter	src/apps/polar/molecularbasis.h	/^    class AnalysisSorter {$/;"	c	class:AtomicBasisSet
Analytic	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Analytic.hpp	/^Analytic$/;"	f	namespace:elem::pspec
AnsiToUtf16	src/madness/external/gtest/src/gtest.cc	/^LPCWSTR String::AnsiToUtf16(const char* ansi) {$/;"	f	class:testing::internal::String
Append	src/madness/external/gtest/src/gtest-test-part.cc	/^void TestPartResultArray::Append(const TestPartResult& result) {$/;"	f	class:testing::TestPartResultArray
Append	src/madness/external/gtest/src/gtest.cc	/^void TestEventListeners::Append(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Append	src/madness/external/gtest/src/gtest.cc	/^void TestEventRepeater::Append(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
AppendMessage	src/madness/external/gtest/include/gtest/gtest.h	/^  void AppendMessage(const Message& a_message) {$/;"	f	class:testing::AssertionResult
AppendUserMessage	src/madness/external/gtest/src/gtest.cc	/^std::string AppendUserMessage(const std::string& gtest_msg,$/;"	f	namespace:testing::internal
ApplyBinOprt	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ApplyBinOprt( ParserStack<token_type> &a_stOpt,$/;"	f	class:mu::ParserBase
ApplyColPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyColPivots.hpp	/^ApplyColPivots$/;"	f	namespace:elem
ApplyColPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyColPivots.hpp	/^ApplyColPivots( Matrix<T>& A, const Matrix<Int>& pivots, Int offset=0 )$/;"	f	namespace:elem
ApplyFunc	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ApplyFunc( ParserStack<token_type> &a_stOpt,$/;"	f	class:mu::ParserBase
ApplyInverseColPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyColPivots.hpp	/^ApplyInverseColPivots$/;"	f	namespace:elem
ApplyInverseColPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyColPivots.hpp	/^ApplyInverseColPivots( Matrix<T>& A, const Matrix<Int>& pivots, Int offset=0 )$/;"	f	namespace:elem
ApplyInverseRowPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyRowPivots.hpp	/^ApplyInverseRowPivots$/;"	f	namespace:elem
ApplyInverseRowPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyRowPivots.hpp	/^ApplyInverseRowPivots( Matrix<T>& A, const Matrix<Int>& pivots, Int offset=0 )$/;"	f	namespace:elem
ApplyInverseSymmetricPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplySymmetricPivots.hpp	/^ApplyInverseSymmetricPivots$/;"	f	namespace:elem
ApplyNumFunc	src/madness/external/muParser/muParserBase.cpp	/^  ParserBase::token_type ParserBase::ApplyNumFunc(const token_type &a_FunTok,$/;"	f	class:mu::ParserBase
ApplyP	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/Apply.hpp	/^ApplyP$/;"	f	namespace:elem::bidiag
ApplyPackedReflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors.hpp	/^ApplyPackedReflectors$/;"	f	namespace:elem
ApplyQ	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/Apply.hpp	/^ApplyQ$/;"	f	namespace:elem::bidiag
ApplyQ	src/madness/external/elemental/include/elemental/lapack-like/condense/HermitianTridiag/ApplyQ.hpp	/^ApplyQ$/;"	f	namespace:elem::herm_tridiag
ApplyQ	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/ApplyQ.hpp	/^ApplyQ$/;"	f	namespace:elem::hessenberg
ApplyQ	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/ApplyQ.hpp	/^ApplyQ$/;"	f	namespace:elem::lq
ApplyQ	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/ApplyQ.hpp	/^ApplyQ$/;"	f	namespace:elem::qr
ApplyQ	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/ApplyQ.hpp	/^ApplyQ$/;"	f	namespace:elem::rq
ApplyRowPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyRowPivots.hpp	/^ApplyRowPivots$/;"	f	namespace:elem
ApplyRowPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyRowPivots.hpp	/^ApplyRowPivots( Matrix<T>& A, const Matrix<Int>& pivots, Int offset=0 )$/;"	f	namespace:elem
ApplyStrFunc	src/madness/external/muParser/muParserBase.cpp	/^  ParserBase::token_type ParserBase::ApplyStrFunc(const token_type &a_FunTok,$/;"	f	class:mu::ParserBase
ApplySymmetricPivots	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplySymmetricPivots.hpp	/^ApplySymmetricPivots$/;"	f	namespace:elem
ApplyTerms	src/madness/mra/operator.h	/^            ApplyTerms() : r_term(false), t_term(false) {}$/;"	f	struct:madness::SeparatedConvolution::ApplyTerms
ApplyTerms	src/madness/mra/operator.h	/^        struct ApplyTerms {$/;"	s	class:madness::SeparatedConvolution
ArchiveImpl	src/madness/world/archive.h	/^        struct ArchiveImpl {$/;"	s	namespace:madness::archive
ArchiveImpl	src/madness/world/archive.h	/^        struct ArchiveImpl< Archive, archive_array<T> > {$/;"	s	namespace:madness::archive
ArchiveImpl	src/madness/world/archive.h	/^        struct ArchiveImpl<Archive, T[n]> {$/;"	s	namespace:madness::archive
ArchiveImpl	src/madness/world/parallel_archive.h	/^        struct ArchiveImpl< ParallelInputArchive, archive_array<T> > {$/;"	s	namespace:madness::archive
ArchiveImpl	src/madness/world/parallel_archive.h	/^        struct ArchiveImpl< ParallelOutputArchive, archive_array<T> > {$/;"	s	namespace:madness::archive
ArchiveImpl	src/madness/world/parallel_archive.h	/^        struct ArchiveImpl<ParallelInputArchive, T> {$/;"	s	namespace:madness::archive
ArchiveImpl	src/madness/world/parallel_archive.h	/^        struct ArchiveImpl<ParallelInputArchive, T[n]> {$/;"	s	namespace:madness::archive
ArchiveImpl	src/madness/world/parallel_archive.h	/^        struct ArchiveImpl<ParallelOutputArchive, T> {$/;"	s	namespace:madness::archive
ArchiveImpl	src/madness/world/parallel_archive.h	/^        struct ArchiveImpl<ParallelOutputArchive, T[n]> {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/mra/derivative.h	/^        struct ArchiveLoadImpl<Archive,const DerivativeBase<T,NDIM>*> {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/mra/funcimpl.h	/^        struct ArchiveLoadImpl<Archive, FunctionImpl<T,NDIM>*> {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/mra/funcimpl.h	/^        struct ArchiveLoadImpl<Archive, std::shared_ptr<FunctionImpl<T,NDIM> > > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/mra/funcimpl.h	/^        struct ArchiveLoadImpl<Archive, std::shared_ptr<const FunctionImpl<T,NDIM> > > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/mra/funcimpl.h	/^        struct ArchiveLoadImpl<Archive,const FunctionImpl<T,NDIM>*> {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/mra/key.h	/^        struct ArchiveLoadImpl< Archive, Key<NDIM> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/mra/key.h	/^        struct ArchiveLoadImpl< BinaryFstreamInputArchive, Key<NDIM> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/mra/operator.h	/^        struct ArchiveLoadImpl<Archive,const SeparatedConvolution<T,NDIM>*> {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/tensor/gentensor.h	/^	struct ArchiveLoadImpl< Archive, GenTensor<T> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/tensor/gentensor.h	/^struct ArchiveLoadImpl< Archive, GenTensor<T> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/tensor/lowranktensor.h	/^    struct ArchiveLoadImpl< Archive, LowRankTensor<T> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/tensor/tensor.h	/^        struct ArchiveLoadImpl< Archive, Tensor<T> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/archive.h	/^        struct ArchiveLoadImpl {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/archive.h	/^        struct ArchiveLoadImpl< Archive, std::array<T, N> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/archive.h	/^        struct ArchiveLoadImpl< Archive, std::complex<T> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/archive.h	/^        struct ArchiveLoadImpl< Archive, std::map<T,Q,Compare,Alloc> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/archive.h	/^        struct ArchiveLoadImpl< Archive, std::string > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/archive.h	/^        struct ArchiveLoadImpl< Archive, std::vector<T, Alloc> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/archive.h	/^        struct ArchiveLoadImpl< Archive, std::vector<bool, Alloc> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/future.h	/^        struct ArchiveLoadImpl< Archive, Future<T> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/future.h	/^        struct ArchiveLoadImpl< Archive, Future<void> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/future.h	/^        struct ArchiveLoadImpl< Archive, std::vector<Future<T> > > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/test_ar.cc	/^        struct ArchiveLoadImpl<Archive,C> {$/;"	s	namespace:madness::archive	file:
ArchiveLoadImpl	src/madness/world/test_ar.cc	/^        struct ArchiveLoadImpl<Archive,linked_list> {$/;"	s	namespace:madness::archive	file:
ArchiveLoadImpl	src/madness/world/world.h	/^        struct ArchiveLoadImpl<Archive,World*> {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/world_object.h	/^        struct ArchiveLoadImpl<BufferInputArchive, const WorldObject<Derived>*> {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/world_object.h	/^        struct ArchiveLoadImpl<BufferInputArchive,WorldObject<Derived>*> {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/worlddc.h	/^        struct ArchiveLoadImpl< ParallelInputArchive, WorldContainer<keyT,valueT> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/worldptr.h	/^        struct ArchiveLoadImpl<Archive, detail::WorldPtr<T> > {$/;"	s	namespace:madness::archive
ArchiveLoadImpl	src/madness/world/worldref.h	/^        struct ArchiveLoadImpl<Archive, detail::RemoteCounter > {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/archive.h	/^        struct ArchivePrePostImpl {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/buffer_archive.h	/^        struct ArchivePrePostImpl<BufferInputArchive, T> {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/buffer_archive.h	/^        struct ArchivePrePostImpl<BufferOutputArchive, T> {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/mpi_archive.h	/^        struct ArchivePrePostImpl<MPIInputArchive,T> {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/mpi_archive.h	/^        struct ArchivePrePostImpl<MPIOutputArchive,T> {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/mpi_archive.h	/^        struct ArchivePrePostImpl<MPIRawInputArchive,T> {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/mpi_archive.h	/^        struct ArchivePrePostImpl<MPIRawOutputArchive,T> {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/parallel_archive.h	/^        struct ArchivePrePostImpl<ParallelInputArchive,T> {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/parallel_archive.h	/^        struct ArchivePrePostImpl<ParallelOutputArchive,T> {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/text_fstream_archive.h	/^        struct ArchivePrePostImpl<TextFstreamInputArchive,T> {$/;"	s	namespace:madness::archive
ArchivePrePostImpl	src/madness/world/text_fstream_archive.h	/^        struct ArchivePrePostImpl<TextFstreamOutputArchive, T> {$/;"	s	namespace:madness::archive
ArchiveSerializeImpl	src/madness/world/archive.h	/^        struct ArchiveSerializeImpl {$/;"	s	namespace:madness::archive
ArchiveSerializeImpl	src/madness/world/archive.h	/^        struct ArchiveSerializeImpl< Archive, std::pair<T, Q> > {$/;"	s	namespace:madness::archive
ArchiveSerializeImpl	src/madness/world/archive.h	/^        struct ArchiveSerializeImpl< Archive, std::tuple<Types...> > {$/;"	s	namespace:madness::archive
ArchiveSerializeImpl	src/madness/world/archive.h	/^        struct ArchiveSerializeImpl<Archive, resT(*)(paramT...)> {$/;"	s	namespace:madness::archive
ArchiveSerializeImpl	src/madness/world/archive.h	/^        struct ArchiveSerializeImpl<Archive, resT(objT::*)(paramT...) const> {$/;"	s	namespace:madness::archive
ArchiveSerializeImpl	src/madness/world/archive.h	/^        struct ArchiveSerializeImpl<Archive, resT(objT::*)(paramT...)> {$/;"	s	namespace:madness::archive
ArchiveSerializeImpl	src/madness/world/test_ar.cc	/^        struct ArchiveSerializeImpl<Archive,B> {$/;"	s	namespace:madness::archive	file:
ArchiveSerializeImpl	src/madness/world/test_hashdc.cc	/^        struct ArchiveSerializeImpl<Archive,Key> {$/;"	s	namespace:madness::archive	file:
ArchiveStoreImpl	src/madness/mra/derivative.h	/^        struct ArchiveStoreImpl<Archive,const DerivativeBase<T,NDIM>*> {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/mra/funcimpl.h	/^        struct ArchiveStoreImpl<Archive, FunctionImpl<T,NDIM>*> {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/mra/funcimpl.h	/^        struct ArchiveStoreImpl<Archive, std::shared_ptr<FunctionImpl<T,NDIM> > > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/mra/funcimpl.h	/^        struct ArchiveStoreImpl<Archive, std::shared_ptr<const FunctionImpl<T,NDIM> > > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/mra/funcimpl.h	/^        struct ArchiveStoreImpl<Archive,const FunctionImpl<T,NDIM>*> {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/mra/key.h	/^        struct ArchiveStoreImpl< Archive, Key<NDIM> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/mra/operator.h	/^        struct ArchiveStoreImpl<Archive,const SeparatedConvolution<T,NDIM>*> {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/tensor/gentensor.h	/^	struct ArchiveStoreImpl< Archive, GenTensor<T> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/tensor/gentensor.h	/^struct ArchiveStoreImpl< Archive, GenTensor<T> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/tensor/lowranktensor.h	/^    struct ArchiveStoreImpl< Archive, LowRankTensor<T> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/tensor/tensor.h	/^        struct ArchiveStoreImpl< Archive, Tensor<T> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/archive.h	/^        struct ArchiveStoreImpl {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/archive.h	/^        struct ArchiveStoreImpl< Archive, std::array<T, N> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/archive.h	/^        struct ArchiveStoreImpl< Archive, std::complex<T> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/archive.h	/^        struct ArchiveStoreImpl< Archive, std::map<T,Q,Compare,Alloc> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/archive.h	/^        struct ArchiveStoreImpl< Archive, std::string > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/archive.h	/^        struct ArchiveStoreImpl< Archive, std::vector<T, Alloc> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/archive.h	/^        struct ArchiveStoreImpl< Archive, std::vector<bool, Alloc> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/future.h	/^        struct ArchiveStoreImpl< Archive, Future<T> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/future.h	/^        struct ArchiveStoreImpl< Archive, Future<void> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/future.h	/^        struct ArchiveStoreImpl< Archive, std::vector<Future<T> > > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/test_ar.cc	/^        struct ArchiveStoreImpl<Archive,C> {$/;"	s	namespace:madness::archive	file:
ArchiveStoreImpl	src/madness/world/test_ar.cc	/^        struct ArchiveStoreImpl<Archive,linked_list> {$/;"	s	namespace:madness::archive	file:
ArchiveStoreImpl	src/madness/world/world.h	/^        struct ArchiveStoreImpl<Archive,World*> {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/world_object.h	/^        struct ArchiveStoreImpl<BufferOutputArchive, const WorldObject<Derived>*> {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/world_object.h	/^        struct ArchiveStoreImpl<BufferOutputArchive,WorldObject<Derived>*> {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/worlddc.h	/^        struct ArchiveStoreImpl< ParallelOutputArchive, WorldContainer<keyT,valueT> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/worldptr.h	/^        struct ArchiveStoreImpl<Archive, detail::WorldPtr<T> > {$/;"	s	namespace:madness::archive
ArchiveStoreImpl	src/madness/world/worldref.h	/^        struct ArchiveStoreImpl<Archive, detail::RemoteCounter > {$/;"	s	namespace:madness::archive
Arg	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Arg( const F& alpha )$/;"	f	namespace:elem
ArgCount	src/madness/world/taskfn.h	/^        struct ArgCount : public std::integral_constant<unsigned int, ArgCountHelper<a1T>::value$/;"	s	namespace:madness::detail
ArgCountHelper	src/madness/world/taskfn.h	/^        struct ArgCountHelper {$/;"	s	namespace:madness::detail
ArgCountHelper	src/madness/world/taskfn.h	/^        struct ArgCountHelper<void> {$/;"	s	namespace:madness::detail
ArgException	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    ArgException( const char* msg="" ) : std::logic_error( msg ) { }$/;"	f	class:elem::ArgException
ArgException	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^class ArgException : public std::logic_error$/;"	c	namespace:elem
ArgHolder	src/madness/world/taskfn.h	/^            ArgHolder(Arg_&& arg) : arg_(arg) { }$/;"	f	class:madness::detail::ArgHolder
ArgHolder	src/madness/world/taskfn.h	/^            ArgHolder(const archive::BufferInputArchive& input_arch) :$/;"	f	class:madness::detail::ArgHolder
ArgHolder	src/madness/world/taskfn.h	/^        class ArgHolder : private NO_DEFAULTS{$/;"	c	namespace:madness::detail
Args	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^    Args$/;"	f	class:elem::Args
Args	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^class Args : public choice::MpiArgs$/;"	c	namespace:elem
Args	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^Args::Args( int argc, char** argv, std::ostream& error )$/;"	f	class:elem::choice::Args
Args	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^class Args$/;"	c	namespace:elem::choice
Arguments	src/madness/external/gtest/src/gtest-death-test.cc	/^  Arguments() {$/;"	f	class:testing::internal::Arguments
Arguments	src/madness/external/gtest/src/gtest-death-test.cc	/^class Arguments {$/;"	c	namespace:testing::internal	file:
Argv	src/madness/external/gtest/src/gtest-death-test.cc	/^  char* const* Argv() {$/;"	f	class:testing::internal::Arguments
Array	src/apps/hf/test_comm.cc	/^    Array(World& world, size_t size)$/;"	f	class:Array
Array	src/apps/hf/test_comm.cc	/^class Array : public WorldObject<Array> {$/;"	c	file:
Array	src/apps/hf/testconv.cc	/^    Array(World& world, size_t size)$/;"	f	class:Array
Array	src/apps/hf/testconv.cc	/^class Array : public WorldObject<Array> {$/;"	c	file:
Array	src/examples/array_worldobject.cc	/^    Array(World& world, size_t size) $/;"	f	class:Array
Array	src/examples/array_worldobject.cc	/^class Array : public WorldObject<Array> {$/;"	c	file:
Array	src/madness/world/test_future2.cc	/^    Array(World& world, size_t size)$/;"	f	class:Array
Array	src/madness/world/test_future2.cc	/^class Array : public WorldObject<Array> {$/;"	c	file:
ArrayAsVector	src/madness/external/gtest/src/gtest.cc	/^std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {$/;"	f	namespace:testing
ArrayAwareFind	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {$/;"	f	namespace:testing::internal
ArrayEq	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^bool ArrayEq(const T* lhs, size_t size, const U* rhs) {$/;"	f	namespace:testing::internal
ArrayEq	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }$/;"	f	namespace:testing::internal
Ascii	src/madness/external/elemental/include/elemental/io/Read/Ascii.hpp	/^Ascii( BlockDistMatrix<T,U,V>& A, const std::string filename )$/;"	f	namespace:elem::read
Ascii	src/madness/external/elemental/include/elemental/io/Read/Ascii.hpp	/^Ascii( DistMatrix<T,U,V>& A, const std::string filename )$/;"	f	namespace:elem::read
Ascii	src/madness/external/elemental/include/elemental/io/Read/Ascii.hpp	/^Ascii( Matrix<T>& A, const std::string filename )$/;"	f	namespace:elem::read
Ascii	src/madness/external/elemental/include/elemental/io/Write/Ascii.hpp	/^Ascii( const Matrix<T>& A, std::string basename="matrix", std::string title="" )$/;"	f	namespace:elem::write
AsciiDump	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::AsciiDump()$/;"	f	class:mu::ParserByteCode
AsciiMatlab	src/madness/external/elemental/include/elemental/io/Read/AsciiMatlab.hpp	/^AsciiMatlab( BlockDistMatrix<T,U,V>& A, const std::string filename )$/;"	f	namespace:elem::read
AsciiMatlab	src/madness/external/elemental/include/elemental/io/Read/AsciiMatlab.hpp	/^AsciiMatlab( DistMatrix<T,U,V>& A, const std::string filename )$/;"	f	namespace:elem::read
AsciiMatlab	src/madness/external/elemental/include/elemental/io/Read/AsciiMatlab.hpp	/^AsciiMatlab( Matrix<T>& A, const std::string filename )$/;"	f	namespace:elem::read
AsciiMatlab	src/madness/external/elemental/include/elemental/io/Write/AsciiMatlab.hpp	/^AsciiMatlab$/;"	f	namespace:elem::write
Asin	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Asin( const F& alpha )$/;"	f	namespace:elem
Asinh	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Asinh( const F& alpha )$/;"	f	namespace:elem
AssertConforming1x2	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AssertConforming1x2$/;"	f	namespace:elem
AssertConforming1x2	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AssertConforming1x2$/;"	f	namespace:elem
AssertConforming2x1	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AssertConforming2x1$/;"	f	namespace:elem
AssertConforming2x1	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AssertConforming2x1$/;"	f	namespace:elem
AssertConforming2x2	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AssertConforming2x2$/;"	f	namespace:elem
AssertConforming2x2	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AssertConforming2x2$/;"	f	namespace:elem
AssertHeld	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void AssertHeld() const {$/;"	f	class:testing::internal::MutexBase
AssertHeld	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void AssertHeld() const {}$/;"	f	class:testing::internal::Mutex
AssertHelper	src/madness/external/gtest/include/gtest/gtest.h	/^class GTEST_API_ AssertHelper {$/;"	c	namespace:testing::internal
AssertHelper	src/madness/external/gtest/src/gtest.cc	/^AssertHelper::AssertHelper(TestPartResult::Type type,$/;"	f	class:testing::internal::AssertHelper
AssertHelperData	src/madness/external/gtest/include/gtest/gtest.h	/^    AssertHelperData(TestPartResult::Type t,$/;"	f	struct:testing::internal::AssertHelper::AssertHelperData
AssertHelperData	src/madness/external/gtest/include/gtest/gtest.h	/^  struct AssertHelperData {$/;"	s	class:testing::internal::AssertHelper
AssertNotLocked	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AssertNotLocked() const$/;"	f	class:elem::AbstractBlockDistMatrix
AssertNotLocked	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AssertNotLocked() const$/;"	f	class:elem::AbstractDistMatrix
AssertNotStoringData	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AssertNotStoringData() const$/;"	f	class:elem::AbstractBlockDistMatrix
AssertNotStoringData	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AssertNotStoringData() const$/;"	f	class:elem::AbstractDistMatrix
AssertPred1Helper	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred1Helper(const char* pred_text,$/;"	f
AssertPred2Helper	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred2Helper(const char* pred_text,$/;"	f
AssertPred3Helper	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred3Helper(const char* pred_text,$/;"	f
AssertPred4Helper	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred4Helper(const char* pred_text,$/;"	f
AssertPred5Helper	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred5Helper(const char* pred_text,$/;"	f
AssertSameGrid	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AssertSameGrid( const elem::Grid& grid ) const$/;"	f	class:elem::AbstractBlockDistMatrix
AssertSameGrid	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AssertSameGrid( const elem::Grid& grid ) const$/;"	f	class:elem::AbstractDistMatrix
AssertSameSize	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AssertSameSize( Int height, Int width ) const$/;"	f	class:elem::AbstractBlockDistMatrix
AssertSameSize	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AssertSameSize( Int height, Int width ) const$/;"	f	class:elem::AbstractDistMatrix
AssertTypeEq	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct AssertTypeEq<T, T> {$/;"	s	namespace:testing::internal
AssertValidDimensions	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::AssertValidDimensions( Int height, Int width ) const$/;"	f	class:elem::Matrix
AssertValidDimensions	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::AssertValidDimensions( Int height, Int width, Int ldim ) const$/;"	f	class:elem::Matrix
AssertValidEntry	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AssertValidEntry( Int i, Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
AssertValidEntry	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AssertValidEntry( Int i, Int j ) const$/;"	f	class:elem::AbstractDistMatrix
AssertValidEntry	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::AssertValidEntry( Int i, Int j ) const$/;"	f	class:elem::Matrix
AssertValidSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::AssertValidSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
AssertValidSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::AssertValidSubmatrix$/;"	f	class:elem::AbstractDistMatrix
AssertionFailure	src/madness/external/gtest/src/gtest.cc	/^AssertionResult AssertionFailure() {$/;"	f	namespace:testing
AssertionFailure	src/madness/external/gtest/src/gtest.cc	/^AssertionResult AssertionFailure(const Message& message) {$/;"	f	namespace:testing
AssertionResult	src/madness/external/gtest/include/gtest/gtest.h	/^  explicit AssertionResult(bool success) : success_(success) {}$/;"	f	class:testing::AssertionResult
AssertionResult	src/madness/external/gtest/include/gtest/gtest.h	/^class GTEST_API_ AssertionResult {$/;"	c	namespace:testing
AssertionResult	src/madness/external/gtest/src/gtest.cc	/^AssertionResult::AssertionResult(const AssertionResult& other)$/;"	f	class:testing::AssertionResult
AssertionSuccess	src/madness/external/gtest/src/gtest.cc	/^AssertionResult AssertionSuccess() {$/;"	f	namespace:testing
Assign	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::Assign(const ParserBase &a_Parser)$/;"	f	class:mu::ParserBase
Assign	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::Assign(const ParserByteCode &a_ByteCode)$/;"	f	class:mu::ParserByteCode
Assign	src/madness/external/muParser/muParserToken.h	/^      void Assign(const ParserToken &a_Tok)$/;"	f	class:mu::ParserToken
Assign	src/madness/external/muParser/muParserTokenReader.cpp	/^  void ParserTokenReader::Assign(const ParserTokenReader &a_Reader)$/;"	f	class:mu::ParserTokenReader
AssumeRole	src/madness/external/gtest/src/gtest-death-test.cc	/^DeathTest::TestRole ExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::ExecDeathTest
AssumeRole	src/madness/external/gtest/src/gtest-death-test.cc	/^DeathTest::TestRole NoExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::NoExecDeathTest
AssumeRole	src/madness/external/gtest/src/gtest-death-test.cc	/^DeathTest::TestRole WindowsDeathTest::AssumeRole() {$/;"	f	class:testing::internal::WindowsDeathTest
AtEnd	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
AtEnd	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
AtEnd	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
AtEnd	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
AtEnd	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
AtEnd	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
AtEnd	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
AtEnd	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
AtEnd	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Atan	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Atan( const F& alpha )$/;"	f	namespace:elem
Atan2	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Atan2( const Real& y, const Real& x )$/;"	f	namespace:elem
Atanh	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Atanh( const F& alpha )$/;"	f	namespace:elem
Atom	src/apps/adrian/ESInterface.h	/^struct Atom {$/;"	s	namespace:slymer
Atom	src/apps/bryan/ESInterface.h	/^struct Atom {$/;"	s	namespace:slymer
Atom	src/apps/chem/molecule.h	/^    Atom() : x(0), y(0), z(0), q(0), atomic_number(0), mass(0.0), pseudo_atom(false) {}$/;"	f	class:madness::Atom
Atom	src/apps/chem/molecule.h	/^    Atom(const Atom& a) : x(a.x), y(a.y), z(a.z), q(a.q),$/;"	f	class:madness::Atom
Atom	src/apps/chem/molecule.h	/^    explicit Atom(double x, double y, double z, double q, unsigned int atomic_number)$/;"	f	class:madness::Atom
Atom	src/apps/chem/molecule.h	/^    explicit Atom(double x, double y, double z, double q, unsigned int atomic_number, bool pseudo_atom)$/;"	f	class:madness::Atom
Atom	src/apps/chem/molecule.h	/^class Atom {$/;"	c	namespace:madness
Atom	src/apps/hf/mentity.h	/^    Atom()$/;"	f	class:Atom
Atom	src/apps/hf/mentity.h	/^    Atom(const Atom& a)$/;"	f	class:Atom
Atom	src/apps/hf/mentity.h	/^    Atom(double x, double y, double z, double q, unsigned int atomic_number)$/;"	f	class:Atom
Atom	src/apps/hf/mentity.h	/^class Atom {$/;"	c
Atom	src/apps/polar/molecule.h	/^    Atom()$/;"	f	class:Atom
Atom	src/apps/polar/molecule.h	/^    Atom(const Atom& a)$/;"	f	class:Atom
Atom	src/apps/polar/molecule.h	/^    explicit Atom(double x, double y, double z, double q, unsigned int atomic_number)$/;"	f	class:Atom
Atom	src/apps/polar/molecule.h	/^class Atom {$/;"	c
AtomCore	src/apps/chem/corepotential.h	/^    AtomCore() : atomic_number(0), ncore(0), orbital(), potential() {};$/;"	f	struct:madness::AtomCore
AtomCore	src/apps/chem/corepotential.h	/^struct AtomCore {$/;"	s	namespace:madness
AtomCore	src/apps/polar/corepotential.h	/^    AtomCore() : atomic_number(0), ncore(0), orbital(), potential() {};$/;"	f	struct:AtomCore
AtomCore	src/apps/polar/corepotential.h	/^struct AtomCore {$/;"	s
AtomMatchesChar	src/madness/external/gtest/src/gtest-port.cc	/^bool AtomMatchesChar(bool escaped, char pattern_char, char ch) {$/;"	f	namespace:testing::internal
Atomic operations on integers madatomic h	doc/Latex/api.tex	/^\\subsubsection{Atomic operations on integers (madatomic.h)}$/;"	b
AtomicAttractionFunctor	src/apps/chem/SCF.h	/^	AtomicAttractionFunctor(const Molecule& molecule, int iatom)$/;"	f	class:madness::AtomicAttractionFunctor
AtomicAttractionFunctor	src/apps/chem/SCF.h	/^class AtomicAttractionFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
AtomicBasis	src/apps/chem/molecularbasis.h	/^    AtomicBasis() : g(), rmaxsq(0.0), numbf(0) {};$/;"	f	class:madness::AtomicBasis
AtomicBasis	src/apps/chem/molecularbasis.h	/^    AtomicBasis(const std::vector<ContractedGaussianShell>& g)$/;"	f	class:madness::AtomicBasis
AtomicBasis	src/apps/chem/molecularbasis.h	/^class AtomicBasis {$/;"	c	namespace:madness
AtomicBasis	src/apps/hf/molecularbasis.h	/^    AtomicBasis() : g(), rmaxsq(0.0), numbf(0) {};$/;"	f	class:AtomicBasis
AtomicBasis	src/apps/hf/molecularbasis.h	/^    AtomicBasis(const std::vector<ContractedGaussianShell>& g)$/;"	f	class:AtomicBasis
AtomicBasis	src/apps/hf/molecularbasis.h	/^class AtomicBasis {$/;"	c
AtomicBasis	src/apps/polar/molecularbasis.h	/^    AtomicBasis() : g(), rmaxsq(0.0), numbf(0) {};$/;"	f	class:AtomicBasis
AtomicBasis	src/apps/polar/molecularbasis.h	/^    AtomicBasis(const std::vector<ContractedGaussianShell>& g)$/;"	f	class:AtomicBasis
AtomicBasis	src/apps/polar/molecularbasis.h	/^class AtomicBasis {$/;"	c
AtomicBasisFunction	src/apps/chem/molecularbasis.h	/^    AtomicBasisFunction(const AtomicBasisFunction& aofunc)$/;"	f	class:madness::AtomicBasisFunction
AtomicBasisFunction	src/apps/chem/molecularbasis.h	/^    AtomicBasisFunction(double x, double y, double z,$/;"	f	class:madness::AtomicBasisFunction
AtomicBasisFunction	src/apps/chem/molecularbasis.h	/^class AtomicBasisFunction {$/;"	c	namespace:madness
AtomicBasisFunction	src/apps/hf/molecularbasis.h	/^    AtomicBasisFunction(const AtomicBasisFunction& aofunc)$/;"	f	class:AtomicBasisFunction
AtomicBasisFunction	src/apps/hf/molecularbasis.h	/^    AtomicBasisFunction(double x, double y, double z,$/;"	f	class:AtomicBasisFunction
AtomicBasisFunction	src/apps/hf/molecularbasis.h	/^class AtomicBasisFunction {$/;"	c
AtomicBasisFunction	src/apps/polar/molecularbasis.h	/^    AtomicBasisFunction(const AtomicBasisFunction& aofunc)$/;"	f	class:AtomicBasisFunction
AtomicBasisFunction	src/apps/polar/molecularbasis.h	/^    AtomicBasisFunction(double x, double y, double z,$/;"	f	class:AtomicBasisFunction
AtomicBasisFunction	src/apps/polar/molecularbasis.h	/^class AtomicBasisFunction {$/;"	c
AtomicBasisFunctor	src/apps/chem/SCF.h	/^	AtomicBasisFunctor(const AtomicBasisFunction& aofunc)$/;"	f	class:madness::AtomicBasisFunctor
AtomicBasisFunctor	src/apps/chem/SCF.h	/^class AtomicBasisFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
AtomicBasisFunctor	src/apps/hf/electronicstructureapp.h	/^  AtomicBasisFunctor(const AtomicBasisFunction& aofunc, double R, $/;"	f	class:AtomicBasisFunctor
AtomicBasisFunctor	src/apps/hf/electronicstructureapp.h	/^class AtomicBasisFunctor : public FunctionFunctorInterface<std::complex<double>,3> {$/;"	c
AtomicBasisFunctor	src/apps/moldft/preal.cc	/^    AtomicBasisFunctor(const AtomicBasisFunction& aofunc)$/;"	f	class:AtomicBasisFunctor
AtomicBasisFunctor	src/apps/moldft/preal.cc	/^class AtomicBasisFunctor : public FunctionFunctorInterface<Q,3> {$/;"	c	file:
AtomicBasisFunctor	src/apps/moldft/testperiodic.cc	/^    AtomicBasisFunctor(const AtomicBasisFunction& aofunc, double kx, double ky, double kz)$/;"	f	class:AtomicBasisFunctor
AtomicBasisFunctor	src/apps/moldft/testperiodic.cc	/^class AtomicBasisFunctor : public FunctionFunctorInterface<double_complex,3> {$/;"	c	file:
AtomicBasisFunctor	src/apps/polar/moldft.cc	/^    AtomicBasisFunctor(const AtomicBasisFunction &aofunc)$/;"	f	class:AtomicBasisFunctor
AtomicBasisFunctor	src/apps/polar/moldft.cc	/^class AtomicBasisFunctor : public FunctionFunctorInterface<double, 3>$/;"	c	file:
AtomicBasisFunctor	src/apps/polar/preal.cc	/^    AtomicBasisFunctor(const AtomicBasisFunction& aofunc)$/;"	f	class:AtomicBasisFunctor
AtomicBasisFunctor	src/apps/polar/preal.cc	/^class AtomicBasisFunctor : public FunctionFunctorInterface<Q,3> {$/;"	c	file:
AtomicBasisFunctor	src/apps/polar/testperiodic.cc	/^    AtomicBasisFunctor(const AtomicBasisFunction& aofunc)$/;"	f	class:AtomicBasisFunctor
AtomicBasisFunctor	src/apps/polar/testperiodic.cc	/^class AtomicBasisFunctor : public FunctionFunctorInterface<double_complex,3> {$/;"	c	file:
AtomicBasisSet	src/apps/chem/molecularbasis.h	/^    AtomicBasisSet() : name("unknown"), ag(110) {}$/;"	f	class:madness::AtomicBasisSet
AtomicBasisSet	src/apps/chem/molecularbasis.h	/^    AtomicBasisSet(std::string filename) : name(""), ag(110) {$/;"	f	class:madness::AtomicBasisSet
AtomicBasisSet	src/apps/chem/molecularbasis.h	/^class AtomicBasisSet {$/;"	c	namespace:madness
AtomicBasisSet	src/apps/hf/molecularbasis.h	/^    AtomicBasisSet() : name("unknown"), ag(110) {}$/;"	f	class:AtomicBasisSet
AtomicBasisSet	src/apps/hf/molecularbasis.h	/^    AtomicBasisSet(std::string filename) : name(""), ag(110) {$/;"	f	class:AtomicBasisSet
AtomicBasisSet	src/apps/hf/molecularbasis.h	/^class AtomicBasisSet {$/;"	c
AtomicBasisSet	src/apps/polar/molecularbasis.h	/^    AtomicBasisSet() : name("unknown"), ag(110) {}$/;"	f	class:AtomicBasisSet
AtomicBasisSet	src/apps/polar/molecularbasis.h	/^    AtomicBasisSet(std::string filename) : name(""), ag(110) {$/;"	f	class:AtomicBasisSet
AtomicBasisSet	src/apps/polar/molecularbasis.h	/^class AtomicBasisSet {$/;"	c
AtomicData	src/apps/chem/atomutil.h	/^struct AtomicData  {$/;"	s	namespace:madness
AtomicData	src/apps/hf/mentity.h	/^struct AtomicData {$/;"	s
AtomicData	src/apps/polar/atomutil.h	/^struct AtomicData {$/;"	s
AtomicInt	src/madness/world/atomicint.h	/^    class AtomicInt {$/;"	c	namespace:madness
AtomicOrbitalFunctor	src/apps/moldft/testperiodic.cc	/^    AtomicOrbitalFunctor(const AtomicBasisFunction& aofunc, double R, int offx, int offy, int offz)$/;"	f	class:AtomicOrbitalFunctor
AtomicOrbitalFunctor	src/apps/moldft/testperiodic.cc	/^class AtomicOrbitalFunctor: public FunctionFunctorInterface<double,3> {$/;"	c	file:
Atoms	src/apps/adrian/ESInterface.h	/^  constexpr Properties Atoms = 1 << 1; \/\/\/< The atoms & positions.$/;"	m	namespace:slymer::Properties
Atoms	src/apps/bryan/ESInterface.h	/^  constexpr Properties Atoms = 1 << 1; \/\/\/< The atoms & positions.$/;"	m	namespace:slymer::Properties
Attach	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::Attach( AxpyType type, DistMatrix<T,MC,MR>& Z )$/;"	f	class:elem::AxpyInterface
Attach	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::Attach( AxpyType type, const DistMatrix<T,MC,MR>& X )$/;"	f	class:elem::AxpyInterface
Attach	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Attach$/;"	f	class:elem::AbstractBlockDistMatrix
Attach	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Attach$/;"	f	class:elem::AbstractDistMatrix
Attach	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Attach( Int height, Int width, T* buffer, Int ldim )$/;"	f	class:elem::Matrix
Attach_	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Attach_( Int height, Int width, T* buffer, Int ldim )$/;"	f	class:elem::Matrix
Attach_buffer	src/madness/world/safempi.h	/^    inline void Attach_buffer(void* buffer, int size) {$/;"	f	namespace:SafeMPI
Attribute	src/madness/external/tinyxml/tinyxml.cc	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement
Attribute	src/madness/external/tinyxml/tinyxml.cc	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement
Attribute	src/madness/external/tinyxml/tinyxml.cc	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement
Attribute	src/madness/external/tinyxml/tinyxml.cc	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement
Attribute	src/madness/external/tinyxml/tinyxml.cc	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement
Attribute	src/madness/external/tinyxml/tinyxml.cc	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement
AutoHandle	src/madness/external/gtest/src/gtest-internal-inl.h	/^  AutoHandle() : handle_(INVALID_HANDLE_VALUE) {}$/;"	f	class:testing::internal::AutoHandle
AutoHandle	src/madness/external/gtest/src/gtest-internal-inl.h	/^  explicit AutoHandle(HANDLE handle) : handle_(handle) {}$/;"	f	class:testing::internal::AutoHandle
AutoHandle	src/madness/external/gtest/src/gtest-internal-inl.h	/^class AutoHandle {$/;"	c	namespace:testing::internal
Avg	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Avg(const value_type *a_afArg, int a_iArgc)$/;"	f	class:mu::Parser
Avogadro_constant	src/madness/constants.h	/^        const double Avogadro_constant =  6.02214179e23 ; \/\/     0.00000030 e23      mol^-1$/;"	m	namespace:madness::constants
Ax	src/madness/mra/tools/mathutil.py	/^    Ax = mxv(A,x)$/;"	v
Axpy	src/madness/external/elemental/include/elemental/blas-like/level1/Axpy.hpp	/^Axpy$/;"	f	namespace:elem
Axpy	src/madness/external/elemental/include/elemental/blas-like/level1/Axpy.hpp	/^Axpy( Base<T> alpha, const Matrix<T>& X, Matrix<T>& Y )$/;"	f	namespace:elem
Axpy	src/madness/external/elemental/include/elemental/blas-like/level1/Axpy.hpp	/^Axpy( T alpha, const DistMatrix<T,U1,V1>& X, DistMatrix<T,U2,V2>& Y )$/;"	f	namespace:elem
Axpy	src/madness/external/elemental/include/elemental/blas-like/level1/Axpy.hpp	/^Axpy( T alpha, const Matrix<T>& X, Matrix<T>& Y )$/;"	f	namespace:elem
Axpy	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::Axpy( T alpha, Matrix<T>& Z, Int i, Int j )$/;"	f	class:elem::AxpyInterface
Axpy	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::Axpy( T alpha, const Matrix<T>& Z, Int i, Int j )$/;"	f	class:elem::AxpyInterface
Axpy	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^inline void Axpy$/;"	f	namespace:elem::blas
Axpy	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Axpy$/;"	f	namespace:elem::blas
AxpyGlobalToLocal	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::AxpyGlobalToLocal$/;"	f	class:elem::AxpyInterface
AxpyInterface	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^class AxpyInterface$/;"	c	namespace:elem
AxpyInterface	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::AxpyInterface$/;"	f	class:elem::AxpyInterface
AxpyInterface	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::AxpyInterface( AxpyType type, DistMatrix<T,MC,MR>& Z )$/;"	f	class:elem::AxpyInterface
AxpyInterface	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::AxpyInterface()$/;"	f	class:elem::AxpyInterface
AxpyLocalToGlobal	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::AxpyLocalToGlobal$/;"	f	class:elem::AxpyInterface
AxpyTriangle	src/madness/external/elemental/include/elemental/blas-like/level1/AxpyTriangle.hpp	/^AxpyTriangle$/;"	f	namespace:elem
AxpyTriangle	src/madness/external/elemental/include/elemental/blas-like/level1/AxpyTriangle.hpp	/^AxpyTriangle( UpperOrLower uplo, T alpha, const Matrix<T>& X, Matrix<T>& Y )$/;"	f	namespace:elem
AxpyType	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^enum AxpyType { LOCAL_TO_GLOBAL, GLOBAL_TO_LOCAL };$/;"	g	namespace:elem::AxpyTypeNS
AxpyTypeNS	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^namespace AxpyTypeNS {$/;"	n	namespace:elem
B	src/apps/chem/diamagneticpotentialfactor.cc	/^	const coord_3d& B;$/;"	m	struct:madness::R_times_arg_div_R	file:
B	src/apps/chem/znemo.h	/^	coord_3d B;$/;"	m	class:madness::Znemo
B	src/examples/tdse1d.cc	/^Tensor<double> B, tc;$/;"	v
B	src/madness/world/test_ar.cc	/^    B(bool b = false) : b(b) {};$/;"	f	class:B
B	src/madness/world/test_ar.cc	/^class B {$/;"	c	file:
B	src/madness/world/test_world.cc	/^    B(long b=0) : b(b) {};$/;"	f	class:B
B	src/madness/world/test_world.cc	/^class B {$/;"	c	file:
BACKWARD	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    BACKWARD$/;"	e	enum:elem::ForwardOrBackwardNS::ForwardOrBackward
BAX	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    BAX=3$/;"	e	enum:elem::HermitianGenDefiniteEigTypeNS::HermitianGenDefiniteEigType
BB	src/apps/nick/wavef.h	/^    complexd BB;$/;"	m	class:ScatteringWF
BCType	src/madness/mra/funcdefaults.h	/^    enum BCType {BC_ZERO, BC_PERIODIC, BC_FREE, BC_DIRICHLET, BC_ZERONEUMANN, BC_NEUMANN};$/;"	g	namespace:madness
BC_DIRICHLET	src/madness/mra/funcdefaults.h	/^    enum BCType {BC_ZERO, BC_PERIODIC, BC_FREE, BC_DIRICHLET, BC_ZERONEUMANN, BC_NEUMANN};$/;"	e	enum:madness::BCType
BC_FREE	src/madness/mra/funcdefaults.h	/^    enum BCType {BC_ZERO, BC_PERIODIC, BC_FREE, BC_DIRICHLET, BC_ZERONEUMANN, BC_NEUMANN};$/;"	e	enum:madness::BCType
BC_NEUMANN	src/madness/mra/funcdefaults.h	/^    enum BCType {BC_ZERO, BC_PERIODIC, BC_FREE, BC_DIRICHLET, BC_ZERONEUMANN, BC_NEUMANN};$/;"	e	enum:madness::BCType
BC_PERIODIC	src/madness/mra/funcdefaults.h	/^    enum BCType {BC_ZERO, BC_PERIODIC, BC_FREE, BC_DIRICHLET, BC_ZERONEUMANN, BC_NEUMANN};$/;"	e	enum:madness::BCType
BC_ZERO	src/madness/mra/funcdefaults.h	/^    enum BCType {BC_ZERO, BC_PERIODIC, BC_FREE, BC_DIRICHLET, BC_ZERONEUMANN, BC_NEUMANN};$/;"	e	enum:madness::BCType
BC_ZERONEUMANN	src/madness/mra/funcdefaults.h	/^    enum BCType {BC_ZERO, BC_PERIODIC, BC_FREE, BC_DIRICHLET, BC_ZERONEUMANN, BC_NEUMANN};$/;"	e	enum:madness::BCType
BDM	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	17;"	d
BG_CYCLES_PER_MICROSECOND	src/madness/world/timers.h	53;"	d
BG_CYCLES_PER_MICROSECOND	src/madness/world/timers.h	59;"	d
BG_SECONDS_PER_CYCLE	src/madness/world/timers.h	54;"	d
BG_SECONDS_PER_CYCLE	src/madness/world/timers.h	60;"	d
BIDIAG_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    BIDIAG_PACKED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
BINARY	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    BINARY,$/;"	e	enum:elem::FileFormatNS::FileFormat
BINARYITERATOR	src/madness/tensor/tensor_macros.h	478;"	d
BINARYITERATOR1	src/madness/tensor/tensor_macros.h	358;"	d
BINARYITERATOR2	src/madness/tensor/tensor_macros.h	369;"	d
BINARYITERATOR3	src/madness/tensor/tensor_macros.h	383;"	d
BINARYITERATOR4	src/madness/tensor/tensor_macros.h	400;"	d
BINARYITERATOR5	src/madness/tensor/tensor_macros.h	423;"	d
BINARYITERATOR6	src/madness/tensor/tensor_macros.h	449;"	d
BINARY_AND	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op BINARY_AND = MPI_BAND;$/;"	m	namespace:elem::mpi
BINARY_FLAT	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    BINARY_FLAT,$/;"	e	enum:elem::FileFormatNS::FileFormat
BINARY_OPTIMIZED_ITERATOR	src/madness/tensor/tensor_macros.h	701;"	d
BINARY_OR	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op BINARY_OR = MPI_BOR;$/;"	m	namespace:elem::mpi
BINARY_XOR	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op BINARY_XOR = MPI_BXOR;$/;"	m	namespace:elem::mpi
BLAS	src/apps/moldft/fci/GNUmakefile	/^ BLAS := linux_cputime.o dgemm.o idamax.o crayio.o dscal.o daxpy.o dcopy.o ddot.o$/;"	m
BLAS	src/madness/tensor/mtxmq_graveyard/bgp_tuning/Makefile	/^BLAS=-lblas$/;"	m
BLUE_RED	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    BLUE_RED$/;"	e	enum:elem::ColorMapNS::ColorMap
BMP	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    BMP,$/;"	e	enum:elem::FileFormatNS::FileFormat
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	330;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	228;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	235;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	212;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	215;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	231;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	230;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	210;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	248;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	196;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	214;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	214;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	214;"	d	file:
BOTH	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	214;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	461;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	692;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	237;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	213;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	494;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	317;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	315;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	213;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	248;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	281;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	336;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	341;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	340;"	d	file:
BOTH	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	346;"	d	file:
BSH	src/madness/mra/function_factory.h	/^    TwoElectronFactory& BSH() {$/;"	f	class:madness::TwoElectronFactory
BSHFit	src/madness/mra/gfit.h	/^	static GFit BSHFit(double mu, double lo, double hi, double eps, bool prnt=false) {$/;"	f	class:madness::GFit
BSHFunctionInterface	src/madness/mra/function_interface.h	/^		BSHFunctionInterface(double mu, double lo, double eps,$/;"	f	class:madness::BSHFunctionInterface
BSHFunctionInterface	src/madness/mra/function_interface.h	/^	class BSHFunctionInterface : public TwoElectronInterface<double,6> {$/;"	c	namespace:madness
BSHOperator	src/madness/mra/operator.h	/^    SeparatedConvolution<double,NDIM> BSHOperator(World& world,$/;"	f	namespace:madness
BSHOperator3D	src/madness/mra/operator.h	/^    SeparatedConvolution<double,3> BSHOperator3D(World& world,$/;"	f	namespace:madness
BSHOperatorPtr3D	src/madness/mra/operator.h	/^    SeparatedConvolution<double,3>* BSHOperatorPtr3D(World& world,$/;"	f	namespace:madness
BS_MomentFunctor	src/apps/adrian/TDDFT.h	/^  BS_MomentFunctor(const std::vector<int> &x) : i(x[0]), j(x[1]), k(x[2]) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/adrian/TDDFT.h	/^  BS_MomentFunctor(int i, int j, int k) : i(i), j(j), k(k) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/adrian/TDDFT.h	/^class BS_MomentFunctor : public FunctionFunctorInterface<double, 3> {$/;"	c
BS_MomentFunctor	src/apps/adrian/TDHF.h	/^    BS_MomentFunctor(const std::vector<int>& x) : i(x[0]), j(x[1]), k(x[2]) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/adrian/TDHF.h	/^    BS_MomentFunctor(int i, int j, int k) : i(i), j(j), k(k) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/adrian/TDHF.h	/^class BS_MomentFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
BS_MomentFunctor	src/apps/adrian/TDHF2.h	/^    BS_MomentFunctor(const std::vector<int>& x) : i(x[0]), j(x[1]), k(x[2]) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/adrian/TDHF2.h	/^    BS_MomentFunctor(int i, int j, int k) : i(i), j(j), k(k) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/adrian/TDHF2.h	/^class BS_MomentFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
BS_MomentFunctor	src/apps/bryan/TDHF.h	/^    BS_MomentFunctor(const std::vector<int>& x) : i(x[0]), j(x[1]), k(x[2]) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/bryan/TDHF.h	/^    BS_MomentFunctor(int i, int j, int k) : i(i), j(j), k(k) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/bryan/TDHF.h	/^class BS_MomentFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
BS_MomentFunctor	src/apps/bryan/TDHF2.h	/^    BS_MomentFunctor(const std::vector<int>& x) : i(x[0]), j(x[1]), k(x[2]) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/bryan/TDHF2.h	/^    BS_MomentFunctor(int i, int j, int k) : i(i), j(j), k(k) {}$/;"	f	class:BS_MomentFunctor
BS_MomentFunctor	src/apps/bryan/TDHF2.h	/^class BS_MomentFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
BUNCH_KAUFMAN_A	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^    BUNCH_KAUFMAN_A=0,$/;"	e	enum:elem::LDLPivotTypeNS::LDLPivotType
BUNCH_KAUFMAN_BOUNDED	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^    BUNCH_KAUFMAN_BOUNDED=3,$/;"	e	enum:elem::LDLPivotTypeNS::LDLPivotType
BUNCH_KAUFMAN_C	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^    BUNCH_KAUFMAN_C=1,$/;"	e	enum:elem::LDLPivotTypeNS::LDLPivotType
BUNCH_KAUFMAN_D	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^    BUNCH_KAUFMAN_D=2,$/;"	e	enum:elem::LDLPivotTypeNS::LDLPivotType
BUNCH_PARLETT	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^    BUNCH_PARLETT=4$/;"	e	enum:elem::LDLPivotTypeNS::LDLPivotType
B_along_z	src/apps/chem/diamagneticpotentialfactor.h	/^	static bool B_along_z(const coord_3d& B) {$/;"	f	class:madness::Diamagnetic_potential_factor
B_direction	src/apps/chem/masks_and_boxes.h	/^	const coordT B_direction=coordT(0.0);$/;"	m	struct:madness::spherical_box
Band limited free particle propagator	doc/Latex/implementation.tex	/^\\subsection{Band-limited, free-particle propagator}$/;"	b
BandlimitedPropagator	src/madness/mra/qmprop.cc	/^        BandlimitedPropagator(double c, double t, double width) : width(width) {$/;"	f	class:madness::BandlimitedPropagator
BandlimitedPropagator	src/madness/mra/qmprop.cc	/^    class BandlimitedPropagator {$/;"	c	namespace:madness	file:
Barrier	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Barrier( Comm comm )$/;"	f	namespace:elem::mpi
Barrier	src/madness/world/safempi.h	/^        void Barrier() const {$/;"	f	class:SafeMPI::Intracomm
Barrier	src/madness/world/worldmutex.h	/^        Barrier(int nthread)$/;"	f	class:madness::Barrier
Barrier	src/madness/world/worldmutex.h	/^    class Barrier {$/;"	c	namespace:madness
BaseArchive	src/madness/world/archive.h	/^            BaseArchive() {$/;"	f	class:madness::archive::BaseArchive
BaseArchive	src/madness/world/archive.h	/^        class BaseArchive {$/;"	c	namespace:madness::archive
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
BaseGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
BaseHelper	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	/^struct BaseHelper { typedef Real type; };$/;"	s	namespace:elem
BaseHelper	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	/^struct BaseHelper<Complex<Real>> { typedef Real type; };$/;"	s	namespace:elem
BaseInputArchive	src/madness/world/archive.h	/^        class BaseInputArchive : public BaseArchive {$/;"	c	namespace:madness::archive
BaseOutputArchive	src/madness/world/archive.h	/^        class BaseOutputArchive : public BaseArchive {$/;"	c	namespace:madness::archive
BaseParallelArchive	src/madness/world/parallel_archive.h	/^            BaseParallelArchive()$/;"	f	class:madness::archive::BaseParallelArchive
BaseParallelArchive	src/madness/world/parallel_archive.h	/^        class BaseParallelArchive {$/;"	c	namespace:madness::archive
BaseTensor	src/madness/tensor/basetensor.h	/^        BaseTensor() : _size(0), _ndim(-1) {$/;"	f	class:madness::BaseTensor
BaseTensor	src/madness/tensor/basetensor.h	/^    class BaseTensor {$/;"	c	namespace:madness
BasicNarrowIoManip	src/madness/external/gtest/include/gtest/gtest-message.h	/^  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);$/;"	t	class:testing::Message::std
Basis	src/apps/adrian/ESInterface.h	/^  constexpr Properties Basis = 1 << 0; \/\/\/< The basis set.$/;"	m	namespace:slymer::Properties
Basis	src/apps/bryan/ESInterface.h	/^  constexpr Properties Basis = 1 << 0; \/\/\/< The basis set.$/;"	m	namespace:slymer::Properties
BasisFunction	src/apps/adrian/basis.h	/^class BasisFunction {$/;"	c	namespace:slymer
BasisFunction	src/apps/bryan/basis.h	/^class BasisFunction {$/;"	c	namespace:slymer
BasisFunctions	src/apps/chem/PNOGuessFunctions.h	/^	BasisFunctions(World& world,const Molecule& mol, const size_t& l): world(world), molecule(mol), lmax(l) {}$/;"	f	class:madness::BasisFunctions
BasisFunctions	src/apps/chem/PNOGuessFunctions.h	/^class BasisFunctions{$/;"	c	namespace:madness
BasisPursuit	src/madness/external/elemental/include/elemental/convex/BasisPursuit.hpp	/^BasisPursuit$/;"	f	namespace:elem
BasisShell	src/apps/adrian/NWChem.cc	/^struct BasisShell {$/;"	s	namespace:slymer	file:
BasisShell	src/apps/bryan/NWChem.cc	/^struct BasisShell {$/;"	s	namespace:slymer	file:
Bc	src/apps/chem/corepotential.h	/^    double Bc;$/;"	m	struct:madness::CoreOrbital
Bc	src/apps/polar/corepotential.h	/^    double Bc;$/;"	m	struct:CoreOrbital
Bcast	src/madness/world/safempi.h	/^        void Bcast(void* buf, size_t count, const MPI_Datatype datatype, const int root) const {$/;"	f	class:SafeMPI::Intracomm
Bcast	src/madness/world/worldmpi.h	/^        Bcast(T& buffer, int root) const {$/;"	f	class:madness::WorldMpiInterface
Bcast	src/madness/world/worldmpi.h	/^        void Bcast(T* buffer, int count, int root) const {$/;"	f	class:madness::WorldMpiInterface
BcastTag	src/madness/world/worldgop.h	/^        struct BcastTag { };$/;"	s	class:madness::WorldGopInterface
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::RangeGenerator
Begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
Bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag.hpp	/^inline void Bidiag$/;"	f	namespace:elem
Bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag.hpp	/^inline void Bidiag( DistMatrix<F>& A )$/;"	f	namespace:elem
Bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag.hpp	/^inline void Bidiag( Matrix<F>& A )$/;"	f	namespace:elem
Bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag.hpp	/^inline void Bidiag( Matrix<F>& A, Matrix<F>& tP, Matrix<F>& tQ )$/;"	f	namespace:elem
BidiagDQDS	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void BidiagDQDS( int n, double* d, double* e )$/;"	f	namespace:elem::lapack
BidiagDQDS	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void BidiagDQDS( int n, float* d, float* e )$/;"	f	namespace:elem::lapack
BidiagQRAlg	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void BidiagQRAlg$/;"	f	namespace:elem::lapack
BiggestInt	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef __int64 BiggestInt;$/;"	t	namespace:testing::internal
BiggestInt	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef long long BiggestInt;  \/\/ NOLINT$/;"	t	namespace:testing::internal
BinSorter	src/madness/world/binsorter.h	/^        BinSorter(World& world, inserterT inserter, int bufsize=0)$/;"	f	class:madness::BinSorter
BinSorter	src/madness/world/binsorter.h	/^    class BinSorter : public WorldObject< BinSorter<T,inserterT> > {$/;"	c	namespace:madness
Binary	src/madness/external/elemental/include/elemental/io/Read/Binary.hpp	/^Binary( BlockDistMatrix<T,U,V>& A, const std::string filename )$/;"	f	namespace:elem::read
Binary	src/madness/external/elemental/include/elemental/io/Read/Binary.hpp	/^Binary( DistMatrix<T,U,V>& A, const std::string filename )$/;"	f	namespace:elem::read
Binary	src/madness/external/elemental/include/elemental/io/Read/Binary.hpp	/^Binary( Matrix<T>& A, const std::string filename )$/;"	f	namespace:elem::read
Binary	src/madness/external/elemental/include/elemental/io/Write/Binary.hpp	/^Binary( const Matrix<T>& A, std::string basename="matrix" )$/;"	f	namespace:elem::write
BinaryFlat	src/madness/external/elemental/include/elemental/io/Read/BinaryFlat.hpp	/^BinaryFlat$/;"	f	namespace:elem::read
BinaryFlat	src/madness/external/elemental/include/elemental/io/Read/BinaryFlat.hpp	/^BinaryFlat( Matrix<T>& A, Int height, Int width, const std::string filename )$/;"	f	namespace:elem::read
BinaryFlat	src/madness/external/elemental/include/elemental/io/Write/BinaryFlat.hpp	/^BinaryFlat( const Matrix<T>& A, std::string basename="matrix" )$/;"	f	namespace:elem::write
BinaryFstreamInputArchive	src/madness/world/binary_fstream_archive.cc	/^        BinaryFstreamInputArchive::BinaryFstreamInputArchive(const char* filename, std::ios_base::openmode mode)$/;"	f	class:madness::archive::BinaryFstreamInputArchive
BinaryFstreamInputArchive	src/madness/world/binary_fstream_archive.h	/^        class BinaryFstreamInputArchive : public BaseInputArchive {$/;"	c	namespace:madness::archive
BinaryFstreamOutputArchive	src/madness/world/binary_fstream_archive.cc	/^        BinaryFstreamOutputArchive::BinaryFstreamOutputArchive(const char* filename, std::ios_base::openmode mode)$/;"	f	class:madness::archive::BinaryFstreamOutputArchive
BinaryFstreamOutputArchive	src/madness/world/binary_fstream_archive.h	/^        class BinaryFstreamOutputArchive : public BaseOutputArchive {$/;"	c	namespace:madness::archive
BinaryGenTest	src/madness/mra/test_mra6.cc	/^        BinaryGenTest() {$/;"	f	class:__anon12::BinaryGenTest
BinaryGenTest	src/madness/mra/test_mra6.cc	/^    class BinaryGenTest : public ::testing::TestWithParam<std::tr1::tuple<$/;"	c	namespace:__anon12	file:
BinaryGenTest	src/madness/tensor/test_gentensor.cc	/^        BinaryGenTest() {$/;"	f	class:__anon43::BinaryGenTest
BinaryGenTest	src/madness/tensor/test_gentensor.cc	/^    class BinaryGenTest : public ::testing::TestWithParam<std::tr1::tuple<$/;"	c	namespace:__anon43	file:
BinaryOp	src/madness/mra/testsuite.cc	/^    BinaryOp(const functorL& left, const functorR& right, opT& op)$/;"	f	class:BinaryOp
BinaryOp	src/madness/mra/testsuite.cc	/^class BinaryOp : public FunctionFunctorInterface<resultT,NDIM> {$/;"	c	file:
BinaryOpStructure	src/apps/chem/AC.h	/^	BinaryOpStructure(): f(NULL), cdata(FunctionCommonData<double,NDIM>::get(FunctionDefaults<NDIM>::get_k())) {}$/;"	f	struct:madness::BinaryOpStructure
BinaryOpStructure	src/apps/chem/AC.h	/^	BinaryOpStructure(const BinaryOpStructure<NDIM> &other) : f(other.f), cdata(other.cdata) {}$/;"	f	struct:madness::BinaryOpStructure
BinaryOpStructure	src/apps/chem/AC.h	/^	BinaryOpStructure(const std::shared_ptr<FunctionFunctorInterface<double,NDIM> > f_) :$/;"	f	struct:madness::BinaryOpStructure
BinaryOpStructure	src/apps/chem/AC.h	/^struct BinaryOpStructure {$/;"	s	namespace:madness
Bind	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  struct Bind {$/;"	s	struct:testing::internal::TemplateSel
Bits	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;$/;"	t	class:testing::internal::FloatingPoint
Blank	src/madness/external/tinyxml/tinyxmlparser.cc	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText
BlockDistData	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    BlockDistData( const GeneralBlockDistMatrix<T,U,V>& A )$/;"	f	struct:elem::BlockDistData
BlockDistData	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^struct BlockDistData$/;"	s	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^class BlockDistMatrix<T,CIRC,CIRC> : public GeneralBlockDistMatrix<T,CIRC,CIRC>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^class BlockDistMatrix<T,MC,MR> : public GeneralBlockDistMatrix<T,MC,MR>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^class BlockDistMatrix<T,MC,STAR> : public GeneralBlockDistMatrix<T,MC,STAR>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^class BlockDistMatrix<T,MD,STAR> : public GeneralBlockDistMatrix<T,MD,STAR>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^class BlockDistMatrix<T,MR,MC> : public GeneralBlockDistMatrix<T,MR,MC>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^class BlockDistMatrix<T,MR,STAR> : public GeneralBlockDistMatrix<T,MR,STAR>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^class BlockDistMatrix<T,STAR,MC> : public GeneralBlockDistMatrix<T,STAR,MC>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^class BlockDistMatrix<T,STAR,MD> : public GeneralBlockDistMatrix<T,STAR,MD>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^class BlockDistMatrix<T,STAR,MR> : public GeneralBlockDistMatrix<T,STAR,MR>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^class BlockDistMatrix<T,STAR,STAR> : public GeneralBlockDistMatrix<T,STAR,STAR>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^class BlockDistMatrix<T,STAR,VC> : public GeneralBlockDistMatrix<T,STAR,VC>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^class BlockDistMatrix<T,STAR,VR> : public GeneralBlockDistMatrix<T,STAR,VR>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^class BlockDistMatrix<T,VC,STAR> : public GeneralBlockDistMatrix<T,VC,STAR>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^class BlockDistMatrix<T,VR,STAR> : public GeneralBlockDistMatrix<T,VR,STAR>$/;"	c	namespace:elem
BlockDistMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^BDM::BlockDistMatrix$/;"	f	class:elem::BDM
BlockDistMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^BDM::BlockDistMatrix( const BDM& A )$/;"	f	class:elem::BDM
BlockDistMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^BDM::BlockDistMatrix( const BlockDistMatrix<T,U,V>& A )$/;"	f	class:elem::BDM
BlockDistMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^BDM::BlockDistMatrix( const DistMatrix<T,U,V>& A )$/;"	f	class:elem::BDM
BlockDistMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^BDM::BlockDistMatrix( const elem::Grid& g, Int root )$/;"	f	class:elem::BDM
BlockDistMatrixTest	src/madness/external/elemental/tests/core/BlockDistMatrix.cpp	/^BlockDistMatrixTest( Int m, Int n, const Grid& g, Int mb, Int nb, bool print )$/;"	f
BlockHeight	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::BlockHeight() const { return blockHeight_; }$/;"	f	class:elem::AbstractBlockDistMatrix
BlockWidth	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::BlockWidth() const { return blockWidth_; }$/;"	f	class:elem::AbstractBlockDistMatrix
BlockedLength	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^BlockedLength( Int n, Int rank, Int align, Int bsize, Int cut, Int stride )$/;"	f	namespace:elem
BlockedLength	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int BlockedLength( Int n, Int shift, Int bsize, Int cut, Int stride )$/;"	f	namespace:elem
BlockedLength_	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int BlockedLength_$/;"	f	namespace:elem
BlockedLength_	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int BlockedLength_( Int n, Int shift, Int bsize, Int cut, Int stride )$/;"	f	namespace:elem
BlockedPivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^BlockedPivoted$/;"	f	namespace:elem::ldl
Blocksize	src/madness/external/elemental/src/core/global.cpp	/^Int Blocksize()$/;"	f	namespace:elem
Bohr_magneton	src/madness/constants.h	/^        const double Bohr_magneton = 927.400915e-26  ; \/\/    0.000023e-26        J T^-1$/;"	m	namespace:madness::constants
Bohr_radius	src/madness/constants.h	/^        const double Bohr_radius = 0.52917720859e-10 ; \/\/ 0.00000000036e-10 m$/;"	m	namespace:madness::constants
Boltzmann_constant	src/madness/constants.h	/^        const double Boltzmann_constant = 1.3806504e-23 ; \/\/       0.0000024e-23       J K^-1$/;"	m	namespace:madness::constants
Bool	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^inline internal::ParamGenerator<bool> Bool() {$/;"	f	namespace:testing
BoolFromGTestEnv	src/madness/external/gtest/src/gtest-port.cc	/^bool BoolFromGTestEnv(const char* flag, bool default_value) {$/;"	f	namespace:testing::internal
BooleanCoinFlip	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^inline bool BooleanCoinFlip()$/;"	f	namespace:elem
Bop	src/examples/colloid.cc	/^    struct Bop {$/;"	s	class:SurfaceMoleculeInteraction	file:
BoundWF	src/apps/nick/wavef.cc	/^BoundWF::BoundWF(double Z, int nn, int ll, int mm ) : Z(Z) {$/;"	f	class:BoundWF
BoundWF	src/apps/nick/wavef.h	/^class BoundWF : public baseWF {$/;"	c
BoundaryConditions	src/madness/mra/funcdefaults.h	/^        BoundaryConditions(BCType code=BC_FREE)$/;"	f	class:madness::BoundaryConditions
BoundaryConditions	src/madness/mra/funcdefaults.h	/^        BoundaryConditions(const BoundaryConditions<NDIM>& other)$/;"	f	class:madness::BoundaryConditions
BoundaryConditions	src/madness/mra/funcdefaults.h	/^    class BoundaryConditions {$/;"	c	namespace:madness
BoysLocalization	src/apps/moldft/preal.cc	/^    BoysLocalization() {}$/;"	f	struct:BoysLocalization
BoysLocalization	src/apps/moldft/preal.cc	/^    BoysLocalization(unsigned int norbs) {$/;"	f	struct:BoysLocalization
BoysLocalization	src/apps/moldft/preal.cc	/^struct BoysLocalization {$/;"	s	file:
Broadcast	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Broadcast( Complex<R>* buf, int count, int root, Comm comm )$/;"	f	namespace:elem::mpi
Broadcast	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Broadcast( R* buf, int count, int root, Comm comm )$/;"	f	namespace:elem::mpi
Broadcast	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Broadcast( T& b, int root, Comm comm )$/;"	f	namespace:elem::mpi
Bsend	src/madness/world/safempi.h	/^        void Bsend(const void* buf, size_t count, const MPI_Datatype datatype, int dest, int tag) const {$/;"	f	class:SafeMPI::Intracomm
Buffer	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Buffer( Int iLoc, Int jLoc )$/;"	f	class:elem::AbstractBlockDistMatrix
Buffer	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Buffer() { return matrix_.Buffer(); }$/;"	f	class:elem::AbstractBlockDistMatrix
Buffer	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Buffer( Int iLoc, Int jLoc )$/;"	f	class:elem::AbstractDistMatrix
Buffer	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Buffer() { return matrix_.Buffer(); }$/;"	f	class:elem::AbstractDistMatrix
Buffer	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Buffer( Int i, Int j )$/;"	f	class:elem::Matrix
Buffer	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Buffer()$/;"	f	class:elem::Matrix
Buffer	src/madness/external/elemental/src/core/Memory.cpp	/^G* Memory<G>::Buffer() const { return buffer_; }$/;"	f	class:elem::Memory
BufferInputArchive	src/madness/world/buffer_archive.h	/^            BufferInputArchive(const void* ptr, std::size_t nbyte)$/;"	f	class:madness::archive::BufferInputArchive
BufferInputArchive	src/madness/world/buffer_archive.h	/^        class BufferInputArchive : public BaseInputArchive {$/;"	c	namespace:madness::archive
BufferOutputArchive	src/madness/world/buffer_archive.h	/^            BufferOutputArchive()$/;"	f	class:madness::archive::BufferOutputArchive
BufferOutputArchive	src/madness/world/buffer_archive.h	/^            BufferOutputArchive(void* ptr, std::size_t nbyte)$/;"	f	class:madness::archive::BufferOutputArchive
BufferOutputArchive	src/madness/world/buffer_archive.h	/^        class BufferOutputArchive : public BaseOutputArchive {$/;"	c	namespace:madness::archive
BuildStream	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^inline void BuildStream( std::ostringstream& os ) { }$/;"	f	namespace:elem
BuildStream	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^inline void BuildStream( std::ostringstream& os, T item, Args... args )$/;"	f	namespace:elem
Built LRCCS	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\section{Built LRCCS}$/;"	s
BullsHead	src/madness/external/elemental/include/elemental/matrices/BullsHead.hpp	/^BullsHead( BlockDistMatrix<Complex<Real>,U,V>& A, Int n )$/;"	f	namespace:elem
BullsHead	src/madness/external/elemental/include/elemental/matrices/BullsHead.hpp	/^BullsHead( DistMatrix<Complex<Real>,U,V>& A, Int n )$/;"	f	namespace:elem
BullsHead	src/madness/external/elemental/include/elemental/matrices/BullsHead.hpp	/^BullsHead( Matrix<Complex<Real>>& A, Int n )$/;"	f	namespace:elem
BunchKaufmanA	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^BunchKaufmanA( const DistMatrix<F>& A, Base<F> gamma )$/;"	f	namespace:elem::ldl::pivot
BunchKaufmanA	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^BunchKaufmanA( const Matrix<F>& A, Base<F> gamma )$/;"	f	namespace:elem::ldl::pivot
BunchKaufmanD	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^BunchKaufmanD( const DistMatrix<F>& A, Base<F> gamma )$/;"	f	namespace:elem::ldl::pivot
BunchKaufmanD	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^BunchKaufmanD( const Matrix<F>& A, Base<F> gamma )$/;"	f	namespace:elem::ldl::pivot
BunchParlett	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^BunchParlett( const DistMatrix<F>& A, Base<F> gamma )$/;"	f	namespace:elem::ldl::pivot
BunchParlett	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^BunchParlett( const Matrix<F>& A, Base<F> gamma )$/;"	f	namespace:elem::ldl::pivot
BusingerGolub	src/madness/external/elemental/include/elemental/lapack-like/factor/ID.hpp	/^BusingerGolub$/;"	f	namespace:elem::id
BusingerGolub	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	/^BusingerGolub$/;"	f	namespace:elem::qr
BusingerGolub	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	/^BusingerGolub( Matrix<F>& A, Matrix<Int>& pPerm, bool alwaysRecompute=false )$/;"	f	namespace:elem::qr
ByRef	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
ByRef	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
C	src/madness/external/elemental/examples/blas-like/Gemv.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/convex/BasisPursuit.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/BunchKaufman.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/BusingerGolub.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/ChunkedPseudospectrum.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/ChunkedTriangularPseudospectrum.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/ComplexHermitianFunction.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/HPDInverse.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/HPSDCholesky.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/HPSDSquareRoot.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/HermitianEig.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/HermitianEigFromSequential.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/HermitianPseudoinverse.cpp	/^typedef Complex<R> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/HermitianQDWH.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/HermitianSDC.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/HermitianSVD.cpp	/^typedef Complex<R> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/ID.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/KyFanAndSchatten.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/LDL.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/LDLInverse.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/Pseudoinverse.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/Pseudospectrum.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/QDWH.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/QR.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/RealHermitianFunction.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/SVD.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/Schur.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/SequentialBunchKaufman.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/SequentialQR.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/SequentialSVD.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/Sign.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/SimpleSVD.cpp	/^typedef Complex<R> C;    \/\/ complex datatype `C'$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/Skeleton.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/SkewHermitianEig.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/lapack-like/TriangularPseudospectrum.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/external/elemental/examples/matrices/Circulant.cpp	/^typedef Complex<Real> C;$/;"	t	file:
C	src/madness/world/test_ar.cc	/^    C(long c = 0) : c(c) {};$/;"	f	class:C
C	src/madness/world/test_ar.cc	/^class C {$/;"	c	file:
C	src/madness/world/test_stack.cc	/^        C(int v) : value(v) { }$/;"	f	class:__anon3::C
C	src/madness/world/test_stack.cc	/^    class C {$/;"	c	namespace:__anon3	file:
C Gotchas	doc/Latex/parallel-runtime.tex	/^\\section[C++ Gotchas]{C++ Gotchas}$/;"	s
C1	src/apps/chem/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:madness::VLocalFunctor
C1	src/apps/polar/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:VLocalFunctor
C2	src/apps/chem/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:madness::VLocalFunctor
C2	src/apps/polar/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:VLocalFunctor
C3	src/apps/chem/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:madness::VLocalFunctor
C3	src/apps/polar/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:VLocalFunctor
C4	src/apps/chem/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:madness::VLocalFunctor
C4	src/apps/polar/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:VLocalFunctor
CBLAS_TRANSPOSE	src/madness/tensor/cblas_types.h	/^    }  CBLAS_TRANSPOSE;$/;"	t	namespace:madness::cblas	typeref:enum:madness::cblas::__anon45
CC	src/apps/moldft/fci/GNUmakefile	/^       CC = gcc$/;"	m
CC	src/madness/tensor/mtxmq_bg/Makefile	/^   CC=bgxlc_r$/;"	m
CC	src/madness/tensor/mtxmq_bg/Makefile	/^   CC=mpixlc_r$/;"	m
CC	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   CC=bgxlc_r$/;"	m
CC	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   CC=mpixlc_r$/;"	m
CC2	src/apps/chem/CC2.h	/^	  CC2(World &world_,const CCParameters& param,const Nemo &nemo_)$/;"	f	class:madness::CC2
CC2	src/apps/chem/CC2.h	/^    CC2(World &world_,const std::string &inputFileName,const Nemo &nemo_)$/;"	f	class:madness::CC2
CC2	src/apps/chem/CC2.h	/^  class CC2{$/;"	c	namespace:madness
CC2_H_	src/apps/chem/CC2.h	9;"	d
CCConvolutionOperator	src/apps/chem/CCStructures.h	/^	CCConvolutionOperator(World &world,const OpType type, const Parameters &param):parameters(param),world(world),operator_type(type),op(init_op(type,param)){}$/;"	f	struct:madness::CCConvolutionOperator
CCConvolutionOperator	src/apps/chem/CCStructures.h	/^  struct CCConvolutionOperator{$/;"	s	namespace:madness
CCFunction	src/apps/chem/CCStructures.h	/^    CCFunction(): current_error(99),i(99), type(UNDEFINED){};$/;"	f	struct:madness::CCFunction
CCFunction	src/apps/chem/CCStructures.h	/^    CCFunction(const CCFunction &other): current_error(other.current_error),function(other.function), i(other.i), type(other.type){};$/;"	f	struct:madness::CCFunction
CCFunction	src/apps/chem/CCStructures.h	/^    CCFunction(const real_function_3d &f): current_error(99),function(f), i(99),type(UNDEFINED){};$/;"	f	struct:madness::CCFunction
CCFunction	src/apps/chem/CCStructures.h	/^    CCFunction(const real_function_3d &f,const size_t &ii): current_error(99), function(f), i(ii), type(UNDEFINED){};$/;"	f	struct:madness::CCFunction
CCFunction	src/apps/chem/CCStructures.h	/^    CCFunction(const real_function_3d &f,const size_t &ii, const FuncType &type_): current_error(99),function(f), i(ii), type(type_){};$/;"	f	struct:madness::CCFunction
CCFunction	src/apps/chem/CCStructures.h	/^  struct CCFunction{$/;"	s	namespace:madness
CCIntermediatePotentials	src/apps/chem/CCStructures.h	/^    CCIntermediatePotentials(World&world, const CCParameters& p): world(world), parameters(p) {};$/;"	f	struct:madness::CCIntermediatePotentials
CCIntermediatePotentials	src/apps/chem/CCStructures.h	/^  struct CCIntermediatePotentials{$/;"	s	namespace:madness
CCMessenger	src/apps/chem/CCStructures.h	/^    CCMessenger(World &world) : world(world), output_prec(10), scientific(true), debug(false), os(std::cout){}$/;"	f	struct:madness::CCMessenger
CCMessenger	src/apps/chem/CCStructures.h	/^  struct CCMessenger{$/;"	s	namespace:madness
CCOPS	src/apps/chem/CC2.h	/^    CCPotentials CCOPS;$/;"	m	class:madness::CC2
CCOUNTER_H	src/madness/external/elemental/external/pmrrr/include/counter.h	42;"	d
CCPair	src/apps/chem/CCStructures.h	/^    CCPair(const CCPair &other): type(other.type), ctype(other.ctype), i(other.i), j(other.j), functions(other.functions), constant_part(other.constant_part), bsh_eps(other.bsh_eps) {};$/;"	f	class:madness::CCPair
CCPair	src/apps/chem/CCStructures.h	/^    CCPair(const size_t ii, const size_t jj, const CCState t, const CalcType c): type(t), ctype(c), i(ii),j(jj), bsh_eps(12345.6789) {};$/;"	f	class:madness::CCPair
CCPair	src/apps/chem/CCStructures.h	/^    CCPair(const size_t ii, const size_t jj, const CCState t, const CalcType c, const std::vector<CCPairFunction> &f): type(t), ctype(c), i(ii),j(jj), functions(f), bsh_eps(12345.6789) {};$/;"	f	class:madness::CCPair
CCPair	src/apps/chem/CCStructures.h	/^  class CCPair: public archive::ParallelSerializableObject{$/;"	c	namespace:madness
CCPairFunction	src/apps/chem/CCStructures.h	/^    CCPairFunction(World&world,const CCConvolutionOperator *op_,const CCFunction &f1, const CCFunction &f2):world(world), type(PT_OP_DECOMPOSED), a(),b(), op(op_),x(f1),y(f2),u() {}$/;"	f	struct:madness::CCPairFunction
CCPairFunction	src/apps/chem/CCStructures.h	/^    CCPairFunction(World&world,const real_function_6d &ket):world(world), type(PT_FULL), a(),b(), op(0),u(ket) {}$/;"	f	struct:madness::CCPairFunction
CCPairFunction	src/apps/chem/CCStructures.h	/^    CCPairFunction(World&world,const std::pair<vector_real_function_3d,vector_real_function_3d> &f):world(world), type(PT_DECOMPOSED), a(f.first),b(f.second), op(0),u() {}$/;"	f	struct:madness::CCPairFunction
CCPairFunction	src/apps/chem/CCStructures.h	/^    CCPairFunction(World&world,const vector_real_function_3d &f1,const vector_real_function_3d &f2):world(world), type(PT_DECOMPOSED), a(f1),b(f2), op(0),u() {}$/;"	f	struct:madness::CCPairFunction
CCPairFunction	src/apps/chem/CCStructures.h	/^    CCPairFunction(const CCPairFunction &other): world(other.world),type(other.type),a(other.a),b(other.b),op(other.op),x(other.x),y(other.y),u(other.u) {}$/;"	f	struct:madness::CCPairFunction
CCPairFunction	src/apps/chem/CCStructures.h	/^  struct CCPairFunction{$/;"	s	namespace:madness
CCParameters	src/apps/chem/CCStructures.cc	/^  CCParameters::CCParameters(const CCParameters& other) :$/;"	f	class:madness::CCParameters
CCParameters	src/apps/chem/CCStructures.cc	/^  CCParameters::CCParameters(const std::string& input,const double &low) :$/;"	f	class:madness::CCParameters
CCParameters	src/apps/chem/CCStructures.h	/^	CCParameters(){};$/;"	f	struct:madness::CCParameters
CCParameters	src/apps/chem/CCStructures.h	/^  struct CCParameters{$/;"	s	namespace:madness
CCPotentials	src/apps/chem/CCPotentials.cc	/^  CCPotentials::CCPotentials(World& world_,const Nemo& nemo,const CCParameters& param)$/;"	f	class:madness::CCPotentials
CCPotentials	src/apps/chem/CCPotentials.h	/^  class CCPotentials{$/;"	c	namespace:madness
CCSTATE_UNDEFINED	src/apps/chem/CCStructures.h	/^  enum CCState {CCSTATE_UNDEFINED,GROUND_STATE,EXCITED_STATE};$/;"	e	enum:madness::CCState
CCSTRUCTURES_H_	src/apps/chem/CCStructures.h	11;"	d
CCState	src/apps/chem/CCStructures.h	/^  enum CCState {CCSTATE_UNDEFINED,GROUND_STATE,EXCITED_STATE};$/;"	g	namespace:madness
CCTimer	src/apps/chem/CCStructures.h	/^    CCTimer(World &world,std::string msg) : world(world),start_wall(wall_time()),start_cpu(cpu_time()),operation(msg),end_wall(0.0), end_cpu(0.0), time_wall(-1.0), time_cpu(-1.0) {}$/;"	f	struct:madness::CCTimer
CCTimer	src/apps/chem/CCStructures.h	/^  struct CCTimer{$/;"	s	namespace:madness
CC_functionmap	src/apps/chem/CCStructures.h	/^    typedef std::map<std::size_t, CCFunction> CC_functionmap;$/;"	t	struct:madness::CC_vecfunction
CC_vecfunction	src/apps/chem/CCStructures.h	/^    CC_vecfunction(): type(UNDEFINED),omega(0.0),excitation(-1), current_error(99.9), delta(0.0){}$/;"	f	struct:madness::CC_vecfunction
CC_vecfunction	src/apps/chem/CCStructures.h	/^    CC_vecfunction(const CC_vecfunction &other)$/;"	f	struct:madness::CC_vecfunction
CC_vecfunction	src/apps/chem/CCStructures.h	/^    CC_vecfunction(const FuncType type_): type(type_),omega(0.0),excitation(-1), current_error(99.9),delta(0.0){}$/;"	f	struct:madness::CC_vecfunction
CC_vecfunction	src/apps/chem/CCStructures.h	/^    CC_vecfunction(const std::vector<CCFunction> &v): type(UNDEFINED),omega(0.0),excitation(-1), current_error(99.9),delta(0.0){$/;"	f	struct:madness::CC_vecfunction
CC_vecfunction	src/apps/chem/CCStructures.h	/^    CC_vecfunction(const std::vector<CCFunction> &v, const FuncType type_)$/;"	f	struct:madness::CC_vecfunction
CC_vecfunction	src/apps/chem/CCStructures.h	/^    CC_vecfunction(const vector_real_function_3d &v): type(UNDEFINED),omega(0.0),excitation(-1), current_error(99.9),delta(0.0){$/;"	f	struct:madness::CC_vecfunction
CC_vecfunction	src/apps/chem/CCStructures.h	/^    CC_vecfunction(const vector_real_function_3d &v,const FuncType &type): type(type),omega(0.0),excitation(-1), current_error(99.9),delta(0.0){$/;"	f	struct:madness::CC_vecfunction
CC_vecfunction	src/apps/chem/CCStructures.h	/^    CC_vecfunction(const vector_real_function_3d &v,const FuncType &type,const size_t &freeze): type(type),omega(0.0),excitation(-1), current_error(99.9),delta(0.0){$/;"	f	struct:madness::CC_vecfunction
CC_vecfunction	src/apps/chem/CCStructures.h	/^  struct CC_vecfunction{$/;"	s	namespace:madness
CDATA	src/madness/external/tinyxml/tinyxml.h	/^	bool CDATA() const				{ return cdata; }$/;"	f	class:TiXmlText
CFFT	src/madness/misc/cfft.h	/^class CFFT$/;"	c
CFLAGS	src/apps/moldft/fci/GNUmakefile	/^   CFLAGS = -g -O$/;"	m
CHECK	src/madness/mra/testsuite.cc	169;"	d	file:
CIRC	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    CIRC  \/\/ Give to a single process$/;"	e	enum:elem::DistNS::Dist
CISData	src/apps/chem/PNOStructures.h	/^	CISData(){}$/;"	f	struct:madness::CISData
CISData	src/apps/chem/PNOStructures.h	/^	CISData(const size_t& n, const double& o, const vector_real_function_3d& f) : x(f),number(n),omega(o){}$/;"	f	struct:madness::CISData
CISData	src/apps/chem/PNOStructures.h	/^struct CISData{$/;"	s	namespace:madness
CISPD_PAIRTYPE	src/apps/chem/PNOParameters.h	/^enum PairType{MP2_PAIRTYPE,CISPD_PAIRTYPE,ALL_PAIRTYPE,NONE_PAIRTYPE,UNKNOWN_PAIRTYPE};$/;"	e	enum:madness::PairType
CLUSTER_TASK_FLAG	src/madness/external/elemental/external/pmrrr/include/tasks.h	51;"	d
CMAKE	cmake/Makefile	/^CMAKE := cmake-3.5.1$/;"	m
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/doc/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/apps/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/apps/adrian/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/apps/bryan/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/apps/chem/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/apps/cis/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/apps/learnResponse/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/apps/moldft/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/apps/pno/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/apps/tdse/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/examples/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/madness/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/madness/external/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/madness/external/gtest/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/madness/external/muParser/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/madness/external/tinyxml/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/madness/misc/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/madness/mra/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/madness/tensor/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_BINARY_DIR	build/src/madness/world/Makefile	/^CMAKE_BINARY_DIR = \/gpfs\/projects\/rjh\/adrian\/madness\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/doc/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/apps/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/apps/adrian/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/apps/bryan/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/apps/chem/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/apps/cis/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/apps/learnResponse/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/apps/moldft/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/apps/pno/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/apps/tdse/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/examples/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/madness/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/madness/external/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/madness/external/gtest/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/madness/external/muParser/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/madness/external/tinyxml/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/madness/misc/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/madness/mra/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/madness/tensor/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/madness/world/Makefile	/^CMAKE_COMMAND = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/doc/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/apps/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/apps/adrian/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/apps/bryan/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/apps/chem/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/apps/cis/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/apps/learnResponse/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/apps/moldft/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/apps/pno/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/apps/tdse/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/examples/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/madness/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/madness/external/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/madness/external/gtest/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/madness/external/muParser/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/madness/external/tinyxml/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/madness/misc/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/madness/mra/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/madness/tensor/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
CMAKE_SOURCE_DIR	build/src/madness/world/Makefile	/^CMAKE_SOURCE_DIR = \/gpfs\/projects\/rjh\/adrian\/madness$/;"	m
COLORS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^class COLORS:$/;"	c
COLORS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^class COLORS:$/;"	c
COLOR_DEFAULT	src/madness/external/gtest/src/gtest.cc	/^  COLOR_DEFAULT,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_GREEN	src/madness/external/gtest/src/gtest.cc	/^  COLOR_GREEN,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_RED	src/madness/external/gtest/src/gtest.cc	/^  COLOR_RED,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_YELLOW	src/madness/external/gtest/src/gtest.cc	/^  COLOR_YELLOW$/;"	e	enum:testing::internal::GTestColor	file:
COLUMN_MAJOR	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    COLUMN_MAJOR$/;"	e	enum:elem::GridOrderNS::GridOrder
COMMENT	src/madness/external/tinyxml/tinyxml.h	/^		COMMENT,$/;"	e	enum:TiXmlNode::NodeType
COMM_COMPLETE	src/madness/external/elemental/external/pmrrr/include/plarrv.h	54;"	d
COMM_INCOMPLETE	src/madness/external/elemental/external/pmrrr/include/plarrv.h	55;"	d
COMM_NULL	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Comm COMM_NULL = MPI_COMM_NULL;$/;"	m	namespace:elem::mpi
COMM_SELF	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Comm COMM_SELF = MPI_COMM_SELF;$/;"	m	namespace:elem::mpi
COMM_WORLD	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Comm COMM_WORLD = MPI_COMM_WORLD;$/;"	m	namespace:elem::mpi
COMM_WORLD	src/madness/world/safempi.cc	/^    Intracomm COMM_WORLD = Intracomm::WorldInitObject();$/;"	m	namespace:SafeMPI	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	142;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	149;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	176;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	218;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	245;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	270;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	273;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	276;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	198;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	261;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	264;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	138;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	180;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	191;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	221;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	233;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	238;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	255;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	260;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	188;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	200;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	219;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	231;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	236;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	246;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	251;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	166;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	181;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	203;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	234;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	256;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	261;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	97;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	237;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	252;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	207;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	223;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	235;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	257;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPLEX	src/examples/compiler/mra-driver.hh	/^        COMPLEX, $/;"	e	enum:Exp::Type
COMPLEXFUN	src/examples/compiler/mra-driver.hh	/^        COMPLEXFUN, $/;"	e	enum:Exp::Type
COMPLEXFUN_H_	src/apps/hf/complexfun.h	41;"	d
COMPLEXTEN	src/examples/compiler/mra-driver.hh	/^        COMPLEXTEN, $/;"	e	enum:Exp::Type
CONDITION_VARIABLE_TYPE	src/madness/world/worldmutex.h	/^    typedef ConditionVariable CONDITION_VARIABLE_TYPE ;$/;"	t	namespace:madness
CONDITION_VARIABLE_TYPE	src/madness/world/worldmutex.h	/^    typedef PthreadConditionVariable CONDITION_VARIABLE_TYPE;$/;"	t	namespace:madness
CONJUGATED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    CONJUGATED$/;"	e	enum:elem::ConjugationNS::Conjugation
COORD	src/examples/compiler/mra-driver.hh	/^        COORD,$/;"	e	enum:Exp::Type
COPT	src/madness/tensor/mtxmq_bg/Makefile	/^   COPT= -g -O5 -qarch=450d -qtune=450 -qthreaded #-qpath=ILbc:\/soft\/apps\/xlC-interim-fix-virtualthunk\/exe\/$/;"	m
COPT	src/madness/tensor/mtxmq_bg/Makefile	/^   COPT= -g -O5 -qhot=level=1 -qsimd=auto -qtune=qp -qarch=qp$/;"	m
COPT	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   COPT= -g -O5 -qarch=450d -qtune=450 -qthreaded #-qpath=ILbc:\/soft\/apps\/xlC-interim-fix-virtualthunk\/exe\/$/;"	m
COPT	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   COPT= -g -O5 -qhot=level=1 -qsimd=auto -qtune=qp -qarch=qp$/;"	m
CPP	src/madness/tensor/mtxmq_bg/Makefile	/^   CPP=$(CC) -E$/;"	m
CPP	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   CPP=$(CC) -E$/;"	m
CPPFLAGS	src/apps/moldft/fci/GNUmakefile	/^ CPPFLAGS = $(INCLUDES) $(DEFINES)$/;"	m
CStr	src/madness/external/tinyxml/tinyxml.h	/^	const char* CStr()								{ return buffer.c_str(); }$/;"	f	class:TiXmlPrinter
CStringEquals	src/madness/external/gtest/src/gtest.cc	/^bool String::CStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CT_ADC2	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	e	enum:madness::CalcType
CT_CC2	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	e	enum:madness::CalcType
CT_CISPD	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	e	enum:madness::CalcType
CT_LRCC2	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	e	enum:madness::CalcType
CT_LRCCS	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	e	enum:madness::CalcType
CT_MP2	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	e	enum:madness::CalcType
CT_TDHF	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	e	enum:madness::CalcType
CT_TEST	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	e	enum:madness::CalcType
CT_UNDEFINED	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	e	enum:madness::CalcType
CXX	src/madness/mra/minmax/Makefile	/^CXX = g++$/;"	m
CXX	src/madness/tensor/mtxmq_bg/Makefile	/^   CXX=bgxlc++_r$/;"	m
CXX	src/madness/tensor/mtxmq_bg/Makefile	/^   CXX=mpixlcxx_r$/;"	m
CXX	src/madness/tensor/mtxmq_graveyard/bgp_tuning/Makefile	/^CXX=clang++$/;"	m
CXX	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   CXX=bgxlc++_r$/;"	m
CXX	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   CXX=mpixlcxx_r$/;"	m
CXXFLAGS	src/madness/mra/minmax/Makefile	/^CXXFLAGS = $(INCLUDES) $(CXXOPT)$/;"	m
CXXFLAGS	src/madness/tensor/mtxmq_bg/Makefile	/^   CXXFLAGS=$(INC) $(COPT) $(HAVE_BGPIBM)$/;"	m
CXXFLAGS	src/madness/tensor/mtxmq_bg/Makefile	/^   CXXFLAGS=$(INC) $(COPT) $(HAVE_BGQIBM)$/;"	m
CXXFLAGS	src/madness/tensor/mtxmq_graveyard/bgp_tuning/Makefile	/^CXXFLAGS=-g -O3$/;"	m
CXXFLAGS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   CXXFLAGS=$(INC) $(COPT) $(HAVE_BGPIBM)$/;"	m
CXXFLAGS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   CXXFLAGS=$(INC) $(COPT) $(HAVE_BGQIBM)$/;"	m
CXXOPT	src/madness/mra/minmax/Makefile	/^CXXOPT = -g -O3 -march=native$/;"	m
C_DIALECT	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	516;"	d	file:
C_DIALECT	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	518;"	d	file:
C_DIALECT	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	521;"	d	file:
C_DIALECT	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	523;"	d	file:
C_DIALECT	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	525;"	d	file:
C_TASK_NOT_PROCESSED	src/madness/external/elemental/external/pmrrr/include/plarrv.h	57;"	d
C_TASK_PROCESSED	src/madness/external/elemental/external/pmrrr/include/plarrv.h	56;"	d
Cache	src/madness/world/dist_cache.h	/^            class Cache {$/;"	c	class:madness::detail::DistCache
CacheData	src/madness/world/dist_cache.h	/^                CacheData() : value_() { }$/;"	f	class:madness::detail::DistCache::CacheData
CacheData	src/madness/world/dist_cache.h	/^                CacheData(const madness::Future<valueT>& value) : value_(value) { }$/;"	f	class:madness::detail::DistCache::CacheData
CacheData	src/madness/world/dist_cache.h	/^                CacheData(const valueT& value) : value_(value) { }$/;"	f	class:madness::detail::DistCache::CacheData
CacheData	src/madness/world/dist_cache.h	/^            class CacheData : public Cache {$/;"	c	class:madness::detail::DistCache
CalcType	src/apps/chem/CCStructures.h	/^  enum CalcType {CT_UNDEFINED,CT_MP2, CT_CC2, CT_LRCCS, CT_LRCC2, CT_CISPD,CT_ADC2, CT_TDHF , CT_TEST};$/;"	g	namespace:madness
CalculateEndIndex	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  static int CalculateEndIndex(const T& begin,$/;"	f	class:testing::internal::RangeGenerator
Calculation	src/apps/moldft/mcpfit.cc	/^    Calculation (World & world)$/;"	f	struct:Calculation
Calculation	src/apps/moldft/mcpfit.cc	/^struct Calculation {$/;"	s	file:
Calculation	src/apps/polar/mcpfit.cc	/^    Calculation (World & world)$/;"	f	struct:Calculation
Calculation	src/apps/polar/mcpfit.cc	/^struct Calculation {$/;"	s	file:
Calculation	src/apps/polar/moldft.cc	/^    Calculation(World &world, const char *filename)$/;"	f	struct:Calculation
Calculation	src/apps/polar/moldft.cc	/^struct Calculation$/;"	s	file:
CalculationParameters	src/apps/chem/CalculationParameters.h	/^	CalculationParameters() {$/;"	f	struct:madness::CalculationParameters
CalculationParameters	src/apps/chem/CalculationParameters.h	/^	CalculationParameters(const CalculationParameters& other) : QCCalculationParametersBase(other) {$/;"	f	struct:madness::CalculationParameters
CalculationParameters	src/apps/chem/CalculationParameters.h	/^struct CalculationParameters : public QCCalculationParametersBase {$/;"	s	namespace:madness
CalculationParameters	src/apps/moldft/mcpfit.cc	/^    CalculationParameters()$/;"	f	struct:CalculationParameters
CalculationParameters	src/apps/moldft/mcpfit.cc	/^struct CalculationParameters {$/;"	s	file:
CalculationParameters	src/apps/polar/mcpfit.cc	/^    CalculationParameters()$/;"	f	struct:CalculationParameters
CalculationParameters	src/apps/polar/mcpfit.cc	/^struct CalculationParameters {$/;"	s	file:
CalculationParameters	src/apps/polar/moldft.cc	/^    CalculationParameters()$/;"	f	struct:CalculationParameters
CalculationParameters	src/apps/polar/moldft.cc	/^struct CalculationParameters$/;"	s	file:
CallbackInterface	src/madness/world/dependency_interface.h	/^    class CallbackInterface {$/;"	c	namespace:madness
Callbacks and tracking dependencies worlddep h	doc/Latex/api.tex	/^\\subsubsection{Callbacks and tracking dependencies (worlddep.h)}$/;"	b
Cannon_NN	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NN.hpp	/^Cannon_NN$/;"	f	namespace:elem::gemm
CapEstimates	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^inline void CapEstimates( DistMatrix<Real,MR,STAR>& activeEsts )$/;"	f	namespace:elem::pspec
CapEstimates	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^inline void CapEstimates( Matrix<Real>& activeEsts )$/;"	f	namespace:elem::pspec
Capabilities	doc/Latex/apps/moldft/manual.tex	/^\\section{Capabilities}$/;"	s
CaptureStderr	src/madness/external/gtest/src/gtest-port.cc	/^void CaptureStderr() {$/;"	f	namespace:testing::internal
CaptureStdout	src/madness/external/gtest/src/gtest-port.cc	/^void CaptureStdout() {$/;"	f	namespace:testing::internal
CaptureStream	src/madness/external/gtest/src/gtest-port.cc	/^void CaptureStream(int fd, const char* stream_name, CapturedStream** stream) {$/;"	f	namespace:testing::internal
CapturedStream	src/madness/external/gtest/src/gtest-port.cc	/^  explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {$/;"	f	class:testing::internal::CapturedStream
CapturedStream	src/madness/external/gtest/src/gtest-port.cc	/^class CapturedStream {$/;"	c	namespace:testing::internal	file:
CartCreate	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void CartCreate$/;"	f	namespace:elem::mpi
CartSub	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void CartSub( Comm comm, const int* remainingDims, Comm& subComm )$/;"	f	namespace:elem::mpi
CartesianGaussian	src/apps/chem/PNOGuessFunctions.h	/^	class CartesianGaussian : public FunctionFunctorInterface<double, 3> {$/;"	c	class:madness::BasisFunctions
CartesianProductGenerator10	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  CartesianProductGenerator10(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator10
CartesianProductGenerator10	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductGenerator10$/;"	c	namespace:testing::internal
CartesianProductGenerator2	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  CartesianProductGenerator2(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator2
CartesianProductGenerator2	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductGenerator2$/;"	c	namespace:testing::internal
CartesianProductGenerator3	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  CartesianProductGenerator3(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator3
CartesianProductGenerator3	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductGenerator3$/;"	c	namespace:testing::internal
CartesianProductGenerator4	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  CartesianProductGenerator4(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator4
CartesianProductGenerator4	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductGenerator4$/;"	c	namespace:testing::internal
CartesianProductGenerator5	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  CartesianProductGenerator5(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator5
CartesianProductGenerator5	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductGenerator5$/;"	c	namespace:testing::internal
CartesianProductGenerator6	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  CartesianProductGenerator6(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator6
CartesianProductGenerator6	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductGenerator6$/;"	c	namespace:testing::internal
CartesianProductGenerator7	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  CartesianProductGenerator7(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator7
CartesianProductGenerator7	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductGenerator7$/;"	c	namespace:testing::internal
CartesianProductGenerator8	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  CartesianProductGenerator8(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator8
CartesianProductGenerator8	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductGenerator8$/;"	c	namespace:testing::internal
CartesianProductGenerator9	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  CartesianProductGenerator9(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator9
CartesianProductGenerator9	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductGenerator9$/;"	c	namespace:testing::internal
CartesianProductHolder10	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^CartesianProductHolder10(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder10
CartesianProductHolder10	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductHolder10 {$/;"	c	namespace:testing::internal
CartesianProductHolder2	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^CartesianProductHolder2(const Generator1& g1, const Generator2& g2)$/;"	f	class:testing::internal::CartesianProductHolder2
CartesianProductHolder2	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductHolder2 {$/;"	c	namespace:testing::internal
CartesianProductHolder3	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^CartesianProductHolder3(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder3
CartesianProductHolder3	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductHolder3 {$/;"	c	namespace:testing::internal
CartesianProductHolder4	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^CartesianProductHolder4(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder4
CartesianProductHolder4	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductHolder4 {$/;"	c	namespace:testing::internal
CartesianProductHolder5	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^CartesianProductHolder5(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder5
CartesianProductHolder5	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductHolder5 {$/;"	c	namespace:testing::internal
CartesianProductHolder6	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^CartesianProductHolder6(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder6
CartesianProductHolder6	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductHolder6 {$/;"	c	namespace:testing::internal
CartesianProductHolder7	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^CartesianProductHolder7(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder7
CartesianProductHolder7	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductHolder7 {$/;"	c	namespace:testing::internal
CartesianProductHolder8	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^CartesianProductHolder8(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder8
CartesianProductHolder8	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductHolder8 {$/;"	c	namespace:testing::internal
CartesianProductHolder9	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^CartesianProductHolder9(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder9
CartesianProductHolder9	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class CartesianProductHolder9 {$/;"	c	namespace:testing::internal
CaseInsensitiveCStringEquals	src/madness/external/gtest/src/gtest.cc	/^bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CaseInsensitiveWideCStringEquals	src/madness/external/gtest/src/gtest.cc	/^bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,$/;"	f	class:testing::internal::String
Cast	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^inline TOut Cast( const TIn& input )$/;"	f	namespace:elem::choice
Cast	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^inline bool Cast( const std::string& input )$/;"	f	namespace:elem::choice
Cauchy	src/madness/external/elemental/include/elemental/matrices/Cauchy.hpp	/^Cauchy$/;"	f	namespace:elem
Cauchy	src/madness/external/elemental/include/elemental/matrices/Cauchy.hpp	/^Cauchy( Matrix<F1>& A, const std::vector<F2>& x, const std::vector<F2>& y )$/;"	f	namespace:elem
CauchyLike	src/madness/external/elemental/include/elemental/matrices/CauchyLike.hpp	/^CauchyLike$/;"	f	namespace:elem
CerealInputArchive	src/madness/world/cereal_archive.h	/^  CerealInputArchive(Arg &&arg, RestOfArgs &&... rest_of_args)$/;"	f	class:madness::archive::CerealInputArchive
CerealInputArchive	src/madness/world/cereal_archive.h	/^  CerealInputArchive(Muesli &muesli) : muesli(&muesli, [](Muesli *) {}) {}$/;"	f	class:madness::archive::CerealInputArchive
CerealInputArchive	src/madness/world/cereal_archive.h	/^template <typename Muesli> class CerealInputArchive : public BaseInputArchive {$/;"	c	namespace:madness::archive
CerealOutputArchive	src/madness/world/cereal_archive.h	/^  CerealOutputArchive(Arg &&arg, RestOfArgs &&... rest_of_args)$/;"	f	class:madness::archive::CerealOutputArchive
CerealOutputArchive	src/madness/world/cereal_archive.h	/^  CerealOutputArchive(Muesli &muesli) : muesli(&muesli, [](Muesli *) {}) {}$/;"	f	class:madness::archive::CerealOutputArchive
CerealOutputArchive	src/madness/world/cereal_archive.h	/^class CerealOutputArchive : public ::madness::archive::BaseOutputArchive {$/;"	c	namespace:madness::archive
ChDir	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int ChDir(const char* dir) { return chdir(dir); }$/;"	f	namespace:testing::internal::posix
Chan	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Chan.hpp	/^Chan$/;"	f	namespace:elem::svd
Chan	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Chan.hpp	/^Chan( DistMatrix<F>& A, DistMatrix<Base<F>,VR,STAR>& s, double heightRatio=1.2 )$/;"	f	namespace:elem::svd
ChanUpper	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Chan.hpp	/^ChanUpper$/;"	f	namespace:elem::svd
CharFormat	src/madness/external/gtest/src/gtest-printers.cc	/^enum CharFormat {$/;"	g	namespace:testing::internal	file:
CharToLeftOrRight	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^CharToLeftOrRight( char c )$/;"	f	namespace:elem::LeftOrRightNS
CharToOrientation	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^CharToOrientation( char c )$/;"	f	namespace:elem::OrientationNS
CharToUnitOrNonUnit	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^CharToUnitOrNonUnit( char c )$/;"	f	namespace:elem::UnitOrNonUnitNS
CharToUpperOrLower	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^CharToUpperOrLower( char c )$/;"	f	namespace:elem::UpperOrLowerNS
Charge	src/madness/mra/testopdir.cc	/^class Charge : public FunctionFunctorInterface<double,3> {$/;"	c	file:
Check	src/madness/external/elemental/tests/core/BlockDistMatrix.cpp	/^Check( BlockDistMatrix<T,AColDist,ARowDist>& A, $/;"	f
Check	src/madness/external/elemental/tests/core/DistMatrix.cpp	/^Check( DistMatrix<T,AColDist,ARowDist>& A, $/;"	f
CheckAddr	src/apps/moldft/fci/crayio.c	/^static int CheckAddr(integer addr)$/;"	f	file:
CheckCount	src/apps/moldft/fci/crayio.c	/^static int CheckCount(integer count)$/;"	f	file:
CheckInput	src/madness/external/elemental/src/blas-like/Trr2k/Local.hpp	/^void CheckInput$/;"	f	namespace:elem::trr2k
CheckInput	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void CheckInput$/;"	f	namespace:elem::trrk
CheckInputNN	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void CheckInputNN( const Matrix<T>& A, const Matrix<T>& B, const Matrix<T>& C )$/;"	f	namespace:elem::trrk
CheckInputNT	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void CheckInputNT$/;"	f	namespace:elem::trrk
CheckInputTN	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void CheckInputTN$/;"	f	namespace:elem::trrk
CheckInputTT	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void CheckInputTT$/;"	f	namespace:elem::trrk
CheckName	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::CheckName(const string_type &a_sName,$/;"	f	class:mu::ParserBase
CheckRealSchur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/CheckReal.hpp	/^CheckRealSchur( const DistMatrix<Complex<Real>>& U, bool standardForm=false )$/;"	f	namespace:elem::schur
CheckRealSchur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/CheckReal.hpp	/^CheckRealSchur( const DistMatrix<Real>& U, bool standardForm=false )$/;"	f	namespace:elem::schur
CheckRealSchur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/CheckReal.hpp	/^CheckRealSchur( const Matrix<Complex<Real>>& U, bool standardForm=false )$/;"	f	namespace:elem::schur
CheckRealSchur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/CheckReal.hpp	/^CheckRealSchur( const Matrix<Real>& U, bool standardForm=false )$/;"	f	namespace:elem::schur
CheckScale	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Util.hpp	/^CheckScale( DistMatrix<F>& A, Base<F>& scale )$/;"	f	namespace:elem::svd
CheckScale	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	/^bool CheckScale( UpperOrLower uplo, DistMatrix<F>& A, Base<F>& scale )$/;"	f	namespace:elem::herm_eig
CheckUnit	src/apps/moldft/fci/crayio.c	/^static int CheckUnit(integer unit)$/;"	f	file:
CheckedDowncastToActualType	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^Derived* CheckedDowncastToActualType(Base* base) {$/;"	f	namespace:testing::internal
Child	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle
Child	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle
Child	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const			{ return Child( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle
ChildElement	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle
ChildElement	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle
ChildElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const	{ return ChildElement( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^Cholesky$/;"	f	namespace:elem
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^Cholesky( UpperOrLower uplo, DistMatrix<F>& A )$/;"	f	namespace:elem
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^Cholesky( UpperOrLower uplo, Matrix<F>& A )$/;"	f	namespace:elem
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^Cholesky( UpperOrLower uplo, Matrix<F>& A, Matrix<Int>& pPerm )$/;"	f	namespace:elem
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Cholesky.hpp	/^Cholesky( DistMatrix<F,VC,STAR>& A, DistMatrix<F,STAR,STAR>& R )$/;"	f	namespace:elem::qr
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Cholesky.hpp	/^Cholesky( Matrix<F>& A, Matrix<F>& R )$/;"	f	namespace:elem::qr
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Cholesky.hpp	/^Cholesky( DistMatrix<F,STAR,VR>& A, DistMatrix<F,STAR,STAR>& R )$/;"	f	namespace:elem::rq
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Cholesky.hpp	/^Cholesky( Matrix<F>& A, Matrix<F>& R )$/;"	f	namespace:elem::rq
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/Cholesky.hpp	/^Cholesky( UpperOrLower uplo, DistMatrix<F>& A )$/;"	f	namespace:elem::hpd_det
Cholesky	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/Cholesky.hpp	/^Cholesky( UpperOrLower uplo, Matrix<F>& A )$/;"	f	namespace:elem::hpd_det
Cholesky	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void Cholesky( char uplo, int n, dcomplex* A, const int* descA )$/;"	f	namespace:elem::scalapack
Cholesky	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void Cholesky( char uplo, int n, double* A, const int* descA )$/;"	f	namespace:elem::scalapack
Cholesky	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void Cholesky( char uplo, int n, float* A, const int* descA )$/;"	f	namespace:elem::scalapack
Cholesky	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void Cholesky( char uplo, int n, scomplex* A, const int* descA )$/;"	f	namespace:elem::scalapack
CholeskyLVar2	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyLVar2.hpp	/^CholeskyLVar2( DistMatrix<F>& A )$/;"	f	namespace:elem::hpd_inv
CholeskyLVar2	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyLVar2.hpp	/^CholeskyLVar2( Matrix<F>& A )$/;"	f	namespace:elem::hpd_inv
CholeskyMod	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^CholeskyMod$/;"	f	namespace:elem
CholeskyMod	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^CholeskyMod( UpperOrLower uplo, Matrix<F>& T, Base<F> alpha, Matrix<F>& V )$/;"	f	namespace:elem
CholeskyUVar2	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyUVar2.hpp	/^CholeskyUVar2( DistMatrix<F>& A )$/;"	f	namespace:elem::hpd_inv
CholeskyUVar2	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyUVar2.hpp	/^CholeskyUVar2( Matrix<F>& A )$/;"	f	namespace:elem::hpd_inv
ChoosePanelPivot	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^ChoosePanelPivot$/;"	f	namespace:elem::ldl
ChoosePivot	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^ChoosePivot( const DistMatrix<F>& A, LDLPivotType pivotType, Base<F> gamma )$/;"	f	namespace:elem::ldl
ChoosePivot	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^ChoosePivot( const Matrix<F>& A, LDLPivotType pivotType, Base<F> gamma )$/;"	f	namespace:elem::ldl
ChopLowBits	src/madness/external/gtest/src/gtest.cc	/^inline UInt32 ChopLowBits(UInt32* bits, int n) {$/;"	f	namespace:testing::internal
Circulant	src/madness/external/elemental/include/elemental/matrices/Circulant.hpp	/^Circulant( BlockDistMatrix<T,U,V>& A, const std::vector<T>& a )$/;"	f	namespace:elem
Circulant	src/madness/external/elemental/include/elemental/matrices/Circulant.hpp	/^Circulant( DistMatrix<T,U,V>& A, const std::vector<T>& a )$/;"	f	namespace:elem
Circulant	src/madness/external/elemental/include/elemental/matrices/Circulant.hpp	/^Circulant( Matrix<T>& A, const std::vector<T>& a )$/;"	f	namespace:elem
ClassUniqueToAlwaysTrue	src/madness/external/gtest/src/gtest.cc	/^class ClassUniqueToAlwaysTrue {};$/;"	c	namespace:testing::internal::__anon39	file:
Clear	src/madness/external/gtest/src/gtest.cc	/^void TestResult::Clear() {$/;"	f	class:testing::TestResult
Clear	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode
Clear	src/madness/external/tinyxml/tinyxml.h	/^	void Clear()		{ row = col = -1; }$/;"	f	struct:TiXmlCursor
ClearAdHocTestResult	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void ClearAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearConst	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ClearConst()$/;"	f	class:mu::ParserBase
ClearError	src/madness/external/tinyxml/tinyxml.h	/^	void ClearError()						{	error = false; $/;"	f	class:TiXmlDocument
ClearFormula	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ClearFormula()$/;"	f	class:mu::ParserBase
ClearFun	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ClearFun()$/;"	f	class:mu::ParserBase
ClearInfixOprt	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ClearInfixOprt()$/;"	f	class:mu::ParserBase
ClearNonAdHocTestResult	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void ClearNonAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearOprt	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ClearOprt()$/;"	f	class:mu::ParserBase
ClearPostfixOprt	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ClearPostfixOprt()$/;"	f	class:mu::ParserBase
ClearResult	src/madness/external/gtest/src/gtest.cc	/^void TestCase::ClearResult() {$/;"	f	class:testing::TestCase
ClearTestCaseResult	src/madness/external/gtest/include/gtest/gtest.h	/^  static void ClearTestCaseResult(TestCase* test_case) {$/;"	f	class:testing::TestCase
ClearTestPartResults	src/madness/external/gtest/src/gtest-internal-inl.h	/^  static void ClearTestPartResults(TestResult* test_result) {$/;"	f	class:testing::internal::TestResultAccessor
ClearTestPartResults	src/madness/external/gtest/src/gtest.cc	/^void TestResult::ClearTestPartResults() {$/;"	f	class:testing::TestResult
ClearTestResult	src/madness/external/gtest/include/gtest/gtest.h	/^  static void ClearTestResult(TestInfo* test_info) {$/;"	f	class:testing::TestInfo
ClearThis	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement
ClearVar	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ClearVar()$/;"	f	class:mu::ParserBase
Clip	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^Clip( BlockDistMatrix<Real,U,V>& X, Real lowerBound=0, Real upperBound=1 )$/;"	f	namespace:elem
Clip	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^Clip( DistMatrix<Real,U,V>& X, Real lowerBound=0, Real upperBound=1 )$/;"	f	namespace:elem
Clip	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^Clip( Matrix<Real>& X, Real lowerBound=0, Real upperBound=1 )$/;"	f	namespace:elem
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Clone	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Clone	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback* ParserCallback::Clone() const$/;"	f	class:mu::ParserCallback
Clone	src/madness/external/muParser/muParserTokenReader.cpp	/^  ParserTokenReader* ParserTokenReader::Clone(ParserBase *a_pParent) const$/;"	f	class:mu::ParserTokenReader
Clone	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment
Clone	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration
Clone	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument
Clone	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement
Clone	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText
Clone	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown
Clone	src/madness/world/safempi.h	/^        Intracomm Clone() const {$/;"	f	class:SafeMPI::Intracomm
Close	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int Close(int fd) { return close(fd); }$/;"	f	namespace:testing::internal::posix
CloseConnection	src/madness/external/gtest/src/gtest-internal-inl.h	/^    virtual void CloseConnection() {}$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
CloseConnection	src/madness/external/gtest/src/gtest-internal-inl.h	/^    void CloseConnection() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
CmpHelperEQ	src/madness/external/gtest/include/gtest/gtest.h	/^AssertionResult CmpHelperEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperEQ	src/madness/external/gtest/src/gtest.cc	/^AssertionResult CmpHelperEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperFloatingPointEQ	src/madness/external/gtest/include/gtest/gtest.h	/^AssertionResult CmpHelperFloatingPointEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRCASEEQ	src/madness/external/gtest/src/gtest.cc	/^AssertionResult CmpHelperSTRCASEEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRCASENE	src/madness/external/gtest/src/gtest.cc	/^AssertionResult CmpHelperSTRCASENE(const char* s1_expression,$/;"	f	namespace:testing::internal
CmpHelperSTREQ	src/madness/external/gtest/src/gtest.cc	/^AssertionResult CmpHelperSTREQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRNE	src/madness/external/gtest/src/gtest.cc	/^AssertionResult CmpHelperSTRNE(const char* s1_expression,$/;"	f	namespace:testing::internal
CodePointToUtf8	src/madness/external/gtest/src/gtest.cc	/^std::string CodePointToUtf8(UInt32 code_point) {$/;"	f	namespace:testing::internal
CoeffTracker	src/madness/mra/funcimpl.h	/^    	CoeffTracker() : impl(), key_(), is_leaf_(unknown), coeff_() {}$/;"	f	class:madness::CoeffTracker
CoeffTracker	src/madness/mra/funcimpl.h	/^    	CoeffTracker(const CoeffTracker& other) : impl(other.impl), key_(other.key_),$/;"	f	class:madness::CoeffTracker
CoeffTracker	src/madness/mra/funcimpl.h	/^    	CoeffTracker(const implT* impl) : impl(impl), is_leaf_(no) {$/;"	f	class:madness::CoeffTracker
CoeffTracker	src/madness/mra/funcimpl.h	/^    	explicit CoeffTracker(const CoeffTracker& other, const datumT& datum) : impl(other.impl), key_(other.key_),$/;"	f	class:madness::CoeffTracker
CoeffTracker	src/madness/mra/funcimpl.h	/^    class CoeffTracker {$/;"	c	namespace:madness
CoinFlip	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^inline Int CoinFlip()$/;"	f	namespace:elem
Col	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::Col() const { return MRRank(); }$/;"	f	class:elem::Grid
Col	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Col.hpp	/^Col( DistMatrix<F,U,V>& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem::hyp_reflector
Col	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Col.hpp	/^Col( F& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem::hyp_reflector
Col	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Col.hpp	/^Col( DistMatrix<F,U,V>& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem::reflector
Col	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Col.hpp	/^Col( F& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem::reflector
ColAlign	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::ColAlign() const { return colAlign_; }$/;"	f	class:elem::AbstractBlockDistMatrix
ColAlign	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::ColAlign() const { return colAlign_; }$/;"	f	class:elem::AbstractDistMatrix
ColAllGather	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::ColAllGather$/;"	f	class:elem::GeneralBlockDistMatrix
ColAllGather	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::ColAllGather( DistMatrix<T,UGath,V>& A ) const$/;"	f	class:elem::GeneralDistMatrix
ColComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::ColComm() const { return MCComm(); }$/;"	f	class:elem::Grid
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^mpi::Comm BDM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^mpi::Comm BDM::ColComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^mpi::Comm BDM::ColComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^mpi::Comm BDM::ColComm() const { return this->grid_->MDComm(); }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^mpi::Comm BDM::ColComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^mpi::Comm BDM::ColComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^mpi::Comm BDM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^mpi::Comm BDM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^mpi::Comm BDM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^mpi::Comm BDM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^mpi::Comm BDM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^mpi::Comm BDM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^mpi::Comm BDM::ColComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^mpi::Comm BDM::ColComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::BDM
ColComm	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^mpi::Comm DM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^mpi::Comm DM::ColComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^mpi::Comm DM::ColComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^mpi::Comm DM::ColComm() const { return this->grid_->MDComm(); }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^mpi::Comm DM::ColComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^mpi::Comm DM::ColComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^mpi::Comm DM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^mpi::Comm DM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^mpi::Comm DM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^mpi::Comm DM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^mpi::Comm DM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^mpi::Comm DM::ColComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^mpi::Comm DM::ColComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::DM
ColComm	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^mpi::Comm DM::ColComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::DM
ColConstrained	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^bool AbstractBlockDistMatrix<T>::ColConstrained() const $/;"	f	class:elem::AbstractBlockDistMatrix
ColConstrained	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^bool AbstractDistMatrix<T>::ColConstrained() const { return colConstrained_; }$/;"	f	class:elem::AbstractDistMatrix
ColCut	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::ColCut() const { return colCut_; }$/;"	f	class:elem::AbstractBlockDistMatrix
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	11;"	d	file:
ColDist	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	11;"	d	file:
ColFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::ColFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
ColFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::ColFilterFrom( const DistMatrix<T,UGath,V>& A )$/;"	f	class:elem::GeneralDistMatrix
ColNorms	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	/^ColNorms( const DistMatrix<F>& A, std::vector<Base<F>>& norms )$/;"	f	namespace:elem::qr
ColNorms	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	/^ColNorms( const Matrix<F>& A, std::vector<Base<F>>& norms )$/;"	f	namespace:elem::qr
ColOwner	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::ColOwner( Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
ColOwner	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::ColOwner( Int j ) const$/;"	f	class:elem::AbstractDistMatrix
ColRank	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::ColRank() const $/;"	f	class:elem::AbstractBlockDistMatrix
ColRank	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::ColRank() const$/;"	f	class:elem::AbstractDistMatrix
ColShift	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::ColShift() const { return colShift_; }$/;"	f	class:elem::AbstractBlockDistMatrix
ColShift	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::ColShift() const { return colShift_; }$/;"	f	class:elem::AbstractDistMatrix
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^Int BDM::ColStride() const { return 1; }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^Int BDM::ColStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^Int BDM::ColStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^Int BDM::ColStride() const { return this->grid_->LCM(); }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^Int BDM::ColStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^Int BDM::ColStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^Int BDM::ColStride() const { return 1; }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^Int BDM::ColStride() const { return 1; }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^Int BDM::ColStride() const { return 1; }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^Int BDM::ColStride() const { return 1; }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^Int BDM::ColStride() const { return 1; }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^Int BDM::ColStride() const { return 1; }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^Int BDM::ColStride() const { return this->grid_->VCSize(); }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^Int BDM::ColStride() const { return this->grid_->VRSize(); }$/;"	f	class:elem::BDM
ColStride	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^Int DM::ColStride() const { return 1; }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^Int DM::ColStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^Int DM::ColStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^Int DM::ColStride() const { return this->grid_->LCM(); }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^Int DM::ColStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^Int DM::ColStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^Int DM::ColStride() const { return 1; }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^Int DM::ColStride() const { return 1; }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^Int DM::ColStride() const { return 1; }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^Int DM::ColStride() const { return 1; }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^Int DM::ColStride() const { return 1; }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^Int DM::ColStride() const { return 1; }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^Int DM::ColStride() const { return this->grid_->VCSize(); }$/;"	f	class:elem::DM
ColStride	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^Int DM::ColStride() const { return this->grid_->VRSize(); }$/;"	f	class:elem::DM
ColSumScatterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::ColSumScatterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
ColSumScatterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::ColSumScatterFrom( const DistMatrix<T,UGath,V>& A )$/;"	f	class:elem::GeneralDistMatrix
ColSumScatterUpdate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::ColSumScatterUpdate$/;"	f	class:elem::GeneralBlockDistMatrix
ColSumScatterUpdate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::ColSumScatterUpdate$/;"	f	class:elem::GeneralDistMatrix
ColSwap	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^inline void ColSwap( DistMatrix<F,U,V>& A, Int to, Int from )$/;"	f	namespace:elem
ColSwap	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^inline void ColSwap( Matrix<F>& A, Int to, Int from )$/;"	f	namespace:elem
CollectFrom	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::CollectFrom( const BlockDistMatrix<T,U,V>& A )$/;"	f	class:elem::BDM
CollectFrom	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::CollectFrom( const DistMatrix<T,U,V>& A )$/;"	f	class:elem::DM
ColorMap	src/madness/external/elemental/include/elemental/io/decl.hpp	/^enum ColorMap$/;"	g	namespace:elem::ColorMapNS
ColorMapNS	src/madness/external/elemental/include/elemental/io/decl.hpp	/^namespace ColorMapNS {$/;"	n	namespace:elem
ColoredPrintf	src/madness/external/gtest/src/gtest.cc	/^void ColoredPrintf(GTestColor color, const char* fmt, ...) {$/;"	f	namespace:testing::internal
Column	src/madness/external/tinyxml/tinyxml.h	/^	int Column() const		{ return location.col + 1; }	\/\/\/< See Row()$/;"	f	class:TiXmlBase
ColumnNorms	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^ColumnNorms$/;"	f	namespace:elem::pspec
ColumnNorms	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^ColumnNorms( const DistMatrix<F,U,V>& X, DistMatrix<Base<F>,V,STAR>& norms )$/;"	f	namespace:elem::pspec
ColumnNorms	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^ColumnNorms( const DistMatrix<F>& X, std::vector<Base<F>>& norms )$/;"	f	namespace:elem::pspec
ColumnNorms	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^ColumnNorms( const Matrix<F>& X, Matrix<Base<F>>& norms )$/;"	f	namespace:elem::pspec
ColumnNorms	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^ColumnNorms( const Matrix<F>& X, std::vector<Base<F>>& norms )$/;"	f	namespace:elem::pspec
ColumnSubtractions	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^ColumnSubtractions$/;"	f	namespace:elem::pspec
Combine	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    Generator10> Combine($/;"	f	namespace:testing
Combine	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    Generator4, Generator5, Generator6, Generator7, Generator8> Combine($/;"	f	namespace:testing
Combine	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    Generator4, Generator5, Generator6, Generator7> Combine($/;"	f	namespace:testing
Combine	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    Generator4, Generator5, Generator6> Combine($/;"	f	namespace:testing
Combine	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    Generator4, Generator5> Combine($/;"	f	namespace:testing
Combine	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    Generator4> Combine($/;"	f	namespace:testing
Combine	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    Generator9> Combine($/;"	f	namespace:testing
Combine	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::CartesianProductHolder2<Generator1, Generator2> Combine($/;"	f	namespace:testing
Combine	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::CartesianProductHolder3<Generator1, Generator2, Generator3> Combine($/;"	f	namespace:testing
Comm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::Comm() const$/;"	f	class:elem::Grid
Comm	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^    Comm( MPI_Comm mpiComm=MPI_COMM_NULL ) : comm(mpiComm) { }$/;"	f	struct:elem::mpi::Comm
Comm	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^struct Comm$/;"	s	namespace:elem::mpi
CommGroup	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void CommGroup( Comm comm, Group& group )$/;"	f	namespace:elem::mpi
Comm_compare	src/madness/world/safempi.h	/^        static bool Comm_compare(const MPI_Comm& comm1, const MPI_Comm& comm2) {$/;"	f	class:SafeMPI::Intracomm
Compare	src/madness/external/gtest/include/gtest/gtest.h	/^  static AssertionResult Compare($/;"	f	class:testing::internal::EqHelper
Compare	src/madness/external/gtest/include/gtest/gtest.h	/^  static AssertionResult Compare(const char* expected_expression,$/;"	f	class:testing::internal::EqHelper
CompareAndSwapSigned32	src/madness/world/bgq_atomics.h	/^__INLINE__ int32_t CompareAndSwapSigned32( volatile int32_t *var, int32_t  Compare, int32_t  NewValue )$/;"	f
CompileAssert	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^struct CompileAssert {$/;"	s	namespace:testing::internal
CompileAssertTypesEqual	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct CompileAssertTypesEqual<T, T> {$/;"	s	namespace:testing::internal
ComplainIfDebug	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^inline void ComplainIfDebug()$/;"	f	namespace:elem
ComplainIfReal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::ComplainIfReal() const$/;"	f	class:elem::AbstractBlockDistMatrix
ComplainIfReal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::ComplainIfReal() const$/;"	f	class:elem::AbstractDistMatrix
ComplainIfReal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::ComplainIfReal() const$/;"	f	class:elem::Matrix
ComplexDisplayWindow	src/madness/external/elemental/include/elemental/io/ComplexDisplayWindow-premoc.hpp	/^class ComplexDisplayWindow : public QWidget$/;"	c	namespace:elem
ComplexDisplayWindow	src/madness/external/elemental/src/io/ComplexDisplayWindow.cpp	/^ComplexDisplayWindow::ComplexDisplayWindow( QWidget* parent )$/;"	f	class:elem::ComplexDisplayWindow
ComplexExp	src/apps/hf/solver.h	/^      ComplexExp(vec3dT exponent, double_complex coeff)$/;"	f	class:madness::ComplexExp
ComplexExp	src/apps/hf/solver.h	/^  class ComplexExp : public FunctionFunctorInterface<double_complex,NDIM> {$/;"	c	namespace:madness
ComplexExpFunction	src/apps/exciting/wannier.cc	/^  ComplexExpFunction(double kx, double ky, double kz)$/;"	f	class:ComplexExpFunction
ComplexExpFunction	src/apps/exciting/wannier.cc	/^class ComplexExpFunction: public FunctionFunctorInterface<std::complex<double>, 3>$/;"	c	file:
ComplexFuncIdentOp	src/examples/test_gmres.cc	/^class ComplexFuncIdentOp : public Operator<Function<std::complex<double>, 3> > {$/;"	c	file:
ComplexFuncLinearOp	src/examples/test_gmres.cc	/^		ComplexFuncLinearOp(const Function<std::complex<double>, 3> &_b) : b(_b) {}$/;"	f	class:ComplexFuncLinearOp
ComplexFuncLinearOp	src/examples/test_gmres.cc	/^class ComplexFuncLinearOp : public Operator<Function<std::complex<double>, 3> > {$/;"	c	file:
ComplexHermitianFunction	src/madness/external/elemental/include/elemental/lapack-like/funcs/HermitianFunction.hpp	/^ComplexHermitianFunction$/;"	f	namespace:elem
ComplexVecIdentOp	src/examples/test_gmres.cc	/^class ComplexVecIdentOp : public Operator<Vector<std::complex<double>, 3> > {$/;"	c	file:
ComplexVecLinearOp	src/examples/test_gmres.cc	/^class ComplexVecLinearOp : public Operator<Vector<std::complex<double>, 3> > {$/;"	c	file:
Complex_CIS_Parameters	src/apps/chem/zcis.h	/^	Complex_CIS_Parameters(World& world) {$/;"	f	class:madness::Complex_CIS_Parameters
Complex_CIS_Parameters	src/apps/chem/zcis.h	/^class Complex_CIS_Parameters : public QCCalculationParametersBase {$/;"	c	namespace:madness
CompositeFactory	src/madness/mra/function_factory.h	/^    CompositeFactory(World& world)$/;"	f	class:madness::CompositeFactory
CompositeFactory	src/madness/mra/function_factory.h	/^  class CompositeFactory : public FunctionFactory<T, NDIM> {$/;"	c	namespace:madness
CompositeFunctorInterface	src/madness/mra/function_interface.h	/^		CompositeFunctorInterface(World& world, pimplT ket, pimplT g12,$/;"	f	class:madness::CompositeFunctorInterface
CompositeFunctorInterface	src/madness/mra/function_interface.h	/^	class CompositeFunctorInterface : public FunctionFunctorInterface<T,NDIM> {$/;"	c	namespace:madness
Compton_wavelength	src/madness/constants.h	/^        const double Compton_wavelength = 2.4263102175e-12 ; \/\/  0.0000000033e-12   m$/;"	m	namespace:madness::constants
ComputeCurrentValue	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
ComputeCurrentValue	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
ComputeCurrentValue	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
ComputeCurrentValue	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
ComputeCurrentValue	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
ComputeCurrentValue	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
ComputeCurrentValue	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
ComputeCurrentValue	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
ComputeCurrentValue	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
ComputeNewEstimates	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRA.hpp	/^ComputeNewEstimates$/;"	f	namespace:elem::pspec
ComputeNewEstimates	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRL.hpp	/^ComputeNewEstimates$/;"	f	namespace:elem::pspec
ComputeNewEstimates	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Lanczos.hpp	/^ComputeNewEstimates$/;"	f	namespace:elem::pspec
ComputePartition	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^ComputePartition( DistMatrix<F>& A )$/;"	f	namespace:elem::schur
ComputePartition	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^ComputePartition( Matrix<F>& A )$/;"	f	namespace:elem::schur
ConcatPaths	src/madness/external/gtest/src/gtest-filepath.cc	/^FilePath FilePath::ConcatPaths(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
ConcurrentHashMap	src/madness/world/worldhashmap.h	/^        ConcurrentHashMap(const  hashT& h)$/;"	f	class:madness::ConcurrentHashMap
ConcurrentHashMap	src/madness/world/worldhashmap.h	/^        ConcurrentHashMap(int n=1021, const hashfunT& hf = hashfunT())$/;"	f	class:madness::ConcurrentHashMap
ConcurrentHashMap	src/madness/world/worldhashmap.h	/^    class ConcurrentHashMap {$/;"	c	namespace:madness
Condition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition.hpp	/^Condition( const DistMatrix<F,U,V>& A, NormType type=TWO_NORM )$/;"	f	namespace:elem
Condition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition.hpp	/^Condition( const Matrix<F>& A, NormType type=TWO_NORM )$/;"	f	namespace:elem
ConditionVariable	src/madness/world/worldmutex.h	/^        ConditionVariable() : back(0), front(0) { }$/;"	f	class:madness::ConditionVariable
ConditionVariable	src/madness/world/worldmutex.h	/^    class ConditionVariable : public Spinlock {$/;"	c	namespace:madness
ConfigureStreamingOutput	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::ConfigureStreamingOutput() {$/;"	f	class:testing::internal::UnitTestImpl
ConfigureXmlOutput	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::ConfigureXmlOutput() {$/;"	f	class:testing::internal::UnitTestImpl
Configuring and building	doc/Latex/apps/moldft/manual.tex	/^\\chapter{Configuring and building}$/;"	c
Congruent	src/madness/external/elemental/src/core/imports/mpi.cpp	/^bool Congruent( Comm comm1, Comm comm2 )$/;"	f	namespace:elem::mpi
Conj	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Conj( const Complex<Real>& alpha )$/;"	f	namespace:elem
Conj	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Conj( const Real& alpha )$/;"	f	namespace:elem
ConjTrans	src/madness/tensor/cblas_types.h	/^      ConjTrans=2$/;"	e	enum:madness::cblas::__anon45
Conjugate	src/madness/external/elemental/include/elemental/blas-like/level1/Conjugate.hpp	/^Conjugate( DistMatrix<T,U,V>& A )$/;"	f	namespace:elem
Conjugate	src/madness/external/elemental/include/elemental/blas-like/level1/Conjugate.hpp	/^Conjugate( Matrix<Complex<Z>>& A )$/;"	f	namespace:elem
Conjugate	src/madness/external/elemental/include/elemental/blas-like/level1/Conjugate.hpp	/^Conjugate( Matrix<Z>& A )$/;"	f	namespace:elem
Conjugate	src/madness/external/elemental/include/elemental/blas-like/level1/Conjugate.hpp	/^Conjugate( const DistMatrix<T,U,V>& A, DistMatrix<T,W,Z>& B )$/;"	f	namespace:elem
Conjugate	src/madness/external/elemental/include/elemental/blas-like/level1/Conjugate.hpp	/^Conjugate( const Matrix<T>& A, Matrix<T>& B )$/;"	f	namespace:elem
Conjugate	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Conjugate( Int i, Int j )$/;"	f	class:elem::AbstractBlockDistMatrix
Conjugate	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Conjugate( Int i, Int j )$/;"	f	class:elem::AbstractDistMatrix
Conjugate	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Conjugate( Int i, Int j )$/;"	f	class:elem::Matrix
ConjugateDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::ConjugateDiagonal( Int offset )$/;"	f	class:elem::AbstractBlockDistMatrix
ConjugateDiagonal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::ConjugateDiagonal( Int offset )$/;"	f	class:elem::AbstractDistMatrix
ConjugateDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::ConjugateDiagonal( Int offset )$/;"	f	class:elem::Matrix
ConjugateLocal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::ConjugateLocal( Int iLoc, Int jLoc )$/;"	f	class:elem::AbstractBlockDistMatrix
ConjugateLocal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::ConjugateLocal( Int iLoc, Int jLoc )$/;"	f	class:elem::AbstractDistMatrix
ConjugateLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::ConjugateLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
ConjugateLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::ConjugateLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
ConjugateSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::ConjugateSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
ConjugateSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::ConjugateSubmatrix$/;"	f	class:elem::AbstractDistMatrix
ConjugateSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::ConjugateSubmatrix$/;"	f	class:elem::Matrix
Conjugation	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum Conjugation$/;"	g	namespace:elem::ConjugationNS
ConjugationNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace ConjugationNS {$/;"	n	namespace:elem
ConstCharPtr	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  ConstCharPtr(const char* str) : value(str) {}$/;"	f	struct:testing::internal::ConstCharPtr
ConstCharPtr	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct GTEST_API_ ConstCharPtr {$/;"	s	namespace:testing::internal
ConstantSphere	src/apps/interior_bc/test_problems.h	/^        ConstantSphere(int k, double thresh, double eps, std::string penalty_name,$/;"	f	class:ConstantSphere
ConstantSphere	src/apps/interior_bc/test_problems.h	/^class ConstantSphere : public EmbeddedDirichlet {$/;"	c
ContainerType	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef typename ::std::vector<T> ContainerType;$/;"	t	class:testing::internal::ValuesInIteratorRangeGenerator
ContractedGaussianShell	src/apps/chem/molecularbasis.h	/^    ContractedGaussianShell()$/;"	f	class:madness::ContractedGaussianShell
ContractedGaussianShell	src/apps/chem/molecularbasis.h	/^    ContractedGaussianShell(int type,$/;"	f	class:madness::ContractedGaussianShell
ContractedGaussianShell	src/apps/chem/molecularbasis.h	/^class ContractedGaussianShell {$/;"	c	namespace:madness
ContractedGaussianShell	src/apps/hf/molecularbasis.h	/^    ContractedGaussianShell()$/;"	f	class:ContractedGaussianShell
ContractedGaussianShell	src/apps/hf/molecularbasis.h	/^    ContractedGaussianShell(int type,$/;"	f	class:ContractedGaussianShell
ContractedGaussianShell	src/apps/hf/molecularbasis.h	/^class ContractedGaussianShell {$/;"	c
ContractedGaussianShell	src/apps/polar/molecularbasis.h	/^    ContractedGaussianShell()$/;"	f	class:ContractedGaussianShell
ContractedGaussianShell	src/apps/polar/molecularbasis.h	/^    ContractedGaussianShell(int type,$/;"	f	class:ContractedGaussianShell
ContractedGaussianShell	src/apps/polar/molecularbasis.h	/^class ContractedGaussianShell {$/;"	c
Control	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Control( Int height, Int width, T* buffer, Int ldim )$/;"	f	class:elem::Matrix
Control_	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Control_( Int height, Int width, T* buffer, Int ldim )$/;"	f	class:elem::Matrix
Controlling convergence and accuracy	doc/Latex/apps/moldft/manual.tex	/^\\section{Controlling convergence and accuracy}$/;"	s
ConvertUTF32ToUTF8	src/madness/external/tinyxml/tinyxmlparser.cc	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase
Convolution1D	src/madness/mra/convolution1d.h	/^        Convolution1D(int k, int npt, int maxR, double arg = 0.0)$/;"	f	class:madness::Convolution1D
Convolution1D	src/madness/mra/convolution1d.h	/^    class Convolution1D {$/;"	c	namespace:madness
ConvolutionData1D	src/madness/mra/convolution1d.h	/^        ConvolutionData1D(const Tensor<Q>& R, const Tensor<Q>& T) : R(R), T(T) {$/;"	f	struct:madness::ConvolutionData1D
ConvolutionData1D	src/madness/mra/convolution1d.h	/^        ConvolutionData1D(const Tensor<Q>& R, const Tensor<Q>& T, const bool modified) : R(R), T(T) {$/;"	f	struct:madness::ConvolutionData1D
ConvolutionData1D	src/madness/mra/convolution1d.h	/^    struct ConvolutionData1D {$/;"	s	namespace:madness
ConvolutionND	src/madness/mra/convolution1d.h	/^        ConvolutionND() : fac(1.0) {}$/;"	f	class:madness::ConvolutionND
ConvolutionND	src/madness/mra/convolution1d.h	/^        ConvolutionND(const ConvolutionND& other) : fac(other.fac)$/;"	f	class:madness::ConvolutionND
ConvolutionND	src/madness/mra/convolution1d.h	/^        ConvolutionND(std::shared_ptr<Convolution1D<Q> > op, Q fac=1.0) : fac(fac)$/;"	f	class:madness::ConvolutionND
ConvolutionND	src/madness/mra/convolution1d.h	/^    class ConvolutionND {$/;"	c	namespace:madness
Copy	src/madness/external/elemental/include/elemental/blas-like/level1/Copy.hpp	/^Copy$/;"	f	namespace:elem
Copy	src/madness/external/elemental/include/elemental/blas-like/level1/Copy.hpp	/^Copy( const BlockDistMatrix<T,U,V>& A, BlockDistMatrix<T,W,Z>& B )$/;"	f	namespace:elem
Copy	src/madness/external/elemental/include/elemental/blas-like/level1/Copy.hpp	/^Copy( const DistMatrix<Real,U,V>& A, DistMatrix<Complex<Real>,W,Z>& B )$/;"	f	namespace:elem
Copy	src/madness/external/elemental/include/elemental/blas-like/level1/Copy.hpp	/^Copy( const DistMatrix<T,U,V>& A, DistMatrix<T,W,Z>& B )$/;"	f	namespace:elem
Copy	src/madness/external/elemental/include/elemental/blas-like/level1/Copy.hpp	/^Copy( const Matrix<Real>& A, Matrix<Complex<Real>>& B )$/;"	f	namespace:elem
Copy	src/madness/external/elemental/include/elemental/blas-like/level1/Copy.hpp	/^Copy( const Matrix<T>& A, Matrix<T>& B )$/;"	f	namespace:elem
Copy	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^inline void Copy$/;"	f	namespace:elem::blas
Copy	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Copy( int n, const dcomplex* x, int incx, dcomplex* y, int incy )$/;"	f	namespace:elem::blas
Copy	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Copy( int n, const double* x, int incx, double* y, int incy )$/;"	f	namespace:elem::blas
Copy	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Copy( int n, const float* x, int incx, float* y, int incy )$/;"	f	namespace:elem::blas
Copy	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Copy( int n, const scomplex* x, int incx, scomplex* y, int incy )$/;"	f	namespace:elem::blas
CopyArray	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^inline void CopyArray(const T& from, U* to) { *to = from; }$/;"	f	namespace:testing::internal
CopyArray	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^void CopyArray(const T* from, size_t size, U* to) {$/;"	f	namespace:testing::internal
CopyFromDifferentGrid	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^void BDM::CopyFromDifferentGrid( const BDM& A )$/;"	f	class:elem::BDM
CopyFromDifferentGrid	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^void DM::CopyFromDifferentGrid( const DM& A )$/;"	f	class:elem::DM
CopyFromNonRoot	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::CopyFromNonRoot( bool includingViewers )$/;"	f	class:elem::BDM
CopyFromNonRoot	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::CopyFromNonRoot( bool includingViewers )$/;"	f	class:elem::DM
CopyFromRoot	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::CopyFromRoot( const Matrix<T>& A, bool includingViewers )$/;"	f	class:elem::BDM
CopyFromRoot	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::CopyFromRoot( const Matrix<T>& A, bool includingViewers )$/;"	f	class:elem::DM
CopyOrReset	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void CopyOrReset$/;"	f
CopyTo	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment
CopyTo	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration
CopyTo	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument
CopyTo	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement
CopyTo	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode
CopyTo	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText
CopyTo	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown
CoreFittingTarget	src/apps/moldft/mcpfit.cc	/^    CoreFittingTarget (World & world, Calculation & calc, CorePotential & cp)$/;"	f	struct:CoreFittingTarget
CoreFittingTarget	src/apps/moldft/mcpfit.cc	/^struct CoreFittingTarget : public OptimizationTargetInterface {$/;"	s	file:
CoreFittingTarget	src/apps/polar/mcpfit.cc	/^    CoreFittingTarget (World & world, Calculation & calc, CorePotential & cp)$/;"	f	struct:CoreFittingTarget
CoreFittingTarget	src/apps/polar/mcpfit.cc	/^struct CoreFittingTarget : public OptimizationTargetInterface {$/;"	s	file:
CoreOrbital	src/apps/chem/corepotential.h	/^    CoreOrbital() : Bc(0), type(0), coeff(), expnt(), rsqmax(0.0) {}$/;"	f	struct:madness::CoreOrbital
CoreOrbital	src/apps/chem/corepotential.h	/^    CoreOrbital(int type,$/;"	f	struct:madness::CoreOrbital
CoreOrbital	src/apps/chem/corepotential.h	/^struct CoreOrbital {$/;"	s	namespace:madness
CoreOrbital	src/apps/polar/corepotential.h	/^    CoreOrbital() : Bc(0), type(0), coeff(), expnt(), rsqmax(0.0) {}$/;"	f	struct:CoreOrbital
CoreOrbital	src/apps/polar/corepotential.h	/^    CoreOrbital(int type,$/;"	f	struct:CoreOrbital
CoreOrbital	src/apps/polar/corepotential.h	/^struct CoreOrbital {$/;"	s
CoreOrbitalDerivativeFunctor	src/apps/chem/potentialmanager.h	/^    CoreOrbitalDerivativeFunctor(Molecule& molecule, int atom, int axis, unsigned int core, int m)$/;"	f	class:madness::CoreOrbitalDerivativeFunctor
CoreOrbitalDerivativeFunctor	src/apps/chem/potentialmanager.h	/^class CoreOrbitalDerivativeFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
CoreOrbitalDerivativeFunctor	src/apps/polar/potentialmanager.h	/^    CoreOrbitalDerivativeFunctor(Molecule& molecule, int atom, int axis, unsigned int core, int m)$/;"	f	class:CoreOrbitalDerivativeFunctor
CoreOrbitalDerivativeFunctor	src/apps/polar/potentialmanager.h	/^class CoreOrbitalDerivativeFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
CoreOrbitalFunctor	src/apps/chem/potentialmanager.h	/^    CoreOrbitalFunctor(Molecule& molecule, int atom, unsigned int core, int m)$/;"	f	class:madness::CoreOrbitalFunctor
CoreOrbitalFunctor	src/apps/chem/potentialmanager.h	/^class CoreOrbitalFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
CoreOrbitalFunctor	src/apps/moldft/mcpfit.cc	/^    CoreOrbitalFunctor (CorePotentialManager & cpm, unsigned int atn, unsigned int core, int m)$/;"	f	class:CoreOrbitalFunctor
CoreOrbitalFunctor	src/apps/moldft/mcpfit.cc	/^class CoreOrbitalFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
CoreOrbitalFunctor	src/apps/polar/mcpfit.cc	/^    CoreOrbitalFunctor (CorePotentialManager & cpm, unsigned int atn, unsigned int core, int m)$/;"	f	class:CoreOrbitalFunctor
CoreOrbitalFunctor	src/apps/polar/mcpfit.cc	/^class CoreOrbitalFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
CoreOrbitalFunctor	src/apps/polar/potentialmanager.h	/^    CoreOrbitalFunctor(Molecule& molecule, int atom, unsigned int core, int m)$/;"	f	class:CoreOrbitalFunctor
CoreOrbitalFunctor	src/apps/polar/potentialmanager.h	/^class CoreOrbitalFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
CorePotential	src/apps/chem/corepotential.h	/^    CorePotential() : l(), n(), A(), alpha() {};$/;"	f	struct:madness::CorePotential
CorePotential	src/apps/chem/corepotential.h	/^    CorePotential(const std::vector<int>& l,$/;"	f	struct:madness::CorePotential
CorePotential	src/apps/chem/corepotential.h	/^struct CorePotential {$/;"	s	namespace:madness
CorePotential	src/apps/polar/corepotential.h	/^    CorePotential() : l(), n(), A(), alpha() {};$/;"	f	struct:CorePotential
CorePotential	src/apps/polar/corepotential.h	/^    CorePotential(const std::vector<int>& l,$/;"	f	struct:CorePotential
CorePotential	src/apps/polar/corepotential.h	/^struct CorePotential {$/;"	s
CorePotentialDerivativeFunctor	src/apps/chem/SCF.h	/^	CorePotentialDerivativeFunctor(const Molecule& molecule, int atom, int axis)$/;"	f	class:madness::CorePotentialDerivativeFunctor
CorePotentialDerivativeFunctor	src/apps/chem/SCF.h	/^class CorePotentialDerivativeFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
CorePotentialDerivativeFunctor	src/apps/polar/moldft.cc	/^    CorePotentialDerivativeFunctor(const Molecule &molecule, int atom, int axis)$/;"	f	class:CorePotentialDerivativeFunctor
CorePotentialDerivativeFunctor	src/apps/polar/moldft.cc	/^class CorePotentialDerivativeFunctor : public FunctionFunctorInterface<double, 3>$/;"	c	file:
CorePotentialFunctor	src/apps/moldft/mcpfit.cc	/^    CorePotentialFunctor(const CorePotential& pot) : pot(pot) {}$/;"	f	class:CorePotentialFunctor
CorePotentialFunctor	src/apps/moldft/mcpfit.cc	/^class CorePotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
CorePotentialFunctor	src/apps/polar/mcpfit.cc	/^    CorePotentialFunctor(const CorePotential& pot) : pot(pot) {}$/;"	f	class:CorePotentialFunctor
CorePotentialFunctor	src/apps/polar/mcpfit.cc	/^class CorePotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
CorePotentialManager	src/apps/chem/corepotential.h	/^    CorePotentialManager() :$/;"	f	class:madness::CorePotentialManager
CorePotentialManager	src/apps/chem/corepotential.h	/^    CorePotentialManager(std::string filename, double eprec) : core_type(filename) {$/;"	f	class:madness::CorePotentialManager
CorePotentialManager	src/apps/chem/corepotential.h	/^class CorePotentialManager {$/;"	c	namespace:madness
CorePotentialManager	src/apps/polar/corepotential.h	/^    CorePotentialManager() :$/;"	f	class:CorePotentialManager
CorePotentialManager	src/apps/polar/corepotential.h	/^    CorePotentialManager(std::string filename, double eprec) : core_type(filename) {$/;"	f	class:CorePotentialManager
CorePotentialManager	src/apps/polar/corepotential.h	/^class CorePotentialManager {$/;"	c
CorrelationFactor	src/apps/chem/electronic_correlation_factor.h	/^    CorrelationFactor(World& world) : world(world), _gamma(-1.0), dcut(1.e-10),$/;"	f	class:madness::CorrelationFactor
CorrelationFactor	src/apps/chem/electronic_correlation_factor.h	/^    CorrelationFactor(World& world, const double& gamma, const double dcut,$/;"	f	class:madness::CorrelationFactor
CorrelationFactor	src/apps/chem/electronic_correlation_factor.h	/^    CorrelationFactor(const CorrelationFactor& other) : world(other.world) {$/;"	f	class:madness::CorrelationFactor
CorrelationFactor	src/apps/chem/electronic_correlation_factor.h	/^class CorrelationFactor {$/;"	c	namespace:madness
CorrelationFactor2	src/apps/chem/electronic_correlation_factor.h	/^    CorrelationFactor2(World& world) : world(world), _gamma(0.5), dcut(1.e-10),$/;"	f	class:madness::CorrelationFactor2
CorrelationFactor2	src/apps/chem/electronic_correlation_factor.h	/^class CorrelationFactor2 {$/;"	c	namespace:madness
Corrupt	src/madness/external/elemental/examples/convex/RPCA.cpp	/^int Corrupt( DistMatrix<F>& A, double probCorrupt )$/;"	f
Cos	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Cos( const F& alpha )$/;"	f	namespace:elem
Cos	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Cos(value_type v)   { return cos(v);  }$/;"	f	class:mu::Parser
CosPotentialFunctor	src/apps/moldft/testcosine.cc	/^class CosPotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
Cosh	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Cosh( const F& alpha )$/;"	f	namespace:elem
Cosh	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Cosh(value_type v)  { return cosh(v); }$/;"	f	class:mu::Parser
CosineSphere	src/apps/interior_bc/test_problems.h	/^        CosineSphere(int k, double thresh, double eps, std::string penalty_name,$/;"	f	class:CosineSphere
CosineSphere	src/apps/interior_bc/test_problems.h	/^class CosineSphere : public EmbeddedDirichlet {$/;"	c
CostPerProc	src/madness/mra/lbdeux.h	/^            CostPerProc() : cost(0.0), proc(0) {}$/;"	f	struct:madness::LoadBalanceDeux::CostPerProc
CostPerProc	src/madness/mra/lbdeux.h	/^            CostPerProc(double cost, int proc) : cost(cost), proc(proc) {}$/;"	f	struct:madness::LoadBalanceDeux::CostPerProc
CostPerProc	src/madness/mra/lbdeux.h	/^        struct CostPerProc {$/;"	s	class:madness::LoadBalanceDeux
Coulomb	src/apps/adrian/TDDFT.cc	/^real_function_3d TDHF::Coulomb(World &world) {$/;"	f	class:TDHF
Coulomb	src/apps/chem/SCFOperators.cc	/^Coulomb::Coulomb(World& world, const Nemo* nemo)$/;"	f	class:madness::Coulomb
Coulomb	src/apps/chem/SCFOperators.h	/^    Coulomb(World& world) : world(world) {};$/;"	f	class:madness::Coulomb
Coulomb	src/apps/chem/SCFOperators.h	/^    Coulomb(World& world, const SCF* calc) : world(world) {$/;"	f	class:madness::Coulomb
Coulomb	src/apps/chem/SCFOperators.h	/^class Coulomb {$/;"	c	namespace:madness
CoulombFit	src/madness/mra/gfit.h	/^	static GFit CoulombFit(double lo, double hi, double eps, bool prnt=false) {$/;"	f	class:madness::GFit
CoulombOperator	src/madness/mra/operator.h	/^    SeparatedConvolution<double,3> CoulombOperator(World& world,$/;"	f	namespace:madness
CoulombOperatorPtr	src/madness/mra/operator.h	/^    SeparatedConvolution<double,3>* CoulombOperatorPtr(World& world,$/;"	f	namespace:madness
CountElements	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-variadic_templates.cxx	/^int CountElements()$/;"	f
CountIf	src/madness/external/gtest/src/gtest-internal-inl.h	/^inline int CountIf(const Container& c, Predicate predicate) {$/;"	f	namespace:testing::internal
Covariance	src/madness/external/elemental/include/elemental/convex/Covariance.hpp	/^Covariance( const DistMatrix<F>& D, DistMatrix<F>& S )$/;"	f	namespace:elem
Covariance	src/madness/external/elemental/include/elemental/convex/Covariance.hpp	/^Covariance( const Matrix<F>& D, Matrix<F>& S )$/;"	f	namespace:elem
Create	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Create( Comm parentComm, Group subsetGroup, Comm& subsetComm )$/;"	f	namespace:elem::mpi
Create	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Create( UserFunction* func, bool commutes, Op& op )$/;"	f	namespace:elem::mpi
Create	src/madness/external/gtest/src/gtest-death-test.cc	/^bool DeathTest::Create(const char* statement, const RE* regex,$/;"	f	class:testing::internal::DeathTest
Create	src/madness/external/gtest/src/gtest-death-test.cc	/^bool DefaultDeathTestFactory::Create(const char* statement, const RE* regex,$/;"	f	class:testing::internal::DefaultDeathTestFactory
Create	src/madness/world/safempi.h	/^        Intracomm Create(Group group) const {$/;"	f	class:SafeMPI::Intracomm
CreateA	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::CreateA(World &world, ResponseFunction &fe,$/;"	f	class:TDHF
CreateB	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::CreateB(World &world, ResponseFunction &f,$/;"	f	class:TDHF
CreateCodePointFromUtf16SurrogatePair	src/madness/external/gtest/src/gtest.cc	/^inline UInt32 CreateCodePointFromUtf16SurrogatePair(wchar_t first,$/;"	f	namespace:testing::internal
CreateCoulombDerivative	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::CreateCoulombDerivative($/;"	f	class:TDHF
CreateDirectoriesRecursively	src/madness/external/gtest/src/gtest-filepath.cc	/^bool FilePath::CreateDirectoriesRecursively() const {$/;"	f	class:testing::internal::FilePath
CreateExchangeDerivative	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::CreateExchangeDerivative($/;"	f	class:TDHF
CreateFock	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::CreateFock(World &world, ResponseFunction &Vf,$/;"	f	class:TDHF
CreateFolder	src/madness/external/gtest/src/gtest-filepath.cc	/^bool FilePath::CreateFolder() const {$/;"	f	class:testing::internal::FilePath
CreateFullResponseMatrix	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::CreateFullResponseMatrix($/;"	f	class:TDHF
CreateGamma	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::CreateGamma(World &world, ResponseFunction &f,$/;"	f	class:TDHF
CreateGroundHamiltonian	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::CreateGroundHamiltonian(World &world,$/;"	f	class:TDHF
CreateKey	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  static pthread_key_t CreateKey() {$/;"	f	class:testing::internal::ThreadLocal
CreateMaxLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMaxLocOp<Int>()$/;"	f	namespace:elem::mpi
CreateMaxLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMaxLocOp<double>()$/;"	f	namespace:elem::mpi
CreateMaxLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMaxLocOp<float>()$/;"	f	namespace:elem::mpi
CreateMaxLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMaxLocPairOp<Int>()$/;"	f	namespace:elem::mpi
CreateMaxLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMaxLocPairOp<double>()$/;"	f	namespace:elem::mpi
CreateMaxLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMaxLocPairOp<float>()$/;"	f	namespace:elem::mpi
CreateMinLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMinLocOp<Int>()$/;"	f	namespace:elem::mpi
CreateMinLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMinLocOp<double>()$/;"	f	namespace:elem::mpi
CreateMinLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMinLocOp<float>()$/;"	f	namespace:elem::mpi
CreateMinLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMinLocPairOp<Int>()$/;"	f	namespace:elem::mpi
CreateMinLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMinLocPairOp<double>()$/;"	f	namespace:elem::mpi
CreateMinLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateMinLocPairOp<float>()$/;"	f	namespace:elem::mpi
CreatePotential	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::CreatePotential(World &world, ResponseFunction &f,$/;"	f	class:TDHF
CreateTest	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  virtual Test* CreateTest() { return new TestClass; }$/;"	f	class:testing::internal::TestFactoryImpl
CreateTest	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual Test* CreateTest() {$/;"	f	class:testing::internal::ParameterizedTestFactory
CreateTestFactory	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual TestFactoryBase* CreateTestFactory(ParamType parameter) {$/;"	f	class:testing::internal::TestMetaFactory
CreateValueIntPairType	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateValueIntPairType()$/;"	f	namespace:elem::mpi
CreateValueIntType	src/madness/external/elemental/src/core/mpi_register.cpp	/^void CreateValueIntType()$/;"	f	namespace:elem::mpi
Cross	src/madness/external/elemental/include/elemental/convex/SVT/Cross.hpp	/^Cross( DistMatrix<F>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem::svt
Cross	src/madness/external/elemental/include/elemental/convex/SVT/Cross.hpp	/^Cross( Matrix<F>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem::svt
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^mpi::Comm BDM::CrossComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^mpi::Comm BDM::CrossComm() const { return this->grid_->MDPerpComm(); }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^mpi::Comm BDM::CrossComm() const { return this->grid_->MDPerpComm(); }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^mpi::Comm BDM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^mpi::Comm DM::CrossComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^mpi::Comm DM::CrossComm() const { return this->grid_->MDPerpComm(); }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^mpi::Comm DM::CrossComm() const { return this->grid_->MDPerpComm(); }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossComm	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^mpi::Comm DM::CrossComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
CrossRank	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::CrossRank() const$/;"	f	class:elem::AbstractBlockDistMatrix
CrossRank	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::CrossRank() const$/;"	f	class:elem::AbstractDistMatrix
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^Int BDM::CrossSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^Int BDM::CrossSize() const { return this->grid_->GCD(); }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^Int BDM::CrossSize() const { return this->grid_->GCD(); }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^Int BDM::CrossSize() const { return 1; }$/;"	f	class:elem::BDM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^Int DM::CrossSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^Int DM::CrossSize() const { return this->grid_->GCD(); }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^Int DM::CrossSize() const { return this->grid_->GCD(); }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CrossSize	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^Int DM::CrossSize() const { return 1; }$/;"	f	class:elem::DM
CubicInterpolationTable	src/apps/nick/interp.h	/^    CubicInterpolationTable() {}$/;"	f	class:CubicInterpolationTable
CubicInterpolationTable	src/apps/nick/interp.h	/^    CubicInterpolationTable(double lo, double hi, int npt, functionT& f) $/;"	f	class:CubicInterpolationTable
CubicInterpolationTable	src/apps/nick/interp.h	/^    CubicInterpolationTable(madness::World& world, double lo, double hi, int npt, functionT& f) $/;"	f	class:CubicInterpolationTable
CubicInterpolationTable	src/apps/nick/interp.h	/^class CubicInterpolationTable {$/;"	c
CubicInterpolationTable	src/madness/misc/interpolation_1d.h	/^    CubicInterpolationTable() : lo(0.0), hi(-1.0), h(0.0), rh(0.0), npt(0) {}$/;"	f	class:CubicInterpolationTable
CubicInterpolationTable	src/madness/misc/interpolation_1d.h	/^    CubicInterpolationTable(double lo, double hi, int npt, const functionT &f)$/;"	f	class:CubicInterpolationTable
CubicInterpolationTable	src/madness/misc/interpolation_1d.h	/^    CubicInterpolationTable(double lo, double hi, int npt, const std::vector<T> &y)$/;"	f	class:CubicInterpolationTable
CubicInterpolationTable	src/madness/misc/interpolation_1d.h	/^class CubicInterpolationTable {$/;"	c
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual const T* Current() const { return &value_; }$/;"	f	class:testing::internal::RangeGenerator::Iterator
Current	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual const T* Current() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Current status	doc/Latex/apps/moldft/manual.tex	/^\\section{Current status}$/;"	s
CurrentOsStackTraceExceptTop	src/madness/external/gtest/src/gtest.cc	/^std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {$/;"	f	class:testing::internal::UnitTestImpl
Cursor	src/madness/external/tinyxml/tinyxmlparser.cc	/^	const TiXmlCursor& Cursor()	{ return cursor; }$/;"	f	class:TiXmlParsingData
D	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  double          *restrict D;$/;"	m	struct:__anon19
D	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double       *D;$/;"	m	struct:__anon30
D	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *D;$/;"	m	struct:__anon29
D	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *restrict D;$/;"	m	struct:__anon21
D	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  double     *D;$/;"	m	struct:__anon17
D	src/madness/world/test_ar.cc	/^struct D {$/;"	s	file:
DATA_REPLY_TAG	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        DATA_REPLY_TAG  =4;$/;"	m	class:elem::AxpyInterface
DATA_REQUEST_TAG	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        DATA_REQUEST_TAG=3, $/;"	m	class:elem::AxpyInterface
DATA_TAG	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        DATA_TAG        =1, $/;"	m	class:elem::AxpyInterface
DE2	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double       *DE2;$/;"	m	struct:__anon30
DEBUG	src/madness/external/tinyxml/tinyxml.h	43;"	d
DEBUG	src/madness/tensor/mtxmq_bg/Makefile	/^DEBUG=YES$/;"	m
DEBUG	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^DEBUG=YES$/;"	m
DEBUG_ONLY	src/madness/external/elemental/include/elemental/core.hpp	37;"	d
DEBUG_ONLY	src/madness/external/elemental/include/elemental/core.hpp	39;"	d
DEBUG_STREAM	src/apps/hf/eigsolver.cc	45;"	d	file:
DEBUG_STREAM	src/apps/hf/test_coulomb.cc	48;"	d	file:
DEC	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	447;"	d	file:
DEC	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	438;"	d	file:
DECLARATION	src/madness/external/tinyxml/tinyxml.h	/^		DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
DEFAULT_MAX_MSG_LEN	src/madness/world/worldrmi.h	/^        static const size_t DEFAULT_MAX_MSG_LEN = 3*512*1024;  \/\/!< the default size of recv buffers, in bytes; the actual size can be configured by the user via envvar MAD_BUFFER_SIZE$/;"	m	class:madness::RMI
DEFAULT_NRECV	src/madness/world/worldrmi.h	/^        static const int DEFAULT_NRECV = 128;  \/\/!< the default # of recv buffers; the actual number can be configured by the user via envvar MAD_RECV_BUFFERS$/;"	m	class:madness::RMI
DEFAULT_NSEND	src/madness/world/worldam.h	/^        static const int DEFAULT_NSEND = 128;$/;"	m	class:madness::WorldAmInterface
DEFAULT_NSEND	src/madness/world/worldam.h	/^        static const int DEFAULT_NSEND = 512;$/;"	m	class:madness::WorldAmInterface
DEFAULT_NUM_THREADS	src/madness/external/elemental/external/pmrrr/include/pmrrr.h	190;"	d
DEFAULT_SEND_RECV_TAG	src/madness/world/safempi.h	/^    static const int DEFAULT_SEND_RECV_TAG = 1000;$/;"	m	namespace:SafeMPI
DEFINES	src/apps/moldft/fci/GNUmakefile	/^  DEFINES = -DLINUX$/;"	m
DELTA	src/examples/3dharmonic.cc	/^const double DELTA = 7.0;$/;"	v
DESCENDING	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    DESCENDING,$/;"	e	enum:elem::SortTypeNS::SortType
DFT	src/apps/hf/dft.cc	/^  DFT<T,NDIM>::DFT(World& world, funcT vnucrhon, std::vector<funcT> phis,$/;"	f	class:madness::DFT
DFT	src/apps/hf/dft.h	/^  class DFT : public IEigSolverObserver<T,NDIM>$/;"	c	namespace:madness
DFTCoulombOp	src/apps/hf/dft.cc	/^  DFTCoulombOp<T,NDIM>::DFTCoulombOp(World& world, double coeff,$/;"	f	class:madness::DFTCoulombOp
DFTCoulombOp	src/apps/hf/dft.h	/^  class DFTCoulombOp : public EigSolverOp<T,NDIM>$/;"	c	namespace:madness
DFTCoulombPeriodicOp	src/apps/hf/dft.cc	/^  DFTCoulombPeriodicOp<T,NDIM>::DFTCoulombPeriodicOp(World& world, funcT rhon, double coeff,$/;"	f	class:madness::DFTCoulombPeriodicOp
DFTCoulombPeriodicOp	src/apps/hf/dft.h	/^  class DFTCoulombPeriodicOp : public EigSolverOp<T,NDIM>$/;"	c	namespace:madness
DFTNuclearChargeDensityOp	src/apps/hf/dft.cc	/^  DFTNuclearChargeDensityOp<T,NDIM>::DFTNuclearChargeDensityOp(World& world, funcT rhon,$/;"	f	class:madness::DFTNuclearChargeDensityOp
DFTNuclearChargeDensityOp	src/apps/hf/dft.h	/^  class DFTNuclearChargeDensityOp : public EigSolverOp<T,NDIM>$/;"	c	namespace:madness
DFTNuclearPotentialOp	src/apps/hf/dft.cc	/^  DFTNuclearPotentialOp<T,NDIM>::DFTNuclearPotentialOp(World& world, funcT V,$/;"	f	class:madness::DFTNuclearPotentialOp
DFTNuclearPotentialOp	src/apps/hf/dft.h	/^  class DFTNuclearPotentialOp : public EigSolverOp<T,NDIM>$/;"	c	namespace:madness
DFT_H_	src/apps/hf/dft.h	34;"	d
DGEMM	src/apps/moldft/fci/dgemm.F	/^      SUBROUTINE DGEMM /;"	s
DIED	src/madness/external/gtest/src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
DIP	src/apps/chem/SCF.h	/^	inline double DIP(const tensorT & dip, int i, int j, int k, int l) const {$/;"	f	class:madness::SCF
DIP	src/apps/ii/systolic.h	/^    inline T LocalizeBoys<T>::DIP(const T ij[], const T kl[]) const$/;"	f	class:madness::LocalizeBoys
DIP	src/apps/moldft/preal.cc	/^    inline double DIP(const real_tensor& dip, int i, int j, int k, int l)$/;"	f	struct:BoysLocalization
DIP	src/apps/polar/moldft.cc	/^    inline double DIP(const tensorT &dip, int i, int j, int k, int l)$/;"	f	struct:Calculation
DIRICHLET_RHS	src/apps/interior_bc/test_problems.h	/^enum FunctorOutput { SURFACE, DIRICHLET_RHS, EXACT, DOMAIN_MASK };$/;"	e	enum:FunctorOutput
DISTPROTO	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	1057;"	d	file:
DISTPROTO	src/madness/external/elemental/src/core/DistMatrix/General.cpp	3280;"	d	file:
DL	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  double          *restrict DL;$/;"	m	struct:__anon19
DLL	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  double          *restrict DLL;$/;"	m	struct:__anon19
DLL	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  double     *DLL;$/;"	m	struct:__anon17
DM	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	19;"	d
DM	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	425;"	d
DM	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	19;"	d
DM	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	353;"	d
DM	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	19;"	d
DM	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	343;"	d
DM	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	16;"	d
DM	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	16;"	d
DMASK	src/madness/mra/sdf_domainmask.h	/^        static const int DMASK; \/\/\/< Use the \\c dmask() function in \\c mask$/;"	m	class:madness::DomainMaskSDFFunctor
DMASK	src/madness/mra/sdf_domainmask.h	/^    const int DomainMaskSDFFunctor<NDIM>::DMASK = 3;$/;"	m	class:madness::DomainMaskSDFFunctor
DMGL_NO_OPTS	src/madness/world/thread.h	66;"	d
DNuclear	src/apps/chem/SCFOperators.cc	/^DNuclear::DNuclear(World& world, const Nemo* nemo, const int iatom,$/;"	f	class:madness::DNuclear
DNuclear	src/apps/chem/SCFOperators.cc	/^DNuclear::DNuclear(World& world, const SCF* calc, const int iatom,$/;"	f	class:madness::DNuclear
DNuclear	src/apps/chem/SCFOperators.h	/^    DNuclear(World& world, std::shared_ptr<NuclearCorrelationFactor> ncf,$/;"	f	class:madness::DNuclear
DNuclear	src/apps/chem/SCFOperators.h	/^class DNuclear {$/;"	c	namespace:madness
DOCUMENT	src/madness/external/tinyxml/tinyxml.h	/^		DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
DOIT	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	2661;"	d	file:
DOIT	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	2658;"	d	file:
DOIT1	src/examples/derivatives.cc	209;"	d	file:
DOIT2	src/examples/derivatives.cc	221;"	d	file:
DOIT3	src/examples/derivatives.cc	228;"	d	file:
DOMAIN_MASK	src/apps/interior_bc/test_problems.h	/^enum FunctorOutput { SURFACE, DIRICHLET_RHS, EXACT, DOMAIN_MASK };$/;"	e	enum:FunctorOutput
DPEC	src/madness/tensor/type_data.h	169;"	d
DPEC	src/madness/tensor/type_data.h	208;"	d
DPot	src/madness/mra/testopdir.cc	/^    DPot(int dir) : dir(dir) {}$/;"	f	class:DPot
DPot	src/madness/mra/testopdir.cc	/^class DPot : public FunctionFunctorInterface<double,3> {$/;"	c	file:
DQStats	src/madness/world/dqueue.h	/^        DQStats()$/;"	f	struct:madness::DQStats
DQStats	src/madness/world/dqueue.h	/^    struct DQStats { \/\/ Dilly bar, blizzard, ...$/;"	s	namespace:madness
DQueue	src/madness/world/dqueue.h	/^        DQueue(size_t hint=200000) \/\/ was 32768$/;"	f	class:madness::DQueue
DQueue	src/madness/world/dqueue.h	/^    class DQueue : private CONDITION_VARIABLE_TYPE {$/;"	c	namespace:madness
DSTEMR_IF_SMALLER	src/madness/external/elemental/external/pmrrr/include/pmrrr.h	196;"	d
DSURFACE	src/madness/mra/sdf_domainmask.h	/^        static const int DSURFACE; \/\/\/< Use the \\c dsurface() function in \\c mask$/;"	m	class:madness::DomainMaskSDFFunctor
DSURFACE	src/madness/mra/sdf_domainmask.h	/^    const int DomainMaskSDFFunctor<NDIM>::DSURFACE = 5;$/;"	m	class:madness::DomainMaskSDFFunctor
DSphere	src/examples/siam_example.cc	/^  DSphere(double Vint, double Vext, int axis) $/;"	f	class:DSphere
DSphere	src/examples/siam_example.cc	/^class DSphere : public FunctionFunctorInterface<double, 3> {$/;"	c	file:
DSphere	src/madness/mra/testbc.cc	/^    DSphere(const coordT& center, double radius, double sigma)$/;"	f	class:DSphere
DSphere	src/madness/mra/testbc.cc	/^class DSphere : public FunctionFunctorInterface<double,3> {$/;"	c	file:
DYNAMIC_TAG_BASE	src/madness/world/worldmpi.h	/^    static const Tag DYNAMIC_TAG_BASE = 1024;$/;"	m	namespace:madness
Datatype	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^typedef MPI_Datatype Datatype;$/;"	t	namespace:elem::mpi
DeathTest	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^class GTEST_API_ DeathTest {$/;"	c	namespace:testing::internal
DeathTest	src/madness/external/gtest/src/gtest-death-test.cc	/^DeathTest::DeathTest() {$/;"	f	class:testing::internal::DeathTest
DeathTestAbort	src/madness/external/gtest/src/gtest-death-test.cc	/^void DeathTestAbort(const std::string& message) {$/;"	f	namespace:testing::internal
DeathTestFactory	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^class DeathTestFactory {$/;"	c	namespace:testing::internal
DeathTestImpl	src/madness/external/gtest/src/gtest-death-test.cc	/^  DeathTestImpl(const char* a_statement, const RE* a_regex)$/;"	f	class:testing::internal::DeathTestImpl
DeathTestImpl	src/madness/external/gtest/src/gtest-death-test.cc	/^class DeathTestImpl : public DeathTest {$/;"	c	namespace:testing::internal	file:
DeathTestOutcome	src/madness/external/gtest/src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	g	namespace:testing::internal	file:
DeathTestThreadWarning	src/madness/external/gtest/src/gtest-death-test.cc	/^static std::string DeathTestThreadWarning(size_t thread_count) {$/;"	f	namespace:testing::internal
Debye	src/madness/constants.h	/^        const double Debye = 3.335640035e-30 ; \/\/\/< Cm (coulomb metre).$/;"	m	namespace:madness::constants
DefaultBlockHeight	src/madness/external/elemental/src/core/global.cpp	/^Int DefaultBlockHeight()$/;"	f	namespace:elem
DefaultBlockWidth	src/madness/external/elemental/src/core/global.cpp	/^Int DefaultBlockWidth()$/;"	f	namespace:elem
DefaultDeathTestFactory	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^class DefaultDeathTestFactory : public DeathTestFactory {$/;"	c	namespace:testing::internal
DefaultGlobalTestPartResultReporter	src/madness/external/gtest/src/gtest-internal-inl.h	/^class DefaultGlobalTestPartResultReporter$/;"	c	namespace:testing::internal
DefaultGlobalTestPartResultReporter	src/madness/external/gtest/src/gtest.cc	/^DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
DefaultGrid	src/madness/external/elemental/src/core/global.cpp	/^const Grid& DefaultGrid()$/;"	f	namespace:elem
DefaultInitPtr	src/madness/world/mem_func_wrapper.h	/^        struct DefaultInitPtr {$/;"	s	namespace:madness::detail
DefaultInitPtr	src/madness/world/mem_func_wrapper.h	/^        struct DefaultInitPtr<std::shared_ptr<T> > {$/;"	s	namespace:madness::detail
DefaultPerThreadTestPartResultReporter	src/madness/external/gtest/src/gtest-internal-inl.h	/^class DefaultPerThreadTestPartResultReporter$/;"	c	namespace:testing::internal
DefaultPerThreadTestPartResultReporter	src/madness/external/gtest/src/gtest.cc	/^DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
DefaultPrintNonContainerTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing_internal
DefaultPrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void DefaultPrintTo(IsContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void DefaultPrintTo(IsNotContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DeferredCleanup	src/madness/world/deferred_cleanup.h	/^            DeferredCleanup() : mutex_(), deferred_(), destroy_(false) { }$/;"	f	class:madness::detail::DeferredCleanup
DeferredCleanup	src/madness/world/deferred_cleanup.h	/^        class DeferredCleanup {$/;"	c	namespace:madness::detail
DefineConst	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::DefineConst(const string_type &a_sName, value_type a_fVal)$/;"	f	class:mu::ParserBase
DefineInfixOprt	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::DefineInfixOprt(const string_type &a_sName, $/;"	f	class:mu::ParserBase
DefineInfixOprtChars	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::DefineInfixOprtChars(const char_type *a_szCharset)$/;"	f	class:mu::ParserBase
DefineNameChars	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::DefineNameChars(const char_type *a_szCharset)$/;"	f	class:mu::ParserBase
DefineOprt	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::DefineOprt( const string_type &a_sName, $/;"	f	class:mu::ParserBase
DefineOprtChars	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::DefineOprtChars(const char_type *a_szCharset)$/;"	f	class:mu::ParserBase
DefinePostfixOprt	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::DefinePostfixOprt(const string_type &a_sName, $/;"	f	class:mu::ParserBase
DefineStrConst	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::DefineStrConst(const string_type &a_strName, const string_type &a_strVal)$/;"	f	class:mu::ParserBase
DefineVar	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::DefineVar(const string_type &a_sName, value_type *a_pVar)$/;"	f	class:mu::ParserBase
Deflate	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Lanczos.hpp	/^Deflate$/;"	f	namespace:elem::pspec
Deflate	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Power.hpp	/^Deflate$/;"	f	namespace:elem::pspec
DelayedSend	src/madness/world/worldgop.h	/^            DelayedSend(World& world, const ProcessID dest,$/;"	f	class:madness::WorldGopInterface::DelayedSend
DelayedSend	src/madness/world/worldgop.h	/^        class DelayedSend : public CallbackInterface {$/;"	c	class:madness::WorldGopInterface
Delete	src/madness/external/gtest/src/gtest-internal-inl.h	/^static void Delete(T* x) {$/;"	f	namespace:testing::internal
DeleteSelf_	src/madness/external/gtest/include/gtest/gtest.h	/^  void DeleteSelf_() { delete this; }$/;"	f	class:testing::Test
DeleteThreadLocalValue	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^extern "C" inline void DeleteThreadLocalValue(void* value_holder) {$/;"	f	namespace:testing::internal
Demmel	src/madness/external/elemental/include/elemental/matrices/Demmel.hpp	/^Demmel( BlockDistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Demmel	src/madness/external/elemental/include/elemental/matrices/Demmel.hpp	/^Demmel( DistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Demmel	src/madness/external/elemental/include/elemental/matrices/Demmel.hpp	/^Demmel( Matrix<F>& A, Int n )$/;"	f	namespace:elem
DependencyInterface	src/madness/world/dependency_interface.h	/^        DependencyInterface(int ndep = 0) : ndepend(ndep), final_callback(nullptr) {$/;"	f	class:madness::DependencyInterface
DependencyInterface	src/madness/world/dependency_interface.h	/^        DependencyInterface(int ndep, const char* caller) : ndepend(ndep), final_callback(nullptr)$/;"	f	class:madness::DependencyInterface
DependencyInterface	src/madness/world/dependency_interface.h	/^    class DependencyInterface : public CallbackInterface, private Spinlock {$/;"	c	namespace:madness
DepthBroadcast	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void DepthBroadcast$/;"	f
Derivative	src/madness/mra/derivative.h	/^        Derivative(World& world,$/;"	f	class:madness::Derivative
Derivative	src/madness/mra/derivative.h	/^    class Derivative : public DerivativeBase<T, NDIM> {$/;"	c	namespace:madness
DerivativeBase	src/madness/mra/derivative.h	/^        DerivativeBase(World& world, std::size_t axis, int k, BoundaryConditions<NDIM> bc)$/;"	f	class:madness::DerivativeBase
DerivativeBase	src/madness/mra/derivative.h	/^    class DerivativeBase : public WorldObject< DerivativeBase<T, NDIM> > {$/;"	c	namespace:madness
DerivativeGaussian	src/madness/mra/testsuite.cc	/^    DerivativeGaussian(const Gaussian<T,NDIM>& g, int axis)$/;"	f	class:DerivativeGaussian
DerivativeGaussian	src/madness/mra/testsuite.cc	/^    DerivativeGaussian(const coordT& center, double exponent, T coefficient, int axis)$/;"	f	class:DerivativeGaussian
DerivativeGaussian	src/madness/mra/testsuite.cc	/^class DerivativeGaussian : public FunctionFunctorInterface<T,NDIM> {$/;"	c	file:
DerivativeOperator	src/apps/chem/SCFOperators.h	/^    DerivativeOperator(World& world, const int axis1) : world(world), axis(axis1) {$/;"	f	class:madness::DerivativeOperator
DerivativeOperator	src/apps/chem/SCFOperators.h	/^class DerivativeOperator {$/;"	c	namespace:madness
Derivatives	doc/Latex/implementation.tex	/^\\subsubsection{Derivatives}$/;"	b
Desc	src/madness/external/elemental/include/elemental/core/imports/scalapack.hpp	/^typedef typename std::array<int,9> Desc;$/;"	t	namespace:elem::blacs
DestroyMaxLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMaxLocOp<Int>()$/;"	f	namespace:elem::mpi
DestroyMaxLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMaxLocOp<double>()$/;"	f	namespace:elem::mpi
DestroyMaxLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMaxLocOp<float>()$/;"	f	namespace:elem::mpi
DestroyMaxLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMaxLocPairOp<Int>()$/;"	f	namespace:elem::mpi
DestroyMaxLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMaxLocPairOp<double>()$/;"	f	namespace:elem::mpi
DestroyMaxLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMaxLocPairOp<float>()$/;"	f	namespace:elem::mpi
DestroyMinLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMinLocOp<Int>()$/;"	f	namespace:elem::mpi
DestroyMinLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMinLocOp<double>()$/;"	f	namespace:elem::mpi
DestroyMinLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMinLocOp<float>()$/;"	f	namespace:elem::mpi
DestroyMinLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMinLocPairOp<Int>()$/;"	f	namespace:elem::mpi
DestroyMinLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMinLocPairOp<double>()$/;"	f	namespace:elem::mpi
DestroyMinLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyMinLocPairOp<float>()$/;"	f	namespace:elem::mpi
DestroyValueIntPairType	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyValueIntPairType()$/;"	f	namespace:elem::mpi
DestroyValueIntType	src/madness/external/elemental/src/core/mpi_register.cpp	/^void DestroyValueIntType()$/;"	f	namespace:elem::mpi
Detach	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::Detach()$/;"	f	class:elem::AxpyInterface
Detach_buffer	src/madness/world/safempi.h	/^    inline int Detach_buffer(void *&buffer) {$/;"	f	namespace:SafeMPI
DetectFormat	src/madness/external/elemental/include/elemental/io/impl.hpp	/^inline FileFormat DetectFormat( const std::string filename )$/;"	f	namespace:elem
Determinant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^inline F Determinant( DistMatrix<F>& A, bool canOverwrite=false )$/;"	f	namespace:elem
Determinant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^inline F Determinant( Matrix<F>& A, bool canOverwrite=false )$/;"	f	namespace:elem
Determinant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^inline F Determinant( const DistMatrix<F>& A )$/;"	f	namespace:elem
Determinant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^inline F Determinant( const Matrix<F>& A )$/;"	f	namespace:elem
DiagColDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^constexpr Dist DiagColDist() { return ( U==STAR ? V : U ); }$/;"	f	namespace:elem
DiagColDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist DiagColDist<MC,MR>() { return MD; }$/;"	f	namespace:elem
DiagColDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist DiagColDist<MR,MC>() { return MD; }$/;"	f	namespace:elem
DiagInvColDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^constexpr Dist DiagInvColDist() { return ( U==STAR ? V : U ); }$/;"	f	namespace:elem
DiagInvColDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist DiagInvColDist<MD,STAR>() { return MC; }$/;"	f	namespace:elem
DiagInvColDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist DiagInvColDist<STAR,MD>() { return MC; }$/;"	f	namespace:elem
DiagInvRowDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^constexpr Dist DiagInvRowDist() { return ( U==STAR ? U : V ); }$/;"	f	namespace:elem
DiagInvRowDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist DiagInvRowDist<MD,STAR>() { return MR; }$/;"	f	namespace:elem
DiagInvRowDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist DiagInvRowDist<STAR,MD>() { return MR; }$/;"	f	namespace:elem
DiagPath	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::DiagPath( int vectorColRank ) const$/;"	f	class:elem::Grid
DiagPath	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::DiagPath() const$/;"	f	class:elem::Grid
DiagPathRank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::DiagPathRank( int vectorColRank ) const$/;"	f	class:elem::Grid
DiagPathRank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::DiagPathRank() const$/;"	f	class:elem::Grid
DiagRowDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^constexpr Dist DiagRowDist() { return ( U==STAR ? U : V ); }$/;"	f	namespace:elem
DiagRowDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist DiagRowDist<MC,MR>() { return STAR; }$/;"	f	namespace:elem
DiagRowDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist DiagRowDist<MR,MC>() { return STAR; }$/;"	f	namespace:elem
Diagonal	src/madness/external/elemental/include/elemental/matrices/Diagonal.hpp	/^Diagonal( BlockDistMatrix<S,U,V>& D, const std::vector<T>& d )$/;"	f	namespace:elem
Diagonal	src/madness/external/elemental/include/elemental/matrices/Diagonal.hpp	/^Diagonal( DistMatrix<S,U,V>& D, const std::vector<T>& d )$/;"	f	namespace:elem
Diagonal	src/madness/external/elemental/include/elemental/matrices/Diagonal.hpp	/^Diagonal( Matrix<S>& D, const std::vector<T>& d )$/;"	f	namespace:elem
DiagonalAlign	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::DiagonalAlign( Int offset ) const$/;"	f	class:elem::GeneralBlockDistMatrix
DiagonalAlign	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::DiagonalAlign( Int offset ) const$/;"	f	class:elem::GeneralDistMatrix
DiagonalAlignedWith	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::DiagonalAlignedWith$/;"	f	class:elem::GeneralBlockDistMatrix
DiagonalAlignedWith	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::DiagonalAlignedWith$/;"	f	class:elem::GeneralDistMatrix
DiagonalLength	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^DiagonalLength( Int height, Int width, Int offset )$/;"	f	namespace:elem
DiagonalLength	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::DiagonalLength( Int offset ) const$/;"	f	class:elem::AbstractBlockDistMatrix
DiagonalLength	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::DiagonalLength( Int offset ) const$/;"	f	class:elem::AbstractDistMatrix
DiagonalLength	src/madness/external/elemental/src/core/Matrix.cpp	/^Int Matrix<T>::DiagonalLength( Int offset ) const$/;"	f	class:elem::Matrix
DiagonalMax	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	/^DiagonalMax( const DistMatrix<Real,U,V>& A )$/;"	f	namespace:elem
DiagonalMax	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	/^DiagonalMax( const Matrix<Real>& A )$/;"	f	namespace:elem
DiagonalMaxAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	/^DiagonalMaxAbs( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
DiagonalMaxAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	/^DiagonalMaxAbs( const Matrix<F>& A )$/;"	f	namespace:elem
DiagonalMin	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	/^DiagonalMin( const DistMatrix<Real,U,V>& A )$/;"	f	namespace:elem
DiagonalMin	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	/^DiagonalMin( const Matrix<Real>& A )$/;"	f	namespace:elem
DiagonalMinAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	/^DiagonalMinAbs( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
DiagonalMinAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	/^DiagonalMinAbs( const Matrix<F>& A )$/;"	f	namespace:elem
DiagonalRoot	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::DiagonalRoot( Int offset ) const$/;"	f	class:elem::GeneralBlockDistMatrix
DiagonalRoot	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::DiagonalRoot( Int offset ) const$/;"	f	class:elem::GeneralDistMatrix
DiagonalScale	src/madness/external/elemental/include/elemental/blas-like/level1/DiagonalScale.hpp	/^DiagonalScale$/;"	f	namespace:elem
DiagonalScaleTrapezoid	src/madness/external/elemental/include/elemental/blas-like/level1/DiagonalScaleTrapezoid.hpp	/^DiagonalScaleTrapezoid$/;"	f	namespace:elem
DiagonalSolve	src/madness/external/elemental/include/elemental/blas-like/level1/DiagonalSolve.hpp	/^DiagonalSolve$/;"	f	namespace:elem
DiagonalizeFullResponseMatrix	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::DiagonalizeFullResponseMatrix($/;"	f	class:TDHF
Diamagnetic_potential_factor	src/apps/chem/diamagneticpotentialfactor.h	/^	Diamagnetic_potential_factor(World& world, const Nemo_complex_Parameters& param,$/;"	f	class:madness::Diamagnetic_potential_factor
Diamagnetic_potential_factor	src/apps/chem/diamagneticpotentialfactor.h	/^class Diamagnetic_potential_factor {$/;"	c	namespace:madness
Diff	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Diff(value_type *a_Var, $/;"	f	class:mu::Parser
Difference	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Difference( Group parent, Group subset, Group& complement )$/;"	f	namespace:elem::mpi
DimsString	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^DimsString( const MatType& A, std::string label="Matrix" )$/;"	f	namespace:elem
DipoleFunctor	src/apps/chem/SCF.h	/^	DipoleFunctor(int axis) : axis(axis) {}$/;"	f	class:madness::DipoleFunctor
DipoleFunctor	src/apps/chem/SCF.h	/^class DipoleFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
DipoleFunctor	src/apps/hf/solver.h	/^      DipoleFunctor(int axis) : axis(axis) {}$/;"	f	class:madness::DipoleFunctor
DipoleFunctor	src/apps/hf/solver.h	/^  class DipoleFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
DipoleFunctor	src/apps/ii/localize_boys.cc	/^    DipoleFunctor(int axis) : axis(axis) {}$/;"	f	class:DipoleFunctor
DipoleFunctor	src/apps/ii/localize_boys.cc	/^class DipoleFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
DipoleFunctor	src/apps/moldft/preal.cc	/^    DipoleFunctor(int axis) : axis(axis) {}$/;"	f	class:DipoleFunctor
DipoleFunctor	src/apps/moldft/preal.cc	/^class DipoleFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
DipoleFunctor	src/apps/polar/moldft.cc	/^    DipoleFunctor(int axis) : axis(axis) {}$/;"	f	class:DipoleFunctor
DipoleFunctor	src/apps/polar/moldft.cc	/^class DipoleFunctor : public FunctionFunctorInterface<double, 3>$/;"	c	file:
DirectoryExists	src/madness/external/gtest/src/gtest-filepath.cc	/^bool FilePath::DirectoryExists() const {$/;"	f	class:testing::internal::FilePath
DirichletCond	src/apps/interior_bc/test_problems.h	/^        double DirichletCond(const Vector<double, 3> &x) const {$/;"	f	class:ConstantSphere
DirichletCond	src/apps/interior_bc/test_problems.h	/^        double DirichletCond(const Vector<double, 3> &x) const {$/;"	f	class:CosineSphere
DirichletCond	src/apps/interior_bc/test_problems.h	/^        double DirichletCond(const Vector<double, 3> &x) const {$/;"	f	class:InhomoConstantSphere
DirichletCond	src/apps/interior_bc/test_problems.h	/^        double DirichletCond(const Vector<double, 3> &x) const {$/;"	f	class:Y20Sphere
DirichletCondIntOp	src/apps/interior_bc/test_problems.h	/^        DirichletCondIntOp(const SeparatedConvolution<double, 3> &gin,$/;"	f	class:DirichletCondIntOp
DirichletCondIntOp	src/apps/interior_bc/test_problems.h	/^class DirichletCondIntOp : public Operator<Function<double, 3> > {$/;"	c
DirichletLBCost	src/apps/interior_bc/test_problems.h	/^    DirichletLBCost(double leaf_value = 1.0, double parent_value = 1.0)$/;"	f	struct:DirichletLBCost
DirichletLBCost	src/apps/interior_bc/test_problems.h	/^struct DirichletLBCost {$/;"	s
Displacements	src/madness/mra/displacements.h	/^        Displacements() {$/;"	f	class:madness::Displacements
Displacements	src/madness/mra/displacements.h	/^    class Displacements {$/;"	c	namespace:madness
Display	src/madness/external/elemental/include/elemental/io/Display.hpp	/^Display( const BlockDistMatrix<T,U,V>& A, std::string title="Default" )$/;"	f	namespace:elem
Display	src/madness/external/elemental/include/elemental/io/Display.hpp	/^Display( const DistMatrix<T,U,V>& A, std::string title="Default" )$/;"	f	namespace:elem
Display	src/madness/external/elemental/include/elemental/io/Display.hpp	/^Display( const Matrix<Complex<T>>& A, std::string title="Default" )$/;"	f	namespace:elem
Display	src/madness/external/elemental/include/elemental/io/Display.hpp	/^Display( const Matrix<T>& A, std::string title="Default" )$/;"	f	namespace:elem
Display	src/madness/external/elemental/src/io/ComplexDisplayWindow.cpp	/^ComplexDisplayWindow::Display$/;"	f	class:elem::ComplexDisplayWindow
Display	src/madness/external/elemental/src/io/DisplayWindow.cpp	/^DisplayWindow::Display$/;"	f	class:elem::DisplayWindow
Display	src/madness/external/elemental/src/io/DisplayWindow.cpp	/^DisplayWindow::Display( const Matrix<double>* matrix, QString title )$/;"	f	class:elem::DisplayWindow
DisplayImag	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	/^DisplayWidget<T>::DisplayImag$/;"	f	class:elem::DisplayWidget
DisplayImag	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	/^DisplayWidget<T>::DisplayImag( const Matrix<T>* A )$/;"	f	class:elem::DisplayWidget
DisplayReal	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	/^DisplayWidget<T>::DisplayReal$/;"	f	class:elem::DisplayWidget
DisplayReal	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	/^DisplayWidget<T>::DisplayReal( const Matrix<T>* A )$/;"	f	class:elem::DisplayWidget
DisplayWidget	src/madness/external/elemental/include/elemental/io/DisplayWidget/decl.hpp	/^class DisplayWidget : public QWidget$/;"	c	namespace:elem
DisplayWidget	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	/^DisplayWidget<T>::DisplayWidget( QWidget* parent )$/;"	f	class:elem::DisplayWidget
DisplayWindow	src/madness/external/elemental/include/elemental/io/DisplayWindow-premoc.hpp	/^class DisplayWindow : public QWidget$/;"	c	namespace:elem
DisplayWindow	src/madness/external/elemental/src/io/DisplayWindow.cpp	/^DisplayWindow::DisplayWindow( QWidget* parent )$/;"	f	class:elem::DisplayWindow
Dist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum Dist$/;"	g	namespace:elem::DistNS
DistCache	src/madness/world/dist_cache.h	/^        class DistCache {$/;"	c	namespace:madness::detail
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^mpi::Comm BDM::DistComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->MDComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->MDComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^mpi::Comm BDM::DistComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^mpi::Comm BDM::DistComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::BDM
DistComm	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^mpi::Comm DM::DistComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->MDComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->MDComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^mpi::Comm DM::DistComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::DM
DistComm	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^mpi::Comm DM::DistComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::DM
DistData	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	/^    DistData( const GeneralDistMatrix<T,U,V>& A )$/;"	f	struct:elem::DistData
DistData	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	/^struct DistData$/;"	s	namespace:elem
DistData	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^elem::BlockDistData BDM::DistData() const { return elem::BlockDistData(*this); }$/;"	f	class:elem::BDM
DistData	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^elem::DistData DM::DistData() const { return elem::DistData(*this); }$/;"	f	class:elem::DM
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^class DistMatrix<T,CIRC,CIRC> : public GeneralDistMatrix<T,CIRC,CIRC>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^class DistMatrix<T,MC,MR> : public GeneralDistMatrix<T,MC,MR>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^class DistMatrix<T,MC,STAR> : public GeneralDistMatrix<T,MC,STAR>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^class DistMatrix<T,MD,STAR> : public GeneralDistMatrix<T,MD,STAR>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^class DistMatrix<T,MR,MC> : public GeneralDistMatrix<T,MR,MC>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^class DistMatrix<T,MR,STAR> : public GeneralDistMatrix<T,MR,STAR>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^class DistMatrix<T,STAR,MC> : public GeneralDistMatrix<T,STAR,MC>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^class DistMatrix<T,STAR,MD> : public GeneralDistMatrix<T,STAR,MD>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^class DistMatrix<T,STAR,MR> : public GeneralDistMatrix<T,STAR,MR>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^class DistMatrix<T,STAR,STAR> : public GeneralDistMatrix<T,STAR,STAR>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^class DistMatrix<T,STAR,VC> : public GeneralDistMatrix<T,STAR,VC>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^class DistMatrix<T,STAR,VR> : public GeneralDistMatrix<T,STAR,VR>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^class DistMatrix<T,VC,STAR> : public GeneralDistMatrix<T,VC,STAR>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^class DistMatrix<T,VR,STAR> : public GeneralDistMatrix<T,VR,STAR>$/;"	c	namespace:elem
DistMatrix	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^DM::DistMatrix( Int height, Int width, const elem::Grid& grid, Int root )$/;"	f	class:elem::DM
DistMatrix	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^DM::DistMatrix( const BlockDistMatrix<T,U,V>& A )$/;"	f	class:elem::DM
DistMatrix	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^DM::DistMatrix( const DM& A )$/;"	f	class:elem::DM
DistMatrix	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^DM::DistMatrix( const DistMatrix<T,U,V>& A )$/;"	f	class:elem::DM
DistMatrix	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^DM::DistMatrix( const elem::Grid& grid, Int root )$/;"	f	class:elem::DM
DistMatrixTest	src/madness/external/elemental/tests/core/DistMatrix.cpp	/^DistMatrixTest( Int m, Int n, const Grid& g, bool print )$/;"	f
DistNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace DistNS {$/;"	n	namespace:elem
DistNS	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^namespace DistNS {$/;"	n	namespace:elem
DistRank	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::DistRank() const$/;"	f	class:elem::AbstractBlockDistMatrix
DistRank	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::DistRank() const$/;"	f	class:elem::AbstractDistMatrix
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^Int BDM::DistSize() const { return 1; }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^Int BDM::DistSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^Int BDM::DistSize() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^Int BDM::DistSize() const { return this->grid_->LCM(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^Int BDM::DistSize() const { return this->grid_->VRSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^Int BDM::DistSize() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^Int BDM::DistSize() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^Int BDM::DistSize() const { return this->grid_->LCM(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^Int BDM::DistSize() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^Int BDM::DistSize() const { return 1; }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^Int BDM::DistSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^Int BDM::DistSize() const { return this->grid_->VRSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^Int BDM::DistSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^Int BDM::DistSize() const { return this->grid_->VRSize(); }$/;"	f	class:elem::BDM
DistSize	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^Int DM::DistSize() const { return 1; }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^Int DM::DistSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^Int DM::DistSize() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^Int DM::DistSize() const { return this->grid_->LCM(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^Int DM::DistSize() const { return this->grid_->VRSize(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^Int DM::DistSize() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^Int DM::DistSize() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^Int DM::DistSize() const { return this->grid_->LCM(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^Int DM::DistSize() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^Int DM::DistSize() const { return 1; }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^Int DM::DistSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^Int DM::DistSize() const { return this->grid_->VRSize(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^Int DM::DistSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::DM
DistSize	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^Int DM::DistSize() const { return this->grid_->VRSize(); }$/;"	f	class:elem::DM
DistToString	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^DistToString( Dist dist )$/;"	f	namespace:elem::DistNS
DistanceBetweenSignAndMagnitudeNumbers	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,$/;"	f	class:testing::internal::FloatingPoint
DistributeCols	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void DistributeCols$/;"	f
DistributeRows	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void DistributeRows$/;"	f
Distributed or world objects	doc/Latex/parallel-runtime.tex	/^\\subsection{Distributed or world objects}$/;"	b
DistributedID	src/madness/world/distributed_id.h	/^    typedef std::pair<uniqueidT, std::size_t> DistributedID;$/;"	t	namespace:madness
DistributedMatrix	src/apps/ii/systolic.h	/^        DistributedMatrix(World& world, int64_t n, int64_t m, int64_t coltile, int64_t rowtile)$/;"	f	class:madness::DistributedMatrix
DistributedMatrix	src/apps/ii/systolic.h	/^    class DistributedMatrix {$/;"	c	namespace:madness
DistributedMatrix	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrix()$/;"	f	class:madness::DistributedMatrix
DistributedMatrix	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrix(World& world, int64_t n, int64_t m, int64_t coltile, int64_t rowtile)$/;"	f	class:madness::DistributedMatrix
DistributedMatrix	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrix(const DistributedMatrix<T>& A, bool deepcopy=false)$/;"	f	class:madness::DistributedMatrix
DistributedMatrix	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrix(const DistributedMatrixDistribution& d)$/;"	f	class:madness::DistributedMatrix
DistributedMatrix	src/madness/tensor/distributed_matrix.h	/^    class DistributedMatrix : public DistributedMatrixDistribution {$/;"	c	namespace:madness
DistributedMatrixDistribution	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrixDistribution() $/;"	f	class:madness::DistributedMatrixDistribution
DistributedMatrixDistribution	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrixDistribution(World& world, int64_t n, int64_t m, int64_t coltile, int64_t rowtile)$/;"	f	class:madness::DistributedMatrixDistribution
DistributedMatrixDistribution	src/madness/tensor/distributed_matrix.h	/^    class DistributedMatrixDistribution {$/;"	c	namespace:madness
Distribution	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^typedef Dist Distribution;$/;"	t	namespace:elem
DivideAndConquerSVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Util.hpp	/^DivideAndConquerSVD( Matrix<F>& A, Matrix<Base<F>>& s, Matrix<F>& V )$/;"	f	namespace:elem::svd
DivideAndConquerSVD	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void DivideAndConquerSVD$/;"	f	namespace:elem::lapack
DoIndent	src/madness/external/tinyxml/tinyxml.h	/^	void DoIndent()	{$/;"	f	class:TiXmlPrinter
DoLineBreak	src/madness/external/tinyxml/tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:TiXmlPrinter
DomainMaskInterface	src/madness/mra/sdf_domainmask.h	/^    class DomainMaskInterface {$/;"	c	namespace:madness
DomainMaskSDFFunctor	src/madness/mra/sdf_domainmask.h	/^        DomainMaskSDFFunctor() {}$/;"	f	class:madness::DomainMaskSDFFunctor
DomainMaskSDFFunctor	src/madness/mra/sdf_domainmask.h	/^        DomainMaskSDFFunctor(std::shared_ptr<DomainMaskInterface> mask,$/;"	f	class:madness::DomainMaskSDFFunctor
DomainMaskSDFFunctor	src/madness/mra/sdf_domainmask.h	/^    class DomainMaskSDFFunctor : public FunctionFunctorInterface<double,NDIM> {$/;"	c	namespace:madness
Dot	src/madness/external/elemental/include/elemental/blas-like/level1/Dot.hpp	/^Dot( const DistMatrix<F,U,V>& A, const DistMatrix<F,U,V>& B )$/;"	f	namespace:elem
Dot	src/madness/external/elemental/include/elemental/blas-like/level1/Dot.hpp	/^Dot( const Matrix<F>& A, const Matrix<F>& B )$/;"	f	namespace:elem
Dot	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^inline T Dot( int n, const T* x, int incx, const T* y, int incy )$/;"	f	namespace:elem::blas
Dot	src/madness/external/elemental/src/core/imports/blas.cpp	/^dcomplex Dot( int n, const dcomplex* x, int incx, const dcomplex* y, int incy )$/;"	f	namespace:elem::blas
Dot	src/madness/external/elemental/src/core/imports/blas.cpp	/^double Dot( int n, const double* x, int incx, const double* y, int incy )$/;"	f	namespace:elem::blas
Dot	src/madness/external/elemental/src/core/imports/blas.cpp	/^float Dot( int n, const float* x, int incx, const float* y, int incy )$/;"	f	namespace:elem::blas
Dot	src/madness/external/elemental/src/core/imports/blas.cpp	/^scomplex Dot( int n, const scomplex* x, int incx, const scomplex* y, int incy )$/;"	f	namespace:elem::blas
Dotc	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^inline T Dotc( int n, const T* x, int incx, const T* y, int incy )$/;"	f	namespace:elem::blas
Dotc	src/madness/external/elemental/src/core/imports/blas.cpp	/^dcomplex Dotc( int n, const dcomplex* x, int incx, const dcomplex* y, int incy )$/;"	f	namespace:elem::blas
Dotc	src/madness/external/elemental/src/core/imports/blas.cpp	/^double Dotc( int n, const double* x, int incx, const double* y, int incy )$/;"	f	namespace:elem::blas
Dotc	src/madness/external/elemental/src/core/imports/blas.cpp	/^float Dotc( int n, const float* x, int incx, const float* y, int incy )$/;"	f	namespace:elem::blas
Dotc	src/madness/external/elemental/src/core/imports/blas.cpp	/^scomplex Dotc( int n, const scomplex* x, int incx, const scomplex* y, int incy )$/;"	f	namespace:elem::blas
Dotu	src/madness/external/elemental/include/elemental/blas-like/level1/Dotu.hpp	/^Dotu( const DistMatrix<F,U,V>& A, const DistMatrix<F,U,V>& B )$/;"	f	namespace:elem
Dotu	src/madness/external/elemental/include/elemental/blas-like/level1/Dotu.hpp	/^Dotu( const Matrix<F>& A, const Matrix<F>& B )$/;"	f	namespace:elem
Dotu	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^inline T Dotu( int n, const T* x, int incx, const T* y, int incy )$/;"	f	namespace:elem::blas
Dotu	src/madness/external/elemental/src/core/imports/blas.cpp	/^dcomplex Dotu( int n, const dcomplex* x, int incx, const dcomplex* y, int incy )$/;"	f	namespace:elem::blas
Dotu	src/madness/external/elemental/src/core/imports/blas.cpp	/^double Dotu( int n, const double* x, int incx, const double* y, int incy )$/;"	f	namespace:elem::blas
Dotu	src/madness/external/elemental/src/core/imports/blas.cpp	/^float Dotu( int n, const float* x, int incx, const float* y, int incy )$/;"	f	namespace:elem::blas
Dotu	src/madness/external/elemental/src/core/imports/blas.cpp	/^scomplex Dotu( int n, const scomplex* x, int incx, const scomplex* y, int incy )$/;"	f	namespace:elem::blas
Double	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^typedef FloatingPoint<double> Double;$/;"	t	namespace:testing::internal
Double	src/madness/world/test_dc.cc	/^    Double(const Double& d) : value(d.value) {double_count++;}$/;"	f	class:Double
Double	src/madness/world/test_dc.cc	/^    Double(double value=0.0) : value(value) {double_count++;}$/;"	f	class:Double
Double	src/madness/world/test_dc.cc	/^class Double {$/;"	c	file:
DoubleLE	src/madness/external/gtest/src/gtest.cc	/^AssertionResult DoubleLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
DoubleNearPredFormat	src/madness/external/gtest/src/gtest.cc	/^AssertionResult DoubleNearPredFormat(const char* expr1,$/;"	f	namespace:testing::internal
DoubleValue	src/madness/external/tinyxml/tinyxml.cc	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute
DownCast_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline To DownCast_(From* f) {  \/\/ so we only accept pointers$/;"	f	namespace:testing::internal
Dup	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Dup( Comm original, Comm& duplicate )$/;"	f	namespace:elem::mpi
Dup	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Dup( Group group, Group& newGroup )$/;"	f	namespace:elem::mpi
E	src/apps/polar/moldft.cc	/^    mutable double E;          \/\/< Current energy$/;"	m	class:MolecularEnergy	file:
E	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *E;$/;"	m	struct:__anon29
E	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *restrict E;$/;"	m	struct:__anon21
E0	src/madness/tensor/gfit.cc	/^double E0(double p) {$/;"	f
E2	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *E2;$/;"	m	struct:__anon29
ECmdCode	src/madness/external/muParser/muParserDef.h	/^  enum ECmdCode$/;"	g	namespace:mu
EErrorCodes	src/madness/external/muParser/muParserError.h	/^enum EErrorCodes$/;"	g	namespace:mu
EIGSOLVER_H_	src/apps/hf/eigsolver.h	33;"	d
EIGV_STREAM	src/apps/hf/eigsolver.cc	47;"	d	file:
ELECTRONICSTRUCTUREAPP_H_	src/apps/hf/electronicstructureapp.h	41;"	d
ELECTRONICSTRUCTUREPARAMS_H_	src/apps/hf/electronicstructureparams.h	34;"	d
ELEMENT	src/madness/external/tinyxml/tinyxml.h	/^		ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
ELEMENTAL_HPP	src/madness/external/elemental/include/elemental.hpp	11;"	d
ELEMENTAL_LITE_HPP	src/madness/external/elemental/include/elemental-lite.hpp	11;"	d
ELEM_ADJOINT_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Adjoint.hpp	11;"	d
ELEM_ADJOINT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	23;"	d
ELEM_APPLYCOLPIVOTS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	341;"	d
ELEM_APPLYPACKEDREFLECTORS_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	452;"	d
ELEM_APPLYPACKEDREFLECTORS_LLHB_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLHB.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_LLHF_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLHF.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_LLVB_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLVB.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_LLVF_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLVF.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_LUHB_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUHB.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_LUHF_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUHF.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_LUVB_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUVB.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_LUVF_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUVF.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_RLHB_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLHB.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_RLHF_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLHF.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_RLVB_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLVB.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_RLVF_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLVF.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_RUHB_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUHB.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_RUHF_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUHF.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_RUVB_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUVB.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_RUVF_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUVF.hpp	11;"	d
ELEM_APPLYPACKEDREFLECTORS_UTIL_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/Util.hpp	11;"	d
ELEM_APPLYROWPIVOTS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	343;"	d
ELEM_APPLYSYMMETRICPIVOTS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	345;"	d
ELEM_AXPYINTERFACE_DECL_HPP	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	16;"	d
ELEM_AXPYINTERFACE_HPP	src/madness/external/elemental/include/elemental/core/AxpyInterface.hpp	11;"	d
ELEM_AXPYINTERFACE_IMPL_HPP	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	16;"	d
ELEM_AXPYTRIANGLE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/AxpyTriangle.hpp	11;"	d
ELEM_AXPYTRIANGLE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	27;"	d
ELEM_AXPY_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Axpy.hpp	11;"	d
ELEM_AXPY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	25;"	d
ELEM_BASISPURSUIT_HPP	src/madness/external/elemental/include/elemental/convex/BasisPursuit.hpp	11;"	d
ELEM_BASISPURSUIT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	580;"	d
ELEM_BIDIAG_APPLY_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/Apply.hpp	11;"	d
ELEM_BIDIAG_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag.hpp	11;"	d
ELEM_BIDIAG_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	163;"	d
ELEM_BIDIAG_LPAN_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LPan.hpp	11;"	d
ELEM_BIDIAG_LUNB_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LUnb.hpp	11;"	d
ELEM_BIDIAG_L_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/L.hpp	11;"	d
ELEM_BIDIAG_UPAN_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UPan.hpp	11;"	d
ELEM_BIDIAG_UUNB_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UUnb.hpp	11;"	d
ELEM_BIDIAG_U_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/U.hpp	11;"	d
ELEM_BLAS	src/madness/external/elemental/include/elemental/core.hpp	80;"	d
ELEM_BLAS	src/madness/external/elemental/include/elemental/core.hpp	82;"	d
ELEM_BLAS1_HPP	src/madness/external/elemental/include/elemental/blas-like/level1.hpp	11;"	d
ELEM_BLAS1_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	21;"	d
ELEM_BLAS2_HPP	src/madness/external/elemental/include/elemental/blas-like/level2.hpp	11;"	d
ELEM_BLAS2_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	96;"	d
ELEM_BLAS3_HPP	src/madness/external/elemental/include/elemental/blas-like/level3.hpp	11;"	d
ELEM_BLAS3_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	129;"	d
ELEM_BLASLIKE_HPP	src/madness/external/elemental/include/elemental/blas-like.hpp	11;"	d
ELEM_BLAS_DECL_HPP	src/madness/external/elemental/include/elemental/blas-like/decl.hpp	11;"	d
ELEM_BLAS_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	16;"	d
ELEM_BLAS_IMPL_HPP	src/madness/external/elemental/include/elemental/blas-like/impl.hpp	11;"	d
ELEM_BLAS_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	17;"	d
ELEM_BLAS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	15;"	d
ELEM_BLAS_SWAP_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_ABSTRACT_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_CIRC_CIRC_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_FORWARD_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/forward_decl.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_GENERAL_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_MC_MR_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_MC_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_MD_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_MR_MC_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_MR_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_STAR_MC_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_STAR_MD_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_STAR_MR_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_STAR_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_STAR_VC_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_STAR_VR_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_VC_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	11;"	d
ELEM_BLOCKDISTMATRIX_VR_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	11;"	d
ELEM_BULLSHEAD_HPP	src/madness/external/elemental/include/elemental/matrices/BullsHead.hpp	11;"	d
ELEM_BULLSHEAD_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	477;"	d
ELEM_CAUCHYLIKE_HPP	src/madness/external/elemental/include/elemental/matrices/CauchyLike.hpp	11;"	d
ELEM_CAUCHYLIKE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	479;"	d
ELEM_CAUCHY_HPP	src/madness/external/elemental/include/elemental/matrices/Cauchy.hpp	11;"	d
ELEM_CAUCHY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	478;"	d
ELEM_CHOLESKY_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	11;"	d
ELEM_CHOLESKY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	223;"	d
ELEM_CHOLESKY_LMOD_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	11;"	d
ELEM_CHOLESKY_LVAR2_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar2.hpp	11;"	d
ELEM_CHOLESKY_LVAR3PIVOTED_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	11;"	d
ELEM_CHOLESKY_LVAR3SQUARE_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Square.hpp	11;"	d
ELEM_CHOLESKY_LVAR3_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3.hpp	11;"	d
ELEM_CHOLESKY_QR_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Cholesky.hpp	11;"	d
ELEM_CHOLESKY_RQ_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Cholesky.hpp	11;"	d
ELEM_CHOLESKY_SOLVEAFTER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/SolveAfter.hpp	11;"	d
ELEM_CHOLESKY_UMOD_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	11;"	d
ELEM_CHOLESKY_UVAR2_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar2.hpp	11;"	d
ELEM_CHOLESKY_UVAR3PIVOTED_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Pivoted.hpp	11;"	d
ELEM_CHOLESKY_UVAR3SQUARE_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Square.hpp	11;"	d
ELEM_CHOLESKY_UVAR3_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3.hpp	11;"	d
ELEM_CIRCULANT_HPP	src/madness/external/elemental/include/elemental/matrices/Circulant.hpp	11;"	d
ELEM_CIRCULANT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	480;"	d
ELEM_CLIP_HPP	src/madness/external/elemental/include/elemental/convex/Clip.hpp	11;"	d
ELEM_CLIP_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	565;"	d
ELEM_COMPLEX_DECL_HPP	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	11;"	d
ELEM_COMPLEX_HPP	src/madness/external/elemental/include/elemental/core/Complex.hpp	11;"	d
ELEM_COMPLEX_IMPL_HPP	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	11;"	d
ELEM_CONDENSE_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	11;"	d
ELEM_CONDENSE_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	160;"	d
ELEM_CONDENSE_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense.hpp	11;"	d
ELEM_CONDENSE_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/impl.hpp	11;"	d
ELEM_CONDENSE_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	161;"	d
ELEM_CONDENSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	159;"	d
ELEM_CONDITION_FROBENIUS_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Frobenius.hpp	11;"	d
ELEM_CONDITION_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Condition.hpp	11;"	d
ELEM_CONDITION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	368;"	d
ELEM_CONDITION_INFINITY_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Infinity.hpp	11;"	d
ELEM_CONDITION_MAX_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Max.hpp	11;"	d
ELEM_CONDITION_ONE_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/One.hpp	11;"	d
ELEM_CONDITION_TWO_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Two.hpp	11;"	d
ELEM_CONFIGINTERNAL_H	src/madness/external/elemental/include/elemental/config-internal.h	10;"	d
ELEM_CONJUGATE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Conjugate.hpp	11;"	d
ELEM_CONJUGATE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	29;"	d
ELEM_CONTROL_DECL_HPP	src/madness/external/elemental/include/elemental/control/decl.hpp	11;"	d
ELEM_CONTROL_HPP	src/madness/external/elemental/include/elemental/control.hpp	11;"	d
ELEM_CONTROL_IMPL_HPP	src/madness/external/elemental/include/elemental/control/impl.hpp	11;"	d
ELEM_CONVEX_DECL_HPP	src/madness/external/elemental/include/elemental/convex/decl.hpp	11;"	d
ELEM_CONVEX_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	560;"	d
ELEM_CONVEX_HPP	src/madness/external/elemental/include/elemental/convex.hpp	11;"	d
ELEM_CONVEX_IMPL_HPP	src/madness/external/elemental/include/elemental/convex/impl.hpp	11;"	d
ELEM_CONVEX_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	561;"	d
ELEM_CONVEX_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	559;"	d
ELEM_COPY_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Copy.hpp	11;"	d
ELEM_COPY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	31;"	d
ELEM_CORE_HPP	src/madness/external/elemental/include/elemental/core.hpp	11;"	d
ELEM_COVARIANCE_HPP	src/madness/external/elemental/include/elemental/convex/Covariance.hpp	11;"	d
ELEM_COVARIANCE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	566;"	d
ELEM_DECOMP_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	11;"	d
ELEM_DECOMP_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	173;"	d
ELEM_DECOMP_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp.hpp	11;"	d
ELEM_DECOMP_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/impl.hpp	11;"	d
ELEM_DECOMP_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	174;"	d
ELEM_DECOMP_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	172;"	d
ELEM_DEMMEL_HPP	src/madness/external/elemental/include/elemental/matrices/Demmel.hpp	11;"	d
ELEM_DEMMEL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	481;"	d
ELEM_DETERMINANT_CHOLESKY_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/Cholesky.hpp	11;"	d
ELEM_DETERMINANT_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	11;"	d
ELEM_DETERMINANT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	370;"	d
ELEM_DETERMINANT_LUPARTIALPIV_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/LUPartialPiv.hpp	11;"	d
ELEM_DIAGONALSCALETRAPEZOID_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/DiagonalScaleTrapezoid.hpp	11;"	d
ELEM_DIAGONALSCALETRAPEZOID_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	35;"	d
ELEM_DIAGONALSCALE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/DiagonalScale.hpp	11;"	d
ELEM_DIAGONALSCALE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	33;"	d
ELEM_DIAGONALSOLVE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/DiagonalSolve.hpp	11;"	d
ELEM_DIAGONALSOLVE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	37;"	d
ELEM_DIAGONAL_HPP	src/madness/external/elemental/include/elemental/matrices/Diagonal.hpp	11;"	d
ELEM_DIAGONAL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	482;"	d
ELEM_DISPLAYWIDGET_DECL_HPP	src/madness/external/elemental/include/elemental/io/DisplayWidget/decl.hpp	11;"	d
ELEM_DISPLAYWIDGET_IMPL_HPP	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	11;"	d
ELEM_DISPLAY_HPP	src/madness/external/elemental/include/elemental/io/Display.hpp	11;"	d
ELEM_DISPLAY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	551;"	d
ELEM_DISTMATRIX_ABSTRACT_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	11;"	d
ELEM_DISTMATRIX_CIRC_CIRC_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	11;"	d
ELEM_DISTMATRIX_FORWARD_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/forward_decl.hpp	11;"	d
ELEM_DISTMATRIX_GENERAL_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	11;"	d
ELEM_DISTMATRIX_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	11;"	d
ELEM_DISTMATRIX_MC_MR_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	11;"	d
ELEM_DISTMATRIX_MC_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	11;"	d
ELEM_DISTMATRIX_MD_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	11;"	d
ELEM_DISTMATRIX_MR_MC_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	11;"	d
ELEM_DISTMATRIX_MR_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	11;"	d
ELEM_DISTMATRIX_STAR_MC_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	11;"	d
ELEM_DISTMATRIX_STAR_MD_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	11;"	d
ELEM_DISTMATRIX_STAR_MR_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	11;"	d
ELEM_DISTMATRIX_STAR_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	11;"	d
ELEM_DISTMATRIX_STAR_VC_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	11;"	d
ELEM_DISTMATRIX_STAR_VR_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	11;"	d
ELEM_DISTMATRIX_VC_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	11;"	d
ELEM_DISTMATRIX_VR_STAR_DECL_HPP	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	11;"	d
ELEM_DOTU_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Dotu.hpp	11;"	d
ELEM_DOTU_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	41;"	d
ELEM_DOT_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Dot.hpp	11;"	d
ELEM_DOT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	39;"	d
ELEM_EGOROV_HPP	src/madness/external/elemental/include/elemental/matrices/Egorov.hpp	11;"	d
ELEM_EGOROV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	483;"	d
ELEM_ENTRYWISEMAP_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/EntrywiseMap.hpp	11;"	d
ELEM_ENTRYWISEMAP_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	43;"	d
ELEM_ENTRYWISENORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	394;"	d
ELEM_ENTRYWISEONENORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	396;"	d
ELEM_ENVIRONMENT_DECL_HPP	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	11;"	d
ELEM_ENVIRONMENT_IMPL_HPP	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	11;"	d
ELEM_EXPANDPACKEDREFLECTORS_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ExpandPackedReflectors.hpp	11;"	d
ELEM_EXPANDPACKEDREFLECTORS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	454;"	d
ELEM_EXPANDPACKEDREFLECTORS_LV_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/ExpandPackedReflectors/LV.hpp	11;"	d
ELEM_EXPLICITPERMUTATION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	347;"	d
ELEM_EXTENDEDKAHAN_HPP	src/madness/external/elemental/include/elemental/matrices/ExtendedKahan.hpp	11;"	d
ELEM_EXTENDEDKAHAN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	484;"	d
ELEM_FACTOR_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	11;"	d
ELEM_FACTOR_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	220;"	d
ELEM_FACTOR_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor.hpp	11;"	d
ELEM_FACTOR_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/impl.hpp	11;"	d
ELEM_FACTOR_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	221;"	d
ELEM_FACTOR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	219;"	d
ELEM_FIEDLER_HPP	src/madness/external/elemental/include/elemental/matrices/Fiedler.hpp	11;"	d
ELEM_FIEDLER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	485;"	d
ELEM_FMA_PARALLEL_FOR	src/madness/external/elemental/include/elemental/core.hpp	57;"	d
ELEM_FMA_PARALLEL_FOR	src/madness/external/elemental/include/elemental/core.hpp	59;"	d
ELEM_FORSYTHE_HPP	src/madness/external/elemental/include/elemental/matrices/Forsythe.hpp	11;"	d
ELEM_FORSYTHE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	486;"	d
ELEM_FOURIER_HPP	src/madness/external/elemental/include/elemental/matrices/Fourier.hpp	11;"	d
ELEM_FOURIER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	487;"	d
ELEM_FOXLI_HPP	src/madness/external/elemental/include/elemental/matrices/FoxLi.hpp	11;"	d
ELEM_FOXLI_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	488;"	d
ELEM_FROBENIUSCONDITION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	382;"	d
ELEM_FROBENIUSNORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	398;"	d
ELEM_FUNCS_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/decl.hpp	11;"	d
ELEM_FUNCS_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	313;"	d
ELEM_FUNCS_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs.hpp	11;"	d
ELEM_FUNCS_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/impl.hpp	11;"	d
ELEM_FUNCS_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	314;"	d
ELEM_FUNCS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	312;"	d
ELEM_GAUSSIANELIMINATION_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/GaussianElimination.hpp	11;"	d
ELEM_GAUSSIANELIMINATION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	425;"	d
ELEM_GAUSSIAN_HPP	src/madness/external/elemental/include/elemental/matrices/Gaussian.hpp	11;"	d
ELEM_GAUSSIAN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	528;"	d
ELEM_GCDMATRIX_HPP	src/madness/external/elemental/include/elemental/matrices/GCDMatrix.hpp	11;"	d
ELEM_GCDMATRIX_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	489;"	d
ELEM_GEAR_HPP	src/madness/external/elemental/include/elemental/matrices/Gear.hpp	11;"	d
ELEM_GEAR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	490;"	d
ELEM_GEMM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm.hpp	11;"	d
ELEM_GEMM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	131;"	d
ELEM_GEMM_NN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NN.hpp	11;"	d
ELEM_GEMM_NT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NT.hpp	11;"	d
ELEM_GEMM_TN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TN.hpp	11;"	d
ELEM_GEMM_TT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TT.hpp	11;"	d
ELEM_GEMV_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv.hpp	11;"	d
ELEM_GEMV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	98;"	d
ELEM_GEMV_N_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv/N.hpp	11;"	d
ELEM_GEMV_T_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv/T.hpp	11;"	d
ELEM_GENERALINVERSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	330;"	d
ELEM_GERU_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Geru.hpp	11;"	d
ELEM_GERU_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	102;"	d
ELEM_GER_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Ger.hpp	11;"	d
ELEM_GER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	100;"	d
ELEM_GKS_HPP	src/madness/external/elemental/include/elemental/matrices/GKS.hpp	11;"	d
ELEM_GKS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	491;"	d
ELEM_GLM_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/GLM.hpp	11;"	d
ELEM_GLM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	438;"	d
ELEM_GQR_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/GQR.hpp	11;"	d
ELEM_GQR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	237;"	d
ELEM_GRCAR_HPP	src/madness/external/elemental/include/elemental/matrices/Grcar.hpp	11;"	d
ELEM_GRCAR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	492;"	d
ELEM_GRID_DECL_HPP	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	12;"	d
ELEM_GRID_IMPL_HPP	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	12;"	d
ELEM_GRQ_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/GRQ.hpp	11;"	d
ELEM_GRQ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	239;"	d
ELEM_HAAR_HPP	src/madness/external/elemental/include/elemental/matrices/Haar.hpp	11;"	d
ELEM_HAAR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	530;"	d
ELEM_HADAMARD_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Hadamard.hpp	11;"	d
ELEM_HADAMARD_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	45;"	d
ELEM_HANKEL_HPP	src/madness/external/elemental/include/elemental/matrices/Hankel.hpp	11;"	d
ELEM_HANKEL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	493;"	d
ELEM_HANOWA_HPP	src/madness/external/elemental/include/elemental/matrices/Hanowa.hpp	11;"	d
ELEM_HANOWA_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	494;"	d
ELEM_HATANONELSON_HPP	src/madness/external/elemental/include/elemental/matrices/HatanoNelson.hpp	11;"	d
ELEM_HATANONELSON_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	532;"	d
ELEM_HAVE_NONBLOCKING	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	19;"	d
ELEM_HELMHOLTZPML_HPP	src/madness/external/elemental/include/elemental/matrices/HelmholtzPML.hpp	11;"	d
ELEM_HELMHOLTZPML_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	496;"	d
ELEM_HELMHOLTZ_HPP	src/madness/external/elemental/include/elemental/matrices/Helmholtz.hpp	11;"	d
ELEM_HELMHOLTZ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	495;"	d
ELEM_HEMM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Hemm.hpp	11;"	d
ELEM_HEMM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	132;"	d
ELEM_HEMV_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Hemv.hpp	11;"	d
ELEM_HEMV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	104;"	d
ELEM_HER2K_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Her2k.hpp	11;"	d
ELEM_HER2K_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	133;"	d
ELEM_HER2_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Her2.hpp	11;"	d
ELEM_HER2_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	106;"	d
ELEM_HERK_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Herk.hpp	11;"	d
ELEM_HERK_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	134;"	d
ELEM_HERMITIANEIG_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianEig.hpp	11;"	d
ELEM_HERMITIANEIG_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	176;"	d
ELEM_HERMITIANEIG_SDC_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianEig/SDC.hpp	11;"	d
ELEM_HERMITIANEIG_SDC_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	193;"	d
ELEM_HERMITIANFROMEVD_HPP	src/madness/external/elemental/include/elemental/matrices/HermitianFromEVD.hpp	11;"	d
ELEM_HERMITIANFROMEVD_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	497;"	d
ELEM_HERMITIANFUNCTION_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/HermitianFunction.hpp	11;"	d
ELEM_HERMITIANFUNCTION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	316;"	d
ELEM_HERMITIANGENDEFINITEEIG_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianGenDefiniteEig.hpp	11;"	d
ELEM_HERMITIANGENDEFINITEEIG_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	178;"	d
ELEM_HERMITIANINVERSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	336;"	d
ELEM_HERMITIANSOLVE_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/HermitianSolve.hpp	11;"	d
ELEM_HERMITIANSOLVE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	430;"	d
ELEM_HERMITIANTRIDIAGEIG_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig.hpp	11;"	d
ELEM_HERMITIANTRIDIAGEIG_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	180;"	d
ELEM_HERMITIANTRIDIAGEIG_SORT_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig/Sort.hpp	11;"	d
ELEM_HERMITIANTRIDIAGEIG_SORT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	198;"	d
ELEM_HERMITIANTRIDIAG_APPLYQ_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/HermitianTridiag/ApplyQ.hpp	11;"	d
ELEM_HERMITIANTRIDIAG_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/HermitianTridiag.hpp	11;"	d
ELEM_HERMITIANTRIDIAG_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	165;"	d
ELEM_HERMITIANTRIDIAG_LPANSQUARE_HPP	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LPanSquare.hpp	10;"	d
ELEM_HERMITIANTRIDIAG_LPAN_HPP	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LPan.hpp	10;"	d
ELEM_HERMITIANTRIDIAG_LSQUARE_HPP	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LSquare.hpp	10;"	d
ELEM_HERMITIANTRIDIAG_L_HPP	src/madness/external/elemental/src/lapack-like/HermitianTridiag/L.hpp	10;"	d
ELEM_HERMITIANTRIDIAG_UPANSQUARE_HPP	src/madness/external/elemental/src/lapack-like/HermitianTridiag/UPanSquare.hpp	10;"	d
ELEM_HERMITIANTRIDIAG_UPAN_HPP	src/madness/external/elemental/src/lapack-like/HermitianTridiag/UPan.hpp	10;"	d
ELEM_HERMITIANTRIDIAG_USQUARE_HPP	src/madness/external/elemental/src/lapack-like/HermitianTridiag/USquare.hpp	10;"	d
ELEM_HERMITIANTRIDIAG_U_HPP	src/madness/external/elemental/src/lapack-like/HermitianTridiag/U.hpp	10;"	d
ELEM_HERMITIANUNIFORMSPECTRUM_HPP	src/madness/external/elemental/include/elemental/matrices/HermitianUniformSpectrum.hpp	11;"	d
ELEM_HERMITIANUNIFORMSPECTRUM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	534;"	d
ELEM_HER_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Her.hpp	11;"	d
ELEM_HER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	108;"	d
ELEM_HESSENBERG_APPLYQ_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/ApplyQ.hpp	11;"	d
ELEM_HESSENBERG_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg.hpp	11;"	d
ELEM_HESSENBERG_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	167;"	d
ELEM_HESSENBERG_LPAN_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/LPan.hpp	11;"	d
ELEM_HESSENBERG_LUNB_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/LUnb.hpp	11;"	d
ELEM_HESSENBERG_L_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/L.hpp	11;"	d
ELEM_HESSENBERG_UPAN_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/UPan.hpp	11;"	d
ELEM_HESSENBERG_UUNB_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/UUnb.hpp	11;"	d
ELEM_HESSENBERG_U_HPP	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/U.hpp	11;"	d
ELEM_HILBERTSCHMIDT_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/HilbertSchmidt.hpp	11;"	d
ELEM_HILBERTSCHMIDT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	47;"	d
ELEM_HILBERT_HPP	src/madness/external/elemental/include/elemental/matrices/Hilbert.hpp	11;"	d
ELEM_HILBERT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	498;"	d
ELEM_HPDINVERSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	332;"	d
ELEM_HPDSOLVE_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/HPDSolve.hpp	11;"	d
ELEM_HPDSOLVE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	427;"	d
ELEM_HYPERBOLICREFLECTOR_COL_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Col.hpp	11;"	d
ELEM_HYPERBOLICREFLECTOR_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	11;"	d
ELEM_HYPERBOLICREFLECTOR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	456;"	d
ELEM_HYPERBOLICREFLECTOR_ROW_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Row.hpp	11;"	d
ELEM_IDENTITY_HPP	src/madness/external/elemental/include/elemental/matrices/Identity.hpp	11;"	d
ELEM_IDENTITY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	499;"	d
ELEM_ID_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/ID.hpp	11;"	d
ELEM_ID_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	242;"	d
ELEM_IMPORTS_BLAS_HPP	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	11;"	d
ELEM_IMPORTS_CHOICE_HPP	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	13;"	d
ELEM_IMPORTS_FLAME_HPP	src/madness/external/elemental/include/elemental/core/imports/flame.hpp	11;"	d
ELEM_IMPORTS_LAPACK_HPP	src/madness/external/elemental/include/elemental/core/imports/lapack.hpp	11;"	d
ELEM_IMPORTS_MPICHOICE_HPP	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	13;"	d
ELEM_IMPORTS_MPI_HPP	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	12;"	d
ELEM_IMPORTS_PMRRR_HPP	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	11;"	d
ELEM_IMPORTS_SCALAPACK_HPP	src/madness/external/elemental/include/elemental/core/imports/scalapack.hpp	11;"	d
ELEM_INCLUDEPATHS_HPP	src/madness/external/elemental/include/elemental/include-paths.hpp	11;"	d
ELEM_INDEXING_DECL_HPP	src/madness/external/elemental/include/elemental/core/indexing/decl.hpp	11;"	d
ELEM_INDEXING_IMPL_HPP	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	11;"	d
ELEM_INERTIA_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Inertia.hpp	11;"	d
ELEM_INERTIA_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	372;"	d
ELEM_INFINITYCONDITION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	384;"	d
ELEM_INFINITYNORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	400;"	d
ELEM_INNER_PARALLEL_FOR	src/madness/external/elemental/include/elemental/core.hpp	62;"	d
ELEM_INNER_PARALLEL_FOR	src/madness/external/elemental/include/elemental/core.hpp	67;"	d
ELEM_INNER_PARALLEL_FOR_COLLAPSE2	src/madness/external/elemental/include/elemental/core.hpp	63;"	d
ELEM_INNER_PARALLEL_FOR_COLLAPSE2	src/madness/external/elemental/include/elemental/core.hpp	68;"	d
ELEM_INVERSE_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/decl.hpp	11;"	d
ELEM_INVERSE_GENERAL_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General.hpp	11;"	d
ELEM_INVERSE_HERMITIAN_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Hermitian.hpp	11;"	d
ELEM_INVERSE_HPD_CHOLESKYLVAR2_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyLVar2.hpp	11;"	d
ELEM_INVERSE_HPD_CHOLESKYUVAR2_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyUVar2.hpp	11;"	d
ELEM_INVERSE_HPD_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD.hpp	11;"	d
ELEM_INVERSE_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse.hpp	11;"	d
ELEM_INVERSE_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/impl.hpp	11;"	d
ELEM_INVERSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	318;"	d
ELEM_INVERSE_LUPARTIALPIV_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General/LUPartialPiv.hpp	11;"	d
ELEM_INVERSE_SYMMETRIC_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Symmetric.hpp	11;"	d
ELEM_INVERSE_TRIANGULAR_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular.hpp	11;"	d
ELEM_INVERSE_TRIANGULAR_LVAR3_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/LVar3.hpp	11;"	d
ELEM_INVERSE_TRIANGULAR_UVAR3_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/UVar3.hpp	11;"	d
ELEM_INVERTPERMUTATION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	349;"	d
ELEM_IO_COMPLEXDISPLAYWINDOW_DECL_HPP	src/madness/external/elemental/include/elemental/io/ComplexDisplayWindow-premoc.hpp	11;"	d
ELEM_IO_DECL_HPP	src/madness/external/elemental/include/elemental/io/decl.hpp	11;"	d
ELEM_IO_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	548;"	d
ELEM_IO_DISPLAYWINDOW_DECL_HPP	src/madness/external/elemental/include/elemental/io/DisplayWindow-premoc.hpp	11;"	d
ELEM_IO_HPP	src/madness/external/elemental/include/elemental/io.hpp	11;"	d
ELEM_IO_IMPL_HPP	src/madness/external/elemental/include/elemental/io/impl.hpp	11;"	d
ELEM_IO_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	549;"	d
ELEM_IO_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	547;"	d
ELEM_JORDAN_HPP	src/madness/external/elemental/include/elemental/matrices/Jordan.hpp	11;"	d
ELEM_JORDAN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	500;"	d
ELEM_KAHAN_HPP	src/madness/external/elemental/include/elemental/matrices/Kahan.hpp	11;"	d
ELEM_KAHAN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	501;"	d
ELEM_KMS_HPP	src/madness/external/elemental/include/elemental/matrices/KMS.hpp	11;"	d
ELEM_KMS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	502;"	d
ELEM_KYFANNORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	402;"	d
ELEM_LAPACK	src/madness/external/elemental/include/elemental/core.hpp	86;"	d
ELEM_LAPACK	src/madness/external/elemental/include/elemental/core.hpp	88;"	d
ELEM_LAPACKUTIL_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/decl.hpp	11;"	d
ELEM_LAPACKUTIL_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	449;"	d
ELEM_LAPACKUTIL_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/impl.hpp	11;"	d
ELEM_LAPACKUTIL_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	450;"	d
ELEM_LAPACKUTIL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	448;"	d
ELEM_LAPACK_APPLYCOLPIVOTS_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyColPivots.hpp	11;"	d
ELEM_LAPACK_APPLYROWPIVOTS_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyRowPivots.hpp	11;"	d
ELEM_LAPACK_APPLYSYMMETRICPIVOTS_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplySymmetricPivots.hpp	11;"	d
ELEM_LAPACK_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/decl.hpp	11;"	d
ELEM_LAPACK_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	154;"	d
ELEM_LAPACK_EXPLICITPERMUTATION_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/ExplicitPermutation.hpp	11;"	d
ELEM_LAPACK_HPP	src/madness/external/elemental/include/elemental/lapack-like.hpp	11;"	d
ELEM_LAPACK_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/impl.hpp	11;"	d
ELEM_LAPACK_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	155;"	d
ELEM_LAPACK_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	153;"	d
ELEM_LAPACK_INVERTPERMUTATION_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/InvertPermutation.hpp	11;"	d
ELEM_LAPACK_PERMUTATIONMETA_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	11;"	d
ELEM_LAPACK_PERMUTECOLS_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteCols.hpp	11;"	d
ELEM_LAPACK_PERMUTEROWS_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteRows.hpp	11;"	d
ELEM_LAPACK_PIVOTSTOPARTIALPERMUTATION_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/PivotsToPartialPermutation.hpp	11;"	d
ELEM_LAPACK_PIVOTSTOPERMUTATION_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/PivotsToPermutation.hpp	11;"	d
ELEM_LAPLACIAN_HPP	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	11;"	d
ELEM_LAPLACIAN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	503;"	d
ELEM_LAUCHLI_HPP	src/madness/external/elemental/include/elemental/matrices/Lauchli.hpp	11;"	d
ELEM_LAUCHLI_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	504;"	d
ELEM_LDL_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL.hpp	11;"	d
ELEM_LDL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	225;"	d
ELEM_LDL_INERTIA_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Inertia.hpp	11;"	d
ELEM_LDL_INERTIA_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	249;"	d
ELEM_LDL_MULTIPLYAFTER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/MultiplyAfter.hpp	11;"	d
ELEM_LDL_MULTIPLYAFTER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	251;"	d
ELEM_LDL_PIVOTED_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	11;"	d
ELEM_LDL_PIVOTED_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	253;"	d
ELEM_LDL_SOLVEAFTER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/SolveAfter.hpp	11;"	d
ELEM_LDL_SOLVEAFTER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	255;"	d
ELEM_LDL_VAR3_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Var3.hpp	11;"	d
ELEM_LDL_VAR3_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	257;"	d
ELEM_LEASTSQUARES_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/LeastSquares.hpp	11;"	d
ELEM_LEASTSQUARES_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	435;"	d
ELEM_LEGENDRE_HPP	src/madness/external/elemental/include/elemental/matrices/Legendre.hpp	11;"	d
ELEM_LEGENDRE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	505;"	d
ELEM_LEHMER_HPP	src/madness/external/elemental/include/elemental/matrices/Lehmer.hpp	11;"	d
ELEM_LEHMER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	506;"	d
ELEM_LINEARPROGRAM_HPP	src/madness/external/elemental/include/elemental/convex/LinearProgram.hpp	11;"	d
ELEM_LINEARPROGRAM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	581;"	d
ELEM_LOGBARRIER_HPP	src/madness/external/elemental/include/elemental/convex/LogBarrier.hpp	11;"	d
ELEM_LOGBARRIER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	567;"	d
ELEM_LOGDETDIV_HPP	src/madness/external/elemental/include/elemental/convex/LogDetDiv.hpp	11;"	d
ELEM_LOGDETDIV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	568;"	d
ELEM_LOTKIN_HPP	src/madness/external/elemental/include/elemental/matrices/Lotkin.hpp	11;"	d
ELEM_LOTKIN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	507;"	d
ELEM_LQ_APPLYQ_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/ApplyQ.hpp	11;"	d
ELEM_LQ_APPLYQ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	262;"	d
ELEM_LQ_EXPLICIT_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Explicit.hpp	11;"	d
ELEM_LQ_EXPLICIT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	264;"	d
ELEM_LQ_HOUSEHOLDER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Householder.hpp	11;"	d
ELEM_LQ_HOUSEHOLDER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	266;"	d
ELEM_LQ_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ.hpp	11;"	d
ELEM_LQ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	230;"	d
ELEM_LQ_PANELHOUSEHOLDER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/PanelHouseholder.hpp	11;"	d
ELEM_LQ_PANELHOUSEHOLDER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	268;"	d
ELEM_LQ_SOLVEAFTER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/SolveAfter.hpp	11;"	d
ELEM_LSE_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/LSE.hpp	11;"	d
ELEM_LSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	440;"	d
ELEM_LU_FULL_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Full.hpp	11;"	d
ELEM_LU_FULL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	273;"	d
ELEM_LU_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LU.hpp	11;"	d
ELEM_LU_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	227;"	d
ELEM_LU_LOCAL_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Local.hpp	11;"	d
ELEM_LU_LOCAL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	275;"	d
ELEM_LU_MOD_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Mod.hpp	11;"	d
ELEM_LU_PANEL_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Panel.hpp	11;"	d
ELEM_LU_PANEL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	277;"	d
ELEM_LU_SOLVEAFTER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/SolveAfter.hpp	11;"	d
ELEM_LU_SOLVEAFTER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	279;"	d
ELEM_LYAPUNOV_HPP	src/madness/external/elemental/include/elemental/control/Lyapunov.hpp	11;"	d
ELEM_MAKEHERMITIAN_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/MakeHermitian.hpp	11;"	d
ELEM_MAKEHERMITIAN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	49;"	d
ELEM_MAKEREAL_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/MakeReal.hpp	11;"	d
ELEM_MAKEREAL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	51;"	d
ELEM_MAKESYMMETRIC_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/MakeSymmetric.hpp	11;"	d
ELEM_MAKESYMMETRIC_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	53;"	d
ELEM_MAKETRAPEZOIDAL_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTrapezoidal.hpp	11;"	d
ELEM_MAKETRAPEZOIDAL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	55;"	d
ELEM_MAKETRIANGULAR_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTriangular.hpp	11;"	d
ELEM_MAKETRIANGULAR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	57;"	d
ELEM_MATRICES_DECL_HPP	src/madness/external/elemental/include/elemental/matrices/decl.hpp	11;"	d
ELEM_MATRICES_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	472;"	d
ELEM_MATRICES_HPP	src/madness/external/elemental/include/elemental/matrices.hpp	11;"	d
ELEM_MATRICES_IMPL_HPP	src/madness/external/elemental/include/elemental/matrices/impl.hpp	11;"	d
ELEM_MATRICES_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	473;"	d
ELEM_MATRICES_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	471;"	d
ELEM_MATRIX_FORWARD_DECL_HPP	src/madness/external/elemental/include/elemental/core/Matrix/forward_decl.hpp	11;"	d
ELEM_MATRIX_HPP	src/madness/external/elemental/include/elemental/core/Matrix.hpp	11;"	d
ELEM_MAXABS_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	11;"	d
ELEM_MAXABS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	61;"	d
ELEM_MAXCONDITION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	386;"	d
ELEM_MAXNORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	404;"	d
ELEM_MAX_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	11;"	d
ELEM_MAX_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	59;"	d
ELEM_MEDIAN_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/Median.hpp	11;"	d
ELEM_MEDIAN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	458;"	d
ELEM_MEMORY_HPP	src/madness/external/elemental/include/elemental/core/Memory.hpp	11;"	d
ELEM_MINABS_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	11;"	d
ELEM_MINABS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	65;"	d
ELEM_MINIJ_HPP	src/madness/external/elemental/include/elemental/matrices/MinIJ.hpp	11;"	d
ELEM_MINIJ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	508;"	d
ELEM_MIN_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	11;"	d
ELEM_MIN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	63;"	d
ELEM_MULTISHIFTHESSSOLVE_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/MultiShiftHessSolve.hpp	11;"	d
ELEM_MULTISHIFTHESSSOLVE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	443;"	d
ELEM_MULTISHIFTQUASITRSM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm.hpp	11;"	d
ELEM_MULTISHIFTQUASITRSM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	135;"	d
ELEM_MULTISHIFTQUASITRSM_LLN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLN.hpp	11;"	d
ELEM_MULTISHIFTQUASITRSM_LLT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLT.hpp	11;"	d
ELEM_MULTISHIFTQUASITRSM_LUN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	11;"	d
ELEM_MULTISHIFTQUASITRSM_LUT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUT.hpp	11;"	d
ELEM_MULTISHIFTTRSM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm.hpp	11;"	d
ELEM_MULTISHIFTTRSM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	137;"	d
ELEM_MULTISHIFTTRSM_LUN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUN.hpp	11;"	d
ELEM_MULTISHIFTTRSM_LUT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUT.hpp	11;"	d
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core.hpp	74;"	d
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core.hpp	76;"	d
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    AbstractBlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::AbstractBlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    GeneralBlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::GeneralBlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    BlockDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::BlockDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    AbstractDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::AbstractDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    GeneralDistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::GeneralDistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    DistMatrix( type&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::DistMatrix
ELEM_NOEXCEPT	src/madness/external/elemental/include/elemental/core/Matrix.hpp	/^    Matrix( Matrix<T>&& A ) ELEM_NOEXCEPT;$/;"	m	class:elem::Matrix
ELEM_NONBLOCKING_COLL	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	26;"	d
ELEM_NORMALFROMEVD_HPP	src/madness/external/elemental/include/elemental/matrices/NormalFromEVD.hpp	11;"	d
ELEM_NORMALFROMEVD_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	509;"	d
ELEM_NORMALUNIFORMSPECTRUM_HPP	src/madness/external/elemental/include/elemental/matrices/NormalUniformSpectrum.hpp	11;"	d
ELEM_NORMALUNIFORMSPECTRUM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	536;"	d
ELEM_NORM_ENTRYWISEONE_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/EntrywiseOne.hpp	11;"	d
ELEM_NORM_ENTRYWISE_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Entrywise.hpp	11;"	d
ELEM_NORM_FROBENIUS_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Frobenius.hpp	11;"	d
ELEM_NORM_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm.hpp	11;"	d
ELEM_NORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	374;"	d
ELEM_NORM_INFINITY_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Infinity.hpp	11;"	d
ELEM_NORM_KYFAN_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/KyFan.hpp	11;"	d
ELEM_NORM_MAX_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Max.hpp	11;"	d
ELEM_NORM_NUCLEAR_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Nuclear.hpp	11;"	d
ELEM_NORM_ONE_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/One.hpp	11;"	d
ELEM_NORM_SCHATTEN_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Schatten.hpp	11;"	d
ELEM_NORM_TWOESTIMATE_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/TwoEstimate.hpp	11;"	d
ELEM_NORM_TWO_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Two.hpp	11;"	d
ELEM_NORM_ZERO_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Zero.hpp	11;"	d
ELEM_NRM2_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Nrm2.hpp	11;"	d
ELEM_NRM2_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	67;"	d
ELEM_NUCLEARNORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	406;"	d
ELEM_ONECONDITION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	388;"	d
ELEM_ONENORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	408;"	d
ELEM_ONES_HPP	src/madness/external/elemental/include/elemental/matrices/Ones.hpp	11;"	d
ELEM_ONES_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	510;"	d
ELEM_ONETWOONE_HPP	src/madness/external/elemental/include/elemental/matrices/OneTwoOne.hpp	11;"	d
ELEM_ONETWOONE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	511;"	d
ELEM_OUTER_PARALLEL_FOR	src/madness/external/elemental/include/elemental/core.hpp	64;"	d
ELEM_OUTER_PARALLEL_FOR	src/madness/external/elemental/include/elemental/core.hpp	69;"	d
ELEM_OUTER_PARALLEL_FOR_COLLAPSE2	src/madness/external/elemental/include/elemental/core.hpp	65;"	d
ELEM_OUTER_PARALLEL_FOR_COLLAPSE2	src/madness/external/elemental/include/elemental/core.hpp	70;"	d
ELEM_PARALLEL_FOR	src/madness/external/elemental/include/elemental/core.hpp	45;"	d
ELEM_PARALLEL_FOR	src/madness/external/elemental/include/elemental/core.hpp	52;"	d
ELEM_PARALLEL_FOR_COLLAPSE2	src/madness/external/elemental/include/elemental/core.hpp	47;"	d
ELEM_PARALLEL_FOR_COLLAPSE2	src/madness/external/elemental/include/elemental/core.hpp	49;"	d
ELEM_PARALLEL_FOR_COLLAPSE2	src/madness/external/elemental/include/elemental/core.hpp	53;"	d
ELEM_PARTER_HPP	src/madness/external/elemental/include/elemental/matrices/Parter.hpp	11;"	d
ELEM_PARTER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	512;"	d
ELEM_PEI_HPP	src/madness/external/elemental/include/elemental/matrices/Pei.hpp	11;"	d
ELEM_PEI_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	513;"	d
ELEM_PERMUTATIONMETA_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	351;"	d
ELEM_PERMUTATIONPARITY_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/PermutationParity.hpp	11;"	d
ELEM_PERMUTATIONPARITY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	460;"	d
ELEM_PERMUTECOLS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	353;"	d
ELEM_PERMUTEROWS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	355;"	d
ELEM_PERM_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/decl.hpp	11;"	d
ELEM_PERM_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm.hpp	11;"	d
ELEM_PERM_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/perm/impl.hpp	11;"	d
ELEM_PIVOTPARITY_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/PivotParity.hpp	11;"	d
ELEM_PIVOTPARITY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	462;"	d
ELEM_PIVOTSTOPARTIALPERMUTATION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	357;"	d
ELEM_PIVOTSTOPERMUTATION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	359;"	d
ELEM_POLAR_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar.hpp	11;"	d
ELEM_POLAR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	182;"	d
ELEM_POLAR_QDWH_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	11;"	d
ELEM_POLAR_QDWH_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	203;"	d
ELEM_POLAR_SVD_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/SVD.hpp	11;"	d
ELEM_POLAR_SVD_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	205;"	d
ELEM_PRINT_HPP	src/madness/external/elemental/include/elemental/io/Print.hpp	11;"	d
ELEM_PRINT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	552;"	d
ELEM_PROPS_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/decl.hpp	11;"	d
ELEM_PROPS_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	365;"	d
ELEM_PROPS_HPP	src/madness/external/elemental/include/elemental/lapack-like/props.hpp	11;"	d
ELEM_PROPS_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/impl.hpp	11;"	d
ELEM_PROPS_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	366;"	d
ELEM_PROPS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	364;"	d
ELEM_PSEUDOINVERSE_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Pseudoinverse.hpp	11;"	d
ELEM_PSEUDOINVERSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	320;"	d
ELEM_PSEUDOSPECTRUM_ANALYTIC_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Analytic.hpp	11;"	d
ELEM_PSEUDOSPECTRUM_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum.hpp	11;"	d
ELEM_PSEUDOSPECTRUM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	376;"	d
ELEM_PSEUDOSPECTRUM_IRA_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRA.hpp	11;"	d
ELEM_PSEUDOSPECTRUM_IRL_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRL.hpp	11;"	d
ELEM_PSEUDOSPECTRUM_LANCZOS_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Lanczos.hpp	11;"	d
ELEM_PSEUDOSPECTRUM_POWER_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Power.hpp	11;"	d
ELEM_PSEUDOSPECTRUM_UTIL_BASICMATH_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	11;"	d
ELEM_PSEUDOSPECTRUM_UTIL_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	11;"	d
ELEM_PSEUDOSPECTRUM_UTIL_REARRANGE_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	11;"	d
ELEM_PSEUDOSPECTRUM_UTIL_SNAPSHOT_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	11;"	d
ELEM_QR_APPLYQ_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/ApplyQ.hpp	11;"	d
ELEM_QR_APPLYQ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	284;"	d
ELEM_QR_BUSINGERGOLUB_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	11;"	d
ELEM_QR_BUSINGERGOLUB_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	286;"	d
ELEM_QR_CHOLESKY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	288;"	d
ELEM_QR_EXPLICIT_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Explicit.hpp	11;"	d
ELEM_QR_EXPLICIT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	290;"	d
ELEM_QR_HOUSEHOLDER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Householder.hpp	11;"	d
ELEM_QR_HOUSEHOLDER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	292;"	d
ELEM_QR_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	11;"	d
ELEM_QR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	232;"	d
ELEM_QR_PANELHOUSEHOLDER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	294;"	d
ELEM_QR_PANEL_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/PanelHouseholder.hpp	11;"	d
ELEM_QR_SOLVEAFTER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/SolveAfter.hpp	11;"	d
ELEM_QR_TS_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	11;"	d
ELEM_QR_TS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	296;"	d
ELEM_QUADRATICPROGRAM_HPP	src/madness/external/elemental/include/elemental/convex/QuadraticProgram.hpp	11;"	d
ELEM_QUADRATICPROGRAM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	582;"	d
ELEM_QUASIDIAGONALSCALE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalScale.hpp	11;"	d
ELEM_QUASIDIAGONALSCALE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	69;"	d
ELEM_QUASIDIAGONALSOLVE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalSolve.hpp	11;"	d
ELEM_QUASIDIAGONALSOLVE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	71;"	d
ELEM_QUASITRSM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm.hpp	11;"	d
ELEM_QUASITRSM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	139;"	d
ELEM_QUASITRSM_LLN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLN.hpp	11;"	d
ELEM_QUASITRSM_LLT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLT.hpp	11;"	d
ELEM_QUASITRSM_LUN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUN.hpp	11;"	d
ELEM_QUASITRSM_LUT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUT.hpp	11;"	d
ELEM_QUASITRSV_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv.hpp	11;"	d
ELEM_QUASITRSV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	110;"	d
ELEM_QUASITRSV_LN_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LN.hpp	11;"	d
ELEM_QUASITRSV_LT_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LT.hpp	11;"	d
ELEM_QUASITRSV_UN_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UN.hpp	11;"	d
ELEM_QUASITRSV_UT_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UT.hpp	11;"	d
ELEM_RANDOM_DECL_HPP	src/madness/external/elemental/include/elemental/core/random/decl.hpp	11;"	d
ELEM_RANDOM_IMPL_HPP	src/madness/external/elemental/include/elemental/core/random/impl.hpp	11;"	d
ELEM_READ_ASCIIMATLAB_HPP	src/madness/external/elemental/include/elemental/io/Read/AsciiMatlab.hpp	11;"	d
ELEM_READ_ASCII_HPP	src/madness/external/elemental/include/elemental/io/Read/Ascii.hpp	11;"	d
ELEM_READ_BINARYFLAT_HPP	src/madness/external/elemental/include/elemental/io/Read/BinaryFlat.hpp	11;"	d
ELEM_READ_BINARY_HPP	src/madness/external/elemental/include/elemental/io/Read/Binary.hpp	11;"	d
ELEM_READ_HPP	src/madness/external/elemental/include/elemental/io/Read.hpp	11;"	d
ELEM_READ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	553;"	d
ELEM_READ_MATRIXMARKET_HPP	src/madness/external/elemental/include/elemental/io/Read/MatrixMarket.hpp	11;"	d
ELEM_REDHEFFER_HPP	src/madness/external/elemental/include/elemental/matrices/Redheffer.hpp	11;"	d
ELEM_REDHEFFER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	514;"	d
ELEM_REFLECTOR_COL_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Col.hpp	16;"	d
ELEM_REFLECTOR_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	16;"	d
ELEM_REFLECTOR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	464;"	d
ELEM_REFLECTOR_ROW_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Row.hpp	16;"	d
ELEM_RICATTI_HPP	src/madness/external/elemental/include/elemental/control/Ricatti.hpp	11;"	d
ELEM_RIEMANN_HPP	src/madness/external/elemental/include/elemental/matrices/Riemann.hpp	11;"	d
ELEM_RIEMANN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	515;"	d
ELEM_RIS_HPP	src/madness/external/elemental/include/elemental/matrices/Ris.hpp	11;"	d
ELEM_RIS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	516;"	d
ELEM_RQ_APPLYQ_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/ApplyQ.hpp	11;"	d
ELEM_RQ_APPLYQ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	301;"	d
ELEM_RQ_CHOLESKY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	303;"	d
ELEM_RQ_HOUSEHOLDER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Householder.hpp	11;"	d
ELEM_RQ_HOUSEHOLDER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	305;"	d
ELEM_RQ_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ.hpp	11;"	d
ELEM_RQ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	234;"	d
ELEM_RQ_PANELHOUSEHOLDER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	307;"	d
ELEM_RQ_PANEL_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/PanelHouseholder.hpp	11;"	d
ELEM_RQ_SOLVEAFTER_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/SolveAfter.hpp	11;"	d
ELEM_RUNNING_ON_VALGRIND	src/madness/external/elemental/include/elemental/config-internal.h	16;"	d
ELEM_RUNNING_ON_VALGRIND	src/madness/external/elemental/include/elemental/config-internal.h	18;"	d
ELEM_SCALAPACK	src/madness/external/elemental/include/elemental/core.hpp	93;"	d
ELEM_SCALAPACK	src/madness/external/elemental/include/elemental/core.hpp	95;"	d
ELEM_SCALETRAPEZOID_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/ScaleTrapezoid.hpp	11;"	d
ELEM_SCALETRAPEZOID_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	75;"	d
ELEM_SCALE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	11;"	d
ELEM_SCALE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	73;"	d
ELEM_SCHATTENNORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	410;"	d
ELEM_SCHUR_CHECkREAL_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/CheckReal.hpp	11;"	d
ELEM_SCHUR_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur.hpp	11;"	d
ELEM_SCHUR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	184;"	d
ELEM_SCHUR_INVERSEFREESDC_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/InverseFreeSDC.hpp	11;"	d
ELEM_SCHUR_INVERSEFREESDC_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	210;"	d
ELEM_SCHUR_QR_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QR.hpp	11;"	d
ELEM_SCHUR_QR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	212;"	d
ELEM_SCHUR_QUASITRIANGEIG_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QuasiTriangEig.hpp	11;"	d
ELEM_SCHUR_REALTOCOMPLEX_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/RealToComplex.hpp	11;"	d
ELEM_SCHUR_SDC_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	11;"	d
ELEM_SCHUR_SDC_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	214;"	d
ELEM_SETDIAGONAL_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/SetDiagonal.hpp	11;"	d
ELEM_SETDIAGONAL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	77;"	d
ELEM_SIGN_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	11;"	d
ELEM_SIGN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	322;"	d
ELEM_SKELETON_HPP	src/madness/external/elemental/include/elemental/lapack-like/factor/Skeleton.hpp	11;"	d
ELEM_SKELETON_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	244;"	d
ELEM_SKEWHERMITIANEIG_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/SkewHermitianEig.hpp	11;"	d
ELEM_SKEWHERMITIANEIG_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	186;"	d
ELEM_SOFTTHRESHOLD_HPP	src/madness/external/elemental/include/elemental/convex/SoftThreshold.hpp	11;"	d
ELEM_SOFTTHRESHOLD_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	569;"	d
ELEM_SOLVE_DECL_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/decl.hpp	11;"	d
ELEM_SOLVE_DECL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	422;"	d
ELEM_SOLVE_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve.hpp	11;"	d
ELEM_SOLVE_IMPL_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/impl.hpp	11;"	d
ELEM_SOLVE_IMPL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	423;"	d
ELEM_SOLVE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	421;"	d
ELEM_SORT_HPP	src/madness/external/elemental/include/elemental/lapack-like/util/Sort.hpp	11;"	d
ELEM_SORT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	466;"	d
ELEM_SPARSEINVCOV_HPP	src/madness/external/elemental/include/elemental/convex/SparseInvCov.hpp	11;"	d
ELEM_SPARSEINVCOV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	583;"	d
ELEM_SPYWIDGET_DECL_HPP	src/madness/external/elemental/include/elemental/io/SpyWidget/decl.hpp	11;"	d
ELEM_SPYWIDGET_IMPL_HPP	src/madness/external/elemental/include/elemental/io/SpyWidget/impl.hpp	11;"	d
ELEM_SPYWINDOW_DECL_HPP	src/madness/external/elemental/include/elemental/io/SpyWindow/decl.hpp	11;"	d
ELEM_SPY_HPP	src/madness/external/elemental/include/elemental/io/Spy.hpp	11;"	d
ELEM_SPY_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	554;"	d
ELEM_SQUAREROOT_HPP	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	11;"	d
ELEM_SQUAREROOT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	324;"	d
ELEM_SVD_CHAN_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Chan.hpp	11;"	d
ELEM_SVD_GOLUBREINSCH_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/GolubReinsch.hpp	11;"	d
ELEM_SVD_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD.hpp	11;"	d
ELEM_SVD_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	188;"	d
ELEM_SVD_THRESHOLDED_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	11;"	d
ELEM_SVD_UTIL_HPP	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Util.hpp	11;"	d
ELEM_SVT_CROSS_HPP	src/madness/external/elemental/include/elemental/convex/SVT/Cross.hpp	11;"	d
ELEM_SVT_CROSS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	573;"	d
ELEM_SVT_HPP	src/madness/external/elemental/include/elemental/convex/SVT.hpp	11;"	d
ELEM_SVT_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	570;"	d
ELEM_SVT_NORMAL_HPP	src/madness/external/elemental/include/elemental/convex/SVT/Normal.hpp	11;"	d
ELEM_SVT_NORMAL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	574;"	d
ELEM_SVT_PIVOTEDQR_HPP	src/madness/external/elemental/include/elemental/convex/SVT/PivotedQR.hpp	11;"	d
ELEM_SVT_PIVOTEDQR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	575;"	d
ELEM_SVT_TSQR_HPP	src/madness/external/elemental/include/elemental/convex/SVT/TSQR.hpp	11;"	d
ELEM_SVT_TSQR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	576;"	d
ELEM_SWAP_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	79;"	d
ELEM_SYLVESTER_HPP	src/madness/external/elemental/include/elemental/control/Sylvester.hpp	11;"	d
ELEM_SYMMETRIC2X2INV_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Inv.hpp	11;"	d
ELEM_SYMMETRIC2X2INV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	81;"	d
ELEM_SYMMETRIC2X2SCALE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Scale.hpp	11;"	d
ELEM_SYMMETRIC2X2SCALE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	83;"	d
ELEM_SYMMETRIC2X2SOLVE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Solve.hpp	11;"	d
ELEM_SYMMETRIC2X2SOLVE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	85;"	d
ELEM_SYMMETRICINVERSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	334;"	d
ELEM_SYMMETRICSOLVE_HPP	src/madness/external/elemental/include/elemental/lapack-like/solve/SymmetricSolve.hpp	11;"	d
ELEM_SYMMETRICSOLVE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	432;"	d
ELEM_SYMM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Symm.hpp	11;"	d
ELEM_SYMM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	140;"	d
ELEM_SYMM_LL_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LL.hpp	11;"	d
ELEM_SYMM_LU_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LU.hpp	11;"	d
ELEM_SYMM_RL_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RL.hpp	11;"	d
ELEM_SYMM_RU_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RU.hpp	11;"	d
ELEM_SYMV_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Symv.hpp	11;"	d
ELEM_SYMV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	112;"	d
ELEM_SYMV_L_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/L.hpp	11;"	d
ELEM_SYMV_U_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/U.hpp	11;"	d
ELEM_SYR2K_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k.hpp	11;"	d
ELEM_SYR2K_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	141;"	d
ELEM_SYR2K_LN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/LN.hpp	11;"	d
ELEM_SYR2K_LT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/LT.hpp	11;"	d
ELEM_SYR2K_UN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/UN.hpp	11;"	d
ELEM_SYR2K_UT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/UT.hpp	11;"	d
ELEM_SYR2_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Syr2.hpp	11;"	d
ELEM_SYR2_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	114;"	d
ELEM_SYRK_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk.hpp	11;"	d
ELEM_SYRK_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	142;"	d
ELEM_SYRK_LN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/LN.hpp	11;"	d
ELEM_SYRK_LT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/LT.hpp	11;"	d
ELEM_SYRK_UN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/UN.hpp	11;"	d
ELEM_SYRK_UT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/UT.hpp	11;"	d
ELEM_SYR_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Syr.hpp	11;"	d
ELEM_SYR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	116;"	d
ELEM_TIMER_DECL_HPP	src/madness/external/elemental/include/elemental/core/Timer/decl.hpp	11;"	d
ELEM_TIMER_IMPL_HPP	src/madness/external/elemental/include/elemental/core/Timer/impl.hpp	11;"	d
ELEM_TOEPLITZ_HPP	src/madness/external/elemental/include/elemental/matrices/Toeplitz.hpp	11;"	d
ELEM_TOEPLITZ_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	517;"	d
ELEM_TRACE_HPP	src/madness/external/elemental/include/elemental/lapack-like/props/Trace.hpp	11;"	d
ELEM_TRACE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	378;"	d
ELEM_TRANSPOSE_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Transpose.hpp	11;"	d
ELEM_TRANSPOSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	87;"	d
ELEM_TRDTRMM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm.hpp	11;"	d
ELEM_TRDTRMM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	143;"	d
ELEM_TRDTRMM_LVAR1_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/LVar1.hpp	11;"	d
ELEM_TRDTRMM_UNBLOCKED_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/Unblocked.hpp	11;"	d
ELEM_TRDTRMM_UVAR1_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/UVar1.hpp	11;"	d
ELEM_TREFETHEN_HPP	src/madness/external/elemental/include/elemental/matrices/Trefethen.hpp	11;"	d
ELEM_TREFETHEN_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	518;"	d
ELEM_TRIANGLE_HPP	src/madness/external/elemental/include/elemental/matrices/Triangle.hpp	11;"	d
ELEM_TRIANGLE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	519;"	d
ELEM_TRIANGULARINVERSE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	328;"	d
ELEM_TRIW_HPP	src/madness/external/elemental/include/elemental/matrices/TriW.hpp	11;"	d
ELEM_TRIW_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	520;"	d
ELEM_TRMM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm.hpp	11;"	d
ELEM_TRMM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	144;"	d
ELEM_TRMM_LLN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLN.hpp	14;"	d
ELEM_TRMM_LLT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLT.hpp	14;"	d
ELEM_TRMM_LUN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUN.hpp	14;"	d
ELEM_TRMM_LUT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUT.hpp	14;"	d
ELEM_TRMM_RLN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLN.hpp	14;"	d
ELEM_TRMM_RLT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLT.hpp	14;"	d
ELEM_TRMM_RUN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUN.hpp	14;"	d
ELEM_TRMM_RUT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUT.hpp	14;"	d
ELEM_TRMV_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Trmv.hpp	11;"	d
ELEM_TRMV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	118;"	d
ELEM_TRR2K_LOCAL_HPP	src/madness/external/elemental/src/blas-like/Trr2k/Local.hpp	10;"	d
ELEM_TRR2K_NNNN_HPP	src/madness/external/elemental/src/blas-like/Trr2k/NNNN.hpp	10;"	d
ELEM_TRR2K_NNNT_HPP	src/madness/external/elemental/src/blas-like/Trr2k/NNNT.hpp	10;"	d
ELEM_TRR2K_NNTN_HPP	src/madness/external/elemental/src/blas-like/Trr2k/NNTN.hpp	10;"	d
ELEM_TRR2K_NNTT_HPP	src/madness/external/elemental/src/blas-like/Trr2k/NNTT.hpp	10;"	d
ELEM_TRR2K_NTNN_HPP	src/madness/external/elemental/src/blas-like/Trr2k/NTNN.hpp	10;"	d
ELEM_TRR2K_NTNT_HPP	src/madness/external/elemental/src/blas-like/Trr2k/NTNT.hpp	10;"	d
ELEM_TRR2K_NTTN_HPP	src/madness/external/elemental/src/blas-like/Trr2k/NTTN.hpp	10;"	d
ELEM_TRR2K_NTTT_HPP	src/madness/external/elemental/src/blas-like/Trr2k/NTTT.hpp	10;"	d
ELEM_TRR2K_TNNN_HPP	src/madness/external/elemental/src/blas-like/Trr2k/TNNN.hpp	10;"	d
ELEM_TRR2K_TNNT_HPP	src/madness/external/elemental/src/blas-like/Trr2k/TNNT.hpp	10;"	d
ELEM_TRR2K_TNTN_HPP	src/madness/external/elemental/src/blas-like/Trr2k/TNTN.hpp	10;"	d
ELEM_TRR2K_TNTT_HPP	src/madness/external/elemental/src/blas-like/Trr2k/TNTT.hpp	10;"	d
ELEM_TRR2K_TTNN_HPP	src/madness/external/elemental/src/blas-like/Trr2k/TTNN.hpp	10;"	d
ELEM_TRR2K_TTNT_HPP	src/madness/external/elemental/src/blas-like/Trr2k/TTNT.hpp	10;"	d
ELEM_TRR2K_TTTN_HPP	src/madness/external/elemental/src/blas-like/Trr2k/TTTN.hpp	10;"	d
ELEM_TRR2K_TTTT_HPP	src/madness/external/elemental/src/blas-like/Trr2k/TTTT.hpp	10;"	d
ELEM_TRR2_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Trr2.hpp	11;"	d
ELEM_TRR2_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	120;"	d
ELEM_TRRK_LOCAL_HPP	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	10;"	d
ELEM_TRRK_NN_HPP	src/madness/external/elemental/src/blas-like/Trrk/NN.hpp	10;"	d
ELEM_TRRK_NT_HPP	src/madness/external/elemental/src/blas-like/Trrk/NT.hpp	10;"	d
ELEM_TRRK_TN_HPP	src/madness/external/elemental/src/blas-like/Trrk/TN.hpp	10;"	d
ELEM_TRRK_TT_HPP	src/madness/external/elemental/src/blas-like/Trrk/TT.hpp	10;"	d
ELEM_TRR_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Trr.hpp	11;"	d
ELEM_TRR_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	122;"	d
ELEM_TRSM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm.hpp	11;"	d
ELEM_TRSM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	145;"	d
ELEM_TRSM_LLN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLN.hpp	11;"	d
ELEM_TRSM_LLT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLT.hpp	11;"	d
ELEM_TRSM_LUN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUN.hpp	11;"	d
ELEM_TRSM_LUT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUT.hpp	11;"	d
ELEM_TRSM_RLN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RLN.hpp	14;"	d
ELEM_TRSM_RLT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RLT.hpp	11;"	d
ELEM_TRSM_RUN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RUN.hpp	11;"	d
ELEM_TRSM_RUT_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RUT.hpp	11;"	d
ELEM_TRSTRM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trstrm.hpp	11;"	d
ELEM_TRSTRM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	146;"	d
ELEM_TRSTRM_LLN_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trstrm/LLN.hpp	11;"	d
ELEM_TRSV_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv.hpp	11;"	d
ELEM_TRSV_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	124;"	d
ELEM_TRSV_LN_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/LN.hpp	11;"	d
ELEM_TRSV_LT_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/LT.hpp	11;"	d
ELEM_TRSV_UN_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/UN.hpp	11;"	d
ELEM_TRSV_UT_HPP	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/UT.hpp	11;"	d
ELEM_TRTRMM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm.hpp	11;"	d
ELEM_TRTRMM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	147;"	d
ELEM_TRTRMM_LVAR1_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/LVar1.hpp	11;"	d
ELEM_TRTRMM_UNBLOCKED_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/Unblocked.hpp	11;"	d
ELEM_TRTRMM_UVAR1_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/UVar1.hpp	11;"	d
ELEM_TWOCONDITION_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	390;"	d
ELEM_TWONORMESTIMATE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	412;"	d
ELEM_TWONORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	414;"	d
ELEM_TWOSIDEDTRMM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm.hpp	11;"	d
ELEM_TWOSIDEDTRMM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	148;"	d
ELEM_TWOSIDEDTRMM_LVAR1_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar1.hpp	11;"	d
ELEM_TWOSIDEDTRMM_LVAR2_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar2.hpp	11;"	d
ELEM_TWOSIDEDTRMM_LVAR4_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar4.hpp	14;"	d
ELEM_TWOSIDEDTRMM_LVAR5_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar5.hpp	11;"	d
ELEM_TWOSIDEDTRMM_UVAR1_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar1.hpp	11;"	d
ELEM_TWOSIDEDTRMM_UVAR2_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar2.hpp	11;"	d
ELEM_TWOSIDEDTRMM_UVAR4_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar4.hpp	11;"	d
ELEM_TWOSIDEDTRMM_UVAR5_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar5.hpp	11;"	d
ELEM_TWOSIDEDTRSM_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm.hpp	11;"	d
ELEM_TWOSIDEDTRSM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	149;"	d
ELEM_TWOSIDEDTRSM_LVAR1_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar1.hpp	11;"	d
ELEM_TWOSIDEDTRSM_LVAR2_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar2.hpp	11;"	d
ELEM_TWOSIDEDTRSM_LVAR3_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar3.hpp	11;"	d
ELEM_TWOSIDEDTRSM_LVAR4_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar4.hpp	11;"	d
ELEM_TWOSIDEDTRSM_LVAR5_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar5.hpp	11;"	d
ELEM_TWOSIDEDTRSM_UVAR1_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar1.hpp	11;"	d
ELEM_TWOSIDEDTRSM_UVAR2_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar2.hpp	11;"	d
ELEM_TWOSIDEDTRSM_UVAR3_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar3.hpp	11;"	d
ELEM_TWOSIDEDTRSM_UVAR4_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar4.hpp	11;"	d
ELEM_TWOSIDEDTRSM_UVAR5_HPP	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar5.hpp	11;"	d
ELEM_TYPES_DECL_HPP	src/madness/external/elemental/include/elemental/core/types/decl.hpp	11;"	d
ELEM_TYPES_IMPL_HPP	src/madness/external/elemental/include/elemental/core/types/impl.hpp	11;"	d
ELEM_UNIFORMHELMHOLTZGREENS_HPP	src/madness/external/elemental/include/elemental/matrices/UniformHelmholtzGreens.hpp	11;"	d
ELEM_UNIFORMHELMHOLTZGREENS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	540;"	d
ELEM_UNIFORM_HPP	src/madness/external/elemental/include/elemental/matrices/Uniform.hpp	11;"	d
ELEM_UNIFORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	538;"	d
ELEM_UPDATEDIAGONAL_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/UpdateDiagonal.hpp	11;"	d
ELEM_UPDATEDIAGONAL_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	89;"	d
ELEM_UTIL_HPP	src/madness/external/elemental/include/elemental/lapack-like/util.hpp	11;"	d
ELEM_VIEWS_PARTITION_HPP	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	11;"	d
ELEM_VIEWS_REPARTITION_HPP	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	11;"	d
ELEM_VIEWS_SLIDEPARTITION_HPP	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	11;"	d
ELEM_VIEWS_VIEW_HPP	src/madness/external/elemental/include/elemental/core/views/View.hpp	11;"	d
ELEM_WALSH_HPP	src/madness/external/elemental/include/elemental/matrices/Walsh.hpp	11;"	d
ELEM_WALSH_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	521;"	d
ELEM_WHALE_HPP	src/madness/external/elemental/include/elemental/matrices/Whale.hpp	11;"	d
ELEM_WHALE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	522;"	d
ELEM_WIGNER_HPP	src/madness/external/elemental/include/elemental/matrices/Wigner.hpp	11;"	d
ELEM_WIGNER_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	542;"	d
ELEM_WILKINSON_HPP	src/madness/external/elemental/include/elemental/matrices/Wilkinson.hpp	11;"	d
ELEM_WILKINSON_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	523;"	d
ELEM_WRITE_ASCIIMATLAB_HPP	src/madness/external/elemental/include/elemental/io/Write/AsciiMatlab.hpp	11;"	d
ELEM_WRITE_ASCII_HPP	src/madness/external/elemental/include/elemental/io/Write/Ascii.hpp	11;"	d
ELEM_WRITE_BINARYFLAT_HPP	src/madness/external/elemental/include/elemental/io/Write/BinaryFlat.hpp	11;"	d
ELEM_WRITE_BINARY_HPP	src/madness/external/elemental/include/elemental/io/Write/Binary.hpp	11;"	d
ELEM_WRITE_HPP	src/madness/external/elemental/include/elemental/io/Write.hpp	11;"	d
ELEM_WRITE_IMAGE_HPP	src/madness/external/elemental/include/elemental/io/Write/Image.hpp	11;"	d
ELEM_WRITE_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	555;"	d
ELEM_WRITE_MATRIXMARKET_HPP	src/madness/external/elemental/include/elemental/io/Write/MatrixMarket.hpp	11;"	d
ELEM_ZERONORM_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	416;"	d
ELEM_ZEROS_HPP	src/madness/external/elemental/include/elemental/matrices/Zeros.hpp	11;"	d
ELEM_ZEROS_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	524;"	d
ELEM_ZERO_HPP	src/madness/external/elemental/include/elemental/blas-like/level1/Zero.hpp	11;"	d
ELEM_ZERO_INC	src/madness/external/elemental/include/elemental/include-paths.hpp	91;"	d
EMPTY_GUESSTYPE	src/apps/chem/PNOParameters.h	/^enum GuessType{PARTIAL_WAVE_GUESSTYPE,FROM_FILE_GUESSTYPE,PREDEFINED_GUESSTYPE,SCF_GUESSTYPE,EXOP_GUESSTYPE,EMPTY_GUESSTYPE,PSI4_GUESSTYPE,UNKNOWN_GUESSTYPE};$/;"	e	enum:madness::GuessType
ENDC	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^    ENDC = '\\033[0m'$/;"	v	class:COLORS
ENDC	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^    ENDC = '\\033[0m'$/;"	v	class:COLORS
ENDL	src/madness/world/print.h	50;"	d
ENDL	src/madness/world/print.h	54;"	d
END_TIMER	src/apps/chem/SCF.cc	/^static void END_TIMER(World &world, const char *msg)$/;"	f	namespace:madness
END_TIMER	src/apps/chem/mp2.h	/^        void END_TIMER(World& world, const char* msg) const {$/;"	f	class:madness::MP2
END_TIMER	src/apps/chem/nemo.h	/^	void END_TIMER(World& world, const char* msg) const {$/;"	f	class:madness::Nemo
END_TIMER	src/apps/chem/nemo.h	/^	void END_TIMER(World& world, const std::string msg) const {$/;"	f	class:madness::Nemo
END_TIMER	src/apps/hf/solver.h	/^    void END_TIMER(World& world, const char* msg) {$/;"	f	class:madness::Solver
END_TIMER	src/apps/ii/eigen_solver.cc	/^void END_TIMER(World& world, const char* msg) {$/;"	f
END_TIMER	src/apps/moldft/mcpfit.cc	/^void END_TIMER(World& world, const char* msg) {$/;"	f
END_TIMER	src/apps/moldft/moldft.cc	/^    static void END_TIMER(World& world, const char* msg) {$/;"	f	file:
END_TIMER	src/apps/moldft/testperiodic.cc	/^static void END_TIMER(World& world, const char* msg) {$/;"	f	file:
END_TIMER	src/apps/polar/mcpfit.cc	/^void END_TIMER(World& world, const char* msg) {$/;"	f
END_TIMER	src/apps/polar/moldft.cc	/^void END_TIMER(World &world, const char *msg)$/;"	f
END_TIMER	src/madness/mra/testgaxpyext.cc	10;"	d	file:
END_TIMER	src/madness/mra/testinnerext.cc	12;"	d	file:
END_TIMER	src/madness/mra/testsuite.cc	181;"	d	file:
END_TIMER	src/madness/mra/testvmra.cc	12;"	d	file:
END_TIMER	src/madness/tensor/test_elemental.cc	46;"	d	file:
ENTRY	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	2659;"	d	file:
ENTRY	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	2656;"	d	file:
ENTRYWISE_ONE_NORM	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    ENTRYWISE_ONE_NORM, \/\/ One-norm of vectorized matrix$/;"	e	enum:elem::NormTypeNS::NormType
EOM_TAG	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        EOM_TAG         =2, $/;"	m	class:elem::AxpyInterface
EPrec	src/madness/external/muParser/muParserDef.h	/^  enum EPrec$/;"	g	namespace:mu
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/doc/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/apps/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/apps/adrian/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/apps/bryan/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/apps/chem/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/apps/cis/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/apps/learnResponse/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/apps/moldft/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/apps/pno/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/apps/tdse/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/examples/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/madness/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/madness/external/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/madness/external/gtest/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/madness/external/muParser/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/madness/external/tinyxml/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/madness/misc/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/madness/mra/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/madness/tensor/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/madness/world/Makefile	/^EQUALS = =$/;"	m
ERRORS_ARE_FATAL	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const ErrorHandler ERRORS_ARE_FATAL = MPI_ERRORS_ARE_FATAL;$/;"	m	namespace:elem::mpi
ERRORS_RETURN	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const ErrorHandler ERRORS_RETURN = MPI_ERRORS_RETURN;$/;"	m	namespace:elem::mpi
ESP	src/examples/gygi_soltion.cc	/^  realfunc ESP(World& world)const {$/;"	f	class:GygiPot
ES_Interface	src/apps/adrian/ESInterface.h	/^  ES_Interface(ES_Interface &&es)$/;"	f	class:slymer::ES_Interface
ES_Interface	src/apps/adrian/ESInterface.h	/^  ES_Interface(const ES_Interface &es)$/;"	f	class:slymer::ES_Interface
ES_Interface	src/apps/adrian/ESInterface.h	/^  ES_Interface(std::ostream &err_)$/;"	f	class:slymer::ES_Interface
ES_Interface	src/apps/adrian/ESInterface.h	/^class ES_Interface {$/;"	c	namespace:slymer
ES_Interface	src/apps/bryan/ESInterface.h	/^  ES_Interface(ES_Interface &&es)$/;"	f	class:slymer::ES_Interface
ES_Interface	src/apps/bryan/ESInterface.h	/^  ES_Interface(const ES_Interface &es)$/;"	f	class:slymer::ES_Interface
ES_Interface	src/apps/bryan/ESInterface.h	/^  ES_Interface(std::ostream &err_)$/;"	f	class:slymer::ES_Interface
ES_Interface	src/apps/bryan/ESInterface.h	/^class ES_Interface {$/;"	c	namespace:slymer
ESynCodes	src/madness/external/muParser/muParserTokenReader.h	/^      enum ESynCodes$/;"	g	class:mu::ParserTokenReader
ETokFlags	src/madness/external/muParser/muParserToken.h	/^      enum ETokFlags$/;"	g	class:mu::ParserToken
ETypeCode	src/madness/external/muParser/muParserDef.h	/^  enum ETypeCode$/;"	g	namespace:mu
EXACT	src/apps/interior_bc/test_problems.h	/^enum FunctorOutput { SURFACE, DIRICHLET_RHS, EXACT, DOMAIN_MASK };$/;"	e	enum:FunctorOutput
EXCITED_STATE	src/apps/chem/CCStructures.h	/^  enum CCState {CCSTATE_UNDEFINED,GROUND_STATE,EXCITED_STATE};$/;"	e	enum:madness::CCState
EXECUTE_TEST	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
EXOP_GUESSTYPE	src/apps/chem/PNOParameters.h	/^enum GuessType{PARTIAL_WAVE_GUESSTYPE,FROM_FILE_GUESSTYPE,PREDEFINED_GUESSTYPE,SCF_GUESSTYPE,EXOP_GUESSTYPE,EMPTY_GUESSTYPE,PSI4_GUESSTYPE,UNKNOWN_GUESSTYPE};$/;"	e	enum:madness::GuessType
EXPECT_ANY_THROW	src/madness/external/gtest/include/gtest/gtest.h	1902;"	d
EXPECT_DEATH	src/madness/external/gtest/include/gtest/gtest-death-test.h	184;"	d
EXPECT_DEATH_IF_SUPPORTED	src/madness/external/gtest/include/gtest/gtest-death-test.h	281;"	d
EXPECT_DEATH_IF_SUPPORTED	src/madness/external/gtest/include/gtest/gtest-death-test.h	286;"	d
EXPECT_DEBUG_DEATH	src/madness/external/gtest/include/gtest/gtest-death-test.h	258;"	d
EXPECT_DEBUG_DEATH	src/madness/external/gtest/include/gtest/gtest-death-test.h	266;"	d
EXPECT_DOUBLE_EQ	src/madness/external/gtest/include/gtest/gtest.h	2086;"	d
EXPECT_EQ	src/madness/external/gtest/include/gtest/gtest.h	1977;"	d
EXPECT_EXIT	src/madness/external/gtest/include/gtest/gtest-death-test.h	173;"	d
EXPECT_FALSE	src/madness/external/gtest/include/gtest/gtest.h	1917;"	d
EXPECT_FATAL_FAILURE	src/madness/external/gtest/include/gtest/gtest-spi.h	138;"	d
EXPECT_FATAL_FAILURE_ON_ALL_THREADS	src/madness/external/gtest/include/gtest/gtest-spi.h	155;"	d
EXPECT_FLOAT_EQ	src/madness/external/gtest/include/gtest/gtest.h	2082;"	d
EXPECT_GE	src/madness/external/gtest/include/gtest/gtest.h	1987;"	d
EXPECT_GT	src/madness/external/gtest/include/gtest/gtest.h	1989;"	d
EXPECT_HRESULT_FAILED	src/madness/external/gtest/include/gtest/gtest.h	2136;"	d
EXPECT_HRESULT_SUCCEEDED	src/madness/external/gtest/include/gtest/gtest.h	2130;"	d
EXPECT_LE	src/madness/external/gtest/include/gtest/gtest.h	1983;"	d
EXPECT_LT	src/madness/external/gtest/include/gtest/gtest.h	1985;"	d
EXPECT_NE	src/madness/external/gtest/include/gtest/gtest.h	1981;"	d
EXPECT_NEAR	src/madness/external/gtest/include/gtest/gtest.h	2098;"	d
EXPECT_NONFATAL_FAILURE	src/madness/external/gtest/include/gtest/gtest-spi.h	204;"	d
EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS	src/madness/external/gtest/include/gtest/gtest-spi.h	218;"	d
EXPECT_NO_FATAL_FAILURE	src/madness/external/gtest/include/gtest/gtest.h	2156;"	d
EXPECT_NO_THROW	src/madness/external/gtest/include/gtest/gtest.h	1900;"	d
EXPECT_PRED1	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	115;"	d
EXPECT_PRED2	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	163;"	d
EXPECT_PRED3	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	218;"	d
EXPECT_PRED4	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	280;"	d
EXPECT_PRED5	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	349;"	d
EXPECT_PRED_FORMAT1	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	113;"	d
EXPECT_PRED_FORMAT2	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	161;"	d
EXPECT_PRED_FORMAT3	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	216;"	d
EXPECT_PRED_FORMAT4	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	278;"	d
EXPECT_PRED_FORMAT5	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	347;"	d
EXPECT_STRCASEEQ	src/madness/external/gtest/include/gtest/gtest.h	2054;"	d
EXPECT_STRCASENE	src/madness/external/gtest/include/gtest/gtest.h	2056;"	d
EXPECT_STREQ	src/madness/external/gtest/include/gtest/gtest.h	2050;"	d
EXPECT_STRNE	src/madness/external/gtest/include/gtest/gtest.h	2052;"	d
EXPECT_THROW	src/madness/external/gtest/include/gtest/gtest.h	1898;"	d
EXPECT_TRUE	src/madness/external/gtest/include/gtest/gtest.h	1914;"	d
EXTRA_H	src/apps/nick/extra.h	2;"	d
Egorov	src/madness/external/elemental/include/elemental/matrices/Egorov.hpp	/^Egorov( BlockDistMatrix<Complex<Real>,U,V>& A, const RealFunctor& phase, Int n )$/;"	f	namespace:elem
Egorov	src/madness/external/elemental/include/elemental/matrices/Egorov.hpp	/^Egorov( DistMatrix<Complex<Real>,U,V>& A, const RealFunctor& phase, Int n )$/;"	f	namespace:elem
Egorov	src/madness/external/elemental/include/elemental/matrices/Egorov.hpp	/^Egorov( Matrix<Complex<Real>>& A, const RealFunctor& phase, Int n )$/;"	f	namespace:elem
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, dcomplex* A, int ldA, dcomplex* w )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, dcomplex* A, int ldA, dcomplex* w, dcomplex* X, int ldX )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, double* A, int ldA, dcomplex* w )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, double* A, int ldA, dcomplex* w, dcomplex* X, int ldX )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, double* A, int ldA, dcomplex* w, double* XPacked, int ldX )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, float* A, int ldA, scomplex* w )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, float* A, int ldA, scomplex* w, float* XPacked, int ldX )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, float* A, int ldA, scomplex* w, scomplex* X, int ldX )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, scomplex* A, int ldA, scomplex* w )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Eig( int n, scomplex* A, int ldA, scomplex* w, scomplex* X, int ldX )$/;"	f	namespace:elem::lapack
Eig	src/madness/external/elemental/src/core/imports/pmrrr.cpp	/^Info Eig$/;"	f	namespace:elem::herm_tridiag_eig
Eig	src/madness/external/elemental/src/core/imports/pmrrr.cpp	/^Info Eig( int n, double* d, double* e, double* w, mpi::Comm comm )$/;"	f	namespace:elem::herm_tridiag_eig
EigEstimate	src/madness/external/elemental/src/core/imports/pmrrr.cpp	/^Estimate EigEstimate$/;"	f	namespace:elem::herm_tridiag_eig
EigSolver	src/apps/hf/eigsolver.cc	/^  EigSolver<T,NDIM>::EigSolver(World& world, std::vector<funcT> phis,$/;"	f	class:madness::EigSolver
EigSolver	src/apps/hf/eigsolver.h	/^class EigSolver$/;"	c	namespace:madness
EigSolverOp	src/apps/hf/eigsolver.h	/^  EigSolverOp(World& world, double coeff, double thresh)$/;"	f	class:madness::EigSolverOp
EigSolverOp	src/apps/hf/eigsolver.h	/^class EigSolverOp$/;"	c	namespace:madness
ElectronCuspyBox_op	src/madness/mra/leafop.h	/^    ElectronCuspyBox_op() {}$/;"	f	struct:madness::ElectronCuspyBox_op
ElectronCuspyBox_op	src/madness/mra/leafop.h	/^  struct ElectronCuspyBox_op : public Specialbox_op<T, NDIM> {$/;"	s	namespace:madness
ElectronPair	src/apps/chem/mp2.h	/^    	ElectronPair()$/;"	f	class:madness::ElectronPair
ElectronPair	src/apps/chem/mp2.h	/^    	ElectronPair(const int i, const int j)$/;"	f	class:madness::ElectronPair
ElectronPair	src/apps/chem/mp2.h	/^    class ElectronPair : public archive::ParallelSerializableObject {$/;"	c	namespace:madness
ElectronPairIterator	src/apps/chem/PNOStructures.h	/^	ElectronPairIterator(const size_t& nocc, const size_t& freeze):$/;"	f	struct:madness::ElectronPairIterator
ElectronPairIterator	src/apps/chem/PNOStructures.h	/^struct ElectronPairIterator{$/;"	s	namespace:madness
ElectronRepulsionInterface	src/madness/mra/function_interface.h	/^		ElectronRepulsionInterface(double lo,double eps,$/;"	f	class:madness::ElectronRepulsionInterface
ElectronRepulsionInterface	src/madness/mra/function_interface.h	/^	class ElectronRepulsionInterface : public TwoElectronInterface<double,6> {$/;"	c	namespace:madness
ElectronicStructureParams	src/apps/hf/electronicstructureparams.h	/^  ElectronicStructureParams()$/;"	f	struct:madness::ElectronicStructureParams
ElectronicStructureParams	src/apps/hf/electronicstructureparams.h	/^struct ElectronicStructureParams$/;"	s	namespace:madness
ElemToMadDistCopy	src/madness/tensor/elem.h	/^            ElemToMadDistCopy(DistributedMatrix<T>& d) : d(d) {}$/;"	f	class:madness::detail::ElemToMadDistCopy
ElemToMadDistCopy	src/madness/tensor/elem.h	/^        class ElemToMadDistCopy {$/;"	c	namespace:madness::detail
Element	src/apps/moldft/moldx.py	/^class Element:$/;"	c
Element	src/apps/polar/moldx.py	/^class Element:$/;"	c
Element	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlElement* Element() const	{ return ToElement(); }$/;"	f	class:TiXmlHandle
ElementaryInterface	src/madness/mra/function_interface.h	/^		ElementaryInterface(T (*f)(const coordT&)) : f(f) {}$/;"	f	class:madness::ElementaryInterface
ElementaryInterface	src/madness/mra/function_interface.h	/^	class ElementaryInterface : public FunctionFunctorInterface<T,NDIM> {$/;"	c	namespace:madness
EmbeddedDirichlet	src/apps/interior_bc/test_problems.h	/^        EmbeddedDirichlet() {}$/;"	f	class:EmbeddedDirichlet
EmbeddedDirichlet	src/apps/interior_bc/test_problems.h	/^        EmbeddedDirichlet(double penalty_prefact, std::string penalty_name,$/;"	f	class:EmbeddedDirichlet
EmbeddedDirichlet	src/apps/interior_bc/test_problems.h	/^class EmbeddedDirichlet : public FunctionFunctorInterface<double, 3> {$/;"	c
Empty	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Empty()$/;"	f	class:elem::AbstractBlockDistMatrix
Empty	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Empty()$/;"	f	class:elem::AbstractDistMatrix
Empty	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Empty()$/;"	f	class:elem::Matrix
Empty	src/madness/external/elemental/src/core/Memory.cpp	/^void Memory<G>::Empty()$/;"	f	class:elem::Memory
EmptyData	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::EmptyData()$/;"	f	class:elem::AbstractBlockDistMatrix
EmptyData	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::EmptyData()$/;"	f	class:elem::AbstractDistMatrix
EmptyTestEventListener	src/madness/external/gtest/include/gtest/gtest.h	/^class EmptyTestEventListener : public TestEventListener {$/;"	c	namespace:testing
Empty_	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Empty_()$/;"	f	class:elem::Matrix
EnableBuiltInOprt	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::EnableBuiltInOprt(bool a_bIsOn)$/;"	f	class:mu::ParserBase
EnableByteCode	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::EnableByteCode(bool a_bIsOn)$/;"	f	class:mu::ParserBase
EnableIf	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
EnableOptimizer	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::EnableOptimizer(bool a_bIsOn)$/;"	f	class:mu::ParserBase
EncodeString	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase
Encoding	src/madness/external/tinyxml/tinyxml.h	/^	const char *Encoding() const		{ return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::RangeGenerator
End	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
EndsWithCaseInsensitive	src/madness/external/gtest/src/gtest.cc	/^bool String::EndsWithCaseInsensitive($/;"	f	class:testing::internal::String
Energies	src/apps/adrian/ESInterface.h	/^  constexpr Properties Energies = 1 << 2; \/\/\/< The MO energies.$/;"	m	namespace:slymer::Properties
Energies	src/apps/bryan/ESInterface.h	/^  constexpr Properties Energies = 1 << 2; \/\/\/< The MO energies.$/;"	m	namespace:slymer::Properties
EnergyType	src/apps/chem/PNOParameters.h	/^enum EnergyType{PROJECTED_ENERGYTYPE,HYLLERAAS_ENERGYTYPE,UNKNOWN_ENERGYTYPE};$/;"	g	namespace:madness
EnsureConformal	src/madness/external/elemental/src/blas-like/Trr2k/Local.hpp	/^void EnsureConformal$/;"	f	namespace:elem::trr2k
EnsureConformal	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void EnsureConformal$/;"	f	namespace:elem::trrk
EnsureConsistent	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^EnsureConsistent( T alpha, mpi::Comm comm, std::string name )$/;"	f	namespace:elem
EnsureSame	src/madness/external/elemental/src/blas-like/Trr2k/Local.hpp	/^void EnsureSame$/;"	f	namespace:elem::trr2k
EnsureSame	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void EnsureSame( const Grid& gA, const Grid& gB, const Grid& gC )$/;"	f	namespace:elem::trrk
Entity	src/madness/external/tinyxml/tinyxml.h	/^	struct Entity$/;"	s	class:TiXmlBase
EntrywiseMap	src/madness/external/elemental/include/elemental/blas-like/level1/EntrywiseMap.hpp	/^EntrywiseMap( BlockDistMatrix<T,U,V>& A, Function func )$/;"	f	namespace:elem
EntrywiseMap	src/madness/external/elemental/include/elemental/blas-like/level1/EntrywiseMap.hpp	/^EntrywiseMap( DistMatrix<T,U,V>& A, Function func )$/;"	f	namespace:elem
EntrywiseMap	src/madness/external/elemental/include/elemental/blas-like/level1/EntrywiseMap.hpp	/^EntrywiseMap( Matrix<T>& A, Function func )$/;"	f	namespace:elem
EntrywiseNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Entrywise.hpp	/^EntrywiseNorm( const DistMatrix<F,U,V>& A, Base<F> p )$/;"	f	namespace:elem
EntrywiseNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Entrywise.hpp	/^EntrywiseNorm( const Matrix<F>& A, Base<F> p )$/;"	f	namespace:elem
EntrywiseOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/EntrywiseOne.hpp	/^EntrywiseOneNorm( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
EntrywiseOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/EntrywiseOne.hpp	/^EntrywiseOneNorm( const Matrix<F>& A )$/;"	f	namespace:elem
Environment	src/madness/external/gtest/include/gtest/gtest.h	/^class Environment {$/;"	c	namespace:testing
Environment variables	doc/Latex/apps/moldft/manual.tex	/^\\subsection{Environment variables}$/;"	b
EqFailure	src/madness/external/gtest/src/gtest.cc	/^AssertionResult EqFailure(const char* expected_expression,$/;"	f	namespace:testing::internal
EqHelper	src/madness/external/gtest/include/gtest/gtest.h	/^class EqHelper {$/;"	c	namespace:testing::internal
EqHelper	src/madness/external/gtest/include/gtest/gtest.h	/^class EqHelper<true> {$/;"	c	namespace:testing::internal
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Equals	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Error	src/madness/external/muParser/muParserBase.cpp	/^  void  ParserBase::Error(EErrorCodes a_iErrc, int a_iPos, const string_type &a_sTok) const$/;"	f	class:mu::ParserBase
Error	src/madness/external/muParser/muParserTokenReader.cpp	/^  void  ParserTokenReader::Error( EErrorCodes a_iErrc,$/;"	f	class:mu::ParserTokenReader
Error	src/madness/external/tinyxml/tinyxml.h	/^	bool Error() const						{ return error; }$/;"	f	class:TiXmlDocument
ErrorCol	src/madness/external/tinyxml/tinyxml.h	/^	int ErrorCol() const	{ return errorLocation.col+1; }	\/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:TiXmlDocument
ErrorDesc	src/madness/external/tinyxml/tinyxml.h	/^	const char * ErrorDesc() const	{ return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument
ErrorHandler	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^typedef MPI_Errhandler ErrorHandler;$/;"	t	namespace:elem::mpi
ErrorHandlerSet	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ErrorHandlerSet( Comm comm, ErrorHandler errorHandler )$/;"	f	namespace:elem::mpi
ErrorId	src/madness/external/tinyxml/tinyxml.h	/^	int ErrorId()	const				{ return errorId; }$/;"	f	class:TiXmlDocument
ErrorRow	src/madness/external/tinyxml/tinyxml.h	/^	int ErrorRow() const	{ return errorLocation.row+1; }$/;"	f	class:TiXmlDocument
EscapeXml	src/madness/external/gtest/src/gtest.cc	/^std::string XmlUnitTestResultPrinter::EscapeXml($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
EscapeXmlAttribute	src/madness/external/gtest/src/gtest.cc	/^  static std::string EscapeXmlAttribute(const std::string& str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
EscapeXmlText	src/madness/external/gtest/src/gtest.cc	/^  static std::string EscapeXmlText(const char* str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
Estimate	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	/^struct Estimate {$/;"	s	namespace:elem::herm_tridiag_eig
Eval	src/madness/external/muParser/muParserBase.h	/^	  inline value_type Eval() const$/;"	f	class:mu::ParserBase
Evaluation	doc/Latex/implementation.tex	/^\\subsection{Evaluation}$/;"	b
EventForwardingEnabled	src/madness/external/gtest/src/gtest.cc	/^bool TestEventListeners::EventForwardingEnabled() const {$/;"	f	class:testing::TestEventListeners
EwaldNuclearPotentialFunctor	src/apps/hf/ewald.cc	/^  EwaldNuclearPotentialFunctor(World& world, MolecularEntity* mentity, double alpha)$/;"	f	class:EwaldNuclearPotentialFunctor
EwaldNuclearPotentialFunctor	src/apps/hf/ewald.cc	/^class EwaldNuclearPotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
ExactSol	src/apps/interior_bc/test_problems.h	/^        double ExactSol(const Vector<double, 3> &x) const {$/;"	f	class:ConstantSphere
ExactSol	src/apps/interior_bc/test_problems.h	/^        double ExactSol(const Vector<double, 3> &x) const {$/;"	f	class:CosineSphere
ExactSol	src/apps/interior_bc/test_problems.h	/^        double ExactSol(const Vector<double, 3> &x) const {$/;"	f	class:InhomoConstantSphere
ExactSol	src/apps/interior_bc/test_problems.h	/^        double ExactSol(const Vector<double, 3> &x) const {$/;"	f	class:Y20Sphere
Example Input	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\subsection{Example Input}$/;"	b
Example input	doc/Latex/apps/nemo_mp2/manual.tex	/^\\section{Example input}$/;"	s
Exception	src/madness/world/safempi.h	/^        Exception(const Exception& other) throw() {$/;"	f	class:SafeMPI::Exception
Exception	src/madness/world/safempi.h	/^        Exception(const int mpi_error) throw() {$/;"	f	class:SafeMPI::Exception
Exception	src/madness/world/safempi.h	/^    class Exception : public std::exception {$/;"	c	namespace:SafeMPI
Exchange	src/apps/chem/SCFOperators.cc	/^Exchange<T, NDIM>::Exchange(World& world, const Nemo* nemo,$/;"	f	class:madness::Exchange
Exchange	src/apps/chem/SCFOperators.cc	/^Exchange<T, NDIM>::Exchange(World& world, const SCF* calc, const int ispin)$/;"	f	class:madness::Exchange
Exchange	src/apps/chem/SCFOperators.h	/^    Exchange(World& world) : world(world), small_memory_(true), same_(false) {};$/;"	f	class:madness::Exchange
Exchange	src/apps/chem/SCFOperators.h	/^class Exchange {$/;"	c	namespace:madness
ExcitingApp	src/apps/exciting/wannier.cc	/^  ExcitingApp(World& world) : _world(world)$/;"	f	class:ExcitingApp
ExcitingApp	src/apps/exciting/wannier.cc	/^class ExcitingApp$/;"	c	file:
Excl	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Excl( Group group, int n, const int* ranks, Group& subGroup )$/;"	f	namespace:elem::mpi
ExecDeathTest	src/madness/external/gtest/src/gtest-death-test.cc	/^  ExecDeathTest(const char* a_statement, const RE* a_regex,$/;"	f	class:testing::internal::ExecDeathTest
ExecDeathTest	src/madness/external/gtest/src/gtest-death-test.cc	/^class ExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
ExecDeathTestArgs	src/madness/external/gtest/src/gtest-death-test.cc	/^struct ExecDeathTestArgs {$/;"	s	namespace:testing::internal	file:
ExecDeathTestChildMain	src/madness/external/gtest/src/gtest-death-test.cc	/^static int ExecDeathTestChildMain(void* child_arg) {$/;"	f	namespace:testing::internal
ExecDeathTestSpawnChild	src/madness/external/gtest/src/gtest-death-test.cc	/^static pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {$/;"	f	namespace:testing::internal
Execution	doc/Latex/apps/moldft/manual.tex	/^\\chapter{Execution}$/;"	c
Exit	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void Exit( bool finished )$/;"	f	namespace:elem::blacs
ExitSummary	src/madness/external/gtest/src/gtest-death-test.cc	/^static std::string ExitSummary(int exit_code) {$/;"	f	namespace:testing::internal
ExitedUnsuccessfully	src/madness/external/gtest/src/gtest-death-test.cc	/^bool ExitedUnsuccessfully(int exit_status) {$/;"	f	namespace:testing::internal
ExitedWithCode	src/madness/external/gtest/include/gtest/gtest-death-test.h	/^class GTEST_API_ ExitedWithCode {$/;"	c	namespace:testing
ExitedWithCode	src/madness/external/gtest/src/gtest-death-test.cc	/^ExitedWithCode::ExitedWithCode(int exit_code) : exit_code_(exit_code) {$/;"	f	class:testing::ExitedWithCode
ExopUnaryOpStructure	src/apps/chem/GuessFactory.h	/^	ExopUnaryOpStructure(const std::shared_ptr<FunctionFunctorInterface<double, 3> >& f) :$/;"	f	class:madness::guessfactory::ExopUnaryOpStructure
ExopUnaryOpStructure	src/apps/chem/GuessFactory.h	/^class ExopUnaryOpStructure {$/;"	c	namespace:madness::guessfactory
Exp	src/examples/compiler/mra-driver.hh	/^    Exp(const std::string& s, Exp* left, Exp* middle, Exp* right, Exp* far, Type t=UNKNOWN)$/;"	f	class:Exp
Exp	src/examples/compiler/mra-driver.hh	/^    Exp(const std::string& s, Exp* left, Exp* middle, Exp* right, Type t=UNKNOWN)$/;"	f	class:Exp
Exp	src/examples/compiler/mra-driver.hh	/^    Exp(const std::string& s, Exp* left, Exp*right, Type t=UNKNOWN)$/;"	f	class:Exp
Exp	src/examples/compiler/mra-driver.hh	/^    Exp(const std::string& s, Exp* left, Type t=UNKNOWN) $/;"	f	class:Exp
Exp	src/examples/compiler/mra-driver.hh	/^    Exp(const std::string& s, Type t=UNKNOWN) $/;"	f	class:Exp
Exp	src/examples/compiler/mra-driver.hh	/^class Exp {$/;"	c
Exp	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Exp( const F& alpha )$/;"	f	namespace:elem
Exp	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Exp(value_type v)  { return exp(v);   }$/;"	f	class:mu::Parser
ExpFunctor	src/apps/moldft/testcosine.cc	/^    ExpFunctor(Q qx, Q qy, Q qz) : qx(qx), qy(qy), qz(qz) {}$/;"	f	class:ExpFunctor
ExpFunctor	src/apps/moldft/testcosine.cc	/^class ExpFunctor: public FunctionFunctorInterface<Q,3> {$/;"	c	file:
ExpFunctor	src/apps/moldft/testperiodic.cc	/^    ExpFunctor(Q qx, Q qy, Q qz) : qx(qx), qy(qy), qz(qz) {}$/;"	f	class:ExpFunctor
ExpFunctor	src/apps/moldft/testperiodic.cc	/^class ExpFunctor: public FunctionFunctorInterface<Q,3> {$/;"	c	file:
ExpFunctor3d	src/apps/moldft/testcosine.cc	/^    ExpFunctor3d(Q q0, Q q1, Q q2) : q0(q0), q1(q1), q2(q2) {}$/;"	f	class:ExpFunctor3d
ExpFunctor3d	src/apps/moldft/testcosine.cc	/^class ExpFunctor3d: public FunctionFunctorInterface<Q,3> {$/;"	c	file:
ExpFunctor3d	src/apps/moldft/testperiodic.cc	/^    ExpFunctor3d(Q q0, Q q1, Q q2) : q0(q0), q1(q1), q2(q2) {}$/;"	f	class:ExpFunctor3d
ExpFunctor3d	src/apps/moldft/testperiodic.cc	/^class ExpFunctor3d: public FunctionFunctorInterface<Q,3> {$/;"	c	file:
ExpandPackedReflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ExpandPackedReflectors.hpp	/^ExpandPackedReflectors$/;"	f	namespace:elem
Expikr	src/apps/nick/wavef.cc	/^Expikr::Expikr( const vector3D& kVec) : kVec(kVec) {$/;"	f	class:Expikr
Expikr	src/apps/nick/wavef.h	/^class Expikr : public baseWF$/;"	c
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Explicit.hpp	/^Explicit( DistMatrix<F>& A )$/;"	f	namespace:elem::lq
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Explicit.hpp	/^Explicit( DistMatrix<F>& L, DistMatrix<F>& A )$/;"	f	namespace:elem::lq
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Explicit.hpp	/^Explicit( Matrix<F>& A )$/;"	f	namespace:elem::lq
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Explicit.hpp	/^Explicit( Matrix<F>& L, Matrix<F>& A )$/;"	f	namespace:elem::lq
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Explicit.hpp	/^Explicit$/;"	f	namespace:elem::qr
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Explicit.hpp	/^Explicit( DistMatrix<F>& A, DistMatrix<F>& R, bool colPiv=false )$/;"	f	namespace:elem::qr
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Explicit.hpp	/^Explicit( DistMatrix<F>& A, bool colPiv=false )$/;"	f	namespace:elem::qr
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Explicit.hpp	/^Explicit( Matrix<F>& A, Matrix<F>& R, Matrix<Int>& pPerm )$/;"	f	namespace:elem::qr
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Explicit.hpp	/^Explicit( Matrix<F>& A, Matrix<F>& R, bool colPiv=false )$/;"	f	namespace:elem::qr
Explicit	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Explicit.hpp	/^Explicit( Matrix<F>& A, bool colPiv=false )$/;"	f	namespace:elem::qr
ExplicitPermutation	src/madness/external/elemental/include/elemental/lapack-like/perm/ExplicitPermutation.hpp	/^ExplicitPermutation$/;"	f	namespace:elem
ExplicitPermutation	src/madness/external/elemental/include/elemental/lapack-like/perm/ExplicitPermutation.hpp	/^ExplicitPermutation( const Matrix<Int>& perm, Matrix<Int>& P )$/;"	f	namespace:elem
ExplicitTS	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^ExplicitTS( DistMatrix<F,U,STAR>& A, DistMatrix<F,STAR,STAR>& R )$/;"	f	namespace:elem::qr
ExtendedKahan	src/madness/external/elemental/include/elemental/matrices/ExtendedKahan.hpp	/^ExtendedKahan( BlockDistMatrix<F,U,V>& A, Int k, Base<F> phi, Base<F> mu )$/;"	f	namespace:elem
ExtendedKahan	src/madness/external/elemental/include/elemental/matrices/ExtendedKahan.hpp	/^ExtendedKahan( DistMatrix<F,U,V>& A, Int k, Base<F> phi, Base<F> mu )$/;"	f	namespace:elem
ExtendedKahan	src/madness/external/elemental/include/elemental/matrices/ExtendedKahan.hpp	/^ExtendedKahan( Matrix<F>& A, Int k, Base<F> phi, Base<F> mu )$/;"	f	namespace:elem
ExtractList	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	/^ExtractList$/;"	f	namespace:elem::pspec
ExtractSummary	src/madness/external/gtest/src/gtest-test-part.cc	/^std::string TestPartResult::ExtractSummary(const char* message) {$/;"	f	class:testing::TestPartResult
ExtractToken	src/madness/external/muParser/muParserTokenReader.cpp	/^  int ParserTokenReader::ExtractToken( const char_type *a_szCharSet,$/;"	f	class:mu::ParserTokenReader
Ez	src/examples/dielectric_external_field.cc	/^const double Ez = 0.05; \/\/ External electric field$/;"	v
F	src/apps/chem/PNO.h	/^	Fock F;$/;"	m	class:madness::PNO
F	src/apps/nick/extra.h	/^  double F;           \/\/ Laser field strength$/;"	m	struct:InputParameters
F	src/apps/nick/tdse1.cc	/^    double F;           \/\/ Laser field strength$/;"	m	struct:InputParameters	file:
F	src/apps/tdse/tdse.cc	/^  double F;           \/\/ Laser field strength$/;"	m	struct:InputParameters	file:
F	src/apps/tdse/tdse.confused.cc	/^  double F;           \/\/ Laser field strength$/;"	m	struct:InputParameters	file:
F	src/apps/tdse/tdse4.cc	/^  double F;           \/\/ Laser field strength$/;"	m	struct:InputParameters	file:
F	src/examples/derivatives.cc	/^    F(double(*f)(const coord_3d&), const coord_3d& pt) : f(f), pts(1,pt) {}$/;"	f	class:F
F	src/examples/derivatives.cc	/^class F : public FunctionFunctorInterface<double,3> {$/;"	c	file:
F	src/examples/newsolver.cc	/^    F(const real_function_3d& x, const real_function_3d& y) $/;"	f	struct:F
F	src/examples/newsolver.cc	/^struct F {$/;"	s	file:
F	src/examples/tdse_example.cc	/^static const double F = 1.0;  \/\/ Laser field strength$/;"	v	file:
F	src/examples/test_derivative.cc	/^      F(int n) : n(n) {}$/;"	f	class:F
F	src/examples/test_derivative.cc	/^class F : public FunctionFunctorInterface<double,1> $/;"	c	file:
F	src/examples/testsolver.cc	/^    F() : x(99) {}      \/\/ Default constructor necessary for storage in vector$/;"	f	class:F
F	src/examples/testsolver.cc	/^    F(const F& a) : x(a.x) {} \/\/ Copy constructor necessary$/;"	f	class:F
F	src/examples/testsolver.cc	/^    F(double x) : x(x) {}$/;"	f	class:F
F	src/examples/testsolver.cc	/^class F {$/;"	c	file:
F	src/madness/external/elemental/examples/convex/SparseInvCov.cpp	/^typedef Real F;$/;"	t	file:
F	src/madness/external/elemental/examples/lapack-like/GLM.cpp	/^typedef Complex<Real> F;$/;"	t	file:
F	src/madness/external/elemental/examples/lapack-like/LSE.cpp	/^typedef Complex<Real> F;$/;"	t	file:
F	src/madness/world/test_ar.cc	/^struct F {$/;"	s	file:
F0	src/apps/moldft/parsemad.py	/^F0 = results.keys()[0]$/;"	v
F12POTENTIALS_H_	src/apps/chem/PNOF12Potentials.h	9;"	d
F12Parameters	src/apps/chem/PNOParameters.h	/^	F12Parameters(World& world, const std::string& inputfile, const PNOParameters& param, const std::string& TAG="pno") : PNOParameters(param){$/;"	f	class:madness::F12Parameters
F12Parameters	src/apps/chem/PNOParameters.h	/^	F12Parameters(const PNOParameters& param) : PNOParameters(param){$/;"	f	class:madness::F12Parameters
F12Parameters	src/apps/chem/PNOParameters.h	/^class F12Parameters: public PNOParameters {$/;"	c	namespace:madness
F12Potentials	src/apps/chem/PNOF12Potentials.cpp	/^F12Potentials::F12Potentials(World& world,const Nemo& nemo, const BasisFunctions& basis, const F12Parameters& pp) :$/;"	f	class:madness::F12Potentials
F12Potentials	src/apps/chem/PNOF12Potentials.h	/^class F12Potentials {$/;"	c	namespace:madness
F77_CAXPY	src/madness/tensor/cblas.h	128;"	d
F77_CAXPY	src/madness/tensor/cblas.h	157;"	d
F77_CAXPY	src/madness/tensor/cblas.h	186;"	d
F77_CAXPY	src/madness/tensor/cblas.h	70;"	d
F77_CAXPY	src/madness/tensor/cblas.h	99;"	d
F77_CDOTU	src/madness/tensor/cblas.h	124;"	d
F77_CDOTU	src/madness/tensor/cblas.h	153;"	d
F77_CDOTU	src/madness/tensor/cblas.h	182;"	d
F77_CDOTU	src/madness/tensor/cblas.h	66;"	d
F77_CDOTU	src/madness/tensor/cblas.h	95;"	d
F77_CGEMM	src/madness/tensor/cblas.h	106;"	d
F77_CGEMM	src/madness/tensor/cblas.h	135;"	d
F77_CGEMM	src/madness/tensor/cblas.h	164;"	d
F77_CGEMM	src/madness/tensor/cblas.h	48;"	d
F77_CGEMM	src/madness/tensor/cblas.h	77;"	d
F77_CGEMV	src/madness/tensor/cblas.h	114;"	d
F77_CGEMV	src/madness/tensor/cblas.h	143;"	d
F77_CGEMV	src/madness/tensor/cblas.h	172;"	d
F77_CGEMV	src/madness/tensor/cblas.h	56;"	d
F77_CGEMV	src/madness/tensor/cblas.h	85;"	d
F77_CGER	src/madness/tensor/cblas.h	198;"	d
F77_CGER	src/madness/tensor/cblas.h	203;"	d
F77_CGER	src/madness/tensor/cblas.h	208;"	d
F77_CGER	src/madness/tensor/cblas.h	213;"	d
F77_CGER	src/madness/tensor/cblas.h	218;"	d
F77_CSCAL	src/madness/tensor/cblas.h	118;"	d
F77_CSCAL	src/madness/tensor/cblas.h	147;"	d
F77_CSCAL	src/madness/tensor/cblas.h	176;"	d
F77_CSCAL	src/madness/tensor/cblas.h	60;"	d
F77_CSCAL	src/madness/tensor/cblas.h	89;"	d
F77_CSSCAL	src/madness/tensor/cblas.h	120;"	d
F77_CSSCAL	src/madness/tensor/cblas.h	149;"	d
F77_CSSCAL	src/madness/tensor/cblas.h	178;"	d
F77_CSSCAL	src/madness/tensor/cblas.h	62;"	d
F77_CSSCAL	src/madness/tensor/cblas.h	91;"	d
F77_DAXPY	src/madness/tensor/cblas.h	127;"	d
F77_DAXPY	src/madness/tensor/cblas.h	156;"	d
F77_DAXPY	src/madness/tensor/cblas.h	185;"	d
F77_DAXPY	src/madness/tensor/cblas.h	69;"	d
F77_DAXPY	src/madness/tensor/cblas.h	98;"	d
F77_DDOT	src/madness/tensor/cblas.h	123;"	d
F77_DDOT	src/madness/tensor/cblas.h	152;"	d
F77_DDOT	src/madness/tensor/cblas.h	181;"	d
F77_DDOT	src/madness/tensor/cblas.h	65;"	d
F77_DDOT	src/madness/tensor/cblas.h	94;"	d
F77_DGEMM	src/madness/tensor/cblas.h	105;"	d
F77_DGEMM	src/madness/tensor/cblas.h	134;"	d
F77_DGEMM	src/madness/tensor/cblas.h	163;"	d
F77_DGEMM	src/madness/tensor/cblas.h	47;"	d
F77_DGEMM	src/madness/tensor/cblas.h	76;"	d
F77_DGEMV	src/madness/tensor/cblas.h	113;"	d
F77_DGEMV	src/madness/tensor/cblas.h	142;"	d
F77_DGEMV	src/madness/tensor/cblas.h	171;"	d
F77_DGEMV	src/madness/tensor/cblas.h	55;"	d
F77_DGEMV	src/madness/tensor/cblas.h	84;"	d
F77_DGER	src/madness/tensor/cblas.h	197;"	d
F77_DGER	src/madness/tensor/cblas.h	202;"	d
F77_DGER	src/madness/tensor/cblas.h	207;"	d
F77_DGER	src/madness/tensor/cblas.h	212;"	d
F77_DGER	src/madness/tensor/cblas.h	217;"	d
F77_DSCAL	src/madness/tensor/cblas.h	117;"	d
F77_DSCAL	src/madness/tensor/cblas.h	146;"	d
F77_DSCAL	src/madness/tensor/cblas.h	175;"	d
F77_DSCAL	src/madness/tensor/cblas.h	59;"	d
F77_DSCAL	src/madness/tensor/cblas.h	88;"	d
F77_DZGEMM	src/madness/tensor/cblas.h	110;"	d
F77_DZGEMM	src/madness/tensor/cblas.h	139;"	d
F77_DZGEMM	src/madness/tensor/cblas.h	168;"	d
F77_DZGEMM	src/madness/tensor/cblas.h	52;"	d
F77_DZGEMM	src/madness/tensor/cblas.h	81;"	d
F77_SAXPY	src/madness/tensor/cblas.h	126;"	d
F77_SAXPY	src/madness/tensor/cblas.h	155;"	d
F77_SAXPY	src/madness/tensor/cblas.h	184;"	d
F77_SAXPY	src/madness/tensor/cblas.h	68;"	d
F77_SAXPY	src/madness/tensor/cblas.h	97;"	d
F77_SCGEMM	src/madness/tensor/cblas.h	109;"	d
F77_SCGEMM	src/madness/tensor/cblas.h	138;"	d
F77_SCGEMM	src/madness/tensor/cblas.h	167;"	d
F77_SCGEMM	src/madness/tensor/cblas.h	51;"	d
F77_SCGEMM	src/madness/tensor/cblas.h	80;"	d
F77_SDOT	src/madness/tensor/cblas.h	122;"	d
F77_SDOT	src/madness/tensor/cblas.h	151;"	d
F77_SDOT	src/madness/tensor/cblas.h	180;"	d
F77_SDOT	src/madness/tensor/cblas.h	64;"	d
F77_SDOT	src/madness/tensor/cblas.h	93;"	d
F77_SGEMM	src/madness/tensor/cblas.h	104;"	d
F77_SGEMM	src/madness/tensor/cblas.h	133;"	d
F77_SGEMM	src/madness/tensor/cblas.h	162;"	d
F77_SGEMM	src/madness/tensor/cblas.h	46;"	d
F77_SGEMM	src/madness/tensor/cblas.h	75;"	d
F77_SGEMV	src/madness/tensor/cblas.h	112;"	d
F77_SGEMV	src/madness/tensor/cblas.h	141;"	d
F77_SGEMV	src/madness/tensor/cblas.h	170;"	d
F77_SGEMV	src/madness/tensor/cblas.h	54;"	d
F77_SGEMV	src/madness/tensor/cblas.h	83;"	d
F77_SGER	src/madness/tensor/cblas.h	196;"	d
F77_SGER	src/madness/tensor/cblas.h	201;"	d
F77_SGER	src/madness/tensor/cblas.h	206;"	d
F77_SGER	src/madness/tensor/cblas.h	211;"	d
F77_SGER	src/madness/tensor/cblas.h	216;"	d
F77_SSCAL	src/madness/tensor/cblas.h	116;"	d
F77_SSCAL	src/madness/tensor/cblas.h	145;"	d
F77_SSCAL	src/madness/tensor/cblas.h	174;"	d
F77_SSCAL	src/madness/tensor/cblas.h	58;"	d
F77_SSCAL	src/madness/tensor/cblas.h	87;"	d
F77_ZAXPY	src/madness/tensor/cblas.h	100;"	d
F77_ZAXPY	src/madness/tensor/cblas.h	129;"	d
F77_ZAXPY	src/madness/tensor/cblas.h	158;"	d
F77_ZAXPY	src/madness/tensor/cblas.h	187;"	d
F77_ZAXPY	src/madness/tensor/cblas.h	71;"	d
F77_ZDOTU	src/madness/tensor/cblas.h	125;"	d
F77_ZDOTU	src/madness/tensor/cblas.h	154;"	d
F77_ZDOTU	src/madness/tensor/cblas.h	183;"	d
F77_ZDOTU	src/madness/tensor/cblas.h	67;"	d
F77_ZDOTU	src/madness/tensor/cblas.h	96;"	d
F77_ZDSCAL	src/madness/tensor/cblas.h	121;"	d
F77_ZDSCAL	src/madness/tensor/cblas.h	150;"	d
F77_ZDSCAL	src/madness/tensor/cblas.h	179;"	d
F77_ZDSCAL	src/madness/tensor/cblas.h	63;"	d
F77_ZDSCAL	src/madness/tensor/cblas.h	92;"	d
F77_ZGEMM	src/madness/tensor/cblas.h	107;"	d
F77_ZGEMM	src/madness/tensor/cblas.h	136;"	d
F77_ZGEMM	src/madness/tensor/cblas.h	165;"	d
F77_ZGEMM	src/madness/tensor/cblas.h	49;"	d
F77_ZGEMM	src/madness/tensor/cblas.h	78;"	d
F77_ZGEMV	src/madness/tensor/cblas.h	115;"	d
F77_ZGEMV	src/madness/tensor/cblas.h	144;"	d
F77_ZGEMV	src/madness/tensor/cblas.h	173;"	d
F77_ZGEMV	src/madness/tensor/cblas.h	57;"	d
F77_ZGEMV	src/madness/tensor/cblas.h	86;"	d
F77_ZGER	src/madness/tensor/cblas.h	199;"	d
F77_ZGER	src/madness/tensor/cblas.h	204;"	d
F77_ZGER	src/madness/tensor/cblas.h	209;"	d
F77_ZGER	src/madness/tensor/cblas.h	214;"	d
F77_ZGER	src/madness/tensor/cblas.h	219;"	d
F77_ZSCAL	src/madness/tensor/cblas.h	119;"	d
F77_ZSCAL	src/madness/tensor/cblas.h	148;"	d
F77_ZSCAL	src/madness/tensor/cblas.h	177;"	d
F77_ZSCAL	src/madness/tensor/cblas.h	61;"	d
F77_ZSCAL	src/madness/tensor/cblas.h	90;"	d
FAIL	src/madness/external/gtest/include/gtest/gtest.h	1877;"	d
FAIL	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^    FAIL = '\\033[91m'$/;"	v	class:COLORS
FAIL	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^    FAIL = '\\033[91m'$/;"	v	class:COLORS
FALSE_	src/madness/external/elemental/external/pmrrr/src/lapack/odr1v.c	11;"	d	file:
FALSE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	13;"	d	file:
FALSE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrre.c	14;"	d	file:
FALSE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrrf.c	12;"	d	file:
FALSE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrrr.c	11;"	d	file:
FALSE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrrv.c	13;"	d	file:
FALSE_	src/madness/external/elemental/external/pmrrr/src/lapack/odstmr.c	14;"	d	file:
FC	src/apps/moldft/fci/GNUmakefile	/^       FC = gfortran$/;"	m
FCONVERT	src/apps/moldft/fci/GNUmakefile	/^ FCONVERT = (\/bin\/cp $< \/tmp\/$$$$.c; \\$/;"	m
FClose	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int FClose(FILE* fp) { return fclose(fp); }$/;"	f	namespace:testing::internal::posix
FDOpen	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }$/;"	f	namespace:testing::internal::posix
FFLAGS	src/apps/moldft/fci/GNUmakefile	/^   FFLAGS = -O3 -malign-double -ffast-math -fno-second-underscore$/;"	m
FLA_Error	src/madness/external/elemental/src/core/imports/flame.cpp	/^typedef int FLA_Error;$/;"	t	file:
FLOAT_EIGPAIR	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	950;"	d	file:
FLOAT_EIGVAL	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	935;"	d	file:
FMA	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	154;"	d	file:
FMA	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	151;"	d	file:
FORTRAN_CTYPES_H	src/madness/fortran_ctypes.h	38;"	d
FORTRAN_LINKAGE_LCU	build/src/madness/config.h	26;"	d
FORWARD	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    FORWARD,$/;"	e	enum:elem::ForwardOrBackwardNS::ForwardOrBackward
FOUR	src/madness/external/elemental/external/pmrrr/src/process_c_task.c	60;"	d	file:
FOURTH	src/madness/external/elemental/external/pmrrr/src/plarre.c	62;"	d	file:
FOpen	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline FILE* FOpen(const char* path, const char* mode) {$/;"	f	namespace:testing::internal::posix
FRIEND_TEST	src/madness/external/gtest/include/gtest/gtest_prod.h	55;"	d
FROBENIUS_NORM	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    FROBENIUS_NORM,     \/\/ Two-norm of the singular values$/;"	e	enum:elem::NormTypeNS::NormType
FROM_FILE_GUESSTYPE	src/apps/chem/PNOParameters.h	/^enum GuessType{PARTIAL_WAVE_GUESSTYPE,FROM_FILE_GUESSTYPE,PREDEFINED_GUESSTYPE,SCF_GUESSTYPE,EXOP_GUESSTYPE,EMPTY_GUESSTYPE,PSI4_GUESSTYPE,UNKNOWN_GUESSTYPE};$/;"	e	enum:madness::GuessType
FReopen	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {$/;"	f	namespace:testing::internal::posix
FUDGE_FACTOR	src/madness/external/elemental/external/pmrrr/include/plarre.h	62;"	d
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	333;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	231;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	238;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	215;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	218;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	234;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	233;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	213;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	251;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	199;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	217;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	217;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	217;"	d	file:
FULL	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	217;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	464;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	695;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	240;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	216;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	497;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	320;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	318;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	216;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	251;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	284;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	339;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	344;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	343;"	d	file:
FULL	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	349;"	d	file:
FULL_EIGPAIR	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	896;"	d	file:
FULL_EIGVAL	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	884;"	d	file:
FUNCTIONCOMMONDATA_H_	src/madness/mra/function_common_data.h	37;"	d
FUNCTION_INSTANTIATE_1	src/madness/mra/mra.h	48;"	d
FUNCTION_INSTANTIATE_2	src/madness/mra/mra.h	49;"	d
FUNCTION_INSTANTIATE_3	src/madness/mra/mra.h	50;"	d
FUNCTION_INSTANTIATE_4	src/madness/mra/mra.h	52;"	d
FUNCTION_INSTANTIATE_5	src/madness/mra/mra.h	53;"	d
FUNCTION_INSTANTIATE_6	src/madness/mra/mra.h	54;"	d
F_ij	src/apps/chem/PNOStructures.h	/^	std::valarray<Tensor<double> > F_ij;			\/\/\/< Fock matrices of the PNOs$/;"	m	struct:madness::PNOPairs
F_occ	src/apps/chem/TDHF.h	/^	Tensor<double> F_occ;$/;"	m	class:madness::TDHF
FailFromInternalError	src/madness/external/gtest/src/gtest-death-test.cc	/^static void FailFromInternalError(int fd) {$/;"	f	namespace:testing::internal
Failed	src/madness/external/gtest/include/gtest/gtest.h	/^  bool Failed() const { return failed_test_count() > 0; }$/;"	f	class:testing::TestCase
Failed	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool Failed() const {$/;"	f	class:testing::internal::UnitTestImpl
Failed	src/madness/external/gtest/src/gtest.cc	/^bool TestResult::Failed() const {$/;"	f	class:testing::TestResult
Failed	src/madness/external/gtest/src/gtest.cc	/^bool UnitTest::Failed() const { return impl()->Failed(); }$/;"	f	class:testing::UnitTest
Faraday_constant	src/madness/constants.h	/^        const double Faraday_constant = 96485.3399 ; \/\/           0.0024                C mol^-1$/;"	m	namespace:madness::constants
FastAbs	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^FastAbs( const F& alpha )$/;"	f	namespace:elem
Fermi_coupling_constant	src/madness/constants.h	/^        const double Fermi_coupling_constant = 1.16637e-5 ; \/\/ 0.00001e-5          GeV^-2$/;"	m	namespace:madness::constants
FetchAndAddSigned32	src/madness/world/bgq_atomics.h	/^__INLINE__ int32_t FetchAndAddSigned32( volatile int32_t *pVar, int32_t value )$/;"	f
Fiedler	src/madness/external/elemental/include/elemental/matrices/Fiedler.hpp	/^Fiedler( BlockDistMatrix<F,U,V>& A, const std::vector<F>& c )$/;"	f	namespace:elem
Fiedler	src/madness/external/elemental/include/elemental/matrices/Fiedler.hpp	/^Fiedler( DistMatrix<F,U,V>& A, const std::vector<F>& c )$/;"	f	namespace:elem
Fiedler	src/madness/external/elemental/include/elemental/matrices/Fiedler.hpp	/^Fiedler( Matrix<F>& A, const std::vector<F>& c )$/;"	f	namespace:elem
FileExtension	src/madness/external/elemental/include/elemental/io/impl.hpp	/^inline std::string FileExtension( FileFormat format )$/;"	f	namespace:elem
FileFormat	src/madness/external/elemental/include/elemental/io/decl.hpp	/^enum FileFormat$/;"	g	namespace:elem::FileFormatNS
FileFormatNS	src/madness/external/elemental/include/elemental/io/decl.hpp	/^namespace FileFormatNS {$/;"	n	namespace:elem
FileFormat_MAX	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    FileFormat_MAX \/\/ For detecting number of entries in enum$/;"	e	enum:elem::FileFormatNS::FileFormat
FileNo	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int FileNo(FILE* file) { return _fileno(file); }$/;"	f	namespace:testing::internal::posix
FileNo	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }$/;"	f	namespace:testing::internal::posix
FileOrDirectoryExists	src/madness/external/gtest/src/gtest-filepath.cc	/^bool FilePath::FileOrDirectoryExists() const {$/;"	f	class:testing::internal::FilePath
FilePath	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^  FilePath() : pathname_("") { }$/;"	f	class:testing::internal::FilePath
FilePath	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) { }$/;"	f	class:testing::internal::FilePath
FilePath	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^  explicit FilePath(const std::string& pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^class GTEST_API_ FilePath {$/;"	c	namespace:testing::internal
FileSize	src/madness/external/elemental/include/elemental/io/impl.hpp	/^FileSize( std::ifstream& file )$/;"	f	namespace:elem
FillDesc	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^FillDesc( const BlockDistMatrix<T>& A, int context )$/;"	f	namespace:elem
FilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::FilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
FilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::FilterFrom( const DistMatrix<T,UGath,VGath>& A )$/;"	f	class:elem::GeneralDistMatrix
FilterMatchesTest	src/madness/external/gtest/src/gtest.cc	/^bool UnitTestOptions::FilterMatchesTest(const std::string &test_case_name,$/;"	f	class:testing::internal::UnitTestOptions
FilterTests	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {$/;"	f	class:testing::internal::UnitTestImpl
FinalSnapshot	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^FinalSnapshot$/;"	f	namespace:elem::pspec
Finalize	src/madness/external/elemental/src/core/global.cpp	/^void Finalize()$/;"	f	namespace:elem
Finalize	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Finalize()$/;"	f	namespace:elem::mpi
Finalize	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::Finalize()$/;"	f	class:mu::ParserByteCode
Finalize	src/madness/world/safempi.h	/^    inline int Finalize() {$/;"	f	namespace:SafeMPI
Finalized	src/madness/external/elemental/src/core/imports/mpi.cpp	/^bool Finalized()$/;"	f	namespace:elem::mpi
Find	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet
Find	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet
Find	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute*	Find( const char* _name ) {$/;"	f	class:TiXmlAttributeSet
Find	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute*	Find( const std::string& _name ) {$/;"	f	class:TiXmlAttributeSet
FindColPivot	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	/^FindColPivot$/;"	f	namespace:elem::qr
FindConverged	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^FindConverged$/;"	f	namespace:elem::pspec
FindFactor	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::FindFactor( int p )$/;"	f	class:elem::Grid
FindLastPathSeparator	src/madness/external/gtest/src/gtest-filepath.cc	/^const char* FilePath::FindLastPathSeparator() const {$/;"	f	class:testing::internal::FilePath
FindPivot	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	/^FindPivot( const std::vector<Real>& norms, Int col )$/;"	f	namespace:elem::qr
Finished	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::Finished()$/;"	f	class:elem::AxpyInterface
First	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet
First	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet
FirstArg	src/madness/external/muParser/muParserTest.h	/^        static value_type FirstArg(const value_type* a_afArg, int a_iArgc)$/;"	f	class:mu::Test::ParserTester
FirstAttribute	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute* FirstAttribute() 				{ return attributeSet.First(); }$/;"	f	class:TiXmlElement
FirstAttribute	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const	{ return attributeSet.First(); }		\/\/\/< Access the first attribute in this element.$/;"	f	class:TiXmlElement
FirstCall	src/apps/moldft/fci/crayio.c	/^void FirstCall()$/;"	f
FirstChild	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle
FirstChild	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle
FirstChild	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode
FirstChild	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const				{ return FirstChild( _value.c_str() ); }$/;"	f	class:TiXmlHandle
FirstChild	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode
FirstChild	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value )				{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChild	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild()						{ return firstChild; }$/;"	f	class:TiXmlNode
FirstChild	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const	{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChild	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* FirstChild()	const		{ return firstChild; }	\/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode
FirstChildElement	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle
FirstChildElement	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle
FirstChildElement	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode
FirstChildElement	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode
FirstChildElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode
FirstChildElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value )				{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChildElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode
FirstChildElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const		{ return FirstChildElement( _value.c_str() ); }$/;"	f	class:TiXmlHandle
FirstChildElement	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const	{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstHalfOfSymmetric2x2Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Scale.hpp	/^FirstHalfOfSymmetric2x2Scale$/;"	f	namespace:elem
FirstHalfOfSymmetric2x2Solve	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Solve.hpp	/^FirstHalfOfSymmetric2x2Solve$/;"	f	namespace:elem
FirstVCRank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::FirstVCRank( int diagPath ) const{ return diagPath*height_; }$/;"	f	class:elem::Grid
FixColumns	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^FixColumns( DistMatrix<F,U,V>& X )$/;"	f	namespace:elem::pspec
FixColumns	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^FixColumns( Matrix<F>& X )$/;"	f	namespace:elem::pspec
FixDiagonal	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/Util.hpp	/^FixDiagonal$/;"	f	namespace:elem
FixedSize	src/madness/external/elemental/src/core/Matrix.cpp	/^bool Matrix<T>::FixedSize() const { return IsFixedSize( viewType_ ); }$/;"	f	class:elem::Matrix
FlaBidiagSVD	src/madness/external/elemental/src/core/imports/flame.cpp	/^void FlaBidiagSVD$/;"	f	namespace:elem
FlagToEnvVar	src/madness/external/gtest/src/gtest-port.cc	/^static std::string FlagToEnvVar(const char* flag) {$/;"	f	namespace:testing::internal
Float	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^typedef FloatingPoint<float> Float;$/;"	t	namespace:testing::internal
FloatLE	src/madness/external/gtest/src/gtest.cc	/^AssertionResult FloatLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
FloatingPoint	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  explicit FloatingPoint(const RawType& x) { u_.value_ = x; }$/;"	f	class:testing::internal::FloatingPoint
FloatingPoint	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class FloatingPoint {$/;"	c	namespace:testing::internal
FloatingPointLE	src/madness/external/gtest/src/gtest.cc	/^AssertionResult FloatingPointLE(const char* expr1,$/;"	f	namespace:testing::internal
FloatingPointUnion	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  union FloatingPointUnion {$/;"	u	class:testing::internal::FloatingPoint
FlushInfoLog	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline void FlushInfoLog() { fflush(NULL); }$/;"	f	namespace:testing::internal
Fock	src/apps/chem/SCFOperators.cc	/^Fock::Fock(World& world, const Nemo* nemo, double scale_K)$/;"	f	class:madness::Fock
Fock	src/apps/chem/SCFOperators.cc	/^Fock::Fock(World& world, const SCF* calc, double scale_K)$/;"	f	class:madness::Fock
Fock	src/apps/chem/SCFOperators.h	/^class Fock {$/;"	c	namespace:madness
Foo	src/madness/world/test_future3.cc	/^    Foo(World& world, int bar) : WorldObject<Foo>(world), bar(bar) {$/;"	f	class:Foo
Foo	src/madness/world/test_future3.cc	/^class Foo : public WorldObject<Foo> {$/;"	c	file:
Foo	src/madness/world/test_world.cc	/^    Foo(World& world, int a)$/;"	f	class:Foo
Foo	src/madness/world/test_world.cc	/^class Foo : public WorldObject<Foo> {$/;"	c	file:
ForEach	src/madness/external/gtest/src/gtest-internal-inl.h	/^void ForEach(const Container& c, Functor functor) {$/;"	f	namespace:testing::internal
ForEachRootTask	src/madness/world/world_task_queue.h	/^            ForEachRootTask(World&, const rangeT range, const opT& op) :$/;"	f	class:madness::detail::ForEachRootTask
ForEachRootTask	src/madness/world/world_task_queue.h	/^        class ForEachRootTask : public TaskInterface {$/;"	c	namespace:madness::detail
ForkingDeathTest	src/madness/external/gtest/src/gtest-death-test.cc	/^ForkingDeathTest::ForkingDeathTest(const char* a_statement, const RE* a_regex)$/;"	f	class:testing::internal::ForkingDeathTest
ForkingDeathTest	src/madness/external/gtest/src/gtest-death-test.cc	/^class ForkingDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
FormQ	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^FormQ( DistMatrix<F,U,STAR>& A, TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
FormR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^FormR( const DistMatrix<F,U,STAR>& A, const TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
Format	src/madness/external/gtest/include/gtest/gtest.h	/^  static ::std::string Format(const ToPrint& value) {$/;"	f	class:testing::internal::FormatForComparison
Format	src/madness/external/gtest/include/gtest/gtest.h	/^  static ::std::string Format(const ToPrint* value) {$/;"	f	class:testing::internal::FormatForComparison
FormatBool	src/madness/external/gtest/src/gtest-internal-inl.h	/^  string FormatBool(bool value) { return value ? "1" : "0"; }$/;"	f	class:testing::internal::StreamingListener
FormatByte	src/madness/external/gtest/src/gtest.cc	/^std::string String::FormatByte(unsigned char value) {$/;"	f	class:testing::internal::String
FormatCompilerIndependentFileLocation	src/madness/external/gtest/src/gtest-port.cc	/^GTEST_API_ ::std::string FormatCompilerIndependentFileLocation($/;"	f	namespace:testing::internal
FormatCountableNoun	src/madness/external/gtest/src/gtest.cc	/^static std::string FormatCountableNoun(int count,$/;"	f	namespace:testing
FormatCxxExceptionMessage	src/madness/external/gtest/src/gtest.cc	/^static std::string FormatCxxExceptionMessage(const char* description,$/;"	f	namespace:testing::internal
FormatDeathTestOutput	src/madness/external/gtest/src/gtest-death-test.cc	/^static ::std::string FormatDeathTestOutput(const ::std::string& output) {$/;"	f	namespace:testing::internal
FormatEpochTimeInMillisAsIso8601	src/madness/external/gtest/src/gtest.cc	/^std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatFileLocation	src/madness/external/gtest/src/gtest-port.cc	/^GTEST_API_ ::std::string FormatFileLocation(const char* file, int line) {$/;"	f	namespace:testing::internal
FormatForComparison	src/madness/external/gtest/include/gtest/gtest.h	/^class FormatForComparison {$/;"	c	namespace:testing::internal
FormatForComparison	src/madness/external/gtest/include/gtest/gtest.h	/^class FormatForComparison<ToPrint[N], OtherOperand> {$/;"	c	namespace:testing::internal
FormatForComparisonFailureMessage	src/madness/external/gtest/include/gtest/gtest.h	/^std::string FormatForComparisonFailureMessage($/;"	f	namespace:testing::internal
FormatFromExtension	src/madness/external/elemental/include/elemental/io/impl.hpp	/^inline FileFormat FormatFromExtension( const std::string ext )$/;"	f	namespace:elem
FormatHexInt	src/madness/external/gtest/src/gtest.cc	/^std::string String::FormatHexInt(int value) {$/;"	f	class:testing::internal::String
FormatIntWidth2	src/madness/external/gtest/src/gtest.cc	/^std::string String::FormatIntWidth2(int value) {$/;"	f	class:testing::internal::String
FormatRegexSyntaxError	src/madness/external/gtest/src/gtest-port.cc	/^std::string FormatRegexSyntaxError(const char* regex, int index) {$/;"	f	namespace:testing::internal
FormatSehExceptionMessage	src/madness/external/gtest/src/gtest.cc	/^static std::string* FormatSehExceptionMessage(DWORD exception_code,$/;"	f	namespace:testing
FormatTestCaseCount	src/madness/external/gtest/src/gtest.cc	/^static std::string FormatTestCaseCount(int test_case_count) {$/;"	f	namespace:testing
FormatTestCount	src/madness/external/gtest/src/gtest.cc	/^static std::string FormatTestCount(int test_count) {$/;"	f	namespace:testing
FormatTimeInMillisAsSeconds	src/madness/external/gtest/src/gtest.cc	/^std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatWordList	src/madness/external/gtest/src/gtest.cc	/^static std::string FormatWordList(const std::vector<std::string>& words) {$/;"	f	namespace:testing
Forsythe	src/madness/external/elemental/include/elemental/matrices/Forsythe.hpp	/^Forsythe( BlockDistMatrix<T,U,V>& J, Int n, T alpha, T lambda )$/;"	f	namespace:elem
Forsythe	src/madness/external/elemental/include/elemental/matrices/Forsythe.hpp	/^Forsythe( DistMatrix<T,U,V>& J, Int n, T alpha, T lambda )$/;"	f	namespace:elem
Forsythe	src/madness/external/elemental/include/elemental/matrices/Forsythe.hpp	/^Forsythe( Matrix<T>& J, Int n, T alpha, T lambda )$/;"	f	namespace:elem
Forward	src/madness/misc/cfft.cc	/^bool CFFT::Forward(const double_complex *const Input, double_complex *const Output, const unsigned int N)$/;"	f	class:CFFT
Forward	src/madness/misc/cfft.cc	/^bool CFFT::Forward(double_complex *const Data, const unsigned int N)$/;"	f	class:CFFT
ForwardOrBackward	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum ForwardOrBackward$/;"	g	namespace:elem::ForwardOrBackwardNS
ForwardOrBackwardNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace ForwardOrBackwardNS {$/;"	n	namespace:elem
Fourier	src/madness/external/elemental/include/elemental/matrices/Fourier.hpp	/^Fourier( BlockDistMatrix<Complex<Real>,U,V>& A, Int n )$/;"	f	namespace:elem
Fourier	src/madness/external/elemental/include/elemental/matrices/Fourier.hpp	/^Fourier( DistMatrix<Complex<Real>,U,V>& A, Int n )$/;"	f	namespace:elem
Fourier	src/madness/external/elemental/include/elemental/matrices/Fourier.hpp	/^Fourier( Matrix<Complex<Real>>& A, Int n )$/;"	f	namespace:elem
FourierPhase	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^    FourierPhase( Int n ) : n_(n), pi_(4*Atan(Real(1))) { }$/;"	f	class:FourierPhase
FourierPhase	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^class FourierPhase {$/;"	c	file:
FoxLi	src/madness/external/elemental/include/elemental/matrices/FoxLi.hpp	/^FoxLi( DistMatrix<Complex<Real>,U,V>& A, Int n, Real omega )$/;"	f	namespace:elem
FoxLi	src/madness/external/elemental/include/elemental/matrices/FoxLi.hpp	/^FoxLi( Matrix<Complex<Real>>& A, Int n, Real omega )$/;"	f	namespace:elem
Fred	src/examples/testspectralprop.cc	/^    Fred(const Fred& f) : v(f.v) {}$/;"	f	class:Fred
Fred	src/examples/testspectralprop.cc	/^    Fred(double a, double b, double c)$/;"	f	class:Fred
Fred	src/examples/testspectralprop.cc	/^class Fred {$/;"	c	file:
Fred	src/madness/tensor/gfit.cc	/^    Fred(const Tensor<double> f, $/;"	f	class:Fred
Fred	src/madness/tensor/gfit.cc	/^class Fred : public OptimizationTargetInterface {$/;"	c	file:
Fred	src/madness/world/test_future.cc	/^class Fred {$/;"	c	file:
Free	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Free( Comm& comm )$/;"	f	namespace:elem::mpi
Free	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Free( Group& group )$/;"	f	namespace:elem::mpi
Free	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Free( Op& op )$/;"	f	namespace:elem::mpi
FreeAlignments	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::FreeAlignments() $/;"	f	class:elem::AbstractBlockDistMatrix
FreeAlignments	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::FreeAlignments() $/;"	f	class:elem::AbstractDistMatrix
FreeGrid	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void FreeGrid( int context )$/;"	f	namespace:elem::blacs
FreeHandle	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void FreeHandle( int bhandle )$/;"	f	namespace:elem::blacs
FrobeniusCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Frobenius.hpp	/^FrobeniusCondition( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
FrobeniusCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Frobenius.hpp	/^FrobeniusCondition( const Matrix<F>& A )$/;"	f	namespace:elem
FrobeniusNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Frobenius.hpp	/^FrobeniusNorm( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
FrobeniusNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Frobenius.hpp	/^FrobeniusNorm( const Matrix<F>& A )$/;"	f	namespace:elem
Full	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^Full( const DistMatrix<F>& A )$/;"	f	namespace:elem::cholesky::pivot
Full	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^Full( const Matrix<F>& A )$/;"	f	namespace:elem::cholesky::pivot
Full	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Full.hpp	/^Full$/;"	f	namespace:elem::lu
Full	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Full.hpp	/^Full( Matrix<F>& A, Matrix<Int>& pPerm, Matrix<Int>& qPerm )$/;"	f	namespace:elem::lu
FullMatch	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  static bool FullMatch(const ::std::string& str, const RE& re) {$/;"	f	class:testing::internal::RE
FullMatch	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  static bool FullMatch(const ::string& str, const RE& re) {$/;"	f	class:testing::internal::RE
FullMatch	src/madness/external/gtest/src/gtest-port.cc	/^bool RE::FullMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
Func	src/madness/mra/minmax/y.cc	/^    Func(const vector<FLOAT>& x, const vector<FLOAT>&f, const vector<FLOAT>& p, const vector<FLOAT>& dp) $/;"	f	class:Func
Func	src/madness/mra/minmax/y.cc	/^class Func {$/;"	c	file:
Func	src/madness/mra/minmax/y1.cc	/^    Func(const vector<FLOAT>& x, const vector<FLOAT>&f, const vector<FLOAT>& p, const vector<FLOAT>& dp) $/;"	f	class:Func
Func	src/madness/mra/minmax/y1.cc	/^class Func {$/;"	c	file:
Func	src/madness/mra/minmax/y_signed.cc	/^    Func(const vector<FLOAT>& x, const vector<FLOAT>&f, const vector<FLOAT>& p, const vector<FLOAT>& dp) $/;"	f	class:Func
Func	src/madness/mra/minmax/y_signed.cc	/^class Func {$/;"	c	file:
Func	src/madness/mra/minmax/y_varx.cc	/^    Func(const vector<FLOAT>& x, const vector<FLOAT>&f, const vector<FLOAT>& p, const vector<FLOAT>& dp) $/;"	f	class:Func
Func	src/madness/mra/minmax/y_varx.cc	/^class Func {$/;"	c	file:
FuncType	src/apps/chem/CCStructures.h	/^  enum FuncType {UNDEFINED,HOLE,PARTICLE,MIXED,RESPONSE};$/;"	g	namespace:madness
Function	src/madness/mra/mra.h	/^        Function() : impl() {}$/;"	f	class:madness::Function
Function	src/madness/mra/mra.h	/^        Function(const Function<T,NDIM>& f)$/;"	f	class:madness::Function
Function	src/madness/mra/mra.h	/^        Function(const factoryT& factory)$/;"	f	class:madness::Function
Function	src/madness/mra/mra.h	/^    class Function : public archive::ParallelSerializableObject {$/;"	c	namespace:madness
Function approximation	doc/Latex/implementation.tex	/^\\section{Function approximation}$/;"	s
Function approximation in the scaling function basis	doc/Latex/implementation.tex	/^\\subsection[\\ Function approximation in the scaling function basis]{\\ Function approximation in the scaling function$/;"	b
FunctionCommonData	src/madness/mra/function_common_data.h	/^        FunctionCommonData(int k) {$/;"	f	class:madness::FunctionCommonData
FunctionCommonData	src/madness/mra/function_common_data.h	/^    class FunctionCommonData {$/;"	c	namespace:madness
FunctionDefaults	src/madness/mra/funcdefaults.h	/^    class FunctionDefaults {$/;"	c	namespace:madness
FunctionFactory	src/madness/mra/function_factory.h	/^    FunctionFactory(World& world) :$/;"	f	class:madness::FunctionFactory
FunctionFactory	src/madness/mra/function_factory.h	/^  class FunctionFactory {$/;"	c	namespace:madness
FunctionFunctorInterface	src/madness/mra/function_interface.h	/^	    FunctionFunctorInterface() : special_level_(6) {}$/;"	f	class:madness::FunctionFunctorInterface
FunctionFunctorInterface	src/madness/mra/function_interface.h	/^	class FunctionFunctorInterface {$/;"	c	namespace:madness
FunctionImpl	src/madness/mra/funcimpl.h	/^        FunctionImpl(const FunctionFactory<T,NDIM>& factory)$/;"	f	class:madness::FunctionImpl
FunctionImpl	src/madness/mra/funcimpl.h	/^        FunctionImpl(const FunctionImpl<Q,NDIM>& other,$/;"	f	class:madness::FunctionImpl
FunctionImpl	src/madness/mra/funcimpl.h	/^    class FunctionImpl : public WorldObject< FunctionImpl<T,NDIM> > {$/;"	c	namespace:madness
FunctionInterface	src/madness/mra/function_interface.h	/^	class FunctionInterface : public FunctionFunctorInterface<T,NDIM> {$/;"	c	namespace:madness
FunctionInterface	src/madness/mra/function_interface.h	/^        FunctionInterface(const opT& op) : op(op) {}$/;"	f	class:madness::FunctionInterface
FunctionNode	src/madness/mra/funcimpl.h	/^        FunctionNode() :$/;"	f	class:madness::FunctionNode
FunctionNode	src/madness/mra/funcimpl.h	/^        FunctionNode(const FunctionNode<T, NDIM>& other) {$/;"	f	class:madness::FunctionNode
FunctionNode	src/madness/mra/funcimpl.h	/^        FunctionNode(const coeffT& coeff, bool has_children = false) :$/;"	f	class:madness::FunctionNode
FunctionNode	src/madness/mra/funcimpl.h	/^        FunctionNode(const coeffT& coeff, double norm_tree, bool has_children) :$/;"	f	class:madness::FunctionNode
FunctionNode	src/madness/mra/funcimpl.h	/^    class FunctionNode {$/;"	c	namespace:madness
FunctionPointerGrabber	src/madness/world/thread.h	/^        union FunctionPointerGrabber {$/;"	u	class:madness::PoolTaskInterface
FunctionSpace	src/madness/tensor/gmres.h	/^            FunctionSpace(World &world) : AbstractVectorSpace<$/;"	f	class:madness::FunctionSpace
FunctionSpace	src/madness/tensor/gmres.h	/^    class FunctionSpace : public AbstractVectorSpace<Function<T, NDIM>,$/;"	c	namespace:madness
FunctorInterface	src/madness/mra/function_interface.h	/^        FunctorInterface(const opT& op) : op(op) {}$/;"	f	class:madness::FunctorInterface
FunctorInterface	src/madness/mra/function_interface.h	/^    class FunctorInterface : public FunctionFunctorInterface<T,NDIM> {$/;"	c	namespace:madness
FunctorInterfaceWrapper	src/examples/navstokes_cosines.cc	/^    FunctorInterfaceWrapper(double (*f)(const coordT&)) : f(f) {}$/;"	f	struct:FunctorInterfaceWrapper
FunctorInterfaceWrapper	src/examples/navstokes_cosines.cc	/^struct FunctorInterfaceWrapper : public FunctionFunctorInterface<double,3> {$/;"	s	file:
FunctorInterfaceWrapper	src/madness/mra/testpdiff.cc	/^    FunctorInterfaceWrapper(double (*f)(const coordT&)) : f(f) {}$/;"	f	struct:FunctorInterfaceWrapper
FunctorInterfaceWrapper	src/madness/mra/testpdiff.cc	/^struct FunctorInterfaceWrapper : public FunctionFunctorInterface<double,NDIM> {$/;"	s	file:
FunctorOutput	src/apps/interior_bc/test_problems.h	/^enum FunctorOutput { SURFACE, DIRICHLET_RHS, EXACT, DOMAIN_MASK };$/;"	g
Future	src/madness/world/future.h	/^        Future() : v() { }$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        Future() :$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        Future() {}$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        Future(const Future<T>& other) :$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        Future(const RemoteReference< FutureImpl<void> >& remote_ref) {}$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        Future(const archive::BufferInputArchive& input_arch) {$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        Future(const vectorT& v) : DependencyInterface(v.size()), v(v) {$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        explicit Future(const T& t) :$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        explicit Future(const archive::BufferInputArchive& input_arch) :$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        explicit Future(const archive::BufferInputArchive& input_arch) {$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        explicit Future(const dddd& blah) : f(), value(nullptr) { }$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^        explicit Future(const remote_refT& remote_ref) :$/;"	f	class:madness::Future
Future	src/madness/world/future.h	/^    Future<void> {$/;"	c	namespace:madness
Future	src/madness/world/future.h	/^    class Future {$/;"	c	namespace:madness
Future	src/madness/world/future.h	/^    class Future< Future<T> > {$/;"	c	namespace:madness
Future	src/madness/world/future.h	/^    class Future< std::vector< Future<T> > > : public DependencyInterface, private NO_DEFAULTS {$/;"	c	namespace:madness
FutureImpl	src/madness/world/future.h	/^        FutureImpl()$/;"	f	class:madness::FutureImpl
FutureImpl	src/madness/world/future.h	/^        FutureImpl(const RemoteReference< FutureImpl<T> >& remote_ref)$/;"	f	class:madness::FutureImpl
FutureImpl	src/madness/world/future.h	/^    class FutureImpl : private Spinlock {$/;"	c	namespace:madness
FutureImpl	src/madness/world/future.h	/^    class FutureImpl<void> {};$/;"	c	namespace:madness
Futures and STL vectors	doc/Latex/parallel-runtime.tex	/^\\subsection{Futures and STL vectors}$/;"	b
G	src/apps/interior_bc/test_problems.h	/^        const SeparatedConvolution<double, 3> &G;$/;"	m	class:DirichletCondIntOp
G	src/examples/tdse1d.cc	/^pcomplex_operatorT G;$/;"	v
G	src/examples/test_derivative.cc	/^      G(int n, double p) : n(n), p(p) {}$/;"	f	class:G
G	src/examples/test_derivative.cc	/^class G : public FunctionFunctorInterface<double,1> $/;"	c	file:
G	src/examples/testspectralprop.cc	/^complex_operatorT* G(World& world, double dt) {$/;"	f
G0	src/madness/mra/testperiodic.cc	/^int G0 = 1;$/;"	v
G1	src/madness/mra/testperiodic.cc	/^int G1 = 2;$/;"	v
G2	src/madness/mra/testperiodic.cc	/^int G2 = 2;$/;"	v
GBDM	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	18;"	d
GCD	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::GCD() const { return gcd_; }$/;"	f	class:elem::Grid
GCD	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int GCD( Int a, Int b )$/;"	f	namespace:elem
GCDMatrix	src/madness/external/elemental/include/elemental/matrices/GCDMatrix.hpp	/^GCDMatrix( BlockDistMatrix<T,U,V>& G, Int m, Int n )$/;"	f	namespace:elem
GCDMatrix	src/madness/external/elemental/include/elemental/matrices/GCDMatrix.hpp	/^GCDMatrix( DistMatrix<T,U,V>& G, Int m, Int n )$/;"	f	namespace:elem
GCDMatrix	src/madness/external/elemental/include/elemental/matrices/GCDMatrix.hpp	/^GCDMatrix( Matrix<T>& G, Int m, Int n )$/;"	f	namespace:elem
GCD_	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int GCD_( Int a, Int b )$/;"	f	namespace:elem
GDB_EXECUTABLE	build/src/madness/config.h	142;"	d
GDM	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	17;"	d
GENERAL	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    GENERAL,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
GENERATOR	src/madness/world/thread.h	/^        static const unsigned long GENERATOR = 1ul<<8; \/\/\/< Mask for generator bit.$/;"	m	class:madness::TaskAttributes
GENTENSOR_H_	src/madness/tensor/gentensor.h	35;"	d
GFit	src/madness/mra/gfit.h	/^	GFit() {}$/;"	f	class:madness::GFit
GFit	src/madness/mra/gfit.h	/^	GFit(const funcT& f) {$/;"	f	class:madness::GFit
GFit	src/madness/mra/gfit.h	/^class GFit {$/;"	c	namespace:madness
GGLOBAL_H	src/madness/external/elemental/external/pmrrr/include/global.h	42;"	d
GKS	src/madness/external/elemental/include/elemental/matrices/GKS.hpp	/^GKS( BlockDistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
GKS	src/madness/external/elemental/include/elemental/matrices/GKS.hpp	/^GKS( DistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
GKS	src/madness/external/elemental/include/elemental/matrices/GKS.hpp	/^GKS( Matrix<F>& A, Int n )$/;"	f	namespace:elem
GLM	src/madness/external/elemental/include/elemental/lapack-like/solve/GLM.hpp	/^GLM( DistMatrix<F>& A, DistMatrix<F>& B, DistMatrix<F>& D, DistMatrix<F>& Y )$/;"	f	namespace:elem
GLM	src/madness/external/elemental/include/elemental/lapack-like/solve/GLM.hpp	/^GLM( Matrix<F>& A, Matrix<F>& B, Matrix<F>& D, Matrix<F>& Y )$/;"	f	namespace:elem
GLOBAL_TO_LOCAL	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^enum AxpyType { LOCAL_TO_GLOBAL, GLOBAL_TO_LOCAL };$/;"	e	enum:elem::AxpyTypeNS::AxpyType
GMRES	src/madness/tensor/gmres.h	/^    void GMRES(const AbstractVectorSpace<T, real_type, scalar_type> &space,$/;"	f	namespace:madness
GPUHelloWorldTask	src/madness/world/test_world.cc	/^class GPUHelloWorldTask : public TaskInterface {$/;"	c	file:
GQR	src/madness/external/elemental/include/elemental/lapack-like/factor/GQR.hpp	/^GQR$/;"	f	namespace:elem
GQR	src/madness/external/elemental/include/elemental/lapack-like/factor/GQR.hpp	/^GQR( DistMatrix<F>& A, DistMatrix<F>& B )$/;"	f	namespace:elem
GQR	src/madness/external/elemental/include/elemental/lapack-like/factor/GQR.hpp	/^GQR( Matrix<F>& A, Matrix<F>& B )$/;"	f	namespace:elem
GRAYSCALE	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    GRAYSCALE,$/;"	e	enum:elem::ColorMapNS::ColorMap
GRAYSCALE_DISCRETE	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    GRAYSCALE_DISCRETE,$/;"	e	enum:elem::ColorMapNS::ColorMap
GROUND_STATE	src/apps/chem/CCStructures.h	/^  enum CCState {CCSTATE_UNDEFINED,GROUND_STATE,EXCITED_STATE};$/;"	e	enum:madness::CCState
GROUP_EMPTY	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Group GROUP_EMPTY = MPI_GROUP_EMPTY;$/;"	m	namespace:elem::mpi
GROUP_NULL	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Group GROUP_NULL = MPI_GROUP_NULL;$/;"	m	namespace:elem::mpi
GRQ	src/madness/external/elemental/include/elemental/lapack-like/factor/GRQ.hpp	/^GRQ$/;"	f	namespace:elem
GRQ	src/madness/external/elemental/include/elemental/lapack-like/factor/GRQ.hpp	/^GRQ( DistMatrix<F>& A, DistMatrix<F>& B )$/;"	f	namespace:elem
GRQ	src/madness/external/elemental/include/elemental/lapack-like/factor/GRQ.hpp	/^GRQ( Matrix<F>& A, Matrix<F>& B )$/;"	f	namespace:elem
GTEST_0_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	57;"	d
GTEST_0_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	983;"	d
GTEST_0_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	80;"	d
GTEST_0_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	995;"	d
GTEST_10_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	76;"	d
GTEST_10_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	993;"	d
GTEST_10_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1005;"	d
GTEST_10_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	97;"	d
GTEST_1_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class GTEST_1_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_1_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	58;"	d
GTEST_1_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	984;"	d
GTEST_1_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	81;"	d
GTEST_1_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	996;"	d
GTEST_2_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class GTEST_2_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_2_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	60;"	d
GTEST_2_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	985;"	d
GTEST_2_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	82;"	d
GTEST_2_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	997;"	d
GTEST_3_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class GTEST_3_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_3_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	62;"	d
GTEST_3_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	986;"	d
GTEST_3_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	83;"	d
GTEST_3_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	998;"	d
GTEST_4_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class GTEST_4_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_4_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	64;"	d
GTEST_4_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	987;"	d
GTEST_4_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	84;"	d
GTEST_4_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	999;"	d
GTEST_5_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class GTEST_5_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_5_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	66;"	d
GTEST_5_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	988;"	d
GTEST_5_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1000;"	d
GTEST_5_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	86;"	d
GTEST_6_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class GTEST_6_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_6_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	68;"	d
GTEST_6_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	989;"	d
GTEST_6_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1001;"	d
GTEST_6_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	88;"	d
GTEST_7_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class GTEST_7_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_7_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	70;"	d
GTEST_7_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	990;"	d
GTEST_7_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1002;"	d
GTEST_7_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	90;"	d
GTEST_8_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class GTEST_8_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_8_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	72;"	d
GTEST_8_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	991;"	d
GTEST_8_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1003;"	d
GTEST_8_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	92;"	d
GTEST_9_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class GTEST_9_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_9_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	74;"	d
GTEST_9_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	992;"	d
GTEST_9_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1004;"	d
GTEST_9_TYPENAMES_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	94;"	d
GTEST_ADD_REFERENCE_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	760;"	d
GTEST_ADD_REF_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1009;"	d
GTEST_ADD_REF_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	134;"	d
GTEST_AMBIGUOUS_ELSE_BLOCKER_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	697;"	d
GTEST_API_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	760;"	d
GTEST_API_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	768;"	d
GTEST_ASSERT_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	75;"	d
GTEST_ASSERT_EQ	src/madness/external/gtest/include/gtest/gtest.h	1992;"	d
GTEST_ASSERT_GE	src/madness/external/gtest/include/gtest/gtest.h	2002;"	d
GTEST_ASSERT_GT	src/madness/external/gtest/include/gtest/gtest.h	2004;"	d
GTEST_ASSERT_LE	src/madness/external/gtest/include/gtest/gtest.h	1998;"	d
GTEST_ASSERT_LT	src/madness/external/gtest/include/gtest/gtest.h	2000;"	d
GTEST_ASSERT_NE	src/madness/external/gtest/include/gtest/gtest.h	1996;"	d
GTEST_ATTRIBUTE_UNUSED_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  } GTEST_ATTRIBUTE_UNUSED_;$/;"	m	class:testing::internal::DeathTest	typeref:class:testing::internal::DeathTest::ReturnSentinel
GTEST_ATTRIBUTE_UNUSED_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^} GTEST_ATTRIBUTE_UNUSED_;  \/\/ A ScopedTrace object does its job in its$/;"	m	namespace:testing::internal	typeref:class:testing::internal::ScopedTrace
GTEST_ATTRIBUTE_UNUSED_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	714;"	d
GTEST_ATTRIBUTE_UNUSED_	src/madness/external/gtest/src/gtest-internal-inl.h	/^} GTEST_ATTRIBUTE_UNUSED_;$/;"	m	namespace:testing::internal	typeref:class:testing::internal::GTestFlagSaver
GTEST_BIND_	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	1640;"	d
GTEST_BY_REF_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1008;"	d
GTEST_BY_REF_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	124;"	d
GTEST_CAN_COMPARE_NULL	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1599;"	d
GTEST_CAN_STREAM_RESULTS_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	683;"	d
GTEST_CASE_NAMESPACE_	src/madness/external/gtest/include/gtest/gtest-typed-test.h	199;"	d
GTEST_CHECK_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1060;"	d
GTEST_CHECK_POSIX_SUCCESS_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1072;"	d
GTEST_COMPILE_ASSERT_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	815;"	d
GTEST_CONCAT_TOKEN_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	73;"	d
GTEST_CONCAT_TOKEN_IMPL_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	74;"	d
GTEST_DEATH_TEST_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	185;"	d
GTEST_DEATH_TEST_CHECK_	src/madness/external/gtest/src/gtest-death-test.cc	272;"	d	file:
GTEST_DEATH_TEST_CHECK_SYSCALL_	src/madness/external/gtest/src/gtest-death-test.cc	289;"	d	file:
GTEST_DECLARE_STATIC_MUTEX_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1380;"	d
GTEST_DECLARE_STATIC_MUTEX_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1553;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1007;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	49;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	51;"	d
GTEST_DECLARE_bool_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1912;"	d
GTEST_DECLARE_int32_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1913;"	d
GTEST_DECLARE_string_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1915;"	d
GTEST_DEFINE_STATIC_MUTEX_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1389;"	d
GTEST_DEFINE_STATIC_MUTEX_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1556;"	d
GTEST_DEFINE_bool_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1919;"	d
GTEST_DEFINE_int32_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1921;"	d
GTEST_DEFINE_string_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1923;"	d
GTEST_DEV_EMAIL_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	215;"	d
GTEST_DISALLOW_ASSIGN_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	721;"	d
GTEST_DISALLOW_COPY_AND_ASSIGN_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	726;"	d
GTEST_ELLIPSIS_NEEDS_POD_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1597;"	d
GTEST_ENV_HAS_STD_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	529;"	d
GTEST_ENV_HAS_TR1_TUPLE_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	522;"	d
GTEST_ERROR	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  GTEST_ERROR,$/;"	e	enum:testing::internal::GTestLogSeverity
GTEST_EXCLUSIVE_LOCK_REQUIRED_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1927;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	161;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	178;"	d
GTEST_EXECUTE_STATEMENT_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	224;"	d
GTEST_FAIL	src/madness/external/gtest/include/gtest/gtest.h	1872;"	d
GTEST_FATAL	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  GTEST_FATAL$/;"	e	enum:testing::internal::GTestLogSeverity
GTEST_FATAL_FAILURE_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1031;"	d
GTEST_FLAG	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1909;"	d
GTEST_FLAG_PREFIX_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	216;"	d
GTEST_FLAG_PREFIX_DASH_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	217;"	d
GTEST_FLAG_PREFIX_UPPER_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	218;"	d
GTEST_GCC_VER_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	225;"	d
GTEST_HAS_ALT_PATH_SEP_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1643;"	d
GTEST_HAS_ALT_PATH_SEP_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1648;"	d
GTEST_HAS_CLONE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	616;"	d
GTEST_HAS_COMBINE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	674;"	d
GTEST_HAS_CXXABI_H_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	780;"	d
GTEST_HAS_DEATH_TEST	src/madness/external/gtest/include/gtest/internal/gtest-port.h	650;"	d
GTEST_HAS_EXCEPTIONS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	348;"	d
GTEST_HAS_EXCEPTIONS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	351;"	d
GTEST_HAS_EXCEPTIONS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	356;"	d
GTEST_HAS_EXCEPTIONS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	359;"	d
GTEST_HAS_EXCEPTIONS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	363;"	d
GTEST_HAS_EXCEPTIONS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	367;"	d
GTEST_HAS_GETTIMEOFDAY_	src/madness/external/gtest/src/gtest.cc	111;"	d	file:
GTEST_HAS_GETTIMEOFDAY_	src/madness/external/gtest/src/gtest.cc	57;"	d	file:
GTEST_HAS_GETTIMEOFDAY_	src/madness/external/gtest/src/gtest.cc	70;"	d	file:
GTEST_HAS_GETTIMEOFDAY_	src/madness/external/gtest/src/gtest.cc	74;"	d	file:
GTEST_HAS_GETTIMEOFDAY_	src/madness/external/gtest/src/gtest.cc	98;"	d	file:
GTEST_HAS_GLOBAL_STRING	src/madness/external/gtest/include/gtest/internal/gtest-port.h	384;"	d
GTEST_HAS_GLOBAL_WSTRING	src/madness/external/gtest/include/gtest/internal/gtest-port.h	405;"	d
GTEST_HAS_PARAM_TEST	src/madness/external/gtest/include/gtest/internal/gtest-port.h	657;"	d
GTEST_HAS_POSIX_RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	308;"	d
GTEST_HAS_POSIX_RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	310;"	d
GTEST_HAS_PTHREAD	src/madness/external/gtest/include/gtest/internal/gtest-port.h	479;"	d
GTEST_HAS_RTTI	src/madness/external/gtest/include/gtest/internal/gtest-port.h	417;"	d
GTEST_HAS_RTTI	src/madness/external/gtest/include/gtest/internal/gtest-port.h	419;"	d
GTEST_HAS_RTTI	src/madness/external/gtest/include/gtest/internal/gtest-port.h	432;"	d
GTEST_HAS_RTTI	src/madness/external/gtest/include/gtest/internal/gtest-port.h	434;"	d
GTEST_HAS_RTTI	src/madness/external/gtest/include/gtest/internal/gtest-port.h	437;"	d
GTEST_HAS_RTTI	src/madness/external/gtest/include/gtest/internal/gtest-port.h	445;"	d
GTEST_HAS_RTTI	src/madness/external/gtest/include/gtest/internal/gtest-port.h	452;"	d
GTEST_HAS_RTTI	src/madness/external/gtest/include/gtest/internal/gtest-port.h	454;"	d
GTEST_HAS_RTTI	src/madness/external/gtest/include/gtest/internal/gtest-port.h	460;"	d
GTEST_HAS_SEH	src/madness/external/gtest/include/gtest/internal/gtest-port.h	749;"	d
GTEST_HAS_STD_STRING	src/madness/external/gtest/include/gtest/internal/gtest-port.h	374;"	d
GTEST_HAS_STD_WSTRING	src/madness/external/gtest/include/gtest/internal/gtest-port.h	397;"	d
GTEST_HAS_STREAM_REDIRECTION	src/madness/external/gtest/include/gtest/internal/gtest-port.h	635;"	d
GTEST_HAS_TR1_TUPLE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	498;"	d
GTEST_HAS_TR1_TUPLE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	501;"	d
GTEST_HAS_TYPED_TEST	src/madness/external/gtest/include/gtest/internal/gtest-port.h	665;"	d
GTEST_HAS_TYPED_TEST_P	src/madness/external/gtest/include/gtest/internal/gtest-port.h	666;"	d
GTEST_IMPLEMENTATION_	src/madness/external/gtest/src/gtest-death-test.cc	74;"	d	file:
GTEST_IMPLEMENTATION_	src/madness/external/gtest/src/gtest-death-test.cc	76;"	d	file:
GTEST_IMPLEMENTATION_	src/madness/external/gtest/src/gtest-port.cc	69;"	d	file:
GTEST_IMPLEMENTATION_	src/madness/external/gtest/src/gtest-port.cc	71;"	d	file:
GTEST_IMPLEMENTATION_	src/madness/external/gtest/src/gtest-test-part.cc	41;"	d	file:
GTEST_IMPLEMENTATION_	src/madness/external/gtest/src/gtest-test-part.cc	43;"	d	file:
GTEST_IMPLEMENTATION_	src/madness/external/gtest/src/gtest.cc	134;"	d	file:
GTEST_IMPLEMENTATION_	src/madness/external/gtest/src/gtest.cc	136;"	d	file:
GTEST_IMPL_CMP_HELPER_	src/madness/external/gtest/include/gtest/gtest.h	1558;"	d
GTEST_IMPL_CMP_HELPER_	src/madness/external/gtest/include/gtest/gtest.h	1587;"	d
GTEST_IMPL_CMP_HELPER_	src/madness/external/gtest/src/gtest.cc	1132;"	d	file:
GTEST_IMPL_CMP_HELPER_	src/madness/external/gtest/src/gtest.cc	1161;"	d	file:
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	src/madness/external/gtest/include/gtest/gtest.h	1374;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	src/madness/external/gtest/include/gtest/gtest.h	1388;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	src/madness/external/gtest/include/gtest/gtest.h	1393;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	src/madness/external/gtest/include/gtest/gtest.h	1420;"	d
GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_	src/madness/external/gtest/include/gtest/gtest-death-test.h	39;"	d
GTEST_INCLUDE_GTEST_GTEST_H_	src/madness/external/gtest/include/gtest/gtest.h	52;"	d
GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_	src/madness/external/gtest/include/gtest/gtest-message.h	47;"	d
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_	src/madness/external/gtest/include/gtest/gtest-param-test.h	42;"	d
GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	36;"	d
GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_	src/madness/external/gtest/include/gtest/gtest-printers.h	96;"	d
GTEST_INCLUDE_GTEST_GTEST_PROD_H_	src/madness/external/gtest/include/gtest/gtest_prod.h	35;"	d
GTEST_INCLUDE_GTEST_GTEST_SPI_H_	src/madness/external/gtest/include/gtest/gtest-spi.h	36;"	d
GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_	src/madness/external/gtest/include/gtest/gtest-test-part.h	34;"	d
GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_	src/madness/external/gtest/include/gtest/gtest-typed-test.h	33;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	38;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	41;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	38;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	69;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	47;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	35;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	41;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_	src/madness/external/gtest/include/gtest/internal/gtest-string.h	42;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	39;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	45;"	d
GTEST_INFO	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  GTEST_INFO,$/;"	e	enum:testing::internal::GTestLogSeverity
GTEST_IS_NULL_LITERAL_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	130;"	d
GTEST_IS_NULL_LITERAL_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	132;"	d
GTEST_IS_THREADSAFE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1536;"	d
GTEST_IS_THREADSAFE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1580;"	d
GTEST_LANG_CXX11	src/madness/external/gtest/include/gtest/internal/gtest-port.h	279;"	d
GTEST_LANG_CXX11	src/madness/external/gtest/include/gtest/internal/gtest-port.h	281;"	d
GTEST_LOCK_EXCLUDED_	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^      GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex) {$/;"	f	class:testing::internal::linked_ptr_internal
GTEST_LOCK_EXCLUDED_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1928;"	d
GTEST_LOCK_EXCLUDED_	src/madness/external/gtest/src/gtest.cc	/^        GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	src/madness/external/gtest/src/gtest.cc	/^    GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	src/madness/external/gtest/src/gtest.cc	/^    GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing::internal
GTEST_LOCK_EXCLUDED_	src/madness/external/gtest/src/gtest.cc	/^    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOG_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1039;"	d
GTEST_MESSAGE_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1028;"	d
GTEST_MESSAGE_AT_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1024;"	d
GTEST_MUST_USE_RESULT_	src/madness/external/gtest/include/gtest/gtest.h	/^  int Run() GTEST_MUST_USE_RESULT_;$/;"	m	class:testing::UnitTest
GTEST_MUST_USE_RESULT_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	736;"	d
GTEST_NAME_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	219;"	d
GTEST_NEEDS_IS_POINTER_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1607;"	d
GTEST_NONFATAL_FAILURE_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1034;"	d
GTEST_NO_INLINE_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	773;"	d
GTEST_NO_INLINE_	src/madness/external/gtest/src/gtest-death-test.cc	/^void StackLowerThanAddress(const void* ptr, bool* result) GTEST_NO_INLINE_;$/;"	m	namespace:testing::internal	file:
GTEST_NO_INLINE_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::string CurrentOsStackTraceExceptTop(int skip_count) GTEST_NO_INLINE_;$/;"	m	class:testing::internal::UnitTestImpl
GTEST_OS_AIX	src/madness/external/gtest/include/gtest/internal/gtest-port.h	261;"	d
GTEST_OS_CYGWIN	src/madness/external/gtest/include/gtest/internal/gtest-port.h	231;"	d
GTEST_OS_HPUX	src/madness/external/gtest/include/gtest/internal/gtest-port.h	263;"	d
GTEST_OS_IOS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	246;"	d
GTEST_OS_IOS_SIMULATOR	src/madness/external/gtest/include/gtest/internal/gtest-port.h	248;"	d
GTEST_OS_LINUX	src/madness/external/gtest/include/gtest/internal/gtest-port.h	252;"	d
GTEST_OS_LINUX_ANDROID	src/madness/external/gtest/include/gtest/internal/gtest-port.h	254;"	d
GTEST_OS_MAC	src/madness/external/gtest/include/gtest/internal/gtest-port.h	244;"	d
GTEST_OS_NACL	src/madness/external/gtest/include/gtest/internal/gtest-port.h	265;"	d
GTEST_OS_OPENBSD	src/madness/external/gtest/include/gtest/internal/gtest-port.h	267;"	d
GTEST_OS_QNX	src/madness/external/gtest/include/gtest/internal/gtest-port.h	269;"	d
GTEST_OS_SOLARIS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	259;"	d
GTEST_OS_SYMBIAN	src/madness/external/gtest/include/gtest/internal/gtest-port.h	233;"	d
GTEST_OS_WINDOWS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	235;"	d
GTEST_OS_WINDOWS_DESKTOP	src/madness/external/gtest/include/gtest/internal/gtest-port.h	241;"	d
GTEST_OS_WINDOWS_MINGW	src/madness/external/gtest/include/gtest/internal/gtest-port.h	239;"	d
GTEST_OS_WINDOWS_MOBILE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	237;"	d
GTEST_OS_ZOS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	257;"	d
GTEST_PATH_MAX_	src/madness/external/gtest/src/gtest-filepath.cc	52;"	d	file:
GTEST_PATH_MAX_	src/madness/external/gtest/src/gtest-filepath.cc	54;"	d	file:
GTEST_PATH_MAX_	src/madness/external/gtest/src/gtest-filepath.cc	56;"	d	file:
GTEST_PATH_MAX_	src/madness/external/gtest/src/gtest-filepath.cc	58;"	d	file:
GTEST_PATH_SEP_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1642;"	d
GTEST_PATH_SEP_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1647;"	d
GTEST_PRED1_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	106;"	d
GTEST_PRED2_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	152;"	d
GTEST_PRED3_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	205;"	d
GTEST_PRED4_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	265;"	d
GTEST_PRED5_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	332;"	d
GTEST_PRED_FORMAT1_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	100;"	d
GTEST_PRED_FORMAT2_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	146;"	d
GTEST_PRED_FORMAT3_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	199;"	d
GTEST_PRED_FORMAT4_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	259;"	d
GTEST_PRED_FORMAT5_	src/madness/external/gtest/include/gtest/gtest_pred_impl.h	326;"	d
GTEST_PROJECT_URL_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	220;"	d
GTEST_REFERENCE_TO_CONST_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	772;"	d
GTEST_REGISTERED_TEST_NAMES_	src/madness/external/gtest/include/gtest/gtest-typed-test.h	213;"	d
GTEST_REMOVE_CONST_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	743;"	d
GTEST_REMOVE_REFERENCE_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	712;"	d
GTEST_REMOVE_REFERENCE_AND_CONST_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	747;"	d
GTEST_REPEATER_METHOD_	src/madness/external/gtest/src/gtest.cc	2957;"	d	file:
GTEST_REPEATER_METHOD_	src/madness/external/gtest/src/gtest.cc	2988;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	src/madness/external/gtest/src/gtest.cc	2967;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	src/madness/external/gtest/src/gtest.cc	2989;"	d	file:
GTEST_SNPRINTF_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	1828;"	d
GTEST_SRC_GTEST_INTERNAL_INL_H_	src/madness/external/gtest/src/gtest-internal-inl.h	38;"	d
GTEST_SUCCEED	src/madness/external/gtest/include/gtest/gtest.h	1881;"	d
GTEST_SUCCESS_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1037;"	d
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1043;"	d
GTEST_TEMPLATE_	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	1622;"	d
GTEST_TEST	src/madness/external/gtest/include/gtest/gtest.h	2235;"	d
GTEST_TEST_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1136;"	d
GTEST_TEST_ANY_THROW_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1086;"	d
GTEST_TEST_BOOLEAN_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1108;"	d
GTEST_TEST_CLASS_NAME_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1132;"	d
GTEST_TEST_NO_FATAL_FAILURE_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1117;"	d
GTEST_TEST_NO_THROW_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1072;"	d
GTEST_TEST_THROW_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	1046;"	d
GTEST_TUPLE_ELEMENT_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	1010;"	d
GTEST_TUPLE_ELEMENT_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	793;"	d
GTEST_TYPED_TEST_CASE_P_STATE_	src/madness/external/gtest/include/gtest/gtest-typed-test.h	206;"	d
GTEST_TYPE_PARAMS_	src/madness/external/gtest/include/gtest/gtest-typed-test.h	160;"	d
GTEST_UNSUPPORTED_DEATH_TEST_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	301;"	d
GTEST_USES_POSIX_RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	322;"	d
GTEST_USES_SIMPLE_RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	328;"	d
GTEST_USES_SIMPLE_RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	334;"	d
GTEST_USE_OWN_TR1_TUPLE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	533;"	d
GTEST_USE_OWN_TR1_TUPLE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	535;"	d
GTEST_WARNING	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  GTEST_WARNING,$/;"	e	enum:testing::internal::GTestLogSeverity
GTEST_WIDE_STRING_USES_UTF16_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	678;"	d
GTHPseudopotential	src/apps/chem/gth_pseudopotential.h	/^    GTHPseudopotential(World& world, Molecule molecule) : molecule(molecule) {}$/;"	f	class:madness::GTHPseudopotential
GTHPseudopotential	src/apps/chem/gth_pseudopotential.h	/^class GTHPseudopotential {$/;"	c	namespace:madness
GTHPseudopotential	src/apps/polar/gth_pseudopotential.h	/^    GTHPseudopotential(World& world, Molecule molecule) : molecule(molecule) {$/;"	f	class:GTHPseudopotential
GTHPseudopotential	src/apps/polar/gth_pseudopotential.h	/^class GTHPseudopotential {$/;"	c
GTestColor	src/madness/external/gtest/src/gtest.cc	/^enum GTestColor {$/;"	g	namespace:testing::internal	file:
GTestFlagSaver	src/madness/external/gtest/src/gtest-internal-inl.h	/^  GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
GTestFlagSaver	src/madness/external/gtest/src/gtest-internal-inl.h	/^class GTestFlagSaver {$/;"	c	namespace:testing::internal
GTestIsInitialized	src/madness/external/gtest/src/gtest.cc	/^static bool GTestIsInitialized() { return g_init_gtest_count != 0; }$/;"	f	namespace:testing::internal
GTestLog	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class GTEST_API_ GTestLog {$/;"	c	namespace:testing::internal
GTestLog	src/madness/external/gtest/src/gtest-port.cc	/^GTestLog::GTestLog(GTestLogSeverity severity, const char* file, int line)$/;"	f	class:testing::internal::GTestLog
GTestLogSeverity	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^enum GTestLogSeverity {$/;"	g	namespace:testing::internal
GTestMutexLock	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  explicit GTestMutexLock(Mutex*) {}  \/\/ NOLINT$/;"	f	class:testing::internal::GTestMutexLock
GTestMutexLock	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  explicit GTestMutexLock(MutexBase* mutex)$/;"	f	class:testing::internal::GTestMutexLock
GTestMutexLock	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class GTestMutexLock {$/;"	c	namespace:testing::internal
GTestShouldProcessSEH	src/madness/external/gtest/src/gtest.cc	/^int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {$/;"	f	class:testing::internal::UnitTestOptions
G_cache	src/examples/testspectralprop.cc	/^static std::vector< std::pair<double, complex_operatorT*> > G_cache;$/;"	v	file:
Gamma	src/examples/gygi_soltion.cc	/^  const double& Gamma;   \/\/the surface tention of the solvent$/;"	m	class:GygiPot	file:
Gamma	src/examples/gygi_soltion.cc	/^const double Gamma = 0.07197;$/;"	v
Gather	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Gather$/;"	f	namespace:elem::mpi
GatheredDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^constexpr Dist GatheredDist() { return ( U==CIRC ? CIRC : STAR ); }$/;"	f	namespace:elem
GaussFunctor	src/apps/chem/GuessFactory.h	/^	GaussFunctor(const double& width): width_(width){$/;"	f	class:madness::guessfactory::GaussFunctor
GaussFunctor	src/apps/chem/GuessFactory.h	/^	GaussFunctor(const double& width, const Tensor<double> c): width_(width), center(tensor_to_coord<double,3>(c)){$/;"	f	class:madness::guessfactory::GaussFunctor
GaussFunctor	src/apps/chem/GuessFactory.h	/^	GaussFunctor(const double& width, const coord_3d c): width_(width), center(c){$/;"	f	class:madness::guessfactory::GaussFunctor
GaussFunctor	src/apps/chem/GuessFactory.h	/^class GaussFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness::guessfactory
GaussSlater	src/apps/chem/correlationfactor.h	/^	GaussSlater(World& world, const Molecule& mol)$/;"	f	class:madness::GaussSlater
GaussSlater	src/apps/chem/correlationfactor.h	/^	enum corrfactype {None, GradientalGaussSlater, GaussSlater, LinearSlater,$/;"	e	enum:madness::NuclearCorrelationFactor::corrfactype
GaussSlater	src/apps/chem/correlationfactor.h	/^class GaussSlater : public NuclearCorrelationFactor {$/;"	c	namespace:madness
Gaussian	src/apps/interior_bc/test_problems.h	/^enum Mask { LLRV, Gaussian };$/;"	e	enum:Mask
Gaussian	src/apps/nick/wavef.cc	/^Gaussian::Gaussian(const double aa) {$/;"	f	class:Gaussian
Gaussian	src/apps/nick/wavef.h	/^class Gaussian : public baseWF$/;"	c
Gaussian	src/examples/dataloadbal.cc	/^    Gaussian(const coord_3d& center, double exponent, double coefficient)$/;"	f	class:Gaussian
Gaussian	src/examples/dataloadbal.cc	/^class Gaussian : public FunctionFunctorInterface<double,3> {$/;"	c	file:
Gaussian	src/madness/external/elemental/include/elemental/matrices/Gaussian.hpp	/^Gaussian( BlockDistMatrix<T,U,V>& A, Int m, Int n, T mean=0, Base<T> stddev=1 )$/;"	f	namespace:elem
Gaussian	src/madness/external/elemental/include/elemental/matrices/Gaussian.hpp	/^Gaussian( DistMatrix<T,U,V>& A, Int m, Int n, T mean=0, Base<T> stddev=1 )$/;"	f	namespace:elem
Gaussian	src/madness/external/elemental/include/elemental/matrices/Gaussian.hpp	/^Gaussian( Matrix<T>& A, Int m, Int n, T mean=0, Base<T> stddev=1 )$/;"	f	namespace:elem
Gaussian	src/madness/mra/testbsh.cc	/^    Gaussian(const coordT& center, double exponent, T coefficient)$/;"	f	class:Gaussian
Gaussian	src/madness/mra/testbsh.cc	/^class Gaussian : public FunctionFunctorInterface<T,NDIM> {$/;"	c	file:
Gaussian	src/madness/mra/testopdir.cc	/^    Gaussian(const coordT& center, double exponent, T coefficient)$/;"	f	class:Gaussian
Gaussian	src/madness/mra/testopdir.cc	/^class Gaussian : public FunctionFunctorInterface<T,NDIM> {$/;"	c	file:
Gaussian	src/madness/mra/testproj.cc	/^    Gaussian(const coordT& center, double exponent, T coefficient)$/;"	f	class:Gaussian
Gaussian	src/madness/mra/testproj.cc	/^class Gaussian : public FunctionFunctorInterface<T,NDIM> {$/;"	c	file:
Gaussian	src/madness/mra/testsuite.cc	/^    Gaussian(const coordT& center, double exponent, T coefficient)$/;"	f	class:Gaussian
Gaussian	src/madness/mra/testsuite.cc	/^class Gaussian : public FunctionFunctorInterface<T,NDIM> {$/;"	c	file:
Gaussian	src/madness/mra/testunaryop.cc	/^    Gaussian(const coordT& center, double exponent, T coefficient)$/;"	f	class:Gaussian
Gaussian	src/madness/mra/testunaryop.cc	/^class Gaussian : public FunctionFunctorInterface<T,NDIM> {$/;"	c	file:
Gaussian	src/madness/mra/testvmra.cc	/^    Gaussian(const coordT& center, double exponent, T coefficient)$/;"	f	class:Gaussian
Gaussian	src/madness/mra/testvmra.cc	/^class Gaussian : public FunctionFunctorInterface<T,NDIM> {$/;"	c	file:
GaussianConvolution1D	src/madness/mra/convolution1d.h	/^        explicit GaussianConvolution1D(int k, Q coeff, double expnt,$/;"	f	class:madness::GaussianConvolution1D
GaussianConvolution1D	src/madness/mra/convolution1d.h	/^    class GaussianConvolution1D : public Convolution1D<Q> {$/;"	c	namespace:madness
GaussianConvolution1DCache	src/madness/mra/convolution1d.h	/^    struct GaussianConvolution1DCache {$/;"	s	namespace:madness
GaussianDomainMask	src/madness/mra/sdf_domainmask.h	/^        GaussianDomainMask() : epsilon(0.0) {} \/\/\/< Forbidden$/;"	f	class:madness::GaussianDomainMask
GaussianDomainMask	src/madness/mra/sdf_domainmask.h	/^        GaussianDomainMask(double epsilon)$/;"	f	class:madness::GaussianDomainMask
GaussianDomainMask	src/madness/mra/sdf_domainmask.h	/^    class GaussianDomainMask : public DomainMaskInterface {$/;"	c	namespace:madness
GaussianElimination	src/madness/external/elemental/include/elemental/lapack-like/solve/GaussianElimination.hpp	/^GaussianElimination( DistMatrix<F>& A, DistMatrix<F>& B )$/;"	f	namespace:elem
GaussianElimination	src/madness/external/elemental/include/elemental/lapack-like/solve/GaussianElimination.hpp	/^GaussianElimination( Matrix<F>& A, Matrix<F>& B )$/;"	f	namespace:elem
GaussianFunction	src/apps/adrian/gaussian.cc	/^GaussianFunction::GaussianFunction(const GaussianType type,$/;"	f	class:slymer::GaussianFunction
GaussianFunction	src/apps/adrian/gaussian.h	/^  GaussianFunction() : terms(0), center({{0,0,0}}), expcoeff(std::vector<double>{0.0}) {}$/;"	f	class:slymer::GaussianFunction
GaussianFunction	src/apps/adrian/gaussian.h	/^  GaussianFunction(const GaussianType type, const std::array<double, 3> &center,$/;"	f	class:slymer::GaussianFunction
GaussianFunction	src/apps/adrian/gaussian.h	/^class GaussianFunction : public BasisFunction {$/;"	c	namespace:slymer
GaussianFunction	src/apps/bryan/gaussian.cc	/^GaussianFunction::GaussianFunction(const GaussianType type,$/;"	f	class:slymer::GaussianFunction
GaussianFunction	src/apps/bryan/gaussian.h	/^  GaussianFunction() : terms(0), center({{0,0,0}}), expcoeff(std::vector<double>{0.0}) {}$/;"	f	class:slymer::GaussianFunction
GaussianFunction	src/apps/bryan/gaussian.h	/^  GaussianFunction(const GaussianType type, const std::array<double, 3> &center,$/;"	f	class:slymer::GaussianFunction
GaussianFunction	src/apps/bryan/gaussian.h	/^class GaussianFunction : public BasisFunction {$/;"	c	namespace:slymer
GaussianFunctor	src/apps/hf/ewald.cc	/^  GaussianFunctor(double coeff, double expnt)$/;"	f	class:GaussianFunctor
GaussianFunctor	src/apps/hf/ewald.cc	/^class GaussianFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
GaussianFunctor	src/apps/moldft/mcpfit.cc	/^    GaussianFunctor (double alpha) : alpha(alpha) {}$/;"	f	class:GaussianFunctor
GaussianFunctor	src/apps/moldft/mcpfit.cc	/^class GaussianFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
GaussianFunctor	src/apps/polar/mcpfit.cc	/^    GaussianFunctor (double alpha) : alpha(alpha) {}$/;"	f	class:GaussianFunctor
GaussianFunctor	src/apps/polar/mcpfit.cc	/^class GaussianFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
GaussianGenericFunctor	src/madness/mra/convolution1d.h	/^        GaussianGenericFunctor(Q coeff, double exponent, int m=0)$/;"	f	class:madness::GaussianGenericFunctor
GaussianGenericFunctor	src/madness/mra/convolution1d.h	/^    class GaussianGenericFunctor {$/;"	c	namespace:madness
GaussianGuess	src/apps/adrian/TDDFT.h	/^  GaussianGuess(const coordT &origin, const double alpha,$/;"	f	class:GaussianGuess
GaussianGuess	src/apps/adrian/TDDFT.h	/^class GaussianGuess : public FunctionFunctorInterface<double, NDIM> {$/;"	c
GaussianGuess	src/apps/adrian/TDHF.h	/^    GaussianGuess(const coordT& origin, const double alpha,$/;"	f	class:GaussianGuess
GaussianGuess	src/apps/adrian/TDHF.h	/^class GaussianGuess : public FunctionFunctorInterface<double,NDIM> {$/;"	c
GaussianGuess	src/apps/adrian/TDHF2.h	/^    GaussianGuess(const coordT& origin, const double alpha,$/;"	f	class:GaussianGuess
GaussianGuess	src/apps/adrian/TDHF2.h	/^class GaussianGuess : public FunctionFunctorInterface<double,NDIM> {$/;"	c
GaussianGuess	src/apps/adrian/test_ResponseFunction.cc	/^    GaussianGuess(const coordT& origin, const double alpha,$/;"	f	class:GaussianGuess
GaussianGuess	src/apps/adrian/test_ResponseFunction.cc	/^class GaussianGuess : public FunctionFunctorInterface<double,NDIM> {$/;"	c	file:
GaussianGuess	src/apps/bryan/TDHF.h	/^    GaussianGuess(const coordT& origin, const double alpha,$/;"	f	class:GaussianGuess
GaussianGuess	src/apps/bryan/TDHF.h	/^class GaussianGuess : public FunctionFunctorInterface<double,NDIM> {$/;"	c
GaussianGuess	src/apps/bryan/TDHF2.h	/^    GaussianGuess(const coordT& origin, const double alpha,$/;"	f	class:GaussianGuess
GaussianGuess	src/apps/bryan/TDHF2.h	/^class GaussianGuess : public FunctionFunctorInterface<double,NDIM> {$/;"	c
GaussianGuess	src/apps/bryan/test_ResponseFunction.cc	/^    GaussianGuess(const coordT& origin, const double alpha,$/;"	f	class:GaussianGuess
GaussianGuess	src/apps/bryan/test_ResponseFunction.cc	/^class GaussianGuess : public FunctionFunctorInterface<double,NDIM> {$/;"	c	file:
GaussianGuess	src/apps/chem/test_SCFOperators.cc	/^    GaussianGuess(const coordT& origin, const double alpha, int l)$/;"	f	class:GaussianGuess
GaussianGuess	src/apps/chem/test_SCFOperators.cc	/^    GaussianGuess(const coordT& origin, const double alpha,$/;"	f	class:GaussianGuess
GaussianGuess	src/apps/chem/test_SCFOperators.cc	/^class GaussianGuess : public FunctionFunctorInterface<T,NDIM> {$/;"	c	file:
GaussianPotential	src/madness/mra/testsuite.cc	/^    GaussianPotential(const coordT& center, double expnt, double coefficient)$/;"	f	class:GaussianPotential
GaussianPotential	src/madness/mra/testsuite.cc	/^class GaussianPotential : public FunctionFunctorInterface<double,3> {$/;"	c	file:
GaussianType	src/apps/adrian/gaussian.h	/^enum class GaussianType {$/;"	c	namespace:slymer
GaussianType	src/apps/bryan/gaussian.h	/^enum class GaussianType {$/;"	c	namespace:slymer
Gaussian_Functor	src/apps/adrian/gaussian.h	/^    Gaussian_Functor(GaussianFunction func, std::vector<madness::coord_3d> centers) : func(func), centers(centers) {}$/;"	f	class:slymer::Gaussian_Functor
Gaussian_Functor	src/apps/adrian/gaussian.h	/^class Gaussian_Functor : public madness::FunctionFunctorInterface<double, 3> {$/;"	c	namespace:slymer
Gaussian_Functor	src/apps/bryan/gaussian.h	/^    Gaussian_Functor(GaussianFunction func, std::vector<madness::coord_3d> centers) : func(func), centers(centers) {}$/;"	f	class:slymer::Gaussian_Functor
Gaussian_Functor	src/apps/bryan/gaussian.h	/^class Gaussian_Functor : public madness::FunctionFunctorInterface<double, 3> {$/;"	c	namespace:slymer
Gear	src/madness/external/elemental/include/elemental/matrices/Gear.hpp	/^Gear( BlockDistMatrix<T,U,V>& G, Int n, Int s, Int t )$/;"	f	namespace:elem
Gear	src/madness/external/elemental/include/elemental/matrices/Gear.hpp	/^Gear( DistMatrix<T,U,V>& G, Int n, Int s, Int t )$/;"	f	namespace:elem
Gear	src/madness/external/elemental/include/elemental/matrices/Gear.hpp	/^Gear( Matrix<T>& G, Int n, Int s, Int t )$/;"	f	namespace:elem
Gemm	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm.hpp	/^Gemm$/;"	f	namespace:elem
Gemm	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^inline void Gemm$/;"	f	namespace:elem::blas
Gemm	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Gemm$/;"	f	namespace:elem::blas
Gemv	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv.hpp	/^Gemv$/;"	f	namespace:elem
Gemv	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^inline void Gemv$/;"	f	namespace:elem::blas
Gemv	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Gemv$/;"	f	namespace:elem::blas
GemvN	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv/N.hpp	/^GemvN$/;"	f	namespace:elem::internal
GemvT	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv/T.hpp	/^GemvT$/;"	f	namespace:elem::internal
GenTensor	src/madness/tensor/gentensor.h	/^		GenTensor<T>() : Tensor<T>() {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^		GenTensor<T>(const SRConf<T>& sr1) : Tensor<T>() {MADNESS_EXCEPTION("no ctor with SRConf: use HAVE_GENTENSOR",1);}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^		GenTensor<T>(const Tensor<T>& t1) : Tensor<T>(t1) {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^		GenTensor<T>(const Tensor<T>& t1, const TensorArgs& targs) : Tensor<T>(t1) {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^		GenTensor<T>(const Tensor<T>& t1, double eps, const TensorType tt) : Tensor<T>(t1) {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^		GenTensor<T>(const TensorType tt): Tensor<T>() {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^		GenTensor<T>(std::vector<long> v, const TensorArgs& targs) : Tensor<T>(v) {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^		GenTensor<T>(std::vector<long> v, const TensorType& tt) : Tensor<T>(v) {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^	class GenTensor : public Tensor<T> {$/;"	c	namespace:madness
GenTensor	src/madness/tensor/gentensor.h	/^    GenTensor<T>() : LowRankTensor<T>() {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^    GenTensor<T>(const GenTensor<T>& g) : LowRankTensor<T>(g) {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^    GenTensor<T>(const LowRankTensor<T>& g) : LowRankTensor<T>(g) {}$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^    GenTensor<T>(const SRConf<T>& sr1) : LowRankTensor<T>(SVDTensor<T>(sr1)) {$/;"	f	class:madness::GenTensor
GenTensor	src/madness/tensor/gentensor.h	/^class GenTensor : public LowRankTensor<T> {$/;"	c	namespace:madness
GenTensorTest	src/madness/mra/test_mra6.cc	/^        GenTensorTest() {}$/;"	f	class:__anon12::GenTensorTest
GenTensorTest	src/madness/mra/test_mra6.cc	/^    class GenTensorTest : public ::testing::Test {$/;"	c	namespace:__anon12	file:
GenTensorTestTypes	src/madness/mra/test_mra6.cc	/^    typedef ::testing::Types<float, double, float_complex, double_complex> GenTensorTestTypes;$/;"	t	namespace:__anon12	file:
GeneralBlockDistMatrix	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^class GeneralBlockDistMatrix : public AbstractBlockDistMatrix<T>$/;"	c	namespace:elem
GeneralBlockDistMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::GeneralBlockDistMatrix$/;"	f	class:elem::GeneralBlockDistMatrix
GeneralDistMatrix	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^class GeneralDistMatrix : public AbstractDistMatrix<T>$/;"	c	namespace:elem
GeneralDistMatrix	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::GeneralDistMatrix( const elem::Grid& grid, Int root )$/;"	f	class:elem::GeneralDistMatrix
GeneralFit	src/madness/mra/gfit.h	/^	static GFit GeneralFit() {$/;"	f	class:madness::GFit
Generate	src/madness/external/gtest/src/gtest.cc	/^UInt32 Random::Generate(UInt32 range) {$/;"	f	class:testing::internal::Random
GenerateUniqueFileName	src/madness/external/gtest/src/gtest-filepath.cc	/^FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
Generator	src/madness/external/elemental/src/core/global.cpp	/^std::mt19937& Generator()$/;"	f	namespace:elem
GeneratorCreationFunc	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef ParamGenerator<ParamType>(GeneratorCreationFunc)();$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
GenericConvolution1D	src/madness/mra/convolution1d.h	/^        GenericConvolution1D() {}$/;"	f	class:madness::GenericConvolution1D
GenericConvolution1D	src/madness/mra/convolution1d.h	/^        GenericConvolution1D(int k, const opT& op, int maxR, double arg = 0.0)$/;"	f	class:madness::GenericConvolution1D
GenericConvolution1D	src/madness/mra/convolution1d.h	/^    class GenericConvolution1D : public Convolution1D<Q> {$/;"	c	namespace:madness
Geometry optimization	doc/Latex/apps/moldft/manual.tex	/^\\section{Geometry optimization}$/;"	s
Geometry section	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\paragraph{Geometry section:} Begins with \\textit{geometry} and ends with \\textit{end}. Contains the molecular coordinates in atomic units$/;"	P
Ger	src/madness/external/elemental/include/elemental/blas-like/level2/Ger.hpp	/^Ger$/;"	f	namespace:elem
Ger	src/madness/external/elemental/include/elemental/blas-like/level2/Ger.hpp	/^Ger( T alpha, const Matrix<T>& x, const Matrix<T>& y, Matrix<T>& A )$/;"	f	namespace:elem
Ger	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Ger$/;"	f	namespace:elem::blas
Gerc	src/madness/external/elemental/include/elemental/blas-like/level2/Ger.hpp	/^Gerc$/;"	f	namespace:elem
Gerc	src/madness/external/elemental/include/elemental/blas-like/level2/Ger.hpp	/^Gerc( T alpha, const Matrix<T>& x, const Matrix<T>& y, Matrix<T>& A )$/;"	f	namespace:elem
Gerc	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Gerc$/;"	f	namespace:elem::blas
Geru	src/madness/external/elemental/include/elemental/blas-like/level2/Geru.hpp	/^Geru$/;"	f	namespace:elem
Geru	src/madness/external/elemental/include/elemental/blas-like/level2/Geru.hpp	/^Geru( T alpha, const Matrix<T>& x, const Matrix<T>& y, Matrix<T>& A )$/;"	f	namespace:elem
Geru	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Geru$/;"	f	namespace:elem::blas
Get	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Get( Int i, Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
Get	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Get( Int i, Int j ) const$/;"	f	class:elem::AbstractDistMatrix
Get	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Get( Int i, Int j ) const$/;"	f	class:elem::Matrix
Get	src/madness/external/gtest/src/gtest-internal-inl.h	/^  HANDLE Get() const { return handle_; }$/;"	f	class:testing::internal::AutoHandle
GetAbsolutePathToOutputFile	src/madness/external/gtest/src/gtest.cc	/^std::string UnitTestOptions::GetAbsolutePathToOutputFile() {$/;"	f	class:testing::internal::UnitTestOptions
GetAddr	src/madness/external/muParser/muParserCallback.cpp	/^  void* ParserCallback::GetAddr() const $/;"	f	class:mu::ParserCallback
GetAnsiColorCode	src/madness/external/gtest/src/gtest.cc	/^const char* GetAnsiColorCode(GTestColor color) {$/;"	f	namespace:testing::internal
GetArgCount	src/madness/external/muParser/muParserToken.h	/^      int GetArgCount() const$/;"	f	class:mu::ParserToken
GetArgSep	src/madness/external/muParser/muParserBase.cpp	/^  char_type ParserBase::GetArgSep() const$/;"	f	class:mu::ParserBase
GetArgSep	src/madness/external/muParser/muParserTokenReader.cpp	/^  char_type ParserTokenReader::GetArgSep() const$/;"	f	class:mu::ParserTokenReader
GetArgc	src/madness/external/muParser/muParserCallback.cpp	/^  int ParserCallback::GetArgc() const $/;"	f	class:mu::ParserCallback
GetArgs	src/madness/external/elemental/src/core/global.cpp	/^Args& GetArgs()$/;"	f	namespace:elem
GetArgvsForDeathTestChildProcess	src/madness/external/gtest/src/gtest-death-test.cc	/^  GetArgvsForDeathTestChildProcess() {$/;"	f	class:testing::internal::ExecDeathTest	file:
GetAsString	src/madness/external/muParser/muParserToken.h	/^      const TString& GetAsString() const$/;"	f	class:mu::ParserToken
GetBoolAssertionFailureMessage	src/madness/external/gtest/src/gtest.cc	/^std::string GetBoolAssertionFailureMessage($/;"	f	namespace:testing::internal
GetBufSize	src/madness/external/muParser/muParserBytecode.cpp	/^  std::size_t ParserByteCode::GetBufSize() const$/;"	f	class:mu::ParserByteCode
GetCapturedStderr	src/madness/external/gtest/src/gtest-port.cc	/^std::string GetCapturedStderr() {$/;"	f	namespace:testing::internal
GetCapturedStdout	src/madness/external/gtest/src/gtest-port.cc	/^std::string GetCapturedStdout() {$/;"	f	namespace:testing::internal
GetCapturedStream	src/madness/external/gtest/src/gtest-port.cc	/^std::string GetCapturedStream(CapturedStream** captured_stream) {$/;"	f	namespace:testing::internal
GetCapturedString	src/madness/external/gtest/src/gtest-port.cc	/^  std::string GetCapturedString() {$/;"	f	class:testing::internal::CapturedStream
GetChar	src/madness/external/tinyxml/tinyxml.h	/^	inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
GetCode	src/madness/external/muParser/muParserCallback.cpp	/^  ECmdCode  ParserCallback::GetCode() const $/;"	f	class:mu::ParserCallback
GetCode	src/madness/external/muParser/muParserError.cpp	/^  EErrorCodes ParserError::GetCode() const$/;"	f	class:mu::ParserError
GetCode	src/madness/external/muParser/muParserToken.h	/^      ECmdCode GetCode() const$/;"	f	class:mu::ParserToken
GetColorAttribute	src/madness/external/gtest/src/gtest.cc	/^WORD GetColorAttribute(GTestColor color) {$/;"	f	namespace:testing::internal
GetColorMap	src/madness/external/elemental/src/core/global.cpp	/^ColorMap GetColorMap()$/;"	f	namespace:elem
GetConst	src/madness/external/muParser/muParserBase.cpp	/^  const valmap_type& ParserBase::GetConst() const$/;"	f	class:mu::ParserBase
GetCount	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int GetCount( Status& status )$/;"	f	namespace:elem::mpi
GetCurrentDir	src/madness/external/gtest/src/gtest-filepath.cc	/^FilePath FilePath::GetCurrentDir() {$/;"	f	class:testing::internal::FilePath
GetCurrentExecutableName	src/madness/external/gtest/src/gtest.cc	/^FilePath GetCurrentExecutableName() {$/;"	f	namespace:testing::internal
GetCurrentOsStackTraceExceptTop	src/madness/external/gtest/src/gtest.cc	/^std::string GetCurrentOsStackTraceExceptTop(UnitTest* \/*unit_test*\/,$/;"	f	namespace:testing::internal
GetDefaultFilter	src/madness/external/gtest/src/gtest.cc	/^static const char* GetDefaultFilter() {$/;"	f	namespace:testing
GetDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::GetDiagonal$/;"	f	class:elem::GeneralBlockDistMatrix
GetDiagonal	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::GetDiagonal$/;"	f	class:elem::GeneralDistMatrix
GetDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetDiagonal( Int offset ) const$/;"	f	class:elem::Matrix
GetDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetDiagonal( Matrix<T>& d, Int offset ) const$/;"	f	class:elem::Matrix
GetDiagonalHelper	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::GetDiagonalHelper$/;"	f	class:elem::GeneralBlockDistMatrix
GetDiagonalHelper	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::GetDiagonalHelper$/;"	f	class:elem::GeneralDistMatrix
GetDocument	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode
GetDocument	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode
GetElementOr	src/madness/external/gtest/src/gtest-internal-inl.h	/^inline E GetElementOr(const std::vector<E>& v, int i, E default_value) {$/;"	f	namespace:testing::internal
GetEntity	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
GetEnv	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline const char* GetEnv(const char* name) {$/;"	f	namespace:testing::internal::posix
GetEnviron	src/madness/external/gtest/src/gtest-death-test.cc	/^inline char** GetEnviron() { return environ; }$/;"	f	namespace:testing::internal
GetEnviron	src/madness/external/gtest/src/gtest-death-test.cc	/^inline char** GetEnviron() {$/;"	f	namespace:testing::internal
GetExpr	src/madness/external/muParser/muParserBase.cpp	/^  const string_type& ParserBase::GetExpr() const$/;"	f	class:mu::ParserBase
GetExpr	src/madness/external/muParser/muParserError.cpp	/^  const string_type& ParserError::GetExpr() const $/;"	f	class:mu::ParserError
GetFileSize	src/madness/external/gtest/src/gtest-port.cc	/^size_t CapturedStream::GetFileSize(FILE* file) {$/;"	f	class:testing::internal::CapturedStream
GetFormula	src/madness/external/muParser/muParserTokenReader.cpp	/^  const string_type& ParserTokenReader::GetFormula() const$/;"	f	class:mu::ParserTokenReader
GetFullResponseTransformation	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::GetFullResponseTransformation($/;"	f	class:TDHF
GetFunDef	src/madness/external/muParser/muParserBase.cpp	/^  const funmap_type& ParserBase::GetFunDef() const$/;"	f	class:mu::ParserBase
GetFuncAddr	src/madness/external/muParser/muParserToken.h	/^      void* GetFuncAddr() const$/;"	f	class:mu::ParserToken
GetGlobalTestPartResultReporter	src/madness/external/gtest/src/gtest.cc	/^UnitTestImpl::GetGlobalTestPartResultReporter() {$/;"	f	class:testing::internal::UnitTestImpl
GetIdx	src/madness/external/muParser/muParserToken.h	/^      int GetIdx() const$/;"	f	class:mu::ParserToken
GetImagPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetImagPart( Int i, Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
GetImagPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetImagPart( Int i, Int j ) const$/;"	f	class:elem::AbstractDistMatrix
GetImagPart	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetImagPart( Int i, Int j ) const$/;"	f	class:elem::Matrix
GetImagPartOfDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::GetImagPartOfDiagonal$/;"	f	class:elem::GeneralBlockDistMatrix
GetImagPartOfDiagonal	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::GetImagPartOfDiagonal$/;"	f	class:elem::GeneralDistMatrix
GetImagPartOfDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetImagPartOfDiagonal( Int offset ) const$/;"	f	class:elem::Matrix
GetImagPartOfDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetImagPartOfDiagonal( Matrix<Base<T>>& d, Int offset ) const$/;"	f	class:elem::Matrix
GetImagPartOfLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetImagPartOfLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
GetImagPartOfLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetImagPartOfLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
GetImagPartOfSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetImagPartOfSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
GetImagPartOfSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetImagPartOfSubmatrix$/;"	f	class:elem::AbstractDistMatrix
GetImagPartOfSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetImagPartOfSubmatrix$/;"	f	class:elem::Matrix
GetInjectableArgvs	src/madness/external/gtest/src/gtest-port.cc	/^const ::std::vector<testing::internal::string>& GetInjectableArgvs() {$/;"	f	namespace:testing::internal
GetInstance	src/madness/external/gtest/src/gtest.cc	/^UnitTest* UnitTest::GetInstance() {$/;"	f	class:testing::UnitTest
GetLastErrnoDescription	src/madness/external/gtest/src/gtest-death-test.cc	/^std::string GetLastErrnoDescription() {$/;"	f	namespace:testing::internal
GetLocal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetLocal( Int i, Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
GetLocal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetLocal( Int i, Int j ) const$/;"	f	class:elem::AbstractDistMatrix
GetLocalImagPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetLocalImagPart( Int iLoc, Int jLoc ) const$/;"	f	class:elem::AbstractBlockDistMatrix
GetLocalImagPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetLocalImagPart( Int iLoc, Int jLoc ) const$/;"	f	class:elem::AbstractDistMatrix
GetLocalRealPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetLocalRealPart( Int iLoc, Int jLoc ) const$/;"	f	class:elem::AbstractBlockDistMatrix
GetLocalRealPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetLocalRealPart( Int iLoc, Int jLoc ) const$/;"	f	class:elem::AbstractDistMatrix
GetLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
GetLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
GetMsg	src/madness/external/muParser/muParserError.cpp	/^  const string_type& ParserError::GetMsg() const$/;"	f	class:mu::ParserError
GetMutableTestCase	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TestCase* GetMutableTestCase(int i) {$/;"	f	class:testing::internal::UnitTestImpl
GetMutableTestCase	src/madness/external/gtest/src/gtest.cc	/^TestCase* UnitTest::GetMutableTestCase(int i) {$/;"	f	class:testing::UnitTest
GetMutableTestInfo	src/madness/external/gtest/src/gtest.cc	/^TestInfo* TestCase::GetMutableTestInfo(int i) {$/;"	f	class:testing::TestCase
GetNextRandomSeed	src/madness/external/gtest/src/gtest-internal-inl.h	/^inline int GetNextRandomSeed(int seed) {$/;"	f	namespace:testing::internal
GetOprtDef	src/madness/external/muParser/muParserBase.cpp	/^  const char_type** ParserBase::GetOprtDef() const$/;"	f	class:mu::ParserBase
GetOprtPri	src/madness/external/muParser/muParserBase.cpp	/^  int ParserBase::GetOprtPri(const token_type &a_Tok) const$/;"	f	class:mu::ParserBase
GetOrCreateValue	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  T* GetOrCreateValue() const {$/;"	f	class:testing::internal::ThreadLocal
GetOutputFormat	src/madness/external/gtest/src/gtest.cc	/^std::string UnitTestOptions::GetOutputFormat() {$/;"	f	class:testing::internal::UnitTestOptions
GetParam	src/madness/external/gtest/include/gtest/gtest.h	/^  const ParamType& GetParam() const {$/;"	f	class:testing::WithParamInterface
GetPos	src/madness/external/muParser/muParserError.cpp	/^  std::size_t ParserError::GetPos() const$/;"	f	class:mu::ParserError
GetPos	src/madness/external/muParser/muParserTokenReader.cpp	/^  int ParserTokenReader::GetPos() const$/;"	f	class:mu::ParserTokenReader
GetPrefixUntilComma	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^inline std::string GetPrefixUntilComma(const char* str) {$/;"	f	namespace:testing::internal
GetPri	src/madness/external/muParser/muParserCallback.cpp	/^  int ParserCallback::GetPri()  const $/;"	f	class:mu::ParserCallback
GetPri	src/madness/external/muParser/muParserToken.h	/^      int GetPri() const$/;"	f	class:mu::ParserToken
GetPtrSize	src/madness/external/muParser/muParserBytecode.h	/^    unsigned GetPtrSize() const$/;"	f	class:mu::ParserByteCode
GetRandomSeedFromFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^inline int GetRandomSeedFromFlag(Int32 random_seed_flag) {$/;"	f	namespace:testing::internal
GetRawData	src/madness/external/muParser/muParserBytecode.cpp	/^  const ParserByteCode::map_type* ParserByteCode::GetRawData() const$/;"	f	class:mu::ParserByteCode
GetRealPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetRealPart( Int i, Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
GetRealPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetRealPart( Int i, Int j ) const$/;"	f	class:elem::AbstractDistMatrix
GetRealPart	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetRealPart( Int i, Int j ) const$/;"	f	class:elem::Matrix
GetRealPartOfDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::GetRealPartOfDiagonal$/;"	f	class:elem::GeneralBlockDistMatrix
GetRealPartOfDiagonal	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::GetRealPartOfDiagonal$/;"	f	class:elem::GeneralDistMatrix
GetRealPartOfDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetRealPartOfDiagonal( Int offset ) const$/;"	f	class:elem::Matrix
GetRealPartOfDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetRealPartOfDiagonal( Matrix<Base<T>>& d, Int offset ) const$/;"	f	class:elem::Matrix
GetRealPartOfLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetRealPartOfLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
GetRealPartOfLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetRealPartOfLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
GetRealPartOfSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetRealPartOfSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
GetRealPartOfSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetRealPartOfSubmatrix$/;"	f	class:elem::AbstractDistMatrix
GetRealPartOfSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetRealPartOfSubmatrix$/;"	f	class:elem::Matrix
GetReservedAttributesForElement	src/madness/external/gtest/src/gtest.cc	/^static std::vector<std::string> GetReservedAttributesForElement($/;"	f	namespace:testing
GetStatusFileDescriptor	src/madness/external/gtest/src/gtest-death-test.cc	/^int GetStatusFileDescriptor(unsigned int parent_process_id,$/;"	f	namespace:testing::internal
GetStream	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ::std::ostream& GetStream() { return ::std::cerr; }$/;"	f	class:testing::internal::GTestLog
GetString	src/madness/external/gtest/src/gtest.cc	/^std::string Message::GetString() const {$/;"	f	class:testing::Message
GetSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GetSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
GetSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GetSubmatrix$/;"	f	class:elem::AbstractDistMatrix
GetSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::GetSubmatrix$/;"	f	class:elem::Matrix
GetTestCase	src/madness/external/gtest/src/gtest-internal-inl.h	/^  const TestCase* GetTestCase(int i) const {$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	src/madness/external/gtest/src/gtest.cc	/^TestCase* UnitTestImpl::GetTestCase(const char* test_case_name,$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	src/madness/external/gtest/src/gtest.cc	/^const TestCase* UnitTest::GetTestCase(int i) const {$/;"	f	class:testing::UnitTest
GetTestCaseName	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual const string& GetTestCaseName() const { return test_case_name_; }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestCasePatternHolder	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder($/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
GetTestCaseTypeId	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual TypeId GetTestCaseTypeId() const { return GetTypeId<TestCase>(); }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestInfo	src/madness/external/gtest/src/gtest.cc	/^const TestInfo* TestCase::GetTestInfo(int i) const {$/;"	f	class:testing::TestCase
GetTestPartResult	src/madness/external/gtest/src/gtest-test-part.cc	/^const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {$/;"	f	class:testing::TestPartResultArray
GetTestPartResult	src/madness/external/gtest/src/gtest.cc	/^const TestPartResult& TestResult::GetTestPartResult(int i) const {$/;"	f	class:testing::TestResult
GetTestPartResultReporterForCurrentThread	src/madness/external/gtest/src/gtest.cc	/^UnitTestImpl::GetTestPartResultReporterForCurrentThread() {$/;"	f	class:testing::internal::UnitTestImpl
GetTestProperty	src/madness/external/gtest/src/gtest.cc	/^const TestProperty& TestResult::GetTestProperty(int i) const {$/;"	f	class:testing::TestResult
GetTestTypeId	src/madness/external/gtest/src/gtest.cc	/^TypeId GetTestTypeId() {$/;"	f	namespace:testing::internal
GetText	src/madness/external/tinyxml/tinyxml.cc	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement
GetThreadCount	src/madness/external/gtest/src/gtest-port.cc	/^size_t GetThreadCount() {$/;"	f	namespace:testing::internal
GetTimeInMillis	src/madness/external/gtest/src/gtest.cc	/^TimeInMillis GetTimeInMillis() {$/;"	f	namespace:testing::internal
GetToken	src/madness/external/muParser/muParserError.cpp	/^  const string_type& ParserError::GetToken() const$/;"	f	class:mu::ParserError
GetType	src/madness/external/muParser/muParserCallback.cpp	/^  ETypeCode ParserCallback::GetType() const $/;"	f	class:mu::ParserCallback
GetType	src/madness/external/muParser/muParserToken.h	/^      ETypeCode GetType() const$/;"	f	class:mu::ParserToken
GetTypeId	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^TypeId GetTypeId() {$/;"	f	namespace:testing::internal
GetTypeName	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^std::string GetTypeName() {$/;"	f	namespace:testing::internal
GetUnitTestImpl	src/madness/external/gtest/src/gtest-internal-inl.h	/^inline UnitTestImpl* GetUnitTestImpl() {$/;"	f	namespace:testing::internal
GetUsedVar	src/madness/external/muParser/muParserBase.cpp	/^  const varmap_type& ParserBase::GetUsedVar() const$/;"	f	class:mu::ParserBase
GetUsedVar	src/madness/external/muParser/muParserTokenReader.cpp	/^  const varmap_type& ParserTokenReader::GetUsedVar() const$/;"	f	class:mu::ParserTokenReader
GetUserData	src/madness/external/tinyxml/tinyxml.h	/^	const void* GetUserData() const 		{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase
GetUserData	src/madness/external/tinyxml/tinyxml.h	/^	void* GetUserData()						{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase
GetVal	src/madness/external/muParser/muParserToken.h	/^      TBase GetVal() const$/;"	f	class:mu::ParserToken
GetValSize	src/madness/external/muParser/muParserBytecode.h	/^    unsigned GetValSize() const$/;"	f	class:mu::ParserByteCode
GetVar	src/madness/external/muParser/muParserBase.cpp	/^  const varmap_type& ParserBase::GetVar() const$/;"	f	class:mu::ParserBase
GetVar	src/madness/external/muParser/muParserToken.h	/^      TBase* GetVar() const$/;"	f	class:mu::ParserToken
Get_	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Get_( Int i, Int j ) const$/;"	f	class:elem::Matrix
Get_attr	src/madness/world/safempi.h	/^        bool Get_attr(int key, void* value) const {$/;"	f	class:SafeMPI::Intracomm
Get_count	src/madness/world/safempi.h	/^        int Get_count(const MPI_Datatype datatype) const {$/;"	f	class:SafeMPI::Status
Get_error	src/madness/world/safempi.h	/^        int Get_error() const { return status_.MPI_ERROR; }$/;"	f	class:SafeMPI::Status
Get_group	src/madness/world/safempi.h	/^        Group Get_group() const {$/;"	f	class:SafeMPI::Intracomm
Get_mpi_comm	src/madness/world/safempi.h	/^        MPI_Comm& Get_mpi_comm() const {$/;"	f	class:SafeMPI::Intracomm
Get_rank	src/madness/world/safempi.h	/^        int Get_rank() const {$/;"	f	class:SafeMPI::Intracomm
Get_size	src/madness/world/safempi.h	/^        int Get_size() const {$/;"	f	class:SafeMPI::Intracomm
Get_source	src/madness/world/safempi.h	/^        int Get_source() const { return status_.MPI_SOURCE; }$/;"	f	class:SafeMPI::Status
Get_tag	src/madness/world/safempi.h	/^        int Get_tag() const { return status_.MPI_TAG; }$/;"	f	class:SafeMPI::Status
Givens	src/madness/external/elemental/src/core/imports/blas.cpp	/^dcomplex Givens$/;"	f	namespace:elem::blas
Givens	src/madness/external/elemental/src/core/imports/blas.cpp	/^double Givens$/;"	f	namespace:elem::blas
Givens	src/madness/external/elemental/src/core/imports/blas.cpp	/^float Givens$/;"	f	namespace:elem::blas
Givens	src/madness/external/elemental/src/core/imports/blas.cpp	/^scomplex Givens$/;"	f	namespace:elem::blas
Givens	src/madness/external/elemental/src/core/imports/lapack.cpp	/^dcomplex Givens( dcomplex phi, dcomplex gamma, double* c, dcomplex* s )$/;"	f	namespace:elem::lapack
Givens	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double Givens( double phi, double gamma, double* c, double* s )$/;"	f	namespace:elem::lapack
Givens	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float Givens( float phi, float gamma, float* c, float* s )$/;"	f	namespace:elem::lapack
Givens	src/madness/external/elemental/src/core/imports/lapack.cpp	/^scomplex Givens( scomplex phi, scomplex gamma, float* c, scomplex* s )$/;"	f	namespace:elem::lapack
GlobalBlockedIndex	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^GlobalBlockedIndex( Int iLoc, Int shift, Int bsize, Int cut, Int numProcs )$/;"	f	namespace:elem
GlobalCol	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GlobalCol( Int jLoc ) const$/;"	f	class:elem::AbstractBlockDistMatrix
GlobalCol	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GlobalCol( Int jLoc ) const$/;"	f	class:elem::AbstractDistMatrix
GlobalIndex	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int GlobalIndex( Int iLoc, Int shift, Int numProcs )$/;"	f	namespace:elem
GlobalRow	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::GlobalRow( Int iLoc ) const$/;"	f	class:elem::AbstractBlockDistMatrix
GlobalRow	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::GlobalRow( Int iLoc ) const$/;"	f	class:elem::AbstractDistMatrix
GolubReinsch	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/GolubReinsch.hpp	/^GolubReinsch$/;"	f	namespace:elem::svd
GolubReinsch	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/GolubReinsch.hpp	/^GolubReinsch( DistMatrix<F>& A, DistMatrix<Base<F>,VR,STAR>& s )$/;"	f	namespace:elem::svd
GolubReinschFlame	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/GolubReinsch.hpp	/^GolubReinschFlame$/;"	f	namespace:elem::svd
GoogleTestFailureException	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class GTEST_API_ GoogleTestFailureException : public ::std::runtime_error {$/;"	c	namespace:testing::internal
GoogleTestFailureException	src/madness/external/gtest/src/gtest.cc	/^GoogleTestFailureException::GoogleTestFailureException($/;"	f	class:testing::internal::GoogleTestFailureException
Gparams	src/apps/adrian/TDDFT.h	/^  GroundParameters Gparams;$/;"	m	class:TDHF
Gparams	src/apps/adrian/TDHF.h	/^      GroundParameters Gparams;$/;"	m	class:TDHF
Gparams	src/apps/adrian/TDHF2.h	/^      GroundParameters Gparams;$/;"	m	class:TDHF
Gparams	src/apps/bryan/TDHF.h	/^      GroundParameters Gparams;$/;"	m	class:TDHF
Gparams	src/apps/bryan/TDHF2.h	/^      GroundParameters Gparams;$/;"	m	class:TDHF
GradBSHOperator	src/madness/mra/operator.h	/^    GradBSHOperator(World& world,$/;"	f	namespace:madness
GradCoulombOperator	src/madness/mra/operator.h	/^    GradCoulombOperator(World& world,$/;"	f	namespace:madness
GradSlaterOperator	src/apps/chem/PNOF12Potentials.cpp	/^GradSlaterOperator(World& world,$/;"	f	namespace:madness
GradientalGaussSlater	src/apps/chem/correlationfactor.h	/^	enum corrfactype {None, GradientalGaussSlater, GaussSlater, LinearSlater,$/;"	e	enum:madness::NuclearCorrelationFactor::corrfactype
GradientalGaussSlater	src/apps/chem/correlationfactor.h	/^    GradientalGaussSlater(World& world, const Molecule& mol, const double a)$/;"	f	class:madness::GradientalGaussSlater
GradientalGaussSlater	src/apps/chem/correlationfactor.h	/^class GradientalGaussSlater : public NuclearCorrelationFactor {$/;"	c	namespace:madness
Graphical representation of CSF bases	src/apps/moldft/fci/doc/matrixelements.tex	/^\\section{Graphical representation of CSF bases}$/;"	s
Graphical representation of orbital occupations	src/apps/moldft/fci/doc/matrixelements.tex	/^\\section{Graphical representation of orbital occupations}$/;"	s
Graphical representation of primitive spin functions	src/apps/moldft/fci/doc/matrixelements.tex	/^\\section{Graphical representation of primitive spin functions}$/;"	s
Grcar	src/madness/external/elemental/include/elemental/matrices/Grcar.hpp	/^Grcar( BlockDistMatrix<T,U,V>& A, Int n, Int k=3 )$/;"	f	namespace:elem
Grcar	src/madness/external/elemental/include/elemental/matrices/Grcar.hpp	/^Grcar( DistMatrix<T,U,V>& A, Int n, Int k=3 )$/;"	f	namespace:elem
Grcar	src/madness/external/elemental/include/elemental/matrices/Grcar.hpp	/^Grcar( Matrix<T>& A, Int n, Int k=3 )$/;"	f	namespace:elem
Greater	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    static bool Greater$/;"	f	struct:elem::ValueIntPair
Greater	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    static bool Greater( const ValueInt<Real>& a, const ValueInt<Real>& b )$/;"	f	struct:elem::ValueInt
Greater	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    static bool Greater( const ValueInt<Real>& a, const ValueInt<Real>& b )$/;"	f	struct:elem::ValueIntPair
Greet	src/madness/world/test_atomicint.cc	/^class Greet : public PoolTaskInterface {$/;"	c	file:
Grid	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^class Grid$/;"	c	namespace:elem
Grid	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::Grid( mpi::Comm comm, GridOrder order )$/;"	f	class:elem::Grid
Grid	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::Grid( mpi::Comm comm, int height, GridOrder order )$/;"	f	class:elem::Grid
Grid	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::Grid( mpi::Comm viewers, mpi::Group owners, int height, GridOrder order )$/;"	f	class:elem::Grid
Grid	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^const elem::Grid& AbstractBlockDistMatrix<T>::Grid() const { return *grid_; }$/;"	f	class:elem::AbstractBlockDistMatrix
Grid	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^const elem::Grid& AbstractDistMatrix<T>::Grid() const { return *grid_; }$/;"	f	class:elem::AbstractDistMatrix
GridCol	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^int GridCol( int context )$/;"	f	namespace:elem::blacs
GridHeight	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^int GridHeight( int context )$/;"	f	namespace:elem::blacs
GridInit	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^int GridInit( int bhandle, bool colMajor, int gridHeight, int gridWidth )$/;"	f	namespace:elem::blacs
GridOrder	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum GridOrder$/;"	g	namespace:elem::GridOrderNS
GridOrderNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace GridOrderNS {$/;"	n	namespace:elem
GridRow	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^int GridRow( int context )$/;"	f	namespace:elem::blacs
GridWidth	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^int GridWidth( int context )$/;"	f	namespace:elem::blacs
Ground State section	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\paragraph{Ground-State section:} Begins with \\textit{dft} and ends with \\textit{end}\\\\$/;"	P
Ground state molecular DFT and HF	doc/Latex/apps/moldft/manual.tex	/^\\chapter{Ground state molecular DFT and HF}$/;"	c
GroundParameters	src/apps/adrian/GroundParameters.h	/^      GroundParameters() {}$/;"	f	struct:madness::GroundParameters
GroundParameters	src/apps/adrian/GroundParameters.h	/^   struct GroundParameters$/;"	s	namespace:madness
GroundParameters	src/apps/bryan/GroundParameters.h	/^      GroundParameters() {}$/;"	f	struct:madness::GroundParameters
GroundParameters	src/apps/bryan/GroundParameters.h	/^   struct GroundParameters$/;"	s	namespace:madness
Group	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^    Group( MPI_Group mpiGroup=MPI_GROUP_NULL ) : group(mpiGroup) { }$/;"	f	struct:elem::mpi::Group
Group	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^struct Group$/;"	s	namespace:elem::mpi
Group	src/madness/world/group.h	/^        Group() : pimpl_() { }$/;"	f	class:madness::Group
Group	src/madness/world/group.h	/^        Group(Impl* pimpl) : pimpl_(pimpl) { }$/;"	f	class:madness::Group
Group	src/madness/world/group.h	/^        Group(World& world, const A& group, const DistributedID& did) :$/;"	f	class:madness::Group
Group	src/madness/world/group.h	/^        Group(World& world, const A& group, const std::size_t tag) :$/;"	f	class:madness::Group
Group	src/madness/world/group.h	/^        Group(World& world, const A& group, const uniqueidT& uid, const std::size_t tag) :$/;"	f	class:madness::Group
Group	src/madness/world/group.h	/^        Group(const Group& other) : pimpl_(other.pimpl_) { }$/;"	f	class:madness::Group
Group	src/madness/world/group.h	/^    class Group {$/;"	c	namespace:madness
Group	src/madness/world/safempi.h	/^        Group() : pimpl() { }$/;"	f	class:SafeMPI::Group
Group	src/madness/world/safempi.h	/^        Group(MPI_Comm comm) : pimpl(new Impl(comm)) { }$/;"	f	class:SafeMPI::Group
Group	src/madness/world/safempi.h	/^        Group(const Group& other) : pimpl(other.pimpl) { }$/;"	f	class:SafeMPI::Group
Group	src/madness/world/safempi.h	/^        Group(const std::shared_ptr<Impl>& p) : pimpl(p) { }$/;"	f	class:SafeMPI::Group
Group	src/madness/world/safempi.h	/^    class Group {$/;"	c	namespace:SafeMPI
GroupAllReduceTag	src/madness/world/worldgop.h	/^        struct GroupAllReduceTag { };$/;"	s	class:madness::WorldGopInterface
GroupBcastTag	src/madness/world/worldgop.h	/^        struct GroupBcastTag { };$/;"	s	class:madness::WorldGopInterface
GroupLazySyncTag	src/madness/world/worldgop.h	/^        struct GroupLazySyncTag { };$/;"	s	class:madness::WorldGopInterface
GroupReduceTag	src/madness/world/worldgop.h	/^        struct GroupReduceTag { };$/;"	s	class:madness::WorldGopInterface
Gs	src/examples/tdse1d.cc	/^std::vector<pcomplex_operatorT> Gs, Gss, Gtrs;$/;"	v
Gss	src/examples/tdse1d.cc	/^std::vector<pcomplex_operatorT> Gs, Gss, Gtrs;$/;"	v
Gtrs	src/examples/tdse1d.cc	/^std::vector<pcomplex_operatorT> Gs, Gss, Gtrs;$/;"	v
Guess	src/examples/vnucso.cc	/^    Guess(double z, double exponent, int nx, int ny, int nz)$/;"	f	struct:Guess
Guess	src/examples/vnucso.cc	/^struct Guess : FunctionFunctorInterface<double_complex,3> {$/;"	s	file:
GuessDensity	src/apps/hf/solver.h	/^        GuessDensity(const MolecularEntity& mentity, const AtomicBasisSet& aobasis,$/;"	f	struct:madness::Solver::GuessDensity
GuessDensity	src/apps/hf/solver.h	/^    struct GuessDensity : public FunctionFunctorInterface<double,3> {$/;"	s	class:madness::Solver
GuessPotential	src/examples/gygi_soltion.cc	/^  realfunc GuessPotential(World& world) const {$/;"	f	class:GygiPot
GuessType	src/apps/chem/PNOParameters.h	/^enum GuessType{PARTIAL_WAVE_GUESSTYPE,FROM_FILE_GUESSTYPE,PREDEFINED_GUESSTYPE,SCF_GUESSTYPE,EXOP_GUESSTYPE,EMPTY_GUESSTYPE,PSI4_GUESSTYPE,UNKNOWN_GUESSTYPE};$/;"	g	namespace:madness
GuiDisabled	src/madness/external/elemental/src/core/global.cpp	/^bool GuiDisabled()$/;"	f	namespace:elem
GygiPot	src/examples/gygi_soltion.cc	/^  GygiPot(const realfunc& rho,$/;"	f	class:GygiPot
GygiPot	src/examples/gygi_soltion.cc	/^class GygiPot {$/;"	c	file:
H2Potential	src/apps/hf/test_hf.cc	/^  H2Potential() {}$/;"	f	class:H2Potential
H2Potential	src/apps/hf/test_hf.cc	/^class H2Potential :$/;"	c	file:
HALF	src/madness/external/elemental/external/pmrrr/src/plarre.c	61;"	d	file:
HARDWARE_RUNS_BGP	src/madness/world/hardware.h	51;"	d
HARDWARE_RUNS_BGQ	src/madness/world/hardware.h	54;"	d
HARDWARE_USE_SYSCONF	src/madness/world/hardware.h	63;"	d
HARDWARE_USE_SYSCTL	src/madness/world/hardware.h	58;"	d
HARTREEFOCK_H_	src/apps/hf/hartreefock.h	33;"	d
HASHLEN	src/madness/world/lookup3.c	753;"	d	file:
HASHSTATE	src/madness/world/lookup3.c	752;"	d	file:
HASH_BIG_ENDIAN	src/madness/world/lookup3.c	59;"	d	file:
HASH_BIG_ENDIAN	src/madness/world/lookup3.c	64;"	d	file:
HASH_BIG_ENDIAN	src/madness/world/lookup3.c	67;"	d	file:
HASH_LITTLE_ENDIAN	src/madness/world/lookup3.c	58;"	d	file:
HASH_LITTLE_ENDIAN	src/madness/world/lookup3.c	63;"	d	file:
HASH_LITTLE_ENDIAN	src/madness/world/lookup3.c	66;"	d	file:
HAVE_BGPIBM	src/madness/tensor/mtxmq_bg/Makefile	/^   HAVE_BGPIBM = -DHAVE_IBMBGP$/;"	m
HAVE_BGPIBM	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   HAVE_BGPIBM = -DHAVE_IBMBGP$/;"	m
HAVE_BGQIBM	src/madness/tensor/mtxmq_bg/Makefile	/^   HAVE_BGQIBM = -DHAVE_IBMBGQ$/;"	m
HAVE_BGQIBM	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   HAVE_BGQIBM = -DHAVE_IBMBGQ$/;"	m
HAVE_CRAYXE	src/madness/madness_config.h	60;"	d
HAVE_CRAYXT	src/madness/madness_config.h	55;"	d
HAVE_CXX_ATOMICS	src/madness/world/atomicint.h	70;"	d
HAVE_GDB	build/src/madness/config.h	141;"	d
HAVE_GENTENSOR	src/madness/tensor/tensor.h	64;"	d
HAVE_GENTENSOR	src/madness/tensor/tensor.h	66;"	d
HAVE_IBMBGP	src/madness/madness_config.h	67;"	d
HAVE_IBMBGQ	src/madness/madness_config.h	72;"	d
HAVE_INT64_T	build/src/madness/config.h	44;"	d
HAVE_INTEGER4	src/madness/fortran_ctypes.h	46;"	d
HAVE_INTEGER8	src/madness/fortran_ctypes.h	50;"	d
HAVE_INTEL_MKL	build/src/madness/config.h	53;"	d
HAVE_INTEL_TBB	build/src/madness/config.h	51;"	d
HAVE_LONG_LONG	build/src/madness/config.h	45;"	d
HAVE_MEMSET	build/src/madness/config.h	66;"	d
HAVE_POSIX_MEMALIGN	build/src/madness/config.h	67;"	d
HAVE_RANDOM	build/src/madness/config.h	70;"	d
HAVE_SLEEP	build/src/madness/config.h	71;"	d
HAVE_STD_ABS_LONG	build/src/madness/config.h	72;"	d
HAVE_STRCHR	build/src/madness/config.h	73;"	d
HAVE_SYS_STAT_H	build/src/madness/config.h	77;"	d
HAVE_SYS_TYPES_H	build/src/madness/config.h	80;"	d
HAVE_UNISTD_H	build/src/madness/config.h	83;"	d
HAVE_UNQUALIFIED_STATIC_DECL	build/src/madness/config.h	89;"	d
HAVE_XTERM	build/src/madness/config.h	139;"	d
HCapacityInit	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Lanczos.hpp	/^const Int HCapacityInit = 10;$/;"	m	namespace:elem::pspec
HEADER	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^    HEADER = '\\033[95m'$/;"	v	class:COLORS
HEADER	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^    HEADER = '\\033[95m'$/;"	v	class:COLORS
HEADER_LEN	src/madness/world/worldrmi.h	/^        static const size_t HEADER_LEN = ALIGNMENT;$/;"	m	class:madness::RMI
HERMITIAN	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    HERMITIAN,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
HERMITIAN_LOWER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    HERMITIAN_LOWER,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
HERMITIAN_TRIDIAG_DEFAULT	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^    HERMITIAN_TRIDIAG_DEFAULT \/\/ Square grid algorithm only if already square$/;"	e	enum:elem::HermitianTridiagApproachNS::HermitianTridiagApproach
HERMITIAN_TRIDIAG_NORMAL	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^    HERMITIAN_TRIDIAG_NORMAL, \/\/ Keep the current grid$/;"	e	enum:elem::HermitianTridiagApproachNS::HermitianTridiagApproach
HERMITIAN_TRIDIAG_SQUARE	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^    HERMITIAN_TRIDIAG_SQUARE, \/\/ Drop to a square process grid$/;"	e	enum:elem::HermitianTridiagApproachNS::HermitianTridiagApproach
HERMITIAN_UPPER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    HERMITIAN_UPPER, $/;"	e	enum:elem::MatrixClassNS::MatrixClass
HESSENBERG_LOWER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    HESSENBERG_LOWER,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
HESSENBERG_LOWER_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    HESSENBERG_LOWER_PACKED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
HESSENBERG_UPPER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    HESSENBERG_UPPER,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
HESSENBERG_UPPER_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    HESSENBERG_UPPER_PACKED$/;"	e	enum:elem::MatrixClassNS::MatrixClass
HEX	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	458;"	d	file:
HEX	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	449;"	d	file:
HIGHPRIORITY	src/madness/world/thread.h	/^        static const unsigned long HIGHPRIORITY = GENERATOR<<2; \/\/\/< Mask for priority bit.$/;"	m	class:madness::TaskAttributes
HOLE	src/apps/chem/CCStructures.h	/^  enum FuncType {UNDEFINED,HOLE,PARTICLE,MIXED,RESPONSE};$/;"	e	enum:madness::FuncType
HONOR_SHARDING_PROTOCOL	src/madness/external/gtest/src/gtest-internal-inl.h	/^    HONOR_SHARDING_PROTOCOL,$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding
HORIZONTAL	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    HORIZONTAL$/;"	e	enum:elem::VerticalOrHorizontalNS::VerticalOrHorizontal
HOST_SYSTEM	build/src/madness/config.h	16;"	d
HO_3d	src/examples/helium_mp2.cc	/^static double HO_3d(const coord_3d& r) {$/;"	f	file:
HO_6d	src/examples/helium_mp2.cc	/^static double HO_6d(const coord_6d& r) {$/;"	f	file:
HO_vphi_3d	src/examples/helium_mp2.cc	/^static double HO_vphi_3d(const coord_3d& r) {$/;"	f	file:
HPDDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^HPDDeterminant( UpperOrLower uplo, DistMatrix<F>& A, bool canOverwrite=false )$/;"	f	namespace:elem
HPDDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^HPDDeterminant( UpperOrLower uplo, Matrix<F>& A, bool canOverwrite=false )$/;"	f	namespace:elem
HPDDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^inline Base<F> HPDDeterminant( UpperOrLower uplo, const DistMatrix<F>& A )$/;"	f	namespace:elem
HPDDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^inline Base<F> HPDDeterminant( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
HPDInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD.hpp	/^HPDInverse( UpperOrLower uplo, DistMatrix<F>& A )$/;"	f	namespace:elem
HPDInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD.hpp	/^HPDInverse( UpperOrLower uplo, Matrix<F>& A )$/;"	f	namespace:elem
HPDSolve	src/madness/external/elemental/include/elemental/lapack-like/solve/HPDSolve.hpp	/^HPDSolve$/;"	f	namespace:elem
HPM	src/madness/tensor/mtxmq_graveyard/bgp_tuning/Makefile	/^HPM=$/;"	m
HPSDCholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^HPSDCholesky( UpperOrLower uplo, DistMatrix<F>& A )$/;"	f	namespace:elem
HPSDCholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^HPSDCholesky( UpperOrLower uplo, Matrix<F>& A )$/;"	f	namespace:elem
HPSDSquareRoot	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^HPSDSquareRoot$/;"	f	namespace:elem
HRESULTFailureHelper	src/madness/external/gtest/src/gtest.cc	/^AssertionResult HRESULTFailureHelper(const char* expr,$/;"	f	namespace:testing::internal::__anon37
HUNDRED	src/madness/external/elemental/external/pmrrr/src/plarre.c	60;"	d	file:
HYLLERAAS_ENERGYTYPE	src/apps/chem/PNOParameters.h	/^enum EnergyType{PROJECTED_ENERGYTYPE,HYLLERAAS_ENERGYTYPE,UNKNOWN_ENERGYTYPE};$/;"	e	enum:madness::EnergyType
HYP_H	src/apps/nick/hyp.h	35;"	d
Haar	src/madness/external/elemental/include/elemental/matrices/Haar.hpp	/^Haar( DistMatrix<F>& A, Int n )$/;"	f	namespace:elem
Haar	src/madness/external/elemental/include/elemental/matrices/Haar.hpp	/^Haar( Matrix<F>& A, Int n )$/;"	f	namespace:elem
Hadamard	src/madness/external/elemental/include/elemental/blas-like/level1/Hadamard.hpp	/^inline void Hadamard$/;"	f	namespace:elem
Hadamard	src/madness/external/elemental/include/elemental/blas-like/level1/Hadamard.hpp	/^inline void Hadamard( const Matrix<T>& A, const Matrix<T>& B, Matrix<T>& C )$/;"	f	namespace:elem
Handle	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^int Handle( MPI_Comm comm )$/;"	f	namespace:elem::blacs
HandleBuild	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^inline void Args::HandleBuild( std::ostream& os ) const$/;"	f	class:elem::Args
HandleBuild	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    virtual void HandleBuild( std::ostream& os=std::cout ) const { }$/;"	f	class:elem::choice::Args
HandleBuild	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    virtual void HandleBuild( std::ostream& os=std::cout ) const { }$/;"	f	class:elem::choice::MpiArgs
HandleEoms	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::HandleEoms()$/;"	f	class:elem::AxpyInterface
HandleExceptionsInMethodIfSupported	src/madness/external/gtest/src/gtest.cc	/^Result HandleExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HandleGlobalToLocalRequest	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::HandleGlobalToLocalRequest()$/;"	f	class:elem::AxpyInterface
HandleLocalToGlobalData	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::HandleLocalToGlobalData()$/;"	f	class:elem::AxpyInterface
HandleSehExceptionsInMethodIfSupported	src/madness/external/gtest/src/gtest.cc	/^Result HandleSehExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HandleVersion	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^inline void Args::HandleVersion( std::ostream& os ) const$/;"	f	class:elem::Args
HandleVersion	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    virtual void HandleVersion( std::ostream& os=std::cout ) const { }$/;"	f	class:elem::choice::Args
HandleVersion	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    virtual void HandleVersion( std::ostream& os=std::cout ) const { }$/;"	f	class:elem::choice::MpiArgs
Hankel	src/madness/external/elemental/include/elemental/matrices/Hankel.hpp	/^Hankel( BlockDistMatrix<T,U,V>& A, Int m, Int n, const std::vector<T>& a )$/;"	f	namespace:elem
Hankel	src/madness/external/elemental/include/elemental/matrices/Hankel.hpp	/^Hankel( DistMatrix<T,U,V>& A, Int m, Int n, const std::vector<T>& a )$/;"	f	namespace:elem
Hankel	src/madness/external/elemental/include/elemental/matrices/Hankel.hpp	/^Hankel( Matrix<T>& A, Int m, Int n, const std::vector<T>& a )$/;"	f	namespace:elem
Hanowa	src/madness/external/elemental/include/elemental/matrices/Hanowa.hpp	/^Hanowa( BlockDistMatrix<T,U,V>& A, Int n, T mu )$/;"	f	namespace:elem
Hanowa	src/madness/external/elemental/include/elemental/matrices/Hanowa.hpp	/^Hanowa( DistMatrix<T,U,V>& A, Int n, T mu )$/;"	f	namespace:elem
Hanowa	src/madness/external/elemental/include/elemental/matrices/Hanowa.hpp	/^Hanowa( Matrix<T>& A, Int n, T mu )$/;"	f	namespace:elem
HartreeFock	src/apps/chem/mp2.h	/^        HartreeFock(World& world, std::shared_ptr<SCF> calc1) :$/;"	f	class:madness::HartreeFock
HartreeFock	src/apps/chem/mp2.h	/^    class HartreeFock {$/;"	c	namespace:madness
HartreeFock	src/apps/hf/hartreefock.cc	/^  HartreeFock<T,NDIM>::HartreeFock(World& world, funcT V, std::vector<funcT> phis,$/;"	f	class:madness::HartreeFock
HartreeFock	src/apps/hf/hartreefock.h	/^  class HartreeFock : public IEigSolverObserver<T,NDIM>$/;"	c	namespace:madness
HartreeFockCoulombOp	src/apps/hf/hartreefock.cc	/^  HartreeFockCoulombOp<T,NDIM>::HartreeFockCoulombOp(World& world, double coeff,$/;"	f	class:madness::HartreeFockCoulombOp
HartreeFockCoulombOp	src/apps/hf/hartreefock.h	/^  class HartreeFockCoulombOp : public EigSolverOp<T,NDIM>$/;"	c	namespace:madness
HartreeFockExchangeOp	src/apps/hf/hartreefock.cc	/^  HartreeFockExchangeOp<T,NDIM>::HartreeFockExchangeOp(World& world, double coeff,$/;"	f	class:madness::HartreeFockExchangeOp
HartreeFockExchangeOp	src/apps/hf/hartreefock.h	/^  class HartreeFockExchangeOp : public EigSolverOp<T,NDIM>$/;"	c	namespace:madness
HartreeFockNuclearPotentialOp	src/apps/hf/hartreefock.cc	/^  HartreeFockNuclearPotentialOp<T,NDIM>::HartreeFockNuclearPotentialOp(World& world,$/;"	f	class:madness::HartreeFockNuclearPotentialOp
HartreeFockNuclearPotentialOp	src/apps/hf/hartreefock.h	/^  class HartreeFockNuclearPotentialOp : public EigSolverOp<T,NDIM>$/;"	c	namespace:madness
Hartree_energy	src/madness/constants.h	/^        const double Hartree_energy = 4.35974394e-18 ; \/\/     0.00000022e-18     J$/;"	m	namespace:madness::constants
HasBuiltInOprt	src/madness/external/muParser/muParserBase.cpp	/^  bool ParserBase::HasBuiltInOprt() const$/;"	f	class:mu::ParserBase
HasFailure	src/madness/external/gtest/include/gtest/gtest.h	/^  static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }$/;"	f	class:testing::Test
HasFatalFailure	src/madness/external/gtest/src/gtest.cc	/^bool Test::HasFatalFailure() {$/;"	f	class:testing::Test
HasFatalFailure	src/madness/external/gtest/src/gtest.cc	/^bool TestResult::HasFatalFailure() const {$/;"	f	class:testing::TestResult
HasGoogleTestFlagPrefix	src/madness/external/gtest/src/gtest.cc	/^static bool HasGoogleTestFlagPrefix(const char* str) {$/;"	f	namespace:testing::internal
HasNan	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^inline bool HasNan( const Matrix<F>& H )$/;"	f	namespace:elem::pspec
HasNan	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^inline bool HasNan( const std::vector<Real>& x )$/;"	f	namespace:elem::pspec
HasNewFatalFailureHelper	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^class GTEST_API_ HasNewFatalFailureHelper$/;"	c	namespace:testing::internal
HasNewFatalFailureHelper	src/madness/external/gtest/src/gtest-test-part.cc	/^HasNewFatalFailureHelper::HasNewFatalFailureHelper()$/;"	f	class:testing::internal::HasNewFatalFailureHelper
HasNonfatalFailure	src/madness/external/gtest/src/gtest.cc	/^bool Test::HasNonfatalFailure() {$/;"	f	class:testing::Test
HasNonfatalFailure	src/madness/external/gtest/src/gtest.cc	/^bool TestResult::HasNonfatalFailure() const {$/;"	f	class:testing::TestResult
HasOneFailure	src/madness/external/gtest/src/gtest.cc	/^AssertionResult HasOneFailure(const char* \/* results_expr *\/,$/;"	f	namespace:testing::internal
HasSameFixtureClass	src/madness/external/gtest/src/gtest.cc	/^bool Test::HasSameFixtureClass() {$/;"	f	class:testing::Test
Hash	src/madness/world/worldhash.h	/^    struct Hash {$/;"	s	namespace:madness
HashAccessor	src/madness/world/worldhashmap.h	/^            HashAccessor() : entry(0), gotlock(false) {}$/;"	f	class:madness::Hash_private::HashAccessor
HashAccessor	src/madness/world/worldhashmap.h	/^            HashAccessor(entryT* entry) : entry(entry), gotlock(true) {}$/;"	f	class:madness::Hash_private::HashAccessor
HashAccessor	src/madness/world/worldhashmap.h	/^        class HashAccessor : private NO_DEFAULTS {$/;"	c	namespace:madness::Hash_private
HashIterator	src/madness/world/worldhashmap.h	/^            HashIterator() : h(0), bin(-1), entry(0) {}$/;"	f	class:madness::Hash_private::HashIterator
HashIterator	src/madness/world/worldhashmap.h	/^            HashIterator(const HashIterator& other)$/;"	f	class:madness::Hash_private::HashIterator
HashIterator	src/madness/world/worldhashmap.h	/^            HashIterator(const HashIterator<otherHashT>& other)$/;"	f	class:madness::Hash_private::HashIterator
HashIterator	src/madness/world/worldhashmap.h	/^            HashIterator(hashT* h, bool begin)$/;"	f	class:madness::Hash_private::HashIterator
HashIterator	src/madness/world/worldhashmap.h	/^            HashIterator(hashT* h, int bin, entryT* entry)$/;"	f	class:madness::Hash_private::HashIterator
HashIterator	src/madness/world/worldhashmap.h	/^        template <class hashT> class HashIterator {$/;"	c	namespace:madness::Hash_private
Hash_private	src/madness.h	/^    namespace Hash_private {$/;"	n	namespace:madness
Hash_private	src/madness/world/worldhashmap.h	/^    namespace Hash_private {$/;"	n	namespace:madness
HatanoNelson	src/madness/external/elemental/include/elemental/matrices/HatanoNelson.hpp	/^HatanoNelson$/;"	f	namespace:elem
HaveViewers	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline bool Grid::HaveViewers() const { return haveViewers_; }$/;"	f	class:elem::Grid
HeElectronicChargeDensityIGuess	src/apps/hf/test_he.cc	/^    HeElectronicChargeDensityIGuess(const coordT& center)$/;"	f	class:HeElectronicChargeDensityIGuess
HeElectronicChargeDensityIGuess	src/apps/hf/test_he.cc	/^class HeElectronicChargeDensityIGuess : public FunctionFunctorInterface<T,NDIM>$/;"	c	file:
HeNuclearChargeDensityIGuess	src/apps/hf/test_he.cc	/^    HeNuclearChargeDensityIGuess(const coordT& center)$/;"	f	class:HeNuclearChargeDensityIGuess
HeNuclearChargeDensityIGuess	src/apps/hf/test_he.cc	/^class HeNuclearChargeDensityIGuess : public FunctionFunctorInterface<T,NDIM>$/;"	c	file:
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types1
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types10
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types11
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types12
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types13
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types14
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types15
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types16
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types17
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types18
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types19
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types2
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types20
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types21
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types22
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types23
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types24
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types25
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types26
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types27
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types28
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types29
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types3
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types30
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types31
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types32
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types33
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types34
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types35
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types36
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types37
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types38
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types39
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types4
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types40
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types41
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types42
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types43
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types44
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types45
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types46
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types47
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types48
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types49
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types5
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types50
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types6
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types7
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types8
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types9
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates1
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates10
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates11
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates12
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates13
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates14
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates15
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates16
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates17
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates18
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates19
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates2
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates20
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates21
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates22
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates23
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates24
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates25
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates26
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates27
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates28
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates29
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates3
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates30
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates31
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates32
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates33
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates34
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates35
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates36
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates37
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates38
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates39
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates4
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates40
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates41
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates42
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates43
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates44
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates45
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates46
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates47
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates48
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates49
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates5
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates50
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates6
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates7
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates8
Head	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates9
Height	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::Height() const { return MCSize(); }$/;"	f	class:elem::Grid
Height	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::Height() const { return height_; }$/;"	f	class:elem::AbstractBlockDistMatrix
Height	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::Height() const { return height_; }$/;"	f	class:elem::AbstractDistMatrix
Height	src/madness/external/elemental/src/core/Matrix.cpp	/^Int Matrix<T>::Height() const { return height_; }$/;"	f	class:elem::Matrix
Helmholtz	src/madness/external/elemental/include/elemental/matrices/Helmholtz.hpp	/^Helmholtz( DistMatrix<F,U,V>& H, Int n, F shift )$/;"	f	namespace:elem
Helmholtz	src/madness/external/elemental/include/elemental/matrices/Helmholtz.hpp	/^Helmholtz( DistMatrix<F,U,V>& H, Int nx, Int ny, F shift )$/;"	f	namespace:elem
Helmholtz	src/madness/external/elemental/include/elemental/matrices/Helmholtz.hpp	/^Helmholtz( DistMatrix<F,U,V>& H, Int nx, Int ny, Int nz, F shift )$/;"	f	namespace:elem
Helmholtz	src/madness/external/elemental/include/elemental/matrices/Helmholtz.hpp	/^Helmholtz( Matrix<F>& H, Int n, F shift )$/;"	f	namespace:elem
Helmholtz	src/madness/external/elemental/include/elemental/matrices/Helmholtz.hpp	/^Helmholtz( Matrix<F>& H, Int nx, Int ny, F shift )$/;"	f	namespace:elem
Helmholtz	src/madness/external/elemental/include/elemental/matrices/Helmholtz.hpp	/^Helmholtz( Matrix<F>& H, Int nx, Int ny, Int nz, F shift )$/;"	f	namespace:elem
HelmholtzPML	src/madness/external/elemental/include/elemental/matrices/HelmholtzPML.hpp	/^HelmholtzPML$/;"	f	namespace:elem
Hemm	src/madness/external/elemental/include/elemental/blas-like/level3/Hemm.hpp	/^Hemm$/;"	f	namespace:elem
Hemm	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Hemm$/;"	f	namespace:elem::blas
Hemv	src/madness/external/elemental/include/elemental/blas-like/level2/Hemv.hpp	/^Hemv$/;"	f	namespace:elem
Hemv	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Hemv$/;"	f	namespace:elem::blas
Her	src/madness/external/elemental/include/elemental/blas-like/level2/Her.hpp	/^Her$/;"	f	namespace:elem
Her	src/madness/external/elemental/include/elemental/blas-like/level2/Her.hpp	/^Her( UpperOrLower uplo, T alpha, const Matrix<T>& x, Matrix<T>& A )$/;"	f	namespace:elem
Her	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Her$/;"	f	namespace:elem::blas
Her2	src/madness/external/elemental/include/elemental/blas-like/level2/Her2.hpp	/^Her2$/;"	f	namespace:elem
Her2	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Her2$/;"	f	namespace:elem::blas
Her2k	src/madness/external/elemental/include/elemental/blas-like/level3/Her2k.hpp	/^Her2k$/;"	f	namespace:elem
Her2k	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Her2k$/;"	f	namespace:elem::blas
Herk	src/madness/external/elemental/include/elemental/blas-like/level3/Herk.hpp	/^Herk$/;"	f	namespace:elem
Herk	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Herk$/;"	f	namespace:elem::blas
HermitianEig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^int HermitianEig$/;"	f	namespace:elem::lapack
HermitianEig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void HermitianEig$/;"	f	namespace:elem::lapack
HermitianEig	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	/^void HermitianEig$/;"	f	namespace:elem
HermitianEig	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	/^void HermitianEig<Complex<float>>$/;"	f	namespace:elem
HermitianEig	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	/^void HermitianEig<float>$/;"	f	namespace:elem
HermitianEigCtrl	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    HermitianEigCtrl()$/;"	f	struct:elem::HermitianEigCtrl
HermitianEigCtrl	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^struct HermitianEigCtrl$/;"	s	namespace:elem
HermitianEigWrapper	src/madness/external/elemental/src/core/imports/lapack.cpp	/^int HermitianEigWrapper$/;"	f	namespace:elem::lapack
HermitianEntrywiseNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Entrywise.hpp	/^HermitianEntrywiseNorm$/;"	f	namespace:elem
HermitianEntrywiseNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Entrywise.hpp	/^HermitianEntrywiseNorm( UpperOrLower uplo, const Matrix<F>& A, Base<F> p )$/;"	f	namespace:elem
HermitianEntrywiseOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/EntrywiseOne.hpp	/^HermitianEntrywiseOneNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
HermitianEntrywiseOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/EntrywiseOne.hpp	/^HermitianEntrywiseOneNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
HermitianFrobeniusNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Frobenius.hpp	/^HermitianFrobeniusNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
HermitianFrobeniusNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Frobenius.hpp	/^HermitianFrobeniusNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
HermitianFromEVD	src/madness/external/elemental/include/elemental/matrices/HermitianFromEVD.hpp	/^HermitianFromEVD$/;"	f	namespace:elem
HermitianGenDefiniteEig	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianGenDefiniteEig.hpp	/^HermitianGenDefiniteEig$/;"	f	namespace:elem
HermitianGenDefiniteEigType	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^enum HermitianGenDefiniteEigType$/;"	g	namespace:elem::HermitianGenDefiniteEigTypeNS
HermitianGenDefiniteEigTypeNS	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^namespace HermitianGenDefiniteEigTypeNS {$/;"	n	namespace:elem
HermitianInfinityNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Infinity.hpp	/^HermitianInfinityNorm$/;"	f	namespace:elem
HermitianInfinityNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Infinity.hpp	/^HermitianInfinityNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
HermitianInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Hermitian.hpp	/^HermitianInverse$/;"	f	namespace:elem
HermitianKyFanNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/KyFan.hpp	/^HermitianKyFanNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A, Int k )$/;"	f	namespace:elem
HermitianKyFanNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/KyFan.hpp	/^HermitianKyFanNorm( UpperOrLower uplo, const Matrix<F>& A, Int k )$/;"	f	namespace:elem
HermitianMaxNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Max.hpp	/^HermitianMaxNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
HermitianMaxNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Max.hpp	/^HermitianMaxNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
HermitianNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm.hpp	/^HermitianNorm$/;"	f	namespace:elem
HermitianNuclearNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Nuclear.hpp	/^HermitianNuclearNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
HermitianNuclearNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Nuclear.hpp	/^HermitianNuclearNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
HermitianOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/One.hpp	/^HermitianOneNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
HermitianOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/One.hpp	/^HermitianOneNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
HermitianPolar	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar.hpp	/^HermitianPolar( UpperOrLower uplo, DistMatrix<F>& A )$/;"	f	namespace:elem
HermitianPolar	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar.hpp	/^HermitianPolar( UpperOrLower uplo, DistMatrix<F>& A, DistMatrix<F>& P )$/;"	f	namespace:elem
HermitianPolar	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar.hpp	/^HermitianPolar( UpperOrLower uplo, Matrix<F>& A )$/;"	f	namespace:elem
HermitianPolar	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar.hpp	/^HermitianPolar( UpperOrLower uplo, Matrix<F>& A, Matrix<F>& P )$/;"	f	namespace:elem
HermitianPseudoinverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Pseudoinverse.hpp	/^HermitianPseudoinverse$/;"	f	namespace:elem
HermitianPseudoinverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Pseudoinverse.hpp	/^HermitianPseudoinverse( UpperOrLower uplo, Matrix<F>& A, Base<F> tolerance=0 )$/;"	f	namespace:elem
HermitianSVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD.hpp	/^inline void HermitianSVD$/;"	f	namespace:elem
HermitianSchattenNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Schatten.hpp	/^HermitianSchattenNorm$/;"	f	namespace:elem
HermitianSdcCtrl	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    HermitianSdcCtrl()$/;"	f	struct:elem::HermitianSdcCtrl
HermitianSdcCtrl	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^struct HermitianSdcCtrl {$/;"	s	namespace:elem
HermitianSign	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^HermitianSign$/;"	f	namespace:elem
HermitianSolve	src/madness/external/elemental/include/elemental/lapack-like/solve/HermitianSolve.hpp	/^HermitianSolve$/;"	f	namespace:elem
HermitianSwap	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^inline void HermitianSwap$/;"	f	namespace:elem
HermitianSwap	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^inline void HermitianSwap( UpperOrLower uplo, Matrix<F>& A, int to, int from )$/;"	f	namespace:elem
HermitianTridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag.cpp	/^HermitianTridiag$/;"	f	namespace:elem
HermitianTridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag.cpp	/^void HermitianTridiag( UpperOrLower uplo, Matrix<F>& A )$/;"	f	namespace:elem
HermitianTridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag.cpp	/^void HermitianTridiag( UpperOrLower uplo, Matrix<F>& A, Matrix<F>& t )$/;"	f	namespace:elem
HermitianTridiagApproach	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^enum HermitianTridiagApproach$/;"	g	namespace:elem::HermitianTridiagApproachNS
HermitianTridiagApproachNS	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^namespace HermitianTridiagApproachNS {$/;"	n	namespace:elem
HermitianTridiagCtrl	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^    HermitianTridiagCtrl() $/;"	f	struct:elem::HermitianTridiagCtrl
HermitianTridiagCtrl	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^struct HermitianTridiagCtrl {$/;"	s	namespace:elem
HermitianTridiagEig	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig.hpp	/^HermitianTridiagEig$/;"	f	namespace:elem
HermitianTridiagEigEstimate	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig.hpp	/^HermitianTridiagEigEstimate$/;"	f	namespace:elem
HermitianTridiagEigPostEstimate	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig.hpp	/^HermitianTridiagEigPostEstimate$/;"	f	namespace:elem
HermitianTwoNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Two.hpp	/^HermitianTwoNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
HermitianTwoNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Two.hpp	/^HermitianTwoNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
HermitianTwoNormEstimate	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/TwoEstimate.hpp	/^HermitianTwoNormEstimate$/;"	f	namespace:elem
HermitianUniformSpectrum	src/madness/external/elemental/include/elemental/matrices/HermitianUniformSpectrum.hpp	/^HermitianUniformSpectrum$/;"	f	namespace:elem
Hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg.hpp	/^inline void Hessenberg$/;"	f	namespace:elem
Hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg.hpp	/^inline void Hessenberg( UpperOrLower uplo, DistMatrix<F>& A )$/;"	f	namespace:elem
Hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg.hpp	/^inline void Hessenberg( UpperOrLower uplo, Matrix<F>& A )$/;"	f	namespace:elem
Hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg.hpp	/^inline void Hessenberg( UpperOrLower uplo, Matrix<F>& A, Matrix<F>& t )$/;"	f	namespace:elem
HessenbergEig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void HessenbergEig( int n, dcomplex* H, int ldH, dcomplex* w )$/;"	f	namespace:elem::lapack
HessenbergEig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void HessenbergEig( int n, double* H, int ldH, dcomplex* w )$/;"	f	namespace:elem::lapack
HessenbergEig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void HessenbergEig( int n, float* H, int ldH, scomplex* w )$/;"	f	namespace:elem::lapack
HessenbergEig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void HessenbergEig( int n, scomplex* H, int ldH, scomplex* w )$/;"	f	namespace:elem::lapack
HessenbergEig	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void HessenbergEig( int n, dcomplex* H, const int* descH, dcomplex* w ) $/;"	f	namespace:elem::scalapack
HessenbergEig	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void HessenbergEig( int n, double* H, const int* descH, dcomplex* w ) $/;"	f	namespace:elem::scalapack
HessenbergEig	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void HessenbergEig( int n, float* H, const int* descH, scomplex* w ) $/;"	f	namespace:elem::scalapack
HessenbergEig	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void HessenbergEig( int n, scomplex* H, const int* descH, scomplex* w ) $/;"	f	namespace:elem::scalapack
HessenbergPseudospectrum	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum.hpp	/^HessenbergPseudospectrum$/;"	f	namespace:elem
HessenbergSchur	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void HessenbergSchur$/;"	f	namespace:elem::lapack
HessenbergSchur	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void HessenbergSchur( int n, float* H, int ldH, scomplex* w, bool fullTriangle )$/;"	f	namespace:elem::lapack
HessenbergSchur	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void HessenbergSchur$/;"	f	namespace:elem::scalapack
HighDimIndexIterator	src/madness/mra/indexit.h	/^        HighDimIndexIterator() : IndexIterator(0, 0l) {}$/;"	f	class:madness::HighDimIndexIterator
HighDimIndexIterator	src/madness/mra/indexit.h	/^        HighDimIndexIterator(const V& limits) : IndexIterator(limits) {}$/;"	f	class:madness::HighDimIndexIterator
HighDimIndexIterator	src/madness/mra/indexit.h	/^        HighDimIndexIterator(int ndim, const long limits[]) :$/;"	f	class:madness::HighDimIndexIterator
HighDimIndexIterator	src/madness/mra/indexit.h	/^        HighDimIndexIterator(int ndim, long top) : IndexIterator(ndim, top) {}$/;"	f	class:madness::HighDimIndexIterator
HighDimIndexIterator	src/madness/mra/indexit.h	/^    class HighDimIndexIterator : public IndexIterator {$/;"	c	namespace:madness
Hilbert	src/madness/external/elemental/include/elemental/matrices/Hilbert.hpp	/^Hilbert( BlockDistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Hilbert	src/madness/external/elemental/include/elemental/matrices/Hilbert.hpp	/^Hilbert( DistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Hilbert	src/madness/external/elemental/include/elemental/matrices/Hilbert.hpp	/^Hilbert( Matrix<F>& A, Int n )$/;"	f	namespace:elem
HilbertSchmidt	src/madness/external/elemental/include/elemental/blas-like/level1/HilbertSchmidt.hpp	/^HilbertSchmidt( const DistMatrix<F,U,V>& A, const DistMatrix<F,U,V>& B )$/;"	f	namespace:elem
HilbertSchmidt	src/madness/external/elemental/include/elemental/blas-like/level1/HilbertSchmidt.hpp	/^HilbertSchmidt( const Matrix<F>& A, const Matrix<F>& B )$/;"	f	namespace:elem
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Householder.hpp	/^Householder$/;"	f	namespace:elem::lq
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Householder.hpp	/^Householder( DistMatrix<F>& A )$/;"	f	namespace:elem::lq
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Householder.hpp	/^Householder( Matrix<F>& A )$/;"	f	namespace:elem::lq
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Householder.hpp	/^Householder( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d )$/;"	f	namespace:elem::lq
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Householder.hpp	/^Householder$/;"	f	namespace:elem::qr
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Householder.hpp	/^Householder( DistMatrix<F>& A )$/;"	f	namespace:elem::qr
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Householder.hpp	/^Householder( Matrix<F>& A )$/;"	f	namespace:elem::qr
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Householder.hpp	/^Householder( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d )$/;"	f	namespace:elem::qr
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Householder.hpp	/^Householder$/;"	f	namespace:elem::rq
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Householder.hpp	/^Householder( DistMatrix<F>& A )$/;"	f	namespace:elem::rq
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Householder.hpp	/^Householder( Matrix<F>& A )$/;"	f	namespace:elem::rq
Householder	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Householder.hpp	/^Householder( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d )$/;"	f	namespace:elem::rq
I	src/apps/nick/wavef.h	/^    static const complexd I;$/;"	m	class:baseWF
I	src/examples/tdse1d.cc	/^static const double_complex I = double_complex(0,1);$/;"	v	file:
I	src/madness/mra/tools/longfloat.py	/^    I = interpolators()$/;"	v
IBroadcast	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void IBroadcast$/;"	f	namespace:elem::mpi
IBroadcast	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void IBroadcast( R* buf, int count, int root, Comm comm, Request& request )$/;"	f	namespace:elem::mpi
IBroadcast	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void IBroadcast( T& b, int root, Comm comm, Request& request )$/;"	f	namespace:elem::mpi
ID	src/madness/external/elemental/include/elemental/lapack-like/factor/ID.hpp	/^ID$/;"	f	namespace:elem
ID	src/madness/external/elemental/include/elemental/lapack-like/factor/ID.hpp	/^ID( const Matrix<F>& A, Matrix<Int>& pPerm, Matrix<F>& Z, Int numSteps )$/;"	f	namespace:elem
ID_VOID_MAIN	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IEigSolverObserver	src/apps/hf/eigsolver.h	/^class IEigSolverObserver$/;"	c	namespace:madness
IGNORE_SHARDING_PROTOCOL	src/madness/external/gtest/src/gtest-internal-inl.h	/^    IGNORE_SHARDING_PROTOCOL$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding
IGather	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void IGather$/;"	f	namespace:elem::mpi
INC	src/madness/tensor/mtxmq_bg/Makefile	/^   INC=-I$(MY_ROOT) -I\/bgsys\/drivers\/ppcfloor\/$/;"	m
INC	src/madness/tensor/mtxmq_bg/Makefile	/^   INC=-I$(MY_ROOT)$/;"	m
INC	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   INC=-I$(MY_ROOT) -I\/bgsys\/drivers\/ppcfloor\/$/;"	m
INC	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   INC=-I$(MY_ROOT)$/;"	m
INCA	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define INCA   add DIMI8, A$/;"	d
INCB	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	2676;"	d	file:
INCB	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	2673;"	d	file:
INCC	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define INCC  mov C, B; add $8, B;    mov B, C;$/;"	d
INCCT	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define INCCT mov C, B; add DIMI8, B; mov B, C;$/;"	d
INCLUDES	src/apps/moldft/fci/GNUmakefile	/^ INCLUDES = -I.$/;"	m
INCLUDES	src/madness/mra/minmax/Makefile	/^INCLUDES = -I\/home\/rjh\/install\/include -I.$/;"	m
IND	src/madness/tensor/tensor_macros.h	204;"	d
IND1	src/madness/tensor/tensor_macros.h	198;"	d
IND2	src/madness/tensor/tensor_macros.h	199;"	d
IND3	src/madness/tensor/tensor_macros.h	200;"	d
IND4	src/madness/tensor/tensor_macros.h	201;"	d
IND5	src/madness/tensor/tensor_macros.h	202;"	d
IND6	src/madness/tensor/tensor_macros.h	203;"	d
INFINITY_NORM	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    INFINITY_NORM,      \/\/ Operator infinity norm$/;"	e	enum:elem::NormTypeNS::NormType
INSTANTIATE_TEST_CASE_P	src/madness/external/gtest/include/gtest/gtest-param-test.h	1406;"	d
INSTANTIATE_TYPED_TEST_CASE_P	src/madness/external/gtest/include/gtest/gtest-typed-test.h	250;"	d
INTEGER	src/examples/compiler/mra-driver.hh	/^        INTEGER, $/;"	e	enum:Exp::Type
INTERCEPT_ALL_THREADS	src/madness/external/gtest/include/gtest/gtest-spi.h	/^    INTERCEPT_ALL_THREADS           \/\/ Intercepts all failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode
INTERCEPT_ONLY_CURRENT_THREAD	src/madness/external/gtest/include/gtest/gtest-spi.h	/^    INTERCEPT_ONLY_CURRENT_THREAD,  \/\/ Intercepts only thread local failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode
INTERP_H	src/apps/nick/interp.h	33;"	d
INT_EIGPAIR	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	922;"	d	file:
INT_EIGVAL	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	909;"	d	file:
IN_PROGRESS	src/madness/external/gtest/src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
IOBUFSIZE	src/madness/world/binary_fstream_archive.h	/^            static const std::size_t IOBUFSIZE = 4*1024*1024; \/\/\/< Buffer size.$/;"	m	class:madness::archive::BinaryFstreamInputArchive
IOBUFSIZE	src/madness/world/binary_fstream_archive.h	/^            static const std::size_t IOBUFSIZE = 4*1024*1024; \/\/\/< Buffer size.$/;"	m	class:madness::archive::BinaryFstreamOutputArchive
IProbe	src/madness/external/elemental/src/core/imports/mpi.cpp	/^bool IProbe( int source, Comm comm, Status& status )$/;"	f	namespace:elem::mpi
IProbe	src/madness/external/elemental/src/core/imports/mpi.cpp	/^bool IProbe( int source, int tag, Comm comm, Status& status )$/;"	f	namespace:elem::mpi
IRA	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRA.hpp	/^IRA$/;"	f	namespace:elem::pspec
IRL	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRL.hpp	/^IRL$/;"	f	namespace:elem::pspec
IRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T IRecv( int from, Comm comm, Request& request )$/;"	f	namespace:elem::mpi
IRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void IRecv( T* buf, int count, int from, Comm comm, Request& request )$/;"	f	namespace:elem::mpi
ISSend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ISSend( const T* buf, int count, int to, Comm comm, Request& request )$/;"	f	namespace:elem::mpi
IS_ODD	src/madness/tensor/tensor.h	232;"	d
IS_UNALIGNED	src/madness/tensor/tensor.h	233;"	d
ISend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ISend$/;"	f	namespace:elem::mpi
ISend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ISend( T b, int to, Comm comm, Request& request )$/;"	f	namespace:elem::mpi
ITERATOR	src/madness/tensor/tensor_macros.h	249;"	d
ITERATOR1	src/madness/tensor/tensor_macros.h	207;"	d
ITERATOR2	src/madness/tensor/tensor_macros.h	211;"	d
ITERATOR3	src/madness/tensor/tensor_macros.h	216;"	d
ITERATOR4	src/madness/tensor/tensor_macros.h	222;"	d
ITERATOR5	src/madness/tensor/tensor_macros.h	230;"	d
ITERATOR6	src/madness/tensor/tensor_macros.h	239;"	d
Identify	src/madness/external/tinyxml/tinyxmlparser.cc	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode
Identity	src/madness/external/elemental/include/elemental/matrices/Identity.hpp	/^Identity( BlockDistMatrix<T,U,V>& I, Int m, Int n )$/;"	f	namespace:elem
Identity	src/madness/external/elemental/include/elemental/matrices/Identity.hpp	/^Identity( DistMatrix<T,U,V>& I, Int m, Int n )$/;"	f	namespace:elem
Identity	src/madness/external/elemental/include/elemental/matrices/Identity.hpp	/^Identity( Matrix<T>& I, Int m, Int n )$/;"	f	namespace:elem
IgnoreUndefVar	src/madness/external/muParser/muParserTokenReader.cpp	/^  void ParserTokenReader::IgnoreUndefVar(bool bIgnore)$/;"	f	class:mu::ParserTokenReader
ImagPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^ImagPart( const Complex<Real>& alpha )$/;"	f	namespace:elem
ImagPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^ImagPart( const Real& alpha )$/;"	f	namespace:elem
ImagPartImage	src/madness/external/elemental/include/elemental/io/Write/Image.hpp	/^ImagPartImage$/;"	f	namespace:elem::write
Image	src/madness/external/elemental/include/elemental/io/Write/Image.hpp	/^Image$/;"	f	namespace:elem::write
Impl	src/madness/world/group.h	/^            Impl(World& world, const A& group, const DistributedID& did) :$/;"	f	class:madness::Group::Impl
Impl	src/madness/world/group.h	/^        class Impl {$/;"	c	class:madness::Group
Impl	src/madness/world/safempi.h	/^            Impl(MPI_Comm comm) {$/;"	f	struct:SafeMPI::Group::Impl
Impl	src/madness/world/safempi.h	/^            Impl(const Impl& other, int n, const int* ranks) {$/;"	f	struct:SafeMPI::Group::Impl
Impl	src/madness/world/safempi.h	/^            Impl(const MPI_Comm& c, int m, int n, bool o) :$/;"	f	struct:SafeMPI::Intracomm::Impl
Impl	src/madness/world/safempi.h	/^        struct Impl {$/;"	s	class:SafeMPI::Group
Impl	src/madness/world/safempi.h	/^        struct Impl {$/;"	s	class:SafeMPI::Intracomm
Implementation Notes	doc/Latex/implementation.tex	/^\\chapter{Implementation Notes}$/;"	c
ImplicitCast_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline To ImplicitCast_(To x) { return x; }$/;"	f	namespace:testing::internal
ImplicitHaar	src/madness/external/elemental/include/elemental/matrices/Haar.hpp	/^ImplicitHaar$/;"	f	namespace:elem
ImplicitHaar	src/madness/external/elemental/include/elemental/matrices/Haar.hpp	/^ImplicitHaar( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d, Int n )$/;"	f	namespace:elem
ImplicitlyConvertible	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class ImplicitlyConvertible {$/;"	c	namespace:testing::internal
InDeathTestChild	src/madness/external/gtest/src/gtest-death-test.cc	/^bool InDeathTestChild() {$/;"	f	namespace:testing::internal
InGrid	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline bool Grid::InGrid() const $/;"	f	class:elem::Grid
InPlaceRedist	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	/^void InPlaceRedist$/;"	f	namespace:elem::herm_eig
Incl	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Incl( Group group, int n, const int* ranks, Group& subGroup )$/;"	f	namespace:elem::mpi
Incl	src/madness/world/safempi.h	/^        Group Incl(int n, const int* ranks) const {$/;"	f	class:SafeMPI::Group
Indent	src/madness/external/tinyxml/tinyxml.h	/^	const char* Indent()							{ return indent.c_str(); }$/;"	f	class:TiXmlPrinter
IndexIterator	src/madness/mra/indexit.h	/^        IndexIterator() {}$/;"	f	class:madness::IndexIterator
IndexIterator	src/madness/mra/indexit.h	/^        IndexIterator(const V& limits) :$/;"	f	class:madness::IndexIterator
IndexIterator	src/madness/mra/indexit.h	/^        IndexIterator(int ndim, const long limits[]) :$/;"	f	class:madness::IndexIterator
IndexIterator	src/madness/mra/indexit.h	/^        IndexIterator(int ndim, long top) :$/;"	f	class:madness::IndexIterator
IndexIterator	src/madness/mra/indexit.h	/^    class IndexIterator {$/;"	c	namespace:madness
Inertia	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Inertia.hpp	/^Inertia$/;"	f	namespace:elem::ldl
Inertia	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Inertia.hpp	/^Inertia( const DistMatrix<Base<F>,U,V>& d, const DistMatrix<F,U,V>& dSub )$/;"	f	namespace:elem::ldl
Inertia	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Inertia.hpp	/^Inertia( const Matrix<Base<F>>& d, const Matrix<F>& dSub )$/;"	f	namespace:elem::ldl
Inertia	src/madness/external/elemental/include/elemental/lapack-like/props/Inertia.hpp	/^Inertia$/;"	f	namespace:elem
Inertia	src/madness/external/elemental/include/elemental/lapack-like/props/Inertia.hpp	/^Inertia( UpperOrLower uplo, Matrix<F>& A, LDLPivotType pivotType=BUNCH_PARLETT )$/;"	f	namespace:elem
InertiaType	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^struct InertiaType$/;"	s	namespace:elem
Infinity	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static RawType Infinity() {$/;"	f	class:testing::internal::FloatingPoint
InfinityCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Infinity.hpp	/^InfinityCondition( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
InfinityCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Infinity.hpp	/^InfinityCondition( const Matrix<F>& A )$/;"	f	namespace:elem
InfinityNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Infinity.hpp	/^InfinityNorm( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
InfinityNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Infinity.hpp	/^InfinityNorm( const Matrix<F>& A )$/;"	f	namespace:elem
Info	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	/^struct Info {$/;"	s	namespace:elem::herm_tridiag_eig
InhomoConstantSphere	src/apps/interior_bc/test_problems.h	/^        InhomoConstantSphere(int k, double thresh, double eps, std::string penalty_name,$/;"	f	class:InhomoConstantSphere
InhomoConstantSphere	src/apps/interior_bc/test_problems.h	/^class InhomoConstantSphere : public EmbeddedDirichlet {$/;"	c
Inhomogeneity	src/apps/interior_bc/test_problems.h	/^        double Inhomogeneity(const Vector<double, 3> &x) const {$/;"	f	class:ConstantSphere
Inhomogeneity	src/apps/interior_bc/test_problems.h	/^        double Inhomogeneity(const Vector<double, 3> &x) const {$/;"	f	class:CosineSphere
Inhomogeneity	src/apps/interior_bc/test_problems.h	/^        double Inhomogeneity(const Vector<double, 3> &x) const {$/;"	f	class:InhomoConstantSphere
Inhomogeneity	src/apps/interior_bc/test_problems.h	/^        double Inhomogeneity(const Vector<double, 3> &x) const {$/;"	f	class:Y20Sphere
Init	src/apps/nick/wavef.cc	/^void ScatteringWF::Init(World& world) {$/;"	f	class:ScatteringWF
Init	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  void Init(const Element* array, size_t a_size, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
Init	src/madness/external/gtest/src/gtest-port.cc	/^void RE::Init(const char* regex) {$/;"	f	class:testing::internal::RE
Init	src/madness/external/gtest/src/gtest.cc	/^void ScopedFakeTestPartResultReporter::Init() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
Init	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::Init()$/;"	f	class:mu::ParserBase
Init	src/madness/world/safempi.h	/^    inline void Init() {$/;"	f	namespace:SafeMPI
Init	src/madness/world/safempi.h	/^    inline void Init(int &argc, char **&argv) {$/;"	f	namespace:SafeMPI
InitA	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void InitA( DistMatrix<double>& A, bool print )$/;"	f
InitB	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void InitB( DistMatrix<double>& B, bool print )$/;"	f
InitC	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void InitC( DistMatrix<double>& C, bool print )$/;"	f
InitCharSets	src/madness/external/muParser/muParser.cpp	/^  void Parser::InitCharSets()$/;"	f	class:mu::Parser
InitConst	src/madness/external/muParser/muParser.cpp	/^  void Parser::InitConst()$/;"	f	class:mu::Parser
InitDeathTestSubprocessControlInfo	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void InitDeathTestSubprocessControlInfo() {$/;"	f	class:testing::internal::UnitTestImpl
InitDepthComms	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void InitDepthComms( int meshSize, mpi::Comm& depthComm, mpi::Comm& meshComm )$/;"	f
InitFileData	src/apps/moldft/fci/crayio.c	/^void InitFileData(struct w_file *file)$/;"	f
InitFileStats	src/apps/moldft/fci/crayio.c	/^void InitFileStats(struct w_file *file)$/;"	f
InitFun	src/madness/external/muParser/muParser.cpp	/^  void Parser::InitFun()$/;"	f	class:mu::Parser
InitGoogleTest	src/madness/external/gtest/src/gtest.cc	/^void InitGoogleTest(int* argc, char** argv) {$/;"	f	namespace:testing
InitGoogleTest	src/madness/external/gtest/src/gtest.cc	/^void InitGoogleTest(int* argc, wchar_t** argv) {$/;"	f	namespace:testing
InitGoogleTestImpl	src/madness/external/gtest/src/gtest.cc	/^void InitGoogleTestImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
InitOprt	src/madness/external/muParser/muParser.cpp	/^  void Parser::InitOprt()$/;"	f	class:mu::Parser
InitTokenReader	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::InitTokenReader()$/;"	f	class:mu::ParserBase
Init_thread	src/madness/world/safempi.h	/^    inline int Init_thread(int & argc, char **& argv, int requested) {$/;"	f	namespace:SafeMPI
Init_thread	src/madness/world/safempi.h	/^    inline int Init_thread(int requested) {$/;"	f	namespace:SafeMPI
Initialize	src/madness/external/elemental/src/core/global.cpp	/^void Initialize( int& argc, char**& argv )$/;"	f	namespace:elem
Initialize	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Initialize( int& argc, char**& argv )$/;"	f	namespace:elem::mpi
Initialize	src/madness/world/hardware.cc	/^    void Hardware::Initialize(void) {$/;"	f	class:madness::Hardware
InitializeCPUFrequency	src/madness/world/hardware.cc	/^    void Hardware::InitializeCPUFrequency(void) {$/;"	f	class:madness::Hardware
InitializeHWThreads	src/madness/world/hardware.cc	/^    void Hardware::InitializeHWThreads(void) {$/;"	f	class:madness::Hardware
InitializeMatrices	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void InitializeMatrices$/;"	f
InitializeMemorySize	src/madness/world/hardware.cc	/^    void Hardware::InitializeMemorySize(void) {$/;"	f	class:madness::Hardware
InitializeThread	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int InitializeThread( int& argc, char**& argv, int required )$/;"	f	namespace:elem::mpi
Initialized	src/madness/external/elemental/src/core/global.cpp	/^bool Initialized()$/;"	f	namespace:elem
Initialized	src/madness/external/elemental/src/core/imports/mpi.cpp	/^bool Initialized()$/;"	f	namespace:elem::mpi
InnerProducts	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^InnerProducts$/;"	f	namespace:elem::pspec
Input	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^Input( std::string name, std::string desc )$/;"	f	namespace:elem
Input	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^Input( std::string name, std::string desc, T defaultVal )$/;"	f	namespace:elem
Input	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^Args::Input( std::string name, std::string desc )$/;"	f	class:elem::choice::Args
Input	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^Args::Input( std::string name, std::string desc, T defaultVal )$/;"	f	class:elem::choice::Args
Input	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^MpiArgs::Input( std::string name, std::string desc )$/;"	f	class:elem::choice::MpiArgs
Input	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^MpiArgs::Input( std::string name, std::string desc, T defaultVal )$/;"	f	class:elem::choice::MpiArgs
Input File Structure	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\subsection{Input File Structure}$/;"	b
Input sections	doc/Latex/apps/nemo_mp2/manual.tex	/^\\section{Input sections}$/;"	s
InputParameters	src/apps/nick/extra.h	/^struct InputParameters {$/;"	s
InputParameters	src/apps/nick/tdse1.cc	/^struct InputParameters {$/;"	s	file:
InputParameters	src/apps/tdse/tdse.cc	/^struct InputParameters {$/;"	s	file:
InputParameters	src/apps/tdse/tdse.confused.cc	/^struct InputParameters {$/;"	s	file:
InputParameters	src/apps/tdse/tdse4.cc	/^struct InputParameters {$/;"	s	file:
InsertAfterChild	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode
InsertBeforeChild	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode
InsertEndChild	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode
Instance	src/madness/external/muParser/muParserError.cpp	/^  const ParserErrorMsg& ParserErrorMsg::Instance()$/;"	f	class:mu::ParserErrorMsg
InstantiationContainer	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^      InstantiationContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Int	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^typedef int Int;$/;"	t	namespace:elem
Int	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^typedef long long int Int;$/;"	t	namespace:elem
Int	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef __int64 Int;$/;"	t	class:testing::internal::TypeWithSize
Int	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef int Int;$/;"	t	class:testing::internal::TypeWithSize
Int32	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<4>::Int Int32;$/;"	t	namespace:testing::internal
Int32FromEnvOrDie	src/madness/external/gtest/src/gtest.cc	/^Int32 Int32FromEnvOrDie(const char* var, Int32 default_val) {$/;"	f	namespace:testing::internal
Int32FromGTestEnv	src/madness/external/gtest/src/gtest-port.cc	/^Int32 Int32FromGTestEnv(const char* flag, Int32 default_value) {$/;"	f	namespace:testing::internal
Int64	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<8>::Int Int64;$/;"	t	namespace:testing::internal
IntValue	src/madness/external/tinyxml/tinyxml.cc	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute
InterceptMode	src/madness/external/gtest/include/gtest/gtest-spi.h	/^  enum InterceptMode {$/;"	g	class:testing::ScopedFakeTestPartResultReporter
InterfacePtr	src/madness/mra/function_factory.h	/^    typedef std::shared_ptr<FunctionFunctorInterface<double, 6> > InterfacePtr;$/;"	t	class:madness::TwoElectronFactory
InternalRunDeathTestFlag	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  InternalRunDeathTestFlag(const std::string& a_file,$/;"	f	class:testing::internal::InternalRunDeathTestFlag
InternalRunDeathTestFlag	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^class InternalRunDeathTestFlag {$/;"	c	namespace:testing::internal
Intracomm	src/madness/world/safempi.cc	/^    Intracomm::Intracomm(const WorldInitObject& init) :$/;"	f	class:SafeMPI::Intracomm
Intracomm	src/madness/world/safempi.h	/^        Intracomm() : pimpl(nullptr) {}$/;"	f	class:SafeMPI::Intracomm
Intracomm	src/madness/world/safempi.h	/^        Intracomm(const Intracomm& other) : pimpl(other.pimpl) { }$/;"	f	class:SafeMPI::Intracomm
Intracomm	src/madness/world/safempi.h	/^        Intracomm(const std::shared_ptr<Impl>& i) : pimpl(i) { }$/;"	f	class:SafeMPI::Intracomm
Intracomm	src/madness/world/safempi.h	/^        explicit Intracomm(const MPI_Comm& comm, bool take_ownership_of_comm = true) :$/;"	f	class:SafeMPI::Intracomm
Intracomm	src/madness/world/safempi.h	/^    class Intracomm {$/;"	c	namespace:SafeMPI
Intro	doc/Latex/apps/nemo_mp2/manual.tex	/^\\section{Intro}$/;"	s
Introduction	src/apps/moldft/fci/doc/matrixelements.tex	/^\\section{Introduction}$/;"	s
InvBetaScale	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^InvBetaScale( const std::vector<Base<F>>& scales, DistMatrix<F>& Y )$/;"	f	namespace:elem::pspec
InvBetaScale	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^InvBetaScale( const std::vector<Base<F>>& scales, Matrix<F>& Y )$/;"	f	namespace:elem::pspec
Inverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General.hpp	/^Inverse( DistMatrix<F>& A )$/;"	f	namespace:elem
Inverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General.hpp	/^Inverse( Matrix<F>& A )$/;"	f	namespace:elem
Inverse	src/madness/misc/cfft.cc	/^bool CFFT::Inverse(const double_complex *const Input, double_complex *const Output, const unsigned int N, const bool Scale \/* = true *\/)$/;"	f	class:CFFT
Inverse	src/madness/misc/cfft.cc	/^bool CFFT::Inverse(double_complex *const Data, const unsigned int N, const bool Scale \/* = true *\/)$/;"	f	class:CFFT
InverseFreeSign	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/InverseFreeSDC.hpp	/^InverseFreeSign( DistMatrix<F>& X, Int maxIts=100, Base<F> tau=0 )$/;"	f	namespace:elem::schur
InverseFreeSign	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/InverseFreeSDC.hpp	/^InverseFreeSign( Matrix<F>& X, Int maxIts=100, Base<F> tau=0 )$/;"	f	namespace:elem::schur
InverseFreeSignDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/InverseFreeSDC.hpp	/^InverseFreeSignDivide( DistMatrix<F>& X )$/;"	f	namespace:elem::schur
InverseFreeSignDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/InverseFreeSDC.hpp	/^InverseFreeSignDivide( Matrix<F>& X )$/;"	f	namespace:elem::schur
InversePermuteCols	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteCols.hpp	/^InversePermuteCols$/;"	f	namespace:elem
InversePermuteCols	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteCols.hpp	/^InversePermuteCols( Matrix<T>& A, const Matrix<Int>& invPerm )$/;"	f	namespace:elem
InversePermuteRows	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteRows.hpp	/^InversePermuteRows$/;"	f	namespace:elem
InversePermuteRows	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteRows.hpp	/^InversePermuteRows( Matrix<T>& A, const Matrix<Int>& invPerm )$/;"	f	namespace:elem
InvertPermutation	src/madness/external/elemental/include/elemental/lapack-like/perm/InvertPermutation.hpp	/^InvertPermutation$/;"	f	namespace:elem
InvertPermutation	src/madness/external/elemental/include/elemental/lapack-like/perm/InvertPermutation.hpp	/^InvertPermutation( const Matrix<Int>& perm, Matrix<Int>& invPerm )$/;"	f	namespace:elem
Irecv	src/madness/world/safempi.h	/^        Request Irecv(void* buf, const int count, const MPI_Datatype datatype, const int src, const int tag) const {$/;"	f	class:SafeMPI::Intracomm
Irecv	src/madness/world/worldmpi.h	/^        Irecv(T& buf, int source, int tag=SafeMPI::DEFAULT_SEND_RECV_TAG) const {$/;"	f	class:madness::WorldMpiInterface
Irecv	src/madness/world/worldmpi.h	/^        Irecv(T* buf, int count, int source, int tag=SafeMPI::DEFAULT_SEND_RECV_TAG) const {$/;"	f	class:madness::WorldMpiInterface
IsAProtocolMessage	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct IsAProtocolMessage$/;"	s	namespace:testing::internal
IsATTY	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int IsATTY(int \/* fd *\/) { return 0; }$/;"	f	namespace:testing::internal::posix
IsATTY	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int IsATTY(int fd) { return _isatty(fd); }$/;"	f	namespace:testing::internal::posix
IsATTY	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int IsATTY(int fd) { return isatty(fd); }$/;"	f	namespace:testing::internal::posix
IsAbsolutePath	src/madness/external/gtest/src/gtest-filepath.cc	/^bool FilePath::IsAbsolutePath() const {$/;"	f	class:testing::internal::FilePath
IsAlNum	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline bool IsAlNum(char ch) {$/;"	f	namespace:testing::internal
IsAlltrue	src/apps/chem/oep.h	/^	bool IsAlltrue(std::vector<bool> vec) {$/;"	f	class:madness::OEP
IsAlpha	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline bool IsAlpha(char ch) {$/;"	f	namespace:testing::internal
IsAlpha	src/madness/external/tinyxml/tinyxmlparser.cc	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase
IsAlphaNum	src/madness/external/tinyxml/tinyxmlparser.cc	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase
IsArgSep	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsArgSep(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsAsciiDigit	src/madness/external/gtest/src/gtest-port.cc	/^bool IsAsciiDigit(char ch) { return '0' <= ch && ch <= '9'; }$/;"	f	namespace:testing::internal
IsAsciiPunct	src/madness/external/gtest/src/gtest-port.cc	/^bool IsAsciiPunct(char ch) {$/;"	f	namespace:testing::internal
IsAsciiWhiteSpace	src/madness/external/gtest/src/gtest-port.cc	/^bool IsAsciiWhiteSpace(char ch) { return IsInSet(ch, " \\f\\n\\r\\t\\v"); }$/;"	f	namespace:testing::internal
IsAsciiWordChar	src/madness/external/gtest/src/gtest-port.cc	/^bool IsAsciiWordChar(char ch) {$/;"	f	namespace:testing::internal
IsBuiltIn	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsBuiltIn(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsComplex	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	/^struct IsComplex { enum { val=0 }; };$/;"	s	namespace:elem
IsComplex	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	/^struct IsComplex<Complex<Real>> { enum { val=1 }; };$/;"	s	namespace:elem
IsContainer	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^typedef int IsContainer;$/;"	t	namespace:testing::internal
IsContainerTest	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^IsContainer IsContainerTest(int \/* dummy *\/,$/;"	f	namespace:testing::internal
IsContainerTest	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^IsNotContainer IsContainerTest(long \/* dummy *\/) { return '\\0'; }$/;"	f	namespace:testing::internal
IsDigit	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline bool IsDigit(char ch) {$/;"	f	namespace:testing::internal
IsDir	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline bool IsDir(const StatStruct& st) {$/;"	f	namespace:testing::internal::posix
IsDirectory	src/madness/external/gtest/src/gtest-filepath.cc	/^bool FilePath::IsDirectory() const {$/;"	f	class:testing::internal::FilePath
IsEOF	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsEOF(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsEmpty	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^  bool IsEmpty() const { return pathname_.empty(); }$/;"	f	class:testing::internal::FilePath
IsFixedSize	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^static inline bool IsFixedSize( ViewType v )$/;"	f	namespace:elem::ViewTypeNS
IsFlagSet	src/madness/external/muParser/muParserToken.h	/^      bool IsFlagSet(int a_iFlags) const$/;"	f	class:mu::ParserToken
IsFunTok	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsFunTok(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsHRESULTFailure	src/madness/external/gtest/src/gtest.cc	/^AssertionResult IsHRESULTFailure(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsHRESULTSuccess	src/madness/external/gtest/src/gtest.cc	/^AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsInSet	src/madness/external/gtest/src/gtest-port.cc	/^bool IsInSet(char ch, const char* str) {$/;"	f	namespace:testing::internal
IsInf	src/apps/nick/mpreal.h	72;"	d
IsInf	src/apps/nick/mpreal.h	76;"	d
IsInf	src/apps/nick/mpreal.h	80;"	d
IsInfixOpTok	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsInfixOpTok(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsLocal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::IsLocal( Int i, Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
IsLocal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::IsLocal( Int i, Int j ) const$/;"	f	class:elem::AbstractDistMatrix
IsLocalCol	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::IsLocalCol( Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
IsLocalCol	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::IsLocalCol( Int j ) const$/;"	f	class:elem::AbstractDistMatrix
IsLocalRow	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::IsLocalRow( Int i ) const$/;"	f	class:elem::AbstractBlockDistMatrix
IsLocalRow	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::IsLocalRow( Int i ) const$/;"	f	class:elem::AbstractDistMatrix
IsLocked	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^static inline bool IsLocked( ViewType v )$/;"	f	namespace:elem::ViewTypeNS
IsLower	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline bool IsLower(char ch) {$/;"	f	namespace:testing::internal
IsNormalizableWhitespace	src/madness/external/gtest/src/gtest.cc	/^  static bool IsNormalizableWhitespace(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsNotContainer	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^typedef char IsNotContainer;$/;"	t	namespace:testing::internal
IsNotSubstring	src/madness/external/gtest/src/gtest.cc	/^AssertionResult IsNotSubstring($/;"	f	namespace:testing
IsOprt	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsOprt(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsOptimizable	src/madness/external/muParser/muParserCallback.cpp	/^  bool ParserCallback::IsOptimizable() const  $/;"	f	class:mu::ParserCallback
IsPathSeparator	src/madness/external/gtest/src/gtest-filepath.cc	/^static bool IsPathSeparator(char c) {$/;"	f	namespace:testing::internal
IsPostOpTok	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsPostOpTok(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsPrintableAscii	src/madness/external/gtest/src/gtest-printers.cc	/^inline bool IsPrintableAscii(wchar_t c) {$/;"	f	namespace:testing::internal
IsRepeat	src/madness/external/gtest/src/gtest-port.cc	/^bool IsRepeat(char ch) { return IsInSet(ch, "?*+"); }$/;"	f	namespace:testing::internal
IsRootDirectory	src/madness/external/gtest/src/gtest-filepath.cc	/^bool FilePath::IsRootDirectory() const {$/;"	f	class:testing::internal::FilePath
IsSpace	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline bool IsSpace(char ch) {$/;"	f	namespace:testing::internal
IsStrVarTok	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsStrVarTok(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsString	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsString(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsSubstring	src/madness/external/gtest/src/gtest.cc	/^AssertionResult IsSubstring($/;"	f	namespace:testing
IsSubstringImpl	src/madness/external/gtest/src/gtest.cc	/^AssertionResult IsSubstringImpl($/;"	f	namespace:testing::__anon36
IsSubstringPred	src/madness/external/gtest/src/gtest.cc	/^bool IsSubstringPred(const StringType& needle,$/;"	f	namespace:testing::__anon36
IsSubstringPred	src/madness/external/gtest/src/gtest.cc	/^bool IsSubstringPred(const char* needle, const char* haystack) {$/;"	f	namespace:testing::__anon36
IsSubstringPred	src/madness/external/gtest/src/gtest.cc	/^bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {$/;"	f	namespace:testing::__anon36
IsSupported	src/madness/tensor/type_data.h	/^    struct IsSupported <TypeData, ReturnType, true> {$/;"	s	namespace:madness
IsTrue	src/madness/external/gtest/src/gtest.cc	/^bool IsTrue(bool condition) { return condition; }$/;"	f	namespace:testing::internal
IsUndefVarTok	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsUndefVarTok(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsUpper	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline bool IsUpper(char ch) {$/;"	f	namespace:testing::internal
IsUtf16SurrogatePair	src/madness/external/gtest/src/gtest.cc	/^inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {$/;"	f	namespace:testing::internal
IsVal	src/madness/external/muParser/muParser.cpp	/^  int Parser::IsVal(const char_type* a_szExpr, int *a_iPos, value_type *a_fVal)$/;"	f	class:mu::Parser
IsValTok	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsValTok(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsValidEscape	src/madness/external/gtest/src/gtest-port.cc	/^bool IsValidEscape(char c) {$/;"	f	namespace:testing::internal
IsValidXmlCharacter	src/madness/external/gtest/src/gtest.cc	/^  static bool IsValidXmlCharacter(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsVarTok	src/madness/external/muParser/muParserTokenReader.cpp	/^  bool ParserTokenReader::IsVarTok(token_type &a_Tok)$/;"	f	class:mu::ParserTokenReader
IsViewing	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^static inline bool IsViewing( ViewType v )$/;"	f	namespace:elem::ViewTypeNS
IsWhiteSpace	src/madness/external/tinyxml/tinyxml.h	/^	inline static bool IsWhiteSpace( char c )		$/;"	f	class:TiXmlBase
IsWhiteSpace	src/madness/external/tinyxml/tinyxml.h	/^	inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase
IsWhiteSpaceCondensed	src/madness/external/tinyxml/tinyxml.h	/^	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }$/;"	f	class:TiXmlBase
IsXDigit	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline bool IsXDigit(char ch) {$/;"	f	namespace:testing::internal
IsXDigit	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline bool IsXDigit(wchar_t ch) {$/;"	f	namespace:testing::internal
Is_finalized	src/madness/world/safempi.h	/^    inline bool Is_finalized() {$/;"	f	namespace:SafeMPI
Is_initialized	src/madness/world/safempi.h	/^    inline bool Is_initialized() {$/;"	f	namespace:SafeMPI
Isend	src/madness/world/safempi.h	/^        Request Isend(const void* buf, const int count, const MPI_Datatype datatype, const int dest, const int tag) const {$/;"	f	class:SafeMPI::Intracomm
Isend	src/madness/world/worldmpi.h	/^        Isend(const T& datum, int dest, int tag=SafeMPI::DEFAULT_SEND_RECV_TAG) const {$/;"	f	class:madness::WorldMpiInterface
Issend	src/madness/world/safempi.h	/^        Request Issend(const void* buf, const int count, const MPI_Datatype datatype, const int dest, const int tag) const {$/;"	f	class:SafeMPI::Intracomm
Ite	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Ite(value_type v1, value_type v2, value_type v3) $/;"	f	class:mu::Parser
Iterate	src/apps/adrian/TDDFT.cc	/^void TDHF::Iterate(World &world) {$/;"	f	class:TDHF
Iterate	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    void Iterate()$/;"	f	struct:elem::SnapshotCtrl
IterateChildren	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode
IterateChildren	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode
IterateChildren	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode
IterateChildren	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode
IterateChildren	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
IterateChildren	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const	{	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator10
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator2
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator3
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator4
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator5
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator6
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator7
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator8
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator9
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    Iterator(const ParamGeneratorInterface<T>* base, T value, int index,$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    Iterator(const ParamGeneratorInterface<T>* base,$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::RangeGenerator
Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::ValuesInIteratorRangeGenerator
IteratorTraits	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^struct IteratorTraits {$/;"	s	namespace:testing::internal
IteratorTraits	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^struct IteratorTraits<T*> {$/;"	s	namespace:testing::internal
IteratorTraits	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^struct IteratorTraits<const T*> {$/;"	s	namespace:testing::internal
J	src/apps/chem/PNO.h	/^	Coulomb J;$/;"	m	class:madness::PNO
J	src/apps/chem/SCFOperators.h	/^    Coulomb J;$/;"	m	class:madness::Fock
J	src/apps/chem/mp2.cc	/^real_function_3d MP2::J(const real_function_3d& phi) const {$/;"	f	class:madness::MP2
JK1phi0_on_demand	src/apps/chem/mp2.cc	/^real_function_6d MP2::JK1phi0_on_demand(const int i, const int j,$/;"	f	class:madness::MP2
JK2phi0_on_demand	src/apps/chem/mp2.cc	/^real_function_6d MP2::JK2phi0_on_demand(const int i, const int j,$/;"	f	class:madness::MP2
JPEG	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    JPEG,$/;"	e	enum:elem::FileFormatNS::FileFormat
JPG	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    JPG,$/;"	e	enum:elem::FileFormatNS::FileFormat
J_mo	src/apps/chem/znemo.h	/^		std::vector<complex_function_3d> J_mo;$/;"	m	struct:madness::Znemo::potentials
Join	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void Join() {$/;"	f	class:testing::internal::ThreadWithParam
Jordan	src/madness/external/elemental/include/elemental/matrices/Jordan.hpp	/^Jordan( BlockDistMatrix<T,U,V>& J, Int n, T lambda )$/;"	f	namespace:elem
Jordan	src/madness/external/elemental/include/elemental/matrices/Jordan.hpp	/^Jordan( DistMatrix<T,U,V>& J, Int n, T lambda )$/;"	f	namespace:elem
Jordan	src/madness/external/elemental/include/elemental/matrices/Jordan.hpp	/^Jordan( Matrix<T>& J, Int n, T lambda )$/;"	f	namespace:elem
K	src/apps/chem/CCPotentials.cc	/^  CCPotentials::K(const CCFunction& f) const {$/;"	f	class:madness::CCPotentials
K	src/apps/chem/CCPotentials.cc	/^  CCPotentials::K(const real_function_6d& u,const bool symmetric) const {$/;"	f	class:madness::CCPotentials
K	src/apps/chem/PNO.h	/^	ParametrizedExchange K;$/;"	m	class:madness::PNO
K	src/apps/chem/PNOF12Potentials.h	/^	ParametrizedExchange K;													\/\/\/< Exchange Operator$/;"	m	class:madness::F12Potentials
K	src/apps/chem/PNOStructures.h	/^	Exchange<double,3> K;$/;"	m	class:madness::ParametrizedExchange
K	src/apps/chem/SCFOperators.h	/^    Exchange<double,3> K;$/;"	m	class:madness::Fock
K	src/apps/chem/mp2.cc	/^real_function_3d MP2::K(const real_function_3d& phi, const bool hc) const {$/;"	f	class:madness::MP2
K	src/apps/chem/mp2.cc	/^real_function_6d MP2::K(const real_function_6d& phi,$/;"	f	class:madness::MP2
KAIN	src/madness/tensor/kain.cc	/^Tensor<T> KAIN(const Tensor<T>& Q) {$/;"	f
KAIN	src/madness/tensor/solvers.h	/^    Tensor<T> KAIN(const Tensor<T>& Q, double rcond=1e-12) {$/;"	f	namespace:madness
KEY	build/CMakeFiles/CheckTypeSize/HAVE_INT64_T.c	10;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_INT64_T.c	12;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_INT64_T.c	14;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_INT64_T.c	6;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_INT64_T.c	8;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_DOUBLE.c	10;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_DOUBLE.c	12;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_DOUBLE.c	14;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_DOUBLE.c	6;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_DOUBLE.c	8;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_LONG.c	10;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_LONG.c	12;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_LONG.c	14;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_LONG.c	6;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/HAVE_LONG_LONG.c	8;"	d	file:
KMS	src/madness/external/elemental/include/elemental/matrices/KMS.hpp	/^KMS( BlockDistMatrix<T,U,V>& K, Int n, T rho )$/;"	f	namespace:elem
KMS	src/madness/external/elemental/include/elemental/matrices/KMS.hpp	/^KMS( DistMatrix<T,U,V>& K, Int n, T rho )$/;"	f	namespace:elem
KMS	src/madness/external/elemental/include/elemental/matrices/KMS.hpp	/^KMS( Matrix<T>& K, Int n, T rho )$/;"	f	namespace:elem
KPeriodicBSHOperator	src/apps/moldft/testperiodic.cc	/^    KPeriodicBSHOperator(World& world, const Vector<double,3>& kpt, const double& L)$/;"	f	class:KPeriodicBSHOperator
KPeriodicBSHOperator	src/apps/moldft/testperiodic.cc	/^    KPeriodicBSHOperator(World& world, const double& kx, const double& ky, const double& kz, const double& L)$/;"	f	class:KPeriodicBSHOperator
KPeriodicBSHOperator	src/apps/moldft/testperiodic.cc	/^class KPeriodicBSHOperator {$/;"	c	file:
KPoint	src/apps/hf/eigsolver.h	/^  KPoint(double kx, double ky, double kz, double weight)$/;"	f	class:madness::KPoint
KPoint	src/apps/hf/eigsolver.h	/^class KPoint$/;"	c	namespace:madness
KPoint	src/apps/hf/esolver.h	/^  KPoint()$/;"	f	struct:KPoint
KPoint	src/apps/hf/esolver.h	/^  KPoint(const coordT& k, const double& weight)$/;"	f	struct:KPoint
KPoint	src/apps/hf/esolver.h	/^  KPoint(const coordT& k, const double& weight, const int& begin,$/;"	f	struct:KPoint
KPoint	src/apps/hf/esolver.h	/^  KPoint(const double& k0, const double& k1, const double& k2, const double& weight)$/;"	f	struct:KPoint
KPoint	src/apps/hf/esolver.h	/^struct KPoint$/;"	s
K_mo	src/apps/chem/znemo.h	/^		std::vector<complex_function_3d> K_mo;$/;"	m	struct:madness::Znemo::potentials
Kahan	src/madness/external/elemental/include/elemental/matrices/Kahan.hpp	/^Kahan( BlockDistMatrix<F,U,V>& A, Int n, F phi )$/;"	f	namespace:elem
Kahan	src/madness/external/elemental/include/elemental/matrices/Kahan.hpp	/^Kahan( DistMatrix<F,U,V>& A, Int n, F phi )$/;"	f	namespace:elem
Kahan	src/madness/external/elemental/include/elemental/matrices/Kahan.hpp	/^Kahan( Matrix<F>& A, Int n, F phi )$/;"	f	namespace:elem
Key	src/madness/mra/key.h	/^        Key() {}$/;"	f	class:madness::Key
Key	src/madness/mra/key.h	/^        Key(Level n, const Vector<Translation, NDIM>& l) : n(n), l(l) $/;"	f	class:madness::Key
Key	src/madness/mra/key.h	/^        Key(int n) : n(n), l(0) $/;"	f	class:madness::Key
Key	src/madness/mra/key.h	/^    class Key {$/;"	c	namespace:madness
Key	src/madness/world/test_dc.cc	/^    Key() : k(-1) {}$/;"	f	struct:Key
Key	src/madness/world/test_dc.cc	/^    Key(int k) : k(k) {}$/;"	f	struct:Key
Key	src/madness/world/test_dc.cc	/^struct Key {$/;"	s	file:
Key	src/madness/world/test_hashdc.cc	/^    Key() : k(-1) {}$/;"	f	struct:Key
Key	src/madness/world/test_hashdc.cc	/^    Key(int k) : k(k) {}$/;"	f	struct:Key
Key	src/madness/world/test_hashdc.cc	/^struct Key {$/;"	s	file:
Key	src/madness/world/test_tree.cc	/^    Key() {}; $/;"	f	struct:Key
Key	src/madness/world/test_tree.cc	/^    Key(ulong n, ulong i, ulong j, ulong k)$/;"	f	struct:Key
Key	src/madness/world/test_tree.cc	/^struct Key {$/;"	s	file:
Key	src/madness/world/test_world.cc	/^    Key() {};  \/\/ Empty default constructor for speed - but is therefore junk$/;"	f	struct:Key
Key	src/madness/world/test_world.cc	/^    Key(ulong n, ulong i, ulong j, ulong k)$/;"	f	struct:Key
Key	src/madness/world/test_world.cc	/^struct Key {$/;"	s	file:
KeyChildIterator	src/madness/mra/key.h	/^        KeyChildIterator() :$/;"	f	class:madness::KeyChildIterator
KeyChildIterator	src/madness/mra/key.h	/^        KeyChildIterator(const Key<NDIM>& parent) :$/;"	f	class:madness::KeyChildIterator
KeyChildIterator	src/madness/mra/key.h	/^    class KeyChildIterator {$/;"	c	namespace:madness
KeyChildIterator	src/madness/world/test_tree.cc	/^    KeyChildIterator(const Key& parent)$/;"	f	class:KeyChildIterator
KeyChildIterator	src/madness/world/test_tree.cc	/^class KeyChildIterator {$/;"	c	file:
KeyD	src/madness/mra/mypmap.h	/^        typedef Key<D> KeyD;$/;"	t	class:madness::MyPmap
KilledBySignal	src/madness/external/gtest/include/gtest/gtest-death-test.h	/^class GTEST_API_ KilledBySignal {$/;"	c	namespace:testing
KilledBySignal	src/madness/external/gtest/src/gtest-death-test.cc	/^KilledBySignal::KilledBySignal(int signum) : signum_(signum) {$/;"	f	class:testing::KilledBySignal
Kinetic	src/apps/chem/SCFOperators.h	/^    Kinetic(World& world) : world(world) {$/;"	f	class:madness::Kinetic
Kinetic	src/apps/chem/SCFOperators.h	/^class Kinetic {$/;"	c	namespace:madness
Kpno	src/apps/chem/PNOStructures.h	/^		double Kpno;$/;"	m	struct:madness::PNOPairs::MemInfo
Kpno_ij	src/apps/chem/PNOStructures.h	/^	vfT Kpno_ij; 									\/\/\/< Exchange Intermediate$/;"	m	struct:madness::PNOPairs
Kx	src/apps/chem/PNOStructures.h	/^	vector_real_function_3d Kx=vector_real_function_3d();$/;"	m	struct:madness::CISData
KyFanNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/KyFan.hpp	/^KyFanNorm( const DistMatrix<F,U,V>& A, Int k )$/;"	f	namespace:elem
KyFanNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/KyFan.hpp	/^KyFanNorm( const Matrix<F>& A, Int k )$/;"	f	namespace:elem
L	src/apps/adrian/GroundParameters.h	/^      double L;                                \/\/\/< Box size of ground state - response calcluation is in same box$/;"	m	struct:madness::GroundParameters
L	src/apps/bryan/GroundParameters.h	/^      double L;                                \/\/\/< Box size of ground state - response calcluation is in same box$/;"	m	struct:madness::GroundParameters
L	src/apps/chem/CalculationParameters.h	/^	double L() const {return get<double>("l");}$/;"	f	struct:madness::CalculationParameters
L	src/apps/chem/GuessFactory.h	/^    const Tensor<double> L;$/;"	m	class:madness::guessfactory::PlaneWaveFunctor
L	src/apps/hf/electronicstructureparams.h	/^  double L;$/;"	m	struct:madness::ElectronicStructureParams
L	src/apps/hf/ewald.cc	/^static double L = 6.5;$/;"	v	file:
L	src/apps/hf/solver.h	/^      double L;$/;"	m	class:madness::WSTAtomicBasisFunctor
L	src/apps/hf/test_coulomb.cc	/^const double L = 30.0;$/;"	v
L	src/apps/hf/test_lattice.cc	/^const double L = 15.0;$/;"	v
L	src/apps/moldft/mcpfit.cc	/^    double L;       \/\/\/< box size$/;"	m	struct:CalculationParameters	file:
L	src/apps/moldft/testcosine.cc	/^static const double L = 5.0; \/\/ Unit cell size in au for neon$/;"	v	file:
L	src/apps/moldft/testperiodic.cc	/^    double L;$/;"	m	class:KPeriodicBSHOperator	file:
L	src/apps/moldft/testperiodic.cc	/^static const double L = 10.6591; \/\/ Unit cell size in au for NaCl$/;"	v	file:
L	src/apps/nick/extra.h	/^  double L;           \/\/ Box size for the simulation$/;"	m	struct:InputParameters
L	src/apps/nick/extract.py	/^                L = float(word[1])$/;"	v
L	src/apps/nick/tdse1.cc	/^    double L;           \/\/ Box size for the simulation$/;"	m	struct:InputParameters	file:
L	src/apps/polar/mcpfit.cc	/^    double L;       \/\/\/< box size$/;"	m	struct:CalculationParameters	file:
L	src/apps/polar/moldft.cc	/^    double L;              \/\/\/< User coordinates box size$/;"	m	struct:CalculationParameters	file:
L	src/apps/polar/preal.cc	/^static const double L = 51.143;$/;"	v	file:
L	src/apps/polar/testperiodic.cc	/^static const double L = 5.0; \/\/ Unit cell size in au for neon$/;"	v	file:
L	src/apps/tdse/tdse.cc	/^  double L;           \/\/ Box size for the simulation$/;"	m	struct:InputParameters	file:
L	src/apps/tdse/tdse.confused.cc	/^  double L;           \/\/ Box size for the simulation$/;"	m	struct:InputParameters	file:
L	src/apps/tdse/tdse4.cc	/^  double L;           \/\/ Box size for the simulation$/;"	m	struct:InputParameters	file:
L	src/examples/3dharmonic.cc	/^const double L = 7.0;$/;"	v
L	src/examples/binaryop.cc	/^static const double L = 30;     \/\/ Half box size$/;"	v	file:
L	src/examples/csqrt.cc	/^static const double L = 32.0*R; \/\/ box size$/;"	v	file:
L	src/examples/derivatives.cc	/^const double L = 16.0;   \/\/ box size [-L,L]^3$/;"	v
L	src/examples/dielectric.cc	/^const double L = 5; \/\/ box is [-L,L]$/;"	v
L	src/examples/dielectric_external_field.cc	/^const double L = 50; \/\/ box is [-L,L]$/;"	v
L	src/examples/functionio.cc	/^static const double L = 10;     \/\/ Half box size$/;"	v	file:
L	src/examples/gygi_soltion.cc	/^const double L = 10;$/;"	v
L	src/examples/h2.cc	/^static const double L = 64.0*R; \/\/ box size$/;"	v	file:
L	src/examples/h2dft.cc	/^static const double L = 64.0*R; \/\/ box size$/;"	v	file:
L	src/examples/h2dynamic.cc	/^static const double L = 64.0*R; \/\/ box size$/;"	v	file:
L	src/examples/hatom_1d.cc	/^static const double L = 100;    \/\/ box size$/;"	v	file:
L	src/examples/he.cc	/^static const double L = 30.0;   \/\/ box size$/;"	v	file:
L	src/examples/heat.cc	/^static const double L = 10;     \/\/ Half box size$/;"	v	file:
L	src/examples/heat2.cc	/^static const double L = 20;     \/\/ Half box size$/;"	v	file:
L	src/examples/hehf.cc	/^static const double L = 32.0;   \/\/ box size$/;"	v	file:
L	src/examples/navstokes_cosines.cc	/^const double L = 2*pi; \/\/Cell length$/;"	v
L	src/examples/newsolver.cc	/^static const double L = 64.0*R; \/\/ box size$/;"	v	file:
L	src/examples/newsolver_lda.cc	/^static const double L = 50.0; \/\/ box size$/;"	v	file:
L	src/examples/nonlinschro.cc	/^static const double L = 10.0;           \/\/ box size$/;"	v	file:
L	src/examples/svpe.cc	/^const double L = 20; \/\/ box is [-L,L]$/;"	v
L	src/examples/takeshi_response.cc	/^static const double L = 64.0*R; \/\/box size$/;"	v	file:
L	src/examples/tdse1d.cc	/^static const double L = 100.0; \/\/ Simulation in [-L,L]$/;"	v	file:
L	src/examples/tdse_example.cc	/^static const double L = 23.0;$/;"	v	file:
L	src/examples/testspectralprop.cc	/^static const double L = 100.0; \/\/ Simulation in [-L,L]$/;"	v	file:
L	src/examples/vnucso.cc	/^const double L = 120.0;     \/\/ box is [-L,L]$/;"	v
L	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  double          *restrict L;$/;"	m	struct:__anon19
L	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/L.hpp	/^L( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& tP, DistMatrix<F,STAR,STAR>& tQ )$/;"	f	namespace:elem::bidiag
L	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/L.hpp	/^inline void L( Matrix<F>& A, Matrix<F>& tP, Matrix<F>& tQ )$/;"	f	namespace:elem::bidiag
L	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/L.hpp	/^inline void L( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& t )$/;"	f	namespace:elem::hessenberg
L	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/L.hpp	/^inline void L( Matrix<F>& A, Matrix<F>& t )$/;"	f	namespace:elem::hessenberg
L	src/madness/external/elemental/src/lapack-like/HermitianTridiag/L.hpp	/^void L( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& t )$/;"	f	namespace:elem::herm_tridiag
L	src/madness/external/elemental/src/lapack-like/HermitianTridiag/L.hpp	/^void L( Matrix<F>& A, Matrix<F>& t )$/;"	f	namespace:elem::herm_tridiag
L	src/madness/mra/testgaxpyext.cc	/^static const double L = 5.0*R;  \/\/ box size$/;"	v	file:
L	src/madness/mra/testgconv.cc	/^static const double L = 17;$/;"	v	file:
L	src/madness/mra/testinnerext.cc	/^static const double L = 5.0*R; \/\/ box size$/;"	v	file:
L	src/madness/mra/testpdiff.cc	/^static const double L=2.0; \/\/ Simulate in [0,L]^NDIM$/;"	v	file:
L	src/madness/mra/testperiodic.cc	/^const double L = 3.0;  \/\/ [-L,L]$/;"	v
LBCost	src/apps/chem/mp2.h	/^        LBCost(double leaf_value=1.0, double parent_value=1.0)$/;"	f	struct:madness::LBCost
LBCost	src/apps/chem/mp2.h	/^    struct LBCost {$/;"	s	namespace:madness
LBCost	src/apps/nick/projPsi.cc	/^    LBCost(double leaf_value=1.0, double parent_value=1.0)$/;"	f	struct:LBCost
LBCost	src/apps/nick/projPsi.cc	/^struct LBCost {$/;"	s	file:
LBCost	src/examples/dataloadbal.cc	/^    LBCost(double leaf_value=1.0, double parent_value=1.0)$/;"	f	struct:LBCost
LBCost	src/examples/dataloadbal.cc	/^struct LBCost {$/;"	s	file:
LBCost	src/examples/he.cc	/^    LBCost(double leaf_value=1.0, double parent_value=1.0)$/;"	f	struct:LBCost
LBCost	src/examples/he.cc	/^struct LBCost {$/;"	s	file:
LBCost	src/examples/helium_mp2.cc	/^    LBCost(double leaf_value=1.0, double parent_value=1.0)$/;"	f	struct:LBCost
LBCost	src/examples/helium_mp2.cc	/^struct LBCost {$/;"	s	file:
LBDeuxPmap	src/madness/mra/lbdeux.h	/^        LBDeuxPmap(const std::vector<pairT>& v) {$/;"	f	class:madness::LBDeuxPmap
LBDeuxPmap	src/madness/mra/lbdeux.h	/^    class LBDeuxPmap : public WorldDCPmapInterface< Key<NDIM> > {$/;"	c	namespace:madness
LBNodeDeux	src/madness/mra/lbdeux.h	/^        LBNodeDeux()$/;"	f	class:madness::LBNodeDeux
LBNodeDeux	src/madness/mra/lbdeux.h	/^        LBNodeDeux(const LBNodeDeux<NDIM>& other) :$/;"	f	class:madness::LBNodeDeux
LBNodeDeux	src/madness/mra/lbdeux.h	/^    class LBNodeDeux {$/;"	c	namespace:madness
LCM	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::LCM() const { return size_\/gcd_; }$/;"	f	class:elem::Grid
LD	src/madness/tensor/mtxmq_bg/Makefile	/^   LD=$(CC)$/;"	m
LD	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   LD=$(CC)$/;"	m
LDA_H_	src/apps/hf/lda.h	40;"	d
LDFLAGS	src/apps/moldft/fci/GNUmakefile	/^  LDFLAGS =$/;"	m
LDFLAGS	src/madness/tensor/mtxmq_bg/Makefile	/^   LDFLAGS= -O3 -qarch=450d -qtune=450 -qthreaded$/;"	m
LDFLAGS	src/madness/tensor/mtxmq_bg/Makefile	/^   LDFLAGS= -O3 -qarch=qp -qtune=qp -qthreaded$/;"	m
LDFLAGS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   LDFLAGS= -O3 -qarch=450d -qtune=450 -qthreaded$/;"	m
LDFLAGS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   LDFLAGS= -O3 -qarch=qp -qtune=qp -qthreaded$/;"	m
LDLH	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL.hpp	/^LDLH$/;"	f	namespace:elem
LDLH	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL.hpp	/^LDLH( DistMatrix<F>& A )$/;"	f	namespace:elem
LDLH	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL.hpp	/^LDLH( Matrix<F>& A )$/;"	f	namespace:elem
LDLPivot	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^struct LDLPivot$/;"	s	namespace:elem
LDLPivotType	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^enum LDLPivotType$/;"	g	namespace:elem::LDLPivotTypeNS
LDLPivotTypeNS	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^namespace LDLPivotTypeNS {$/;"	n	namespace:elem
LDLT	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL.hpp	/^LDLT$/;"	f	namespace:elem
LDLT	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL.hpp	/^LDLT( DistMatrix<F>& A )$/;"	f	namespace:elem
LDLT	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL.hpp	/^LDLT( Matrix<F>& A )$/;"	f	namespace:elem
LDim	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::LDim() const { return matrix_.LDim(); }$/;"	f	class:elem::AbstractBlockDistMatrix
LDim	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::LDim() const { return matrix_.LDim(); }$/;"	f	class:elem::AbstractDistMatrix
LDim	src/madness/external/elemental/src/core/Matrix.cpp	/^Int Matrix<T>::LDim() const { return ldim_; }$/;"	f	class:elem::Matrix
LDowndate	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	/^LDowndate( DistMatrix<F>& L, DistMatrix<F>& V )$/;"	f	namespace:elem::cholesky::mod
LDowndate	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	/^LDowndate( Matrix<F>& L, Matrix<F>& V )$/;"	f	namespace:elem::cholesky::mod
LEFT	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    LEFT,$/;"	e	enum:elem::LeftOrRightNS::LeftOrRight
LIB	src/madness/tensor/mtxmq_bg/Makefile	/^   LIB=-L$(MY_ROOT)$/;"	m
LIB	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   LIB=-L$(MY_ROOT)$/;"	m
LIBS	src/apps/moldft/fci/GNUmakefile	/^     LIBS = -L.$/;"	m
LIBS	src/madness/mra/minmax/Makefile	/^LIBS = -L\/home\/rjh\/install\/lib -lqd -lm$/;"	m
LIBXC_H_	src/apps/hf/libxc.h	40;"	d
LIVED	src/madness/external/gtest/src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
LLHB	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLHB.hpp	/^LLHB$/;"	f	namespace:elem::apply_packed_reflectors
LLHF	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLHF.hpp	/^LLHF$/;"	f	namespace:elem::apply_packed_reflectors
LLN	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLN.hpp	/^LLN( const Matrix<F>& L, const Matrix<F>& shifts, Matrix<F>& X )$/;"	f	namespace:elem::msquasitrsm
LLN	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLN.hpp	/^LLN( const Matrix<F>& L, Matrix<F>& X, bool checkIfSingular )$/;"	f	namespace:elem::quasitrsm
LLN	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLN.hpp	/^LLN( UnitOrNonUnit diag, const DistMatrix<T>& L, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
LLNA	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLN.hpp	/^LLNA( UnitOrNonUnit diag, const DistMatrix<T>& L, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
LLNC	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLN.hpp	/^LLNC( UnitOrNonUnit diag, const DistMatrix<T>& L, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
LLNCOld	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLN.hpp	/^LLNCOld( UnitOrNonUnit diag, const DistMatrix<T>& L, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
LLNLarge	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLN.hpp	/^LLNLarge$/;"	f	namespace:elem::msquasitrsm
LLNLarge	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLN.hpp	/^LLNLarge( const DistMatrix<F>& L, DistMatrix<F>& X, bool checkIfSingular )$/;"	f	namespace:elem::quasitrsm
LLNLarge	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLN.hpp	/^LLNLarge$/;"	f	namespace:elem::trsm
LLNMedium	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLN.hpp	/^LLNMedium$/;"	f	namespace:elem::msquasitrsm
LLNMedium	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLN.hpp	/^LLNMedium( const DistMatrix<F>& L, DistMatrix<F>& X, bool checkIfSingular )$/;"	f	namespace:elem::quasitrsm
LLNMedium	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLN.hpp	/^LLNMedium$/;"	f	namespace:elem::trsm
LLNSmall	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLN.hpp	/^LLNSmall$/;"	f	namespace:elem::msquasitrsm
LLNSmall	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLN.hpp	/^LLNSmall$/;"	f	namespace:elem::quasitrsm
LLNSmall	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLN.hpp	/^LLNSmall$/;"	f	namespace:elem::trsm
LLNUnb	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLN.hpp	/^LLNUnb( const Matrix<F>& L, const Matrix<F>& shifts, Matrix<F>& X )$/;"	f	namespace:elem::msquasitrsm
LLNUnb	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLN.hpp	/^LLNUnb( const Matrix<F>& L, Matrix<F>& X, bool checkIfSingular )$/;"	f	namespace:elem::quasitrsm
LLRV	src/apps/interior_bc/test_problems.h	/^enum Mask { LLRV, Gaussian };$/;"	e	enum:Mask
LLRVDomainMask	src/madness/mra/sdf_domainmask.h	/^        LLRVDomainMask() : epsilon(0.0) {} \/\/\/< Forbidden$/;"	f	class:madness::LLRVDomainMask
LLRVDomainMask	src/madness/mra/sdf_domainmask.h	/^        LLRVDomainMask(double epsilon)$/;"	f	class:madness::LLRVDomainMask
LLRVDomainMask	src/madness/mra/sdf_domainmask.h	/^    class LLRVDomainMask : public DomainMaskInterface {$/;"	c	namespace:madness
LLT	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLT.hpp	/^LLT$/;"	f	namespace:elem::msquasitrsm
LLT	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLT.hpp	/^LLT$/;"	f	namespace:elem::quasitrsm
LLT	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLT.hpp	/^LLT$/;"	f	namespace:elem::trmm
LLTA	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLT.hpp	/^LLTA$/;"	f	namespace:elem::trmm
LLTC	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLT.hpp	/^LLTC$/;"	f	namespace:elem::trmm
LLTCOld	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLT.hpp	/^LLTCOld$/;"	f	namespace:elem::trmm
LLTLarge	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLT.hpp	/^LLTLarge$/;"	f	namespace:elem::msquasitrsm
LLTLarge	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLT.hpp	/^LLTLarge$/;"	f	namespace:elem::quasitrsm
LLTLarge	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLT.hpp	/^LLTLarge$/;"	f	namespace:elem::trsm
LLTMedium	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLT.hpp	/^LLTMedium$/;"	f	namespace:elem::msquasitrsm
LLTMedium	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLT.hpp	/^LLTMedium$/;"	f	namespace:elem::quasitrsm
LLTMedium	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLT.hpp	/^LLTMedium$/;"	f	namespace:elem::trsm
LLTSmall	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLT.hpp	/^LLTSmall$/;"	f	namespace:elem::msquasitrsm
LLTSmall	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLT.hpp	/^LLTSmall$/;"	f	namespace:elem::quasitrsm
LLTSmall	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLT.hpp	/^LLTSmall$/;"	f	namespace:elem::trsm
LLTUnb	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLT.hpp	/^LLTUnb$/;"	f	namespace:elem::msquasitrsm
LLTUnb	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLT.hpp	/^LLTUnb( bool conjugate, const Matrix<F>& L, Matrix<F>& X, bool checkIfSingular )$/;"	f	namespace:elem::quasitrsm
LLVB	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLVB.hpp	/^LLVB$/;"	f	namespace:elem::apply_packed_reflectors
LLVF	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLVF.hpp	/^LLVF$/;"	f	namespace:elem::apply_packed_reflectors
LMod	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	/^LMod( DistMatrix<F>& L, Base<F> alpha, DistMatrix<F>& V )$/;"	f	namespace:elem::cholesky
LMod	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	/^LMod( Matrix<F>& L, Base<F> alpha, Matrix<F>& V )$/;"	f	namespace:elem::cholesky
LN	src/madness/external/elemental/include/elemental/lapack-like/solve/MultiShiftHessSolve.hpp	/^LN$/;"	f	namespace:elem::mshs
LN	src/madness/external/elemental/include/elemental/lapack-like/solve/MultiShiftHessSolve.hpp	/^LN( F alpha, const Matrix<F>& H, const Matrix<F>& shifts, Matrix<F>& X ) $/;"	f	namespace:elem::mshs
LOADA	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	2660;"	d	file:
LOADA	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	2657;"	d	file:
LOADBKJ	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define LOADBKJ              \\$/;"	d
LOCAL_TO_GLOBAL	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^enum AxpyType { LOCAL_TO_GLOBAL, GLOBAL_TO_LOCAL };$/;"	e	enum:elem::AxpyTypeNS::AxpyType
LOCKED	src/madness/world/worldmutex.h	/^        enum {UNLOCKED, LOCKED};$/;"	e	enum:madness::MutexReaderWriter::__anon2
LOCKED_OWNER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    LOCKED_OWNER = 0x4, \/\/ unused$/;"	e	enum:elem::ViewTypeNS::ViewType
LOCKED_OWNER_FIXED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    LOCKED_OWNER_FIXED = 0x6, \/\/ unused$/;"	e	enum:elem::ViewTypeNS::ViewType
LOCKED_VIEW	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    LOCKED_VIEW = 0x5,$/;"	e	enum:elem::ViewTypeNS::ViewType
LOCKED_VIEW_FIXED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    LOCKED_VIEW_FIXED = 0x7$/;"	e	enum:elem::ViewTypeNS::ViewType
LOGICAL_AND	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op LOGICAL_AND = MPI_LAND;$/;"	m	namespace:elem::mpi
LOGICAL_OR	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op LOGICAL_OR = MPI_LOR;$/;"	m	namespace:elem::mpi
LOGICAL_XOR	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op LOGICAL_XOR = MPI_LXOR;$/;"	m	namespace:elem::mpi
LOG_STREAM	src/apps/hf/eigsolver.cc	46;"	d	file:
LOG_STREAM	src/apps/hf/test_coulomb.cc	49;"	d	file:
LOWER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    LOWER,$/;"	e	enum:elem::UpperOrLowerNS::UpperOrLower
LPan	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LPan.hpp	/^LPan$/;"	f	namespace:elem::bidiag
LPan	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LPan.hpp	/^LPan( Matrix<F>& A, Matrix<F>& tP, Matrix<F>& tQ, Matrix<F>& X, Matrix<F>& Y )$/;"	f	namespace:elem::bidiag
LPan	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/LPan.hpp	/^inline void LPan$/;"	f	namespace:elem::hessenberg
LPan	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LPan.hpp	/^void LPan$/;"	f	namespace:elem::herm_tridiag
LPanSquare	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LPanSquare.hpp	/^void LPanSquare$/;"	f	namespace:elem::herm_tridiag
LPanelPivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^LPanelPivoted$/;"	f	namespace:elem::cholesky
LQ	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ.hpp	/^LQ( DistMatrix<F>& A )$/;"	f	namespace:elem
LQ	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ.hpp	/^LQ( DistMatrix<F>& A, DistMatrix<F,MD,STAR>& t, DistMatrix<Base<F>,MD,STAR>& d )$/;"	f	namespace:elem
LQ	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ.hpp	/^LQ( Matrix<F>& A )$/;"	f	namespace:elem
LQ	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ.hpp	/^LQ( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d )$/;"	f	namespace:elem
LQ_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    LQ_PACKED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
LSAME	src/apps/moldft/fci/dgemm.F	/^      LOGICAL          FUNCTION LSAME(/;"	f
LSE	src/madness/external/elemental/include/elemental/lapack-like/solve/LSE.hpp	/^LSE$/;"	f	namespace:elem
LSQ	src/madness/mra/minmax/y.cc	/^void LSQ(int n, const matrix<FLOAT>& a, const vector<FLOAT>& b, vector<FLOAT>& x, const FLOAT& tol) {$/;"	f
LSQ	src/madness/mra/minmax/y1.cc	/^void LSQ(int n, const matrix<FLOAT>& a, const vector<FLOAT>& b, vector<FLOAT>& x, const FLOAT& tol) {$/;"	f
LSQ	src/madness/mra/minmax/y_signed.cc	/^void LSQ(int n, const matrix<FLOAT>& a, const vector<FLOAT>& b, vector<FLOAT>& x, const FLOAT& tol) {$/;"	f
LSQ	src/madness/mra/minmax/y_varx.cc	/^void LSQ(int n, const matrix<FLOAT>& a, const vector<FLOAT>& b, vector<FLOAT>& x, const FLOAT& tol) {$/;"	f
LSquare	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LSquare.hpp	/^void LSquare( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& t )$/;"	f	namespace:elem::herm_tridiag
LU	src/madness/external/elemental/include/elemental/lapack-like/factor/LU.hpp	/^LU$/;"	f	namespace:elem
LU	src/madness/external/elemental/include/elemental/lapack-like/factor/LU.hpp	/^LU( DistMatrix<F>& A )$/;"	f	namespace:elem
LU	src/madness/external/elemental/include/elemental/lapack-like/factor/LU.hpp	/^LU( DistMatrix<F>& A, DistMatrix<Int,UPerm,STAR>& pPerm )$/;"	f	namespace:elem
LU	src/madness/external/elemental/include/elemental/lapack-like/factor/LU.hpp	/^LU( Matrix<F>& A )$/;"	f	namespace:elem
LU	src/madness/external/elemental/include/elemental/lapack-like/factor/LU.hpp	/^LU( Matrix<F>& A, Matrix<Int>& pPerm )$/;"	f	namespace:elem
LU	src/madness/external/elemental/include/elemental/lapack-like/factor/LU.hpp	/^LU( Matrix<F>& A, Matrix<Int>& pPerm, Matrix<Int>& qPerm )$/;"	f	namespace:elem
LUHB	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUHB.hpp	/^LUHB$/;"	f	namespace:elem::apply_packed_reflectors
LUHF	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUHF.hpp	/^LUHF$/;"	f	namespace:elem::apply_packed_reflectors
LUMod	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Mod.hpp	/^LUMod$/;"	f	namespace:elem
LUMod	src/madness/external/elemental/octave/LUMod.m	/^function [A,p] = LUMod( A, p, u, v, tau )$/;"	f
LUModSimple	src/madness/external/elemental/octave/LUModSimple.m	/^function [L,U,p] = LUModSimple( L, U, p, u, v, tau )$/;"	f
LUN	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	/^LUN$/;"	f	namespace:elem::msquasitrsm
LUN	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	/^LUN( const Matrix<F>& U, const Matrix<F>& shifts, Matrix<F>& X )$/;"	f	namespace:elem::msquasitrsm
LUN	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUN.hpp	/^LUN$/;"	f	namespace:elem::mstrsm
LUN	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUN.hpp	/^LUN( F alpha, Matrix<F>& U, const Matrix<F>& shifts, Matrix<F>& X ) $/;"	f	namespace:elem::mstrsm
LUN	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUN.hpp	/^LUN( const Matrix<F>& U, Matrix<F>& X, bool checkIfSingular )$/;"	f	namespace:elem::quasitrsm
LUN	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUN.hpp	/^LUN( UnitOrNonUnit diag, const DistMatrix<T>& U, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
LUNA	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUN.hpp	/^LUNA( UnitOrNonUnit diag, const DistMatrix<T>& U, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
LUNC	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUN.hpp	/^LUNC( UnitOrNonUnit diag, const DistMatrix<T>& U, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
LUNCOld	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUN.hpp	/^LUNCOld( UnitOrNonUnit diag, const DistMatrix<T>& U, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
LUNLarge	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	/^LUNLarge$/;"	f	namespace:elem::msquasitrsm
LUNLarge	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUN.hpp	/^LUNLarge$/;"	f	namespace:elem::quasitrsm
LUNLarge	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUN.hpp	/^LUNLarge$/;"	f	namespace:elem::trsm
LUNMedium	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	/^LUNMedium$/;"	f	namespace:elem::msquasitrsm
LUNMedium	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUN.hpp	/^LUNMedium$/;"	f	namespace:elem::quasitrsm
LUNMedium	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUN.hpp	/^LUNMedium$/;"	f	namespace:elem::trsm
LUNSmall	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	/^LUNSmall$/;"	f	namespace:elem::msquasitrsm
LUNSmall	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUN.hpp	/^LUNSmall$/;"	f	namespace:elem::quasitrsm
LUNSmall	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUN.hpp	/^LUNSmall$/;"	f	namespace:elem::trsm
LUNUnb	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	/^LUNUnb$/;"	f	namespace:elem::msquasitrsm
LUNUnb	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	/^LUNUnb( const Matrix<F>& U, const Matrix<F>& shifts, Matrix<F>& X )$/;"	f	namespace:elem::msquasitrsm
LUNUnb	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUN.hpp	/^LUNUnb( const Matrix<F>& U, Matrix<F>& X, bool checkIfSingular )$/;"	f	namespace:elem::quasitrsm
LUPartialPiv	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General/LUPartialPiv.hpp	/^LUPartialPiv( DistMatrix<F>& A )$/;"	f	namespace:elem::inverse
LUPartialPiv	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General/LUPartialPiv.hpp	/^LUPartialPiv( Matrix<F>& A )$/;"	f	namespace:elem::inverse
LUPartialPiv	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/LUPartialPiv.hpp	/^LUPartialPiv( DistMatrix<F>& A )$/;"	f	namespace:elem::det
LUPartialPiv	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/LUPartialPiv.hpp	/^LUPartialPiv( Matrix<F>& A )$/;"	f	namespace:elem::det
LUT	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUT.hpp	/^LUT$/;"	f	namespace:elem::msquasitrsm
LUT	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUT.hpp	/^LUT$/;"	f	namespace:elem::mstrsm
LUT	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUT.hpp	/^LUT$/;"	f	namespace:elem::quasitrsm
LUT	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUT.hpp	/^LUT$/;"	f	namespace:elem::trmm
LUTA	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUT.hpp	/^LUTA$/;"	f	namespace:elem::trmm
LUTC	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUT.hpp	/^LUTC$/;"	f	namespace:elem::trmm
LUTCOld	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUT.hpp	/^LUTCOld$/;"	f	namespace:elem::trmm
LUTLarge	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUT.hpp	/^LUTLarge$/;"	f	namespace:elem::msquasitrsm
LUTLarge	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUT.hpp	/^LUTLarge$/;"	f	namespace:elem::quasitrsm
LUTLarge	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUT.hpp	/^LUTLarge$/;"	f	namespace:elem::trsm
LUTMedium	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUT.hpp	/^LUTMedium$/;"	f	namespace:elem::msquasitrsm
LUTMedium	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUT.hpp	/^LUTMedium$/;"	f	namespace:elem::quasitrsm
LUTMedium	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUT.hpp	/^LUTMedium$/;"	f	namespace:elem::trsm
LUTSmall	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUT.hpp	/^LUTSmall$/;"	f	namespace:elem::msquasitrsm
LUTSmall	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUT.hpp	/^LUTSmall$/;"	f	namespace:elem::quasitrsm
LUTSmall	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUT.hpp	/^LUTSmall$/;"	f	namespace:elem::trsm
LUTUnb	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUT.hpp	/^LUTUnb$/;"	f	namespace:elem::msquasitrsm
LUTUnb	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUT.hpp	/^LUTUnb( bool conjugate, const Matrix<F>& U, Matrix<F>& X, bool checkIfSingular )$/;"	f	namespace:elem::quasitrsm
LUVB	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUVB.hpp	/^LUVB$/;"	f	namespace:elem::apply_packed_reflectors
LUVF	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUVF.hpp	/^LUVF$/;"	f	namespace:elem::apply_packed_reflectors
LU_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    LU_PACKED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
LUnb	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LUnb.hpp	/^inline void LUnb$/;"	f	namespace:elem::bidiag
LUnb	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LUnb.hpp	/^inline void LUnb( Matrix<F>& A, Matrix<F>& tP, Matrix<F>& tQ )$/;"	f	namespace:elem::bidiag
LUnb	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/LUnb.hpp	/^inline void LUnb( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& t )$/;"	f	namespace:elem::hessenberg
LUnb	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/LUnb.hpp	/^inline void LUnb( Matrix<F>& A, Matrix<F>& t )$/;"	f	namespace:elem::hessenberg
LUnblockedPivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^LUnblockedPivoted( DistMatrix<F>& A, DistMatrix<Int,UPerm,STAR>& pPerm )$/;"	f	namespace:elem::cholesky
LUnblockedPivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^LUnblockedPivoted( Matrix<F>& A, Matrix<Int>& pPerm )$/;"	f	namespace:elem::cholesky
LUpdate	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	/^LUpdate( DistMatrix<F>& L, DistMatrix<F>& V )$/;"	f	namespace:elem::cholesky::mod
LUpdate	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	/^LUpdate( Matrix<F>& L, Matrix<F>& V )$/;"	f	namespace:elem::cholesky::mod
LV	src/madness/external/elemental/include/elemental/lapack-like/util/ExpandPackedReflectors/LV.hpp	/^LV$/;"	f	namespace:elem::expand_packed_reflectors
LV	src/madness/external/elemental/include/elemental/lapack-like/util/ExpandPackedReflectors/LV.hpp	/^LV( Conjugation conjugation, Int offset, Matrix<F>& H, const Matrix<F>& t )$/;"	f	namespace:elem::expand_packed_reflectors
LVar2	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar2.hpp	/^LVar2( DistMatrix<F>& A )$/;"	f	namespace:elem::cholesky
LVar2	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar2.hpp	/^LVar2( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
LVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3.hpp	/^LVar3( DistMatrix<F>& A )$/;"	f	namespace:elem::cholesky
LVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3.hpp	/^LVar3( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
LVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^LVar3( DistMatrix<F>& A, DistMatrix<Int,UPerm,STAR>& pPerm )$/;"	f	namespace:elem::cholesky
LVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^LVar3( Matrix<F>& A, Matrix<Int>& pPerm )$/;"	f	namespace:elem::cholesky
LVar3	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/LVar3.hpp	/^LVar3( UnitOrNonUnit diag, DistMatrix<F>& L )$/;"	f	namespace:elem::triang_inv
LVar3	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/LVar3.hpp	/^LVar3( UnitOrNonUnit diag, Matrix<F>& L )$/;"	f	namespace:elem::triang_inv
LVar3Square	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Square.hpp	/^LVar3Square( DistMatrix<F>& A )$/;"	f	namespace:elem::cholesky
LVar3Unb	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3.hpp	/^LVar3Unb( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
LVar3Unb	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/LVar3.hpp	/^LVar3Unb( UnitOrNonUnit diag, Matrix<F>& L )$/;"	f	namespace:elem::triang_inv
L_XTND	src/apps/moldft/fci/crayio.c	28;"	d	file:
Lanczos	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Lanczos.hpp	/^Lanczos$/;"	f	namespace:elem::pspec
Laplacian	src/apps/chem/SCFOperators.h	/^    Laplacian(World& world, const double e=0.0) : world(world), eps(e) {$/;"	f	class:madness::Laplacian
Laplacian	src/apps/chem/SCFOperators.h	/^class Laplacian {$/;"	c	namespace:madness
Laplacian	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^Laplacian( BlockDistMatrix<F,U,V>& L, Int n )$/;"	f	namespace:elem
Laplacian	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^Laplacian( BlockDistMatrix<F,U,V>& L, Int nx, Int ny )$/;"	f	namespace:elem
Laplacian	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^Laplacian( BlockDistMatrix<F,U,V>& L, Int nx, Int ny, Int nz )$/;"	f	namespace:elem
Laplacian	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^Laplacian( DistMatrix<F,U,V>& L, Int n )$/;"	f	namespace:elem
Laplacian	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^Laplacian( DistMatrix<F,U,V>& L, Int nx, Int ny )$/;"	f	namespace:elem
Laplacian	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^Laplacian( DistMatrix<F,U,V>& L, Int nx, Int ny, Int nz )$/;"	f	namespace:elem
Laplacian	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^Laplacian( Matrix<F>& L, Int n )$/;"	f	namespace:elem
Laplacian	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^Laplacian( Matrix<F>& L, Int nx, Int ny )$/;"	f	namespace:elem
Laplacian	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^Laplacian( Matrix<F>& L, Int nx, Int ny, Int nz )$/;"	f	namespace:elem
Last	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute* Last()					{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet
Last	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlAttribute* Last() const		{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet
LastArg	src/madness/external/muParser/muParserTest.h	/^        static value_type LastArg(const value_type* a_afArg, int a_iArgc)$/;"	f	class:mu::Test::ParserTester
LastAttribute	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute* LastAttribute()					{ return attributeSet.Last(); }$/;"	f	class:TiXmlElement
LastAttribute	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlAttribute* LastAttribute()	const 	{ return attributeSet.Last(); }		\/\/\/< Access the last attribute in this element.$/;"	f	class:TiXmlElement
LastChild	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode
LastChild	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode
LastChild	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value )				{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
LastChild	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild()	{ return lastChild; }$/;"	f	class:TiXmlNode
LastChild	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const	{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
LastChild	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* LastChild() const	{ return lastChild; }		\/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode
LastMessage	src/madness/external/gtest/src/gtest-death-test.cc	/^const char* DeathTest::LastMessage() {$/;"	f	class:testing::internal::DeathTest
LastOffset	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int LastOffset( Int n, Int bsize )$/;"	f	namespace:elem
Lauchli	src/madness/external/elemental/include/elemental/matrices/Lauchli.hpp	/^Lauchli( BlockDistMatrix<T,U,V>& A, Int n, T mu )$/;"	f	namespace:elem
Lauchli	src/madness/external/elemental/include/elemental/matrices/Lauchli.hpp	/^Lauchli( DistMatrix<T,U,V>& A, Int n, T mu )$/;"	f	namespace:elem
Lauchli	src/madness/external/elemental/include/elemental/matrices/Lauchli.hpp	/^Lauchli( Matrix<T>& A, Int n, T mu )$/;"	f	namespace:elem
LazySyncTag	src/madness/world/worldgop.h	/^        struct LazySyncTag { };$/;"	s	class:madness::WorldGopInterface
LeafStatus	src/madness/mra/funcimpl.h	/^        enum LeafStatus {no, yes, unknown};$/;"	g	class:madness::CoeffTracker
Leaf_op	src/madness/mra/leafop.h	/^    Leaf_op()$/;"	f	class:madness::Leaf_op
Leaf_op	src/madness/mra/leafop.h	/^    Leaf_op(const FunctionImpl<T, NDIM> *const tmp)$/;"	f	class:madness::Leaf_op
Leaf_op	src/madness/mra/leafop.h	/^    Leaf_op(const FunctionImpl<T, NDIM> *const tmp,const opT*const ope,specialboxT &sb)$/;"	f	class:madness::Leaf_op
Leaf_op	src/madness/mra/leafop.h	/^    Leaf_op(const FunctionImpl<T, NDIM> *const tmp,specialboxT &sb)$/;"	f	class:madness::Leaf_op
Leaf_op	src/madness/mra/leafop.h	/^    Leaf_op(const Leaf_op &other) : f(other.f), op(other.op), specialbox(other.specialbox) {}$/;"	f	class:madness::Leaf_op
Leaf_op	src/madness/mra/leafop.h	/^  class Leaf_op{$/;"	c	namespace:madness
Leaf_op_other	src/madness/mra/leafop.h	/^    Leaf_op_other(): Leaf_op<T, NDIM, SeparatedConvolution<double,NDIM> ,Specialbox_op<T,NDIM> >() {$/;"	f	class:madness::Leaf_op_other
Leaf_op_other	src/madness/mra/leafop.h	/^    Leaf_op_other(const FunctionImpl<T, NDIM> *const f_) {$/;"	f	class:madness::Leaf_op_other
Leaf_op_other	src/madness/mra/leafop.h	/^    Leaf_op_other(const Leaf_op_other &other) : Leaf_op<T, NDIM, SeparatedConvolution<double,NDIM> ,Specialbox_op<T,NDIM> >(other.f) {}$/;"	f	class:madness::Leaf_op_other
Leaf_op_other	src/madness/mra/leafop.h	/^  class Leaf_op_other : public Leaf_op<T, NDIM, SeparatedConvolution<double,NDIM> ,Specialbox_op<T,NDIM> > {$/;"	c	namespace:madness
LeastSquares	src/madness/external/elemental/include/elemental/lapack-like/solve/LeastSquares.hpp	/^LeastSquares$/;"	f	namespace:elem
LeftHyperbolicReflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	/^LeftHyperbolicReflector( DistMatrix<F,U,V>& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
LeftHyperbolicReflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	/^LeftHyperbolicReflector( F& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
LeftHyperbolicReflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	/^LeftHyperbolicReflector( F& chi, Matrix<F>& x )$/;"	f	namespace:elem
LeftHyperbolicReflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	/^LeftHyperbolicReflector( Matrix<F>& chi, Matrix<F>& x )$/;"	f	namespace:elem
LeftOrRight	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum LeftOrRight$/;"	g	namespace:elem::LeftOrRightNS
LeftOrRightNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace LeftOrRightNS {$/;"	n	namespace:elem
LeftOrRightNS	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^namespace LeftOrRightNS {$/;"	n	namespace:elem
LeftOrRightToChar	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^LeftOrRightToChar( LeftOrRight side )$/;"	f	namespace:elem::LeftOrRightNS
LeftQuasiDiagonalScale	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalScale.hpp	/^LeftQuasiDiagonalScale$/;"	f	namespace:elem
LeftQuasiDiagonalSolve	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalSolve.hpp	/^LeftQuasiDiagonalSolve$/;"	f	namespace:elem
LeftReflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	/^LeftReflector( DistMatrix<F,U,V>& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
LeftReflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	/^LeftReflector( F& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
LeftReflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	/^LeftReflector( F& chi, Matrix<F>& x )$/;"	f	namespace:elem
LeftReflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	/^LeftReflector( Matrix<F>& chi, Matrix<F>& x )$/;"	f	namespace:elem
LeftUnb	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUN.hpp	/^LeftUnb$/;"	f	namespace:elem::mstrsm
Legendre	src/madness/external/elemental/include/elemental/matrices/Legendre.hpp	/^Legendre( BlockDistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Legendre	src/madness/external/elemental/include/elemental/matrices/Legendre.hpp	/^Legendre( DistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Legendre	src/madness/external/elemental/include/elemental/matrices/Legendre.hpp	/^Legendre( Matrix<F>& A, Int n )$/;"	f	namespace:elem
Legendre scaling functions and multiwavelets	doc/Latex/implementation.tex	/^\\section{Legendre scaling functions and multiwavelets}$/;"	s
Lehmer	src/madness/external/elemental/include/elemental/matrices/Lehmer.hpp	/^Lehmer( BlockDistMatrix<F,U,V>& L, Int n )$/;"	f	namespace:elem
Lehmer	src/madness/external/elemental/include/elemental/matrices/Lehmer.hpp	/^Lehmer( DistMatrix<F,U,V>& L, Int n )$/;"	f	namespace:elem
Lehmer	src/madness/external/elemental/include/elemental/matrices/Lehmer.hpp	/^Lehmer( Matrix<F>& L, Int n )$/;"	f	namespace:elem
Length	src/examples/hefxc.cc	/^static const double Length = 50.0; \/\/ box size$/;"	v	file:
Length	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^Length( Int n, Int rank, Int align, Int stride )$/;"	f	namespace:elem
Length	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int Length( Int n, Int shift, Int stride )$/;"	f	namespace:elem
Length	src/madness/mra/testdiff1D.cc	/^static const double Length = 4.;$/;"	v	file:
Length	src/madness/mra/testdiff2D.cc	/^static const double Length = 2.;$/;"	v	file:
Length	src/madness/mra/testdiff3D.cc	/^static const double Length = 4.0;$/;"	v	file:
Length_	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int Length_$/;"	f	namespace:elem
Length_	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int Length_( Int n, Int shift, Int stride )$/;"	f	namespace:elem
Lesser	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    static bool Lesser$/;"	f	struct:elem::ValueIntPair
Lesser	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    static bool Lesser( const ValueInt<Real>& a, const ValueInt<Real>& b )$/;"	f	struct:elem::ValueInt
Lesser	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    static bool Lesser( const ValueInt<Real>& a, const ValueInt<Real>& b )$/;"	f	struct:elem::ValueIntPair
Level	src/madness/mra/key.h	/^    typedef int Level;$/;"	t	namespace:madness
LevelPmap	src/apps/hf/electronicstructureapp.h	/^    LevelPmap() : nproc(0) {};$/;"	f	class:LevelPmap
LevelPmap	src/apps/hf/electronicstructureapp.h	/^    LevelPmap(World& world) : nproc(world.nproc()) {}$/;"	f	class:LevelPmap
LevelPmap	src/apps/hf/electronicstructureapp.h	/^class LevelPmap : public WorldDCPmapInterface< Key<3> > {$/;"	c
LevelPmap	src/apps/nick/extra.h	/^    LevelPmap() : nproc(0) {};$/;"	f	class:LevelPmap
LevelPmap	src/apps/nick/extra.h	/^    LevelPmap(World& world) : nproc(world.nproc()) {}$/;"	f	class:LevelPmap
LevelPmap	src/apps/nick/extra.h	/^class LevelPmap : public WorldDCPmapInterface< Key<3> > {$/;"	c
LevelPmap	src/apps/nick/tdse1.cc	/^    LevelPmap() : nproc(0) {};$/;"	f	class:LevelPmap
LevelPmap	src/apps/nick/tdse1.cc	/^    LevelPmap(World& world) : nproc(world.nproc()) {}$/;"	f	class:LevelPmap
LevelPmap	src/apps/nick/tdse1.cc	/^class LevelPmap : public WorldDCPmapInterface< Key<NDIM> > {$/;"	c	file:
LevelPmap	src/apps/tdse/tdse.confused.cc	/^    LevelPmap() : nproc(0) {};$/;"	f	class:LevelPmap
LevelPmap	src/apps/tdse/tdse.confused.cc	/^    LevelPmap(World& world) : nproc(world.nproc()) {}$/;"	f	class:LevelPmap
LevelPmap	src/apps/tdse/tdse.confused.cc	/^class LevelPmap : public WorldDCPmapInterface< Key<3> > {$/;"	c	file:
LevelPmap	src/madness/mra/funcimpl.h	/^        LevelPmap() : nproc(0) {};$/;"	f	class:madness::LevelPmap
LevelPmap	src/madness/mra/funcimpl.h	/^        LevelPmap(World& world) : nproc(world.nproc()) {}$/;"	f	class:madness::LevelPmap
LevelPmap	src/madness/mra/funcimpl.h	/^    class LevelPmap : public WorldDCPmapInterface<keyT> {$/;"	c	namespace:madness
LineBreak	src/madness/external/tinyxml/tinyxml.h	/^	const char* LineBreak()							{ return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter
LinearProgram	src/madness/external/elemental/include/elemental/convex/LinearProgram.hpp	/^LinearProgram$/;"	f	namespace:elem
LinearSlater	src/apps/chem/correlationfactor.h	/^	LinearSlater(World& world, const Molecule& mol, const double a)$/;"	f	class:madness::LinearSlater
LinearSlater	src/apps/chem/correlationfactor.h	/^	enum corrfactype {None, GradientalGaussSlater, GaussSlater, LinearSlater,$/;"	e	enum:madness::NuclearCorrelationFactor::corrfactype
LinearSlater	src/apps/chem/correlationfactor.h	/^class LinearSlater : public NuclearCorrelationFactor {$/;"	c	namespace:madness
LinkEndChild	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode
ListTestsMatchingFilter	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::ListTestsMatchingFilter() {$/;"	f	class:testing::internal::UnitTestImpl
Llarge	src/apps/nick/extra.h	/^  double Llarge;      \/\/ Box size for large (far from nucleus) plots$/;"	m	struct:InputParameters
Llarge	src/apps/nick/tdse1.cc	/^    double Llarge;      \/\/ Box size for large (far from nucleus) plots$/;"	m	struct:InputParameters	file:
Llarge	src/apps/tdse/tdse.cc	/^  double Llarge;      \/\/ Box size for large (far from nucleus) plots$/;"	m	struct:InputParameters	file:
Llarge	src/apps/tdse/tdse.confused.cc	/^  double Llarge;      \/\/ Box size for large (far from nucleus) plots$/;"	m	struct:InputParameters	file:
Ln	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Ln(value_type v)    { return log(v);   } \/\/ Logarithm base e (natural logarithm)$/;"	f	class:mu::Parser
LoadBalanceDeux	src/madness/mra/lbdeux.h	/^        LoadBalanceDeux(World& world)$/;"	f	class:madness::LoadBalanceDeux
LoadBalanceDeux	src/madness/mra/lbdeux.h	/^    class LoadBalanceDeux {$/;"	c	namespace:madness
LoadFile	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
LoadFile	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
LoadFile	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
LoadFile	src/madness/external/tinyxml/tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )			\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument
LoadReservedSigned32	src/madness/world/bgq_atomics.h	/^__INLINE__ int32_t LoadReservedSigned32( volatile int32_t *pVar )$/;"	f
LocalAccumulateLLN	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLN.hpp	/^LocalAccumulateLLN$/;"	f	namespace:elem::trmm
LocalAccumulateLLT	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLT.hpp	/^LocalAccumulateLLT$/;"	f	namespace:elem::trmm
LocalAccumulateLUN	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUN.hpp	/^LocalAccumulateLUN$/;"	f	namespace:elem::trmm
LocalAccumulateLUT	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUT.hpp	/^LocalAccumulateLUT$/;"	f	namespace:elem::trmm
LocalAccumulateRLN	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLN.hpp	/^LocalAccumulateRLN$/;"	f	namespace:elem::trmm
LocalAccumulateRLT	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLT.hpp	/^LocalAccumulateRLT$/;"	f	namespace:elem::trmm
LocalAccumulateRUN	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUN.hpp	/^LocalAccumulateRUN$/;"	f	namespace:elem::trmm
LocalAccumulateRUT	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUT.hpp	/^LocalAccumulateRUT$/;"	f	namespace:elem::trmm
LocalCholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^LocalCholesky( UpperOrLower uplo, DistMatrix<F,STAR,STAR>& A )$/;"	f	namespace:elem
LocalCol	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::LocalCol( Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
LocalCol	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::LocalCol( Int j ) const$/;"	f	class:elem::AbstractDistMatrix
LocalColOffset	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::LocalColOffset( Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
LocalColOffset	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::LocalColOffset( Int j ) const$/;"	f	class:elem::AbstractDistMatrix
LocalGemm	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm.hpp	/^inline void LocalGemm$/;"	f	namespace:elem
LocalGemv	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv.hpp	/^inline void LocalGemv$/;"	f	namespace:elem
LocalGer	src/madness/external/elemental/include/elemental/blas-like/level2/Ger.hpp	/^inline void LocalGer$/;"	f	namespace:elem
LocalHPDInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD.hpp	/^LocalHPDInverse( UpperOrLower uplo, DistMatrix<F,STAR,STAR>& A )$/;"	f	namespace:elem
LocalHeight	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::LocalHeight() const { return matrix_.Height(); }$/;"	f	class:elem::AbstractBlockDistMatrix
LocalHeight	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::LocalHeight() const { return matrix_.Height(); }$/;"	f	class:elem::AbstractDistMatrix
LocalHermitianInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Hermitian.hpp	/^LocalHermitianInverse$/;"	f	namespace:elem
LocalInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General.hpp	/^LocalInverse( DistMatrix<F,STAR,STAR>& A )$/;"	f	namespace:elem
LocalLDL	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL.hpp	/^LocalLDL( DistMatrix<F,STAR,STAR>& A, bool conjugate )$/;"	f	namespace:elem
LocalLU	src/madness/external/elemental/include/elemental/lapack-like/factor/LU.hpp	/^LocalLU( DistMatrix<F,STAR,STAR>& A )$/;"	f	namespace:elem
LocalMultiShiftQuasiTrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm.hpp	/^LocalMultiShiftQuasiTrsm$/;"	f	namespace:elem
LocalMultiShiftTrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm.hpp	/^LocalMultiShiftTrsm$/;"	f	namespace:elem
LocalQuasiTrsm	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm.hpp	/^LocalQuasiTrsm$/;"	f	namespace:elem
LocalReverseCholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^LocalReverseCholesky( UpperOrLower uplo, DistMatrix<F,STAR,STAR>& A )$/;"	f	namespace:elem
LocalRow	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::LocalRow( Int i ) const$/;"	f	class:elem::AbstractBlockDistMatrix
LocalRow	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::LocalRow( Int i ) const$/;"	f	class:elem::AbstractDistMatrix
LocalRowOffset	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::LocalRowOffset( Int i ) const$/;"	f	class:elem::AbstractBlockDistMatrix
LocalRowOffset	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::LocalRowOffset( Int i ) const$/;"	f	class:elem::AbstractDistMatrix
LocalSymmetricAccumulateLL	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LL.hpp	/^LocalSymmetricAccumulateLL$/;"	f	namespace:elem::internal
LocalSymmetricAccumulateLU	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LU.hpp	/^LocalSymmetricAccumulateLU$/;"	f	namespace:elem::internal
LocalSymmetricAccumulateRL	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RL.hpp	/^LocalSymmetricAccumulateRL$/;"	f	namespace:elem::internal
LocalSymmetricAccumulateRU	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RU.hpp	/^LocalSymmetricAccumulateRU$/;"	f	namespace:elem::internal
LocalSymmetricInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Symmetric.hpp	/^LocalSymmetricInverse$/;"	f	namespace:elem
LocalSymvBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalSymvBlocksize<Complex<double>>()$/;"	f	namespace:elem
LocalSymvBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalSymvBlocksize<Complex<float>>()$/;"	f	namespace:elem
LocalSymvBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalSymvBlocksize<double>()$/;"	f	namespace:elem
LocalSymvBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalSymvBlocksize<float>()$/;"	f	namespace:elem
LocalSymvColAccumulateL	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/L.hpp	/^LocalSymvColAccumulateL$/;"	f	namespace:elem::internal
LocalSymvColAccumulateU	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/U.hpp	/^LocalSymvColAccumulateU$/;"	f	namespace:elem::internal
LocalSymvRowAccumulateL	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/L.hpp	/^LocalSymvRowAccumulateL$/;"	f	namespace:elem::internal
LocalSymvRowAccumulateU	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/U.hpp	/^LocalSymvRowAccumulateU$/;"	f	namespace:elem::internal
LocalTrdtrmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm.hpp	/^LocalTrdtrmm$/;"	f	namespace:elem
LocalTriangularInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular.hpp	/^LocalTriangularInverse$/;"	f	namespace:elem
LocalTrmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm.hpp	/^LocalTrmm$/;"	f	namespace:elem
LocalTrr2k	src/madness/external/elemental/src/blas-like/Trr2k/Local.hpp	/^void LocalTrr2k$/;"	f	namespace:elem
LocalTrr2kBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalTrr2kBlocksize<Complex<double>>()$/;"	f	namespace:elem
LocalTrr2kBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalTrr2kBlocksize<Complex<float>>()$/;"	f	namespace:elem
LocalTrr2kBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalTrr2kBlocksize<double>()$/;"	f	namespace:elem
LocalTrr2kBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalTrr2kBlocksize<float>()$/;"	f	namespace:elem
LocalTrr2kKernel	src/madness/external/elemental/src/blas-like/Trr2k/Local.hpp	/^LocalTrr2kKernel$/;"	f	namespace:elem::trr2k
LocalTrrk	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void LocalTrrk$/;"	f	namespace:elem
LocalTrrkBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalTrrkBlocksize<Complex<double>>()$/;"	f	namespace:elem
LocalTrrkBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalTrrkBlocksize<Complex<float>>()$/;"	f	namespace:elem
LocalTrrkBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalTrrkBlocksize<double>()$/;"	f	namespace:elem
LocalTrrkBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int LocalTrrkBlocksize<float>()$/;"	f	namespace:elem
LocalTrrkKernel	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^LocalTrrkKernel$/;"	f	namespace:elem::trrk
LocalTrsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm.hpp	/^LocalTrsm$/;"	f	namespace:elem
LocalTrstrm	src/madness/external/elemental/include/elemental/blas-like/level3/Trstrm.hpp	/^LocalTrstrm$/;"	f	namespace:elem
LocalTrtrmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm.hpp	/^LocalTrtrmm$/;"	f	namespace:elem
LocalTwoSidedTrmm	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm.hpp	/^LocalTwoSidedTrmm$/;"	f	namespace:elem
LocalTwoSidedTrsm	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm.hpp	/^LocalTwoSidedTrsm$/;"	f	namespace:elem
LocalWidth	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::LocalWidth() const { return matrix_.Width(); }$/;"	f	class:elem::AbstractBlockDistMatrix
LocalWidth	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::LocalWidth() const { return matrix_.Width(); }$/;"	f	class:elem::AbstractDistMatrix
LocalizeBoys	src/apps/ii/systolic.h	/^        LocalizeBoys<T>( DistributedMatrix<T> &M, const std::vector<int>& set, long nmo, int tag,$/;"	f	class:madness::LocalizeBoys
LocalizeBoys	src/apps/ii/systolic.h	/^    class LocalizeBoys : public SystolicMatrixAlgorithm<T>$/;"	c	namespace:madness
Lock	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void Lock() {$/;"	f	class:testing::internal::MutexBase
Lock	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void Lock() {}$/;"	f	class:testing::internal::Mutex
Locked	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^bool AbstractBlockDistMatrix<T>::Locked() const $/;"	f	class:elem::AbstractBlockDistMatrix
Locked	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^bool AbstractDistMatrix<T>::Locked() const { return IsLocked( viewType_ ); }$/;"	f	class:elem::AbstractDistMatrix
Locked	src/madness/external/elemental/src/core/Matrix.cpp	/^bool Matrix<T>::Locked() const { return IsLocked( viewType_ ); }$/;"	f	class:elem::Matrix
LockedAttach	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::LockedAttach$/;"	f	class:elem::AbstractBlockDistMatrix
LockedAttach	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::LockedAttach$/;"	f	class:elem::AbstractDistMatrix
LockedAttach	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::LockedAttach$/;"	f	class:elem::Matrix
LockedAttach_	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::LockedAttach_( Int height, Int width, const T* buffer, Int ldim )$/;"	f	class:elem::Matrix
LockedBuffer	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::LockedBuffer( Int iLoc, Int jLoc ) const$/;"	f	class:elem::AbstractBlockDistMatrix
LockedBuffer	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::LockedBuffer() const$/;"	f	class:elem::AbstractBlockDistMatrix
LockedBuffer	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::LockedBuffer( Int iLoc, Int jLoc ) const$/;"	f	class:elem::AbstractDistMatrix
LockedBuffer	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::LockedBuffer() const$/;"	f	class:elem::AbstractDistMatrix
LockedBuffer	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::LockedBuffer( Int i, Int j ) const$/;"	f	class:elem::Matrix
LockedBuffer	src/madness/external/elemental/src/core/Matrix.cpp	/^const T* Matrix<T>::LockedBuffer() const { return data_; }$/;"	f	class:elem::Matrix
LockedMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::LockedMatrix() const { return matrix_; }$/;"	f	class:elem::AbstractBlockDistMatrix
LockedMatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::LockedMatrix() const { return matrix_; }$/;"	f	class:elem::AbstractDistMatrix
LockedPartitionDown	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionDown$/;"	f	namespace:elem
LockedPartitionDownDiagonal	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionDownDiagonal$/;"	f	namespace:elem
LockedPartitionDownOffsetDiagonal	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionDownOffsetDiagonal$/;"	f	namespace:elem
LockedPartitionLeft	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionLeft( const DM& A, DM& AL, DM& AR, Int widthAR=Blocksize() )$/;"	f	namespace:elem
LockedPartitionLeft	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionLeft( const M& A, M& AL, M& AR, Int widthAR=Blocksize() )$/;"	f	namespace:elem
LockedPartitionRight	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionRight( const DM& A, DM& AL, DM& AR, Int widthAL=Blocksize() )$/;"	f	namespace:elem
LockedPartitionRight	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionRight( const M& A, M& AL, M& AR, Int widthAL=Blocksize() )$/;"	f	namespace:elem
LockedPartitionUp	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionUp$/;"	f	namespace:elem
LockedPartitionUpDiagonal	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionUpDiagonal$/;"	f	namespace:elem
LockedPartitionUpOffsetDiagonal	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^LockedPartitionUpOffsetDiagonal$/;"	f	namespace:elem
LockedRepartitionDown	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^LockedRepartitionDown$/;"	f	namespace:elem
LockedRepartitionDownDiagonal	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^LockedRepartitionDownDiagonal$/;"	f	namespace:elem
LockedRepartitionLeft	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^LockedRepartitionLeft$/;"	f	namespace:elem
LockedRepartitionRight	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^LockedRepartitionRight$/;"	f	namespace:elem
LockedRepartitionUp	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^LockedRepartitionUp$/;"	f	namespace:elem
LockedRepartitionUpDiagonal	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^LockedRepartitionUpDiagonal$/;"	f	namespace:elem
LockedView	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> LockedView$/;"	f	namespace:elem
LockedView	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> LockedView( const DistMatrix<T,U,V>& B )$/;"	f	namespace:elem
LockedView	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> LockedView$/;"	f	namespace:elem
LockedView	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> LockedView( const Matrix<T>& B )$/;"	f	namespace:elem
LockedView	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void LockedView$/;"	f	namespace:elem
LockedView	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void LockedView( BlockDistMatrix<T,U,V>& A, const DistMatrix<T,U,V>& B )$/;"	f	namespace:elem
LockedView	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void LockedView( DistMatrix<T,U,V>& A, const BlockDistMatrix<T,U,V>& B )$/;"	f	namespace:elem
LockedView	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void LockedView( DistMatrix<T,U,V>& A, const DistMatrix<T,U,V>& B )$/;"	f	namespace:elem
LockedView	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void LockedView( Matrix<T>& A, const Matrix<T>& B )$/;"	f	namespace:elem
LockedView1x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> LockedView1x2$/;"	f	namespace:elem
LockedView1x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> LockedView1x2( const Matrix<T>& BL, const Matrix<T>& BR )$/;"	f	namespace:elem
LockedView1x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void LockedView1x2$/;"	f	namespace:elem
LockedView2x1	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> LockedView2x1$/;"	f	namespace:elem
LockedView2x1	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> LockedView2x1$/;"	f	namespace:elem
LockedView2x1	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void LockedView2x1$/;"	f	namespace:elem
LockedView2x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> LockedView2x2$/;"	f	namespace:elem
LockedView2x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> LockedView2x2$/;"	f	namespace:elem
LockedView2x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void LockedView2x2$/;"	f	namespace:elem
LockedViewRange	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^DistMatrix<T,U,V> LockedViewRange$/;"	f	namespace:elem
LockedViewRange	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^Matrix<T> LockedViewRange$/;"	f	namespace:elem
LockedViewRange	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^void LockedViewRange$/;"	f	namespace:elem
Log	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Log( const F& alpha )$/;"	f	namespace:elem
Log10	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Log10(value_type v) { return log10(v); } \/\/ Logarithm base 10$/;"	f	class:mu::Parser
Log2	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Unsigned Log2( Unsigned n )$/;"	f	namespace:elem
Log2	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Log2(value_type v)  { return log(v)\/log((value_type)2); } \/\/ Logarithm base 2$/;"	f	class:mu::Parser
LogBarrier	src/madness/external/elemental/include/elemental/convex/LogBarrier.hpp	/^LogBarrier( UpperOrLower uplo, DistMatrix<F>& A, bool canOverwrite=false )$/;"	f	namespace:elem
LogBarrier	src/madness/external/elemental/include/elemental/convex/LogBarrier.hpp	/^LogBarrier( UpperOrLower uplo, Matrix<F>& A, bool canOverwrite=false )$/;"	f	namespace:elem
LogBarrier	src/madness/external/elemental/include/elemental/convex/LogBarrier.hpp	/^LogBarrier( UpperOrLower uplo, const DistMatrix<F>& A )$/;"	f	namespace:elem
LogBarrier	src/madness/external/elemental/include/elemental/convex/LogBarrier.hpp	/^LogBarrier( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
LogDetDiv	src/madness/external/elemental/include/elemental/convex/LogDetDiv.hpp	/^LogDetDiv( UpperOrLower uplo, const DistMatrix<F>& A, const DistMatrix<F>& B )$/;"	f	namespace:elem
LogDetDiv	src/madness/external/elemental/include/elemental/convex/LogDetDiv.hpp	/^LogDetDiv( UpperOrLower uplo, const Matrix<F>& A, const Matrix<F>& B )$/;"	f	namespace:elem
LogToStderr	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline void LogToStderr() {}$/;"	f	namespace:testing::internal
LogicError	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^inline void LogicError( Args... args )$/;"	f	namespace:elem
Lotkin	src/madness/external/elemental/include/elemental/matrices/Lotkin.hpp	/^Lotkin( BlockDistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Lotkin	src/madness/external/elemental/include/elemental/matrices/Lotkin.hpp	/^Lotkin( DistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Lotkin	src/madness/external/elemental/include/elemental/matrices/Lotkin.hpp	/^Lotkin( Matrix<F>& A, Int n )$/;"	f	namespace:elem
Low level parallel runtime	doc/Latex/api.tex	/^\\subsection{Low level parallel runtime}$/;"	b
Low level sequential runtime	doc/Latex/api.tex	/^\\subsection{Low-level sequential runtime}$/;"	b
LowDimIndexIterator	src/madness/mra/indexit.h	/^        LowDimIndexIterator() : IndexIterator(0, 0l) {}$/;"	f	class:madness::LowDimIndexIterator
LowDimIndexIterator	src/madness/mra/indexit.h	/^        LowDimIndexIterator(const V& limits) : IndexIterator(limits) {}$/;"	f	class:madness::LowDimIndexIterator
LowDimIndexIterator	src/madness/mra/indexit.h	/^        LowDimIndexIterator(int ndim, const long limits[]) :$/;"	f	class:madness::LowDimIndexIterator
LowDimIndexIterator	src/madness/mra/indexit.h	/^        LowDimIndexIterator(int ndim, long top) : IndexIterator(ndim, top) {}$/;"	f	class:madness::LowDimIndexIterator
LowDimIndexIterator	src/madness/mra/indexit.h	/^    class LowDimIndexIterator : public IndexIterator {$/;"	c	namespace:madness
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor() : type(TT_NONE) {}$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const LowRankTensor<T>& other) : type(other.type),$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const SVDTensor<T>& t) : type(TT_2D), impl() {$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const SliceLowRankTensor<T>& other) : type(other.lrt.type), impl() {$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const Tensor<T>& other) : type(TT_FULL), impl() {$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const Tensor<T>& rhs, const TensorArgs& targs)$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const Tensor<T>& rhs, const double& thresh, const TensorType& tt) :$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const TensorTrain<T>& tt) : type(TT_TENSORTRAIN), impl() {$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const TensorType& tt, const long k, const long ndim) :$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const std::vector<long>& dim, const TensorArgs& targs) :$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^    LowRankTensor(const std::vector<long>& dim, const TensorType& tt)$/;"	f	class:madness::LowRankTensor
LowRankTensor	src/madness/tensor/lowranktensor.h	/^class LowRankTensor {$/;"	c	namespace:madness
LowRankTensorTest	src/madness/tensor/test_gentensor.cc	/^        LowRankTensorTest() {}$/;"	f	class:__anon43::LowRankTensorTest
LowRankTensorTest	src/madness/tensor/test_gentensor.cc	/^    class LowRankTensorTest : public ::testing::Test {$/;"	c	namespace:__anon43	file:
LowRankTensorTestTypes	src/madness/tensor/test_gentensor.cc	/^    typedef ::testing::Types<float, double, float_complex, double_complex> LowRankTensorTestTypes;$/;"	t	namespace:__anon43	file:
LowerClip	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^LowerClip( BlockDistMatrix<Real,U,V>& X, Real lowerBound=0 )$/;"	f	namespace:elem
LowerClip	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^LowerClip( DistMatrix<Real,U,V>& X, Real lowerBound=0 )$/;"	f	namespace:elem
LowerClip	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^LowerClip( Matrix<Real>& X, Real lowerBound=0 )$/;"	f	namespace:elem
Lsmall	src/apps/nick/extra.h	/^  double Lsmall;      \/\/ Box size for small (near nucleus) plots$/;"	m	struct:InputParameters
Lsmall	src/apps/nick/tdse1.cc	/^    double Lsmall;      \/\/ Box size for small (near nucleus) plots$/;"	m	struct:InputParameters	file:
Lsmall	src/apps/tdse/tdse.cc	/^  double Lsmall;      \/\/ Box size for small (near nucleus) plots$/;"	m	struct:InputParameters	file:
Lsmall	src/apps/tdse/tdse.confused.cc	/^  double Lsmall;      \/\/ Box size for small (near nucleus) plots$/;"	m	struct:InputParameters	file:
Lyapunov	src/madness/external/elemental/include/elemental/control/Lyapunov.hpp	/^Lyapunov$/;"	f	namespace:elem
Lz	src/apps/chem/SCFOperators.h	/^	Lz(World& world, bool use_bspline_derivative=true) : world(world), use_bsplines(use_bspline_derivative) {};$/;"	f	class:madness::Lz
Lz	src/apps/chem/SCFOperators.h	/^class Lz {$/;"	c	namespace:madness
M	src/apps/ii/systolic.h	/^        DistributedMatrix<T> M;$/;"	m	class:madness::LocalizeBoys
M	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	18;"	d
M	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	426;"	d
M	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	18;"	d
M	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	354;"	d
M	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	18;"	d
M	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	344;"	d
MADATOMIC_USE_BGP	src/madness/world/atomicint.h	91;"	d
MADATOMIC_USE_BGQ	src/madness/world/atomicint.h	93;"	d
MADATOMIC_USE_CXX	src/madness/world/atomicint.h	87;"	d
MADATOMIC_USE_GCC	src/madness/world/atomicint.h	97;"	d
MADATOMIC_USE_X86_ASM	src/madness/world/atomicint.h	95;"	d
MADNESS CIS Excitation Energies	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\section*{MADNESS: CIS Excitation Energies}$/;"	s
MADNESS_ACK_BUFF_SIZE	src/madness/world/worldmpi.h	64;"	d
MADNESS_APPS_GROUNDPARAMS_H_INCLUDED	src/apps/adrian/GroundParameters.h	7;"	d
MADNESS_APPS_GROUNDPARAMS_H_INCLUDED	src/apps/bryan/GroundParameters.h	7;"	d
MADNESS_APPS_RESPONSEPARAMS_H_INCLUDED	src/apps/adrian/ResponseParameters.h	6;"	d
MADNESS_APPS_RESPONSEPARAMS_H_INCLUDED	src/apps/bryan/ResponseParameters.h	6;"	d
MADNESS_APPS_TDA_PLOT_VTK	src/apps/adrian/Plot_VTK.h	15;"	d
MADNESS_APPS_TDA_PLOT_VTK	src/apps/bryan/Plot_VTK.h	15;"	d
MADNESS_APPS_TDHF_H_INCLUDED	src/apps/adrian/TDDFT.h	42;"	d
MADNESS_APPS_TDHF_H_INCLUDED	src/apps/adrian/TDHF.h	41;"	d
MADNESS_APPS_TDHF_H_INCLUDED	src/apps/adrian/TDHF2.h	41;"	d
MADNESS_APPS_TDHF_H_INCLUDED	src/apps/bryan/TDHF.h	41;"	d
MADNESS_APPS_TDHF_H_INCLUDED	src/apps/bryan/TDHF2.h	41;"	d
MADNESS_APPS_TDHF_OPS_H_INCLUDED	src/apps/adrian/TDHF_Basic_Operators.h	6;"	d
MADNESS_APPS_TDHF_OPS_H_INCLUDED	src/apps/adrian/TDHF_Basic_Operators2.h	6;"	d
MADNESS_APPS_TDHF_OPS_H_INCLUDED	src/apps/bryan/TDHF_Basic_Operators.h	6;"	d
MADNESS_APPS_TDHF_OPS_H_INCLUDED	src/apps/bryan/TDHF_Basic_Operators2.h	6;"	d
MADNESS_APPS_TDHF_RESPONSEFUNC_INCLUDE	src/apps/adrian/ResponseFunction2.h	6;"	d
MADNESS_APPS_TDHF_RESPONSEFUNC_INCLUDE	src/apps/bryan/ResponseFunction2.h	6;"	d
MADNESS_APPS_TDHF_RESPONSEPOTENTIAL_INCLUDE	src/apps/adrian/ResponsePotential.h	10;"	d
MADNESS_APPS_TDHF_RESPONSEPOTENTIAL_INCLUDE	src/apps/bryan/ResponsePotential.h	10;"	d
MADNESS_ASSERT	src/madness/world/madness_exception.h	134;"	d
MADNESS_ASSERT	src/madness/world/madness_exception.h	135;"	d
MADNESS_ASSERT	src/madness/world/madness_exception.h	145;"	d
MADNESS_ASSERT	src/madness/world/madness_exception.h	152;"	d
MADNESS_ASSERT	src/madness/world/madness_exception.h	157;"	d
MADNESS_ASSERT	src/madness/world/madness_exception.h	162;"	d
MADNESS_ASSERTIONS_ASSERT	build/src/madness/config.h	93;"	d
MADNESS_ASSERT_NOEXCEPT	src/madness/world/madness_exception.h	141;"	d
MADNESS_ASSERT_NOEXCEPT	src/madness/world/madness_exception.h	142;"	d
MADNESS_ASSERT_NOEXCEPT	src/madness/world/madness_exception.h	147;"	d
MADNESS_ASSERT_NOEXCEPT	src/madness/world/madness_exception.h	153;"	d
MADNESS_ASSERT_NOEXCEPT	src/madness/world/madness_exception.h	158;"	d
MADNESS_ASSERT_NOEXCEPT	src/madness/world/madness_exception.h	170;"	d
MADNESS_ATOMUTIL_H	src/apps/polar/atomutil.h	37;"	d
MADNESS_CHECK	src/madness/world/madness_exception.h	182;"	d
MADNESS_CHECK	src/madness/world/madness_exception.h	183;"	d
MADNESS_CHECK	src/madness/world/madness_exception.h	187;"	d
MADNESS_CHECK	src/madness/world/madness_exception.h	190;"	d
MADNESS_CHEM_ATOMUTIL_H__INCLUDED	src/apps/chem/atomutil.h	37;"	d
MADNESS_CHEM_CALCULATIONPARAMETERS_H__INCLUDED	src/apps/chem/CalculationParameters.h	41;"	d
MADNESS_CHEM_COREPOTENTIAL_H__INCLUDED	src/apps/chem/corepotential.h	36;"	d
MADNESS_CHEM_MOLECULAR_BASIS_H__INCLUDED	src/apps/chem/molecularbasis.h	33;"	d
MADNESS_CHEM_MOLECULAR_OPTIMIZER_H__INCLUDED	src/apps/chem/molecular_optimizer.h	37;"	d
MADNESS_CHEM_MOLECULE_H__INCLUDED	src/apps/chem/molecule.h	33;"	d
MADNESS_CHEM_NUCLEARCORRELATIONFACTOR_H_	src/apps/chem/correlationfactor.h	75;"	d
MADNESS_CHEM_POTENTIALMANAGER_H__INCLUDED	src/apps/chem/potentialmanager.h	34;"	d
MADNESS_CHEM_PROJECTOR_H__INCLUDED	src/apps/chem/projector.h	9;"	d
MADNESS_CHEM_SCFOPERATORS_H_	src/apps/chem/SCFOperators.h	38;"	d
MADNESS_CHEM_SCFPROTOCOL_H__INCLUDED	src/apps/chem/SCFProtocol.h	40;"	d
MADNESS_CHEM_SCF_H__INCLUDED	src/apps/chem/SCF.h	41;"	d
MADNESS_CHEM_XCFUNCTIONAL_H__INCLUDED	src/apps/chem/xcfunctional.h	2;"	d
MADNESS_CHEM_XCFUNCTIONAL_H__INCLUDED	src/apps/polar/xcfunctional.h	2;"	d
MADNESS_CLANG_33_OR_HIGHER	src/madness/world/atomicint.h	57;"	d
MADNESS_CLANG_33_OR_HIGHER	src/madness/world/atomicint.h	83;"	d
MADNESS_CONCAT	src/madness/madness_config.h	166;"	d
MADNESS_CONFIGURATION_CXX	build/src/madness/config.h	14;"	d
MADNESS_CONFIGURATION_CXXFLAGS	build/src/madness/config.h	15;"	d
MADNESS_CONFIGURATION_DATE	build/src/madness/config.h	17;"	d
MADNESS_CONFIGURATION_HOST	build/src/madness/config.h	18;"	d
MADNESS_CONFIGURATION_USER	build/src/madness/config.h	19;"	d
MADNESS_CONSTANTS_H	src/madness/constants.h	41;"	d
MADNESS_COREPOTENTIAL_H	src/apps/polar/corepotential.h	36;"	d
MADNESS_CXX_ABI	build/src/madness/config.h	41;"	d
MADNESS_CXX_ABI_GenericARM	build/src/madness/config.h	39;"	d
MADNESS_CXX_ABI_GenericItanium	build/src/madness/config.h	38;"	d
MADNESS_CXX_ABI_Microsoft	build/src/madness/config.h	40;"	d
MADNESS_DERIVATIVE_H__INCLUDED	src/madness/mra/derivative.h	33;"	d
MADNESS_DISPLAY_EXCEPTION_BREAK_MESSAGE	src/madness/world/madness_exception.h	58;"	d
MADNESS_DISPLAY_EXCEPTION_BREAK_MESSAGE	src/madness/world/test_stack.cc	35;"	d	file:
MADNESS_DISPLAY_EXCEPTION_BREAK_MESSAGE	src/madness/world/test_worldptr.cc	36;"	d	file:
MADNESS_DISTRIBUTED_MATRIX_H	src/madness/tensor/distributed_matrix.h	2;"	d
MADNESS_EXAMPLES_NONLINSOL_H__INCLUDED	src/madness/mra/nonlinsol.h	35;"	d
MADNESS_EXCEPTION	src/madness/world/madness_exception.h	119;"	d
MADNESS_FORTRAN_DEFAULT_INTEGER_SIZE	build/src/madness/config.h	30;"	d
MADNESS_FUNCTION_TRAITS	src/madness/world/function_traits.h	2;"	d
MADNESS_GCC_48_OR_HIGHER	src/madness/world/atomicint.h	51;"	d
MADNESS_GCC_48_OR_HIGHER	src/madness/world/atomicint.h	75;"	d
MADNESS_GITREVISION	build/src/madness/misc/gitversion.h	/^const char* MADNESS_GITREVISION="a755974390623388c6a84f973867f1dd117fc9ff+";/;"	v
MADNESS_HAS_CEREAL	src/madness/world/cereal_archive.h	42;"	d
MADNESS_HAS_GOOGLE_TEST	build/src/madness/config.h	61;"	d
MADNESS_HAS_LIBXC	build/src/madness/config.h	56;"	d
MADNESS_HAVE_AVX	src/madness/madness_config.h	95;"	d
MADNESS_HAVE_AVX2	src/madness/madness_config.h	91;"	d
MADNESS_HAVE_AVX512	src/madness/madness_config.h	87;"	d
MADNESS_HAVE_CRAYXE	src/madness/madness_config.h	61;"	d
MADNESS_HAVE_CRAYXT	src/madness/madness_config.h	56;"	d
MADNESS_HAVE_POWERPC_32	src/madness/madness_config.h	155;"	d
MADNESS_HAVE_POWERPC_32	src/madness/madness_config.h	68;"	d
MADNESS_HAVE_POWERPC_64	src/madness/madness_config.h	151;"	d
MADNESS_HAVE_POWERPC_64	src/madness/madness_config.h	73;"	d
MADNESS_HAVE_SSE	src/madness/madness_config.h	116;"	d
MADNESS_HAVE_SSE	src/madness/madness_config.h	123;"	d
MADNESS_HAVE_SSE	src/madness/madness_config.h	139;"	d
MADNESS_HAVE_SSE2	src/madness/madness_config.h	115;"	d
MADNESS_HAVE_SSE2	src/madness/madness_config.h	121;"	d
MADNESS_HAVE_SSE2	src/madness/madness_config.h	135;"	d
MADNESS_HAVE_SSE3	src/madness/madness_config.h	111;"	d
MADNESS_HAVE_SSE42	src/madness/madness_config.h	99;"	d
MADNESS_HAVE_SSSE3	src/madness/madness_config.h	107;"	d
MADNESS_HAVE_X86_32	src/madness/madness_config.h	132;"	d
MADNESS_HAVE_X86_64	src/madness/madness_config.h	63;"	d
MADNESS_HAVE_X86_64	src/madness/madness_config.h	82;"	d
MADNESS_H__INCLUDED	src/madness.h	39;"	d
MADNESS_ICC_130_OR_HIGHER	src/madness/world/atomicint.h	62;"	d
MADNESS_ICC_130_OR_HIGHER	src/madness/world/atomicint.h	79;"	d
MADNESS_INTERIOR_BC_TEST_PROBLEMS_H__INCLUDED	src/apps/interior_bc/test_problems.h	65;"	d
MADNESS_LINALG_CBLAS_H__INCLUDED	src/madness/tensor/cblas.h	34;"	d
MADNESS_LINALG_CBLAS_TYPES_H__INCLUDED	src/madness/tensor/cblas_types.h	34;"	d
MADNESS_LINALG_CLAPACK_FORTRAN_H__INCLUDED	src/madness/tensor/clapack_fortran.h	37;"	d
MADNESS_LINALG_CLAPACK_H__INCLUDED	src/madness/tensor/clapack.h	38;"	d
MADNESS_LINALG_GMRES_H__INCLUDED	src/madness/tensor/gmres.h	36;"	d
MADNESS_LINALG_LAPACKE_TYPES_H__INCLUDED	src/madness/tensor/lapacke_types.h	34;"	d
MADNESS_LINALG_SOLVERS_H__INCLUDED	src/madness/tensor/solvers.h	34;"	d
MADNESS_LINALG_TENSOR_LAPACK_H__INCLUDED	src/madness/tensor/tensor_lapack.h	37;"	d
MADNESS_MADNESS_CONFIG_H__INCLUDED	src/madness/madness_config.h	39;"	d
MADNESS_MAJOR_VERSION	build/src/madness/config.h	8;"	d
MADNESS_MICRO_VERSION	build/src/madness/config.h	10;"	d
MADNESS_MINOR_VERSION	build/src/madness/config.h	9;"	d
MADNESS_MISC_CFFT_H__INCLUDED	src/madness/misc/cfft.h	9;"	d
MADNESS_MISC_INTERPOLATION_1D_H__INCLUDED	src/madness/misc/interpolation_1d.h	34;"	d
MADNESS_MISC_MISC_H__INCLUDED	src/madness/misc/misc.h	33;"	d
MADNESS_MISC_PHANDLER_H__INCLUDED	src/madness/misc/phandler.h	33;"	d
MADNESS_MISC_RAN_H__INCLUDED	src/madness/misc/ran.h	33;"	d
MADNESS_MOLECULE_H	src/apps/polar/molecule.h	33;"	d
MADNESS_MOLOPT_H	src/apps/chem/molopt.h	2;"	d
MADNESS_MPI_TEST	src/madness/world/safempi.h	72;"	d
MADNESS_MPI_THREAD_LEVEL	build/src/madness/config.h	98;"	d
MADNESS_MRA_ADQUAD_H__INCLUDED	src/madness/mra/adquad.h	34;"	d
MADNESS_MRA_CONVOLUTION1D_H__INCLUDED	src/madness/mra/convolution1d.h	33;"	d
MADNESS_MRA_DISPLACEMENTS_H__INCLUDED	src/madness/mra/displacements.h	34;"	d
MADNESS_MRA_FUNCDEFAULTS_H__INCLUDED	src/madness/mra/funcdefaults.h	33;"	d
MADNESS_MRA_FUNCIMPL_H__INCLUDED	src/madness/mra/funcimpl.h	33;"	d
MADNESS_MRA_FUNCPLOT_H__INCLUDED	src/madness/mra/funcplot.h	33;"	d
MADNESS_MRA_FUNCTION_FACTORY_H__INCLUDED	src/madness/mra/function_factory.h	47;"	d
MADNESS_MRA_FUNCTION_INTERFACE_H__INCLUDED	src/madness/mra/function_interface.h	36;"	d
MADNESS_MRA_FUNCTYPEDEFS_H__INCLUDED	src/madness/mra/functypedefs.h	34;"	d
MADNESS_MRA_GFIT_H__INCLUDED	src/madness/mra/gfit.h	36;"	d
MADNESS_MRA_IBDEUX_H__INCLUDED	src/madness/mra/lbdeux.h	34;"	d
MADNESS_MRA_INDEXIT_H__INCLUDED	src/madness/mra/indexit.h	34;"	d
MADNESS_MRA_KEY_H__INCLUDED	src/madness/mra/key.h	33;"	d
MADNESS_MRA_LEGENDRE_H__INCLUDED	src/madness/mra/legendre.h	34;"	d
MADNESS_MRA_MRAIMPL_H__INCLUDED	src/madness/mra/mraimpl.h	33;"	d
MADNESS_MRA_MRA_H__INCLUDED	src/madness/mra/mra.h	33;"	d
MADNESS_MRA_OPERATOR_H__INCLUDED	src/madness/mra/operator.h	33;"	d
MADNESS_MRA_POWER_H__INCLUDED	src/madness/mra/power.h	37;"	d
MADNESS_MRA_QMPROP_H__INCLUDED	src/madness/mra/qmprop.h	34;"	d
MADNESS_MRA_SDF_DOMAINMASK_H__INCLUDED	src/madness/mra/sdf_domainmask.h	58;"	d
MADNESS_MRA_SDF_SHAPE_2D_H__INCLUDED	src/madness/mra/sdf_shape_2D.h	52;"	d
MADNESS_MRA_SDF_SHAPE_3D_H__INCLUDED	src/madness/mra/sdf_shape_3D.h	60;"	d
MADNESS_MRA_SIMPLECACHE_H__INCLUDED	src/madness/mra/simplecache.h	34;"	d
MADNESS_MRA_TWOSCALE_H__INCLUDED	src/madness/mra/twoscale.h	34;"	d
MADNESS_MRA_VMRA_H__INCLUDED	src/madness/mra/vmra.h	34;"	d
MADNESS_MRA_VMRA_H__INCLUDED	src/madness/mra/vmra1.h	35;"	d
MADNESS_PACKAGE_NAME	build/src/madness/config.h	4;"	d
MADNESS_PACKAGE_URL	build/src/madness/config.h	5;"	d
MADNESS_PACKAGE_VERSION	build/src/madness/config.h	6;"	d
MADNESS_PARSEC_INCLUED	src/madness/world/parsec.h	2;"	d
MADNESS_POTENTIALMANAGER_H	src/apps/polar/potentialmanager.h	34;"	d
MADNESS_PRAGMA	src/madness/madness_config.h	162;"	d
MADNESS_PRAGMA_CLANG	src/madness/madness_config.h	168;"	d
MADNESS_PRAGMA_CLANG	src/madness/madness_config.h	170;"	d
MADNESS_RESTRICT	build/src/madness/config.h	120;"	d
MADNESS_REVISION	build/src/madness/config.h	11;"	d
MADNESS_SERIALIZES_MPI	src/madness/world/safempi.h	60;"	d
MADNESS_SSE41	src/madness/madness_config.h	103;"	d
MADNESS_STUBMPI_H	src/madness/world/stubmpi.h	2;"	d
MADNESS_SYSTOLIC_H	src/apps/ii/systolic.h	33;"	d
MADNESS_SYSTOLIC_H	src/madness/tensor/systolic.h	2;"	d
MADNESS_TASKQ_VARIADICS	src/madness/world/taskfn.h	41;"	d
MADNESS_TENSOR_ALIGNED_H__INCLUDED	src/madness/tensor/aligned.h	34;"	d
MADNESS_TENSOR_BASETENSOR_H__INCLUDED	src/madness/tensor/basetensor.h	37;"	d
MADNESS_TENSOR_ELEM_H__INCLUDED	src/madness/tensor/elem.h	33;"	d
MADNESS_TENSOR_LOWRANKTENSOR_H_	src/madness/tensor/lowranktensor.h	35;"	d
MADNESS_TENSOR_MTXMQ_H__INCLUDED	src/madness/tensor/mtxmq_graveyard/mtxmq.h	34;"	d
MADNESS_TENSOR_MXM_H__INCLUDED	src/madness/tensor/mxm.h	36;"	d
MADNESS_TENSOR_SLICE_H__INCLUDED	src/madness/tensor/slice.h	40;"	d
MADNESS_TENSOR_TENSOREXCPT_H__INCLUDED	src/madness/tensor/tensorexcept.h	37;"	d
MADNESS_TENSOR_TENSORITER_H__INCLUDED	src/madness/tensor/tensoriter.h	37;"	d
MADNESS_TENSOR_TENSOR_H__INCLUDED	src/madness/tensor/tensor.h	33;"	d
MADNESS_TENSOR_TENSOR_MACROS_H__INCLUDED	src/madness/tensor/tensor_macros.h	37;"	d
MADNESS_TENSOR_TYPE_DATA_H__INCLUDED	src/madness/tensor/type_data.h	37;"	d
MADNESS_TENSOR_VECTOR_FACTORY_H__INCLUDED	src/madness/tensor/vector_factory.h	37;"	d
MADNESS_TENSOR_VMATH_H__INCLUDED	src/madness/tensor/vmath.h	34;"	d
MADNESS_TINYXML_TINYSTR_H__INCLUDED	src/madness/external/tinyxml/tinystr.h	40;"	d
MADNESS_TINYXML_TINYXML_H__INCLUDED	src/madness/external/tinyxml/tinyxml.h	27;"	d
MADNESS_USE_BSEND_ACKS	build/src/madness/config.h	106;"	d
MADNESS_VERSION	build/src/madness/config.h	7;"	d
MADNESS_VIBANAL_INCLUDED	src/apps/chem/vibanal.h	2;"	d
MADNESS_WORLD_ARCHIVE_H__INCLUDED	src/madness/world/archive.h	33;"	d
MADNESS_WORLD_ARRAY_ADDONS_H__INCLUDED	src/madness/world/array_addons.h	33;"	d
MADNESS_WORLD_ATOMICINT_H__INCLUDED	src/madness/world/atomicint.h	33;"	d
MADNESS_WORLD_BINARY_FSTREAM_ARCHIVE_H__INCLUDED	src/madness/world/binary_fstream_archive.h	33;"	d
MADNESS_WORLD_BINSORTER_H__INCLUDED	src/madness/world/binsorter.h	3;"	d
MADNESS_WORLD_BUFFER_ARCHIVE_H__INCLUDED	src/madness/world/buffer_archive.h	33;"	d
MADNESS_WORLD_CEREAL_ARCHIVE_H__INCLUDED	src/madness/world/cereal_archive.h	33;"	d
MADNESS_WORLD_DEFERRED_CLEANUP_H__INCLUDED	src/madness/world/deferred_cleanup.h	36;"	d
MADNESS_WORLD_DEPENDENCY_INTERFACE_H__INCLUDED	src/madness/world/dependency_interface.h	39;"	d
MADNESS_WORLD_DISTRIBUTED_ID_H__INCLUDED	src/madness/world/distributed_id.h	33;"	d
MADNESS_WORLD_DIST_CACHE_H__INCLUDED	src/madness/world/dist_cache.h	33;"	d
MADNESS_WORLD_DQUEUE_H__INCLUDED	src/madness/world/dqueue.h	37;"	d
MADNESS_WORLD_FUTURE_H__INCLUDED	src/madness/world/future.h	39;"	d
MADNESS_WORLD_GROUP_H__INCLUDED	src/madness/world/group.h	33;"	d
MADNESS_WORLD_INFO_H__INCLUDED	src/madness/world/info.h	33;"	d
MADNESS_WORLD_MADNESS_EXCEPTION_H__INCLUDED	src/madness/world/madness_exception.h	46;"	d
MADNESS_WORLD_MADWORLD_H__INCLUDED	src/madness/world/MADworld.h	40;"	d
MADNESS_WORLD_MEM_FUNC_WRAPPER_H__INCLUDED	src/madness/world/mem_func_wrapper.h	41;"	d
MADNESS_WORLD_MPI_ARCHIVE_H__INCLUDED	src/madness/world/mpi_archive.h	39;"	d
MADNESS_WORLD_NODEFAULTS_H__INCLUDED	src/madness/world/nodefaults.h	37;"	d
MADNESS_WORLD_PARALLEL_ARCHIVE_H__INCLUDED	src/madness/world/parallel_archive.h	33;"	d
MADNESS_WORLD_POSIXMEM_H__INCLUDED	src/madness/world/posixmem.h	35;"	d
MADNESS_WORLD_PRINT_H__INCLUDED	src/madness/world/print.h	33;"	d
MADNESS_WORLD_PRINT_SEQ_H__INCLUDED	src/madness/world/print_seq.h	33;"	d
MADNESS_WORLD_RANGE_H__INCLUDED	src/madness/world/range.h	33;"	d
MADNESS_WORLD_SAFEMPI_H__INCLUDED	src/madness/world/safempi.h	34;"	d
MADNESS_WORLD_STACK_H__INCLUDED	src/madness/world/stack.h	33;"	d
MADNESS_WORLD_TASKFN_H__INCLUDED	src/madness/world/taskfn.h	33;"	d
MADNESS_WORLD_TEXT_FSTREAM_ARCHIVE_H__INCLUDED	src/madness/world/text_fstream_archive.h	33;"	d
MADNESS_WORLD_THREAD_H__INCLUDED	src/madness/world/thread.h	33;"	d
MADNESS_WORLD_TIMERS_H__INCLUDED	src/madness/world/timers.h	39;"	d
MADNESS_WORLD_TYPE_TRAITS_H__INCLUDED	src/madness/world/type_traits.h	33;"	d
MADNESS_WORLD_UNIQUEID_H__INCLUDED	src/madness/world/uniqueid.h	39;"	d
MADNESS_WORLD_VECTOR_ARCHIVE_H__INCLUDED	src/madness/world/vector_archive.h	33;"	d
MADNESS_WORLD_VECTOR_H__INCLUDED	src/madness/world/vector.h	33;"	d
MADNESS_WORLD_WORLDAM_H__INCLUDED	src/madness/world/worldam.h	33;"	d
MADNESS_WORLD_WORLDDC_H__INCLUDED	src/madness/world/worlddc.h	33;"	d
MADNESS_WORLD_WORLDGOP_H__INCLUDED	src/madness/world/worldgop.h	33;"	d
MADNESS_WORLD_WORLDHASHMAP_H__INCLUDED	src/madness/world/worldhashmap.h	33;"	d
MADNESS_WORLD_WORLDHASH_H__INCLUDED	src/madness/world/worldhash.h	33;"	d
MADNESS_WORLD_WORLDINIT_H__INCLUDED	src/madness/world/worldinit.h	39;"	d
MADNESS_WORLD_WORLDMEM_H__INCLUDED	src/madness/world/worldmem.h	2;"	d
MADNESS_WORLD_WORLDMPI_H__INCLUDED	src/madness/world/worldmpi.h	33;"	d
MADNESS_WORLD_WORLDMUTEX_H__INCLUDED	src/madness/world/worldmutex.h	34;"	d
MADNESS_WORLD_WORLDPAPI_H__INCLUDED	src/madness/world/worldpapi.h	33;"	d
MADNESS_WORLD_WORLDPROFILE_H__INCLUDED	src/madness/world/worldprofile.h	34;"	d
MADNESS_WORLD_WORLDPTR_H__INCLUDED	src/madness/world/worldptr.h	39;"	d
MADNESS_WORLD_WORLDREF_H__INCLUDED	src/madness/world/worldref.h	34;"	d
MADNESS_WORLD_WORLDRMI_H__INCLUDED	src/madness/world/worldrmi.h	33;"	d
MADNESS_WORLD_WORLDTYPES_H__INCLUDED	src/madness/world/worldtypes.h	39;"	d
MADNESS_WORLD_WORLD_H__INCLUDED	src/madness/world/world.h	43;"	d
MADNESS_WORLD_WORLD_OBJECT_H__INCLUDED	src/madness/world/world_object.h	39;"	d
MADNESS_WORLD_WORLD_TASK_QUEUE_H__INCLUDED	src/madness/world/world_task_queue.h	39;"	d
MADNESS_XPRAGMA	src/madness/madness_config.h	164;"	d
MAD_ARCHIVE_DEBUG	src/madness/world/archive.h	69;"	d
MAD_ARCHIVE_DEBUG	src/madness/world/archive.h	72;"	d
MAD_ARCHIVE_TYPE_NAMES_CC	src/madness/world/archive_type_names.cc	39;"	d	file:
MAD_BIND_DEFAULT	build/src/madness/config.h	102;"	d
MAD_POINTGROUP_H	src/apps/moldft/pointgroup.h	34;"	d
MAD_POINTGROUP_H	src/apps/polar/pointgroup.h	34;"	d
MAKE_PROPAGATOR	src/apps/tdse/tdse.cc	222;"	d	file:
MAKE_PROPAGATOR	src/examples/tdse1d.cc	116;"	d	file:
MAKE_PROPAGATOR	src/examples/testspectralprop.cc	/^complex_operatorT* MAKE_PROPAGATOR(World& world, double t)$/;"	f
MAP_TYPE_CANT_BE_UNSIGNED	src/madness/external/muParser/muParserDef.h	/^  typedef char MAP_TYPE_CANT_BE_UNSIGNED[ sizeof( STATIC_ASSERTION_FAILURE< bytecode_type(-1)<0 >) ];$/;"	t	namespace:mu
MASK	src/madness/mra/sdf_domainmask.h	/^        static const int MASK; \/\/\/< Use the \\c mask() function in \\c mask$/;"	m	class:madness::DomainMaskSDFFunctor
MASK	src/madness/mra/sdf_domainmask.h	/^    const int DomainMaskSDFFunctor<NDIM>::MASK = 1;$/;"	m	class:madness::DomainMaskSDFFunctor
MASK_COMPLEMENT	src/madness/mra/sdf_domainmask.h	/^        static const int MASK_COMPLEMENT; \/\/\/< Get the complement of \\c mask()$/;"	m	class:madness::DomainMaskSDFFunctor
MASK_COMPLEMENT	src/madness/mra/sdf_domainmask.h	/^    const int DomainMaskSDFFunctor<NDIM>::MASK_COMPLEMENT = 2;$/;"	m	class:madness::DomainMaskSDFFunctor
MATRIX_MARKET	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    MATRIX_MARKET,$/;"	e	enum:elem::FileFormatNS::FileFormat
MAX	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op MAX = MPI_MAX;$/;"	m	namespace:elem::mpi
MAXCALLBACKS	src/madness/world/dependency_interface.h	/^        static const int MAXCALLBACKS = 8; \/\/\/< Maximum number of callbacks.$/;"	m	class:madness::DependencyInterface
MAXCALLBACKS	src/madness/world/future.h	/^        static const int MAXCALLBACKS = 4;$/;"	m	class:madness::FutureImpl
MAXITER	src/madness/external/elemental/external/pmrrr/include/pmrrr.h	209;"	d
MAXK	src/madness/mra/funcdefaults.h	/^    static const int MAXK = 30;$/;"	m	namespace:madness
MAXLEN	src/madness/world/lookup3.c	755;"	d	file:
MAXLEVEL	src/madness/mra/funcdefaults.h	/^    static const int MAXLEVEL = 8*sizeof(Translation)-2;$/;"	m	namespace:madness
MAXLOC	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op MAXLOC = MPI_MAXLOC;$/;"	m	namespace:elem::mpi
MAXNATOM	src/apps/nick/extra.h	/^  static const int MAXNATOM=99;$/;"	m	struct:InputParameters
MAXNATOM	src/apps/nick/tdse1.cc	/^    static const int MAXNATOM=1;$/;"	m	struct:InputParameters	file:
MAXNATOM	src/apps/tdse/tdse.cc	/^  static const int MAXNATOM=99;$/;"	m	struct:InputParameters	file:
MAXNATOM	src/apps/tdse/tdse.confused.cc	/^  static const int MAXNATOM=99;$/;"	m	struct:InputParameters	file:
MAXNATOM	src/apps/tdse/tdse4.cc	/^  static const int MAXNATOM=99;$/;"	m	struct:InputParameters	file:
MAXPAIR	src/madness/world/lookup3.c	754;"	d	file:
MAX_DIM	src/madness/misc/phandler.h	/^    static const int MAX_DIM = 6;$/;"	m	class:ParserHandler
MAX_ENTITY_LENGTH	src/madness/external/tinyxml/tinyxml.h	/^		MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon42
MAX_GROWTH	src/madness/external/elemental/external/pmrrr/include/pmrrr.h	219;"	d
MAX_NORM	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    MAX_NORM,           \/\/ Maximum entry-wise magnitude$/;"	e	enum:elem::NormTypeNS::NormType
MAX_NTHREAD	src/madness/world/worldmutex.h	/^        static const int MAX_NTHREAD = 64;$/;"	m	class:madness::ConditionVariable
MAX_NTHREAD	src/madness/world/worldmutex.h	/^        static const int MAX_NTHREAD = 64;$/;"	m	class:madness::MutexFair
MAX_NTHREAD	src/madness/world/worldprofile.h	/^        static const int MAX_NTHREAD=64;$/;"	m	struct:madness::WorldProfileEntry
MAX_NUM_THREADS	src/madness/world/test_atomicint.cc	41;"	d	file:
MAX_TRY_RRR	src/madness/external/elemental/external/pmrrr/include/pmrrr.h	223;"	d
MC	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    MC,   \/\/ Col of a matrix distribution$/;"	e	enum:elem::DistNS::Dist
MCComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::MCComm()     const { return matrixColComm_;      }$/;"	f	class:elem::Grid
MCRank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::MCRank() const { return mpi::Rank(matrixColComm_); }$/;"	f	class:elem::Grid
MCSize	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::MCSize() const { return height_;       }$/;"	f	class:elem::Grid
MD	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    MD,   \/\/ Diagonal of a matrix distribution$/;"	e	enum:elem::DistNS::Dist
MDComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::MDComm()     const { return matrixDiagComm_;     }$/;"	f	class:elem::Grid
MDPerpComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::MDPerpComm() const { return matrixDiagPerpComm_; }$/;"	f	class:elem::Grid
MEMFUN_RETURNT	src/madness/world/type_traits.h	202;"	d
MENTITY_H_	src/apps/hf/mentity.h	140;"	d
MIN	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op MIN = MPI_MIN;$/;"	m	namespace:elem::mpi
MINLOC	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op MINLOC = MPI_MINLOC;$/;"	m	namespace:elem::mpi
MIN_COLL_MSG	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int MIN_COLL_MSG = 1; \/\/ minimum message size for collectives$/;"	m	namespace:elem::mpi
MIN_RELGAP	src/madness/external/elemental/external/pmrrr/include/pmrrr.h	214;"	d
MIXED	src/apps/chem/CCStructures.h	/^  enum FuncType {UNDEFINED,HOLE,PARTICLE,MIXED,RESPONSE};$/;"	e	enum:madness::FuncType
MOLECULAR_BASIS_H	src/apps/hf/molecularbasis.h	33;"	d
MOLECULAR_BASIS_H	src/apps/polar/molecularbasis.h	33;"	d
MOLECULAR_MASK_H	src/examples/molecularmask.h	2;"	d
MOs	src/apps/adrian/ESInterface.h	/^  const madness::Tensor<double> &MOs; \/\/\/< Publically accessible alpha MO expansions coefficients. Column is the MO, row is the basis function.$/;"	m	class:slymer::ES_Interface
MOs	src/apps/adrian/ESInterface.h	/^  constexpr Properties MOs = 1 << 3; \/\/\/< The MO vector coefficients.$/;"	m	namespace:slymer::Properties
MOs	src/apps/bryan/ESInterface.h	/^  const madness::Tensor<double> &MOs; \/\/\/< Publically accessible alpha MO expansions coefficients. Column is the MO, row is the basis function.$/;"	m	class:slymer::ES_Interface
MOs	src/apps/bryan/ESInterface.h	/^  constexpr Properties MOs = 1 << 3; \/\/\/< The MO vector coefficients.$/;"	m	namespace:slymer::Properties
MP2	src/apps/chem/mp2.cc	/^MP2::MP2(World& world, const std::string& input) : world(world),$/;"	f	class:madness::MP2
MP2	src/apps/chem/mp2.h	/^    class MP2 : public OptimizationTargetInterface {$/;"	c	namespace:madness
MP2_H_	src/apps/chem/mp2.h	40;"	d
MP2_PAIRTYPE	src/apps/chem/PNOParameters.h	/^enum PairType{MP2_PAIRTYPE,CISPD_PAIRTYPE,ALL_PAIRTYPE,NONE_PAIRTYPE,UNKNOWN_PAIRTYPE};$/;"	e	enum:madness::PairType
MPIAR_TAG	src/madness/world/safempi.h	/^    static const int MPIAR_TAG = 1001;$/;"	m	namespace:SafeMPI
MPIInputArchive	src/madness/world/mpi_archive.h	/^            MPIInputArchive(World& world, const ProcessID& src, int tag=SafeMPI::MPIAR_TAG)$/;"	f	class:madness::archive::MPIInputArchive
MPIInputArchive	src/madness/world/mpi_archive.h	/^        class MPIInputArchive : public BaseInputArchive {$/;"	c	namespace:madness::archive
MPIOutputArchive	src/madness/world/mpi_archive.h	/^            MPIOutputArchive(World& world, const ProcessID& dest, int tag=SafeMPI::MPIAR_TAG)$/;"	f	class:madness::archive::MPIOutputArchive
MPIOutputArchive	src/madness/world/mpi_archive.h	/^        class MPIOutputArchive : public BaseOutputArchive {$/;"	c	namespace:madness::archive
MPIRawInputArchive	src/madness/world/mpi_archive.h	/^            MPIRawInputArchive(World& world, const ProcessID& src, int tag=SafeMPI::MPIAR_TAG)$/;"	f	class:madness::archive::MPIRawInputArchive
MPIRawInputArchive	src/madness/world/mpi_archive.h	/^        class MPIRawInputArchive : public BaseInputArchive {$/;"	c	namespace:madness::archive
MPIRawOutputArchive	src/madness/world/mpi_archive.h	/^            MPIRawOutputArchive(World& world, const ProcessID& dest, int tag=SafeMPI::MPIAR_TAG)$/;"	f	class:madness::archive::MPIRawOutputArchive
MPIRawOutputArchive	src/madness/world/mpi_archive.h	/^        class MPIRawOutputArchive : public BaseOutputArchive {$/;"	c	namespace:madness::archive
MPI_ANY_SOURCE	src/madness/world/stubmpi.h	64;"	d
MPI_ANY_TAG	src/madness/world/stubmpi.h	65;"	d
MPI_Abort	src/madness/world/stubmpi.h	/^inline int MPI_Abort(MPI_Comm, int code) { exit(code); return MPI_SUCCESS; }$/;"	f
MPI_Allreduce	src/madness/world/stubmpi.h	/^inline int MPI_Allreduce(void *sendbuf, void *recvbuf, int count, MPI_Datatype, MPI_Op, MPI_Comm) {$/;"	f
MPI_BAND	src/madness/world/stubmpi.h	96;"	d
MPI_BOR	src/madness/world/stubmpi.h	98;"	d
MPI_BXOR	src/madness/world/stubmpi.h	100;"	d
MPI_BYTE	src/madness/world/stubmpi.h	73;"	d
MPI_Barrier	src/madness/world/stubmpi.h	/^inline int MPI_Barrier(MPI_Comm) { return MPI_SUCCESS; }$/;"	f
MPI_Bcast	src/madness/world/stubmpi.h	/^inline int MPI_Bcast(void*, int, MPI_Datatype, int, MPI_Comm) { return MPI_SUCCESS; }$/;"	f
MPI_Bsend	src/madness/world/stubmpi.h	/^inline int MPI_Bsend(void*, int, MPI_Datatype, int, int, MPI_Comm) { return MPI_ERR_COMM; }$/;"	f
MPI_Buffer_attach	src/madness/world/stubmpi.h	/^inline int MPI_Buffer_attach(void*, int) { return MPI_SUCCESS; }$/;"	f
MPI_Buffer_detach	src/madness/world/stubmpi.h	/^inline int MPI_Buffer_detach(void* buffer, int* size) { return MPI_SUCCESS; }$/;"	f
MPI_CHAR	src/madness/world/stubmpi.h	70;"	d
MPI_COMM_NULL	src/madness/world/stubmpi.h	47;"	d
MPI_COMM_WORLD	src/madness/world/stubmpi.h	24;"	d
MPI_CONGRUENT	src/madness/world/stubmpi.h	42;"	d
MPI_Comm	src/madness/world/stubmpi.h	/^typedef int MPI_Comm;$/;"	t
MPI_Comm_compare	src/madness/world/stubmpi.h	/^inline int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result) {$/;"	f
MPI_Comm_create	src/madness/world/stubmpi.h	/^inline int MPI_Comm_create(MPI_Comm,  MPI_Group, MPI_Comm *newcomm) {$/;"	f
MPI_Comm_free	src/madness/world/stubmpi.h	/^inline int MPI_Comm_free(MPI_Comm * comm) {$/;"	f
MPI_Comm_get_attr	src/madness/world/stubmpi.h	/^inline int MPI_Comm_get_attr(MPI_Comm, int, void*, int*) { return MPI_ERR_COMM; }$/;"	f
MPI_Comm_group	src/madness/world/stubmpi.h	/^inline int MPI_Comm_group(MPI_Comm, MPI_Group* group) {$/;"	f
MPI_Comm_rank	src/madness/world/stubmpi.h	/^inline int MPI_Comm_rank(MPI_Comm, int* rank) { *rank = 0; return MPI_SUCCESS; }$/;"	f
MPI_Comm_set_errhandler	src/madness/world/stubmpi.h	/^inline int MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler) {return MPI_SUCCESS;}$/;"	f
MPI_Comm_size	src/madness/world/stubmpi.h	/^inline unsigned int MPI_Comm_size(MPI_Comm, int* size) { *size = 1; return MPI_SUCCESS; }$/;"	f
MPI_Comm_split	src/madness/world/stubmpi.h	/^inline int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm) {$/;"	f
MPI_Comm_split_type	src/madness/world/stubmpi.h	/^inline int MPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm) {$/;"	f
MPI_DATATYPE_NULL	src/madness/world/stubmpi.h	50;"	d
MPI_DOUBLE	src/madness/world/stubmpi.h	82;"	d
MPI_Datatype	src/madness/world/stubmpi.h	/^typedef int MPI_Datatype;$/;"	t
MPI_ERRHANDLER_NULL	src/madness/world/stubmpi.h	52;"	d
MPI_ERROR	src/madness/world/stubmpi.h	/^    int MPI_ERROR;$/;"	m	struct:MPI_Status
MPI_ERRORS_RETURN	src/madness/world/stubmpi.h	37;"	d
MPI_ERR_ARG	src/madness/world/stubmpi.h	35;"	d
MPI_ERR_COMM	src/madness/world/stubmpi.h	34;"	d
MPI_ERR_IN_STATUS	src/madness/world/stubmpi.h	36;"	d
MPI_Errhandler	src/madness/world/stubmpi.h	/^typedef int MPI_Errhandler;$/;"	t
MPI_Error_string	src/madness/world/stubmpi.h	/^inline int MPI_Error_string(int errorcode, char *string, int *resultlen) {$/;"	f
MPI_FLOAT	src/madness/world/stubmpi.h	81;"	d
MPI_Finalize	src/madness/world/stubmpi.h	/^inline int MPI_Finalize() { return MPI_SUCCESS; }$/;"	f
MPI_Finalized	src/madness/world/stubmpi.h	/^inline int MPI_Finalized(int* flag) { *flag = 0; return MPI_SUCCESS; }$/;"	f
MPI_GROUP_NULL	src/madness/world/stubmpi.h	49;"	d
MPI_Get_count	src/madness/world/stubmpi.h	/^inline int MPI_Get_count(MPI_Status *, MPI_Datatype, int *count) {$/;"	f
MPI_Group	src/madness/world/stubmpi.h	/^typedef int MPI_Group;$/;"	t
MPI_Group_free	src/madness/world/stubmpi.h	/^inline int MPI_Group_free(MPI_Group *group) {$/;"	f
MPI_Group_incl	src/madness/world/stubmpi.h	/^inline int MPI_Group_incl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup) {$/;"	f
MPI_Group_translate_ranks	src/madness/world/stubmpi.h	/^inline int MPI_Group_translate_ranks(MPI_Group, int, const int [],$/;"	f
MPI_IDENT	src/madness/world/stubmpi.h	41;"	d
MPI_INT	src/madness/world/stubmpi.h	77;"	d
MPI_IN_PLACE	src/madness/world/stubmpi.h	62;"	d
MPI_Info	src/madness/world/stubmpi.h	/^typedef int MPI_Info;$/;"	t
MPI_Init	src/madness/world/stubmpi.h	/^inline int MPI_Init(int *, char ***) { return MPI_SUCCESS; }$/;"	f
MPI_Init_thread	src/madness/world/stubmpi.h	/^inline int MPI_Init_thread(int *, char ***, int, int *provided) { *provided = MADNESS_MPI_THREAD_LEVEL; return MPI_SUCCESS; }$/;"	f
MPI_Initialized	src/madness/world/stubmpi.h	/^inline int MPI_Initialized(int* flag) { *flag = 1; return MPI_SUCCESS; }$/;"	f
MPI_Irecv	src/madness/world/stubmpi.h	/^inline int MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*) { return MPI_ERR_COMM; }$/;"	f
MPI_Isend	src/madness/world/stubmpi.h	/^inline int MPI_Isend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *) { return MPI_ERR_COMM; }$/;"	f
MPI_Issend	src/madness/world/stubmpi.h	/^inline int MPI_Issend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *) { return MPI_ERR_COMM; }$/;"	f
MPI_LAND	src/madness/world/stubmpi.h	95;"	d
MPI_LONG	src/madness/world/stubmpi.h	79;"	d
MPI_LONG_DOUBLE	src/madness/world/stubmpi.h	83;"	d
MPI_LONG_LONG	src/madness/world/stubmpi.h	86;"	d
MPI_LONG_LONG_INT	src/madness/world/stubmpi.h	84;"	d
MPI_LOR	src/madness/world/stubmpi.h	97;"	d
MPI_LXOR	src/madness/world/stubmpi.h	99;"	d
MPI_MAX	src/madness/world/stubmpi.h	91;"	d
MPI_MAXLOC	src/madness/world/stubmpi.h	102;"	d
MPI_MAX_ERROR_STRING	src/madness/world/stubmpi.h	38;"	d
MPI_MIN	src/madness/world/stubmpi.h	92;"	d
MPI_MINLOC	src/madness/world/stubmpi.h	101;"	d
MPI_OP_NULL	src/madness/world/stubmpi.h	48;"	d
MPI_Op	src/madness/world/stubmpi.h	/^typedef int MPI_Op;$/;"	t
MPI_Op_create	src/madness/world/stubmpi.h	/^inline int MPI_Op_create(MPI_User_function *user_fn, int commute, MPI_Op *op) {$/;"	f
MPI_Op_free	src/madness/world/stubmpi.h	/^inline int MPI_Op_free(MPI_Op *op) {$/;"	f
MPI_PROC_NULL	src/madness/world/stubmpi.h	63;"	d
MPI_PROD	src/madness/world/stubmpi.h	94;"	d
MPI_Query_thread	src/madness/world/stubmpi.h	/^inline int MPI_Query_thread(int *provided) { *provided = MADNESS_MPI_THREAD_LEVEL; return MPI_SUCCESS; }$/;"	f
MPI_REPLACE	src/madness/world/stubmpi.h	103;"	d
MPI_REQUEST_NULL	src/madness/world/stubmpi.h	51;"	d
MPI_Recv	src/madness/world/stubmpi.h	/^inline int MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*) { return MPI_ERR_COMM; }$/;"	f
MPI_Reduce	src/madness/world/stubmpi.h	/^inline int MPI_Reduce(void *sendbuf, void *recvbuf, int count, MPI_Datatype, MPI_Op, int, MPI_Comm) {$/;"	f
MPI_Request	src/madness/world/stubmpi.h	/^typedef int MPI_Request;$/;"	t
MPI_SHORT	src/madness/world/stubmpi.h	75;"	d
MPI_SIGNED_CHAR	src/madness/world/stubmpi.h	71;"	d
MPI_SIMILAR	src/madness/world/stubmpi.h	43;"	d
MPI_SOURCE	src/madness/world/stubmpi.h	/^    int MPI_SOURCE;$/;"	m	struct:MPI_Status
MPI_STATUSES_IGNORE	src/madness/world/stubmpi.h	21;"	d
MPI_STATUS_IGNORE	src/madness/world/stubmpi.h	20;"	d
MPI_SUCCESS	src/madness/world/stubmpi.h	33;"	d
MPI_SUM	src/madness/world/stubmpi.h	93;"	d
MPI_Send	src/madness/world/stubmpi.h	/^inline int MPI_Send(void*, int, MPI_Datatype, int, int, MPI_Comm) { return MPI_ERR_COMM; }$/;"	f
MPI_Ssend	src/madness/world/stubmpi.h	/^inline int MPI_Ssend(void*, int, MPI_Datatype, int, int, MPI_Comm) { return MPI_ERR_COMM; }$/;"	f
MPI_Status	src/madness/world/stubmpi.h	/^typedef struct MPI_Status {$/;"	s
MPI_Status	src/madness/world/stubmpi.h	/^} MPI_Status;$/;"	t	typeref:struct:MPI_Status
MPI_TAG	src/madness/world/stubmpi.h	/^    int MPI_TAG;$/;"	m	struct:MPI_Status
MPI_THREAD_FUNNELED	src/madness/world/stubmpi.h	57;"	d
MPI_THREAD_MULTIPLE	src/madness/world/stubmpi.h	59;"	d
MPI_THREAD_SERIALIZED	src/madness/world/stubmpi.h	58;"	d
MPI_THREAD_SINGLE	src/madness/world/stubmpi.h	56;"	d
MPI_THREAD_STRING	src/madness/world/worldmpi.h	71;"	d
MPI_Test	src/madness/world/stubmpi.h	/^inline int MPI_Test(MPI_Request *, int *flag, MPI_Status *) {$/;"	f
MPI_Testany	src/madness/world/stubmpi.h	/^inline int MPI_Testany(int, MPI_Request[], int* index, int *flag, MPI_Status*) {$/;"	f
MPI_Testsome	src/madness/world/stubmpi.h	/^inline int MPI_Testsome(int, MPI_Request*, int *outcount, int*, MPI_Status*) {$/;"	f
MPI_UNDEFINED	src/madness/world/stubmpi.h	25;"	d
MPI_UNEQUAL	src/madness/world/stubmpi.h	44;"	d
MPI_UNSIGNED	src/madness/world/stubmpi.h	78;"	d
MPI_UNSIGNED_CHAR	src/madness/world/stubmpi.h	72;"	d
MPI_UNSIGNED_LONG	src/madness/world/stubmpi.h	80;"	d
MPI_UNSIGNED_LONG_LONG	src/madness/world/stubmpi.h	85;"	d
MPI_UNSIGNED_SHORT	src/madness/world/stubmpi.h	76;"	d
MPI_User_function	src/madness/world/stubmpi.h	/^typedef void (MPI_User_function) ( void * a,$/;"	t
MPI_WCHAR	src/madness/world/stubmpi.h	74;"	d
MPI_Wtime	src/madness/world/stubmpi.h	/^inline double MPI_Wtime() { return madness::wall_time(); }$/;"	f
MPRAIMPLX	src/madness/mra/mra1.cc	33;"	d	file:
MPRAIMPLX	src/madness/mra/mra2.cc	33;"	d	file:
MPRAIMPLX	src/madness/mra/mra3.cc	33;"	d	file:
MPRAIMPLX	src/madness/mra/mra4.cc	33;"	d	file:
MPRAIMPLX	src/madness/mra/mra5.cc	33;"	d	file:
MPRAIMPLX	src/madness/mra/mra6.cc	33;"	d	file:
MR	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    MR,   \/\/ Row of a matrix distribution$/;"	e	enum:elem::DistNS::Dist
MRA_DRIVER_HH	src/examples/compiler/mra-driver.hh	2;"	d
MRComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::MRComm()     const { return matrixRowComm_;      }$/;"	f	class:elem::Grid
MRRank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::MRRank() const { return mpi::Rank(matrixRowComm_); }$/;"	f	class:elem::Grid
MRSize	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::MRSize() const { return size_\/height_; }$/;"	f	class:elem::Grid
MTXMAVX	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^class MTXMAVX(MTXMGen):$/;"	c
MTXMAVX2	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^class MTXMAVX2(MTXMAVX):$/;"	c
MTXMBGP	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^class MTXMBGP(MTXMGen):$/;"	c
MTXMBGQ	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^class MTXMBGQ(MTXMGen):$/;"	c
MTXMGen	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^class MTXMGen:$/;"	c
MTXMSSE	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^class MTXMSSE(MTXMGen):$/;"	c
MTXM_ENTRY	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define MTXM_ENTRY(name) \\$/;"	d
MULTITASK	src/madness/world/thread.cc	445;"	d	file:
MUP_ASSERT	src/madness/external/muParser/muParserDef.h	82;"	d
MUP_ASSERT	src/madness/external/muParser/muParserDef.h	92;"	d
MUP_ASSERT	src/madness/external/muParser/muParserDef.h	96;"	d
MUP_BASETYPE	src/madness/external/muParser/muParserDef.h	45;"	d
MUP_BYTECODE_TYPE	src/madness/external/muParser/muParserDef.h	51;"	d
MUP_DEFINE_FUNC	src/madness/external/muParser/muParserBase.h	131;"	d
MUP_DEFINE_FUNC	src/madness/external/muParser/muParserBase.h	148;"	d
MUP_DEF_H	src/madness/external/muParser/muParserDef.h	26;"	d
MUP_FAIL	src/madness/external/muParser/muParserDef.h	72;"	d
MUP_FAIL	src/madness/external/muParser/muParserDef.h	95;"	d
MUP_STRING_TYPE	src/madness/external/muParser/muParserDef.h	55;"	d
MUP_STRING_TYPE	src/madness/external/muParser/muParserDef.h	66;"	d
MU_PARSER_BASE_H	src/madness/external/muParser/muParserBase.h	26;"	d
MU_PARSER_BYTECODE_H	src/madness/external/muParser/muParserBytecode.h	26;"	d
MU_PARSER_CALLBACK_H	src/madness/external/muParser/muParserCallback.h	27;"	d
MU_PARSER_COMPLEX_H	src/madness/external/muParser/muParserComplex.h	27;"	d
MU_PARSER_DLL_H	src/madness/external/muParser/muParserDLL.h	26;"	d
MU_PARSER_ERROR_H	src/madness/external/muParser/muParserError.h	27;"	d
MU_PARSER_FIXES_H	src/madness/external/muParser/muParserFixes.h	27;"	d
MU_PARSER_H	src/madness/external/muParser/muParser.h	26;"	d
MU_PARSER_INT_H	src/madness/external/muParser/muParserInt.h	27;"	d
MU_PARSER_STACK_H	src/madness/external/muParser/muParserStack.h	27;"	d
MU_PARSER_TEST_H	src/madness/external/muParser/muParserTest.h	27;"	d
MU_PARSER_TOKEN_H	src/madness/external/muParser/muParserToken.h	27;"	d
MU_PARSER_TOKEN_READER_H	src/madness/external/muParser/muParserTokenReader.h	27;"	d
MY_ROOT	src/madness/tensor/mtxmq_bg/Makefile	/^MY_ROOT=.$/;"	m
MY_ROOT	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^MY_ROOT=.$/;"	m
MachineBase	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double MachineBase<double>()$/;"	f	namespace:elem::lapack
MachineBase	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float MachineBase<float>()$/;"	f	namespace:elem::lapack
MachineEpsilon	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double MachineEpsilon<double>()$/;"	f	namespace:elem::lapack
MachineEpsilon	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float MachineEpsilon<float>()$/;"	f	namespace:elem::lapack
MachineOverflowExponent	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double MachineOverflowExponent<double>()$/;"	f	namespace:elem::lapack
MachineOverflowExponent	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float MachineOverflowExponent<float>()$/;"	f	namespace:elem::lapack
MachineOverflowThreshold	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double MachineOverflowThreshold<double>()$/;"	f	namespace:elem::lapack
MachineOverflowThreshold	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float MachineOverflowThreshold<float>()$/;"	f	namespace:elem::lapack
MachinePrecision	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double MachinePrecision<double>()$/;"	f	namespace:elem::lapack
MachinePrecision	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float MachinePrecision<float>()$/;"	f	namespace:elem::lapack
MachineSafeMin	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double MachineSafeMin<double>()$/;"	f	namespace:elem::lapack
MachineSafeMin	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float MachineSafeMin<float>()$/;"	f	namespace:elem::lapack
MachineUnderflowExponent	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double MachineUnderflowExponent<double>()$/;"	f	namespace:elem::lapack
MachineUnderflowExponent	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float MachineUnderflowExponent<float>()$/;"	f	namespace:elem::lapack
MachineUnderflowThreshold	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double MachineUnderflowThreshold<double>()$/;"	f	namespace:elem::lapack
MachineUnderflowThreshold	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float MachineUnderflowThreshold<float>()$/;"	f	namespace:elem::lapack
MadToElemDistCopy	src/madness/tensor/elem.h	/^            MadToElemDistCopy(elem::DistMatrix<T>& d) : d(d) {}$/;"	f	class:madness::detail::MadToElemDistCopy
MadToElemDistCopy	src/madness/tensor/elem.h	/^        class MadToElemDistCopy {$/;"	c	namespace:madness::detail
MadnessException	src/madness/world/madness_exception.h	/^        MadnessException(const char* m, const char *a, int v,$/;"	f	class:madness::MadnessException
MadnessException	src/madness/world/madness_exception.h	/^    class MadnessException : public std::exception {$/;"	c	namespace:madness
MakeAndRegisterTestInfo	src/madness/external/gtest/src/gtest.cc	/^TestInfo* MakeAndRegisterTestInfo($/;"	f	namespace:testing::internal
MakeConnection	src/madness/external/gtest/src/gtest.cc	/^void StreamingListener::SocketWriter::MakeConnection() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
MakeConsistent	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::MakeConsistent( bool includingViewers )$/;"	f	class:elem::AbstractBlockDistMatrix
MakeConsistent	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::MakeConsistent( bool includingViewers )$/;"	f	class:elem::AbstractDistMatrix
MakeDiagonalReal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::MakeDiagonalReal( Int offset )$/;"	f	class:elem::AbstractBlockDistMatrix
MakeDiagonalReal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::MakeDiagonalReal( Int offset )$/;"	f	class:elem::AbstractDistMatrix
MakeDiagonalReal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::MakeDiagonalReal( Int offset )$/;"	f	class:elem::Matrix
MakeEgorov	src/madness/external/elemental/include/elemental/matrices/Egorov.hpp	/^MakeEgorov( BlockDistMatrix<Complex<Real>,U,V>& A, const RealFunctor& phase )$/;"	f	namespace:elem
MakeEgorov	src/madness/external/elemental/include/elemental/matrices/Egorov.hpp	/^MakeEgorov( DistMatrix<Complex<Real>,U,V>& A, const RealFunctor& phase )$/;"	f	namespace:elem
MakeEgorov	src/madness/external/elemental/include/elemental/matrices/Egorov.hpp	/^MakeEgorov( Matrix<Complex<Real>>& A, const RealFunctor& phase )$/;"	f	namespace:elem
MakeExtendedKahan	src/madness/external/elemental/include/elemental/matrices/ExtendedKahan.hpp	/^MakeExtendedKahan( BlockDistMatrix<F,U,V>& A, Base<F> phi, Base<F> mu )$/;"	f	namespace:elem
MakeExtendedKahan	src/madness/external/elemental/include/elemental/matrices/ExtendedKahan.hpp	/^MakeExtendedKahan( DistMatrix<F,U,V>& A, Base<F> phi, Base<F> mu )$/;"	f	namespace:elem
MakeExtendedKahan	src/madness/external/elemental/include/elemental/matrices/ExtendedKahan.hpp	/^MakeExtendedKahan( Matrix<F>& A, Base<F> phi, Base<F> mu )$/;"	f	namespace:elem
MakeFileName	src/madness/external/gtest/src/gtest-filepath.cc	/^FilePath FilePath::MakeFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
MakeForsythe	src/madness/external/elemental/include/elemental/matrices/Forsythe.hpp	/^MakeForsythe( BlockDistMatrix<T,U,V>& J, T alpha, T lambda )$/;"	f	namespace:elem
MakeForsythe	src/madness/external/elemental/include/elemental/matrices/Forsythe.hpp	/^MakeForsythe( DistMatrix<T,U,V>& J, T alpha, T lambda )$/;"	f	namespace:elem
MakeForsythe	src/madness/external/elemental/include/elemental/matrices/Forsythe.hpp	/^MakeForsythe( Matrix<T>& J, T alpha, T lambda )$/;"	f	namespace:elem
MakeFourier	src/madness/external/elemental/include/elemental/matrices/Fourier.hpp	/^MakeFourier( BlockDistMatrix<Complex<Real>,U,V>& A )$/;"	f	namespace:elem
MakeFourier	src/madness/external/elemental/include/elemental/matrices/Fourier.hpp	/^MakeFourier( DistMatrix<Complex<Real>,U,V>& A )$/;"	f	namespace:elem
MakeFourier	src/madness/external/elemental/include/elemental/matrices/Fourier.hpp	/^MakeFourier( Matrix<Complex<Real>>& A )$/;"	f	namespace:elem
MakeGCDMatrix	src/madness/external/elemental/include/elemental/matrices/GCDMatrix.hpp	/^MakeGCDMatrix( BlockDistMatrix<T,U,V>& G )$/;"	f	namespace:elem
MakeGCDMatrix	src/madness/external/elemental/include/elemental/matrices/GCDMatrix.hpp	/^MakeGCDMatrix( DistMatrix<T,U,V>& G )$/;"	f	namespace:elem
MakeGCDMatrix	src/madness/external/elemental/include/elemental/matrices/GCDMatrix.hpp	/^MakeGCDMatrix( Matrix<T>& G )$/;"	f	namespace:elem
MakeGKS	src/madness/external/elemental/include/elemental/matrices/GKS.hpp	/^MakeGKS( BlockDistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MakeGKS	src/madness/external/elemental/include/elemental/matrices/GKS.hpp	/^MakeGKS( DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MakeGKS	src/madness/external/elemental/include/elemental/matrices/GKS.hpp	/^MakeGKS( Matrix<F>& A )$/;"	f	namespace:elem
MakeGaussian	src/madness/external/elemental/include/elemental/matrices/Gaussian.hpp	/^MakeGaussian( BlockDistMatrix<T,U,V>& A, T mean=0, Base<T> stddev=1 )$/;"	f	namespace:elem
MakeGaussian	src/madness/external/elemental/include/elemental/matrices/Gaussian.hpp	/^MakeGaussian( DistMatrix<T,U,V>& A, T mean=0, Base<T> stddev=1 )$/;"	f	namespace:elem
MakeGaussian	src/madness/external/elemental/include/elemental/matrices/Gaussian.hpp	/^MakeGaussian( Matrix<T>& A, T mean=0, Base<T> stddev=1 )$/;"	f	namespace:elem
MakeHermitian	src/madness/external/elemental/include/elemental/blas-like/level1/MakeHermitian.hpp	/^MakeHermitian( UpperOrLower uplo, DistMatrix<T>& A )$/;"	f	namespace:elem
MakeHermitian	src/madness/external/elemental/include/elemental/blas-like/level1/MakeHermitian.hpp	/^MakeHermitian( UpperOrLower uplo, Matrix<T>& A )$/;"	f	namespace:elem
MakeHermitianUniformSpectrum	src/madness/external/elemental/include/elemental/matrices/HermitianUniformSpectrum.hpp	/^MakeHermitianUniformSpectrum$/;"	f	namespace:elem
MakeHermitianUniformSpectrum	src/madness/external/elemental/include/elemental/matrices/HermitianUniformSpectrum.hpp	/^MakeHermitianUniformSpectrum( Matrix<F>& A, Base<F> lower=0, Base<F> upper=1 )$/;"	f	namespace:elem
MakeHilbert	src/madness/external/elemental/include/elemental/matrices/Hilbert.hpp	/^MakeHilbert( BlockDistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MakeHilbert	src/madness/external/elemental/include/elemental/matrices/Hilbert.hpp	/^MakeHilbert( DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MakeHilbert	src/madness/external/elemental/include/elemental/matrices/Hilbert.hpp	/^MakeHilbert( Matrix<F>& A )$/;"	f	namespace:elem
MakeIdentity	src/madness/external/elemental/include/elemental/matrices/Identity.hpp	/^MakeIdentity( BlockDistMatrix<T,U,V>& I )$/;"	f	namespace:elem
MakeIdentity	src/madness/external/elemental/include/elemental/matrices/Identity.hpp	/^MakeIdentity( DistMatrix<T,U,V>& I )$/;"	f	namespace:elem
MakeIdentity	src/madness/external/elemental/include/elemental/matrices/Identity.hpp	/^MakeIdentity( Matrix<T>& I )$/;"	f	namespace:elem
MakeJordan	src/madness/external/elemental/include/elemental/matrices/Jordan.hpp	/^MakeJordan( BlockDistMatrix<T,U,V>& J, T lambda )$/;"	f	namespace:elem
MakeJordan	src/madness/external/elemental/include/elemental/matrices/Jordan.hpp	/^MakeJordan( DistMatrix<T,U,V>& J, T lambda )$/;"	f	namespace:elem
MakeJordan	src/madness/external/elemental/include/elemental/matrices/Jordan.hpp	/^MakeJordan( Matrix<T>& J, T lambda )$/;"	f	namespace:elem
MakeKahan	src/madness/external/elemental/include/elemental/matrices/Kahan.hpp	/^MakeKahan( BlockDistMatrix<F,U,V>& A, F phi )$/;"	f	namespace:elem
MakeKahan	src/madness/external/elemental/include/elemental/matrices/Kahan.hpp	/^MakeKahan( DistMatrix<F,U,V>& A, F phi )$/;"	f	namespace:elem
MakeKahan	src/madness/external/elemental/include/elemental/matrices/Kahan.hpp	/^MakeKahan( Matrix<F>& A, F phi )$/;"	f	namespace:elem
MakeLegendre	src/madness/external/elemental/include/elemental/matrices/Legendre.hpp	/^MakeLegendre( BlockDistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MakeLegendre	src/madness/external/elemental/include/elemental/matrices/Legendre.hpp	/^MakeLegendre( DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MakeLegendre	src/madness/external/elemental/include/elemental/matrices/Legendre.hpp	/^MakeLegendre( Matrix<F>& A )$/;"	f	namespace:elem
MakeLocalReal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::MakeLocalReal( Int iLoc, Int jLoc )$/;"	f	class:elem::AbstractBlockDistMatrix
MakeLocalReal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::MakeLocalReal( Int iLoc, Int jLoc )$/;"	f	class:elem::AbstractDistMatrix
MakeLocalSubmatrixReal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::MakeLocalSubmatrixReal$/;"	f	class:elem::AbstractBlockDistMatrix
MakeLocalSubmatrixReal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::MakeLocalSubmatrixReal$/;"	f	class:elem::AbstractDistMatrix
MakeNormalUniformSpectrum	src/madness/external/elemental/include/elemental/matrices/NormalUniformSpectrum.hpp	/^MakeNormalUniformSpectrum$/;"	f	namespace:elem
MakeOneTwoOne	src/madness/external/elemental/include/elemental/matrices/OneTwoOne.hpp	/^MakeOneTwoOne( BlockDistMatrix<T,U,V>& A )$/;"	f	namespace:elem
MakeOneTwoOne	src/madness/external/elemental/include/elemental/matrices/OneTwoOne.hpp	/^MakeOneTwoOne( DistMatrix<T,U,V>& A )$/;"	f	namespace:elem
MakeOneTwoOne	src/madness/external/elemental/include/elemental/matrices/OneTwoOne.hpp	/^MakeOneTwoOne( Matrix<T>& A )$/;"	f	namespace:elem
MakeOnes	src/madness/external/elemental/include/elemental/matrices/Ones.hpp	/^MakeOnes( BlockDistMatrix<T,U,V>& A )$/;"	f	namespace:elem
MakeOnes	src/madness/external/elemental/include/elemental/matrices/Ones.hpp	/^MakeOnes( DistMatrix<T,U,V>& A )$/;"	f	namespace:elem
MakeOnes	src/madness/external/elemental/include/elemental/matrices/Ones.hpp	/^MakeOnes( Matrix<T>& A )$/;"	f	namespace:elem
MakeQuasiTriangular	src/madness/external/elemental/tests/blas-like/MultiShiftQuasiTrsm.cpp	/^void MakeQuasiTriangular( UpperOrLower uplo, DistMatrix<F>& A )$/;"	f
MakeQuasiTriangular	src/madness/external/elemental/tests/blas-like/QuasiTrsm.cpp	/^void MakeQuasiTriangular( UpperOrLower uplo, DistMatrix<F>& A )$/;"	f
MakeReal	src/madness/external/elemental/include/elemental/blas-like/level1/MakeReal.hpp	/^MakeReal( DistMatrix<T,U,V>& A )$/;"	f	namespace:elem
MakeReal	src/madness/external/elemental/include/elemental/blas-like/level1/MakeReal.hpp	/^MakeReal( Matrix<T>& A )$/;"	f	namespace:elem
MakeReal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::MakeReal( Int i, Int j )$/;"	f	class:elem::AbstractBlockDistMatrix
MakeReal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::MakeReal( Int i, Int j )$/;"	f	class:elem::AbstractDistMatrix
MakeReal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::MakeReal( Int i, Int j )$/;"	f	class:elem::Matrix
MakeSizeConsistent	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::MakeSizeConsistent( bool includingViewers )$/;"	f	class:elem::AbstractBlockDistMatrix
MakeSizeConsistent	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::MakeSizeConsistent( bool includingViewers )$/;"	f	class:elem::AbstractDistMatrix
MakeSubmatrixReal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::MakeSubmatrixReal$/;"	f	class:elem::AbstractBlockDistMatrix
MakeSubmatrixReal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::MakeSubmatrixReal$/;"	f	class:elem::AbstractDistMatrix
MakeSubmatrixReal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::MakeSubmatrixReal$/;"	f	class:elem::Matrix
MakeSymmetric	src/madness/external/elemental/include/elemental/blas-like/level1/MakeSymmetric.hpp	/^MakeSymmetric( UpperOrLower uplo, DistMatrix<T>& A, bool conjugate=false )$/;"	f	namespace:elem
MakeSymmetric	src/madness/external/elemental/include/elemental/blas-like/level1/MakeSymmetric.hpp	/^MakeSymmetric( UpperOrLower uplo, Matrix<T>& A, bool conjugate=false )$/;"	f	namespace:elem
MakeTrapezoidal	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTrapezoidal.hpp	/^MakeTrapezoidal( UpperOrLower uplo, BlockDistMatrix<T,U,V>& A, Int offset=0 )$/;"	f	namespace:elem
MakeTrapezoidal	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTrapezoidal.hpp	/^MakeTrapezoidal( UpperOrLower uplo, DistMatrix<T,U,V>& A, Int offset=0 )$/;"	f	namespace:elem
MakeTrapezoidal	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTrapezoidal.hpp	/^MakeTrapezoidal( UpperOrLower uplo, Matrix<T>& A, Int offset=0 )$/;"	f	namespace:elem
MakeTriangular	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTriangular.hpp	/^MakeTriangular( UpperOrLower uplo, BlockDistMatrix<T,U,V>& A )$/;"	f	namespace:elem
MakeTriangular	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTriangular.hpp	/^MakeTriangular( UpperOrLower uplo, DistMatrix<T,U,V>& A )$/;"	f	namespace:elem
MakeTriangular	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTriangular.hpp	/^MakeTriangular( UpperOrLower uplo, Matrix<T>& A )$/;"	f	namespace:elem
MakeUniform	src/madness/external/elemental/include/elemental/matrices/Uniform.hpp	/^MakeUniform( BlockDistMatrix<T,U,V>& A, T center=0, Base<T> radius=1 )$/;"	f	namespace:elem
MakeUniform	src/madness/external/elemental/include/elemental/matrices/Uniform.hpp	/^MakeUniform( DistMatrix<T,U,V>& A, T center=0, Base<T> radius=1 )$/;"	f	namespace:elem
MakeUniform	src/madness/external/elemental/include/elemental/matrices/Uniform.hpp	/^MakeUniform( Matrix<T>& A, T center=0, Base<T> radius=1 )$/;"	f	namespace:elem
MakeWalsh	src/madness/external/elemental/include/elemental/matrices/Walsh.hpp	/^MakeWalsh( DistMatrix<T,U,V>& A, Int k, bool binary=false )$/;"	f	namespace:elem
MakeWalsh	src/madness/external/elemental/include/elemental/matrices/Walsh.hpp	/^MakeWalsh( Matrix<T>& A, Int k, bool binary=false )$/;"	f	namespace:elem
MakeZeros	src/madness/external/elemental/include/elemental/matrices/Zeros.hpp	/^MakeZeros( BlockDistMatrix<T,U,V>& A )$/;"	f	namespace:elem
MakeZeros	src/madness/external/elemental/include/elemental/matrices/Zeros.hpp	/^MakeZeros( DistMatrix<T,U,V>& A )$/;"	f	namespace:elem
MakeZeros	src/madness/external/elemental/include/elemental/matrices/Zeros.hpp	/^MakeZeros( Matrix<T>& A )$/;"	f	namespace:elem
Mary	src/madness/world/test_world.cc	/^    Mary() : val(0) {}$/;"	f	class:Mary
Mary	src/madness/world/test_world.cc	/^class Mary {$/;"	c	file:
Mask	src/apps/interior_bc/test_problems.h	/^enum Mask { LLRV, Gaussian };$/;"	g
MatchRegexAnywhere	src/madness/external/gtest/src/gtest-port.cc	/^bool MatchRegexAnywhere(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRegexAtHead	src/madness/external/gtest/src/gtest-port.cc	/^bool MatchRegexAtHead(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRepetitionAndRegexAtHead	src/madness/external/gtest/src/gtest-port.cc	/^bool MatchRepetitionAndRegexAtHead($/;"	f	namespace:testing::internal
MatchesFilter	src/madness/external/gtest/src/gtest.cc	/^bool UnitTestOptions::MatchesFilter($/;"	f	class:testing::internal::UnitTestOptions
Matrix	src/madness/external/elemental/include/elemental/core/Matrix.hpp	/^class Matrix$/;"	c	namespace:elem
Matrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Matrix() { return matrix_; }$/;"	f	class:elem::AbstractBlockDistMatrix
Matrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Matrix() { return matrix_; }$/;"	f	class:elem::AbstractDistMatrix
Matrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Matrix$/;"	f	class:elem::Matrix
Matrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Matrix( Int height, Int width, bool fixed )$/;"	f	class:elem::Matrix
Matrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Matrix( bool fixed )$/;"	f	class:elem::Matrix
Matrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Matrix( const Matrix<T>& A )$/;"	f	class:elem::Matrix
MatrixClass	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum MatrixClass$/;"	g	namespace:elem::MatrixClassNS
MatrixClassNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace MatrixClassNS {$/;"	n	namespace:elem
MatrixInnerTask	src/madness/mra/vmra1.h	/^        MatrixInnerTask(const Tensor<TENSOR_RESULT_TYPE(T,R)>& result,$/;"	f	struct:madness::MatrixInnerTask
MatrixInnerTask	src/madness/mra/vmra1.h	/^    struct MatrixInnerTask : public TaskInterface {$/;"	s	namespace:madness
MatrixMarket	src/madness/external/elemental/include/elemental/io/Read/MatrixMarket.hpp	/^MatrixMarket( BlockDistMatrix<T,U,V>& A, const std::string filename )$/;"	f	namespace:elem::read
MatrixMarket	src/madness/external/elemental/include/elemental/io/Read/MatrixMarket.hpp	/^MatrixMarket( DistMatrix<T,U,V>& A, const std::string filename )$/;"	f	namespace:elem::read
MatrixMarket	src/madness/external/elemental/include/elemental/io/Read/MatrixMarket.hpp	/^MatrixMarket( Matrix<T>& A, const std::string filename )$/;"	f	namespace:elem::read
MatrixMarket	src/madness/external/elemental/include/elemental/io/Write/MatrixMarket.hpp	/^MatrixMarket( const Matrix<T>& A, std::string basename="matrix" )$/;"	f	namespace:elem::write
Max	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	/^Max( const DistMatrix<Real,U,V>& A )$/;"	f	namespace:elem
Max	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	/^Max( const Matrix<Real>& A )$/;"	f	namespace:elem
Max	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^inline Int Max( Int m, Int n )$/;"	f	namespace:elem
Max	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^inline T Max( T m, T n )$/;"	f	namespace:elem
Max	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^inline double FloatingPoint<double>::Max() { return DBL_MAX; }$/;"	f	class:testing::internal::FloatingPoint
Max	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^inline float FloatingPoint<float>::Max() { return FLT_MAX; }$/;"	f	class:testing::internal::FloatingPoint
Max	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Max(const value_type *a_afArg, int a_iArgc)$/;"	f	class:mu::Parser
Max	src/madness/external/muParser/muParserTest.h	/^  	    static value_type Max(value_type a_fVal1, value_type a_fVal2) { return (a_fVal1>a_fVal2) ? a_fVal1 : a_fVal2; }$/;"	f	class:mu::Test::ParserTester
MaxAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	/^MaxAbs( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MaxAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	/^MaxAbs( const Matrix<F>& A )$/;"	f	namespace:elem
MaxBlockedLength	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int MaxBlockedLength( Int n, Int bsize, Int cut, Int stride )$/;"	f	namespace:elem
MaxBlockedLength_	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int MaxBlockedLength_( Int n, Int bsize, Int cut, Int stride )$/;"	f	namespace:elem
MaxCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Max.hpp	/^MaxCondition( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MaxCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Max.hpp	/^MaxCondition( const Matrix<F>& A )$/;"	f	namespace:elem
MaxImagWindowVal	src/madness/external/elemental/src/core/global.cpp	/^double MaxImagWindowVal()$/;"	f	namespace:elem
MaxLength	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int MaxLength( Int n, Int stride )$/;"	f	namespace:elem
MaxLength_	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int MaxLength_( Int n, Int stride )$/;"	f	namespace:elem
MaxLocFunc	src/madness/external/elemental/src/core/mpi_register.cpp	/^MaxLocFunc( void* inVoid, void* outVoid, int* length, Datatype* datatype )$/;"	f	namespace:elem::mpi
MaxLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MaxLocOp<Int>()$/;"	f	namespace:elem::mpi
MaxLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MaxLocOp<double>()$/;"	f	namespace:elem::mpi
MaxLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MaxLocOp<float>()$/;"	f	namespace:elem::mpi
MaxLocPairFunc	src/madness/external/elemental/src/core/mpi_register.cpp	/^MaxLocPairFunc( void* inVoid, void* outVoid, int* length, Datatype* datatype )$/;"	f	namespace:elem::mpi
MaxLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MaxLocPairOp<Int>()$/;"	f	namespace:elem::mpi
MaxLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MaxLocPairOp<double>()$/;"	f	namespace:elem::mpi
MaxLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MaxLocPairOp<float>()$/;"	f	namespace:elem::mpi
MaxNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Max.hpp	/^MaxNorm( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MaxNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Max.hpp	/^MaxNorm( const Matrix<F>& A )$/;"	f	namespace:elem
MaxRealWindowVal	src/madness/external/elemental/src/core/global.cpp	/^double MaxRealWindowVal()$/;"	f	namespace:elem
Median	src/madness/external/elemental/include/elemental/lapack-like/util/Median.hpp	/^Median( const DistMatrix<Real,U,V>& x )$/;"	f	namespace:elem
Median	src/madness/external/elemental/include/elemental/lapack-like/util/Median.hpp	/^Median( const Matrix<Real>& x )$/;"	f	namespace:elem
MemCopy	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^MemCopy( T* dest, const T* source, std::size_t numEntries )$/;"	f	namespace:elem
MemFuncWrapper	src/madness/world/mem_func_wrapper.h	/^            MemFuncWrapper()$/;"	f	class:madness::detail::MemFuncWrapper
MemFuncWrapper	src/madness/world/mem_func_wrapper.h	/^            MemFuncWrapper(const MemFuncWrapper_& other) :$/;"	f	class:madness::detail::MemFuncWrapper
MemFuncWrapper	src/madness/world/mem_func_wrapper.h	/^            MemFuncWrapper(ptrT ptr, memfnT memfn) :$/;"	f	class:madness::detail::MemFuncWrapper
MemFuncWrapper	src/madness/world/mem_func_wrapper.h	/^        class MemFuncWrapper {$/;"	c	namespace:madness::detail
MemFuncWrapper	src/madness/world/mem_func_wrapper.h	/^        class MemFuncWrapper<ptrT, memfnT, void> {$/;"	c	namespace:madness::detail
MemFuncWrapper_	src/madness/world/mem_func_wrapper.h	/^            typedef MemFuncWrapper<ptrT, memfnT, void> MemFuncWrapper_;$/;"	t	class:madness::detail::MemFuncWrapper
MemInfo	src/apps/chem/PNOStructures.h	/^	struct MemInfo{$/;"	s	struct:madness::PNOPairs
MemSwap	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^MemSwap( T* a, T* b, T* temp, std::size_t numEntries )$/;"	f	namespace:elem
MemZero	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^MemZero( T* buffer, std::size_t numEntries )$/;"	f	namespace:elem
Member	src/madness/world/test_ar.cc	/^struct Member {$/;"	s	namespace:__anon8	file:
MemberFuncPtr	src/apps/nick/wavef.h	/^        MemberFuncPtr(ScatteringWF* obj) : obj(obj) {}$/;"	f	struct:ScatteringWF::MemberFuncPtr
MemberFuncPtr	src/apps/nick/wavef.h	/^    struct MemberFuncPtr {$/;"	s	class:ScatteringWF
Memory	src/madness/external/elemental/include/elemental/core/Memory.hpp	/^class Memory$/;"	c	namespace:elem
Memory	src/madness/external/elemental/src/core/Memory.cpp	/^Memory<G>::Memory( Memory<G>&& mem )$/;"	f	class:elem::Memory
Memory	src/madness/external/elemental/src/core/Memory.cpp	/^Memory<G>::Memory( std::size_t size )$/;"	f	class:elem::Memory
Memory	src/madness/external/elemental/src/core/Memory.cpp	/^Memory<G>::Memory()$/;"	f	class:elem::Memory
MemoryBarrier	src/madness/world/bgq_atomics.h	/^__INLINE__ void MemoryBarrier(void)$/;"	f
MemorySize	src/madness/external/elemental/src/core/Matrix.cpp	/^Int Matrix<T>::MemorySize() const { return memory_.Size(); }$/;"	f	class:elem::Matrix
Message	src/madness/external/gtest/include/gtest/gtest-message.h	/^  Message(const Message& msg) : ss_(new ::std::stringstream) {  \/\/ NOLINT$/;"	f	class:testing::Message
Message	src/madness/external/gtest/include/gtest/gtest-message.h	/^  explicit Message(const char* str) : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	src/madness/external/gtest/include/gtest/gtest-message.h	/^class GTEST_API_ Message {$/;"	c	namespace:testing
Message	src/madness/external/gtest/src/gtest.cc	/^Message::Message() : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Milli	src/madness/external/muParser/muParserTest.h	/^	      static value_type Milli(value_type v) { return v\/(value_type)1e3; }$/;"	f	class:mu::Test::ParserTester
Min	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	/^Min( const DistMatrix<Real,U,V>& A )$/;"	f	namespace:elem
Min	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	/^Min( const Matrix<Real>& A )$/;"	f	namespace:elem
Min	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^inline Int Min( Int m, Int n )$/;"	f	namespace:elem
Min	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^inline T Min( T m, T n )$/;"	f	namespace:elem
Min	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Min(const value_type *a_afArg, int a_iArgc)$/;"	f	class:mu::Parser
Min	src/madness/external/muParser/muParserTest.h	/^        static value_type Min(value_type a_fVal1, value_type a_fVal2) { return (a_fVal1<a_fVal2) ? a_fVal1 : a_fVal2; }$/;"	f	class:mu::Test::ParserTester
MinAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	/^MinAbs( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
MinAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	/^MinAbs( const Matrix<F>& A )$/;"	f	namespace:elem
MinIJ	src/madness/external/elemental/include/elemental/matrices/MinIJ.hpp	/^MinIJ( BlockDistMatrix<T,U,V>& M, Int n )$/;"	f	namespace:elem
MinIJ	src/madness/external/elemental/include/elemental/matrices/MinIJ.hpp	/^MinIJ( DistMatrix<T,U,V>& M, Int n )$/;"	f	namespace:elem
MinIJ	src/madness/external/elemental/include/elemental/matrices/MinIJ.hpp	/^MinIJ( Matrix<T>& M, Int n )$/;"	f	namespace:elem
MinImagWindowVal	src/madness/external/elemental/src/core/global.cpp	/^double MinImagWindowVal()$/;"	f	namespace:elem
MinLocFunc	src/madness/external/elemental/src/core/mpi_register.cpp	/^MinLocFunc( void* inVoid, void* outVoid, int* length, Datatype* datatype )$/;"	f	namespace:elem::mpi
MinLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MinLocOp<Int>()$/;"	f	namespace:elem::mpi
MinLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MinLocOp<double>()$/;"	f	namespace:elem::mpi
MinLocOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MinLocOp<float>()$/;"	f	namespace:elem::mpi
MinLocPairFunc	src/madness/external/elemental/src/core/mpi_register.cpp	/^MinLocPairFunc( void* inVoid, void* outVoid, int* length, Datatype* datatype )$/;"	f	namespace:elem::mpi
MinLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MinLocPairOp<Int>()$/;"	f	namespace:elem::mpi
MinLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MinLocPairOp<double>()$/;"	f	namespace:elem::mpi
MinLocPairOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^Op MinLocPairOp<float>()$/;"	f	namespace:elem::mpi
MinRealWindowVal	src/madness/external/elemental/src/core/global.cpp	/^double MinRealWindowVal()$/;"	f	namespace:elem
MiniDFT	src/apps/moldft/preal.cc	/^    MiniDFT(double              thresh,$/;"	f	class:MiniDFT
MiniDFT	src/apps/moldft/preal.cc	/^class MiniDFT {$/;"	c	file:
Miscellaneous misc h	doc/Latex/api.tex	/^\\subsubsection{Miscellaneous (misc.h)}$/;"	b
Mod	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int Mod( Int a, Int b )$/;"	f	namespace:elem
Mod_	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int Mod_( Int a, Int b )$/;"	f	namespace:elem
Mode 0 the default	doc/Latex/implementation.tex	/^\\subsubsection[Mode 0 {}- the default]{\\rmfamily Mode 0 - the default}$/;"	b
Mode 1	doc/Latex/implementation.tex	/^\\subsubsection{Mode 1}$/;"	b
MolOpt	src/apps/chem/molopt.h	/^        MolOpt(int maxiter=20,$/;"	f	class:madness::MolOpt
MolOpt	src/apps/chem/molopt.h	/^    class MolOpt {$/;"	c	namespace:madness
MolecularCorePotentialFunctor	src/apps/chem/potentialmanager.h	/^    MolecularCorePotentialFunctor(const Molecule& molecule)$/;"	f	class:madness::MolecularCorePotentialFunctor
MolecularCorePotentialFunctor	src/apps/chem/potentialmanager.h	/^class MolecularCorePotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
MolecularCorePotentialFunctor	src/apps/polar/potentialmanager.h	/^    MolecularCorePotentialFunctor(const Molecule& molecule)$/;"	f	class:MolecularCorePotentialFunctor
MolecularCorePotentialFunctor	src/apps/polar/potentialmanager.h	/^class MolecularCorePotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
MolecularDerivativeFunctor	src/apps/chem/SCF.h	/^	MolecularDerivativeFunctor(const Molecule& molecule, int atom, int axis)$/;"	f	class:madness::MolecularDerivativeFunctor
MolecularDerivativeFunctor	src/apps/chem/SCF.h	/^class MolecularDerivativeFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
MolecularDerivativeFunctor	src/apps/polar/moldft.cc	/^    MolecularDerivativeFunctor(const Molecule &molecule, int atom, int axis)$/;"	f	class:MolecularDerivativeFunctor
MolecularDerivativeFunctor	src/apps/polar/moldft.cc	/^class MolecularDerivativeFunctor : public FunctionFunctorInterface<double, 3>$/;"	c	file:
MolecularEnergy	src/apps/chem/SCF.h	/^	MolecularEnergy(World& world, SCF& calc)$/;"	f	class:madness::MolecularEnergy
MolecularEnergy	src/apps/chem/SCF.h	/^class MolecularEnergy : public OptimizationTargetInterface {$/;"	c	namespace:madness
MolecularEnergy	src/apps/polar/moldft.cc	/^    MolecularEnergy(World &world, Calculation &calc)$/;"	f	class:MolecularEnergy
MolecularEnergy	src/apps/polar/moldft.cc	/^class MolecularEnergy : public OptimizationTargetInterface$/;"	c	file:
MolecularEntity	src/apps/hf/mentity.cc	/^MolecularEntity::MolecularEntity(const std::string& filename, bool fractional = false) {$/;"	f	class:MolecularEntity
MolecularEntity	src/apps/hf/mentity.h	/^    MolecularEntity() : atoms() {};$/;"	f	class:MolecularEntity
MolecularEntity	src/apps/hf/mentity.h	/^class MolecularEntity {$/;"	c
MolecularGuessDensityFunctor	src/apps/chem/SCF.h	/^	MolecularGuessDensityFunctor(const Molecule& molecule, const AtomicBasisSet& aobasis)$/;"	f	class:madness::MolecularGuessDensityFunctor
MolecularGuessDensityFunctor	src/apps/chem/SCF.h	/^class MolecularGuessDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
MolecularGuessDensityFunctor	src/apps/moldft/preal.cc	/^    MolecularGuessDensityFunctor(const Molecule& molecule, const AtomicBasisSet& aobasis)$/;"	f	class:MolecularGuessDensityFunctor
MolecularGuessDensityFunctor	src/apps/moldft/preal.cc	/^class MolecularGuessDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
MolecularGuessDensityFunctor	src/apps/moldft/testperiodic.cc	/^    MolecularGuessDensityFunctor(const Molecule& molecule, const AtomicBasisSet& aobasis)$/;"	f	class:MolecularGuessDensityFunctor
MolecularGuessDensityFunctor	src/apps/moldft/testperiodic.cc	/^class MolecularGuessDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
MolecularGuessDensityFunctor	src/apps/polar/moldft.cc	/^    MolecularGuessDensityFunctor(const Molecule &molecule, const AtomicBasisSet &aobasis)$/;"	f	class:MolecularGuessDensityFunctor
MolecularGuessDensityFunctor	src/apps/polar/moldft.cc	/^class MolecularGuessDensityFunctor : public FunctionFunctorInterface<double, 3>$/;"	c	file:
MolecularGuessDensityFunctor	src/apps/polar/preal.cc	/^    MolecularGuessDensityFunctor(const Molecule& molecule, const AtomicBasisSet& aobasis)$/;"	f	class:MolecularGuessDensityFunctor
MolecularGuessDensityFunctor	src/apps/polar/preal.cc	/^class MolecularGuessDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
MolecularGuessDensityFunctor	src/apps/polar/testperiodic.cc	/^    MolecularGuessDensityFunctor(const Molecule& molecule, const AtomicBasisSet& aobasis)$/;"	f	class:MolecularGuessDensityFunctor
MolecularGuessDensityFunctor	src/apps/polar/testperiodic.cc	/^class MolecularGuessDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
MolecularMaskBase	src/examples/molecularmask.h	/^    MolecularMaskBase(double sigma, $/;"	f	class:MolecularMaskBase
MolecularMaskBase	src/examples/molecularmask.h	/^class MolecularMaskBase {$/;"	c
MolecularNuclearChargeDensityFunctor	src/apps/hf/electronicstructureapp.h	/^    MolecularNuclearChargeDensityFunctor(const MolecularEntity& mentity, const double& R,$/;"	f	class:MolecularNuclearChargeDensityFunctor
MolecularNuclearChargeDensityFunctor	src/apps/hf/electronicstructureapp.h	/^class MolecularNuclearChargeDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
MolecularNuclearChargeDensityFunctor	src/apps/hf/ewald.cc	/^    MolecularNuclearChargeDensityFunctor(const MolecularEntity& mentity, const double& R,$/;"	f	class:MolecularNuclearChargeDensityFunctor
MolecularNuclearChargeDensityFunctor	src/apps/hf/ewald.cc	/^class MolecularNuclearChargeDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
MolecularNuclearPotentialFunctor2	src/apps/hf/ewald.cc	/^  MolecularNuclearPotentialFunctor2(World& world, const MolecularEntity& mentity,$/;"	f	class:MolecularNuclearPotentialFunctor2
MolecularNuclearPotentialFunctor2	src/apps/hf/ewald.cc	/^class MolecularNuclearPotentialFunctor2 : public FunctionFunctorInterface<double,3> {$/;"	c	file:
MolecularOptimizationParameters	src/apps/chem/molecular_optimizer.h	/^	MolecularOptimizationParameters(World& world) {$/;"	f	class:madness::MolecularOptimizationParameters
MolecularOptimizationParameters	src/apps/chem/molecular_optimizer.h	/^class MolecularOptimizationParameters : public QCCalculationParametersBase {$/;"	c	namespace:madness
MolecularOptimizationTargetInterface	src/apps/chem/molecular_optimizer.h	/^struct MolecularOptimizationTargetInterface : public OptimizationTargetInterface {$/;"	s	namespace:madness
MolecularOptimizer	src/apps/chem/molecular_optimizer.h	/^    MolecularOptimizer(World& world,$/;"	f	class:madness::MolecularOptimizer
MolecularOptimizer	src/apps/chem/molecular_optimizer.h	/^class MolecularOptimizer : public OptimizerInterface {$/;"	c	namespace:madness
MolecularOrbitals	src/apps/chem/MolecularOrbitals.h	/^	MolecularOrbitals() {}$/;"	f	class:madness::MolecularOrbitals
MolecularOrbitals	src/apps/chem/MolecularOrbitals.h	/^	MolecularOrbitals(const std::vector<Function<T,NDIM> >& mo, const Tensor<double>& eps,$/;"	f	class:madness::MolecularOrbitals
MolecularOrbitals	src/apps/chem/MolecularOrbitals.h	/^class MolecularOrbitals {$/;"	c	namespace:madness
MolecularPotential	src/examples/gygi_soltion.cc	/^  realfunc MolecularPotential()const {$/;"	f	class:GygiPot
MolecularPotentialFunctor	src/apps/chem/potentialmanager.h	/^    MolecularPotentialFunctor(const Molecule& molecule)$/;"	f	class:madness::MolecularPotentialFunctor
MolecularPotentialFunctor	src/apps/chem/potentialmanager.h	/^class MolecularPotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
MolecularPotentialFunctor	src/apps/hf/electronicstructureapp.h	/^    MolecularPotentialFunctor(const MolecularEntity& mentity)$/;"	f	class:MolecularPotentialFunctor
MolecularPotentialFunctor	src/apps/hf/electronicstructureapp.h	/^class MolecularPotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
MolecularPotentialFunctor	src/apps/moldft/preal.cc	/^    MolecularPotentialFunctor(const Molecule& molecule)$/;"	f	class:MolecularPotentialFunctor
MolecularPotentialFunctor	src/apps/moldft/preal.cc	/^class MolecularPotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
MolecularPotentialFunctor	src/apps/polar/potentialmanager.h	/^    MolecularPotentialFunctor(const Molecule& molecule)$/;"	f	class:MolecularPotentialFunctor
MolecularPotentialFunctor	src/apps/polar/potentialmanager.h	/^class MolecularPotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
MolecularPotentialFunctor	src/apps/polar/preal.cc	/^    MolecularPotentialFunctor(const Molecule& molecule)$/;"	f	class:MolecularPotentialFunctor
MolecularPotentialFunctor	src/apps/polar/preal.cc	/^class MolecularPotentialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
MolecularSecondDerivativeFunctor	src/apps/chem/SCF.h	/^	MolecularSecondDerivativeFunctor(const Molecule& molecule, int atom,$/;"	f	class:madness::MolecularSecondDerivativeFunctor
MolecularSecondDerivativeFunctor	src/apps/chem/SCF.h	/^class MolecularSecondDerivativeFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
MolecularSurface	src/examples/molecularmask.h	/^    MolecularSurface(double sigma, $/;"	f	class:MolecularSurface
MolecularSurface	src/examples/molecularmask.h	/^class MolecularSurface : private MolecularMaskBase$/;"	c
MolecularVolumeComplementMask	src/examples/molecularmask.h	/^    MolecularVolumeComplementMask(double sigma, $/;"	f	class:MolecularVolumeComplementMask
MolecularVolumeComplementMask	src/examples/molecularmask.h	/^class MolecularVolumeComplementMask : private MolecularMaskBase$/;"	c
MolecularVolumeExponentialSwitch	src/examples/molecularmask.h	/^    MolecularVolumeExponentialSwitch(double sigma, $/;"	f	class:MolecularVolumeExponentialSwitch
MolecularVolumeExponentialSwitch	src/examples/molecularmask.h	/^class MolecularVolumeExponentialSwitch : public madness::FunctionFunctorInterface<double,3> {$/;"	c
MolecularVolumeExponentialSwitchLogGrad	src/examples/molecularmask.h	/^    MolecularVolumeExponentialSwitchLogGrad(double sigma, $/;"	f	class:MolecularVolumeExponentialSwitchLogGrad
MolecularVolumeExponentialSwitchLogGrad	src/examples/molecularmask.h	/^class MolecularVolumeExponentialSwitchLogGrad : public madness::FunctionFunctorInterface<double,3> {$/;"	c
MolecularVolumeExponentialSwitchReciprocal	src/examples/molecularmask.h	/^    MolecularVolumeExponentialSwitchReciprocal(double sigma, $/;"	f	class:MolecularVolumeExponentialSwitchReciprocal
MolecularVolumeExponentialSwitchReciprocal	src/examples/molecularmask.h	/^class MolecularVolumeExponentialSwitchReciprocal : public madness::FunctionFunctorInterface<double,3> {$/;"	c
MolecularVolumeMask	src/examples/molecularmask.h	/^    MolecularVolumeMask(double sigma, $/;"	f	class:MolecularVolumeMask
MolecularVolumeMask	src/examples/molecularmask.h	/^class MolecularVolumeMask : private MolecularMaskBase$/;"	c
MolecularVolumeMaskGrad	src/examples/molecularmask.h	/^    MolecularVolumeMaskGrad(double sigma, $/;"	f	class:MolecularVolumeMaskGrad
MolecularVolumeMaskGrad	src/examples/molecularmask.h	/^class MolecularVolumeMaskGrad : private MolecularMaskBase$/;"	c
Molecule	src/apps/chem/molecule.cc	/^Molecule::Molecule(const std::string &filename) : atoms(), rcut(), eprec(1e-4), core_pot(), field(3L)$/;"	f	class:madness::Molecule
Molecule	src/apps/chem/molecule.h	/^    Molecule() : atoms(), rcut(), eprec(1e-4), core_pot(), field(3L) {};$/;"	f	class:madness::Molecule
Molecule	src/apps/chem/molecule.h	/^class Molecule {$/;"	c	namespace:madness
Molecule	src/apps/polar/molecule.cc	/^Molecule::Molecule(const std::string& filename) {$/;"	f	class:Molecule
Molecule	src/apps/polar/molecule.h	/^    Molecule() : atoms(), rcut(), eprec(1e-4), core_pot(), field(3L) {};$/;"	f	class:Molecule
Molecule	src/apps/polar/molecule.h	/^class Molecule {$/;"	c
MomentFunctor	src/apps/chem/SCF.h	/^	MomentFunctor(const std::vector<int>& x) : i(x[0]), j(x[1]), k(x[2]) {}$/;"	f	class:madness::MomentFunctor
MomentFunctor	src/apps/chem/SCF.h	/^	MomentFunctor(int i, int j, int k) : i(i), j(j), k(k) {}$/;"	f	class:madness::MomentFunctor
MomentFunctor	src/apps/chem/SCF.h	/^class MomentFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
MomentFunctor	src/apps/polar/moldft.cc	/^    MomentFunctor(const std::vector<int> &x) : i(x[0]), j(x[1]), k(x[2]) {}$/;"	f	class:MomentFunctor
MomentFunctor	src/apps/polar/moldft.cc	/^    MomentFunctor(int i, int j, int k) : i(i), j(j), k(k) {}$/;"	f	class:MomentFunctor
MomentFunctor	src/apps/polar/moldft.cc	/^class MomentFunctor : public FunctionFunctorInterface<double, 3>$/;"	c	file:
Motivations and attributions	doc/Latex/parallel-runtime.tex	/^\\section{Motivations and attributions}$/;"	s
MpiArgs	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^MpiArgs::MpiArgs( int argc, char** argv, mpi::Comm comm, std::ostream& error )$/;"	f	class:elem::choice::MpiArgs
MpiArgs	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^class MpiArgs$/;"	c	namespace:elem::choice
MpiRequestTester	src/madness/world/world.h	/^            MpiRequestTester(SafeMPI::Request& r) : r(&r) {}$/;"	f	struct:madness::World::MpiRequestTester
MpiRequestTester	src/madness/world/world.h	/^        struct MpiRequestTester {$/;"	s	class:madness::World
Multi threading the task queue active messages and SMP parallelism	doc/Latex/parallel-runtime.tex	/^\\section{Multi-threading, the task queue, active messages and SMP parallelism}$/;"	s
Multi wavelets	doc/Latex/implementation.tex	/^\\subsection{Multi-wavelets}$/;"	b
MultiShiftHessSolve	src/madness/external/elemental/include/elemental/lapack-like/solve/MultiShiftHessSolve.hpp	/^MultiShiftHessSolve$/;"	f	namespace:elem
MultiShiftQuasiTrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm.hpp	/^MultiShiftQuasiTrsm$/;"	f	namespace:elem
MultiShiftTrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm.hpp	/^MultiShiftTrsm$/;"	f	namespace:elem
MultiplyAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/MultiplyAfter.hpp	/^MultiplyAfter$/;"	f	namespace:elem::ldl
MultiplyAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/MultiplyAfter.hpp	/^MultiplyAfter( const DistMatrix<F>& A, DistMatrix<F>& B, bool conjugated=false )$/;"	f	namespace:elem::ldl
MultiplyAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/MultiplyAfter.hpp	/^MultiplyAfter( const Matrix<F>& A, Matrix<F>& B, bool conjugated=false )$/;"	f	namespace:elem::ldl
Mutex	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  Mutex() {$/;"	f	class:testing::internal::Mutex
Mutex	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  Mutex() {}$/;"	f	class:testing::internal::Mutex
Mutex	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class Mutex : public MutexBase {$/;"	c	namespace:testing::internal
Mutex	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class Mutex {$/;"	c	namespace:testing::internal
Mutex	src/madness/world/worldmutex.h	/^        Mutex(int junk=0) \/\/ Junk so that can force initializer in mraX.cc$/;"	f	class:madness::Mutex
Mutex	src/madness/world/worldmutex.h	/^    class Mutex {$/;"	c	namespace:madness
Mutex MutexReaderWriter ScopedMutex MutexWaiter thread h	doc/Latex/api.tex	/^\\subsubsection{Mutex, MutexReaderWriter, ScopedMutex, MutexWaiter (thread.h)}$/;"	b
MutexBase	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class MutexBase {$/;"	c	namespace:testing::internal
MutexFair	src/madness/world/worldmutex.h	/^        MutexFair() : n(0), front(0), back(0) {};$/;"	f	class:madness::MutexFair
MutexFair	src/madness/world/worldmutex.h	/^    class MutexFair : private Spinlock {$/;"	c	namespace:madness
MutexLock	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef GTestMutexLock MutexLock;$/;"	t	namespace:testing::internal
MutexReaderWriter	src/madness/world/worldmutex.h	/^        MutexReaderWriter() : nreader(0), writeflag(false) {}$/;"	f	class:madness::MutexReaderWriter
MutexReaderWriter	src/madness/world/worldmutex.h	/^        MutexReaderWriter() {nreader=0; writeflag=0;}$/;"	f	class:madness::MutexReaderWriter
MutexReaderWriter	src/madness/world/worldmutex.h	/^    class MutexReaderWriter : private NO_DEFAULTS {$/;"	c	namespace:madness
MutexReaderWriter	src/madness/world/worldmutex.h	/^    class MutexReaderWriter : private Spinlock, private NO_DEFAULTS {$/;"	c	namespace:madness
MutexWaiter	src/madness/world/worldmutex.h	/^        MutexWaiter() : count(0) { }$/;"	f	class:madness::MutexWaiter
MutexWaiter	src/madness/world/worldmutex.h	/^    class MutexWaiter {$/;"	c	namespace:madness
MyPmap	src/madness/mra/mypmap.h	/^        MyPmap() : map_type(2) {};$/;"	f	class:madness::MyPmap
MyPmap	src/madness/mra/mypmap.h	/^        MyPmap(World& world)$/;"	f	class:madness::MyPmap
MyPmap	src/madness/mra/mypmap.h	/^        MyPmap(World& world, std::vector<TreeCoords<D> > v) : map_type(2), nproc(world.nproc()), n(0) {$/;"	f	class:madness::MyPmap
MyPmap	src/madness/mra/mypmap.h	/^        MyPmap(World& world, unsigned int map_type, int n=100)$/;"	f	class:madness::MyPmap
MyPmap	src/madness/mra/mypmap.h	/^        MyPmap(const MyPmap<D>& other) : map_type(other.map_type), nproc(other.nproc), n(other.n), tree_map(other.tree_map) {};$/;"	f	class:madness::MyPmap
MyPmap	src/madness/mra/mypmap.h	/^    class MyPmap : public WorldDCPmapInterface< Key<D> > {$/;"	c	namespace:madness
MySteepestDescent	src/apps/moldft/mcpfit.cc	/^    MySteepestDescent(const std::shared_ptr<OptimizationTargetInterface>& target,$/;"	f	class:MySteepestDescent
MySteepestDescent	src/apps/moldft/mcpfit.cc	/^class MySteepestDescent : public OptimizerInterface {$/;"	c	file:
MySteepestDescent	src/apps/polar/mcpfit.cc	/^    MySteepestDescent(const std::shared_ptr<OptimizationTargetInterface>& target,$/;"	f	class:MySteepestDescent
MySteepestDescent	src/apps/polar/mcpfit.cc	/^class MySteepestDescent : public OptimizerInterface {$/;"	c	file:
MyTimer	src/apps/chem/PNOStructures.h	/^	MyTimer(World& world): world(world), wstart_(-1.0),cstart_(-1.0),wstop_(-1.0),cstop_(-1.0),wtime_(-1.0),ctime_(-1.0){}$/;"	f	struct:madness::MyTimer
MyTimer	src/apps/chem/PNOStructures.h	/^struct MyTimer{$/;"	s	namespace:madness
MyTypes	src/madness/world/test_stack.cc	/^    typedef ::testing::Types<int, int*, std::shared_ptr<int>, C> MyTypes;$/;"	t	namespace:__anon3	file:
N	src/apps/hf/test_lattice.cc	/^const double N = 2.0;$/;"	v
N	src/apps/hf/testconv.cc	38;"	d	file:
N	src/examples/navstokes_cosines.cc	/^const double N = 8.0;$/;"	v
N	src/examples/testspectralprop.cc	/^Fred N(double t, const Fred& f) {$/;"	f
NAME	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define NAME(name) _##name$/;"	d
NAME	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define NAME(name) name$/;"	d
NDEBUG	src/madness/world/dependency_interface.h	42;"	d
NDIM	src/apps/nick/tdse1.cc	/^const int NDIM = 1;$/;"	v
NDIM	src/apps/nick/wavef.h	/^const int NDIM  = 3;$/;"	v
NDIM	src/madness/mra/testpdiff.cc	/^static const std::size_t NDIM=3;$/;"	v	file:
NDO	src/madness/world/test_atomicint.cc	/^const int NDO = 10000000;$/;"	v
NEMO_H_	src/apps/chem/nemo.h	45;"	d
NEXT	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	2675;"	d	file:
NEXT	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	2672;"	d	file:
NEXTJ	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define NEXTJ \\$/;"	d
NFUNC	src/examples/dataloadbal.cc	/^static const int NFUNC = 4;$/;"	v	file:
NGEN	src/madness/world/test_queue.cc	/^const int NGEN=100;$/;"	v
NOLOCK	src/madness/world/worldmutex.h	/^        enum lockT {NOLOCK, READLOCK, WRITELOCK};$/;"	e	enum:madness::MutexReaderWriter::lockT
NOLOCK	src/madness/world/worldmutex.h	/^        static const int NOLOCK=0;$/;"	m	class:madness::MutexReaderWriter
NONE_PAIRTYPE	src/apps/chem/PNOParameters.h	/^enum PairType{MP2_PAIRTYPE,CISPD_PAIRTYPE,ALL_PAIRTYPE,NONE_PAIRTYPE,UNKNOWN_PAIRTYPE};$/;"	e	enum:madness::PairType
NON_UNIT	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    NON_UNIT,$/;"	e	enum:elem::UnitOrNonUnitNS::UnitOrNonUnit
NORMAL	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    NORMAL,$/;"	e	enum:elem::OrientationNS::Orientation
NO_DEFAULTS	src/madness/world/nodefaults.h	/^    NO_DEFAULTS() {};$/;"	f	class:NO_DEFAULTS
NO_DEFAULTS	src/madness/world/nodefaults.h	/^class NO_DEFAULTS {$/;"	c
NO_GENTENSOR	src/examples/tdse1d.cc	102;"	d	file:
NO_GENTENSOR	src/madness/mra/testsuite.cc	38;"	d	file:
NO_GENTENSOR	src/madness/mra/testvmra.cc	1;"	d	file:
NPT	src/examples/spectralprop.h	/^        const int NPT;          \/\/\/< Number of quadrature points$/;"	m	class:madness::SpectralPropagator
NPT	src/examples/spectralprop.h	/^        const int NPT;$/;"	m	class:madness::SpectralPropagatorGaussLobatto
NS_fcube_for_mul	src/madness/mra/funcimpl.h	/^        GenTensor<Q> NS_fcube_for_mul(const keyT& child, const keyT& parent,$/;"	f	class:madness::FunctionImpl
NScoeffs2values	src/madness/mra/funcimpl.h	/^        GenTensor<Q> NScoeffs2values(const keyT& key, const GenTensor<Q>& coeff,$/;"	f	class:madness::FunctionImpl
NSnormf	src/madness/mra/convolution1d.h	/^        double Rnorm, Tnorm, Rnormf, Tnormf, NSnormf;$/;"	m	struct:madness::ConvolutionData1D
NTASK	src/madness/world/test_queue.cc	/^const int NTASK=100000;$/;"	v
NTESTS	src/examples/test_gmres.cc	/^const int NTESTS = 12;$/;"	v
NTHREAD	src/apps/chem/distpm.cc	15;"	d	file:
NTHREAD	src/apps/polar/distpm.cc	13;"	d	file:
NTHREAD	src/apps/polar/distpm.cc	15;"	d	file:
NTHREAD	src/madness/world/thread.h	/^    	static const unsigned long NTHREAD = 0xff; \/\/\/< Mask for nthread byte.$/;"	m	class:madness::TaskAttributes
NTRANS	src/apps/hf/electronicstructureapp.h	153;"	d
NUCLEAR_NORM	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    NUCLEAR_NORM,       \/\/ One-norm of the singular values$/;"	e	enum:elem::NormTypeNS::NormType
NUMBER_OF_ATOMS_IN_TABLE	src/apps/chem/atomutil.cc	/^static const unsigned int NUMBER_OF_ATOMS_IN_TABLE = 110;$/;"	m	namespace:madness	file:
NUMBER_OF_ATOMS_IN_TABLE	src/apps/hf/mentity.cc	/^static const unsigned int NUMBER_OF_ATOMS_IN_TABLE = 110;$/;"	v	file:
NUMBER_OF_ATOMS_IN_TABLE	src/apps/polar/atomutil.cc	/^static const unsigned int NUMBER_OF_ATOMS_IN_TABLE = 110;$/;"	v	file:
NUMEVENTS	src/madness/world/test_papi.cc	/^const int NUMEVENTS = 1;$/;"	v
NUMEVENTS	src/madness/world/worldpapi.h	/^    const int NUMEVENTS = 1;$/;"	m	namespace:madness
NUM_ENTITY	src/madness/external/tinyxml/tinyxml.h	/^		NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon42
NWChem_Interface	src/apps/adrian/NWChem.h	/^  NWChem_Interface(const std::string &fname_, std::ostream &err_)$/;"	f	class:slymer::NWChem_Interface
NWChem_Interface	src/apps/adrian/NWChem.h	/^class NWChem_Interface : public ES_Interface {$/;"	c	namespace:slymer
NWChem_Interface	src/apps/bryan/NWChem.h	/^  NWChem_Interface(const std::string &fname_, std::ostream &err_)$/;"	f	class:slymer::NWChem_Interface
NWChem_Interface	src/apps/bryan/NWChem.h	/^class NWChem_Interface : public ES_Interface {$/;"	c	namespace:slymer
N_F	src/madness/mra/convolution1d.h	/^        double N_up, N_diff, N_F;               \/\/\/< the norms according to Beylkin 2008, Eq. (21) ff$/;"	m	struct:madness::ConvolutionData1D
N_diff	src/madness/mra/convolution1d.h	/^        double N_up, N_diff, N_F;               \/\/\/< the norms according to Beylkin 2008, Eq. (21) ff$/;"	m	struct:madness::ConvolutionData1D
N_double	src/examples/testspectralprop.cc	/^double N_double(double t, const double u) {$/;"	f
N_up	src/madness/mra/convolution1d.h	/^        double N_up, N_diff, N_F;               \/\/\/< the norms according to Beylkin 2008, Eq. (21) ff$/;"	m	struct:madness::ConvolutionData1D
Name	src/madness/external/elemental/include/elemental/core/Timer/impl.hpp	/^Timer::Name() const$/;"	f	class:elem::Timer
Name	src/madness/external/tinyxml/tinyxml.h	/^	const char*		Name()  const		{ return name.c_str(); }		\/\/\/< Return the name of this attribute.$/;"	f	class:TiXmlAttribute
NameTStr	src/madness/external/tinyxml/tinyxml.h	/^	const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute
NativeArray	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  NativeArray(const Element* array, size_t count, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
NativeArray	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  NativeArray(const NativeArray& rhs) {$/;"	f	class:testing::internal::NativeArray
NativeArray	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class NativeArray {$/;"	c	namespace:testing::internal
Nc	src/apps/moldft/mcpfit.cc	/^    int Nc;$/;"	m	class:NcOverR	file:
Nc	src/apps/polar/mcpfit.cc	/^    int Nc;$/;"	m	class:NcOverR	file:
NcOverR	src/apps/moldft/mcpfit.cc	/^    NcOverR (int Nc, double c) : Nc(Nc), c(c) {}$/;"	f	class:NcOverR
NcOverR	src/apps/moldft/mcpfit.cc	/^class NcOverR : public FunctionFunctorInterface<double,3> {$/;"	c	file:
NcOverR	src/apps/polar/mcpfit.cc	/^    NcOverR (int Nc, double c) : Nc(Nc), c(c) {}$/;"	f	class:NcOverR
NcOverR	src/apps/polar/mcpfit.cc	/^class NcOverR : public FunctionFunctorInterface<double,3> {$/;"	c	file:
Nemo	src/apps/chem/nemo.cc	/^Nemo::Nemo(World& world, std::shared_ptr<SCF> calc, const std::string inputfile) :$/;"	f	class:madness::Nemo
Nemo	src/apps/chem/nemo.h	/^class Nemo: public NemoBase {$/;"	c	namespace:madness
NemoBase	src/apps/chem/nemo.h	/^	NemoBase(World& w) : world(w) {}$/;"	f	class:madness::NemoBase
NemoBase	src/apps/chem/nemo.h	/^class NemoBase : public MolecularOptimizationTargetInterface {$/;"	c	namespace:madness
NemoCalculationParameters	src/apps/chem/nemo.h	/^		NemoCalculationParameters() : CalculationParameters() {$/;"	f	struct:madness::Nemo::NemoCalculationParameters
NemoCalculationParameters	src/apps/chem/nemo.h	/^		NemoCalculationParameters(const CalculationParameters& param) : CalculationParameters(param) {$/;"	f	struct:madness::Nemo::NemoCalculationParameters
NemoCalculationParameters	src/apps/chem/nemo.h	/^	struct NemoCalculationParameters : public CalculationParameters {$/;"	s	class:madness::Nemo
Nemo_complex_Parameters	src/apps/chem/znemo.h	/^	Nemo_complex_Parameters(World& world) {$/;"	f	class:madness::Nemo_complex_Parameters
Nemo_complex_Parameters	src/apps/chem/znemo.h	/^class Nemo_complex_Parameters : public QCCalculationParametersBase {$/;"	c	namespace:madness
Newton	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^Newton( DistMatrix<F>& A, const SignCtrl<Base<F>>& signCtrl )$/;"	f	namespace:elem::sign
Newton	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^Newton( Matrix<F>& A, const SignCtrl<Base<F>>& signCtrl )$/;"	f	namespace:elem::sign
Newton	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^Newton( DistMatrix<F>& A, const SquareRootCtrl<Base<F>>& sqrtCtrl )$/;"	f	namespace:elem::square_root
Newton	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^Newton( Matrix<F>& A, const SquareRootCtrl<Base<F>>& sqrtCtrl )$/;"	f	namespace:elem::square_root
NewtonSchulzStep	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^NewtonSchulzStep$/;"	f	namespace:elem::sign
NewtonSchulzStep	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^NewtonSchulzStep( const Matrix<F>& X, Matrix<F>& XTmp, Matrix<F>& XNew )$/;"	f	namespace:elem::sign
NewtonStep	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^NewtonStep$/;"	f	namespace:elem::sign
NewtonStep	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^NewtonStep$/;"	f	namespace:elem::square_root
Next	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute
Next	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute
NextSibling	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode
NextSibling	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode
NextSibling	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) 					{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSibling	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling()							{ return next; }$/;"	f	class:TiXmlNode
NextSibling	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const		{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSibling	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* NextSibling() const				{ return next; }$/;"	f	class:TiXmlNode
NextSiblingElement	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode
NextSiblingElement	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode
NextSiblingElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode
NextSiblingElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value)				{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSiblingElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode
NextSiblingElement	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const	{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NoChildren	src/madness/external/tinyxml/tinyxml.h	/^	bool NoChildren() const						{ return !firstChild; }$/;"	f	class:TiXmlNode
NoExecDeathTest	src/madness/external/gtest/src/gtest-death-test.cc	/^  NoExecDeathTest(const char* a_statement, const RE* a_regex) :$/;"	f	class:testing::internal::NoExecDeathTest
NoExecDeathTest	src/madness/external/gtest/src/gtest-death-test.cc	/^class NoExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
NoTrans	src/madness/tensor/cblas_types.h	/^      NoTrans=0,$/;"	e	enum:madness::cblas::__anon45
Node	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* Node() const			{ return ToNode(); } $/;"	f	class:TiXmlHandle
Node	src/madness/world/test_dc.cc	/^    Node() : k(-1) {}$/;"	f	struct:Node
Node	src/madness/world/test_dc.cc	/^    Node(int k) : k(k) {}$/;"	f	struct:Node
Node	src/madness/world/test_dc.cc	/^struct Node {$/;"	s	file:
Node	src/madness/world/test_tree.cc	/^    Node() : value(0.0), isleaf(true) {}$/;"	f	struct:Node
Node	src/madness/world/test_tree.cc	/^    Node(const Node& node) : value(node.value), isleaf(node.isleaf) {}$/;"	f	struct:Node
Node	src/madness/world/test_tree.cc	/^    Node(double value) : value(value), isleaf(true) {}$/;"	f	struct:Node
Node	src/madness/world/test_tree.cc	/^struct Node {$/;"	s	file:
Node	src/madness/world/test_world.cc	/^    Node() : value(0.0), isleaf(true) {};$/;"	f	struct:Node
Node	src/madness/world/test_world.cc	/^    Node(const Node& node) : key(node.key), value(node.value), isleaf(node.isleaf) {};$/;"	f	struct:Node
Node	src/madness/world/test_world.cc	/^    Node(double value) : value(value), isleaf(true) {};$/;"	f	struct:Node
Node	src/madness/world/test_world.cc	/^struct Node {$/;"	s	file:
NodeType	src/madness/external/tinyxml/tinyxml.h	/^	enum NodeType$/;"	g	class:TiXmlNode
NonHPDMatrixException	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^    NonHPDMatrixException( const char* msg="Matrix was not HPD" )$/;"	f	class:elem::NonHPDMatrixException
NonHPDMatrixException	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^class NonHPDMatrixException  : public std::runtime_error$/;"	c	namespace:elem
NonHPSDMatrixException	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^    NonHPSDMatrixException( const char* msg="Matrix was not HPSD" )$/;"	f	class:elem::NonHPSDMatrixException
NonHPSDMatrixException	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^class NonHPSDMatrixException  : public std::runtime_error$/;"	c	namespace:elem
None	src/apps/chem/correlationfactor.h	/^	enum corrfactype {None, GradientalGaussSlater, GaussSlater, LinearSlater,$/;"	e	enum:madness::NuclearCorrelationFactor::corrfactype
None	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct None {};$/;"	s	namespace:testing::internal
NoneT	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct NoneT {};$/;"	s	namespace:testing::internal
NonlinearSolver	src/madness/mra/nonlinsol.h	/^	typedef NonlinearSolverND<3> NonlinearSolver;$/;"	t	namespace:madness
NonlinearSolverND	src/madness/mra/nonlinsol.h	/^		NonlinearSolverND(unsigned int maxsub = 10) : maxsub(maxsub), do_print(false) {}$/;"	f	class:madness::NonlinearSolverND
NonlinearSolverND	src/madness/mra/nonlinsol.h	/^	class NonlinearSolverND {$/;"	c	namespace:madness
NonstandardIndexIterator	src/madness/mra/indexit.h	/^        NonstandardIndexIterator() : IndexIterator(0, 0l) {}$/;"	f	class:madness::NonstandardIndexIterator
NonstandardIndexIterator	src/madness/mra/indexit.h	/^        NonstandardIndexIterator(const V& limits, const D& order) :$/;"	f	class:madness::NonstandardIndexIterator
NonstandardIndexIterator	src/madness/mra/indexit.h	/^        NonstandardIndexIterator(int ndim, const long limits[],$/;"	f	class:madness::NonstandardIndexIterator
NonstandardIndexIterator	src/madness/mra/indexit.h	/^        NonstandardIndexIterator(int ndim, long top, const D &order) :$/;"	f	class:madness::NonstandardIndexIterator
NonstandardIndexIterator	src/madness/mra/indexit.h	/^        NonstandardIndexIterator(int ndim, long top, const int order[]) :$/;"	f	class:madness::NonstandardIndexIterator
NonstandardIndexIterator	src/madness/mra/indexit.h	/^    class NonstandardIndexIterator : public IndexIterator {$/;"	c	namespace:madness
Norm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm.hpp	/^Norm( const DistMatrix<F,U,V>& A, NormType type=FROBENIUS_NORM )$/;"	f	namespace:elem
Norm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm.hpp	/^Norm( const Matrix<F>& A, NormType type=FROBENIUS_NORM )$/;"	f	namespace:elem
NormCap	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^inline Base<F> NormCap()$/;"	f	namespace:elem::pspec
NormType	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum NormType$/;"	g	namespace:elem::NormTypeNS
NormTypeNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace NormTypeNS {$/;"	n	namespace:elem
Normal	src/madness/external/elemental/include/elemental/convex/SVT/Normal.hpp	/^Normal( DistMatrix<F>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem::svt
Normal	src/madness/external/elemental/include/elemental/convex/SVT/Normal.hpp	/^Normal( Matrix<F>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem::svt
NormalFromEVD	src/madness/external/elemental/include/elemental/matrices/NormalFromEVD.hpp	/^NormalFromEVD$/;"	f	namespace:elem
NormalUniformSpectrum	src/madness/external/elemental/include/elemental/matrices/NormalUniformSpectrum.hpp	/^NormalUniformSpectrum$/;"	f	namespace:elem
Normalization of scaling functions in the user coordinates	doc/Latex/implementation.tex	/^\\subsection[Normalization of scaling functions in the user coordinates]{Normalization of scaling functions in the user$/;"	b
Normalize	src/madness/external/gtest/src/gtest-filepath.cc	/^void FilePath::Normalize() {$/;"	f	class:testing::internal::FilePath
NormalizeEntries	src/madness/external/elemental/examples/convex/RPCA.cpp	/^void NormalizeEntries( DistMatrix<F,U,V>& A )$/;"	f
Notification	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  Notification() : notified_(false) {$/;"	f	class:testing::internal::Notification
Notification	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class Notification {$/;"	c	namespace:testing::internal
Notify	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void Notify() {$/;"	f	class:testing::internal::Notification
Nrm2	src/madness/external/elemental/include/elemental/blas-like/level1/Nrm2.hpp	/^Nrm2( const DistMatrix<F>& x )$/;"	f	namespace:elem
Nrm2	src/madness/external/elemental/include/elemental/blas-like/level1/Nrm2.hpp	/^Nrm2( const Matrix<F>& x )$/;"	f	namespace:elem
Nrm2	src/madness/external/elemental/src/core/imports/blas.cpp	/^double Nrm2( int n, const dcomplex* x, int incx )$/;"	f	namespace:elem::blas
Nrm2	src/madness/external/elemental/src/core/imports/blas.cpp	/^double Nrm2( int n, const double* x, int incx )$/;"	f	namespace:elem::blas
Nrm2	src/madness/external/elemental/src/core/imports/blas.cpp	/^float Nrm2( int n, const float* x, int incx )$/;"	f	namespace:elem::blas
Nrm2	src/madness/external/elemental/src/core/imports/blas.cpp	/^float Nrm2( int n, const scomplex* x, int incx )$/;"	f	namespace:elem::blas
Nts	src/examples/navstokes_cosines.cc	/^const int Nts = L\/deltaT+10; \/\/ Number of time steps$/;"	v
Nuclear	src/apps/chem/SCFOperators.cc	/^Nuclear::Nuclear(World& world, const Nemo* nemo) : world(world) {$/;"	f	class:madness::Nuclear
Nuclear	src/apps/chem/SCFOperators.cc	/^Nuclear::Nuclear(World& world, const SCF* calc) : world(world) {$/;"	f	class:madness::Nuclear
Nuclear	src/apps/chem/SCFOperators.h	/^    Nuclear(World& world, std::shared_ptr<NuclearCorrelationFactor> ncf)$/;"	f	class:madness::Nuclear
Nuclear	src/apps/chem/SCFOperators.h	/^class Nuclear {$/;"	c	namespace:madness
NuclearChargeDensityOp	src/apps/hf/test_hydro.cc	/^    NuclearChargeDensityOp(World& world, funcT rhon, double coeff, double thresh)$/;"	f	class:NuclearChargeDensityOp
NuclearChargeDensityOp	src/apps/hf/test_hydro.cc	/^  class NuclearChargeDensityOp : public EigSolverOp<T,NDIM>$/;"	c	file:
NuclearCorrelationFactor	src/apps/chem/correlationfactor.h	/^	NuclearCorrelationFactor(World& world, const Molecule& mol)$/;"	f	class:madness::NuclearCorrelationFactor
NuclearCorrelationFactor	src/apps/chem/correlationfactor.h	/^class NuclearCorrelationFactor {$/;"	c	namespace:madness
NuclearCuspyBox_op	src/madness/mra/leafop.h	/^    NuclearCuspyBox_op(): particle(-1) {$/;"	f	struct:madness::NuclearCuspyBox_op
NuclearCuspyBox_op	src/madness/mra/leafop.h	/^    NuclearCuspyBox_op(const size_t p): particle(p){$/;"	f	struct:madness::NuclearCuspyBox_op
NuclearCuspyBox_op	src/madness/mra/leafop.h	/^  struct NuclearCuspyBox_op : public Specialbox_op<T, NDIM> {$/;"	s	namespace:madness
NuclearDensityFunctor	src/apps/moldft/preal.cc	/^  NuclearDensityFunctor(const Molecule& molecule) : $/;"	f	class:NuclearDensityFunctor
NuclearDensityFunctor	src/apps/moldft/preal.cc	/^class NuclearDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
NuclearDensityFunctor	src/apps/moldft/testperiodic.cc	/^    NuclearDensityFunctor(const Molecule& molecule, double R)$/;"	f	class:NuclearDensityFunctor
NuclearDensityFunctor	src/apps/moldft/testperiodic.cc	/^class NuclearDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
NuclearDensityFunctor	src/apps/polar/preal.cc	/^  NuclearDensityFunctor(const Molecule& molecule) : $/;"	f	class:NuclearDensityFunctor
NuclearDensityFunctor	src/apps/polar/preal.cc	/^class NuclearDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
NuclearDensityFunctor	src/apps/polar/testperiodic.cc	/^    NuclearDensityFunctor(const Molecule& molecule)$/;"	f	class:NuclearDensityFunctor
NuclearDensityFunctor	src/apps/polar/testperiodic.cc	/^class NuclearDensityFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
NuclearNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Nuclear.hpp	/^NuclearNorm( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
NuclearNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Nuclear.hpp	/^NuclearNorm( const Matrix<F>& A )$/;"	f	namespace:elem
NumDiscreteColors	src/madness/external/elemental/src/core/global.cpp	/^Int NumDiscreteColors()$/;"	f	namespace:elem
O	src/apps/chem/projector.h	/^        Projector<T,NDIM> O;$/;"	m	class:madness::QProjector
OBJ	src/apps/moldft/fci/GNUmakefile	/^ OBJ :=  fci_mfndwt.o  fci_ofndoc.o  fci_num.o \\$/;"	m
OBJECTS	src/madness/tensor/mtxmq_bg/Makefile	/^   OBJECTS = bgp_cc.o  bgp_cr.o  bgp_rc.o bgp_rr.o$/;"	m
OBJECTS	src/madness/tensor/mtxmq_bg/Makefile	/^   OBJECTS = bgq_mtxm.o$/;"	m
OBJECTS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   OBJECTS = bgp_cc.o  bgp_cr.o  bgp_rc.o bgp_rr.o$/;"	m
OBJECTS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   OBJECTS = bgq_mtxm.o$/;"	m
OEP	src/apps/chem/oep.h	/^	OEP(World& world, const std::shared_ptr<SCF> calc, std::string inputfile)$/;"	f	class:madness::OEP
OEP	src/apps/chem/oep.h	/^class OEP : public Nemo {$/;"	c	namespace:madness
OEP_Parameters	src/apps/chem/oep.h	/^	OEP_Parameters(World& world, std::string inputfile) {$/;"	f	class:madness::OEP_Parameters
OEP_Parameters	src/apps/chem/oep.h	/^class OEP_Parameters : public QCCalculationParametersBase {$/;"	c	namespace:madness
OKBLUE	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^    OKBLUE = '\\033[94m'$/;"	v	class:COLORS
OKBLUE	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^    OKBLUE = '\\033[94m'$/;"	v	class:COLORS
OKGREEN	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^    OKGREEN = '\\033[92m'$/;"	v	class:COLORS
OKGREEN	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^    OKGREEN = '\\033[92m'$/;"	v	class:COLORS
OLDXXX	src/madness/world/worldmutex.h	302;"	d
ONE	src/madness/external/elemental/external/pmrrr/src/plarre.c	59;"	d	file:
ONE_NORM	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    ONE_NORM,           \/\/ Operator one norm$/;"	e	enum:elem::NormTypeNS::NormType
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	324;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	222;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	229;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	206;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	209;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	225;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	224;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	204;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	242;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	190;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	208;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	208;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	208;"	d	file:
OTHER	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	208;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	455;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	686;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	231;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	207;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	488;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	311;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	309;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	207;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	242;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	275;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	330;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	335;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	334;"	d	file:
OTHER	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	340;"	d	file:
OT_F12	src/apps/chem/CCStructures.h	/^  enum OpType {OT_UNDEFINED,OT_G12,OT_F12};$/;"	e	enum:madness::OpType
OT_G12	src/apps/chem/CCStructures.h	/^  enum OpType {OT_UNDEFINED,OT_G12,OT_F12};$/;"	e	enum:madness::OpType
OT_UNDEFINED	src/apps/chem/CCStructures.h	/^  enum OpType {OT_UNDEFINED,OT_G12,OT_F12};$/;"	e	enum:madness::OpType
OUTPUTWRITER_H_	src/apps/hf/outputwriter.h	34;"	d
OVERSEE_TEST	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
OWNER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    OWNER = 0x0,$/;"	e	enum:elem::ViewTypeNS::ViewType
OWNER_FIXED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    OWNER_FIXED = 0x2,$/;"	e	enum:elem::ViewTypeNS::ViewType
Object	src/madness/world/test_worldptr.cc	/^        class Object {$/;"	c	class:__anon6::WorldPtrTest	file:
Occupancies	src/apps/adrian/ESInterface.h	/^  constexpr Properties Occupancies = 1 << 4; \/\/\/< MO occupancies.$/;"	m	namespace:slymer::Properties
Occupancies	src/apps/bryan/ESInterface.h	/^  constexpr Properties Occupancies = 1 << 4; \/\/\/< MO occupancies.$/;"	m	namespace:slymer::Properties
OnEnvironmentsSetUpEnd	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsSetUpEnd	src/madness/external/gtest/src/gtest.cc	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsSetUpStart	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnEnvironmentsSetUpStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsSetUpStart	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsTearDownEnd	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownEnd	src/madness/external/gtest/src/gtest.cc	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsTearDownStart	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnEnvironmentsTearDownStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownStart	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseEnd	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnTestCaseEnd(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseEnd	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void OnTestCaseEnd(const TestCase& test_case) {$/;"	f	class:testing::internal::StreamingListener
OnTestCaseEnd	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseStart	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnTestCaseStart(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseStart	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void OnTestCaseStart(const TestCase& test_case) {$/;"	f	class:testing::internal::StreamingListener
OnTestCaseStart	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestEnd	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnTestEnd(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestEnd	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void OnTestEnd(const TestInfo& test_info) {$/;"	f	class:testing::internal::StreamingListener
OnTestEnd	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationEnd	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnTestIterationEnd(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationEnd	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void OnTestIterationEnd(const UnitTest& unit_test, int \/* iteration *\/) {$/;"	f	class:testing::internal::StreamingListener
OnTestIterationEnd	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationEnd	src/madness/external/gtest/src/gtest.cc	/^void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestIterationEnd	src/madness/external/gtest/src/gtest.cc	/^void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OnTestIterationStart	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnTestIterationStart(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationStart	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void OnTestIterationStart(const UnitTest& \/* unit_test *\/, int iteration) {$/;"	f	class:testing::internal::StreamingListener
OnTestIterationStart	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestIterationStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationStart	src/madness/external/gtest/src/gtest.cc	/^void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestPartResult	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnTestPartResult(const TestPartResult& \/*test_part_result*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestPartResult	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void OnTestPartResult(const TestPartResult& test_part_result) {$/;"	f	class:testing::internal::StreamingListener
OnTestPartResult	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestPartResult($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestProgramEnd	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramEnd	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void OnTestProgramEnd(const UnitTest& unit_test) {$/;"	f	class:testing::internal::StreamingListener
OnTestProgramEnd	src/madness/external/gtest/src/gtest.cc	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestProgramStart	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramStart	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void OnTestProgramStart(const UnitTest& \/* unit_test *\/) {$/;"	f	class:testing::internal::StreamingListener
OnTestProgramStart	src/madness/external/gtest/src/gtest.cc	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestStart	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void OnTestStart(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestStart	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void OnTestStart(const TestInfo& test_info) {$/;"	f	class:testing::internal::StreamingListener
OnTestStart	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OneCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/One.hpp	/^OneCondition( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
OneCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/One.hpp	/^OneCondition( const Matrix<F>& A )$/;"	f	namespace:elem
OneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/One.hpp	/^OneNorm( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
OneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/One.hpp	/^OneNorm( const Matrix<F>& A )$/;"	f	namespace:elem
OneTwoOne	src/madness/external/elemental/include/elemental/matrices/OneTwoOne.hpp	/^OneTwoOne( BlockDistMatrix<T,U,V>& A, Int n )$/;"	f	namespace:elem
OneTwoOne	src/madness/external/elemental/include/elemental/matrices/OneTwoOne.hpp	/^OneTwoOne( DistMatrix<T,U,V>& A, Int n )$/;"	f	namespace:elem
OneTwoOne	src/madness/external/elemental/include/elemental/matrices/OneTwoOne.hpp	/^OneTwoOne( Matrix<T>& A, Int n )$/;"	f	namespace:elem
Ones	src/madness/external/elemental/include/elemental/matrices/Ones.hpp	/^Ones( BlockDistMatrix<T,U,V>& A, Int m, Int n )$/;"	f	namespace:elem
Ones	src/madness/external/elemental/include/elemental/matrices/Ones.hpp	/^Ones( DistMatrix<T,U,V>& A, Int m, Int n )$/;"	f	namespace:elem
Ones	src/madness/external/elemental/include/elemental/matrices/Ones.hpp	/^Ones( Matrix<T>& A, Int m, Int n )$/;"	f	namespace:elem
OnesFunctor	src/apps/hf/ewald.cc	/^  OnesFunctor(double val=1.0) : val(val) {}$/;"	f	class:OnesFunctor
OnesFunctor	src/apps/hf/ewald.cc	/^class OnesFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
Op	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^    Op( MPI_Op mpiOp=MPI_OP_NULL ) : op(mpiOp) { }$/;"	f	struct:elem::mpi::Op
Op	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^struct Op$/;"	s	namespace:elem::mpi
OpFExact	src/madness/mra/testopdir.cc	/^    OpFExact(double expnt, const double (&expnts)[3], const int (&m)[3]) {$/;"	f	class:OpFExact
OpFExact	src/madness/mra/testopdir.cc	/^class OpFExact : public FunctionFunctorInterface<double,3> {$/;"	c	file:
OpType	src/apps/chem/CCStructures.h	/^  enum OpType {OT_UNDEFINED,OT_G12,OT_F12};$/;"	g	namespace:madness
Op_create	src/madness/world/safempi.h	/^    inline MPI_Op Op_create(MPI_User_function *user_fn, int commute) {$/;"	f	namespace:SafeMPI
Op_free	src/madness/world/safempi.h	/^    inline void Op_free(MPI_Op op) {$/;"	f	namespace:SafeMPI
OpenedWindow	src/madness/external/elemental/src/core/global.cpp	/^void OpenedWindow()$/;"	f	namespace:elem
Operator	src/madness/tensor/gmres.h	/^    class Operator {$/;"	c	namespace:madness
OptimizationTargetInterface	src/madness/tensor/kain.cc	/^struct OptimizationTargetInterface {$/;"	s	file:
OptimizationTargetInterface	src/madness/tensor/solvers.h	/^    struct OptimizationTargetInterface {$/;"	s	namespace:madness
OptimizerInterface	src/madness/tensor/kain.cc	/^struct OptimizerInterface {$/;"	s	file:
OptimizerInterface	src/madness/tensor/solvers.h	/^    struct OptimizerInterface {$/;"	s	namespace:madness
OptionalArg	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        OptionalArg$/;"	f	struct:elem::choice::Args::OptionalArg
OptionalArg	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    struct OptionalArg$/;"	s	class:elem::choice::Args
OptionalArg	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        OptionalArg$/;"	f	struct:elem::choice::MpiArgs::OptionalArg
OptionalArg	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    struct OptionalArg$/;"	s	class:elem::choice::MpiArgs
OrbitalIterator	src/apps/chem/PNOStructures.h	/^	OrbitalIterator(const size_t &nocc, const size_t &freeze): i_(0), start_(0),stop_(nocc-freeze),finished_(false),freeze_(freeze) {}$/;"	f	struct:madness::OrbitalIterator
OrbitalIterator	src/apps/chem/PNOStructures.h	/^struct OrbitalIterator{$/;"	s	namespace:madness
Order	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline GridOrder Grid::Order() const { return order_; }$/;"	f	class:elem::Grid
Orientation	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum Orientation$/;"	g	namespace:elem::OrientationNS
OrientationNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace OrientationNS {$/;"	n	namespace:elem
OrientationNS	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^namespace OrientationNS {$/;"	n	namespace:elem
OrientationToChar	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^OrientationToChar( Orientation orientation )$/;"	f	namespace:elem::OrientationNS
OsStackTraceGetter	src/madness/external/gtest/src/gtest-internal-inl.h	/^  OsStackTraceGetter() : caller_frame_(NULL) {}$/;"	f	class:testing::internal::OsStackTraceGetter
OsStackTraceGetter	src/madness/external/gtest/src/gtest-internal-inl.h	/^class OsStackTraceGetter : public OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal
OsStackTraceGetterInterface	src/madness/external/gtest/src/gtest-internal-inl.h	/^  OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
OsStackTraceGetterInterface	src/madness/external/gtest/src/gtest-internal-inl.h	/^class OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal
OutputWriter	src/apps/hf/outputwriter.h	/^  OutputWriter()$/;"	f	class:OutputWriter
OutputWriter	src/apps/hf/outputwriter.h	/^class OutputWriter$/;"	c
OutputXmlAttribute	src/madness/external/gtest/src/gtest.cc	/^void XmlUnitTestResultPrinter::OutputXmlAttribute($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlCDataSection	src/madness/external/gtest/src/gtest.cc	/^void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlTestInfo	src/madness/external/gtest/src/gtest.cc	/^void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
Overview	doc/Latex/apps/moldft/manual.tex	/^\\chapter{Overview}$/;"	c
Overview	doc/Latex/parallel-runtime.tex	/^\\section{Overview}$/;"	s
Owner	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Owner( Int i, Int j ) const$/;"	f	class:elem::AbstractBlockDistMatrix
Owner	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Owner( Int i, Int j ) const$/;"	f	class:elem::AbstractDistMatrix
Owner	src/madness/tensor/elem.h	/^    ProcessID Owner(const elem::DistMatrix<T>& d, int i, int j) {$/;"	f	namespace:madness
OwningComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::OwningComm()  const { return owningComm_; }$/;"	f	class:elem::Grid
OwningGroup	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Group Grid::OwningGroup() const { return owningGroup_; }$/;"	f	class:elem::Grid
OwningRank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::OwningRank() const { return mpi::Rank(owningGroup_); }$/;"	f	class:elem::Grid
P	src/apps/ii/systolic.h	/^        const int64_t P;                \/\/< No. of processors$/;"	m	class:madness::DistributedMatrix
P	src/madness/tensor/distributed_matrix.h	/^        int64_t P;                \/\/\/< No. of processors$/;"	m	class:madness::DistributedMatrixDistribution
P	src/madness/world/test_binsorter.cc	/^int P;$/;"	v
P2Op	src/madness/world/worlddc.h	/^	  P2Op(implT* impl) : impl(impl) {}$/;"	f	struct:madness::WorldContainerImpl::P2Op
P2Op	src/madness/world/worlddc.h	/^	struct P2Op {$/;"	s	class:madness::WorldContainerImpl
P2Op	src/madness/world/worlddc.h	/^    	  P2Op(const P2Op& p) : impl(p.impl) {}$/;"	f	struct:madness::WorldContainerImpl::P2Op
PACKAGE	src/madness/madness_config.h	43;"	d
PACKAGE_BUGREPORT	src/madness/madness_config.h	45;"	d
PACKAGE_NAME	src/madness/madness_config.h	44;"	d
PACKAGE_STRING	src/madness/madness_config.h	46;"	d
PACKAGE_TARNAME	src/madness/madness_config.h	47;"	d
PACKAGE_URL	src/madness/madness_config.h	48;"	d
PACKAGE_VERSION	src/madness/madness_config.h	49;"	d
PAIRLOOP	src/apps/chem/PNO.h	12;"	d
PAPER_CODE_BASISFUNCTIONS_H_	src/apps/chem/PNOGuessFunctions.h	9;"	d
PAPER_CODE_PNOSTRUCTURES_H_	src/apps/chem/PNOStructures.h	9;"	d
PAPER_CODE_PNOTENSORS_H_	src/apps/chem/PNOTensors.h	9;"	d
PAPER_CODE_PNO_H_	src/apps/chem/PNO.h	9;"	d
PARSER_CONST_E	src/madness/external/muParser/muParser.cpp	37;"	d	file:
PARSER_CONST_PI	src/madness/external/muParser/muParser.cpp	34;"	d	file:
PARTIAL_WAVE_GUESSTYPE	src/apps/chem/PNOParameters.h	/^enum GuessType{PARTIAL_WAVE_GUESSTYPE,FROM_FILE_GUESSTYPE,PREDEFINED_GUESSTYPE,SCF_GUESSTYPE,EXOP_GUESSTYPE,EMPTY_GUESSTYPE,PSI4_GUESSTYPE,UNKNOWN_GUESSTYPE};$/;"	e	enum:madness::GuessType
PARTICLE	src/apps/chem/CCStructures.h	/^  enum FuncType {UNDEFINED,HOLE,PARTICLE,MIXED,RESPONSE};$/;"	e	enum:madness::FuncType
PBS script for LI red	doc/Latex/apps/moldft/manual.tex	/^\\subsection{PBS script for LI-red}$/;"	b
PBS script for SeaWulf	doc/Latex/apps/moldft/manual.tex	/^\\subsection{PBS script for SeaWulf}$/;"	b
PCM	src/apps/chem/pcm.cc	/^PCM::PCM(World& world, const Molecule& mol, const std::string pcm_data,$/;"	f	class:madness::PCM
PCM	src/apps/chem/pcm.h	/^class PCM {$/;"	c	namespace:madness
PERMUTATION	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    PERMUTATION,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
PERMUTATION_VECTOR	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    PERMUTATION_VECTOR,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
PI	src/apps/hf/mentity.cc	/^static const double PI = 3.1415926535897932384;$/;"	v	file:
PI	src/apps/hf/test_be.cc	/^const double PI = 3.1415926535897932384;$/;"	v
PI	src/apps/hf/test_he.cc	/^const double PI = 3.1415926535897932384;$/;"	v
PI	src/apps/hf/test_hf.cc	/^const double PI = 3.1415926535897932384;$/;"	v
PI	src/apps/hf/test_hydro.cc	/^const double PI = 3.1415926535897932384;$/;"	v
PI	src/apps/hf/test_xc.cc	/^const double PI = 3.1415926535897932384;$/;"	v
PI	src/apps/nick/projPsi.cc	/^const double PI = M_PI;$/;"	v
PI	src/apps/nick/spawnK.py	/^  PI = 3.14159265358979$/;"	v
PI	src/apps/nick/wavef.cc	/^const double baseWF::PI = M_PI;$/;"	m	class:baseWF	file:
PI	src/apps/nick/wavef.h	/^    static const double PI;$/;"	m	class:baseWF
PI	src/apps/polar/molecule.cc	/^static const double PI = 3.1415926535897932384;$/;"	v	file:
PI	src/madness/mra/testsuite.cc	/^const double PI = 3.1415926535897932384;$/;"	v
PI	src/madness/mra/testvmra.cc	/^const double PI = 3.1415926535897932384;$/;"	v
PIVOT_SEQUENCE	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    PIVOT_SEQUENCE,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	301;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	304;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	307;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	310;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	313;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	316;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	319;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	322;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	325;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	328;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	331;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	334;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	337;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	340;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	343;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	346;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	349;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	352;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	355;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	358;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	361;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	373;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	377;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	380;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	383;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	386;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	389;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	393;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	292;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	295;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	298;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	301;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	304;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	307;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	310;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	313;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	316;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	319;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	322;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	325;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	331;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	334;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	337;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	340;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	343;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	346;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	349;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	352;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	355;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	358;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	361;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	368;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	371;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	374;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	377;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	384;"	d	file:
PMR_comm_eigvals	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^int PMR_comm_eigvals(MPI_Comm comm, int *nz, int *myfirstp, double *W)$/;"	f
PMR_create_c_task	src/madness/external/elemental/external/pmrrr/src/tasks.c	/^task_t *PMR_create_c_task(int first, int last, int depth, $/;"	f
PMR_create_counter	src/madness/external/elemental/external/pmrrr/src/counter.c	/^counter_t *PMR_create_counter(int init_value)$/;"	f
PMR_create_empty_queue	src/madness/external/elemental/external/pmrrr/src/queue.c	/^queue_t *PMR_create_empty_queue(void)$/;"	f
PMR_create_r_task	src/madness/external/elemental/external/pmrrr/src/tasks.c	/^task_t *PMR_create_r_task(int begin, int end, double *D,$/;"	f
PMR_create_rrr	src/madness/external/elemental/external/pmrrr/src/rrr.c	/^rrr_t *PMR_create_rrr(double *restrict D, double *restrict L,$/;"	f
PMR_create_s_task	src/madness/external/elemental/external/pmrrr/src/tasks.c	/^task_t *PMR_create_s_task(int first, int last, int depth,$/;"	f
PMR_decrement_counter	src/madness/external/elemental/external/pmrrr/src/counter.c	/^int PMR_decrement_counter(counter_t *counter, int amount)$/;"	f
PMR_destroy_counter	src/madness/external/elemental/external/pmrrr/src/counter.c	/^void PMR_destroy_counter(counter_t *counter)$/;"	f
PMR_destroy_queue	src/madness/external/elemental/external/pmrrr/src/queue.c	/^void PMR_destroy_queue(queue_t *queue)$/;"	f
PMR_get_counter_value	src/madness/external/elemental/external/pmrrr/src/counter.c	/^int PMR_get_counter_value(counter_t *counter)$/;"	f
PMR_get_num_tasks	src/madness/external/elemental/external/pmrrr/src/queue.c	/^int PMR_get_num_tasks(queue_t *queue)$/;"	f
PMR_increment_counter	src/madness/external/elemental/external/pmrrr/src/counter.c	/^int PMR_increment_counter(counter_t *counter, int amount)$/;"	f
PMR_increment_rrr_dependencies	src/madness/external/elemental/external/pmrrr/src/rrr.c	/^int PMR_increment_rrr_dependencies(rrr_t *RRR)$/;"	f
PMR_insert_task_at_back	src/madness/external/elemental/external/pmrrr/src/queue.c	/^int PMR_insert_task_at_back(queue_t *queue, task_t *task)$/;"	f
PMR_insert_task_at_front	src/madness/external/elemental/external/pmrrr/src/queue.c	/^int PMR_insert_task_at_front(queue_t *queue, task_t *task)$/;"	f
PMR_process_c_task	src/madness/external/elemental/external/pmrrr/src/process_c_task.c	/^int PMR_process_c_task(cluster_t *cl, int tid, proc_t *procinfo,$/;"	f
PMR_process_r_queue	src/madness/external/elemental/external/pmrrr/src/process_r_task.c	/^void PMR_process_r_queue(int tid, proc_t *procinfo, val_t *Wstruct, $/;"	f
PMR_process_r_task	src/madness/external/elemental/external/pmrrr/src/process_r_task.c	/^int PMR_process_r_task(refine_t *rf, proc_t *procinfo, $/;"	f
PMR_process_s_task	src/madness/external/elemental/external/pmrrr/src/process_s_task.c	/^int PMR_process_s_task(singleton_t *sng, int tid, proc_t *procinfo,$/;"	f
PMR_remove_task_at_back	src/madness/external/elemental/external/pmrrr/src/queue.c	/^task_t *PMR_remove_task_at_back (queue_t *queue)$/;"	f
PMR_remove_task_at_front	src/madness/external/elemental/external/pmrrr/src/queue.c	/^task_t *PMR_remove_task_at_front(queue_t *queue)$/;"	f
PMR_reset_rrr	src/madness/external/elemental/external/pmrrr/src/rrr.c	/^rrr_t *PMR_reset_rrr(rrr_t *RRR, double *restrict D, $/;"	f
PMR_set_copied_parent_rrr_flag	src/madness/external/elemental/external/pmrrr/src/rrr.c	/^int PMR_set_copied_parent_rrr_flag(rrr_t *RRR, bool val)$/;"	f
PMR_set_counter_value	src/madness/external/elemental/external/pmrrr/src/counter.c	/^inline int PMR_set_counter_value(counter_t *counter, int value)$/;"	f
PMR_set_parent_processed_flag	src/madness/external/elemental/external/pmrrr/src/rrr.c	/^int PMR_set_parent_processed_flag(rrr_t *RRR)$/;"	f
PMR_try_destroy_rrr	src/madness/external/elemental/external/pmrrr/src/rrr.c	/^int PMR_try_destroy_rrr(rrr_t *RRR)$/;"	f
PM_q	src/apps/chem/distpm.cc	/^static inline double PM_q(const tensorT & S, const double * MADNESS_RESTRICT Ci, const double * MADNESS_RESTRICT Cj, int lo, int nbf)$/;"	f	namespace:madness
PM_q	src/apps/polar/distpm.cc	/^static inline double PM_q(const tensorT & S, const double * MADNESS_RESTRICT Ci, const double * MADNESS_RESTRICT Cj, int lo, int nbf)$/;"	f	file:
PM_q	src/apps/polar/moldft.cc	/^    double PM_q(const tensorT &S, const double *MADNESS_RESTRICT Ci, const double *MADNESS_RESTRICT Cj, int lo, int nbf)$/;"	f	struct:Calculation
PNG	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    PNG,$/;"	e	enum:elem::FileFormatNS::FileFormat
PNO	src/apps/chem/PNO.h	/^	PNO(World& world, const Nemo& nemo, const PNOParameters& parameters, const F12Parameters& paramf12)$/;"	f	class:madness::PNO
PNO	src/apps/chem/PNO.h	/^class PNO {$/;"	c	namespace:madness
PNOPARAMETERS_H_	src/apps/chem/PNOParameters.h	9;"	d
PNOPairs	src/apps/chem/PNOStructures.h	/^	PNOPairs(const PairType& t, const size_t& n) :  type(t), nocc(n), npairs(n*(n+1)\/2) , S_ij_ik(n), S_ij_kj(n) {initialize(n);}$/;"	f	struct:madness::PNOPairs
PNOPairs	src/apps/chem/PNOStructures.h	/^	PNOPairs(const PairType& t, const size_t& n, const CISData& c): type(t), nocc(n), npairs(n*(n+1)\/2), cis(c), S_ij_ik(n), S_ij_kj(n)$/;"	f	struct:madness::PNOPairs
PNOPairs	src/apps/chem/PNOStructures.h	/^struct PNOPairs{$/;"	s	namespace:madness
PNOParameters	src/apps/chem/PNOParameters.h	/^	PNOParameters() : QCCalculationParametersBase(){$/;"	f	class:madness::PNOParameters
PNOParameters	src/apps/chem/PNOParameters.h	/^	PNOParameters(World& world, const std::string& inputfile, const Molecule& molecule, const std::string& TAG="pno") : QCCalculationParametersBase(){$/;"	f	class:madness::PNOParameters
PNOParameters	src/apps/chem/PNOParameters.h	/^	PNOParameters(World& world, const std::string& inputfile, const std::string& TAG="pno") : QCCalculationParametersBase(){$/;"	f	class:madness::PNOParameters
PNOParameters	src/apps/chem/PNOParameters.h	/^	PNOParameters(const QCCalculationParametersBase& param) : QCCalculationParametersBase(param){$/;"	f	class:madness::PNOParameters
PNOParameters	src/apps/chem/PNOParameters.h	/^class PNOParameters: public QCCalculationParametersBase {$/;"	c	namespace:madness
POPERATOR_H_	src/apps/hf/poperator.h	34;"	d
POT_F3D_	src/apps/chem/CCStructures.h	/^    POT_F3D_,$/;"	e	enum:madness::PotentialType
POT_UNDEFINED	src/apps/chem/CCStructures.h	/^  enum PotentialType {POT_UNDEFINED,$/;"	e	enum:madness::PotentialType
POT_ccs_	src/apps/chem/CCStructures.h	/^    POT_ccs_,$/;"	e	enum:madness::PotentialType
POT_cis_	src/apps/chem/CCStructures.h	/^    POT_cis_,$/;"	e	enum:madness::PotentialType
POT_s2b_	src/apps/chem/CCStructures.h	/^    POT_s2b_,$/;"	e	enum:madness::PotentialType
POT_s2c_	src/apps/chem/CCStructures.h	/^    POT_s2c_,$/;"	e	enum:madness::PotentialType
POT_s3a_	src/apps/chem/CCStructures.h	/^    POT_s3a_,$/;"	e	enum:madness::PotentialType
POT_s3b_	src/apps/chem/CCStructures.h	/^    POT_s3b_,$/;"	e	enum:madness::PotentialType
POT_s3c_	src/apps/chem/CCStructures.h	/^    POT_s3c_,$/;"	e	enum:madness::PotentialType
POT_s4a_	src/apps/chem/CCStructures.h	/^    POT_s4a_,$/;"	e	enum:madness::PotentialType
POT_s4b_	src/apps/chem/CCStructures.h	/^    POT_s4b_,$/;"	e	enum:madness::PotentialType
POT_s4c_	src/apps/chem/CCStructures.h	/^    POT_s4c_,$/;"	e	enum:madness::PotentialType
POT_s5a_	src/apps/chem/CCStructures.h	/^    POT_s5a_,$/;"	e	enum:madness::PotentialType
POT_s5b_	src/apps/chem/CCStructures.h	/^    POT_s5b_,$/;"	e	enum:madness::PotentialType
POT_s5c_	src/apps/chem/CCStructures.h	/^    POT_s5c_,$/;"	e	enum:madness::PotentialType
POT_s6_	src/apps/chem/CCStructures.h	/^    POT_s6_,$/;"	e	enum:madness::PotentialType
POT_singles_	src/apps/chem/CCStructures.h	/^    POT_singles_};$/;"	e	enum:madness::PotentialType
PPLARRE_H	src/madness/external/elemental/external/pmrrr/include/plarre.h	42;"	d
PPLARRV_H	src/madness/external/elemental/external/pmrrr/include/plarrv.h	42;"	d
PPM	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    PPM,$/;"	e	enum:elem::FileFormatNS::FileFormat
PPMRRR_H	src/madness/external/elemental/external/pmrrr/include/pmrrr.h	42;"	d
PPROCESS_TASK_H	src/madness/external/elemental/external/pmrrr/include/process_task.h	42;"	d
PREDEFINED_GUESSTYPE	src/apps/chem/PNOParameters.h	/^enum GuessType{PARTIAL_WAVE_GUESSTYPE,FROM_FILE_GUESSTYPE,PREDEFINED_GUESSTYPE,SCF_GUESSTYPE,EXOP_GUESSTYPE,EMPTY_GUESSTYPE,PSI4_GUESSTYPE,UNKNOWN_GUESSTYPE};$/;"	e	enum:madness::GuessType
PREFIX	cmake/Makefile	/^PREFIX := $(PWD)$/;"	m
PRINT	src/apps/nick/lineplot.cc	8;"	d	file:
PRINT	src/apps/nick/test.cc	46;"	d	file:
PRINT	src/apps/nick/wavef.h	59;"	d
PRINT	src/apps/nick/wfSlice.cc	48;"	d	file:
PRINT	src/examples/derivatives.cc	197;"	d	file:
PRINTLINE	src/apps/nick/lineplot.cc	9;"	d	file:
PRINTLINE	src/apps/nick/test.cc	47;"	d	file:
PRINTLINE	src/apps/nick/wavef.h	60;"	d
PRINTLINE	src/apps/nick/wfSlice.cc	49;"	d	file:
PROD	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op PROD = MPI_PROD;$/;"	m	namespace:elem::mpi
PROFILE_BLOCK	src/madness/world/worldprofile.h	193;"	d
PROFILE_FUNC	src/madness/world/worldprofile.h	197;"	d
PROFILE_MEMBER_FUNC	src/madness/world/worldprofile.h	201;"	d
PROFILE_STRINGIFY	src/madness/world/worldprofile.h	191;"	d
PROJECTED_ENERGYTYPE	src/apps/chem/PNOParameters.h	/^enum EnergyType{PROJECTED_ENERGYTYPE,HYLLERAAS_ENERGYTYPE,UNKNOWN_ENERGYTYPE};$/;"	e	enum:madness::EnergyType
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	1970;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	1984;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	320;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	1059;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	218;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	225;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	202;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	205;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	221;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	220;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	200;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	238;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	186;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	204;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	204;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	204;"	d	file:
PROTO	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	204;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	1840;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	1850;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	451;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/General.cpp	3282;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	682;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	227;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	203;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	484;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	307;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	305;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	203;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	238;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	271;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	326;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	331;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	330;"	d	file:
PROTO	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	336;"	d	file:
PROTO	src/madness/external/elemental/src/lapack-like/HermitianTridiag.cpp	139;"	d	file:
PSI4_GUESSTYPE	src/apps/chem/PNOParameters.h	/^enum GuessType{PARTIAL_WAVE_GUESSTYPE,FROM_FILE_GUESSTYPE,PREDEFINED_GUESSTYPE,SCF_GUESSTYPE,EXOP_GUESSTYPE,EMPTY_GUESSTYPE,PSI4_GUESSTYPE,UNKNOWN_GUESSTYPE};$/;"	e	enum:madness::GuessType
PT_DECOMPOSED	src/apps/chem/CCStructures.h	/^  enum PairFormat {PT_UNDEFINED, PT_FULL, PT_DECOMPOSED, PT_OP_DECOMPOSED};$/;"	e	enum:madness::PairFormat
PT_FULL	src/apps/chem/CCStructures.h	/^  enum PairFormat {PT_UNDEFINED, PT_FULL, PT_DECOMPOSED, PT_OP_DECOMPOSED};$/;"	e	enum:madness::PairFormat
PT_OP_DECOMPOSED	src/apps/chem/CCStructures.h	/^  enum PairFormat {PT_UNDEFINED, PT_FULL, PT_DECOMPOSED, PT_OP_DECOMPOSED};$/;"	e	enum:madness::PairFormat
PT_UNDEFINED	src/apps/chem/CCStructures.h	/^  enum PairFormat {PT_UNDEFINED, PT_FULL, PT_DECOMPOSED, PT_OP_DECOMPOSED};$/;"	e	enum:madness::PairFormat
PWFunctor	src/apps/moldft/testcosine.cc	/^    PWFunctor(const std::vector<coord_3d>& gvecs, const real_tensor& coeffs, const double& L)$/;"	f	class:PWFunctor
PWFunctor	src/apps/moldft/testcosine.cc	/^class PWFunctor: public FunctionFunctorInterface<double_complex,3> {$/;"	c	file:
Pad	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^inline int Pad( int count ) { return std::max(count,MIN_COLL_MSG); }$/;"	f	namespace:elem::mpi
PairEnergies	src/apps/chem/PNOStructures.h	/^	PairEnergies(){}$/;"	f	struct:madness::PairEnergies
PairEnergies	src/apps/chem/PNOStructures.h	/^	PairEnergies(const size_t& npairs): eijs(npairs),eijt(npairs),eijs_f12(npairs),eijt_f12(npairs),eij(npairs),energy(0.0),energy_f12(0.0){}$/;"	f	struct:madness::PairEnergies
PairEnergies	src/apps/chem/PNOStructures.h	/^struct PairEnergies{$/;"	s	namespace:madness
PairFormat	src/apps/chem/CCStructures.h	/^  enum PairFormat {PT_UNDEFINED, PT_FULL, PT_DECOMPOSED, PT_OP_DECOMPOSED};$/;"	g	namespace:madness
PairType	src/apps/chem/PNOParameters.h	/^enum PairType{MP2_PAIRTYPE,CISPD_PAIRTYPE,ALL_PAIRTYPE,NONE_PAIRTYPE,UNKNOWN_PAIRTYPE};$/;"	g	namespace:madness
Pairs	src/apps/chem/CCStructures.h	/^  struct Pairs {$/;"	s	namespace:madness
Pairs	src/apps/chem/mp2.h	/^        struct Pairs {$/;"	s	class:madness::MP2
Panel	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Panel.hpp	/^Panel$/;"	f	namespace:elem::lu
Panel	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Panel.hpp	/^Panel( Matrix<F>& A, Matrix<Int>& pivots )$/;"	f	namespace:elem::lu
PanelBunchKaufmanA	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^PanelBunchKaufmanA$/;"	f	namespace:elem::ldl::pivot
PanelBunchKaufmanD	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^PanelBunchKaufmanD$/;"	f	namespace:elem::ldl::pivot
PanelFull	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^PanelFull$/;"	f	namespace:elem::cholesky::pivot
PanelFull	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^PanelFull( const Matrix<F>& A, const Matrix<F>& X, const Matrix<F>& Y )$/;"	f	namespace:elem::cholesky::pivot
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/PanelHouseholder.hpp	/^PanelHouseholder$/;"	f	namespace:elem::lq
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/PanelHouseholder.hpp	/^PanelHouseholder( DistMatrix<F>& A )$/;"	f	namespace:elem::lq
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/PanelHouseholder.hpp	/^PanelHouseholder( Matrix<F>& A )$/;"	f	namespace:elem::lq
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/PanelHouseholder.hpp	/^PanelHouseholder( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d )$/;"	f	namespace:elem::lq
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/PanelHouseholder.hpp	/^PanelHouseholder$/;"	f	namespace:elem::qr
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/PanelHouseholder.hpp	/^PanelHouseholder( DistMatrix<F>& A )$/;"	f	namespace:elem::qr
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/PanelHouseholder.hpp	/^PanelHouseholder( Matrix<F>& A )$/;"	f	namespace:elem::qr
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/PanelHouseholder.hpp	/^PanelHouseholder( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d )$/;"	f	namespace:elem::qr
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/PanelHouseholder.hpp	/^PanelHouseholder$/;"	f	namespace:elem::rq
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/PanelHouseholder.hpp	/^PanelHouseholder( DistMatrix<F>& A )$/;"	f	namespace:elem::rq
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/PanelHouseholder.hpp	/^PanelHouseholder( Matrix<F>& A )$/;"	f	namespace:elem::rq
PanelHouseholder	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/PanelHouseholder.hpp	/^PanelHouseholder( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d )$/;"	f	namespace:elem::rq
PanelPivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^PanelPivoted$/;"	f	namespace:elem::ldl
Parallel execution	doc/Latex/apps/moldft/manual.tex	/^\\section{Parallel execution}$/;"	s
ParallelInputArchive	src/madness/world/parallel_archive.h	/^            ParallelInputArchive() {}$/;"	f	class:madness::archive::ParallelInputArchive
ParallelInputArchive	src/madness/world/parallel_archive.h	/^            ParallelInputArchive(World& world, const char* filename, int nio=1) {$/;"	f	class:madness::archive::ParallelInputArchive
ParallelInputArchive	src/madness/world/parallel_archive.h	/^        class ParallelInputArchive : public BaseParallelArchive<BinaryFstreamInputArchive>, public  BaseInputArchive {$/;"	c	namespace:madness::archive
ParallelOutputArchive	src/madness/world/parallel_archive.h	/^            ParallelOutputArchive() {}$/;"	f	class:madness::archive::ParallelOutputArchive
ParallelOutputArchive	src/madness/world/parallel_archive.h	/^            ParallelOutputArchive(World& world, const char* filename, int nio=1)  {$/;"	f	class:madness::archive::ParallelOutputArchive
ParallelOutputArchive	src/madness/world/parallel_archive.h	/^        class ParallelOutputArchive : public BaseParallelArchive<BinaryFstreamOutputArchive>, public BaseOutputArchive {$/;"	c	namespace:madness::archive
ParallelSerializableObject	src/madness/world/parallel_archive.h	/^        class ParallelSerializableObject {};$/;"	c	namespace:madness::archive
ParamGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ParamGenerator(const ParamGenerator& other) : impl_(other.impl_) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  explicit ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class ParamGenerator {$/;"	c	namespace:testing::internal
ParamGeneratorInterface	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class ParamGeneratorInterface {$/;"	c	namespace:testing::internal
ParamIterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  explicit ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class ParamIterator {$/;"	c	namespace:testing::internal
ParamIteratorInterface	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class ParamIteratorInterface {$/;"	c	namespace:testing::internal
ParamType	src/madness/external/gtest/include/gtest/gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::WithParamInterface
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator10
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator9
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator8
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator7
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator6
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator5
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator4
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  typedef ::std::tr1::tuple<T1, T2, T3> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator3
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  typedef ::std::tr1::tuple<T1, T2> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator2
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef T ParamType;$/;"	t	class:testing::internal::ParamGeneratorInterface
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::TestMetaFactory
ParamType	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef typename TestClass::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestFactory
ParameterContainerT	src/apps/chem/QCCalculationParametersBase.h	/^	typedef std::map<std::string,QCParameter> ParameterContainerT;$/;"	t	class:madness::QCCalculationParametersBase
ParameterVectorContainerT	src/apps/chem/test_qc.cc	/^	typedef std::map<std::string,std::vector<QCParameter> > ParameterVectorContainerT;$/;"	t	class:TestCalculationParameters	file:
ParameterizedTestCaseInfo	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  explicit ParameterizedTestCaseInfo(const char* name)$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
ParameterizedTestCaseInfo	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class ParameterizedTestCaseInfo : public ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseInfoBase	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
ParameterizedTestCaseInfoBase	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseRegistry	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ParameterizedTestCaseRegistry() {}$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
ParameterizedTestCaseRegistry	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class ParameterizedTestCaseRegistry {$/;"	c	namespace:testing::internal
ParameterizedTestFactory	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  explicit ParameterizedTestFactory(ParamType parameter) :$/;"	f	class:testing::internal::ParameterizedTestFactory
ParameterizedTestFactory	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class ParameterizedTestFactory : public TestFactoryBase {$/;"	c	namespace:testing::internal
Parameters	src/apps/chem/CCStructures.h	/^		  Parameters(){};$/;"	f	struct:madness::CCConvolutionOperator::Parameters
Parameters	src/apps/chem/CCStructures.h	/^		  Parameters(const CCParameters& param): thresh_op(param.thresh_poisson), lo(param.lo), freeze(param.freeze), gamma(param.gamma()) {};$/;"	f	struct:madness::CCConvolutionOperator::Parameters
Parameters	src/apps/chem/CCStructures.h	/^	  struct Parameters{$/;"	s	struct:madness::CCConvolutionOperator
Parameters	src/apps/chem/TDHF.h	/^		Parameters() {$/;"	f	struct:madness::TDHF::Parameters
Parameters	src/apps/chem/TDHF.h	/^		Parameters(World& world, const std::shared_ptr<SCF>& scf, const std::string& input) {$/;"	f	struct:madness::TDHF::Parameters
Parameters	src/apps/chem/TDHF.h	/^		Parameters(const Parameters& other) : QCCalculationParametersBase(other) {}$/;"	f	struct:madness::TDHF::Parameters
Parameters	src/apps/chem/TDHF.h	/^	struct Parameters : public QCCalculationParametersBase {$/;"	s	class:madness::TDHF
Parameters	src/apps/chem/mp2.h	/^    	struct Parameters : public QCCalculationParametersBase {$/;"	s	class:madness::MP2
Parameters	src/apps/chem/mp2.h	/^        	Parameters(World& world) {$/;"	f	struct:madness::MP2::Parameters
Parameters	src/apps/chem/test_QCCalculationParametersBase.cc	/^	Parameters() : QCCalculationParametersBase() {$/;"	f	class:Parameters
Parameters	src/apps/chem/test_QCCalculationParametersBase.cc	/^class Parameters : public QCCalculationParametersBase {$/;"	c	file:
ParametrizedExchange	src/apps/chem/PNOStructures.h	/^	ParametrizedExchange(World & world, const Nemo& nemo_, const std::string& type_):$/;"	f	class:madness::ParametrizedExchange
ParametrizedExchange	src/apps/chem/PNOStructures.h	/^class ParametrizedExchange {$/;"	c	namespace:madness
Parent	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* Parent()							{ return parent; }$/;"	f	class:TiXmlNode
Parent	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* Parent() const				{ return parent; }$/;"	f	class:TiXmlNode
Parse	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlAttribute
Parse	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment
Parse	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:TiXmlDeclaration
Parse	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
Parse	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement
Parse	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText
Parse	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown
ParseBoolFlag	src/madness/external/gtest/src/gtest.cc	/^bool ParseBoolFlag(const char* str, const char* flag, bool* value) {$/;"	f	namespace:testing::internal
ParseCmdCode	src/madness/external/muParser/muParserBase.cpp	/^  value_type ParserBase::ParseCmdCode() const$/;"	f	class:mu::ParserBase
ParseFlagValue	src/madness/external/gtest/src/gtest.cc	/^const char* ParseFlagValue(const char* str,$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	src/madness/external/gtest/src/gtest.cc	/^void ParseGoogleTestFlagsOnly(int* argc, char** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	src/madness/external/gtest/src/gtest.cc	/^void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnlyImpl	src/madness/external/gtest/src/gtest.cc	/^void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
ParseInt32	src/madness/external/gtest/src/gtest-port.cc	/^bool ParseInt32(const Message& src_text, const char* str, Int32* value) {$/;"	f	namespace:testing::internal
ParseInt32Flag	src/madness/external/gtest/src/gtest.cc	/^bool ParseInt32Flag(const char* str, const char* flag, Int32* value) {$/;"	f	namespace:testing::internal
ParseInternalRunDeathTestFlag	src/madness/external/gtest/src/gtest-death-test.cc	/^InternalRunDeathTestFlag* ParseInternalRunDeathTestFlag() {$/;"	f	namespace:testing::internal
ParseNaturalNumber	src/madness/external/gtest/src/gtest-internal-inl.h	/^bool ParseNaturalNumber(const ::std::string& str, Integer* number) {$/;"	f	namespace:testing::internal
ParseString	src/madness/external/muParser/muParserBase.cpp	/^  value_type ParserBase::ParseString() const$/;"	f	class:mu::ParserBase
ParseStringFlag	src/madness/external/gtest/src/gtest.cc	/^bool ParseStringFlag(const char* str, const char* flag, std::string* value) {$/;"	f	namespace:testing::internal
ParseValue	src/madness/external/muParser/muParserBase.cpp	/^  value_type ParserBase::ParseValue() const$/;"	f	class:mu::ParserBase
Parser	src/madness/external/muParser/muParser.cpp	/^  Parser::Parser()$/;"	f	class:mu::Parser
Parser	src/madness/external/muParser/muParser.h	/^  class Parser : public ParserBase$/;"	c	namespace:mu
ParserBase	src/madness/external/muParser/muParserBase.cpp	/^  ParserBase::ParserBase()$/;"	f	class:mu::ParserBase
ParserBase	src/madness/external/muParser/muParserBase.cpp	/^  ParserBase::ParserBase(const ParserBase &a_Parser)$/;"	f	class:mu::ParserBase
ParserBase	src/madness/external/muParser/muParserBase.h	/^class ParserBase $/;"	c	namespace:mu
ParserByteCode	src/madness/external/muParser/muParserBytecode.cpp	/^  ParserByteCode::ParserByteCode()$/;"	f	class:mu::ParserByteCode
ParserByteCode	src/madness/external/muParser/muParserBytecode.cpp	/^  ParserByteCode::ParserByteCode(const ParserByteCode &a_ByteCode)$/;"	f	class:mu::ParserByteCode
ParserByteCode	src/madness/external/muParser/muParserBytecode.h	/^class ParserByteCode$/;"	c	namespace:mu
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback( fun_type2 a_pFun, bool a_bAllowOpti, int a_iPrec, ECmdCode a_iCode)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback()$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(const ParserCallback &a_Fun)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(fun_type0 a_pFun, bool a_bAllowOpti)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(fun_type1 a_pFun, bool a_bAllowOpti, int a_iPrec, ECmdCode a_iCode)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(fun_type3 a_pFun, bool a_bAllowOpti)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(fun_type4 a_pFun, bool a_bAllowOpti)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(fun_type5 a_pFun, bool a_bAllowOpti)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(multfun_type a_pFun, bool a_bAllowOpti)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(strfun_type1 a_pFun, bool a_bAllowOpti)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(strfun_type2 a_pFun, bool a_bAllowOpti)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.cpp	/^  ParserCallback::ParserCallback(strfun_type3 a_pFun, bool a_bAllowOpti)$/;"	f	class:mu::ParserCallback
ParserCallback	src/madness/external/muParser/muParserCallback.h	/^class ParserCallback$/;"	c	namespace:mu
ParserComplex	src/madness/external/muParser/muParserComplex.h	/^  class ParserComplex : private ParserBase$/;"	c	namespace:mu
ParserError	src/madness/external/muParser/muParserError.cpp	/^  ParserError::ParserError( EErrorCodes iErrc,$/;"	f	class:mu::ParserError
ParserError	src/madness/external/muParser/muParserError.cpp	/^  ParserError::ParserError()$/;"	f	class:mu::ParserError
ParserError	src/madness/external/muParser/muParserError.cpp	/^  ParserError::ParserError(EErrorCodes \/*a_iErrc*\/) $/;"	f	class:mu::ParserError
ParserError	src/madness/external/muParser/muParserError.cpp	/^  ParserError::ParserError(EErrorCodes iErrc, int iPos, const string_type &sTok) $/;"	f	class:mu::ParserError
ParserError	src/madness/external/muParser/muParserError.cpp	/^  ParserError::ParserError(const ParserError &a_Obj)$/;"	f	class:mu::ParserError
ParserError	src/madness/external/muParser/muParserError.cpp	/^  ParserError::ParserError(const char_type *szMsg, int iPos, const string_type &sTok) $/;"	f	class:mu::ParserError
ParserError	src/madness/external/muParser/muParserError.cpp	/^  ParserError::ParserError(const string_type &sMsg) $/;"	f	class:mu::ParserError
ParserError	src/madness/external/muParser/muParserError.h	/^\/* final *\/ class ParserError$/;"	c	namespace:mu
ParserErrorMsg	src/madness/external/muParser/muParserError.cpp	/^  ParserErrorMsg::ParserErrorMsg()$/;"	f	class:mu::ParserErrorMsg
ParserErrorMsg	src/madness/external/muParser/muParserError.cpp	/^  ParserErrorMsg::ParserErrorMsg(const ParserErrorMsg&)$/;"	f	class:mu::ParserErrorMsg
ParserErrorMsg	src/madness/external/muParser/muParserError.h	/^class ParserErrorMsg$/;"	c	namespace:mu
ParserHandler	src/madness/misc/phandler.h	/^    ParserHandler(std::string expr)   {$/;"	f	class:ParserHandler
ParserHandler	src/madness/misc/phandler.h	/^class ParserHandler : public madness::FunctionFunctorInterface<T, NDIM> {$/;"	c
ParserInt	src/madness/external/muParser/muParserInt.h	/^class ParserInt : public ParserBase$/;"	c	namespace:mu
ParserStack	src/madness/external/muParser/muParserStack.h	/^      ParserStack()$/;"	f	class:mu::ParserStack
ParserStack	src/madness/external/muParser/muParserStack.h	/^  class ParserStack $/;"	c	namespace:mu
ParserTester	src/madness/external/muParser/muParserTest.h	/^    class ParserTester \/\/ final$/;"	c	namespace:mu::Test
ParserToken	src/madness/external/muParser/muParserToken.h	/^      ParserToken()$/;"	f	class:mu::ParserToken
ParserToken	src/madness/external/muParser/muParserToken.h	/^      ParserToken(const ParserToken &a_Tok)$/;"	f	class:mu::ParserToken
ParserToken	src/madness/external/muParser/muParserToken.h	/^  class ParserToken$/;"	c	namespace:mu
ParserTokenReader	src/madness/external/muParser/muParserTokenReader.cpp	/^  ParserTokenReader::ParserTokenReader(ParserBase *a_pParent)$/;"	f	class:mu::ParserTokenReader
ParserTokenReader	src/madness/external/muParser/muParserTokenReader.cpp	/^  ParserTokenReader::ParserTokenReader(const ParserTokenReader &a_Reader)$/;"	f	class:mu::ParserTokenReader
ParserTokenReader	src/madness/external/muParser/muParserTokenReader.h	/^  class ParserTokenReader $/;"	c	namespace:mu
Parter	src/madness/external/elemental/include/elemental/matrices/Parter.hpp	/^Parter( BlockDistMatrix<F,U,V>& P, Int n )$/;"	f	namespace:elem
Parter	src/madness/external/elemental/include/elemental/matrices/Parter.hpp	/^Parter( DistMatrix<F,U,V>& P, Int n )$/;"	f	namespace:elem
Parter	src/madness/external/elemental/include/elemental/matrices/Parter.hpp	/^Parter( Matrix<F>& P, Int n )$/;"	f	namespace:elem
Partial	src/madness/external/elemental/include/elemental/core/Timer/impl.hpp	/^Timer::Partial() const$/;"	f	class:elem::Timer
PartialColAllGather	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialColAllGather$/;"	f	class:elem::GeneralBlockDistMatrix
PartialColAllGather	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialColAllGather( DistMatrix<T,UPart,V>& A ) const$/;"	f	class:elem::GeneralDistMatrix
PartialColAllToAll	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialColAllToAll$/;"	f	class:elem::GeneralBlockDistMatrix
PartialColAllToAll	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialColAllToAll$/;"	f	class:elem::GeneralDistMatrix
PartialColAllToAllFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialColAllToAllFrom$/;"	f	class:elem::GeneralBlockDistMatrix
PartialColAllToAllFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialColAllToAllFrom$/;"	f	class:elem::GeneralDistMatrix
PartialColComm	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialColComm() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialColComm	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^mpi::Comm BDM::PartialColComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
PartialColComm	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^mpi::Comm BDM::PartialColComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
PartialColComm	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialColComm() const$/;"	f	class:elem::AbstractDistMatrix
PartialColComm	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^mpi::Comm DM::PartialColComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
PartialColComm	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^mpi::Comm DM::PartialColComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
PartialColFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialColFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
PartialColFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialColFilterFrom( const DistMatrix<T,UPart,V>& A )$/;"	f	class:elem::GeneralDistMatrix
PartialColRank	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialColRank() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialColRank	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialColRank() const$/;"	f	class:elem::AbstractDistMatrix
PartialColStride	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialColStride() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialColStride	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^Int BDM::PartialColStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
PartialColStride	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^Int BDM::PartialColStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
PartialColStride	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialColStride() const$/;"	f	class:elem::AbstractDistMatrix
PartialColStride	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^Int DM::PartialColStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
PartialColStride	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^Int DM::PartialColStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
PartialColSumScatterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialColSumScatterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
PartialColSumScatterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialColSumScatterFrom$/;"	f	class:elem::GeneralDistMatrix
PartialColSumScatterUpdate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialColSumScatterUpdate$/;"	f	class:elem::GeneralBlockDistMatrix
PartialColSumScatterUpdate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialColSumScatterUpdate$/;"	f	class:elem::GeneralDistMatrix
PartialDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist PartialDist<VC>() { return MC; }$/;"	f	namespace:elem
PartialDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist PartialDist<VR>() { return MR; }$/;"	f	namespace:elem
PartialDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<Dist U> constexpr Dist PartialDist() { return U; }$/;"	f	namespace:elem
PartialMatch	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  static bool PartialMatch(const ::std::string& str, const RE& re) {$/;"	f	class:testing::internal::RE
PartialMatch	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  static bool PartialMatch(const ::string& str, const RE& re) {$/;"	f	class:testing::internal::RE
PartialMatch	src/madness/external/gtest/src/gtest-port.cc	/^bool RE::PartialMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
PartialRowAllGather	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialRowAllGather$/;"	f	class:elem::GeneralBlockDistMatrix
PartialRowAllGather	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialRowAllGather( DistMatrix<T,U,VPart>& A ) const$/;"	f	class:elem::GeneralDistMatrix
PartialRowAllToAll	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialRowAllToAll$/;"	f	class:elem::GeneralBlockDistMatrix
PartialRowAllToAll	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialRowAllToAll$/;"	f	class:elem::GeneralDistMatrix
PartialRowAllToAllFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialRowAllToAllFrom$/;"	f	class:elem::GeneralBlockDistMatrix
PartialRowAllToAllFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialRowAllToAllFrom$/;"	f	class:elem::GeneralDistMatrix
PartialRowComm	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialRowComm() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialRowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^mpi::Comm BDM::PartialRowComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
PartialRowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^mpi::Comm BDM::PartialRowComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
PartialRowComm	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialRowComm() const$/;"	f	class:elem::AbstractDistMatrix
PartialRowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^mpi::Comm DM::PartialRowComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
PartialRowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^mpi::Comm DM::PartialRowComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
PartialRowFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialRowFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
PartialRowFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialRowFilterFrom( const DistMatrix<T,U,VPart>& A )$/;"	f	class:elem::GeneralDistMatrix
PartialRowRank	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialRowRank() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialRowRank	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialRowRank() const$/;"	f	class:elem::AbstractDistMatrix
PartialRowStride	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialRowStride() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialRowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^Int BDM::PartialRowStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
PartialRowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^Int BDM::PartialRowStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
PartialRowStride	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialRowStride() const$/;"	f	class:elem::AbstractDistMatrix
PartialRowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^Int DM::PartialRowStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
PartialRowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^Int DM::PartialRowStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
PartialRowSumScatterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialRowSumScatterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
PartialRowSumScatterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialRowSumScatterFrom$/;"	f	class:elem::GeneralDistMatrix
PartialRowSumScatterUpdate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::PartialRowSumScatterUpdate$/;"	f	class:elem::GeneralBlockDistMatrix
PartialRowSumScatterUpdate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::PartialRowSumScatterUpdate$/;"	f	class:elem::GeneralDistMatrix
PartialUnionColComm	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialUnionColComm() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialUnionColComm	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^mpi::Comm BDM::PartialUnionColComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
PartialUnionColComm	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^mpi::Comm BDM::PartialUnionColComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
PartialUnionColComm	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialUnionColComm() const$/;"	f	class:elem::AbstractDistMatrix
PartialUnionColComm	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^mpi::Comm DM::PartialUnionColComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
PartialUnionColComm	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^mpi::Comm DM::PartialUnionColComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
PartialUnionColRank	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialUnionColRank() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialUnionColRank	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialUnionColRank() const$/;"	f	class:elem::AbstractDistMatrix
PartialUnionColStride	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialUnionColStride() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialUnionColStride	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^Int BDM::PartialUnionColStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
PartialUnionColStride	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^Int BDM::PartialUnionColStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
PartialUnionColStride	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialUnionColStride() const$/;"	f	class:elem::AbstractDistMatrix
PartialUnionColStride	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^Int DM::PartialUnionColStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
PartialUnionColStride	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^Int DM::PartialUnionColStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
PartialUnionRowComm	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialUnionRowComm() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialUnionRowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^mpi::Comm BDM::PartialUnionRowComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
PartialUnionRowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^mpi::Comm BDM::PartialUnionRowComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
PartialUnionRowComm	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialUnionRowComm() const$/;"	f	class:elem::AbstractDistMatrix
PartialUnionRowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^mpi::Comm DM::PartialUnionRowComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
PartialUnionRowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^mpi::Comm DM::PartialUnionRowComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
PartialUnionRowRank	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialUnionRowRank() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialUnionRowRank	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialUnionRowRank() const$/;"	f	class:elem::AbstractDistMatrix
PartialUnionRowStride	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::PartialUnionRowStride() const$/;"	f	class:elem::AbstractBlockDistMatrix
PartialUnionRowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^Int BDM::PartialUnionRowStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
PartialUnionRowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^Int BDM::PartialUnionRowStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
PartialUnionRowStride	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::PartialUnionRowStride() const$/;"	f	class:elem::AbstractDistMatrix
PartialUnionRowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^Int DM::PartialUnionRowStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
PartialUnionRowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^Int DM::PartialUnionRowStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
Participating	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Participating() const$/;"	f	class:elem::AbstractBlockDistMatrix
Participating	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Participating() const$/;"	f	class:elem::AbstractDistMatrix
PartitionDown	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionDown$/;"	f	namespace:elem
PartitionDownDiagonal	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionDownDiagonal$/;"	f	namespace:elem
PartitionDownOffsetDiagonal	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionDownOffsetDiagonal$/;"	f	namespace:elem
PartitionLeft	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionLeft( DM& A, DM& AL, DM& AR, Int widthAR=Blocksize() )$/;"	f	namespace:elem
PartitionLeft	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionLeft( M& A, M& AL, M& AR, Int widthAR=Blocksize() )$/;"	f	namespace:elem
PartitionRight	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionRight( DM& A, DM& AL, DM& AR, Int widthAL=Blocksize() )$/;"	f	namespace:elem
PartitionRight	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionRight( M& A, M& AL, M& AR, Int widthAL=Blocksize() )$/;"	f	namespace:elem
PartitionUp	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionUp$/;"	f	namespace:elem
PartitionUpDiagonal	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionUpDiagonal$/;"	f	namespace:elem
PartitionUpOffsetDiagonal	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^PartitionUpOffsetDiagonal$/;"	f	namespace:elem
Passed	src/madness/external/gtest/include/gtest/gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestCase
Passed	src/madness/external/gtest/include/gtest/gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestResult
Passed	src/madness/external/gtest/src/gtest-death-test.cc	/^bool DeathTestImpl::Passed(bool status_ok) {$/;"	f	class:testing::internal::DeathTestImpl
Passed	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::internal::UnitTestImpl
Passed	src/madness/external/gtest/src/gtest.cc	/^bool UnitTest::Passed() const { return impl()->Passed(); }$/;"	f	class:testing::UnitTest
PatternMatchesString	src/madness/external/gtest/src/gtest.cc	/^bool UnitTestOptions::PatternMatchesString(const char *pattern,$/;"	f	class:testing::internal::UnitTestOptions
Pcol	src/apps/ii/systolic.h	/^        const int64_t Pcol;             \/\/< Column of processor grid for this processor$/;"	m	class:madness::DistributedMatrix
Pcol	src/madness/tensor/distributed_matrix.h	/^        int64_t Pcol;             \/\/\/< Column of processor grid for this processor$/;"	m	class:madness::DistributedMatrixDistribution
Pcoldim	src/apps/ii/systolic.h	/^        const int64_t Pcoldim;          \/\/< Column dimension of processor grid$/;"	m	class:madness::DistributedMatrix
Pcoldim	src/madness/tensor/distributed_matrix.h	/^        int64_t Pcoldim;          \/\/\/< Column dimension of processor grid$/;"	m	class:madness::DistributedMatrixDistribution
Peasant	src/madness/world/test_hashthreaded.cc	/^    Peasant(ConcurrentHashMap<int,double>& a)$/;"	f	class:Peasant
Peasant	src/madness/world/test_hashthreaded.cc	/^class Peasant : public madness::ThreadBase {$/;"	c	file:
Pei	src/madness/external/elemental/include/elemental/matrices/Pei.hpp	/^Pei( BlockDistMatrix<T,U,V>& P, Int n, T alpha )$/;"	f	namespace:elem
Pei	src/madness/external/elemental/include/elemental/matrices/Pei.hpp	/^Pei( DistMatrix<T,U,V>& P, Int n, T alpha )$/;"	f	namespace:elem
Pei	src/madness/external/elemental/include/elemental/matrices/Pei.hpp	/^Pei( Matrix<T>& P, Int n, T alpha )$/;"	f	namespace:elem
PendingMsg	src/madness/world/world_object.h	/^            PendingMsg(uniqueidT id, am_handlerT handler, const AmArg& arg)$/;"	f	struct:madness::detail::PendingMsg
PendingMsg	src/madness/world/world_object.h	/^        struct PendingMsg {$/;"	s	namespace:madness::detail
Perform	src/madness/misc/cfft.cc	/^void CFFT::Perform(double_complex *const Data, const unsigned int N, const bool Inverse \/* = false *\/)$/;"	f	class:CFFT
PeriodicBSHOp	src/apps/hf/poperator.h	/^  SeparatedConvolution<Q, NDIM> PeriodicBSHOp(World& world, double mu, long k, double lo, double eps, Tensor<double> L)$/;"	f	namespace:madness
PeriodicBSHOpPtr	src/apps/hf/poperator.h	/^  SeparatedConvolution<Q, NDIM>* PeriodicBSHOpPtr(World& world, double mu, long k, double lo, double eps, Tensor<double> L)$/;"	f	namespace:madness
PeriodicBSHOperator3D	src/madness/mra/operator.h	/^    SeparatedConvolution<double_complex,3> PeriodicBSHOperator3D(World& world,$/;"	f	namespace:madness
PeriodicBSHOperatorPtr3D	src/madness/mra/operator.h	/^    SeparatedConvolution<double_complex,3>* PeriodicBSHOperatorPtr3D(World& world,$/;"	f	namespace:madness
PeriodicCoulombOp	src/apps/hf/poperator.h	/^  SeparatedConvolution<Q, NDIM> PeriodicCoulombOp(World& world, long k, double lo, double eps, Tensor<double> L)$/;"	f	namespace:madness
PeriodicCoulombOpPtr	src/apps/hf/poperator.h	/^  SeparatedConvolution<Q, NDIM>* PeriodicCoulombOpPtr(World& world, long k, double lo, double eps, Tensor<double> L)$/;"	f	namespace:madness
PeriodicHFExchangeOperator	src/madness/mra/operator.h	/^    SeparatedConvolution<double_complex,3> PeriodicHFExchangeOperator(World& world,$/;"	f	namespace:madness
PermutationMeta	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^inline PermutationMeta::PermutationMeta$/;"	f	class:elem::PermutationMeta
PermutationMeta	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^struct PermutationMeta$/;"	s	namespace:elem
PermutationParity	src/madness/external/elemental/include/elemental/lapack-like/util/PermutationParity.hpp	/^PermutationParity( const DistMatrix<Int,UPerm,STAR>& origPerm ) $/;"	f	namespace:elem
PermutationParity	src/madness/external/elemental/include/elemental/lapack-like/util/PermutationParity.hpp	/^PermutationParity( const Matrix<Int>& origPerm )$/;"	f	namespace:elem
PermuteCols	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteCols.hpp	/^PermuteCols$/;"	f	namespace:elem
PermuteCols	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteCols.hpp	/^PermuteCols( DistMatrix<T,U,V>& A, const PermutationMeta& oldMeta )$/;"	f	namespace:elem
PermuteCols	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteCols.hpp	/^PermuteCols( Matrix<T>& A, const Matrix<Int>& perm )$/;"	f	namespace:elem
PermuteCols	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteCols.hpp	/^PermuteCols( Matrix<T>& A, const Matrix<Int>& perm, const Matrix<Int>& invPerm )$/;"	f	namespace:elem
PermuteRows	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteRows.hpp	/^PermuteRows$/;"	f	namespace:elem
PermuteRows	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteRows.hpp	/^PermuteRows( DistMatrix<T,U,V>& A, const DistMatrix<Int,UPerm,STAR>& perm )$/;"	f	namespace:elem
PermuteRows	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteRows.hpp	/^PermuteRows( DistMatrix<T,U,V>& A, const PermutationMeta& oldMeta )$/;"	f	namespace:elem
PermuteRows	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteRows.hpp	/^PermuteRows( Matrix<T>& A, const Matrix<Int>& perm )$/;"	f	namespace:elem
Phase	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^    Phase( Int n ) : n_(n), pi_(4*Atan(Real(1))) { }$/;"	f	class:Phase
Phase	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^class Phase {$/;"	c	file:
PhiK	src/apps/nick/wavef.cc	/^PhiK::PhiK(World& world, const double Z, const vector3D& kVec, const double cutoff)$/;"	f	class:PhiK
PhiK	src/apps/nick/wavef.cc	/^PhiK::PhiK(const double Z, const vector3D& kVec, const double cutoff)$/;"	f	class:PhiK
PhiK	src/apps/nick/wavef.h	/^class PhiK : public ScatteringWF {$/;"	c
PhiKAdaptor	src/apps/nick/projPsi.cc	/^    PhiKAdaptor(PhiK& phik) : phik(phik) {}$/;"	f	struct:PhiKAdaptor
PhiKAdaptor	src/apps/nick/projPsi.cc	/^struct PhiKAdaptor : public FunctionFunctorInterface<std::complex<double>,3> {$/;"	s	file:
PhiKAdaptor	src/apps/nick/test.cc	/^    PhiKAdaptor(World& world, PhiK& phik) : phik(phik) {$/;"	f	struct:PhiKAdaptor
PhiKAdaptor	src/apps/nick/test.cc	/^struct PhiKAdaptor : public FunctionFunctorInterface<std::complex<double>,3> {$/;"	s	file:
PhiKAdaptor	src/apps/nick/wfSlice.cc	/^    PhiKAdaptor(World& world, PhiK& phik) : phik(phik) {$/;"	f	struct:PhiKAdaptor
PhiKAdaptor	src/apps/nick/wfSlice.cc	/^struct PhiKAdaptor : public FunctionFunctorInterface<std::complex<double>,3> {$/;"	s	file:
Phikl	src/apps/nick/wavef.cc	/^Phikl::Phikl(World& world, const double Z, const double k, const int l, const double cutoff) $/;"	f	class:Phikl
Phikl	src/apps/nick/wavef.cc	/^Phikl::Phikl(const double Z, const double k, const int l, const double cutoff) $/;"	f	class:Phikl
Phikl	src/apps/nick/wavef.h	/^class Phikl : public ScatteringWF {$/;"	c
Pi	src/madness/external/elemental/include/elemental/core/random/decl.hpp	/^const double Pi = 3.141592653589793;$/;"	m	namespace:elem
Ping	src/madness/external/muParser/muParserTest.h	/^        static value_type Ping()$/;"	f	class:mu::Test::ParserTester
PivotParity	src/madness/external/elemental/include/elemental/lapack-like/util/PivotParity.hpp	/^PivotParity( const DistMatrix<Int,VC,STAR>& p, Int pivotOffset=0 ) $/;"	f	namespace:elem
PivotParity	src/madness/external/elemental/include/elemental/lapack-like/util/PivotParity.hpp	/^PivotParity( const Matrix<Int>& p, Int pivotOffset=0 )$/;"	f	namespace:elem
Pivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^Pivoted$/;"	f	namespace:elem::ldl
PivotedQR	src/madness/external/elemental/include/elemental/convex/SVT/PivotedQR.hpp	/^PivotedQR( DistMatrix<F>& A, Base<F> tau, Int numSteps, bool relative=false )$/;"	f	namespace:elem::svt
PivotedQR	src/madness/external/elemental/include/elemental/convex/SVT/PivotedQR.hpp	/^PivotedQR( Matrix<F>& A, Base<F> tau, Int numSteps, bool relative=false )$/;"	f	namespace:elem::svt
PivotsToInversePermutation	src/madness/external/elemental/include/elemental/lapack-like/perm/PivotsToPermutation.hpp	/^PivotsToInversePermutation$/;"	f	namespace:elem
PivotsToPartialPermutation	src/madness/external/elemental/include/elemental/lapack-like/perm/PivotsToPartialPermutation.hpp	/^PivotsToPartialPermutation$/;"	f	namespace:elem
PivotsToPermutation	src/madness/external/elemental/include/elemental/lapack-like/perm/PivotsToPermutation.hpp	/^PivotsToPermutation$/;"	f	namespace:elem
Pl	src/apps/nick/extract.py	/^            Pl =  lines.pop(0)[0:-1]$/;"	v
PlaceList	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	/^PlaceList$/;"	f	namespace:elem::pspec
Planck_constant	src/madness/constants.h	/^        const double Planck_constant = 6.62606896e-34 ; \/\/    0.00000033e-34     J s$/;"	m	namespace:madness::constants
Planck_constant_over_2_pi	src/madness/constants.h	/^        const double Planck_constant_over_2_pi = 1.054571628e-34 ; \/\/   0.000000053e-34    J s$/;"	m	namespace:madness::constants
PlaneWaveFunctor	src/apps/chem/GuessFactory.h	/^	PlaneWaveFunctor(std::vector<double> vn,std::vector<bool> vc, const coord_3d& c) : L(FunctionDefaults<3>::get_cell_width()), n(vn), cosinus(vc), origin(c) {}$/;"	f	class:madness::guessfactory::PlaneWaveFunctor
PlaneWaveFunctor	src/apps/chem/GuessFactory.h	/^class PlaneWaveFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness::guessfactory
Plot section	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\paragraph{Plot section:} Begins with \\textit{plot} and ends with \\textit{end}. Contains plotting information. Can in principle be empty but should be present. $/;"	P
Plotter	src/madness/mra/mraplot.cc	/^    Plotter(World& world)$/;"	f	class:Plotter
Plotter	src/madness/mra/mraplot.cc	/^class Plotter {$/;"	c	file:
Plotting	doc/Latex/apps/moldft/manual.tex	/^\\section{Plotting}$/;"	s
PointGroup	src/apps/moldft/pointgroup.h	/^    PointGroup(const PointGroup& other) {$/;"	f	class:PointGroup
PointGroup	src/apps/moldft/pointgroup.h	/^    PointGroup(const std::string name) {$/;"	f	class:PointGroup
PointGroup	src/apps/moldft/pointgroup.h	/^class PointGroup {$/;"	c
PointGroup	src/apps/polar/pointgroup.h	/^    PointGroup(const PointGroup& other) {$/;"	f	class:PointGroup
PointGroup	src/apps/polar/pointgroup.h	/^    PointGroup(const std::string name) {$/;"	f	class:PointGroup
PointGroup	src/apps/polar/pointgroup.h	/^class PointGroup {$/;"	c
PointToPointTag	src/madness/world/worldgop.h	/^        struct PointToPointTag { };$/;"	s	class:madness::WorldGopInterface
Polar	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Polar( const Real& r, const Real& theta )$/;"	f	namespace:elem
Polar	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar.hpp	/^Polar( DistMatrix<F>& A, DistMatrix<F>& P )$/;"	f	namespace:elem
Polar	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar.hpp	/^Polar( Matrix<F>& A, Matrix<F>& P )$/;"	f	namespace:elem
Polynomial	src/apps/chem/correlationfactor.h	/^	    Polynomial, Slater, poly4erfc, Two};$/;"	e	enum:madness::NuclearCorrelationFactor::corrfactype
Polynomial	src/apps/chem/correlationfactor.h	/^	Polynomial(World& world, const Molecule& mol, const double a)$/;"	f	class:madness::Polynomial
Polynomial	src/apps/chem/correlationfactor.h	/^class Polynomial : public NuclearCorrelationFactor {$/;"	c	namespace:madness
PolynomialCoeffs	src/apps/adrian/polynomial.h	/^  PolynomialCoeffs(const double constant, const double x, const double y,$/;"	f	class:slymer::PolynomialCoeffs
PolynomialCoeffs	src/apps/adrian/polynomial.h	/^  PolynomialCoeffs(const unsigned N)$/;"	f	class:slymer::PolynomialCoeffs
PolynomialCoeffs	src/apps/adrian/polynomial.h	/^class PolynomialCoeffs {$/;"	c	namespace:slymer
PolynomialCoeffs	src/apps/bryan/polynomial.h	/^  PolynomialCoeffs(const double constant, const double x, const double y,$/;"	f	class:slymer::PolynomialCoeffs
PolynomialCoeffs	src/apps/bryan/polynomial.h	/^  PolynomialCoeffs(const unsigned N)$/;"	f	class:slymer::PolynomialCoeffs
PolynomialCoeffs	src/apps/bryan/polynomial.h	/^class PolynomialCoeffs {$/;"	c	namespace:slymer
PolynomialFunctor	src/apps/chem/GuessFactory.h	/^	PolynomialFunctor(const int& axis): input_string_(axis_to_string(axis)), data_(read_string(axis_to_string(axis))), dampf(0.0) {}$/;"	f	class:madness::guessfactory::PolynomialFunctor
PolynomialFunctor	src/apps/chem/GuessFactory.h	/^	PolynomialFunctor(const std::string input, const double& damp_width=0.0, const coord_3d& c=coord_3d()) : input_string_(input), data_(read_string(input)), dampf(damp_width), center(c) {}$/;"	f	class:madness::guessfactory::PolynomialFunctor
PolynomialFunctor	src/apps/chem/GuessFactory.h	/^	PolynomialFunctor(const std::string input,const double& damp_width, const Tensor<double>& c) : input_string_(input), data_(read_string(input)), dampf(damp_width), center(tensor_to_coord<double,3>(c)) {}$/;"	f	class:madness::guessfactory::PolynomialFunctor
PolynomialFunctor	src/apps/chem/GuessFactory.h	/^class PolynomialFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness::guessfactory
PolynomialTrigonometricsFunctor	src/apps/chem/GuessFactory.h	/^class PolynomialTrigonometricsFunctor : public PolynomialFunctor {$/;"	c	namespace:madness::guessfactory
PoolTaskInterface	src/madness/world/thread.h	/^        PoolTaskInterface() : TaskAttributes() { $/;"	f	class:madness::PoolTaskInterface
PoolTaskInterface	src/madness/world/thread.h	/^        PoolTaskInterface()$/;"	f	class:madness::PoolTaskInterface
PoolTaskInterface	src/madness/world/thread.h	/^        explicit PoolTaskInterface(const TaskAttributes& attr) :$/;"	f	class:madness::PoolTaskInterface
PoolTaskInterface	src/madness/world/thread.h	/^        explicit PoolTaskInterface(const TaskAttributes& attr)$/;"	f	class:madness::PoolTaskInterface
PoolTaskInterface	src/madness/world/thread.h	/^    class PoolTaskInterface :$/;"	c	namespace:madness
PoolTaskNull	src/madness/world/thread.h	/^    class PoolTaskNull : public PoolTaskInterface {$/;"	c	namespace:madness
PopBlocksizeStack	src/madness/external/elemental/src/core/global.cpp	/^void PopBlocksizeStack()$/;"	f	namespace:elem
PostFlagParsingInit	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::PostFlagParsingInit() {$/;"	f	class:testing::internal::UnitTestImpl
PotentialBasisFunctor	src/apps/moldft/mcpfit.cc	/^    PotentialBasisFunctor (int n, double alpha, double rcut) : n(n), alpha(alpha), rcut(rcut) {}$/;"	f	class:PotentialBasisFunctor
PotentialBasisFunctor	src/apps/moldft/mcpfit.cc	/^class PotentialBasisFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
PotentialBasisFunctor	src/apps/polar/mcpfit.cc	/^    PotentialBasisFunctor (int n, double alpha, double rcut) : n(n), alpha(alpha), rcut(rcut) {}$/;"	f	class:PotentialBasisFunctor
PotentialBasisFunctor	src/apps/polar/mcpfit.cc	/^class PotentialBasisFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
PotentialManager	src/apps/chem/potentialmanager.h	/^    PotentialManager(const Molecule& molecule, const std::string& core_type)$/;"	f	class:madness::PotentialManager
PotentialManager	src/apps/chem/potentialmanager.h	/^class PotentialManager {$/;"	c	namespace:madness
PotentialManager	src/apps/polar/potentialmanager.h	/^    PotentialManager(const Molecule& molecule, const std::string& core_type)$/;"	f	class:PotentialManager
PotentialManager	src/apps/polar/potentialmanager.h	/^class PotentialManager {$/;"	c
PotentialType	src/apps/chem/CCStructures.h	/^  enum PotentialType {POT_UNDEFINED,$/;"	g	namespace:madness
Pow	src/examples/gygi_soltion.cc	/^  struct Pow {$/;"	s	class:GygiPot	file:
Pow	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Pow( const F& alpha, const T& beta )$/;"	f	namespace:elem
Pow_beta_one	src/examples/gygi_soltion.cc	/^  struct Pow_beta_one {$/;"	s	class:GygiPot	file:
Power	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Power.hpp	/^Power$/;"	f	namespace:elem::pspec
PowerOfTwo	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline bool PowerOfTwo( Unsigned n )$/;"	f	namespace:elem
PrettyUnitTestResultPrinter	src/madness/external/gtest/src/gtest.cc	/^  PrettyUnitTestResultPrinter() {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrettyUnitTestResultPrinter	src/madness/external/gtest/src/gtest.cc	/^class PrettyUnitTestResultPrinter : public TestEventListener {$/;"	c	namespace:testing::internal	file:
Previous	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute
Previous	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute
PreviousSibling	src/madness/external/tinyxml/tinyxml.cc	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode
PreviousSibling	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode
PreviousSibling	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) 			{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
PreviousSibling	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling()						{ return prev; }$/;"	f	class:TiXmlNode
PreviousSibling	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const	{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
PreviousSibling	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlNode* PreviousSibling() const			{ return prev; }$/;"	f	class:TiXmlNode
PrimitiveGaussian	src/apps/adrian/gaussian.cc	/^PrimitiveGaussian::PrimitiveGaussian(const GaussianType &type,$/;"	f	class:slymer::PrimitiveGaussian
PrimitiveGaussian	src/apps/adrian/gaussian.cc	/^PrimitiveGaussian::PrimitiveGaussian(const PolynomialCoeffs &exppoly_,$/;"	f	class:slymer::PrimitiveGaussian
PrimitiveGaussian	src/apps/adrian/gaussian.h	/^  PrimitiveGaussian()$/;"	f	class:slymer::PrimitiveGaussian
PrimitiveGaussian	src/apps/adrian/gaussian.h	/^class PrimitiveGaussian {$/;"	c	namespace:slymer
PrimitiveGaussian	src/apps/bryan/gaussian.cc	/^PrimitiveGaussian::PrimitiveGaussian(const GaussianType &type,$/;"	f	class:slymer::PrimitiveGaussian
PrimitiveGaussian	src/apps/bryan/gaussian.cc	/^PrimitiveGaussian::PrimitiveGaussian(const PolynomialCoeffs &exppoly_,$/;"	f	class:slymer::PrimitiveGaussian
PrimitiveGaussian	src/apps/bryan/gaussian.h	/^  PrimitiveGaussian()$/;"	f	class:slymer::PrimitiveGaussian
PrimitiveGaussian	src/apps/bryan/gaussian.h	/^class PrimitiveGaussian {$/;"	c	namespace:slymer
Print	src/madness/external/elemental/include/elemental/io/Print.hpp	/^Print$/;"	f	namespace:elem
Print	src/madness/external/elemental/include/elemental/io/Print.hpp	/^Print( const Matrix<T>& A, std::string title="", std::ostream& os=std::cout )$/;"	f	namespace:elem
Print	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void Print(char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
Print	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void Print(const char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void Print(const wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void Print(wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute
Print	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment
Print	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration
Print	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument
Print	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement
Print	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText
Print	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown
Print	src/madness/external/tinyxml/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute
Print	src/madness/external/tinyxml/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration
Print	src/madness/external/tinyxml/tinyxml.h	/^	void Print() const						{ Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument
Print	src/madness/world/hardware.cc	/^    void Hardware::Print(std::ostream & out) {$/;"	f	class:madness::Hardware
PrintAsCharLiteralTo	src/madness/external/gtest/src/gtest-printers.cc	/^static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsStringLiteralTo	src/madness/external/gtest/src/gtest-printers.cc	/^static CharFormat PrintAsStringLiteralTo(char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsStringLiteralTo	src/madness/external/gtest/src/gtest-printers.cc	/^static CharFormat PrintAsStringLiteralTo(wchar_t c, ostream* os) {$/;"	f	namespace:testing::internal
PrintByteSegmentInObjectTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintByteSegmentInObjectTo(const unsigned char* obj_bytes, size_t start,$/;"	f	namespace:testing::__anon35
PrintBytesInObjectTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintBytesInObjectTo(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::internal2
PrintBytesInObjectToImpl	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintBytesInObjectToImpl(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::__anon35
PrintCCompilerInfo	src/madness/external/elemental/src/core/global.cpp	/^void PrintCCompilerInfo( std::ostream& os )$/;"	f	namespace:elem
PrintCharAndCodeTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintCharAndCodeTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintCharsAsStringTo	src/madness/external/gtest/src/gtest-printers.cc	/^static void PrintCharsAsStringTo($/;"	f	namespace:testing::internal
PrintColorEncoded	src/madness/external/gtest/src/gtest.cc	/^static void PrintColorEncoded(const char* str) {$/;"	f	namespace:testing::internal
PrintConfig	src/madness/external/elemental/src/core/global.cpp	/^void PrintConfig( std::ostream& os )$/;"	f	namespace:elem
PrintCxxCompilerInfo	src/madness/external/elemental/src/core/global.cpp	/^void PrintCxxCompilerInfo( std::ostream& os )$/;"	f	namespace:elem
PrintFailedTests	src/madness/external/gtest/src/gtest.cc	/^void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintFileStats	src/apps/moldft/fci/crayio.c	/^void PrintFileStats(struct w_file *unit, struct w_file *file)$/;"	f
PrintFullTestCommentIfPresent	src/madness/external/gtest/src/gtest.cc	/^void PrintFullTestCommentIfPresent(const TestInfo& test_info) {$/;"	f	namespace:testing::internal
PrintInputReport	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^PrintInputReport()$/;"	f	namespace:elem
PrintOnOneLine	src/madness/external/gtest/src/gtest.cc	/^static void PrintOnOneLine(const char* str, int max_length) {$/;"	f	namespace:testing::internal
PrintPrefixTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void PrintPrefixTo(const Tuple& t, ::std::ostream* os) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintPrefixTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void PrintPrefixTo(const Tuple&, ::std::ostream*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintRawArrayTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintReport	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^Args::PrintReport( std::ostream& os ) const$/;"	f	class:elem::choice::Args
PrintReport	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^MpiArgs::PrintReport( std::ostream& os ) const$/;"	f	class:elem::choice::MpiArgs
PrintStringTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintStringTo(const ::std::string& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintStringTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintStringTo(const ::string& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTestName	src/madness/external/gtest/src/gtest.cc	/^  static void PrintTestName(const char * test_case, const char * test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintTestPartResult	src/madness/external/gtest/src/gtest.cc	/^static void PrintTestPartResult(const TestPartResult& test_part_result) {$/;"	f	namespace:testing::internal
PrintTestPartResultToString	src/madness/external/gtest/src/gtest.cc	/^static std::string PrintTestPartResultToString($/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(bool x, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(const ::std::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(const ::std::tr1::tuple<>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(const ::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(const ::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(const signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(const unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^inline void PrintTo(wchar_t* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo($/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>& t,$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8>& t,$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7>& t,$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6>& t,$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5>& t,$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tr1::tuple<T1>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintTo(const char* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintTo(const wchar_t* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintTo(signed char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintTo(unsigned char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintTo(wchar_t wc, ostream* os) {$/;"	f	namespace:testing::internal
PrintToString	src/madness/external/gtest/include/gtest/gtest-printers.h	/^::std::string PrintToString(const T& value) {$/;"	f	namespace:testing
PrintTupleTo	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void PrintTupleTo(const T& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintValue	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void PrintValue(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal2::TypeWithoutFormatter
PrintVersion	src/madness/external/elemental/src/core/global.cpp	/^void PrintVersion( std::ostream& os )$/;"	f	namespace:elem
PrintWideStringTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintWideStringTo(const ::std::wstring& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintWideStringTo	src/madness/external/gtest/src/gtest-printers.cc	/^void PrintWideStringTo(const ::wstring& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintXmlTestCase	src/madness/external/gtest/src/gtest.cc	/^void XmlUnitTestResultPrinter::PrintXmlTestCase(std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
PrintXmlUnitTest	src/madness/external/gtest/src/gtest.cc	/^void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
ProbeAllDone	src/madness/world/world_task_queue.h	/^            ProbeAllDone(WorldTaskQueue* tq)$/;"	f	struct:madness::WorldTaskQueue::ProbeAllDone
ProbeAllDone	src/madness/world/world_task_queue.h	/^        struct ProbeAllDone {$/;"	s	class:madness::WorldTaskQueue
Process	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^Args::Process( std::ostream& os ) const$/;"	f	class:elem::choice::Args
Process	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^MpiArgs::Process( std::ostream& os ) const$/;"	f	class:elem::choice::MpiArgs
ProcessEvents	src/madness/external/elemental/include/elemental/io/Display.hpp	/^ProcessEvents( int numMsecs )$/;"	f	namespace:elem
ProcessID	src/madness/world/worldtypes.h	/^typedef int ProcessID; \/\/\/< Used to clearly identify process number\/rank.$/;"	t
ProcessInput	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^ProcessInput()$/;"	f	namespace:elem
ProcessKey	src/madness/world/distributed_id.h	/^        ProcessKey() : key_(), proc_(-1) { }$/;"	f	class:madness::ProcessKey
ProcessKey	src/madness/world/distributed_id.h	/^        ProcessKey(const Key& key, const ProcessID proc) :$/;"	f	class:madness::ProcessKey
ProcessKey	src/madness/world/distributed_id.h	/^        ProcessKey(const ProcessKey<Key, Tag>& other) :$/;"	f	class:madness::ProcessKey
ProcessKey	src/madness/world/distributed_id.h	/^    class ProcessKey {$/;"	c	namespace:madness
Profile	src/madness/external/elemental/include/elemental/matrices/HelmholtzPML.hpp	/^Profile( Real x, Real w, Real pmlExp, Real sigma, Real k )$/;"	f	namespace:elem::pml
ProfileStat	src/madness/world/worldprofile.h	/^    struct ProfileStat {$/;"	s	namespace:madness
Programming environment and capabilities	doc/Latex/parallel-runtime.tex	/^\\section{Programming environment and capabilities}$/;"	s
ProjFunctor	src/apps/polar/gth_pseudopotential.h	/^    ProjFunctor(double alpha, int l, int i, const coord_3d& center) $/;"	f	class:ProjFunctor
ProjFunctor	src/apps/polar/gth_pseudopotential.h	/^class ProjFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
ProjRLMFunctor	src/apps/chem/gth_pseudopotential.h	/^    ProjRLMFunctor(double alpha, int l, int m, int i, const coord_3d& center) $/;"	f	class:madness::ProjRLMFunctor
ProjRLMFunctor	src/apps/chem/gth_pseudopotential.h	/^class ProjRLMFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
ProjRLMFunctor	src/apps/polar/gth_pseudopotential.h	/^    ProjRLMFunctor(double alpha, int l, int m, int i, const coord_3d& center) $/;"	f	class:ProjRLMFunctor
ProjRLMFunctor	src/apps/polar/gth_pseudopotential.h	/^class ProjRLMFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
ProjRLMStore	src/apps/chem/gth_pseudopotential.h	/^    ProjRLMStore(const real_tensor& radii, const coord_3d& center) $/;"	f	class:madness::ProjRLMStore
ProjRLMStore	src/apps/chem/gth_pseudopotential.h	/^class ProjRLMStore {$/;"	c	namespace:madness
ProjStore	src/apps/polar/gth_pseudopotential.h	/^    ProjStore(World& world, const real_tensor& radii, const coord_3d& center) $/;"	f	class:ProjStore
ProjStore	src/apps/polar/gth_pseudopotential.h	/^class ProjStore {$/;"	c
Projection into the scaling function basis	doc/Latex/implementation.tex	/^\\subsection{Projection into the scaling function basis}$/;"	b
Projector	src/apps/chem/projector.h	/^        Projector() : mo_ket_(vecfuncT()), mo_bra_(vecfuncT()) {}$/;"	f	class:madness::Projector
Projector	src/apps/chem/projector.h	/^        Projector(const Function<T,NDIM>& mo) : mo_ket_(vecfuncT(1,mo)),$/;"	f	class:madness::Projector
Projector	src/apps/chem/projector.h	/^        Projector(const funcT& bra, const funcT& ket) : mo_ket_(vecfuncT(1,ket))$/;"	f	class:madness::Projector
Projector	src/apps/chem/projector.h	/^        Projector(const vecfuncT& bra, const vecfuncT& ket) : mo_ket_(ket),$/;"	f	class:madness::Projector
Projector	src/apps/chem/projector.h	/^        Projector(const vecfuncT& p) : mo_ket_(p), mo_bra_(p) {}$/;"	f	class:madness::Projector
Projector	src/apps/chem/projector.h	/^    class Projector {$/;"	c	namespace:madness
Projector	src/apps/polar/moldft.cc	/^    Projector() : p_(std::vector<Function<T, NDIM>>()) {}$/;"	f	class:Projector
Projector	src/apps/polar/moldft.cc	/^    Projector(const Function<T, NDIM> &p, const int particle = 0)$/;"	f	class:Projector
Projector	src/apps/polar/moldft.cc	/^    Projector(const std::vector<Function<T, NDIM>> &p, const int particle = 0) : particle_(particle), p_(p)$/;"	f	class:Projector
Projector	src/apps/polar/moldft.cc	/^class Projector$/;"	c	file:
Properties	doc/Latex/apps/moldft/manual.tex	/^\\section{Properties}$/;"	s
Properties	src/apps/adrian/ESInterface.h	/^namespace Properties {$/;"	n	namespace:slymer
Properties	src/apps/bryan/ESInterface.h	/^namespace Properties {$/;"	n	namespace:slymer
Properties of the scaling functions	doc/Latex/implementation.tex	/^\\subsection{Properties of the scaling functions}$/;"	b
Prow	src/apps/ii/systolic.h	/^        const int64_t Prow;             \/\/< Row of processor grid for this processor$/;"	m	class:madness::DistributedMatrix
Prow	src/madness/tensor/distributed_matrix.h	/^        int64_t Prow;             \/\/\/< Row of processor grid for this processor$/;"	m	class:madness::DistributedMatrixDistribution
Prowdim	src/apps/ii/systolic.h	/^        const int64_t Prowdim;          \/\/< Row dimension of processor grid$/;"	m	class:madness::DistributedMatrix
Prowdim	src/madness/tensor/distributed_matrix.h	/^        int64_t Prowdim;          \/\/\/< Row dimension of processor grid$/;"	m	class:madness::DistributedMatrixDistribution
PseudoNuclearCorrelationFactor	src/apps/chem/correlationfactor.h	/^	PseudoNuclearCorrelationFactor(World& world, const Molecule& mol,$/;"	f	class:madness::PseudoNuclearCorrelationFactor
PseudoNuclearCorrelationFactor	src/apps/chem/correlationfactor.h	/^class PseudoNuclearCorrelationFactor : public NuclearCorrelationFactor {$/;"	c	namespace:madness
PseudoTrsm	src/madness/external/elemental/include/elemental/lapack-like/factor/ID.hpp	/^PseudoTrsm( const DistMatrix<F>& RL, DistMatrix<F,STAR,VR>& RR, Base<F> tol )$/;"	f	namespace:elem::id
PseudoTrsm	src/madness/external/elemental/include/elemental/lapack-like/factor/ID.hpp	/^PseudoTrsm( const Matrix<F>& RL, Matrix<F>& RR, Base<F> tol )$/;"	f	namespace:elem::id
Pseudoinverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Pseudoinverse.hpp	/^Pseudoinverse( DistMatrix<F>& A, Base<F> tolerance=0 )$/;"	f	namespace:elem
Pseudoinverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Pseudoinverse.hpp	/^Pseudoinverse( Matrix<F>& A, Base<F> tolerance=0 )$/;"	f	namespace:elem
PseudospecCtrl	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    PseudospecCtrl()$/;"	f	struct:elem::PseudospecCtrl
PseudospecCtrl	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^struct PseudospecCtrl$/;"	s	namespace:elem
Pseudospectrum	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum.hpp	/^Pseudospectrum$/;"	f	namespace:elem
PsiExact	src/examples/testspectralprop.cc	/^    PsiExact(double current_time)$/;"	f	class:PsiExact
PsiExact	src/examples/testspectralprop.cc	/^class PsiExact : public FunctionFunctorInterface<double_complex,1>$/;"	c	file:
PthreadConditionVariable	src/madness/world/worldmutex.h	/^        PthreadConditionVariable() {$/;"	f	class:madness::PthreadConditionVariable
PthreadConditionVariable	src/madness/world/worldmutex.h	/^    class PthreadConditionVariable : private NO_DEFAULTS {$/;"	c	namespace:madness
PullSubproblems	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^inline void PullSubproblems$/;"	f	namespace:elem::schur
PushBackList	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	/^PushBackList$/;"	f	namespace:elem::pspec
PushBlocksizeStack	src/madness/external/elemental/src/core/global.cpp	/^void PushBlocksizeStack( Int blocksize )$/;"	f	namespace:elem
PushSubproblems	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^inline void PushSubproblems$/;"	f	namespace:elem::schur
Q	src/apps/chem/PNO.h	/^	QProjector<double, 3> Q;$/;"	m	class:madness::PNO
Q	src/apps/chem/PNOF12Potentials.h	/^	QProjector<double, 3> Q;												\/\/\/< Projector on virtual space: Q = 1-|k><k|$/;"	m	class:madness::F12Potentials
Q	src/apps/chem/TDHF.h	/^	const QProjector<double,3> Q;$/;"	m	class:madness::TDHF
Q	src/madness/mra/nonlinsol.h	/^		real_tensor Q;$/;"	m	class:madness::NonlinearSolverND
Q	src/madness/mra/nonlinsol.h	/^        Tensor<C> Q;$/;"	m	class:madness::XNonlinearSolver
Q12	src/apps/chem/mp2.h	/^        StrongOrthogonalityProjector<double,3> Q12;$/;"	m	class:madness::MP2
Q2	src/apps/chem/SCF.cc	/^tensorT Q2(const tensorT &s)$/;"	f	namespace:madness
Q2	src/apps/chem/nemo.h	/^    static Tensor<T> Q2(const Tensor<T>& s) {$/;"	f	class:madness::NemoBase
Q3	src/apps/chem/SCF.cc	/^tensorT Q3(const tensorT &s)$/;"	f	namespace:madness
Q3	src/apps/hf/solver.h	/^    tensorT Q3(const tensorT& s) {$/;"	f	class:madness::Solver
Q3	src/apps/moldft/mcpfit.cc	/^tensorT Q3(const tensorT& s) {$/;"	f
Q3	src/apps/polar/mcpfit.cc	/^tensorT Q3(const tensorT& s) {$/;"	f
Q3	src/apps/polar/moldft.cc	/^tensorT Q3(const tensorT &s)$/;"	f
QCCalculationParametersBase	src/apps/chem/QCCalculationParametersBase.h	/^	QCCalculationParametersBase() {}$/;"	f	class:madness::QCCalculationParametersBase
QCCalculationParametersBase	src/apps/chem/QCCalculationParametersBase.h	/^	QCCalculationParametersBase(const QCCalculationParametersBase& other)$/;"	f	class:madness::QCCalculationParametersBase
QCCalculationParametersBase	src/apps/chem/QCCalculationParametersBase.h	/^class QCCalculationParametersBase {$/;"	c	namespace:madness
QCParameter	src/apps/chem/QCCalculationParametersBase.h	/^	QCParameter() {};$/;"	f	struct:madness::QCParameter
QCParameter	src/apps/chem/QCCalculationParametersBase.h	/^	QCParameter(const std::string v, const std::string t, const std::string comment="",$/;"	f	struct:madness::QCParameter
QCParameter	src/apps/chem/QCCalculationParametersBase.h	/^struct QCParameter {$/;"	s	namespace:madness
QDWH	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWH$/;"	f	namespace:elem::herm_polar
QDWH	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWH( DistMatrix<F>& A, DistMatrix<F>& P, bool colPiv=false, Int maxIts=20 )$/;"	f	namespace:elem::polar
QDWH	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWH( DistMatrix<F>& A, bool colPiv=false, Int maxIts=20 )$/;"	f	namespace:elem::polar
QDWH	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWH( Matrix<F>& A, Matrix<F>& P, bool colPiv=false, Int maxIts=20 )$/;"	f	namespace:elem::polar
QDWH	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWH( Matrix<F>& A, bool colPiv=false, Int maxIts=20 )$/;"	f	namespace:elem::polar
QDWH	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWH( UpperOrLower uplo, DistMatrix<F>& A, bool colPiv=false, Int maxIts=20 )$/;"	f	namespace:elem::herm_polar
QDWH	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWH( UpperOrLower uplo, Matrix<F>& A, bool colPiv=false, Int maxIts=20 )$/;"	f	namespace:elem::herm_polar
QDWHDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianEig/SDC.hpp	/^QDWHDivide$/;"	f	namespace:elem::herm_eig
QDWHInner	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWHInner$/;"	f	namespace:elem::herm_polar
QDWHInner	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWHInner$/;"	f	namespace:elem::polar
QDWHInner	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^QDWHInner( Matrix<F>& A, Base<F> sMinUpper, bool colPiv=false, Int maxIts=20 )$/;"	f	namespace:elem::polar
QL_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    QL_PACKED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
QMtest	src/madness/mra/testsuite.cc	/^    QMtest(double a, double v, double t)$/;"	f	class:QMtest
QMtest	src/madness/mra/testsuite.cc	/^class QMtest : public FunctionFunctorInterface<double_complex,1> {$/;"	c	file:
QProjector	src/apps/chem/projector.h	/^        QProjector(World& world, const vecfuncT& amo) : O(amo) {};$/;"	f	class:madness::QProjector
QProjector	src/apps/chem/projector.h	/^        QProjector(World& world, const vecfuncT& bra, const vecfuncT& ket)$/;"	f	class:madness::QProjector
QProjector	src/apps/chem/projector.h	/^    class QProjector {$/;"	c	namespace:madness
QQUEUE_H	src/madness/external/elemental/external/pmrrr/include/queue.h	42;"	d
QR	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QR.hpp	/^QR$/;"	f	namespace:elem::schur
QR	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QR.hpp	/^QR( Matrix<F>& A, Matrix<Complex<Base<F>>>& w, bool fullTriangle=false )$/;"	f	namespace:elem::schur
QR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	/^QR( DistMatrix<F>& A )$/;"	f	namespace:elem
QR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	/^QR( DistMatrix<F>& A, DistMatrix<F,MD,STAR>& t, $/;"	f	namespace:elem
QR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	/^QR( DistMatrix<F>& A, DistMatrix<F,MD,STAR>& t, DistMatrix<Base<F>,MD,STAR>& d )$/;"	f	namespace:elem
QR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	/^QR( DistMatrix<F>& A, DistMatrix<Int,UPerm,STAR>& pPerm )$/;"	f	namespace:elem
QR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	/^QR( Matrix<F>& A )$/;"	f	namespace:elem
QR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	/^QR( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d )$/;"	f	namespace:elem
QR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	/^QR( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d, Matrix<Int>& pPerm )$/;"	f	namespace:elem
QR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	/^QR( Matrix<F>& A, Matrix<Int>& pPerm )$/;"	f	namespace:elem
QR0	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^    Matrix<F> QR0, t0;$/;"	m	struct:elem::qr::TreeData
QRList	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^    std::vector<Matrix<F>> QRList;$/;"	m	struct:elem::qr::TreeData
QRSVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Util.hpp	/^QRSVD( Matrix<F>& A, Matrix<Base<F>>& s, Matrix<F>& V )$/;"	f	namespace:elem::svd
QRSVD	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void QRSVD$/;"	f	namespace:elem::lapack
QR_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    QR_PACKED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
Qa	src/apps/chem/zcis.h	/^	QProjector<double_complex,3> Qa, Qb;$/;"	m	class:madness::Zcis
Qb	src/apps/chem/zcis.h	/^	QProjector<double_complex,3> Qa, Qb;$/;"	m	class:madness::Zcis
Qfunc	src/madness/mra/testbsh.cc	/^struct Qfunc : public FunctionFunctorInterface<double,3> {$/;"	s	file:
QtAnsatz	src/apps/chem/CCStructures.h	/^    bool QtAnsatz=true;$/;"	m	struct:madness::CCParameters
QtImageFormat	src/madness/external/elemental/include/elemental/io/impl.hpp	/^inline const char* QtImageFormat( FileFormat format )$/;"	f	namespace:elem
QuadraticProgram	src/madness/external/elemental/include/elemental/convex/QuadraticProgram.hpp	/^QuadraticProgram$/;"	f	namespace:elem
Quadrature	src/madness/mra/tools/quadrature.py	/^class Quadrature:$/;"	c
Quadrature	src/madness/mra/tools/twoscalecoeffs.py	/^from quadrature import Quadrature, QuadratureTest$/;"	i
QuadratureTest	src/madness/mra/tools/quadrature.py	/^def QuadratureTest(uselongfloat=0):$/;"	f
QuadratureTest	src/madness/mra/tools/twoscalecoeffs.py	/^from quadrature import Quadrature, QuadratureTest$/;"	i
QuadratureTest2	src/madness/mra/tools/quadrature.py	/^def QuadratureTest2(uselongfloat=0):$/;"	f
QuasiDiagonalScale	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalScale.hpp	/^QuasiDiagonalScale$/;"	f	namespace:elem
QuasiDiagonalSolve	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalSolve.hpp	/^QuasiDiagonalSolve$/;"	f	namespace:elem
QuasiNewton	src/madness/tensor/kain.cc	/^    QuasiNewton(const std::shared_ptr<OptimizationTargetInterface>& target,$/;"	f	class:QuasiNewton
QuasiNewton	src/madness/tensor/kain.cc	/^class QuasiNewton : public OptimizerInterface {$/;"	c	file:
QuasiNewton	src/madness/tensor/solvers.cc	/^    QuasiNewton::QuasiNewton(const std::shared_ptr<OptimizationTargetInterface>& tar,$/;"	f	class:madness::QuasiNewton
QuasiNewton	src/madness/tensor/solvers.h	/^    class QuasiNewton : public OptimizerInterface {$/;"	c	namespace:madness
QuasiTriangEig	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QuasiTriangEig.hpp	/^QuasiTriangEig$/;"	f	namespace:elem::schur
QuasiTriangEig	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QuasiTriangEig.hpp	/^QuasiTriangEig( const DistMatrix<F>& U )$/;"	f	namespace:elem::schur
QuasiTriangEig	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QuasiTriangEig.hpp	/^QuasiTriangEig( const Matrix<F>& U )$/;"	f	namespace:elem::schur
QuasiTriangEig	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QuasiTriangEig.hpp	/^QuasiTriangEig( const Matrix<F>& U, Matrix<Complex<Base<F>>>& w )$/;"	f	namespace:elem::schur
QuasiTriangIsNormal	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^QuasiTriangIsNormal( const DistMatrix<F>& U, Base<F> tol )$/;"	f	namespace:elem::pspec
QuasiTriangIsNormal	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^QuasiTriangIsNormal( const Matrix<F>& U, Base<F> tol )$/;"	f	namespace:elem::pspec
QuasiTriangularPseudospectrum	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum.hpp	/^QuasiTriangularPseudospectrum$/;"	f	namespace:elem
QuasiTrsm	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm.hpp	/^QuasiTrsm$/;"	f	namespace:elem
QuasiTrsv	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv.hpp	/^QuasiTrsv$/;"	f	namespace:elem
QuasiTrsvLN	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LN.hpp	/^QuasiTrsvLN$/;"	f	namespace:elem::internal
QuasiTrsvLN	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LN.hpp	/^QuasiTrsvLN( const Matrix<F>& L, Matrix<F>& x, bool checkIfSingular=false )$/;"	f	namespace:elem::internal
QuasiTrsvLNUnb	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LN.hpp	/^QuasiTrsvLNUnb( const Matrix<F>& L, Matrix<F>& x, bool checkIfSingular=false )$/;"	f	namespace:elem::internal
QuasiTrsvLT	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LT.hpp	/^QuasiTrsvLT$/;"	f	namespace:elem::internal
QuasiTrsvLTUnb	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LT.hpp	/^QuasiTrsvLTUnb$/;"	f	namespace:elem::internal
QuasiTrsvUN	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UN.hpp	/^QuasiTrsvUN$/;"	f	namespace:elem::internal
QuasiTrsvUN	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UN.hpp	/^QuasiTrsvUN( const Matrix<F>& U, Matrix<F>& x, bool checkIfSingular=false )$/;"	f	namespace:elem::internal
QuasiTrsvUNUnb	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UN.hpp	/^QuasiTrsvUNUnb( const Matrix<F>& U, Matrix<F>& x, bool checkIfSingular=false )$/;"	f	namespace:elem::internal
QuasiTrsvUT	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UT.hpp	/^QuasiTrsvUT$/;"	f	namespace:elem::internal
QuasiTrsvUTUnb	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UT.hpp	/^QuasiTrsvUTUnb$/;"	f	namespace:elem::internal
QueryDoubleAttribute	src/madness/external/tinyxml/tinyxml.cc	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement
QueryDoubleAttribute	src/madness/external/tinyxml/tinyxml.cc	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement
QueryDoubleValue	src/madness/external/tinyxml/tinyxml.cc	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute
QueryFloatAttribute	src/madness/external/tinyxml/tinyxml.h	/^	int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement
QueryIntAttribute	src/madness/external/tinyxml/tinyxml.cc	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement
QueryIntAttribute	src/madness/external/tinyxml/tinyxml.cc	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement
QueryIntValue	src/madness/external/tinyxml/tinyxml.cc	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute
QueryThread	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int QueryThread()$/;"	f	namespace:elem::mpi
QueryValueAttribute	src/madness/external/tinyxml/tinyxml.h	/^	template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement
Query_thread	src/madness/world/safempi.h	/^    inline int Query_thread() {$/;"	f	namespace:SafeMPI
Quick Tutorial	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\section{Quick Tutorial}$/;"	s
R	src/apps/chem/nemo.h	/^	real_function_3d R;$/;"	m	class:madness::NemoBase
R	src/apps/hf/electronicstructureapp.h	/^    const double R;$/;"	m	class:MolecularNuclearChargeDensityFunctor
R	src/apps/hf/electronicstructureapp.h	/^  const double R;$/;"	m	class:AtomicBasisFunctor
R	src/apps/hf/ewald.cc	/^    const double R;$/;"	m	class:MolecularNuclearChargeDensityFunctor	file:
R	src/apps/hf/solver.h	/^        double R;$/;"	m	struct:madness::Solver::GuessDensity
R	src/apps/moldft/testperiodic.cc	/^    const double R;$/;"	m	class:NuclearDensityFunctor	file:
R	src/apps/moldft/testperiodic.cc	/^    double R;$/;"	m	class:AtomicOrbitalFunctor	file:
R	src/apps/nick/extra.h	/^  double R[MAXNATOM][3]; \/\/ Coordinates of atoms$/;"	m	struct:InputParameters
R	src/apps/nick/tdse1.cc	/^    double R[MAXNATOM][NDIM]; \/\/ Coordinates of atoms$/;"	m	struct:InputParameters	file:
R	src/apps/polar/testperiodic.cc	/^static const int R = 1; \/\/ periodic sums from -R to +R inclusive$/;"	v	file:
R	src/apps/tdse/tdse.cc	/^  double R[MAXNATOM][3]; \/\/ Coordinates of atoms$/;"	m	struct:InputParameters	file:
R	src/apps/tdse/tdse.confused.cc	/^  double R[MAXNATOM][3]; \/\/ Coordinates of atoms$/;"	m	struct:InputParameters	file:
R	src/examples/colloid.cc	/^    const double& R; \/\/radius of the spheres forming the colloid surface$/;"	m	class:SurfaceMoleculeInteraction	file:
R	src/examples/csqrt.cc	/^static const double R = 1.4;    \/\/ bond length$/;"	v	file:
R	src/examples/dielectric.cc	/^const double R = 2.0; \/\/ Radius of cavity$/;"	v
R	src/examples/dielectric_external_field.cc	/^const double R = 20.0; \/\/ Radius of cavity$/;"	v
R	src/examples/h2.cc	/^static const double R = 1.4;    \/\/ bond length$/;"	v	file:
R	src/examples/h2dft.cc	/^static const double R = 1.4;    \/\/ bond length$/;"	v	file:
R	src/examples/h2dynamic.cc	/^static const double R = 1.4;    \/\/ bond length$/;"	v	file:
R	src/examples/newsolver.cc	/^static const double R = 1.4;    \/\/ bond length$/;"	v	file:
R	src/examples/siam_example.cc	/^const double R = 2.0; \/\/\/< Radius of sphere.$/;"	v
R	src/examples/svpe.cc	/^const double R = 2.456644; \/\/ Radius of cavity$/;"	v
R	src/examples/takeshi_response.cc	/^static const double R =1.4;  \/\/ bond length$/;"	v	file:
R	src/madness/external/elemental/examples/lapack-like/HermitianPseudoinverse.cpp	/^typedef double R;$/;"	t	file:
R	src/madness/external/elemental/examples/lapack-like/HermitianSVD.cpp	/^typedef double R;$/;"	t	file:
R	src/madness/external/elemental/examples/lapack-like/SimpleSVD.cpp	/^typedef double R;        \/\/ real datatype is `R'$/;"	t	file:
R	src/madness/mra/convolution1d.h	/^        Tensor<Q> R, T;                 \/\/\/< if NS: R=ns, T=T part of ns; if modified NS: T=\\uparrow r^(n-1)$/;"	m	struct:madness::ConvolutionData1D
R	src/madness/mra/testgaxpyext.cc	/^static const double R = 1.4;    \/\/ bond length$/;"	v	file:
R	src/madness/mra/testinnerext.cc	/^static const double R = 1.4;    \/\/ bond length$/;"	v	file:
R0	src/apps/tdse/tdse4.cc	/^static const double R0 = 2.04; \/\/ Effective center of nuclear wave function$/;"	v	file:
R1	src/apps/chem/AC.h	/^	double R1;$/;"	m	struct:madness::atom_information
R1	src/examples/vnucso.cc	/^const double R1 = 2.0;     \/\/ potential parameter$/;"	v
R1_	src/apps/chem/AC.h	/^	double R1_; \/\/\/ lower boundary interpolation area$/;"	m	struct:madness::ACParameters
R2	src/apps/chem/AC.h	/^	double R2;$/;"	m	struct:madness::atom_information
R2	src/examples/vnucso.cc	/^const double R2 = 2.0;     \/\/ potential parameter$/;"	v
R2_	src/apps/chem/AC.h	/^	double R2_; \/\/\/ upper boundary for interpolation area$/;"	m	struct:madness::ACParameters
R2orbital	src/apps/chem/mp2.h	/^        real_function_3d R2orbital(const int i) const {$/;"	f	class:madness::HartreeFock
R2orbitals	src/apps/chem/mp2.h	/^        std::vector<real_function_3d> R2orbitals() const {$/;"	f	class:madness::HartreeFock
R2orbitals_	src/apps/chem/mp2.h	/^        std::vector<real_function_3d> R2orbitals_;$/;"	m	class:madness::HartreeFock
RAND_FACTOR	src/madness/external/elemental/external/pmrrr/include/plarre.h	59;"	d
RANLIB	src/apps/moldft/fci/GNUmakefile	/^    RANLIB = ranlib$/;"	m
RANLIB	src/madness/tensor/mtxmq_bg/Makefile	/^   RANLIB = powerpc-bgp-linux-ranlib$/;"	m
RANLIB	src/madness/tensor/mtxmq_bg/Makefile	/^   RANLIB = powerpc64-bgq-linux-ranlib$/;"	m
RANLIB	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   RANLIB = powerpc-bgp-linux-ranlib$/;"	m
RANLIB	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   RANLIB = powerpc64-bgq-linux-ranlib$/;"	m
RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  RE(const ::std::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:testing::internal::RE
RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  RE(const ::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:testing::internal::RE
RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  RE(const RE& other) { Init(other.pattern()); }$/;"	f	class:testing::internal::RE
RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  RE(const char* regex) { Init(regex); }  \/\/ NOLINT$/;"	f	class:testing::internal::RE
RE	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class GTEST_API_ RE {$/;"	c	namespace:testing::internal
READLOCK	src/madness/world/worldmutex.h	/^        enum lockT {NOLOCK, READLOCK, WRITELOCK};$/;"	e	enum:madness::MutexReaderWriter::lockT
READLOCK	src/madness/world/worldmutex.h	/^        static const int READLOCK=1;$/;"	m	class:madness::MutexReaderWriter
REAL	src/examples/compiler/mra-driver.hh	/^        REAL, $/;"	e	enum:Exp::Type
REALFUN	src/examples/compiler/mra-driver.hh	/^        REALFUN, $/;"	e	enum:Exp::Type
REALTEN	src/examples/compiler/mra-driver.hh	/^        REALTEN, $/;"	e	enum:Exp::Type
REALX	src/apps/polar/diago.cc	19;"	d	file:
RED_BLACK_GREEN	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    RED_BLACK_GREEN,$/;"	e	enum:elem::ColorMapNS::ColorMap
REFINE_TASK_FLAG	src/madness/external/elemental/external/pmrrr/include/tasks.h	52;"	d
REGISTER_TYPED_TEST_CASE_P	src/madness/external/gtest/include/gtest/gtest-typed-test.h	239;"	d
REMCONST	src/madness/world/type_traits.h	201;"	d
REMFUTURE	src/madness/world/future.h	152;"	d
REQUEST_NULL	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Request REQUEST_NULL = MPI_REQUEST_NULL;$/;"	m	namespace:elem::mpi
RESPONSE	src/apps/chem/CCStructures.h	/^  enum FuncType {UNDEFINED,HOLE,PARTICLE,MIXED,RESPONSE};$/;"	e	enum:madness::FuncType
RETURN	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define RETURN  \\$/;"	d
RETURN	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define RETURN ret$/;"	d
RETURNED	src/madness/external/gtest/src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
RHOMIN	src/examples/smooth.h	/^static double RHOMIN = 1.e-20;$/;"	v
RIGHT	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    RIGHT$/;"	e	enum:elem::LeftOrRightNS::LeftOrRight
RLHB	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLHB.hpp	/^RLHB$/;"	f	namespace:elem::apply_packed_reflectors
RLHF	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLHF.hpp	/^RLHF$/;"	f	namespace:elem::apply_packed_reflectors
RLN	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLN.hpp	/^RLN( UnitOrNonUnit diag, const DistMatrix<T>& L, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
RLN	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RLN.hpp	/^RLN$/;"	f	namespace:elem::trsm
RLNA	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLN.hpp	/^RLNA( UnitOrNonUnit diag, const DistMatrix<T>& L, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
RLNC	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLN.hpp	/^RLNC( UnitOrNonUnit diag, const DistMatrix<T>& L, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
RLNCOld	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLN.hpp	/^RLNCOld( UnitOrNonUnit diag, const DistMatrix<T>& L, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
RLT	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLT.hpp	/^RLT$/;"	f	namespace:elem::trmm
RLT	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RLT.hpp	/^RLT$/;"	f	namespace:elem::trsm
RLTA	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLT.hpp	/^RLTA$/;"	f	namespace:elem::trmm
RLTC	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLT.hpp	/^RLTC$/;"	f	namespace:elem::trmm
RLVB	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLVB.hpp	/^RLVB$/;"	f	namespace:elem::apply_packed_reflectors
RLVF	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLVF.hpp	/^RLVF$/;"	f	namespace:elem::apply_packed_reflectors
RM	build/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/doc/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/apps/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/apps/adrian/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/apps/bryan/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/apps/chem/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/apps/cis/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/apps/learnResponse/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/apps/moldft/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/apps/pno/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/apps/tdse/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/examples/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/madness/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/madness/external/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/madness/external/gtest/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/madness/external/muParser/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/madness/external/tinyxml/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/madness/misc/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/madness/mra/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/madness/tensor/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	build/src/madness/world/Makefile	/^RM = \/gpfs\/software\/cmake-3.8.0\/cmake-3.8.0-rc1-Linux-x86_64\/bin\/cmake -E remove -f$/;"	m
RM	src/madness/tensor/mtxmq_bg/Makefile	/^   RM = rm$/;"	m
RM	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   RM = rm$/;"	m
RMFLAGS	src/madness/tensor/mtxmq_bg/Makefile	/^   RMFLAGS = -f$/;"	m
RMFLAGS	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/Makefile	/^   RMFLAGS = -f$/;"	m
RMI	src/madness/world/worldrmi.h	/^    class RMI  {$/;"	c	namespace:madness
RMI remote method invocation worldrmi h	doc/Latex/api.tex	/^\\subsubsection{RMI -- remote method invocation (worldrmi.h)}$/;"	b
RMISendReq	src/madness/world/worldrmi.h	/^    struct RMISendReq {$/;"	s	namespace:madness
RMIStats	src/madness/world/worldrmi.h	/^        RMIStats()$/;"	f	struct:madness::RMIStats
RMIStats	src/madness/world/worldrmi.h	/^    struct RMIStats {$/;"	s	namespace:madness
RMI_TAG	src/madness/world/safempi.h	/^    static const int RMI_TAG = 1023;$/;"	m	namespace:SafeMPI
ROW_MAJOR	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    ROW_MAJOR,$/;"	e	enum:elem::GridOrderNS::GridOrder
RPCA_ADMM	src/madness/external/elemental/examples/convex/RPCA.cpp	/^void RPCA_ADMM$/;"	f
RPCA_ALM	src/madness/external/elemental/examples/convex/RPCA.cpp	/^void RPCA_ALM$/;"	f
RQ	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ.hpp	/^RQ( DistMatrix<F>& A )$/;"	f	namespace:elem
RQ	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ.hpp	/^RQ( DistMatrix<F>& A, DistMatrix<F,MD,STAR>& t, DistMatrix<Base<F>,MD,STAR>& d )$/;"	f	namespace:elem
RQ	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ.hpp	/^RQ( Matrix<F>& A )$/;"	f	namespace:elem
RQ	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ.hpp	/^RQ( Matrix<F>& A, Matrix<F>& t, Matrix<Base<F>>& d )$/;"	f	namespace:elem
RQ_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    RQ_PACKED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
RRR	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  rrr_t      *RRR;$/;"	m	struct:__anon15
RRR	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  rrr_t      *RRR;$/;"	m	struct:__anon16
RRR_H	src/madness/external/elemental/external/pmrrr/include/rrr.h	42;"	d
RU	src/madness/mra/convolution1d.h	/^        Tensor<Q> RU, RVT, TU, TVT;     \/\/\/< SVD approximations to R and T$/;"	m	struct:madness::ConvolutionData1D
RUHB	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUHB.hpp	/^RUHB$/;"	f	namespace:elem::apply_packed_reflectors
RUHF	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUHF.hpp	/^RUHF$/;"	f	namespace:elem::apply_packed_reflectors
RUN	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUN.hpp	/^RUN( UnitOrNonUnit diag, const DistMatrix<T>& U, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
RUN	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RUN.hpp	/^RUN$/;"	f	namespace:elem::trsm
RUNA	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUN.hpp	/^RUNA( UnitOrNonUnit diag, const DistMatrix<T>& U, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
RUNC	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUN.hpp	/^RUNC( UnitOrNonUnit diag, const DistMatrix<T>& U, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
RUNCOld	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUN.hpp	/^RUNCOld( UnitOrNonUnit diag, const DistMatrix<T>& U, DistMatrix<T>& X )$/;"	f	namespace:elem::trmm
RUN_ALL_TESTS	src/madness/external/gtest/include/gtest/gtest.h	/^inline int RUN_ALL_TESTS() {$/;"	f
RUN_hash	src/madness/world/parsec.cc	/^        static uint64_t RUN_hash(const dague_handle_t *handle, const assignment_t *a)$/;"	f	file:
RUT	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUT.hpp	/^RUT$/;"	f	namespace:elem::trmm
RUT	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RUT.hpp	/^RUT$/;"	f	namespace:elem::trsm
RUTA	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUT.hpp	/^RUTA$/;"	f	namespace:elem::trmm
RUTC	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUT.hpp	/^RUTC$/;"	f	namespace:elem::trmm
RUVB	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUVB.hpp	/^RUVB$/;"	f	namespace:elem::apply_packed_reflectors
RUVF	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUVF.hpp	/^RUVF$/;"	f	namespace:elem::apply_packed_reflectors
RVT	src/madness/mra/convolution1d.h	/^        Tensor<Q> RU, RVT, TU, TVT;     \/\/\/< SVD approximations to R and T$/;"	m	struct:madness::ConvolutionData1D
RX_functor	src/apps/chem/correlationfactor.h	/^        RX_functor(const NuclearCorrelationFactor* ncf, const Atom& atom1,$/;"	f	class:madness::NuclearCorrelationFactor::RX_functor
RX_functor	src/apps/chem/correlationfactor.h	/^        RX_functor(const NuclearCorrelationFactor* ncf, const int iatom,$/;"	f	class:madness::NuclearCorrelationFactor::RX_functor
RX_functor	src/apps/chem/correlationfactor.h	/^    class RX_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
R_functor	src/apps/chem/correlationfactor.h	/^		R_functor(const NuclearCorrelationFactor* ncf, const int e=1)$/;"	f	class:madness::NuclearCorrelationFactor::R_functor
R_functor	src/apps/chem/correlationfactor.h	/^	class R_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
R_functor	src/apps/chem/electronic_correlation_factor.h	/^        R_functor(double gamma, int e=1) : gamma(gamma), exponent(e) {$/;"	f	class:madness::CorrelationFactor2::R_functor
R_functor	src/apps/chem/electronic_correlation_factor.h	/^    class R_functor : public FunctionFunctorInterface<double,6> {$/;"	c	class:madness::CorrelationFactor2
R_square	src/apps/chem/SCFOperators.h	/^    real_function_3d R_square;    \/\/\/< square of the nuclear correlation factor, if any$/;"	m	class:madness::Coulomb
R_square	src/apps/chem/nemo.h	/^    real_function_3d R_square;$/;"	m	class:madness::NemoBase
R_times_arg_div_R	src/apps/chem/diamagneticpotentialfactor.cc	/^	R_times_arg_div_R(std::function<double(const coord_3d& r, const coord_3d& B, const coord_3d& v)>& arg,$/;"	f	struct:madness::R_times_arg_div_R
R_times_arg_div_R	src/apps/chem/diamagneticpotentialfactor.cc	/^struct R_times_arg_div_R {$/;"	s	namespace:madness	file:
RadiusFunctor	src/apps/moldft/mcpfit.cc	/^    RadiusFunctor () {}$/;"	f	class:RadiusFunctor
RadiusFunctor	src/apps/moldft/mcpfit.cc	/^class RadiusFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
RadiusFunctor	src/apps/polar/mcpfit.cc	/^    RadiusFunctor () {}$/;"	f	class:RadiusFunctor
RadiusFunctor	src/apps/polar/mcpfit.cc	/^class RadiusFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
RadiusSquareFunctor	src/apps/moldft/mcpfit.cc	/^    RadiusSquareFunctor () {}$/;"	f	class:RadiusSquareFunctor
RadiusSquareFunctor	src/apps/moldft/mcpfit.cc	/^class RadiusSquareFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
RadiusSquareFunctor	src/apps/polar/mcpfit.cc	/^    RadiusSquareFunctor () {}$/;"	f	class:RadiusSquareFunctor
RadiusSquareFunctor	src/apps/polar/mcpfit.cc	/^class RadiusSquareFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
Random	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  explicit Random(UInt32 seed) : state_(seed) {}$/;"	f	class:testing::internal::Random
Random	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class GTEST_API_ Random {$/;"	c	namespace:testing::internal
Random	src/madness/misc/ran.cc	/^    Random::Random(unsigned int seed) : r(1279), s(861), beta(7.0), cur(0), u(new double [r]) {$/;"	f	class:madness::Random
Random	src/madness/misc/ran.h	/^    class Random : private Mutex {$/;"	c	namespace:madness
RandomGaussian	src/madness/mra/testsuite.cc	/^RandomGaussian(const Tensor<double> cell, double expntmax=1e5) {$/;"	f
RandomGaussian	src/madness/mra/testvmra.cc	/^RandomGaussian(const Tensor<double> cell, double expntmax=1e5) {$/;"	f
RandomState	src/madness/misc/ran.h	/^    struct RandomState {$/;"	s	namespace:madness
RandomValue	src/madness/misc/ran.cc	/^    template <> double RandomValue<double> () {$/;"	f	namespace:madness
RandomValue	src/madness/misc/ran.cc	/^    template <> double_complex RandomValue<double_complex> () {$/;"	f	namespace:madness
RandomValue	src/madness/misc/ran.cc	/^    template <> float RandomValue<float> () {$/;"	f	namespace:madness
RandomValue	src/madness/misc/ran.cc	/^    template <> float_complex RandomValue<float_complex> () {$/;"	f	namespace:madness
RandomValue	src/madness/misc/ran.cc	/^    template <> int RandomValue<int> () {$/;"	f	namespace:madness
RandomValue	src/madness/misc/ran.cc	/^    template <> long RandomValue<long> () {$/;"	f	namespace:madness
RandomVector	src/madness/misc/ran.cc	/^    template <> void RandomVector<double>(int n, double* t) {$/;"	f	namespace:madness
RandomVector	src/madness/misc/ran.cc	/^    template <> void RandomVector<double_complex>(int n, double_complex* t) {$/;"	f	namespace:madness
RandomVector	src/madness/misc/ran.cc	/^    template <> void RandomVector<float>(int n, float* t) {$/;"	f	namespace:madness
RandomVector	src/madness/misc/ran.cc	/^    template <> void RandomVector<float_complex>(int n, float_complex* t) {$/;"	f	namespace:madness
RandomVector	src/madness/misc/ran.h	/^    template <class T> void RandomVector(int n, T* t) {$/;"	f	namespace:madness
RandomizedSignDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianEig/SDC.hpp	/^RandomizedSignDivide$/;"	f	namespace:elem::herm_eig
RandomizedSignDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^RandomizedSignDivide$/;"	f	namespace:elem::schur
Range	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ParamGenerator<T> Range(T start, T end) {$/;"	f	namespace:testing
Range	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ParamGenerator<T> Range(T start, T end, IncrementT step) {$/;"	f	namespace:testing
Range	src/madness/world/range.h	/^        Range(Range& left, const Split& \/*split*\/)$/;"	f	class:madness::Range
Range	src/madness/world/range.h	/^        Range(const Range& r)$/;"	f	class:madness::Range
Range	src/madness/world/range.h	/^        Range(const iterator& start, const iterator& finish, int chunk=1)$/;"	f	class:madness::Range
Range	src/madness/world/range.h	/^    class Range {$/;"	c	namespace:madness
RangeGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  RangeGenerator(T begin, T end, IncrementT step)$/;"	f	class:testing::internal::RangeGenerator
RangeGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class RangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
Rank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::Rank() const { return ( order_==COLUMN_MAJOR ? VCRank() : VRRank() ); }$/;"	f	class:elem::Grid
Rank	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int Rank( Comm comm )$/;"	f	namespace:elem::mpi
Rank	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int Rank( Group group )$/;"	f	namespace:elem::mpi
ReInit	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::ReInit() const$/;"	f	class:mu::ParserBase
ReInit	src/madness/external/muParser/muParserTokenReader.cpp	/^  void ParserTokenReader::ReInit()$/;"	f	class:mu::ParserTokenReader
ReactionToSharding	src/madness/external/gtest/src/gtest-internal-inl.h	/^  enum ReactionToSharding {$/;"	g	class:testing::internal::UnitTestImpl
Read	src/madness/external/elemental/include/elemental/io/Read.hpp	/^Read$/;"	f	namespace:elem
Read	src/madness/external/elemental/include/elemental/io/Read.hpp	/^Read( Matrix<T>& A, const std::string filename, FileFormat format=AUTO )$/;"	f	namespace:elem
Read	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int Read(int fd, void* buf, unsigned int count) {$/;"	f	namespace:testing::internal::posix
ReadAndInterpretStatusByte	src/madness/external/gtest/src/gtest-death-test.cc	/^void DeathTestImpl::ReadAndInterpretStatusByte() {$/;"	f	class:testing::internal::DeathTestImpl
ReadEntireFile	src/madness/external/gtest/src/gtest-port.cc	/^std::string CapturedStream::ReadEntireFile(FILE* file) {$/;"	f	class:testing::internal::CapturedStream
ReadName	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
ReadNextToken	src/madness/external/muParser/muParserTokenReader.cpp	/^  ParserTokenReader::token_type ParserTokenReader::ReadNextToken()$/;"	f	class:mu::ParserTokenReader
ReadText	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlBase::ReadText(	const char* p, $/;"	f	class:TiXmlBase
ReadValue	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement
ReadyForSend	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::ReadyForSend$/;"	f	class:elem::AxpyInterface
Real	src/madness/external/elemental/examples/blas-like/Gemv.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/convex/BasisPursuit.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/convex/LinearProgram.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/convex/QuadraticProgram.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/convex/SparseInvCov.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/BunchKaufman.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/BusingerGolub.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/ChunkedPseudospectrum.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/ChunkedTriangularPseudospectrum.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/ComplexHermitianFunction.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/GLM.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/HPDInverse.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/HPSDCholesky.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/HPSDSquareRoot.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/HermitianEig.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/HermitianEigFromSequential.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/HermitianQDWH.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/HermitianSDC.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/ID.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/KyFanAndSchatten.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/LDL.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/LDLInverse.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/LSE.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/Pseudoinverse.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/Pseudospectrum.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/QDWH.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/QR.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/RealHermitianFunction.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/RealSchur.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/RealSymmetricFunction.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/SVD.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/Schur.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/SequentialBunchKaufman.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/SequentialQR.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/SequentialSVD.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/Sign.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/Skeleton.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/SkewHermitianEig.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/lapack-like/TriangularPseudospectrum.cpp	/^typedef double Real;$/;"	t	file:
Real	src/madness/external/elemental/examples/matrices/Circulant.cpp	/^typedef double Real;$/;"	t	file:
RealFuncIdentOp	src/examples/test_gmres.cc	/^class RealFuncIdentOp : public Operator<Function<double, 3> > {$/;"	c	file:
RealFuncLinearOp	src/examples/test_gmres.cc	/^		RealFuncLinearOp(const Function<double, 3> &_b) : b(_b) {}$/;"	f	class:RealFuncLinearOp
RealFuncLinearOp	src/examples/test_gmres.cc	/^class RealFuncLinearOp : public Operator<Function<double, 3> > {$/;"	c	file:
RealHermitianFunction	src/madness/external/elemental/include/elemental/lapack-like/funcs/HermitianFunction.hpp	/^RealHermitianFunction( UpperOrLower uplo, DistMatrix<F>& A, RealFunction func )$/;"	f	namespace:elem
RealHermitianFunction	src/madness/external/elemental/include/elemental/lapack-like/funcs/HermitianFunction.hpp	/^RealHermitianFunction( UpperOrLower uplo, Matrix<F>& A, RealFunction func )$/;"	f	namespace:elem
RealPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^RealPart( const Complex<Real>& alpha )$/;"	f	namespace:elem
RealPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^RealPart( const Real& alpha )$/;"	f	namespace:elem
RealPartImage	src/madness/external/elemental/include/elemental/io/Write/Image.hpp	/^RealPartImage$/;"	f	namespace:elem::write
RealToComplex	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/RealToComplex.hpp	/^RealToComplex( const DistMatrix<Real>& UQuasi, DistMatrix<Complex<Real>>& U )$/;"	f	namespace:elem::schur
RealToComplex	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/RealToComplex.hpp	/^RealToComplex( const Matrix<Real>& UQuasi, Matrix<Complex<Real>>& U )$/;"	f	namespace:elem::schur
RealVecIdentOp	src/examples/test_gmres.cc	/^class RealVecIdentOp : public Operator<Vector<double, 3> > {$/;"	c	file:
RealVecLinearOp	src/examples/test_gmres.cc	/^class RealVecLinearOp : public Operator<Vector<double, 3> > {$/;"	c	file:
RealX	src/apps/polar/diago.cc	/^typedef double RealX;$/;"	t	file:
Rearrange	src/madness/misc/cfft.cc	/^void CFFT::Rearrange(const double_complex *const Input, double_complex *const Output, const unsigned int N)$/;"	f	class:CFFT
Rearrange	src/madness/misc/cfft.cc	/^void CFFT::Rearrange(double_complex *const Data, const unsigned int N)$/;"	f	class:CFFT
Reciprocal	src/examples/colloid.cc	/^    struct Reciprocal {$/;"	s	class:SurfaceMoleculeInteraction	file:
Reciprocal	src/examples/gygi_soltion.cc	/^  struct Reciprocal {$/;"	s	class:GygiPot	file:
Recommended programming paradigms	doc/Latex/parallel-runtime.tex	/^\\section{Recommended programming paradigms}$/;"	s
RecordProperty	src/madness/external/gtest/src/gtest-internal-inl.h	/^  static void RecordProperty(TestResult* test_result,$/;"	f	class:testing::internal::TestResultAccessor
RecordProperty	src/madness/external/gtest/src/gtest.cc	/^void Test::RecordProperty(const std::string& key, const std::string& value) {$/;"	f	class:testing::Test
RecordProperty	src/madness/external/gtest/src/gtest.cc	/^void Test::RecordProperty(const std::string& key, int value) {$/;"	f	class:testing::Test
RecordProperty	src/madness/external/gtest/src/gtest.cc	/^void TestResult::RecordProperty(const std::string& xml_element,$/;"	f	class:testing::TestResult
RecordProperty	src/madness/external/gtest/src/gtest.cc	/^void UnitTest::RecordProperty(const std::string& key,$/;"	f	class:testing::UnitTest
RecordProperty	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::RecordProperty(const TestProperty& test_property) {$/;"	f	class:testing::internal::UnitTestImpl
RecursiveMutex	src/madness/world/worldmutex.cc	/^    RecursiveMutex::RecursiveMutex() {$/;"	f	class:madness::RecursiveMutex
RecursiveMutex	src/madness/world/worldmutex.h	/^    class RecursiveMutex {$/;"	c	namespace:madness
Recv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T Recv( int from, Comm comm )$/;"	f	namespace:elem::mpi
Recv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Recv( T* buf, int count, int from, Comm comm )$/;"	f	namespace:elem::mpi
Recv	src/madness/world/safempi.h	/^        void Recv(void* buf, const int count, const MPI_Datatype datatype, const int source, const int tag) const {$/;"	f	class:SafeMPI::Intracomm
Recv	src/madness/world/safempi.h	/^        void Recv(void* buf, const int count, const MPI_Datatype datatype, const int source, const int tag, MPI_Status& status) const {$/;"	f	class:SafeMPI::Intracomm
Recv	src/madness/world/worldmpi.h	/^        Recv(T& buf, int src, int tag=SafeMPI::DEFAULT_SEND_RECV_TAG) const {$/;"	f	class:madness::WorldMpiInterface
Recv	src/madness/world/worldmpi.h	/^        void Recv(T* buf, long lenbuf, int src, int tag) const {$/;"	f	class:madness::WorldMpiInterface
Recv	src/madness/world/worldmpi.h	/^        void Recv(T* buf, long lenbuf, int src, int tag, SafeMPI::Status& status) const {$/;"	f	class:madness::WorldMpiInterface
Redheffer	src/madness/external/elemental/include/elemental/matrices/Redheffer.hpp	/^Redheffer( BlockDistMatrix<T,U,V>& R, Int n )$/;"	f	namespace:elem
Redheffer	src/madness/external/elemental/include/elemental/matrices/Redheffer.hpp	/^Redheffer( DistMatrix<T,U,V>& R, Int n )$/;"	f	namespace:elem
Redheffer	src/madness/external/elemental/include/elemental/matrices/Redheffer.hpp	/^Redheffer( Matrix<T>& R, Int n )$/;"	f	namespace:elem
Reduce	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^Reduce( const DistMatrix<F,U,STAR>& A, TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
Reduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T Reduce( T sb, Op op, int root, Comm comm )$/;"	f	namespace:elem::mpi
Reduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T Reduce( T sb, int root, Comm comm )$/;"	f	namespace:elem::mpi
Reduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Reduce$/;"	f	namespace:elem::mpi
Reduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Reduce( Complex<R>* buf, int count, Op op, int root, Comm comm )$/;"	f	namespace:elem::mpi
Reduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Reduce( T* buf, int count, Op op, int root, Comm comm )$/;"	f	namespace:elem::mpi
Reduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Reduce( T* buf, int count, int root, Comm comm )$/;"	f	namespace:elem::mpi
Reduce	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Reduce( const T* sbuf, T* rbuf, int count, int root, Comm comm )$/;"	f	namespace:elem::mpi
Reduce	src/madness/world/safempi.h	/^        void Reduce(const void* sendbuf, void* recvbuf, const int count, const MPI_Datatype datatype, const MPI_Op op, const int root) const {$/;"	f	class:SafeMPI::Intracomm
ReduceScatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T ReduceScatter( T sb, Comm comm )$/;"	f	namespace:elem::mpi
ReduceScatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T ReduceScatter( T sb, Op op, Comm comm )$/;"	f	namespace:elem::mpi
ReduceScatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ReduceScatter$/;"	f	namespace:elem::mpi
ReduceScatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ReduceScatter( Complex<R>* buf, int rc, Op op, Comm comm )$/;"	f	namespace:elem::mpi
ReduceScatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ReduceScatter( R* buf, int rc, Op op, Comm comm )$/;"	f	namespace:elem::mpi
ReduceScatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ReduceScatter( R* sbuf, R* rbuf, int rc, Op op, Comm comm )$/;"	f	namespace:elem::mpi
ReduceScatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ReduceScatter( T* buf, int rc, Comm comm )$/;"	f	namespace:elem::mpi
ReduceScatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ReduceScatter( T* sbuf, T* rbuf, int rc, Comm comm )$/;"	f	namespace:elem::mpi
ReduceScatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void ReduceScatter( const T* sbuf, T* rbuf, const int* rcs, Comm comm )$/;"	f	namespace:elem::mpi
ReduceTag	src/madness/world/worldgop.h	/^        struct ReduceTag { };$/;"	s	class:madness::WorldGopInterface
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^mpi::Comm BDM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^mpi::Comm BDM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^mpi::Comm BDM::RedundantComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^mpi::Comm BDM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^mpi::Comm BDM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^mpi::Comm BDM::RedundantComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^mpi::Comm BDM::RedundantComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^mpi::Comm BDM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^mpi::Comm BDM::RedundantComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^mpi::Comm BDM::RedundantComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^mpi::Comm BDM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^mpi::Comm BDM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^mpi::Comm BDM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^mpi::Comm BDM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^mpi::Comm DM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^mpi::Comm DM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^mpi::Comm DM::RedundantComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^mpi::Comm DM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^mpi::Comm DM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^mpi::Comm DM::RedundantComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^mpi::Comm DM::RedundantComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^mpi::Comm DM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^mpi::Comm DM::RedundantComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^mpi::Comm DM::RedundantComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^mpi::Comm DM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^mpi::Comm DM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^mpi::Comm DM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RedundantComm	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^mpi::Comm DM::RedundantComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RedundantRank	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::RedundantRank() const$/;"	f	class:elem::AbstractBlockDistMatrix
RedundantRank	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::RedundantRank() const$/;"	f	class:elem::AbstractDistMatrix
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^Int BDM::RedundantSize() const { return 1; }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^Int BDM::RedundantSize() const { return 1; }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^Int BDM::RedundantSize() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^Int BDM::RedundantSize() const { return 1; }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^Int BDM::RedundantSize() const { return 1; }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^Int BDM::RedundantSize() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^Int BDM::RedundantSize() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^Int BDM::RedundantSize() const { return 1; }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^Int BDM::RedundantSize() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^Int BDM::RedundantSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^Int BDM::RedundantSize() const { return 1; }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^Int BDM::RedundantSize() const { return 1; }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^Int BDM::RedundantSize() const { return 1; }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^Int BDM::RedundantSize() const { return 1; }$/;"	f	class:elem::BDM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^Int DM::RedundantSize() const { return 1; }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^Int DM::RedundantSize() const { return 1; }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^Int DM::RedundantSize() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^Int DM::RedundantSize() const { return 1; }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^Int DM::RedundantSize() const { return 1; }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^Int DM::RedundantSize() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^Int DM::RedundantSize() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^Int DM::RedundantSize() const { return 1; }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^Int DM::RedundantSize() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^Int DM::RedundantSize() const { return this->grid_->VCSize(); }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^Int DM::RedundantSize() const { return 1; }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^Int DM::RedundantSize() const { return 1; }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^Int DM::RedundantSize() const { return 1; }$/;"	f	class:elem::DM
RedundantSize	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^Int DM::RedundantSize() const { return 1; }$/;"	f	class:elem::DM
Ref	src/madness/world/archive.cc	/^struct Ref {$/;"	s	namespace:madness::archive::detail	file:
Register	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTestCase
Register	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTestCase
RegisterParameterizedTests	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::RegisterParameterizedTests() {$/;"	f	class:testing::internal::UnitTestImpl
RegisterTests	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
RegisterTests	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
ReinterpretBits	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static RawType ReinterpretBits(const Bits bits) {$/;"	f	class:testing::internal::FloatingPoint
RelationToSource	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^enum RelationToSource {$/;"	g	namespace:testing::internal
Release	src/madness/external/elemental/src/core/Memory.cpp	/^void Memory<G>::Release()$/;"	f	class:elem::Memory
Release	src/madness/external/gtest/src/gtest.cc	/^TestEventListener* TestEventListeners::Release(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Release	src/madness/external/gtest/src/gtest.cc	/^TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
RemoteCounter	src/madness/world/worldref.h	/^            RemoteCounter() : pimpl_() { }$/;"	f	class:madness::detail::RemoteCounter
RemoteCounter	src/madness/world/worldref.h	/^            RemoteCounter(const RemoteCounter& other) :$/;"	f	class:madness::detail::RemoteCounter
RemoteCounter	src/madness/world/worldref.h	/^            RemoteCounter(const WorldPtr<implT>& p) :$/;"	f	class:madness::detail::RemoteCounter
RemoteCounter	src/madness/world/worldref.h	/^            explicit RemoteCounter(World& w, const std::shared_ptr<T>& p) :$/;"	f	class:madness::detail::RemoteCounter
RemoteCounter	src/madness/world/worldref.h	/^        class RemoteCounter {$/;"	c	namespace:madness::detail
RemoteCounterBase	src/madness/world/worldref.h	/^            RemoteCounterBase() { count_ = 1; }$/;"	f	class:madness::detail::RemoteCounterBase
RemoteCounterBase	src/madness/world/worldref.h	/^        class RemoteCounterBase {$/;"	c	namespace:madness::detail
RemoteCounterImpl	src/madness/world/worldref.h	/^            explicit RemoteCounterImpl(const std::shared_ptr<T>& p) :$/;"	f	class:madness::detail::RemoteCounterImpl
RemoteCounterImpl	src/madness/world/worldref.h	/^        class RemoteCounterImpl : public RemoteCounterBase {$/;"	c	namespace:madness::detail
RemoteReference	src/madness/world/worldref.h	/^        RemoteReference() :$/;"	f	class:madness::RemoteReference
RemoteReference	src/madness/world/worldref.h	/^        RemoteReference(World& w, const std::shared_ptr<T>& p) :$/;"	f	class:madness::RemoteReference
RemoteReference	src/madness/world/worldref.h	/^        RemoteReference(const RemoteReference<T>& other) :$/;"	f	class:madness::RemoteReference
RemoteReference	src/madness/world/worldref.h	/^        RemoteReference(const RemoteReference<U>& other) :$/;"	f	class:madness::RemoteReference
RemoteReference	src/madness/world/worldref.h	/^    class RemoteReference {$/;"	c	namespace:madness
Remove	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet
RemoveAttribute	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement
RemoveAttribute	src/madness/external/tinyxml/tinyxml.h	/^	void RemoveAttribute( const std::string& name )	{	RemoveAttribute (name.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlElement
RemoveChild	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode
RemoveConst	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveConst<T[N]> {$/;"	s	namespace:testing::internal
RemoveConst	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveConst<const T[N]> {$/;"	s	namespace:testing::internal
RemoveDirectoryName	src/madness/external/gtest/src/gtest-filepath.cc	/^FilePath FilePath::RemoveDirectoryName() const {$/;"	f	class:testing::internal::FilePath
RemoveExtension	src/madness/external/gtest/src/gtest-filepath.cc	/^FilePath FilePath::RemoveExtension(const char* extension) const {$/;"	f	class:testing::internal::FilePath
RemoveFileName	src/madness/external/gtest/src/gtest-filepath.cc	/^FilePath FilePath::RemoveFileName() const {$/;"	f	class:testing::internal::FilePath
RemoveInvalidXmlCharacters	src/madness/external/gtest/src/gtest.cc	/^std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
RemoveReference	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveReference	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveTrailingPathSeparator	src/madness/external/gtest/src/gtest-filepath.cc	/^FilePath FilePath::RemoveTrailingPathSeparator() const {$/;"	f	class:testing::internal::FilePath
RemoveValEntries	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::RemoveValEntries(unsigned a_iNumber)$/;"	f	class:mu::ParserByteCode
RemoveVar	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::RemoveVar(const string_type &a_strVarName)$/;"	f	class:mu::ParserBase
Rep	src/madness/external/tinyxml/tinystr.h	/^	struct Rep$/;"	s	class:TiXmlString
RepartitionDown	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^RepartitionDown$/;"	f	namespace:elem
RepartitionDownDiagonal	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^RepartitionDownDiagonal$/;"	f	namespace:elem
RepartitionLeft	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^RepartitionLeft$/;"	f	namespace:elem
RepartitionRight	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^RepartitionRight$/;"	f	namespace:elem
RepartitionUp	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^RepartitionUp$/;"	f	namespace:elem
RepartitionUpDiagonal	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^RepartitionUpDiagonal$/;"	f	namespace:elem
ReplaceChild	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode
ReplaceColNorms	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	/^ReplaceColNorms$/;"	f	namespace:elem::qr
ReplaceSubString	src/madness/external/muParser/muParserError.cpp	/^  void ParserError::ReplaceSubString( string_type &strSource,$/;"	f	class:mu::ParserError
ReportException	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^inline void ReportException( const std::exception& e, std::ostream& os )$/;"	f	namespace:elem
ReportFailureInUnknownLocation	src/madness/external/gtest/src/gtest.cc	/^void ReportFailureInUnknownLocation(TestPartResult::Type result_type,$/;"	f	namespace:testing::internal
ReportInvalidTestCaseType	src/madness/external/gtest/src/gtest.cc	/^void ReportInvalidTestCaseType(const char* test_case_name,$/;"	f	namespace:testing::internal
ReportTestPartResult	src/madness/external/gtest/src/gtest-test-part.cc	/^void HasNewFatalFailureHelper::ReportTestPartResult($/;"	f	class:testing::internal::HasNewFatalFailureHelper
ReportTestPartResult	src/madness/external/gtest/src/gtest.cc	/^void DefaultGlobalTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
ReportTestPartResult	src/madness/external/gtest/src/gtest.cc	/^void DefaultPerThreadTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
ReportTestPartResult	src/madness/external/gtest/src/gtest.cc	/^void ScopedFakeTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::ScopedFakeTestPartResultReporter
Request	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^typedef MPI_Request Request;$/;"	t	namespace:elem::mpi
Request	src/madness/world/safempi.h	/^        Request() : request_(MPI_REQUEST_NULL) { }$/;"	f	class:SafeMPI::Request
Request	src/madness/world/safempi.h	/^        Request(MPI_Request other) : request_(other) { }$/;"	f	class:SafeMPI::Request
Request	src/madness/world/safempi.h	/^        Request(const Request& other) : request_(other.request_) { }$/;"	f	class:SafeMPI::Request
Request	src/madness/world/safempi.h	/^    class Request {$/;"	c	namespace:SafeMPI
Request	src/madness/world/worldrmi.h	/^        typedef SafeMPI::Request Request;$/;"	t	class:madness::RMI
Require	src/madness/external/elemental/src/core/Memory.cpp	/^G* Memory<G>::Require( std::size_t size )$/;"	f	class:elem::Memory
RequiredArg	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        RequiredArg$/;"	f	struct:elem::choice::Args::RequiredArg
RequiredArg	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    struct RequiredArg$/;"	s	class:elem::choice::Args
RequiredArg	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        RequiredArg$/;"	f	struct:elem::choice::MpiArgs::RequiredArg
RequiredArg	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    struct RequiredArg$/;"	s	class:elem::choice::MpiArgs
Reseed	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  void Reseed(UInt32 seed) { state_ = seed; }$/;"	f	class:testing::internal::Random
Reset	src/madness/external/elemental/include/elemental/core/Timer/impl.hpp	/^Timer::Reset( const std::string& name )$/;"	f	class:elem::Timer
Reset	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void Reset() { Reset(INVALID_HANDLE_VALUE); }$/;"	f	class:testing::internal::AutoHandle
Reset	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void Reset(HANDLE handle) {$/;"	f	class:testing::internal::AutoHandle
Reset	src/madness/external/muParser/muParserError.cpp	/^  void ParserError::Reset()$/;"	f	class:mu::ParserError
ResetCounts	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    void ResetCounts()$/;"	f	struct:elem::SnapshotCtrl
ReshapeIntoGrid	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	/^ReshapeIntoGrid$/;"	f	namespace:elem::pspec
ReshapeIntoGrid	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	/^ReshapeIntoGrid( Int realSize, Int imagSize, const Matrix<T>& x, Matrix<T>& X )$/;"	f	namespace:elem::pspec
Resize	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Resize( Int height, Int width )$/;"	f	class:elem::AbstractBlockDistMatrix
Resize	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Resize( Int height, Int width, Int ldim )$/;"	f	class:elem::AbstractBlockDistMatrix
Resize	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Resize( Int height, Int width )$/;"	f	class:elem::AbstractDistMatrix
Resize	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Resize( Int height, Int width, Int ldim )$/;"	f	class:elem::AbstractDistMatrix
Resize	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Resize( Int height, Int width )$/;"	f	class:elem::Matrix
Resize	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Resize( Int height, Int width, Int ldim )$/;"	f	class:elem::Matrix
Resize_	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Resize_( Int height, Int width )$/;"	f	class:elem::Matrix
Resize_	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Resize_( Int height, Int width, Int ldim )$/;"	f	class:elem::Matrix
Response Section	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\paragraph{Response Section:} Begins with \\textit{cc2} and ends with \\textit{end}\\\\$/;"	P
ResponseFunction	src/apps/adrian/ResponseFunction2.h	/^  ResponseFunction() : r_states(0), g_states(0) {}$/;"	f	class:madness::ResponseFunction
ResponseFunction	src/apps/adrian/ResponseFunction2.h	/^  ResponseFunction(World& world, unsigned int m, unsigned int n)$/;"	f	class:madness::ResponseFunction
ResponseFunction	src/apps/adrian/ResponseFunction2.h	/^  ResponseFunction(const ResponseFunction& b)$/;"	f	class:madness::ResponseFunction
ResponseFunction	src/apps/adrian/ResponseFunction2.h	/^class ResponseFunction {$/;"	c	namespace:madness
ResponseFunction	src/apps/bryan/ResponseFunction2.h	/^      ResponseFunction() : r_states(0), g_states(0) {      $/;"	f	class:madness::ResponseFunction
ResponseFunction	src/apps/bryan/ResponseFunction2.h	/^      ResponseFunction(World& world, unsigned int m, unsigned int n) : r_states(m), g_states(n) {$/;"	f	class:madness::ResponseFunction
ResponseFunction	src/apps/bryan/ResponseFunction2.h	/^      ResponseFunction(const ResponseFunction& b) : r_states(b.r_states), g_states(b.g_states) {$/;"	f	class:madness::ResponseFunction
ResponseFunction	src/apps/bryan/ResponseFunction2.h	/^class ResponseFunction {$/;"	c	namespace:madness
ResponseParameters	src/apps/adrian/ResponseParameters.h	/^      ResponseParameters()$/;"	f	struct:madness::ResponseParameters
ResponseParameters	src/apps/adrian/ResponseParameters.h	/^   struct ResponseParameters$/;"	s	namespace:madness
ResponseParameters	src/apps/bryan/ResponseParameters.h	/^      ResponseParameters()$/;"	f	struct:madness::ResponseParameters
ResponseParameters	src/apps/bryan/ResponseParameters.h	/^   struct ResponseParameters$/;"	s	namespace:madness
ResponsePotential	src/apps/adrian/ResponsePotential.h	/^      ResponsePotential(World& world, std::vector<real_function_3d>& ground,  real_function_3d& v_nuc, double small, double thresh, $/;"	f	class:madness::ResponsePotential
ResponsePotential	src/apps/adrian/ResponsePotential.h	/^class ResponsePotential {$/;"	c	namespace:madness
ResponsePotential	src/apps/bryan/ResponsePotential.h	/^      ResponsePotential(World& world, std::vector<real_function_3d>& ground,  real_function_3d& v_nuc, double small, double thresh, $/;"	f	class:madness::ResponsePotential
ResponsePotential	src/apps/bryan/ResponsePotential.h	/^class ResponsePotential {$/;"	c	namespace:madness
Restart	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRA.hpp	/^Restart$/;"	f	namespace:elem::pspec
Restart	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRL.hpp	/^Restart$/;"	f	namespace:elem::pspec
Restarting	doc/Latex/apps/moldft/manual.tex	/^\\section{Restarting}$/;"	s
RestoreOrdering	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	/^RestoreOrdering$/;"	f	namespace:elem::pspec
ReturnSentinel	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^    explicit ReturnSentinel(DeathTest* test) : test_(test) { }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
ReturnSentinel	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  class ReturnSentinel {$/;"	c	class:testing::internal::DeathTest
ReverseCholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^ReverseCholesky( UpperOrLower uplo, DistMatrix<F>& A )$/;"	f	namespace:elem
ReverseCholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^ReverseCholesky( UpperOrLower uplo, Matrix<F>& A )$/;"	f	namespace:elem
ReverseLVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3.hpp	/^ReverseLVar3( DistMatrix<F>& A )$/;"	f	namespace:elem::cholesky
ReverseLVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3.hpp	/^ReverseLVar3( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
ReverseLVar3Unb	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3.hpp	/^ReverseLVar3Unb( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
ReverseUVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3.hpp	/^ReverseUVar3( DistMatrix<F>& A )$/;"	f	namespace:elem::cholesky
ReverseUVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3.hpp	/^ReverseUVar3( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
ReverseUVar3Unb	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3.hpp	/^ReverseUVar3Unb( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
Ricatti	src/madness/external/elemental/include/elemental/control/Ricatti.hpp	/^Ricatti$/;"	f	namespace:elem
Riemann	src/madness/external/elemental/include/elemental/matrices/Riemann.hpp	/^Riemann( BlockDistMatrix<T,U,V>& R, Int n )$/;"	f	namespace:elem
Riemann	src/madness/external/elemental/include/elemental/matrices/Riemann.hpp	/^Riemann( DistMatrix<T,U,V>& R, Int n )$/;"	f	namespace:elem
Riemann	src/madness/external/elemental/include/elemental/matrices/Riemann.hpp	/^Riemann( Matrix<T>& R, Int n )$/;"	f	namespace:elem
RightHyperbolicReflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	/^RightHyperbolicReflector( DistMatrix<F,U,V>& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
RightHyperbolicReflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	/^RightHyperbolicReflector( F& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
RightHyperbolicReflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	/^RightHyperbolicReflector( F& chi, Matrix<F>& x )$/;"	f	namespace:elem
RightHyperbolicReflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	/^RightHyperbolicReflector( Matrix<F>& chi, Matrix<F>& x )$/;"	f	namespace:elem
RightQuasiDiagonalScale	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalScale.hpp	/^RightQuasiDiagonalScale$/;"	f	namespace:elem
RightQuasiDiagonalSolve	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalSolve.hpp	/^RightQuasiDiagonalSolve$/;"	f	namespace:elem
RightReflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	/^RightReflector( DistMatrix<F,U,V>& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
RightReflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	/^RightReflector( F& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
RightReflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	/^RightReflector( F& chi, Matrix<F>& x )$/;"	f	namespace:elem
RightReflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	/^RightReflector( Matrix<F>& chi, Matrix<F>& x )$/;"	f	namespace:elem
Rint	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Rint(value_type v) { return floor(v + (value_type)0.5); }$/;"	f	class:mu::Parser
Ris	src/madness/external/elemental/include/elemental/matrices/Ris.hpp	/^Ris( BlockDistMatrix<F,U,V>& R, Int n )$/;"	f	namespace:elem
Ris	src/madness/external/elemental/include/elemental/matrices/Ris.hpp	/^Ris( DistMatrix<F,U,V>& R, Int n )$/;"	f	namespace:elem
Ris	src/madness/external/elemental/include/elemental/matrices/Ris.hpp	/^Ris( Matrix<F>& R, Int n )$/;"	f	namespace:elem
RlFile	src/apps/nick/extract.py	/^    RlFile = open("Rl.dat", 'w')$/;"	v
RlmFunctor	src/apps/polar/gth_pseudopotential.h	/^    RlmFunctor(int l, int m, const coord_3d& center) $/;"	f	class:RlmFunctor
RlmFunctor	src/apps/polar/gth_pseudopotential.h	/^class RlmFunctor : public FunctionFunctorInterface<double, 3> {$/;"	c
RlmStore	src/apps/polar/gth_pseudopotential.h	/^    RlmStore(World& world, int maxL, const coord_3d center) : maxL(maxL) {$/;"	f	class:RlmStore
RlmStore	src/apps/polar/gth_pseudopotential.h	/^class RlmStore {$/;"	c
RmDir	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int RmDir(const char* dir) { return _rmdir(dir); }$/;"	f	namespace:testing::internal::posix
RmiTask	src/madness/world/worldrmi.cc	/^    RMI::RmiTask::RmiTask(const SafeMPI::Intracomm& _comm)$/;"	f	class:madness::RMI::RmiTask
RmiTask	src/madness/world/worldrmi.h	/^        class RmiTask$/;"	c	class:madness::RMI
Rnd	src/madness/external/muParser/muParserTest.h	/^        static value_type Rnd(value_type v)$/;"	f	class:mu::Test::ParserTester
RndWithString	src/madness/external/muParser/muParserTest.h	/^        static value_type RndWithString(const char_type*)$/;"	f	class:mu::Test::ParserTester
Rnorm	src/madness/mra/convolution1d.h	/^        double Rnorm, Tnorm, Rnormf, Tnormf, NSnormf;$/;"	m	struct:madness::ConvolutionData1D
Rnormf	src/madness/mra/convolution1d.h	/^        double Rnorm, Tnorm, Rnormf, Tnormf, NSnormf;$/;"	m	struct:madness::ConvolutionData1D
Root	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::Root() const { return root_; }$/;"	f	class:elem::AbstractBlockDistMatrix
Root	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::Root() const { return root_; }$/;"	f	class:elem::AbstractDistMatrix
RootConstrained	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^bool AbstractBlockDistMatrix<T>::RootConstrained() const$/;"	f	class:elem::AbstractBlockDistMatrix
RootConstrained	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^bool AbstractDistMatrix<T>::RootConstrained() const { return rootConstrained_; }$/;"	f	class:elem::AbstractDistMatrix
RootElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlElement* RootElement()					{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument
RootElement	src/madness/external/tinyxml/tinyxml.h	/^	const TiXmlElement* RootElement() const		{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument
RootPhases	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^RootPhases( const DistMatrix<F,U,STAR>& A, TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
RootPhases	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^RootPhases( const DistMatrix<F,U,STAR>& A, const TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
RootQR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^RootQR( const DistMatrix<F,U,STAR>& A, TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
RootQR	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^RootQR( const DistMatrix<F,U,STAR>& A, const TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
RootSignature	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^RootSignature( const DistMatrix<F,U,STAR>& A, TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
RootSignature	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^RootSignature( const DistMatrix<F,U,STAR>& A, const TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
Rot	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Rot$/;"	f	namespace:elem::blas
Round	src/madness/external/muParser/muParserInt.h	/^    static int  Round(value_type v) { return (int)(v + ((v>=0) ? 0.5 : -0.5) ); };$/;"	f	class:mu::ParserInt
Row	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::Row() const { return MCRank(); }$/;"	f	class:elem::Grid
Row	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Row.hpp	/^Row( DistMatrix<F,U,V>& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem::hyp_reflector
Row	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Row.hpp	/^Row( F& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem::hyp_reflector
Row	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Row.hpp	/^Row( DistMatrix<F,U,V>& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem::reflector
Row	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Row.hpp	/^Row( F& chi, DistMatrix<F,U,V>& x )$/;"	f	namespace:elem::reflector
Row	src/madness/external/tinyxml/tinyxml.h	/^	int Row() const			{ return location.row + 1; }$/;"	f	class:TiXmlBase
RowAlign	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::RowAlign() const { return rowAlign_; }$/;"	f	class:elem::AbstractBlockDistMatrix
RowAlign	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::RowAlign() const { return rowAlign_; }$/;"	f	class:elem::AbstractDistMatrix
RowAllGather	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::RowAllGather$/;"	f	class:elem::GeneralBlockDistMatrix
RowAllGather	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::RowAllGather( DistMatrix<T,U,VGath>& A ) const$/;"	f	class:elem::GeneralDistMatrix
RowComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::RowComm() const { return MRComm(); }$/;"	f	class:elem::Grid
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^mpi::Comm BDM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^mpi::Comm BDM::RowComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^mpi::Comm BDM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^mpi::Comm BDM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^mpi::Comm BDM::RowComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^mpi::Comm BDM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^mpi::Comm BDM::RowComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^mpi::Comm BDM::RowComm() const { return this->grid_->MDComm(); }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^mpi::Comm BDM::RowComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^mpi::Comm BDM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^mpi::Comm BDM::RowComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^mpi::Comm BDM::RowComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^mpi::Comm BDM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^mpi::Comm BDM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::BDM
RowComm	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^mpi::Comm DM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^mpi::Comm DM::RowComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^mpi::Comm DM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^mpi::Comm DM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^mpi::Comm DM::RowComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^mpi::Comm DM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^mpi::Comm DM::RowComm() const { return this->grid_->MCComm(); }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^mpi::Comm DM::RowComm() const { return this->grid_->MDComm(); }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^mpi::Comm DM::RowComm() const { return this->grid_->MRComm(); }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^mpi::Comm DM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^mpi::Comm DM::RowComm() const { return this->grid_->VCComm(); }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^mpi::Comm DM::RowComm() const { return this->grid_->VRComm(); }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^mpi::Comm DM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RowComm	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^mpi::Comm DM::RowComm() const { return mpi::COMM_SELF; }$/;"	f	class:elem::DM
RowConstrained	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^bool AbstractBlockDistMatrix<T>::RowConstrained() const $/;"	f	class:elem::AbstractBlockDistMatrix
RowConstrained	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^bool AbstractDistMatrix<T>::RowConstrained() const { return rowConstrained_; }$/;"	f	class:elem::AbstractDistMatrix
RowCut	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::RowCut() const { return rowCut_; }$/;"	f	class:elem::AbstractBlockDistMatrix
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	12;"	d	file:
RowDist	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	12;"	d	file:
RowEchelon	src/madness/external/elemental/include/elemental/lapack-like/solve/GaussianElimination.hpp	/^RowEchelon( DistMatrix<F>& A, DistMatrix<F>& B )$/;"	f	namespace:elem
RowEchelon	src/madness/external/elemental/include/elemental/lapack-like/solve/GaussianElimination.hpp	/^RowEchelon( Matrix<F>& A, Matrix<F>& B )$/;"	f	namespace:elem
RowFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::RowFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
RowFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::RowFilterFrom( const DistMatrix<T,U,VGath>& A )$/;"	f	class:elem::GeneralDistMatrix
RowOwner	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::RowOwner( Int i ) const$/;"	f	class:elem::AbstractBlockDistMatrix
RowOwner	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::RowOwner( Int i ) const$/;"	f	class:elem::AbstractDistMatrix
RowRank	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::RowRank() const $/;"	f	class:elem::AbstractBlockDistMatrix
RowRank	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::RowRank() const$/;"	f	class:elem::AbstractDistMatrix
RowShift	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::RowShift() const { return rowShift_; }$/;"	f	class:elem::AbstractBlockDistMatrix
RowShift	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::RowShift() const { return rowShift_; }$/;"	f	class:elem::AbstractDistMatrix
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^Int BDM::RowStride() const { return 1; }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^Int BDM::RowStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^Int BDM::RowStride() const { return 1; }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^Int BDM::RowStride() const { return 1; }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^Int BDM::RowStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^Int BDM::RowStride() const { return 1; }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^Int BDM::RowStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^Int BDM::RowStride() const { return this->grid_->LCM(); }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^Int BDM::RowStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^Int BDM::RowStride() const { return 1; }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^Int BDM::RowStride() const { return this->grid_->VCSize(); }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^Int BDM::RowStride() const { return this->grid_->VRSize(); }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^Int BDM::RowStride() const { return 1; }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^Int BDM::RowStride() const { return 1; }$/;"	f	class:elem::BDM
RowStride	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^Int DM::RowStride() const { return 1; }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^Int DM::RowStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^Int DM::RowStride() const { return 1; }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^Int DM::RowStride() const { return 1; }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^Int DM::RowStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^Int DM::RowStride() const { return 1; }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^Int DM::RowStride() const { return this->grid_->MCSize(); }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^Int DM::RowStride() const { return this->grid_->LCM(); }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^Int DM::RowStride() const { return this->grid_->MRSize(); }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^Int DM::RowStride() const { return 1; }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^Int DM::RowStride() const { return this->grid_->VCSize(); }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^Int DM::RowStride() const { return this->grid_->VRSize(); }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^Int DM::RowStride() const { return 1; }$/;"	f	class:elem::DM
RowStride	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^Int DM::RowStride() const { return 1; }$/;"	f	class:elem::DM
RowSumScatterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::RowSumScatterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
RowSumScatterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::RowSumScatterFrom( const DistMatrix<T,U,VGath>& A )$/;"	f	class:elem::GeneralDistMatrix
RowSumScatterUpdate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::RowSumScatterUpdate$/;"	f	class:elem::GeneralBlockDistMatrix
RowSumScatterUpdate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::RowSumScatterUpdate$/;"	f	class:elem::GeneralDistMatrix
RowSwap	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^inline void RowSwap( DistMatrix<F,U,V>& A, Int to, Int from )$/;"	f	namespace:elem
RowSwap	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^inline void RowSwap( Matrix<F>& A, Int to, Int from )$/;"	f	namespace:elem
Rparams	src/apps/adrian/TDDFT.h	/^  ResponseParameters Rparams;$/;"	m	class:TDHF
Rparams	src/apps/adrian/TDHF.h	/^      ResponseParameters Rparams;$/;"	m	class:TDHF
Rparams	src/apps/adrian/TDHF2.h	/^      ResponseParameters Rparams;$/;"	m	class:TDHF
Rparams	src/apps/bryan/TDHF.h	/^      ResponseParameters Rparams;$/;"	m	class:TDHF
Rparams	src/apps/bryan/TDHF2.h	/^      ResponseParameters Rparams;$/;"	m	class:TDHF
Rs	src/madness/mra/convolution1d.h	/^        Tensor<typename Tensor<Q>::scalar_type> Rs, Ts;     \/\/\/< hold relative errors, NOT the singular values..$/;"	m	struct:madness::ConvolutionData1D
Run	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  virtual void Run() {$/;"	f	class:testing::internal::ThreadWithParam
Run	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::Run() {$/;"	f	class:testing::UnitTest
Run	src/madness/external/gtest/src/gtest.cc	/^void Test::Run() {$/;"	f	class:testing::Test
Run	src/madness/external/gtest/src/gtest.cc	/^void TestCase::Run() {$/;"	f	class:testing::TestCase
Run	src/madness/external/gtest/src/gtest.cc	/^void TestInfo::Run() {$/;"	f	class:testing::TestInfo
Run LRCCS	doc/Latex/apps/lrccs/LRCCS_Manual.tex	/^\\section{Run LRCCS}$/;"	s
RunAllTests	src/madness/external/gtest/src/gtest.cc	/^bool UnitTestImpl::RunAllTests() {$/;"	f	class:testing::internal::UnitTestImpl
RunSetUpTestCase	src/madness/external/gtest/include/gtest/gtest.h	/^  void RunSetUpTestCase() { (*set_up_tc_)(); }$/;"	f	class:testing::TestCase
RunTearDownTestCase	src/madness/external/gtest/include/gtest/gtest.h	/^  void RunTearDownTestCase() { (*tear_down_tc_)(); }$/;"	f	class:testing::TestCase
RuntimeError	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^inline void RuntimeError( Args... args )$/;"	f	namespace:elem
Rydberg_constant	src/madness/constants.h	/^        const double Rydberg_constant = 10973731.568527 ; \/\/    0.000073             m^-1$/;"	m	namespace:madness::constants
S	src/apps/chem/correlationfactor.h	/^	double S(const double& r, const double& Z) const {$/;"	f	class:madness::GaussSlater
S	src/apps/chem/correlationfactor.h	/^	double S(const double& r, const double& Z) const {$/;"	f	class:madness::LinearSlater
S	src/apps/chem/correlationfactor.h	/^    double S(const double& r, const double& Z) const {$/;"	f	class:madness::GradientalGaussSlater
S	src/apps/chem/correlationfactor.h	/^    double S(const double& r, const double& Z) const {$/;"	f	class:madness::Polynomial
S	src/apps/chem/correlationfactor.h	/^    double S(const double& r, const double& Z) const {$/;"	f	class:madness::PseudoNuclearCorrelationFactor
S	src/apps/chem/correlationfactor.h	/^    double S(const double& r, const double& Z) const {$/;"	f	class:madness::Slater
S	src/apps/chem/correlationfactor.h	/^    double S(const double& r, const double& Z) const {$/;"	f	class:madness::poly4erfc
SAFE_MPI_GLOBAL_MUTEX	src/madness/world/safempi.h	82;"	d
SAFE_MPI_GLOBAL_MUTEX	src/madness/world/safempi.h	84;"	d
SCALABLE_MUTEX_TYPE	src/madness/world/worldmutex.h	/^    typedef Mutex SCALABLE_MUTEX_TYPE;$/;"	t	namespace:madness
SCALABLE_MUTEX_TYPE	src/madness/world/worldmutex.h	/^    typedef MutexFair SCALABLE_MUTEX_TYPE;$/;"	t	namespace:madness
SCALAR	src/apps/polar/diago.cc	15;"	d	file:
SCF	src/apps/chem/SCF.cc	/^SCF::SCF(World &world, const std::string &inputfile) : param(CalculationParameters())$/;"	f	class:madness::SCF
SCF	src/apps/chem/SCF.h	/^class SCF {$/;"	c	namespace:madness
SCFProtocol	src/apps/chem/SCFProtocol.h	/^    SCFProtocol(World& w, const CalculationParameters& param,$/;"	f	class:madness::SCFProtocol
SCFProtocol	src/apps/chem/SCFProtocol.h	/^class SCFProtocol {$/;"	c	namespace:madness
SCF_GUESSTYPE	src/apps/chem/PNOParameters.h	/^enum GuessType{PARTIAL_WAVE_GUESSTYPE,FROM_FILE_GUESSTYPE,PREDEFINED_GUESSTYPE,SCF_GUESSTYPE,EXOP_GUESSTYPE,EMPTY_GUESSTYPE,PSI4_GUESSTYPE,UNKNOWN_GUESSTYPE};$/;"	e	enum:madness::GuessType
SCOPED_TRACE	src/madness/external/gtest/include/gtest/gtest.h	2170;"	d
SDC	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianEig/SDC.hpp	/^SDC$/;"	f	namespace:elem::herm_eig
SDC	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^SDC$/;"	f	namespace:elem::schur
SDFBox	src/madness/mra/sdf_shape_3D.h	/^        SDFBox(const coord_3d& length, const coord_3d& center) $/;"	f	class:madness::SDFBox
SDFBox	src/madness/mra/sdf_shape_3D.h	/^    class SDFBox : public SignedDFInterface<3> {$/;"	c	namespace:madness
SDFCircle	src/madness/mra/sdf_shape_2D.h	/^        SDFCircle(const double radius, const coord_2d &center) $/;"	f	class:madness::SDFCircle
SDFCircle	src/madness/mra/sdf_shape_2D.h	/^    class SDFCircle : public SignedDFInterface<2> {$/;"	c	namespace:madness
SDFCone	src/madness/mra/sdf_shape_3D.h	/^        SDFCone(const double c, const coord_3d &apex, const coord_3d &direc) $/;"	f	class:madness::SDFCone
SDFCone	src/madness/mra/sdf_shape_3D.h	/^    class SDFCone : public SignedDFInterface<3> {$/;"	c	namespace:madness
SDFCube	src/madness/mra/sdf_shape_3D.h	/^        SDFCube(const double length, const coord_3d& center) $/;"	f	class:madness::SDFCube
SDFCube	src/madness/mra/sdf_shape_3D.h	/^    class SDFCube : public SDFBox {$/;"	c	namespace:madness
SDFCylinder	src/madness/mra/sdf_shape_3D.h	/^        SDFCylinder(const double radius, const double length, const coord_3d& axpt, const coord_3d& axis) $/;"	f	class:madness::SDFCylinder
SDFCylinder	src/madness/mra/sdf_shape_3D.h	/^    class SDFCylinder : public SignedDFInterface<3> {$/;"	c	namespace:madness
SDFEllipsoid	src/madness/mra/sdf_shape_3D.h	/^        SDFEllipsoid(const coord_3d& radii, const coord_3d& center) $/;"	f	class:madness::SDFEllipsoid
SDFEllipsoid	src/madness/mra/sdf_shape_3D.h	/^    class SDFEllipsoid : public SignedDFInterface<3> {$/;"	c	namespace:madness
SDFParaboloid	src/madness/mra/sdf_shape_3D.h	/^        SDFParaboloid(const double c, const coord_3d &apex, const coord_3d &direc) $/;"	f	class:madness::SDFParaboloid
SDFParaboloid	src/madness/mra/sdf_shape_3D.h	/^    class SDFParaboloid : public SignedDFInterface<3> {$/;"	c	namespace:madness
SDFPlane	src/madness/mra/sdf_shape_3D.h	/^        SDFPlane(const coord_3d& normal, const coord_3d& point)$/;"	f	class:madness::SDFPlane
SDFPlane	src/madness/mra/sdf_shape_3D.h	/^    class SDFPlane : public SignedDFInterface<3> {$/;"	c	namespace:madness
SDFRectangle	src/madness/mra/sdf_shape_2D.h	/^        SDFRectangle(const coord_2d& length, const coord_2d& center) $/;"	f	class:madness::SDFRectangle
SDFRectangle	src/madness/mra/sdf_shape_2D.h	/^    class SDFRectangle : public SignedDFInterface<2> {$/;"	c	namespace:madness
SDFSphere	src/madness/mra/sdf_shape_3D.h	/^        SDFSphere(const double radius, const coord_3d &center) $/;"	f	class:madness::SDFSphere
SDFSphere	src/madness/mra/sdf_shape_3D.h	/^    class SDFSphere : public SignedDFInterface<3> {$/;"	c	namespace:madness
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	321;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	219;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	226;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	203;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	206;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	222;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	221;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	201;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	239;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	187;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	205;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	205;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	205;"	d	file:
SELF	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	205;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	452;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	683;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	228;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	204;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	485;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	308;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	306;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	204;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	239;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	272;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	327;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	332;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	331;"	d	file:
SELF	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	337;"	d	file:
SHARED_SPLIT_TYPE	src/madness/world/safempi.h	/^      static const int SHARED_SPLIT_TYPE = MPI_COMM_TYPE_SHARED;$/;"	m	class:SafeMPI::Intracomm
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/doc/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/apps/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/apps/adrian/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/apps/bryan/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/apps/chem/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/apps/cis/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/apps/learnResponse/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/apps/moldft/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/apps/pno/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/apps/tdse/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/examples/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/madness/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/madness/external/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/madness/external/gtest/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/madness/external/muParser/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/madness/external/tinyxml/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/madness/misc/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/madness/mra/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/madness/tensor/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/madness/world/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIGN_SCALE_DET	src/madness/external/elemental/include/elemental/lapack-like/funcs/decl.hpp	/^    SIGN_SCALE_DET,$/;"	e	enum:elem::SignScalingNS::SignScaling
SIGN_SCALE_FROB	src/madness/external/elemental/include/elemental/lapack-like/funcs/decl.hpp	/^    SIGN_SCALE_FROB$/;"	e	enum:elem::SignScalingNS::SignScaling
SIGN_SCALE_NONE	src/madness/external/elemental/include/elemental/lapack-like/funcs/decl.hpp	/^    SIGN_SCALE_NONE,$/;"	e	enum:elem::SignScalingNS::SignScaling
SIMULATE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	21;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	171;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
SINGLETON_TASK_FLAG	src/madness/external/elemental/external/pmrrr/include/tasks.h	50;"	d
SIZE	build/CMakeFiles/CheckTypeSize/HAVE_INT64_T.c	17;"	d	file:
SIZE	build/CMakeFiles/CheckTypeSize/HAVE_LONG_DOUBLE.c	17;"	d	file:
SIZE	build/CMakeFiles/CheckTypeSize/HAVE_LONG_LONG.c	17;"	d	file:
SKEW_SYMMETRIC	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    SKEW_SYMMETRIC,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
SKEW_SYMMETRIC_LOWER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    SKEW_SYMMETRIC_LOWER,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
SKEW_SYMMETRIC_UPPER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    SKEW_SYMMETRIC_UPPER,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
SOLVER_H_	src/apps/hf/solver.h	3927;"	d
SOURCE	src/apps/moldft/fci/doc/GNUmakefile	/^SOURCE   = matrixelements.tex \\$/;"	m
SPEC	src/madness/tensor/type_data.h	166;"	d
SPEC	src/madness/tensor/type_data.h	209;"	d
SPINLOCK_TYPE	src/madness/world/worldmutex.h	/^    typedef Mutex SPINLOCK_TYPE;$/;"	t	namespace:madness
SPINLOCK_TYPE	src/madness/world/worldmutex.h	/^    typedef Spinlock SPINLOCK_TYPE;$/;"	t	namespace:madness
SPLITCOORD	src/apps/chem/GuessFactory.h	21;"	d
SRCONF_H_	src/madness/tensor/srconf.h	38;"	d
SRC_APPS_CHEM_AC_H_	src/apps/chem/AC.h	9;"	d
SRC_APPS_CHEM_CCPOTENTIALS_H_	src/apps/chem/CCPotentials.h	9;"	d
SRC_APPS_CHEM_DIAMAGNETICPOTENTIALFACTOR_H_	src/apps/chem/diamagneticpotentialfactor.h	9;"	d
SRC_APPS_CHEM_ELECTRONIC_CORRELATION_FACTOR_H_	src/apps/chem/electronic_correlation_factor.h	9;"	d
SRC_APPS_CHEM_GUESSFACTORY_H_	src/apps/chem/GuessFactory.h	11;"	d
SRC_APPS_CHEM_MASKS_AND_BOXES_H_	src/apps/chem/masks_and_boxes.h	9;"	d
SRC_APPS_CHEM_MOLECULARORBITALS_H_	src/apps/chem/MolecularOrbitals.h	9;"	d
SRC_APPS_CHEM_OEP_H_	src/apps/chem/oep.h	9;"	d
SRC_APPS_CHEM_PCM_H_	src/apps/chem/pcm.h	33;"	d
SRC_APPS_CHEM_POINTGROUPOPERATOR_H_	src/apps/chem/pointgroupoperator.h	48;"	d
SRC_APPS_CHEM_POINTGROUPSYMMETRY_H_	src/apps/chem/pointgroupsymmetry.h	64;"	d
SRC_APPS_CHEM_QCCALCULATIONPARAMETERSBASE_H_	src/apps/chem/QCCalculationParametersBase.h	9;"	d
SRC_APPS_CHEM_TDHF_H_	src/apps/chem/TDHF.h	9;"	d
SRC_APPS_CHEM_TEST_UTILITIES_H_	src/apps/chem/test_utilities.h	9;"	d
SRC_APPS_CHEM_ZCIS_H_	src/apps/chem/zcis.h	9;"	d
SRC_APPS_CHEM_ZNEMO_H_	src/apps/chem/znemo.h	9;"	d
SRC_EXAMPLES_SMOOTH_H_	src/examples/smooth.h	9;"	d
SRC_MADNESS_MISC_GITINFO_H_	src/madness/misc/gitinfo.h	35;"	d
SRC_MADNESS_MRA_LEAFOP_H_	src/madness/mra/leafop.h	44;"	d
SRC_MADNESS_WORLD_META_H_	src/madness/world/meta.h	9;"	d
SRConf	src/madness/tensor/srconf.h	/^		SRConf() : dim_(0), rank_(0), maxk_(0), s_(), tensortype_(TT_NONE) {$/;"	f	class:madness::SRConf
SRConf	src/madness/tensor/srconf.h	/^		SRConf(const SRConf& rhs)  {$/;"	f	class:madness::SRConf
SRConf	src/madness/tensor/srconf.h	/^		SRConf(const Tensor<double>& weights, const std::vector<Tensor<T> >& vectors,$/;"	f	class:madness::SRConf
SRConf	src/madness/tensor/srconf.h	/^		SRConf(const Tensor<double>& weights, const tensorT& vector1, const tensorT& vector2,$/;"	f	class:madness::SRConf
SRConf	src/madness/tensor/srconf.h	/^		SRConf(const tensorT& vector1)$/;"	f	class:madness::SRConf
SRConf	src/madness/tensor/srconf.h	/^		SRConf(const unsigned int& dim, const unsigned int& k, const TensorType& tt)$/;"	f	class:madness::SRConf
SRConf	src/madness/tensor/srconf.h	/^	class SRConf {$/;"	c	namespace:madness
SSTRUCTS_H	src/madness/external/elemental/external/pmrrr/include/structs.h	42;"	d
STAR	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    STAR, \/\/ Give to every process$/;"	e	enum:elem::DistNS::Dist
START_TIMER	src/apps/chem/SCF.cc	/^static void START_TIMER(World &world)$/;"	f	namespace:madness
START_TIMER	src/apps/chem/mp2.h	/^        void START_TIMER(World& world) const {$/;"	f	class:madness::MP2
START_TIMER	src/apps/chem/nemo.h	/^	void START_TIMER(World& world) const {$/;"	f	class:madness::Nemo
START_TIMER	src/apps/hf/solver.h	/^    void START_TIMER(World& world) {$/;"	f	class:madness::Solver
START_TIMER	src/apps/ii/eigen_solver.cc	/^void START_TIMER(World& world) {$/;"	f
START_TIMER	src/apps/moldft/mcpfit.cc	/^void START_TIMER(World& world) {$/;"	f
START_TIMER	src/apps/moldft/moldft.cc	/^    static void START_TIMER(World& world) {$/;"	f	file:
START_TIMER	src/apps/moldft/testperiodic.cc	/^static void START_TIMER(World& world) {$/;"	f	file:
START_TIMER	src/apps/polar/mcpfit.cc	/^void START_TIMER(World& world) {$/;"	f
START_TIMER	src/apps/polar/moldft.cc	/^void START_TIMER(World &world)$/;"	f
START_TIMER	src/madness/mra/testgaxpyext.cc	9;"	d	file:
START_TIMER	src/madness/mra/testinnerext.cc	11;"	d	file:
START_TIMER	src/madness/mra/testsuite.cc	180;"	d	file:
START_TIMER	src/madness/mra/testvmra.cc	11;"	d	file:
START_TIMER	src/madness/tensor/test_elemental.cc	45;"	d	file:
STATIC	src/apps/polar/diago.cc	23;"	d	file:
STATIC	src/madness/tensor/lapack.cc	65;"	d	file:
STATIC	src/madness/tensor/lapack.cc	69;"	d	file:
STATIC	src/madness/tensor/lapack.cc	72;"	d	file:
STATIC	src/madness/tensor/tensor.cc	41;"	d	file:
STATIC	src/madness/tensor/tensor.cc	45;"	d	file:
STATIC	src/madness/tensor/tensor.cc	48;"	d	file:
STATIC	src/madness/tensor/test_elemental.cc	15;"	d	file:
STATIC	src/madness/tensor/test_elemental.cc	19;"	d	file:
STATIC_ASSERTION_FAILURE	src/madness/external/muParser/muParserDef.h	/^  template <> struct STATIC_ASSERTION_FAILURE<true> {};$/;"	s	namespace:mu
STEALABLE	src/madness/world/thread.h	/^        static const unsigned long STEALABLE = GENERATOR<<1; \/\/\/< Mask for stealable bit.$/;"	m	class:madness::TaskAttributes
STORE	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	2673;"	d	file:
STORE	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define STORE(reg) \\$/;"	d
STORE	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	2670;"	d	file:
STORET	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define STORET(reg) movaps  reg,  (B); add $16, B$/;"	d
STRING	src/examples/compiler/mra-driver.hh	/^        STRING, $/;"	e	enum:Exp::Type
STRINGIFY	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	297;"	d	file:
STRINGIFY	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	287;"	d	file:
SUBSPACE_H	src/apps/moldft/subspace.h	2;"	d
SUCCEED	src/madness/external/gtest/include/gtest/gtest.h	1886;"	d
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/doc/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/apps/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/apps/adrian/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/apps/bryan/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/apps/chem/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/apps/cis/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/apps/learnResponse/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/apps/moldft/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/apps/pno/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/apps/tdse/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/examples/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/madness/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/madness/external/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/madness/external/gtest/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/madness/external/muParser/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/madness/external/tinyxml/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/madness/misc/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/madness/mra/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/madness/tensor/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/madness/world/Makefile	/^SUFFIXES =$/;"	m
SUM	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const Op SUM = MPI_SUM;$/;"	m	namespace:elem::mpi
SUMMA_NN	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NN.hpp	/^SUMMA_NN$/;"	f	namespace:elem::gemm
SUMMA_NNA	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NN.hpp	/^SUMMA_NNA$/;"	f	namespace:elem::gemm
SUMMA_NNB	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NN.hpp	/^SUMMA_NNB$/;"	f	namespace:elem::gemm
SUMMA_NNC	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NN.hpp	/^SUMMA_NNC$/;"	f	namespace:elem::gemm
SUMMA_NNDot	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NN.hpp	/^SUMMA_NNDot$/;"	f	namespace:elem::gemm
SUMMA_NT	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NT.hpp	/^SUMMA_NT$/;"	f	namespace:elem::gemm
SUMMA_NTA	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NT.hpp	/^SUMMA_NTA$/;"	f	namespace:elem::gemm
SUMMA_NTB	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NT.hpp	/^SUMMA_NTB$/;"	f	namespace:elem::gemm
SUMMA_NTC	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NT.hpp	/^SUMMA_NTC$/;"	f	namespace:elem::gemm
SUMMA_TN	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TN.hpp	/^SUMMA_TN$/;"	f	namespace:elem::gemm
SUMMA_TNA	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TN.hpp	/^SUMMA_TNA$/;"	f	namespace:elem::gemm
SUMMA_TNB	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TN.hpp	/^SUMMA_TNB$/;"	f	namespace:elem::gemm
SUMMA_TNC	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TN.hpp	/^SUMMA_TNC$/;"	f	namespace:elem::gemm
SUMMA_TT	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TT.hpp	/^SUMMA_TT$/;"	f	namespace:elem::gemm
SUMMA_TTA	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TT.hpp	/^SUMMA_TTA$/;"	f	namespace:elem::gemm
SUMMA_TTB	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TT.hpp	/^SUMMA_TTB$/;"	f	namespace:elem::gemm
SUMMA_TTC	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TT.hpp	/^SUMMA_TTC$/;"	f	namespace:elem::gemm
SURFACE	src/apps/interior_bc/test_problems.h	/^enum FunctorOutput { SURFACE, DIRICHLET_RHS, EXACT, DOMAIN_MASK };$/;"	e	enum:FunctorOutput
SURFACE	src/madness/mra/sdf_domainmask.h	/^        static const int SURFACE; \/\/\/< Use the \\c surface() function in \\c mask$/;"	m	class:madness::DomainMaskSDFFunctor
SURFACE	src/madness/mra/sdf_domainmask.h	/^    const int DomainMaskSDFFunctor<NDIM>::SURFACE = 4;$/;"	m	class:madness::DomainMaskSDFFunctor
SVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/SVD.hpp	/^SVD( DistMatrix<F>& A )$/;"	f	namespace:elem::polar
SVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/SVD.hpp	/^SVD( DistMatrix<F>& A, DistMatrix<F>& P )$/;"	f	namespace:elem::polar
SVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/SVD.hpp	/^SVD( Matrix<F>& A )$/;"	f	namespace:elem::polar
SVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/SVD.hpp	/^SVD( Matrix<F>& A, Matrix<F>& P )$/;"	f	namespace:elem::polar
SVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD.hpp	/^SVD$/;"	f	namespace:elem
SVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD.hpp	/^SVD( DistMatrix<F>& A, DistMatrix<Base<F>,VR,STAR>& s, double heightRatio=1.2 )$/;"	f	namespace:elem
SVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD.hpp	/^SVD( Matrix<F>& A, Matrix<Base<F>>& s )$/;"	f	namespace:elem
SVD	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD.hpp	/^SVD( Matrix<F>& A, Matrix<Base<F>>& s, Matrix<F>& V, bool useQR=false )$/;"	f	namespace:elem
SVD	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void SVD( int m, int n, dcomplex* A, int ldA, double* s )$/;"	f	namespace:elem::lapack
SVD	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void SVD( int m, int n, double* A, int ldA, double* s )$/;"	f	namespace:elem::lapack
SVD	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void SVD( int m, int n, float* A, int ldA, float* s )$/;"	f	namespace:elem::lapack
SVD	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void SVD( int m, int n, scomplex* A, int ldA, float* s )$/;"	f	namespace:elem::lapack
SVDTensor	src/madness/tensor/lowranktensor.h	/^    explicit SVDTensor() : SRConf<T>() {    }$/;"	f	class:madness::SVDTensor
SVDTensor	src/madness/tensor/lowranktensor.h	/^    explicit SVDTensor(const SRConf<T>& rhs) : SRConf<T>(SRConf<T>(rhs)) {    }$/;"	f	class:madness::SVDTensor
SVDTensor	src/madness/tensor/lowranktensor.h	/^    explicit SVDTensor(const SVDTensor<T>& rhs) : SRConf<T>(static_cast<SRConf<T> >(rhs)) {    }$/;"	f	class:madness::SVDTensor
SVDTensor	src/madness/tensor/lowranktensor.h	/^    explicit SVDTensor(const Tensor<T>& rhs) : SRConf<T>(rhs) {    }$/;"	f	class:madness::SVDTensor
SVDTensor	src/madness/tensor/lowranktensor.h	/^    explicit SVDTensor(const Tensor<double>& weights, const Tensor<T>& vector1,$/;"	f	class:madness::SVDTensor
SVDTensor	src/madness/tensor/lowranktensor.h	/^    explicit SVDTensor(const std::vector<long>& dims) : SRConf<T>(dims.size(),dims[0],TT_2D) {    }$/;"	f	class:madness::SVDTensor
SVDTensor	src/madness/tensor/lowranktensor.h	/^class SVDTensor : public SRConf<T> {$/;"	c	namespace:madness
SVPESolver	src/examples/svpe.cc	/^    SVPESolver(World& world,$/;"	f	class:SVPESolver
SVPESolver	src/examples/svpe.cc	/^class SVPESolver {$/;"	c	file:
SVT	src/madness/external/elemental/include/elemental/convex/SVT.hpp	/^SVT( DistMatrix<F,U,STAR>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem
SVT	src/madness/external/elemental/include/elemental/convex/SVT.hpp	/^SVT( DistMatrix<F>& A, Base<F> tau, Int relaxedRank, bool relative=false )$/;"	f	namespace:elem
SVT	src/madness/external/elemental/include/elemental/convex/SVT.hpp	/^SVT( DistMatrix<F>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem
SVT	src/madness/external/elemental/include/elemental/convex/SVT.hpp	/^SVT( Matrix<F>& A, Base<F> tau, Int relaxedRank, bool relative=false )$/;"	f	namespace:elem
SVT	src/madness/external/elemental/include/elemental/convex/SVT.hpp	/^SVT( Matrix<F>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem
SYMMETRIC	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    SYMMETRIC,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
SYMMETRIC_LOWER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    SYMMETRIC_LOWER,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
SYMMETRIC_UPPER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    SYMMETRIC_UPPER,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
S_ij_ik	src/apps/chem/PNOStructures.h	/^	Tensor_IJ_IK<double> S_ij_ik;					\/\/\/< PNO overlaps$/;"	m	struct:madness::PNOPairs
S_ij_kj	src/apps/chem/PNOStructures.h	/^	Tensor_IJ_KJ<double> S_ij_kj;					\/\/\/< PNO overlaps$/;"	m	struct:madness::PNOPairs
SafeAbs	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^SafeAbs( const Complex<Real>& alpha )$/;"	f	namespace:elem
SafeAbs	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^SafeAbs( const Real& alpha )$/;"	f	namespace:elem
SafeDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^SafeDeterminant( DistMatrix<F>& A, bool canOverwrite=false )$/;"	f	namespace:elem
SafeDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^SafeDeterminant( Matrix<F>& A, bool canOverwrite=false )$/;"	f	namespace:elem
SafeDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^SafeDeterminant( const DistMatrix<F>& A )$/;"	f	namespace:elem
SafeDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^SafeDeterminant( const Matrix<F>& A )$/;"	f	namespace:elem
SafeHPDDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^SafeHPDDeterminant$/;"	f	namespace:elem
SafeHPDDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^SafeHPDDeterminant( UpperOrLower uplo, Matrix<F>& A, bool canOverwrite=false )$/;"	f	namespace:elem
SafeHPDDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^SafeHPDDeterminant( UpperOrLower uplo, const DistMatrix<F>& A )$/;"	f	namespace:elem
SafeHPDDeterminant	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^SafeHPDDeterminant( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SafeMPI	src/madness/world/safempi.cc	/^namespace SafeMPI {$/;"	n	file:
SafeMPI	src/madness/world/safempi.h	/^namespace SafeMPI {$/;"	n
SafeMPI an optionally serialized MPI wrapper safempi h	doc/Latex/api.tex	/^\\subsubsection{SafeMPI -- an optionally serialized MPI wrapper (safempi.h)}$/;"	b
SafeMpi	src/madness/external/elemental/src/core/imports/mpi.cpp	/^SafeMpi( int mpiError )$/;"	f	namespace:__anon32
SafeNorm	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double SafeNorm( Complex<double> alpha, double beta )$/;"	f	namespace:elem::lapack
SafeNorm	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double SafeNorm( double alpha, Complex<double> beta )$/;"	f	namespace:elem::lapack
SafeNorm	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double SafeNorm( double alpha, double beta )$/;"	f	namespace:elem::lapack
SafeNorm	src/madness/external/elemental/src/core/imports/lapack.cpp	/^double SafeNorm( double alpha, double beta, double gamma )$/;"	f	namespace:elem::lapack
SafeNorm	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float SafeNorm( Complex<float> alpha, float beta )$/;"	f	namespace:elem::lapack
SafeNorm	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float SafeNorm( float alpha, Complex<float> beta )$/;"	f	namespace:elem::lapack
SafeNorm	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float SafeNorm( float alpha, float beta )$/;"	f	namespace:elem::lapack
SafeNorm	src/madness/external/elemental/src/core/imports/lapack.cpp	/^float SafeNorm( float alpha, float beta, float gamma )$/;"	f	namespace:elem::lapack
SafeProduct	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^struct SafeProduct$/;"	s	namespace:elem
SafeProduct	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^SafeProduct<F>::SafeProduct( Int numEntries )$/;"	f	class:elem::SafeProduct
SampleBall	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^SampleBall<Complex<double>>( Complex<double> center, double radius )$/;"	f	namespace:elem
SampleBall	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^SampleBall<Complex<float>>( Complex<float> center, float radius )$/;"	f	namespace:elem
SampleBall	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^SampleBall<Int>( Int center, Int radius )$/;"	f	namespace:elem
SampleBall	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^SampleBall<double>( double center, double radius )$/;"	f	namespace:elem
SampleBall	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^SampleBall<float>( float center, float radius )$/;"	f	namespace:elem
SampleColorMap	src/madness/external/elemental/src/io/ColorMap.cpp	/^QRgb SampleColorMap( double value, double minVal, double maxVal )$/;"	f	namespace:elem
SampleNormal	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^inline F SampleNormal( F mean, Base<F> stddev )$/;"	f	namespace:elem
SampleUniform	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^inline Int SampleUniform<Int>( Int a, Int b )$/;"	f	namespace:elem
SampleUniform	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^inline T SampleUniform( T a, T b )$/;"	f	namespace:elem
Save	src/madness/external/elemental/src/io/DisplayWindow.cpp	/^DisplayWindow::Save()$/;"	f	class:elem::DisplayWindow
SaveBeforeReturn	src/madness/external/muParser/muParserTokenReader.cpp	/^  ParserTokenReader::token_type& ParserTokenReader::SaveBeforeReturn(const token_type &tok)$/;"	f	class:mu::ParserTokenReader
SaveFile	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument
SaveFile	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument
SaveFile	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument
SaveFile	src/madness/external/tinyxml/tinyxml.h	/^	bool SaveFile( const std::string& filename ) const		\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument
SaveImag	src/madness/external/elemental/src/io/ComplexDisplayWindow.cpp	/^ComplexDisplayWindow::SaveImag()$/;"	f	class:elem::ComplexDisplayWindow
SavePng	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	/^DisplayWidget<T>::SavePng( std::string basename ) const$/;"	f	class:elem::DisplayWidget
SaveQImage	src/madness/external/elemental/include/elemental/io/Write/Image.hpp	/^SaveQImage$/;"	f	namespace:elem::write
SaveReal	src/madness/external/elemental/src/io/ComplexDisplayWindow.cpp	/^ComplexDisplayWindow::SaveReal()$/;"	f	class:elem::ComplexDisplayWindow
Scal	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^inline void Scal( int n, T alpha, T* x, int incx )$/;"	f	namespace:elem::blas
Scal	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Scal( int n, dcomplex alpha, dcomplex* x, int incx )$/;"	f	namespace:elem::blas
Scal	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Scal( int n, double alpha, double* x, int incx )$/;"	f	namespace:elem::blas
Scal	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Scal( int n, float alpha, float* x, int incx )$/;"	f	namespace:elem::blas
Scal	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Scal( int n, scomplex alpha, scomplex* x, int incx )$/;"	f	namespace:elem::blas
Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	/^Scale$/;"	f	namespace:elem
Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	/^Scale( Base<T> alpha, BlockDistMatrix<T,U,V>& A )$/;"	f	namespace:elem
Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	/^Scale( Base<T> alpha, DistMatrix<T,U,V>& A )$/;"	f	namespace:elem
Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	/^Scale( Base<T> alpha, Matrix<T>& A )$/;"	f	namespace:elem
Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	/^Scale( Complex<Real> alpha, Matrix<Real>& AReal, Matrix<Real>& AImag )$/;"	f	namespace:elem
Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	/^Scale( T alpha, BlockDistMatrix<T,U,V>& A )$/;"	f	namespace:elem
Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	/^Scale( T alpha, DistMatrix<T,U,V>& A )$/;"	f	namespace:elem
Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	/^Scale( T alpha, Matrix<T>& A )$/;"	f	namespace:elem
Scale	src/madness/misc/cfft.cc	/^void CFFT::Scale(double_complex *const Data, const unsigned int N)$/;"	f	class:CFFT
ScaleDown	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    void ScaleDown( Int length )$/;"	f	struct:elem::PermutationMeta
ScaleTrapezoid	src/madness/external/elemental/include/elemental/blas-like/level1/ScaleTrapezoid.hpp	/^ScaleTrapezoid( T alpha, UpperOrLower uplo, DistMatrix<T,U,V>& A, Int offset=0 )$/;"	f	namespace:elem
ScaleTrapezoid	src/madness/external/elemental/include/elemental/blas-like/level1/ScaleTrapezoid.hpp	/^ScaleTrapezoid( T alpha, UpperOrLower uplo, Matrix<T>& A, Int offset=0 )$/;"	f	namespace:elem
ScaleUp	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    void ScaleUp( Int length )$/;"	f	struct:elem::PermutationMeta
Scaling functions	doc/Latex/implementation.tex	/^\\subsection{Scaling functions}$/;"	b
Scatter	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^Scatter( DistMatrix<F,U,STAR>& A, const TreeData<F>& treeData )$/;"	f	namespace:elem::qr::ts
Scatter	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::Scatter( BlockDistMatrix<T,U,V>& A ) const$/;"	f	class:elem::BDM
Scatter	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::Scatter( DistMatrix<T,U,V>& A ) const$/;"	f	class:elem::DM
Scatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Scatter$/;"	f	namespace:elem::mpi
Scatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Scatter( Complex<R>* buf, int sc, int rc, int root, Comm comm )$/;"	f	namespace:elem::mpi
Scatter	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Scatter( R* buf, int sc, int rc, int root, Comm comm )$/;"	f	namespace:elem::mpi
ScatteredColDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<Dist U,Dist V> constexpr Dist ScatteredColDist() $/;"	f	namespace:elem
ScatteredRowDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist ScatteredRowDist<VC,STAR>() { return MR; }$/;"	f	namespace:elem
ScatteredRowDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<> constexpr Dist ScatteredRowDist<VR,STAR>() { return MC; }$/;"	f	namespace:elem
ScatteredRowDist	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^template<Dist U,Dist V> constexpr Dist ScatteredRowDist() { return V; }$/;"	f	namespace:elem
ScatteringWF	src/apps/nick/wavef.cc	/^ScatteringWF::ScatteringWF(World& world, const double Z, const double cutoff) : Z_(Z), cutoff_(cutoff) {}$/;"	f	class:ScatteringWF
ScatteringWF	src/apps/nick/wavef.cc	/^ScatteringWF::ScatteringWF(const double Z, const double cutoff) : Z_(Z), cutoff_(cutoff) {}$/;"	f	class:ScatteringWF
ScatteringWF	src/apps/nick/wavef.h	/^class ScatteringWF : public baseWF {$/;"	c
SchattenNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Schatten.hpp	/^SchattenNorm( const DistMatrix<F,U,V>& A, Base<F> p )$/;"	f	namespace:elem
SchattenNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Schatten.hpp	/^SchattenNorm( const Matrix<F>& A, Base<F> p )$/;"	f	namespace:elem
Schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur.hpp	/^Schur$/;"	f	namespace:elem
Schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur.hpp	/^Schur( DistMatrix<F>& A, DistMatrix<Complex<Base<F>>,VR,STAR>& w )$/;"	f	namespace:elem
Schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur.hpp	/^Schur( Matrix<F>& A, Matrix<Complex<Base<F>>>& w )$/;"	f	namespace:elem
Schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur.hpp	/^Schur( Matrix<F>& A, Matrix<Complex<Base<F>>>& w, Matrix<F>& Q )$/;"	f	namespace:elem
Schur	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Schur$/;"	f	namespace:elem::lapack
Schur	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Schur( int n, dcomplex* A, int ldA, dcomplex* w, bool fullTriangle )$/;"	f	namespace:elem::lapack
Schur	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Schur( int n, double* A, int ldA, dcomplex* w, bool fullTriangle )$/;"	f	namespace:elem::lapack
Schur	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Schur( int n, float* A, int ldA, scomplex* w, bool fullTriangle )$/;"	f	namespace:elem::lapack
Schur	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void Schur( int n, scomplex* A, int ldA, scomplex* w, bool fullTriangle )$/;"	f	namespace:elem::lapack
ScopedFakeTestPartResultReporter	src/madness/external/gtest/include/gtest/gtest-spi.h	/^class GTEST_API_ ScopedFakeTestPartResultReporter$/;"	c	namespace:testing
ScopedFakeTestPartResultReporter	src/madness/external/gtest/src/gtest.cc	/^ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter($/;"	f	class:testing::ScopedFakeTestPartResultReporter
ScopedMutex	src/madness/world/worldmutex.h	/^        ScopedMutex(const mutexT& m) : mutex(&m) { mutex->lock(); }$/;"	f	class:madness::ScopedMutex
ScopedMutex	src/madness/world/worldmutex.h	/^        ScopedMutex(const mutexT* m) : mutex(m) { mutex->lock(); }$/;"	f	class:madness::ScopedMutex
ScopedMutex	src/madness/world/worldmutex.h	/^    class ScopedMutex {$/;"	c	namespace:madness
ScopedPrematureExitFile	src/madness/external/gtest/src/gtest.cc	/^  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)$/;"	f	class:testing::internal::ScopedPrematureExitFile
ScopedPrematureExitFile	src/madness/external/gtest/src/gtest.cc	/^class ScopedPrematureExitFile {$/;"	c	namespace:testing::internal	file:
ScopedTrace	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class GTEST_API_ ScopedTrace {$/;"	c	namespace:testing::internal
SdcCtrl	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^    SdcCtrl()$/;"	f	struct:elem::SdcCtrl
SdcCtrl	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^struct SdcCtrl {$/;"	s	namespace:elem
SecondHalfOfSymmetric2x2Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Scale.hpp	/^SecondHalfOfSymmetric2x2Scale$/;"	f	namespace:elem
SecondHalfOfSymmetric2x2Solve	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Solve.hpp	/^SecondHalfOfSymmetric2x2Solve$/;"	f	namespace:elem
Send	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Send( T b, int to, Comm comm )$/;"	f	namespace:elem::mpi
Send	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Send( const T* buf, int count, int to, Comm comm )$/;"	f	namespace:elem::mpi
Send	src/madness/external/gtest/src/gtest-internal-inl.h	/^    virtual void Send(const string& message) {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
Send	src/madness/world/safempi.h	/^        void Send(const void* buf, const int count, const MPI_Datatype datatype, int dest, int tag) const {$/;"	f	class:SafeMPI::Intracomm
Send	src/madness/world/worldmpi.h	/^        Send(const T& datum, int dest, int tag=SafeMPI::DEFAULT_SEND_RECV_TAG) const {$/;"	f	class:madness::WorldMpiInterface
Send	src/madness/world/worldmpi.h	/^        void Send(const T* buf, long lenbuf, int dest, int tag=SafeMPI::DEFAULT_SEND_RECV_TAG) const {$/;"	f	class:madness::WorldMpiInterface
SendLn	src/madness/external/gtest/src/gtest-internal-inl.h	/^    void SendLn(const string& message) {$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
SendLn	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void SendLn(const string& message) { socket_writer_->SendLn(message); }$/;"	f	class:testing::internal::StreamingListener
SendRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T SendRecv( T sb, int to, int from, Comm comm )$/;"	f	namespace:elem::mpi
SendRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void SendRecv$/;"	f	namespace:elem::mpi
SendRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void SendRecv( T* buf, int count, int to, int from, Comm comm )$/;"	f	namespace:elem::mpi
SendReq	src/madness/world/worldam.h	/^            SendReq() : buf(0) {}$/;"	f	class:madness::WorldAmInterface::SendReq
SendReq	src/madness/world/worldam.h	/^            SendReq(AmArg* b, const RMI::Request& r) : buf(b), req(r) {} \/\/ lock is NOT set$/;"	f	class:madness::WorldAmInterface::SendReq
SendReq	src/madness/world/worldam.h	/^        class SendReq : public SPINLOCK_TYPE, public RMISendReq {$/;"	c	class:madness::WorldAmInterface
SeparatedConvolution	src/madness/mra/operator.h	/^        SeparatedConvolution(World& world,$/;"	f	class:madness::SeparatedConvolution
SeparatedConvolution	src/madness/mra/operator.h	/^    class SeparatedConvolution : public WorldObject< SeparatedConvolution<Q,NDIM> > {$/;"	c	namespace:madness
SeparatedConvolutionData	src/madness/mra/operator.h	/^        SeparatedConvolutionData(const SeparatedConvolutionData<Q,NDIM>& q) {$/;"	f	struct:madness::SeparatedConvolutionData
SeparatedConvolutionData	src/madness/mra/operator.h	/^        SeparatedConvolutionData(int rank) : muops(rank), norm(0.0) {}$/;"	f	struct:madness::SeparatedConvolutionData
SeparatedConvolutionData	src/madness/mra/operator.h	/^    struct SeparatedConvolutionData {$/;"	s	namespace:madness
SeparatedConvolutionInternal	src/madness/mra/operator.h	/^    struct SeparatedConvolutionInternal {$/;"	s	namespace:madness
Serialization	doc/Latex/parallel-runtime.tex	/^\\subsubsection{Serialization}$/;"	b
Serialization archive h buffer _archive h mpi _archive h binary _fstream _archive h vector _archive h parallel _archive h	doc/Latex/api.tex	/^\\subsubsection{Serialization (archive.h, buffer\\_archive.h, mpi\\_archive.h, binary\\_fstream\\_archive.h, vector\\_archive.h, parallel\\_archive.h)}$/;"	b
Set	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Set( Int i, Int j, T value )$/;"	f	class:elem::AbstractBlockDistMatrix
Set	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Set( Int i, Int j, T value )$/;"	f	class:elem::AbstractDistMatrix
Set	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Set( Int i, Int j, T alpha ) $/;"	f	class:elem::Matrix
Set	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^  void Set(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
Set	src/madness/external/muParser/muParserToken.h	/^      ParserToken& Set(ECmdCode a_iType, const TString &a_strTok=TString())$/;"	f	class:mu::ParserToken
Set	src/madness/external/muParser/muParserToken.h	/^      ParserToken& Set(const ParserCallback &a_pCallback, const TString &a_sTok)$/;"	f	class:mu::ParserToken
SetArgSep	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::SetArgSep(char_type cArgSep)$/;"	f	class:mu::ParserBase
SetArgSep	src/madness/external/muParser/muParserTokenReader.cpp	/^  void ParserTokenReader::SetArgSep(char_type cArgSep)$/;"	f	class:mu::ParserTokenReader
SetAttribute	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement
SetAttribute	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement
SetAttribute	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::SetAttribute( const std::string& name, const std::string& _value )$/;"	f	class:TiXmlElement
SetAttribute	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement
SetBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetBlocksize( Int blocksize )$/;"	f	namespace:elem
SetCDATA	src/madness/external/tinyxml/tinyxml.h	/^	void SetCDATA( bool _cdata )	{ cdata = _cdata; }$/;"	f	class:TiXmlText
SetColShift	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetColShift()$/;"	f	class:elem::AbstractBlockDistMatrix
SetColShift	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetColShift()$/;"	f	class:elem::AbstractDistMatrix
SetColorMap	src/madness/external/elemental/src/core/global.cpp	/^void SetColorMap( ColorMap map )$/;"	f	namespace:elem
SetCondenseWhiteSpace	src/madness/external/tinyxml/tinyxml.h	/^	static void SetCondenseWhiteSpace( bool condense )		{ condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase
SetDecSep	src/madness/external/muParser/muParser.cpp	/^  void Parser::SetDecSep(char_type cDecSep)$/;"	f	class:mu::Parser
SetDefaultBlockHeight	src/madness/external/elemental/src/core/global.cpp	/^void SetDefaultBlockHeight( Int mb )$/;"	f	namespace:elem
SetDefaultBlockWidth	src/madness/external/elemental/src/core/global.cpp	/^void SetDefaultBlockWidth( Int nb )$/;"	f	namespace:elem
SetDefaultResultPrinter	src/madness/external/gtest/src/gtest.cc	/^void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetDefaultXmlGenerator	src/madness/external/gtest/src/gtest.cc	/^void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetDiagonal	src/madness/external/elemental/include/elemental/blas-like/level1/SetDiagonal.hpp	/^SetDiagonal$/;"	f	namespace:elem
SetDiagonal	src/madness/external/elemental/include/elemental/blas-like/level1/SetDiagonal.hpp	/^SetDiagonal( DistMatrix<T,U,V>& A, S alpha )$/;"	f	namespace:elem
SetDiagonal	src/madness/external/elemental/include/elemental/blas-like/level1/SetDiagonal.hpp	/^SetDiagonal( Matrix<T>& A, S alpha )$/;"	f	namespace:elem
SetDiagonal	src/madness/external/elemental/include/elemental/blas-like/level1/SetDiagonal.hpp	/^SetDiagonal( Matrix<T>& A, S alpha, Int offset, LeftOrRight side=LEFT )$/;"	f	namespace:elem
SetDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::SetDiagonal$/;"	f	class:elem::GeneralBlockDistMatrix
SetDiagonal	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::SetDiagonal$/;"	f	class:elem::GeneralDistMatrix
SetDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::SetDiagonal( const Matrix<T>& d, Int offset )$/;"	f	class:elem::Matrix
SetDiagonalHelper	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::SetDiagonalHelper$/;"	f	class:elem::GeneralBlockDistMatrix
SetDiagonalHelper	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::SetDiagonalHelper$/;"	f	class:elem::GeneralDistMatrix
SetDocument	src/madness/external/tinyxml/tinyxml.h	/^	void SetDocument( TiXmlDocument* doc )	{ document = doc; }$/;"	f	class:TiXmlAttribute
SetDoubleAttribute	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement
SetDoubleValue	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute
SetError	src/madness/external/tinyxml/tinyxmlparser.cc	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
SetExpr	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::SetExpr(const string_type &a_sExpr)$/;"	f	class:mu::ParserBase
SetFormula	src/madness/external/muParser/muParserError.cpp	/^  void ParserError::SetFormula(const string_type &a_strFormula)$/;"	f	class:mu::ParserError
SetFormula	src/madness/external/muParser/muParserTokenReader.cpp	/^  void ParserTokenReader::SetFormula(const string_type &a_strFormula)$/;"	f	class:mu::ParserTokenReader
SetGlobalTestPartResultReporter	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::SetGlobalTestPartResultReporter($/;"	f	class:testing::internal::UnitTestImpl
SetGrid	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetGrid( const elem::Grid& grid )$/;"	f	class:elem::AbstractBlockDistMatrix
SetGrid	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetGrid( const elem::Grid& grid )$/;"	f	class:elem::AbstractDistMatrix
SetIdx	src/madness/external/muParser/muParserToken.h	/^      void SetIdx(int a_iIdx)$/;"	f	class:mu::ParserToken
SetImagPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^SetImagPart( Complex<Real>& alpha, const Real& beta )$/;"	f	namespace:elem
SetImagPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^SetImagPart( Real& alpha, const Real& beta )$/;"	f	namespace:elem
SetImagPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetImagPart( Int i, Int j, Base<T> value )$/;"	f	class:elem::AbstractBlockDistMatrix
SetImagPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetImagPart( Int i, Int j, Base<T> value )$/;"	f	class:elem::AbstractDistMatrix
SetImagPart	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::SetImagPart( Int i, Int j, Base<T> alpha )$/;"	f	class:elem::Matrix
SetImagPartOfDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::SetImagPartOfDiagonal$/;"	f	class:elem::GeneralBlockDistMatrix
SetImagPartOfDiagonal	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::SetImagPartOfDiagonal$/;"	f	class:elem::GeneralDistMatrix
SetImagPartOfDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::SetImagPartOfDiagonal( const Matrix<Base<T>>& d, Int offset )$/;"	f	class:elem::Matrix
SetImagPartOfLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetImagPartOfLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
SetImagPartOfLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetImagPartOfLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
SetImagPartOfSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetImagPartOfSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
SetImagPartOfSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetImagPartOfSubmatrix$/;"	f	class:elem::AbstractDistMatrix
SetImagPartOfSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::SetImagPartOfSubmatrix$/;"	f	class:elem::Matrix
SetIndent	src/madness/external/tinyxml/tinyxml.h	/^	void SetIndent( const char* _indent )			{ indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter
SetInjectableArgvs	src/madness/external/gtest/src/gtest-port.cc	/^void SetInjectableArgvs(const ::std::vector<testing::internal::string>* argvs) {$/;"	f	namespace:testing::internal
SetIntValue	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute
SetLineBreak	src/madness/external/tinyxml/tinyxml.h	/^	void SetLineBreak( const char* _lineBreak )		{ lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter
SetLocal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetLocal( Int iLoc, Int jLoc, T alpha )$/;"	f	class:elem::AbstractBlockDistMatrix
SetLocal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetLocal( Int iLoc, Int jLoc, T alpha )$/;"	f	class:elem::AbstractDistMatrix
SetLocalImagPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetLocalImagPart$/;"	f	class:elem::AbstractBlockDistMatrix
SetLocalImagPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetLocalImagPart( Int iLoc, Int jLoc, Base<T> alpha )$/;"	f	class:elem::AbstractDistMatrix
SetLocalRealPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetLocalRealPart$/;"	f	class:elem::AbstractBlockDistMatrix
SetLocalRealPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetLocalRealPart( Int iLoc, Int jLoc, Base<T> alpha )$/;"	f	class:elem::AbstractDistMatrix
SetLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
SetLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
SetLocalSymvBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalSymvBlocksize<Complex<double>>( Int blocksize )$/;"	f	namespace:elem
SetLocalSymvBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalSymvBlocksize<Complex<float>>( Int blocksize )$/;"	f	namespace:elem
SetLocalSymvBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalSymvBlocksize<double>( Int blocksize )$/;"	f	namespace:elem
SetLocalSymvBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalSymvBlocksize<float>( Int blocksize )$/;"	f	namespace:elem
SetLocalTrr2kBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalTrr2kBlocksize<Complex<double>>( Int blocksize )$/;"	f	namespace:elem
SetLocalTrr2kBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalTrr2kBlocksize<Complex<float>>( Int blocksize )$/;"	f	namespace:elem
SetLocalTrr2kBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalTrr2kBlocksize<double>( Int blocksize )$/;"	f	namespace:elem
SetLocalTrr2kBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalTrr2kBlocksize<float>( Int blocksize )$/;"	f	namespace:elem
SetLocalTrrkBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalTrrkBlocksize<Complex<double>>( Int blocksize )$/;"	f	namespace:elem
SetLocalTrrkBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalTrrkBlocksize<Complex<float>>( Int blocksize )$/;"	f	namespace:elem
SetLocalTrrkBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalTrrkBlocksize<double>( Int blocksize )$/;"	f	namespace:elem
SetLocalTrrkBlocksize	src/madness/external/elemental/src/core/global.cpp	/^void SetLocalTrrkBlocksize<float>( Int blocksize )$/;"	f	namespace:elem
SetName	src/madness/external/tinyxml/tinyxml.h	/^	void SetName( const char* _name )	{ name = _name; }				\/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute
SetName	src/madness/external/tinyxml/tinyxml.h	/^	void SetName( const std::string& _name )	{ name = _name; }	$/;"	f	class:TiXmlAttribute
SetNumDiscreteColors	src/madness/external/elemental/src/core/global.cpp	/^void SetNumDiscreteColors( Int numChunks )$/;"	f	namespace:elem
SetParam	src/madness/external/gtest/include/gtest/gtest.h	/^  static void SetParam(const ParamType* parameter) {$/;"	f	class:testing::WithParamInterface
SetParent	src/madness/external/muParser/muParserTokenReader.cpp	/^  void ParserTokenReader::SetParent(ParserBase *a_pParent)$/;"	f	class:mu::ParserTokenReader
SetRealPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^SetRealPart( Complex<Real>& alpha, const Real& beta )$/;"	f	namespace:elem
SetRealPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^SetRealPart( Real& alpha, const Real& beta )$/;"	f	namespace:elem
SetRealPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetRealPart( Int i, Int j, Base<T> value )$/;"	f	class:elem::AbstractBlockDistMatrix
SetRealPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetRealPart( Int i, Int j, Base<T> value )$/;"	f	class:elem::AbstractDistMatrix
SetRealPart	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::SetRealPart( Int i, Int j, Base<T> alpha )$/;"	f	class:elem::Matrix
SetRealPartOfDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::SetRealPartOfDiagonal$/;"	f	class:elem::GeneralBlockDistMatrix
SetRealPartOfDiagonal	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::SetRealPartOfDiagonal$/;"	f	class:elem::GeneralDistMatrix
SetRealPartOfDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::SetRealPartOfDiagonal( const Matrix<Base<T>>& d, Int offset )$/;"	f	class:elem::Matrix
SetRealPartOfLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetRealPartOfLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
SetRealPartOfLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetRealPartOfLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
SetRealPartOfSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetRealPartOfSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
SetRealPartOfSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetRealPartOfSubmatrix$/;"	f	class:elem::AbstractDistMatrix
SetRealPartOfSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::SetRealPartOfSubmatrix$/;"	f	class:elem::Matrix
SetRoot	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetRoot( Int root, bool constrain )$/;"	f	class:elem::AbstractBlockDistMatrix
SetRoot	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetRoot( Int root, bool constrain )$/;"	f	class:elem::AbstractDistMatrix
SetRowShift	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetRowShift()$/;"	f	class:elem::AbstractBlockDistMatrix
SetRowShift	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetRowShift()$/;"	f	class:elem::AbstractDistMatrix
SetScale	src/madness/external/elemental/src/io/ComplexDisplayWindow.cpp	/^ComplexDisplayWindow::SetScale( bool global )$/;"	f	class:elem::ComplexDisplayWindow
SetScale	src/madness/external/elemental/src/io/DisplayWindow.cpp	/^DisplayWindow::SetScale( bool global )$/;"	f	class:elem::DisplayWindow
SetShifts	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetShifts()$/;"	f	class:elem::AbstractBlockDistMatrix
SetShifts	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetShifts()$/;"	f	class:elem::AbstractDistMatrix
SetStreamPrinting	src/madness/external/tinyxml/tinyxml.h	/^	void SetStreamPrinting()						{ indent = "";$/;"	f	class:TiXmlPrinter
SetString	src/madness/external/muParser/muParserToken.h	/^      ParserToken& SetString(const TString &a_strTok, std::size_t a_iSize)$/;"	f	class:mu::ParserToken
SetSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SetSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
SetSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SetSubmatrix$/;"	f	class:elem::AbstractDistMatrix
SetSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::SetSubmatrix$/;"	f	class:elem::Matrix
SetTabSize	src/madness/external/tinyxml/tinyxml.h	/^	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }$/;"	f	class:TiXmlDocument
SetTestPartResultReporterForCurrentThread	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::SetTestPartResultReporterForCurrentThread($/;"	f	class:testing::internal::UnitTestImpl
SetThousandsSep	src/madness/external/muParser/muParser.cpp	/^  void Parser::SetThousandsSep(char_type cThousandsSep)$/;"	f	class:mu::Parser
SetUp	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void SetUp() {}$/;"	f	class:testing::Environment
SetUp	src/madness/external/gtest/src/gtest.cc	/^void Test::SetUp() {$/;"	f	class:testing::Test
SetUp	src/madness/mra/test_mra6.cc	/^        virtual void SetUp() {}$/;"	f	class:__anon12::GenTensorTest
SetUp	src/madness/tensor/test_gentensor.cc	/^        virtual void SetUp() {}$/;"	f	class:__anon43::LowRankTensorTest
SetUp	src/madness/tensor/test_tensor.cc	/^        virtual void SetUp() {}$/;"	f	class:__anon44::TensorTest
SetUp	src/madness/world/test_googletest.cc	/^        virtual void SetUp() {$/;"	f	class:__anon4::WorldTest
SetUp	src/madness/world/test_stack.cc	/^        virtual void SetUp() { }$/;"	f	class:__anon3::StackTest
SetUp	src/madness/world/test_worldptr.cc	/^        virtual void SetUp() {$/;"	f	class:__anon6::WorldPtrTest
SetUp	src/madness/world/test_worldref.cc	/^        virtual void SetUp() {$/;"	f	class:__anon1::WorldRefTest
SetUpEnvironment	src/madness/external/gtest/src/gtest.cc	/^static void SetUpEnvironment(Environment* env) { env->SetUp(); }$/;"	f	namespace:testing::internal
SetUpGrid	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::SetUpGrid()$/;"	f	class:elem::Grid
SetUpTestCase	src/madness/external/gtest/include/gtest/gtest.h	/^  static void SetUpTestCase() {}$/;"	f	class:testing::Test
SetUpTestCaseFunc	src/madness/external/gtest/include/gtest/gtest.h	/^  typedef internal::SetUpTestCaseFunc SetUpTestCaseFunc;$/;"	t	class:testing::Test
SetUpTestCaseFunc	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^typedef void (*SetUpTestCaseFunc)();$/;"	t	namespace:testing::internal
SetUserData	src/madness/external/tinyxml/tinyxml.h	/^	void  SetUserData( void* user )			{ userData = user; }	\/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:TiXmlBase
SetVal	src/madness/external/muParser/muParserToken.h	/^      ParserToken& SetVal(TBase a_fVal, const TString &a_strTok=TString())$/;"	f	class:mu::ParserToken
SetValue	src/madness/external/gtest/include/gtest/gtest.h	/^  void SetValue(const std::string& new_value) {$/;"	f	class:testing::TestProperty
SetValue	src/madness/external/tinyxml/tinyxml.h	/^	void SetValue( const char* _value )	{ value = _value; }				\/\/\/< Set the value.$/;"	f	class:TiXmlAttribute
SetValue	src/madness/external/tinyxml/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlAttribute
SetValue	src/madness/external/tinyxml/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlNode
SetValue	src/madness/external/tinyxml/tinyxml.h	/^	void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode
SetVar	src/madness/external/muParser/muParserToken.h	/^      ParserToken& SetVar(TBase *a_pVar, const TString &a_strTok)$/;"	f	class:mu::ParserToken
SetVarCreator	src/madness/external/muParser/muParserTokenReader.cpp	/^  void ParserTokenReader::SetVarCreator(facfun_type a_pFactory, void *pUserData)$/;"	f	class:mu::ParserTokenReader
SetVarFactory	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::SetVarFactory(facfun_type a_pFactory, void *pUserData)$/;"	f	class:mu::ParserBase
Set_	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Set_( Int i, Int j ) $/;"	f	class:elem::Matrix
Set_error	src/madness/world/safempi.h	/^        void Set_error(int error) { status_.MPI_ERROR = error; }$/;"	f	class:SafeMPI::Status
Set_source	src/madness/world/safempi.h	/^        void Set_source(int source) { status_.MPI_SOURCE = source; }$/;"	f	class:SafeMPI::Status
Set_tag	src/madness/world/safempi.h	/^        void Set_tag(int tag) { status_.MPI_TAG = tag; }$/;"	f	class:SafeMPI::Status
Setup	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Environment
Setup	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Test
Setup_should_be_spelled_SetUp	src/madness/external/gtest/include/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Environment
Setup_should_be_spelled_SetUp	src/madness/external/gtest/include/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Test
ShallowNode	src/madness/mra/funcimpl.h	/^        ShallowNode() : _coeffs(), _has_children(false) {}$/;"	f	struct:madness::ShallowNode
ShallowNode	src/madness/mra/funcimpl.h	/^        ShallowNode(const FunctionNode<T,NDIM>& node)$/;"	f	struct:madness::ShallowNode
ShallowNode	src/madness/mra/funcimpl.h	/^        ShallowNode(const ShallowNode<T,NDIM>& node)$/;"	f	struct:madness::ShallowNode
ShallowNode	src/madness/mra/funcimpl.h	/^    struct ShallowNode {$/;"	s	namespace:madness
ShallowSwap	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::ShallowSwap( AbstractBlockDistMatrix<T>& A )$/;"	f	class:elem::AbstractBlockDistMatrix
ShallowSwap	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::ShallowSwap( AbstractDistMatrix<T>& A )$/;"	f	class:elem::AbstractDistMatrix
ShallowSwap	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::ShallowSwap( Matrix<T>& A )$/;"	f	class:elem::Matrix
ShallowSwap	src/madness/external/elemental/src/core/Memory.cpp	/^void Memory<G>::ShallowSwap( Memory<G>& mem )$/;"	f	class:elem::Memory
Shared pointers sharedptr h	doc/Latex/api.tex	/^\\subsubsection{Shared pointers (sharedptr.h)}$/;"	b
SharedAlignedArray	src/madness/tensor/tensor.h	/^            SharedAlignedArray() : p(0), cnt(0) {}$/;"	f	class:madness::detail::SharedAlignedArray
SharedAlignedArray	src/madness/tensor/tensor.h	/^        template <typename T> class SharedAlignedArray {$/;"	c	namespace:madness::detail
Shift	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int Shift( Int rank, Int align, Int stride )$/;"	f	namespace:elem
Shift_	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^inline Int Shift_( Int rank, Int align, Int stride )$/;"	f	namespace:elem
Shmoo	src/madness/mra/convolution1d.h	/^            Shmoo(Level n, Translation lx, const GenericConvolution1D<Q,opT>* q)$/;"	f	struct:madness::GenericConvolution1D::Shmoo
Shmoo	src/madness/mra/convolution1d.h	/^        struct Shmoo {$/;"	s	class:madness::GenericConvolution1D
ShouldRunTest	src/madness/external/gtest/include/gtest/gtest.h	/^  static bool ShouldRunTest(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
ShouldRunTestCase	src/madness/external/gtest/src/gtest.cc	/^static bool ShouldRunTestCase(const TestCase* test_case) {$/;"	f	namespace:testing::internal
ShouldRunTestOnShard	src/madness/external/gtest/src/gtest.cc	/^bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {$/;"	f	namespace:testing::internal
ShouldShard	src/madness/external/gtest/src/gtest.cc	/^bool ShouldShard(const char* total_shards_env,$/;"	f	namespace:testing::internal
ShouldUseColor	src/madness/external/gtest/src/gtest.cc	/^bool ShouldUseColor(bool stdout_is_tty) {$/;"	f	namespace:testing::internal
ShowWideCString	src/madness/external/gtest/src/gtest.cc	/^std::string String::ShowWideCString(const wchar_t * wide_c_str) {$/;"	f	class:testing::internal::String
Shuffle	src/madness/external/gtest/src/gtest-internal-inl.h	/^inline void Shuffle(internal::Random* random, std::vector<E>* v) {$/;"	f	namespace:testing::internal
ShuffleRange	src/madness/external/gtest/src/gtest-internal-inl.h	/^void ShuffleRange(internal::Random* random, int begin, int end,$/;"	f	namespace:testing::internal
ShuffleTests	src/madness/external/gtest/src/gtest.cc	/^void TestCase::ShuffleTests(internal::Random* random) {$/;"	f	class:testing::TestCase
ShuffleTests	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::ShuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
Sign	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^Sign$/;"	f	namespace:elem
Sign	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^Sign( DistMatrix<F>& A, const SignCtrl<Base<F>> signCtrl=SignCtrl<Base<F>>() )$/;"	f	namespace:elem
Sign	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^Sign( Matrix<F>& A, const SignCtrl<Base<F>> signCtrl=SignCtrl<Base<F>>() )$/;"	f	namespace:elem
Sign	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Sign(value_type v) { return (value_type)((v<0) ? -1 : (v>0) ? 1 : 0); }$/;"	f	class:mu::Parser
SignAndMagnitudeToBiased	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static Bits SignAndMagnitudeToBiased(const Bits &sam) {$/;"	f	class:testing::internal::FloatingPoint
SignCtrl	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^    SignCtrl()$/;"	f	struct:elem::SignCtrl
SignCtrl	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^struct SignCtrl {$/;"	s	namespace:elem
SignDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^SignDivide$/;"	f	namespace:elem::schur
SignScaling	src/madness/external/elemental/include/elemental/lapack-like/funcs/decl.hpp	/^enum SignScaling {$/;"	g	namespace:elem::SignScalingNS
SignScalingNS	src/madness/external/elemental/include/elemental/lapack-like/funcs/decl.hpp	/^namespace SignScalingNS {$/;"	n	namespace:elem
SignedDFInterface	src/madness/mra/sdf_domainmask.h	/^    class SignedDFInterface {$/;"	c	namespace:madness
SimpleCache	src/madness/mra/simplecache.h	/^        SimpleCache() : cache() {};$/;"	f	class:madness::SimpleCache
SimpleCache	src/madness/mra/simplecache.h	/^        SimpleCache(const SimpleCache& c) : cache(c.cache) {};$/;"	f	class:madness::SimpleCache
SimpleCache	src/madness/mra/simplecache.h	/^    class SimpleCache {$/;"	c	namespace:madness
SimplePmap	src/madness/mra/funcimpl.h	/^        SimplePmap(World& world) : nproc(world.nproc()), me(world.rank())$/;"	f	class:madness::SimplePmap
SimplePmap	src/madness/mra/funcimpl.h	/^    class SimplePmap : public WorldDCPmapInterface<keyT> {$/;"	c	namespace:madness
SimpleUnaryOpWrapper	src/madness/mra/mra.h	/^            SimpleUnaryOpWrapper(T (*f)(T)) : f(f) {}$/;"	f	struct:madness::Function::SimpleUnaryOpWrapper
SimpleUnaryOpWrapper	src/madness/mra/mra.h	/^        struct SimpleUnaryOpWrapper {$/;"	s	class:madness::Function
Sin	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Sin( const F& alpha )$/;"	f	namespace:elem
Sin	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Sin(value_type v)   { return sin(v);  }$/;"	f	class:mu::Parser
SingleFailureChecker	src/madness/external/gtest/include/gtest/gtest-spi.h	/^class GTEST_API_ SingleFailureChecker {$/;"	c	namespace:testing::internal
SingleFailureChecker	src/madness/external/gtest/src/gtest.cc	/^SingleFailureChecker:: SingleFailureChecker($/;"	f	class:testing::internal::SingleFailureChecker
SingularMatrixException	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^    SingularMatrixException( const char* msg="Matrix was singular" ) $/;"	f	class:elem::SingularMatrixException
SingularMatrixException	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^class SingularMatrixException : public std::runtime_error $/;"	c	namespace:elem
Sinh	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Sinh( const F& alpha )$/;"	f	namespace:elem
Sinh	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Sinh(value_type v)  { return sinh(v); }$/;"	f	class:mu::Parser
Size	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::Size()   const { return VCSize(); }$/;"	f	class:elem::Grid
Size	src/madness/external/elemental/src/core/Memory.cpp	/^std::size_t Memory<G>::Size() const { return size_; }$/;"	f	class:elem::Memory
Size	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int Size( Comm comm )$/;"	f	namespace:elem::mpi
Size	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int Size( Group group )$/;"	f	namespace:elem::mpi
Size	src/madness/external/tinyxml/tinyxml.h	/^	size_t Size()									{ return buffer.size(); }$/;"	f	class:TiXmlPrinter
Skeleton	src/madness/external/elemental/include/elemental/lapack-like/factor/Skeleton.hpp	/^Skeleton$/;"	f	namespace:elem
SkewHermitianEig	src/madness/external/elemental/include/elemental/lapack-like/decomp/SkewHermitianEig.hpp	/^SkewHermitianEig$/;"	f	namespace:elem
SkipComma	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^inline const char* SkipComma(const char* str) {$/;"	f	namespace:testing::internal
SkipPrefix	src/madness/external/gtest/src/gtest.cc	/^bool SkipPrefix(const char* prefix, const char** pstr) {$/;"	f	namespace:testing::internal
SkipSpaces	src/madness/external/gtest/src/gtest-typed-test.cc	/^static const char* SkipSpaces(const char* str) {$/;"	f	namespace:testing::internal
SkipWhiteSpace	src/madness/external/tinyxml/tinyxmlparser.cc	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
Slater	src/apps/chem/correlationfactor.h	/^	    Polynomial, Slater, poly4erfc, Two};$/;"	e	enum:madness::NuclearCorrelationFactor::corrfactype
Slater	src/apps/chem/correlationfactor.h	/^	Slater(World& world, const Molecule& mol, const double a)$/;"	f	class:madness::Slater
Slater	src/apps/chem/correlationfactor.h	/^class Slater : public NuclearCorrelationFactor {$/;"	c	namespace:madness
SlaterF12Interface	src/madness/mra/function_interface.h	/^		SlaterF12Interface(double mu, double lo, double eps,$/;"	f	class:madness::SlaterF12Interface
SlaterF12Interface	src/madness/mra/function_interface.h	/^	class SlaterF12Interface : public TwoElectronInterface<double,6> {$/;"	c	namespace:madness
SlaterF12Operator	src/madness/mra/operator.h	/^    static inline SeparatedConvolution<double,3> SlaterF12Operator(World& world,$/;"	f	namespace:madness
SlaterF12OperatorPtr	src/madness/mra/operator.h	/^    static inline SeparatedConvolution<double,3>* SlaterF12OperatorPtr(World& world,$/;"	f	namespace:madness
SlaterFit	src/madness/mra/gfit.h	/^	static GFit SlaterFit(double gamma, double lo, double hi, double eps, bool prnt=false) {$/;"	f	class:madness::GFit
SlaterFunctionInterface	src/madness/mra/function_interface.h	/^		SlaterFunctionInterface(double mu, double lo, double eps,$/;"	f	class:madness::SlaterFunctionInterface
SlaterFunctionInterface	src/madness/mra/function_interface.h	/^	class SlaterFunctionInterface : public TwoElectronInterface<double,6> {$/;"	c	namespace:madness
SlaterOperator	src/madness/mra/operator.h	/^    static inline SeparatedConvolution<double,3> SlaterOperator(World& world,$/;"	f	namespace:madness
SleepMilliseconds	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline void SleepMilliseconds(int n) {$/;"	f	namespace:testing::internal
Slice	src/madness/tensor/slice.h	/^        inline Slice() : start(0), end(-1), step(1) {};$/;"	f	class:madness::Slice
Slice	src/madness/tensor/slice.h	/^        inline Slice(long s, long e, long stp=1) : start(s), end(e), step(stp) {};$/;"	f	class:madness::Slice
Slice	src/madness/tensor/slice.h	/^    class Slice {$/;"	c	namespace:madness
SliceGenTensor	src/madness/tensor/gentensor.h	/^    SliceGenTensor<T>(const SliceGenTensor<T>& g) : SliceLowRankTensor<T>(g) {}$/;"	f	class:madness::SliceGenTensor
SliceGenTensor	src/madness/tensor/gentensor.h	/^    SliceGenTensor<T>(const SliceLowRankTensor<T>& g) : SliceLowRankTensor<T>(g) {}$/;"	f	class:madness::SliceGenTensor
SliceGenTensor	src/madness/tensor/gentensor.h	/^class SliceGenTensor : public SliceLowRankTensor<T> {$/;"	c	namespace:madness
SliceLowRankTensor	src/madness/tensor/lowranktensor.h	/^    SliceLowRankTensor<T> () {}$/;"	f	class:madness::SliceLowRankTensor
SliceLowRankTensor	src/madness/tensor/lowranktensor.h	/^    SliceLowRankTensor<T> (const LowRankTensor<T>& gt, const std::vector<Slice>& s)$/;"	f	class:madness::SliceLowRankTensor
SliceLowRankTensor	src/madness/tensor/lowranktensor.h	/^class SliceLowRankTensor {$/;"	c	namespace:madness
SliceTensor	src/madness/tensor/tensor.h	/^        SliceTensor(const Tensor<T>& t, const Slice s[])$/;"	f	class:madness::SliceTensor
SliceTensor	src/madness/tensor/tensor.h	/^    template <class T> class SliceTensor : public Tensor<T> {$/;"	c	namespace:madness
SlideLockedPartitionDown	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlideLockedPartitionDown$/;"	f	namespace:elem
SlideLockedPartitionDownDiagonal	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlideLockedPartitionDownDiagonal$/;"	f	namespace:elem
SlideLockedPartitionLeft	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlideLockedPartitionLeft$/;"	f	namespace:elem
SlideLockedPartitionRight	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlideLockedPartitionRight$/;"	f	namespace:elem
SlideLockedPartitionUp	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlideLockedPartitionUp$/;"	f	namespace:elem
SlideLockedPartitionUpDiagonal	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlideLockedPartitionUpDiagonal$/;"	f	namespace:elem
SlidePartitionDown	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlidePartitionDown$/;"	f	namespace:elem
SlidePartitionDownDiagonal	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlidePartitionDownDiagonal$/;"	f	namespace:elem
SlidePartitionLeft	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlidePartitionLeft$/;"	f	namespace:elem
SlidePartitionRight	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlidePartitionRight$/;"	f	namespace:elem
SlidePartitionUp	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlidePartitionUp$/;"	f	namespace:elem
SlidePartitionUpDiagonal	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^SlidePartitionUpDiagonal$/;"	f	namespace:elem
SmoothingOperator	src/madness/mra/operator.h	/^    static inline SeparatedConvolution<double,NDIM> SmoothingOperator(World& world,$/;"	f	namespace:madness
SmoothingOperator3D	src/madness/mra/operator.h	/^    static inline SeparatedConvolution<double,3> SmoothingOperator3D(World& world,$/;"	f	namespace:madness
Snapshot	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^Snapshot$/;"	f	namespace:elem::pspec
SnapshotCtrl	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    SnapshotCtrl()$/;"	f	struct:elem::SnapshotCtrl
SnapshotCtrl	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^struct SnapshotCtrl$/;"	s	namespace:elem
SocketWriter	src/madness/external/gtest/src/gtest-internal-inl.h	/^    SocketWriter(const string& host, const string& port)$/;"	f	class:testing::internal::StreamingListener::SocketWriter
SocketWriter	src/madness/external/gtest/src/gtest-internal-inl.h	/^  class SocketWriter : public AbstractSocketWriter {$/;"	c	class:testing::internal::StreamingListener
SoftThreshold	src/madness/external/elemental/include/elemental/convex/SoftThreshold.hpp	/^SoftThreshold( DistMatrix<F,U,V>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem
SoftThreshold	src/madness/external/elemental/include/elemental/convex/SoftThreshold.hpp	/^SoftThreshold( F alpha, Base<F> tau )$/;"	f	namespace:elem
SoftThreshold	src/madness/external/elemental/include/elemental/convex/SoftThreshold.hpp	/^SoftThreshold( Matrix<F>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem
SolidHarmonicGaussian	src/apps/chem/PNOGuessFunctions.h	/^		SolidHarmonicGaussian(const Atom& atom, const double e, int l, int m)$/;"	f	class:madness::BasisFunctions::SolidHarmonicGaussian
SolidHarmonicGaussian	src/apps/chem/PNOGuessFunctions.h	/^	class SolidHarmonicGaussian : public FunctionFunctorInterface<double, 3> {$/;"	c	class:madness::BasisFunctions
SolveAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/SolveAfter.hpp	/^SolveAfter$/;"	f	namespace:elem::cholesky
SolveAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/SolveAfter.hpp	/^SolveAfter$/;"	f	namespace:elem::ldl
SolveAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/SolveAfter.hpp	/^SolveAfter( const DistMatrix<F>& A, DistMatrix<F>& B, bool conjugated=false )$/;"	f	namespace:elem::ldl
SolveAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/SolveAfter.hpp	/^SolveAfter( const Matrix<F>& A, Matrix<F>& B, bool conjugated=false )$/;"	f	namespace:elem::ldl
SolveAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/SolveAfter.hpp	/^SolveAfter$/;"	f	namespace:elem::lq
SolveAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/SolveAfter.hpp	/^SolveAfter$/;"	f	namespace:elem::lu
SolveAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/SolveAfter.hpp	/^SolveAfter( Orientation orientation, const Matrix<F>& A, Matrix<F>& B )$/;"	f	namespace:elem::lu
SolveAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/SolveAfter.hpp	/^SolveAfter$/;"	f	namespace:elem::qr
SolveAfter	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/SolveAfter.hpp	/^SolveAfter$/;"	f	namespace:elem::rq
Solver	src/apps/hf/solver.h	/^    Solver(World& world, const std::string& filename) : _world(world)$/;"	f	class:madness::Solver
Solver	src/apps/hf/solver.h	/^    Solver(World& world,$/;"	f	class:madness::Solver
Solver	src/apps/hf/solver.h	/^  class Solver$/;"	c	namespace:madness
SolverInterface	src/madness/tensor/kain.cc	/^struct SolverInterface {$/;"	s	file:
SolverTargetInterface	src/madness/tensor/kain.cc	/^struct SolverTargetInterface {$/;"	s	file:
SolverTargetInterface	src/madness/tensor/solvers.h	/^    struct SolverTargetInterface {$/;"	s	namespace:madness
Sort	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig/Sort.hpp	/^Sort$/;"	f	namespace:elem::herm_eig
Sort	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig/Sort.hpp	/^Sort( Matrix<Base<F>>& w, Matrix<F>& Z, SortType sort=ASCENDING )$/;"	f	namespace:elem::herm_eig
Sort	src/madness/external/elemental/include/elemental/lapack-like/util/Sort.hpp	/^Sort( DistMatrix<Real,U,V>& X, SortType sort=ASCENDING )$/;"	f	namespace:elem
Sort	src/madness/external/elemental/include/elemental/lapack-like/util/Sort.hpp	/^Sort( Matrix<Real>& X, SortType sort=ASCENDING )$/;"	f	namespace:elem
SortType	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum SortType$/;"	g	namespace:elem::SortTypeNS
SortTypeNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace SortTypeNS {$/;"	n	namespace:elem
Sp	src/apps/chem/correlationfactor.h	/^	coord_3d Sp(const coord_3d& vr1A, const double& Z) const {$/;"	f	class:madness::GaussSlater
Sp	src/apps/chem/correlationfactor.h	/^	coord_3d Sp(const coord_3d& vr1A, const double& Z) const {$/;"	f	class:madness::LinearSlater
Sp	src/apps/chem/correlationfactor.h	/^    coord_3d Sp(const coord_3d& vr1A, const double& Z) const {$/;"	f	class:madness::GradientalGaussSlater
Sp	src/apps/chem/correlationfactor.h	/^    coord_3d Sp(const coord_3d& vr1A, const double& Z) const {$/;"	f	class:madness::Polynomial
Sp	src/apps/chem/correlationfactor.h	/^    coord_3d Sp(const coord_3d& vr1A, const double& Z) const {$/;"	f	class:madness::PseudoNuclearCorrelationFactor
Sp	src/apps/chem/correlationfactor.h	/^    coord_3d Sp(const coord_3d& vr1A, const double& Z) const {$/;"	f	class:madness::Slater
Sp	src/apps/chem/correlationfactor.h	/^    coord_3d Sp(const coord_3d& vr1A, const double& Z) const {$/;"	f	class:madness::poly4erfc
SparseInvCov	src/madness/external/elemental/include/elemental/convex/SparseInvCov.hpp	/^SparseInvCov$/;"	f	namespace:elem
Specialbox_op	src/madness/mra/leafop.h	/^    Specialbox_op() {}$/;"	f	struct:madness::Specialbox_op
Specialbox_op	src/madness/mra/leafop.h	/^  struct Specialbox_op{$/;"	s	namespace:madness
SpectralDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianEig/SDC.hpp	/^SpectralDivide$/;"	f	namespace:elem::herm_eig
SpectralDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^SpectralDivide$/;"	f	namespace:elem::schur
SpectralDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^SpectralDivide( DistMatrix<Real>& A, const SdcCtrl<Real>& sdcCtrl )$/;"	f	namespace:elem::schur
SpectralDivide	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^SpectralDivide( Matrix<Real>& A, const SdcCtrl<Real>& sdcCtrl )$/;"	f	namespace:elem::schur
SpectralPropagator	src/examples/spectralprop.h	/^	SpectralPropagator(int NPT)$/;"	f	class:madness::SpectralPropagator
SpectralPropagator	src/examples/spectralprop.h	/^    class SpectralPropagator {$/;"	c	namespace:madness
SpectralPropagatorGaussLobatto	src/examples/spectralprop.h	/^	SpectralPropagatorGaussLobatto(int NPT)$/;"	f	class:madness::SpectralPropagatorGaussLobatto
SpectralPropagatorGaussLobatto	src/examples/spectralprop.h	/^    class SpectralPropagatorGaussLobatto {$/;"	c	namespace:madness
Sphere	src/madness/mra/testbc.cc	/^    Sphere(const coordT& center, double radius, double sigma)$/;"	f	class:Sphere
Sphere	src/madness/mra/testbc.cc	/^class Sphere : public FunctionFunctorInterface<double,3> {$/;"	c	file:
Spinlock	src/madness/world/worldmutex.h	/^        Spinlock(int junk=0)  \/\/ Junk so that can force initializer in mraX.cc$/;"	f	class:madness::Spinlock
Spinlock	src/madness/world/worldmutex.h	/^    class Spinlock {$/;"	c	namespace:madness
Spinlock	src/madness/world/worldmutex.h	/^    typedef Mutex Spinlock;$/;"	t	namespace:madness
Split	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Split( Comm comm, int color, int key, Comm& newComm )$/;"	f	namespace:elem::mpi
Split	src/madness/world/range.h	/^    typedef tbb::split Split;$/;"	t	namespace:madness
Split	src/madness/world/safempi.h	/^        Intracomm Split(int Color, int Key = 0) const {$/;"	f	class:SafeMPI::Intracomm
SplitGrid	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^inline void SplitGrid$/;"	f	namespace:elem::schur
SplitString	src/madness/external/gtest/src/gtest-death-test.cc	/^static void SplitString(const ::std::string& str, char delimiter,$/;"	f	namespace:testing::internal
Split_type	src/madness/world/safempi.h	/^      Intracomm Split_type(int Type, int Key = 0) const {$/;"	f	class:SafeMPI::Intracomm
SplitterFunctor	src/apps/moldft/testperiodic.cc	/^class SplitterFunctor: public FunctionFunctorInterface<double,3> {$/;"	c	file:
Spp_div_S	src/apps/chem/correlationfactor.h	/^	double Spp_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::GaussSlater
Spp_div_S	src/apps/chem/correlationfactor.h	/^	double Spp_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::LinearSlater
Spp_div_S	src/apps/chem/correlationfactor.h	/^    double Spp_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::GradientalGaussSlater
Spp_div_S	src/apps/chem/correlationfactor.h	/^    double Spp_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::Polynomial
Spp_div_S	src/apps/chem/correlationfactor.h	/^    double Spp_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::PseudoNuclearCorrelationFactor
Spp_div_S	src/apps/chem/correlationfactor.h	/^    double Spp_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::Slater
Spp_div_S	src/apps/chem/correlationfactor.h	/^    double Spp_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::poly4erfc
Spy	src/madness/external/elemental/include/elemental/io/Spy.hpp	/^Spy$/;"	f	namespace:elem
Spy	src/madness/external/elemental/include/elemental/io/Spy.hpp	/^Spy( const DistMatrix<T,U,V>& A, std::string title="Default", Base<T> tol=0 )$/;"	f	namespace:elem
Spy	src/madness/external/elemental/include/elemental/io/Spy.hpp	/^Spy( const Matrix<T>& A, std::string title="Default", Base<T> tol=0 )$/;"	f	namespace:elem
Spy	src/madness/external/elemental/include/elemental/io/SpyWidget/impl.hpp	/^SpyWidget::Spy( const Matrix<Int>* A )$/;"	f	class:elem::SpyWidget
Spy	src/madness/external/elemental/src/io/SpyWindow.cpp	/^SpyWindow::Spy( const Matrix<Int>* matrix, QString title )$/;"	f	class:elem::SpyWindow
SpyWidget	src/madness/external/elemental/include/elemental/io/SpyWidget/decl.hpp	/^class SpyWidget : public QWidget$/;"	c	namespace:elem
SpyWidget	src/madness/external/elemental/include/elemental/io/SpyWidget/impl.hpp	/^SpyWidget::SpyWidget( QWidget* parent )$/;"	f	class:elem::SpyWidget
SpyWindow	src/madness/external/elemental/include/elemental/io/SpyWindow/decl.hpp	/^class SpyWindow : public QWidget$/;"	c	namespace:elem
SpyWindow	src/madness/external/elemental/src/io/SpyWindow.cpp	/^SpyWindow::SpyWindow( QWidget* parent )$/;"	f	class:elem::SpyWindow
Sqrt	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Sqrt( const F& alpha )$/;"	f	namespace:elem
Sqrt	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Sqrt(value_type v) { return sqrt(v);  }$/;"	f	class:mu::Parser
SquareRoot	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^SquareRoot$/;"	f	namespace:elem
SquareRootCtrl	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^    SquareRootCtrl()$/;"	f	struct:elem::SquareRootCtrl
SquareRootCtrl	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^struct SquareRootCtrl {$/;"	s	namespace:elem
Sr_div_S	src/apps/chem/correlationfactor.h	/^	double Sr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::LinearSlater
Sr_div_S	src/apps/chem/correlationfactor.h	/^	double Sr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::Slater
Sr_div_S	src/apps/chem/correlationfactor.h	/^    double Sr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::GaussSlater
Sr_div_S	src/apps/chem/correlationfactor.h	/^    double Sr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::GradientalGaussSlater
Sr_div_S	src/apps/chem/correlationfactor.h	/^    double Sr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::Polynomial
Sr_div_S	src/apps/chem/correlationfactor.h	/^    double Sr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::poly4erfc
Sr_div_S	src/apps/chem/correlationfactor.h	/^    double Sr_div_S(const double& r, const double& Z) const {return 0.0;}$/;"	f	class:madness::PseudoNuclearCorrelationFactor
Srr_div_S	src/apps/chem/correlationfactor.h	/^    double Srr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::GaussSlater
Srr_div_S	src/apps/chem/correlationfactor.h	/^    double Srr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::GradientalGaussSlater
Srr_div_S	src/apps/chem/correlationfactor.h	/^    double Srr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::LinearSlater
Srr_div_S	src/apps/chem/correlationfactor.h	/^    double Srr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::Polynomial
Srr_div_S	src/apps/chem/correlationfactor.h	/^    double Srr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::Slater
Srr_div_S	src/apps/chem/correlationfactor.h	/^    double Srr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::poly4erfc
Srr_div_S	src/apps/chem/correlationfactor.h	/^    double Srr_div_S(const double& r, const double& Z) const {return 0.0;}$/;"	f	class:madness::PseudoNuclearCorrelationFactor
Srrr_div_S	src/apps/chem/correlationfactor.h	/^    double Srrr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::GaussSlater
Srrr_div_S	src/apps/chem/correlationfactor.h	/^    double Srrr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::GradientalGaussSlater
Srrr_div_S	src/apps/chem/correlationfactor.h	/^    double Srrr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::LinearSlater
Srrr_div_S	src/apps/chem/correlationfactor.h	/^    double Srrr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::Polynomial
Srrr_div_S	src/apps/chem/correlationfactor.h	/^    double Srrr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::Slater
Srrr_div_S	src/apps/chem/correlationfactor.h	/^    double Srrr_div_S(const double& r, const double& Z) const {$/;"	f	class:madness::poly4erfc
Srrr_div_S	src/apps/chem/correlationfactor.h	/^    double Srrr_div_S(const double& r, const double& Z) const {return 0.0;}$/;"	f	class:madness::PseudoNuclearCorrelationFactor
Stack	src/madness/world/stack.h	/^        Stack() :$/;"	f	class:madness::Stack
Stack	src/madness/world/stack.h	/^        Stack(Stack<T, N>&& other) { move(other); }$/;"	f	class:madness::Stack
Stack	src/madness/world/stack.h	/^        Stack(const Stack<T,N>& other) {$/;"	f	class:madness::Stack
Stack	src/madness/world/stack.h	/^    class Stack : public detail::StackBase<T, std::is_pod<T>::value> {$/;"	c	namespace:madness
StackBase	src/madness/world/stack.h	/^        class StackBase {$/;"	c	namespace:madness::detail
StackBase	src/madness/world/stack.h	/^        class StackBase<T, true> {$/;"	c	namespace:madness::detail
StackBase_	src/madness/world/stack.h	/^        typedef detail::StackBase<T, std::is_pod<T>::value> StackBase_;$/;"	t	class:madness::Stack
StackDump	src/madness/external/muParser/muParserBase.cpp	/^  void ParserBase::StackDump( const ParserStack<token_type> &a_stVal, $/;"	f	class:mu::ParserBase
StackGrowsDown	src/madness/external/gtest/src/gtest-death-test.cc	/^bool StackGrowsDown() {$/;"	f	namespace:testing::internal
StackLowerThanAddress	src/madness/external/gtest/src/gtest-death-test.cc	/^void StackLowerThanAddress(const void* ptr, bool* result) {$/;"	f	namespace:testing::internal
StackTest	src/madness/world/test_stack.cc	/^        StackTest() { }$/;"	f	class:__anon3::StackTest
StackTest	src/madness/world/test_stack.cc	/^    class StackTest : public ::testing::Test, public StackTestBase<T> {$/;"	c	namespace:__anon3	file:
StackTestBase	src/madness/world/test_stack.cc	/^    struct StackTestBase {$/;"	s	namespace:__anon3	file:
StackTestBase	src/madness/world/test_stack.cc	/^    struct StackTestBase<C> {$/;"	s	namespace:__anon3	file:
StackTestBase	src/madness/world/test_stack.cc	/^    struct StackTestBase<int*> {$/;"	s	namespace:__anon3	file:
StackTestBase	src/madness/world/test_stack.cc	/^    struct StackTestBase<std::shared_ptr<int> > {$/;"	s	namespace:__anon3	file:
Stack_	src/madness/world/test_stack.cc	/^        typedef Stack<T,4> Stack_;$/;"	t	class:__anon3::StackTest	file:
Stamp	src/madness/external/tinyxml/tinyxmlparser.cc	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData
Standalone	src/madness/external/tinyxml/tinyxml.h	/^	const char *Standalone() const		{ return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration
Start	src/madness/external/elemental/include/elemental/core/Timer/impl.hpp	/^Timer::Start()$/;"	f	class:elem::Timer
Start	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void Start() { SendLn("gtest_streaming_protocol_version=1.0"); }$/;"	f	class:testing::internal::StreamingListener
Stat	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }$/;"	f	namespace:testing::internal::posix
StatStruct	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef struct _stat StatStruct;$/;"	t	namespace:testing::internal::posix	typeref:struct:testing::internal::posix::_stat
StaticAssertTypeEq	src/madness/external/gtest/include/gtest/gtest.h	/^bool StaticAssertTypeEq() {$/;"	f	namespace:testing
StaticAssertTypeEqHelper	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^struct StaticAssertTypeEqHelper<T, T> {};$/;"	s	namespace:testing::internal
Status	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^typedef MPI_Status Status;$/;"	t	namespace:elem::mpi
Status	src/madness/world/safempi.h	/^        Status(MPI_Status other) : status_(other) { }$/;"	f	class:SafeMPI::Status
Status	src/madness/world/safempi.h	/^        Status(const Status &other) : status_(other.status_) { }$/;"	f	class:SafeMPI::Status
Status	src/madness/world/safempi.h	/^        Status(void) : status_() { }$/;"	f	class:SafeMPI::Status
Status	src/madness/world/safempi.h	/^    class Status {$/;"	c	namespace:SafeMPI
SteepestDescent	src/madness/tensor/kain.cc	/^    SteepestDescent(const std::shared_ptr<OptimizationTargetInterface>& target,$/;"	f	class:SteepestDescent
SteepestDescent	src/madness/tensor/kain.cc	/^class SteepestDescent : public OptimizerInterface {$/;"	c	file:
SteepestDescent	src/madness/tensor/solvers.cc	/^    SteepestDescent::SteepestDescent(const std::shared_ptr<OptimizationTargetInterface>& tar,$/;"	f	class:madness::SteepestDescent
SteepestDescent	src/madness/tensor/solvers.h	/^    class SteepestDescent : public OptimizerInterface {$/;"	c	namespace:madness
Stefan_Boltzmann_constant	src/madness/constants.h	/^        const double Stefan_Boltzmann_constant = 5.670400e-8 ; \/\/      0.000040e-8         W m^-2 K^-4$/;"	m	namespace:madness::constants
Stop	src/madness/external/elemental/include/elemental/core/Timer/impl.hpp	/^Timer::Stop()$/;"	f	class:elem::Timer
StoreConditionalSigned32	src/madness/world/bgq_atomics.h	/^__INLINE__ int StoreConditionalSigned32( volatile int32_t *pVar, int32_t Val )$/;"	f
StorePtr	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::StorePtr(void *a_pAddr)$/;"	f	class:mu::ParserByteCode
Str	src/madness/external/tinyxml/tinyxml.h	/^	const std::string& Str()						{ return buffer; }$/;"	f	class:TiXmlPrinter
StrCaseCmp	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int StrCaseCmp(const char* s1, const char* s2) {$/;"	f	namespace:testing::internal::posix
StrDup	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline char* StrDup(const char* src) { return _strdup(src); }$/;"	f	namespace:testing::internal::posix
StrDup	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline char* StrDup(const char* src) { return strdup(src); }$/;"	f	namespace:testing::internal::posix
StrError	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline const char* StrError(int errnum) { return strerror(errnum); }$/;"	f	namespace:testing::internal::posix
StrFun1	src/madness/external/muParser/muParserTest.h	/^        static value_type StrFun1(const char_type* v1)                               $/;"	f	class:mu::Test::ParserTester
StrFun2	src/madness/external/muParser/muParserTest.h	/^        static value_type StrFun2(const char_type* v1, value_type v2)                $/;"	f	class:mu::Test::ParserTester
StrFun3	src/madness/external/muParser/muParserTest.h	/^        static value_type StrFun3(const char_type* v1, value_type v2, value_type v3) $/;"	f	class:mu::Test::ParserTester
StrNCpy	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline const char* StrNCpy(char* dest, const char* src, size_t n) {$/;"	f	namespace:testing::internal::posix
StrToFloat	src/madness/external/muParser/muParserTest.h	/^        static value_type StrToFloat(const char_type* a_szMsg)$/;"	f	class:mu::Test::ParserTester
StreamHelper	src/madness/external/gtest/include/gtest/gtest-message.h	/^  inline void StreamHelper(internal::false_type \/*is_pointer*\/,$/;"	f	class:testing::Message
StreamHelper	src/madness/external/gtest/include/gtest/gtest-message.h	/^  inline void StreamHelper(internal::true_type \/*is_pointer*\/, T* pointer) {$/;"	f	class:testing::Message
StreamIn	src/madness/external/tinyxml/tinyxmlparser.cc	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment
StreamIn	src/madness/external/tinyxml/tinyxmlparser.cc	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration
StreamIn	src/madness/external/tinyxml/tinyxmlparser.cc	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument
StreamIn	src/madness/external/tinyxml/tinyxmlparser.cc	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement
StreamIn	src/madness/external/tinyxml/tinyxmlparser.cc	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText
StreamIn	src/madness/external/tinyxml/tinyxmlparser.cc	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown
StreamTo	src/madness/external/tinyxml/tinyxmlparser.cc	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase
StreamWhiteSpace	src/madness/external/tinyxml/tinyxmlparser.cc	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase
StreamWideCharsToMessage	src/madness/external/gtest/src/gtest.cc	/^static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,$/;"	f	namespace:testing::internal
StreamableToString	src/madness/external/gtest/include/gtest/gtest-message.h	/^std::string StreamableToString(const T& streamable) {$/;"	f	namespace:testing::internal
StreamingListener	src/madness/external/gtest/src/gtest-internal-inl.h	/^  StreamingListener(const string& host, const string& port)$/;"	f	class:testing::internal::StreamingListener
StreamingListener	src/madness/external/gtest/src/gtest-internal-inl.h	/^  explicit StreamingListener(AbstractSocketWriter* socket_writer)$/;"	f	class:testing::internal::StreamingListener
StreamingListener	src/madness/external/gtest/src/gtest-internal-inl.h	/^class StreamingListener : public EmptyTestEventListener {$/;"	c	namespace:testing::internal
StridedMemCopy	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^StridedMemCopy$/;"	f	namespace:elem
String	src/madness/external/gtest/include/gtest/internal/gtest-string.h	/^class GTEST_API_ String {$/;"	c	namespace:testing::internal
StringEqual	src/madness/external/tinyxml/tinyxmlparser.cc	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase
StringFromGTestEnv	src/madness/external/gtest/src/gtest-port.cc	/^const char* StringFromGTestEnv(const char* flag, const char* default_value) {$/;"	f	namespace:testing::internal
StringStreamToString	src/madness/external/gtest/src/gtest.cc	/^std::string StringStreamToString(::std::stringstream* ss) {$/;"	f	namespace:testing::internal
StringToDist	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^StringToDist( std::string s )$/;"	f	namespace:elem::DistNS
Strings	src/madness/external/gtest/include/gtest/gtest-printers.h	/^typedef ::std::vector<string> Strings;$/;"	t	namespace:testing::internal
StrongOrthogonalityProjector	src/apps/chem/projector.h	/^    	StrongOrthogonalityProjector(World& world) : world(world) {}$/;"	f	class:madness::StrongOrthogonalityProjector
StrongOrthogonalityProjector	src/apps/chem/projector.h	/^    class StrongOrthogonalityProjector {$/;"	c	namespace:madness
Submit	src/madness/world/taskfn.h	/^            Submit(PoolTaskInterface* p) : p(p) {}$/;"	f	struct:madness::TaskInterface::Submit
Submit	src/madness/world/taskfn.h	/^        struct Submit : public CallbackInterface {$/;"	s	class:madness::TaskInterface
Subspace	src/apps/hf/solver.h	/^    Subspace(World& world, const ElectronicStructureParams& params)$/;"	f	class:madness::Subspace
Subspace	src/apps/hf/solver.h	/^  class Subspace$/;"	c	namespace:madness
Subspace	src/apps/moldft/subspace.h	/^    Subspace(bool spinpol=false, int maxsub=4)$/;"	f	class:Subspace
Subspace	src/apps/moldft/subspace.h	/^  class Subspace$/;"	c
SubspaceK	src/apps/hf/solver.h	/^    SubspaceK(World& world, const ElectronicStructureParams& params,$/;"	f	class:madness::SubspaceK
SubspaceK	src/apps/hf/solver.h	/^  class SubspaceK$/;"	c	namespace:madness
Sum	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Sum(const value_type *a_afArg, int a_iArgc)$/;"	f	class:mu::Parser
Sum	src/madness/external/muParser/muParserTest.h	/^        static value_type Sum(const value_type* a_afArg, int a_iArgc)$/;"	f	class:mu::Test::ParserTester
SumContributions	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^void SumContributions$/;"	f
SumOver	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::SumOver( mpi::Comm comm )$/;"	f	class:elem::AbstractBlockDistMatrix
SumOver	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::SumOver( mpi::Comm comm )$/;"	f	class:elem::AbstractDistMatrix
SumOverTestCaseList	src/madness/external/gtest/src/gtest.cc	/^static int SumOverTestCaseList(const std::vector<TestCase*>& case_list,$/;"	f	namespace:testing::internal
SumScatterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::SumScatterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
SumScatterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::SumScatterFrom( const DistMatrix<T,UGath,VGath>& A )$/;"	f	class:elem::GeneralDistMatrix
SumScatterUpdate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::SumScatterUpdate$/;"	f	class:elem::GeneralBlockDistMatrix
SumScatterUpdate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::SumScatterUpdate$/;"	f	class:elem::GeneralDistMatrix
Summary of the MADNESS application programming interface	doc/Latex/api.tex	/^\\section*{Summary of the MADNESS application programming interface}$/;"	s
SuppressEventForwarding	src/madness/external/gtest/src/gtest.cc	/^void TestEventListeners::SuppressEventForwarding() {$/;"	f	class:testing::TestEventListeners
SuppressTestEventsIfInSubprocess	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::SuppressTestEventsIfInSubprocess() {$/;"	f	class:testing::internal::UnitTestImpl
SurfaceIntegral	src/apps/interior_bc/test_problems.h	/^        double SurfaceIntegral() const {$/;"	f	class:ConstantSphere
SurfaceIntegral	src/apps/interior_bc/test_problems.h	/^        double SurfaceIntegral() const {$/;"	f	class:CosineSphere
SurfaceIntegral	src/apps/interior_bc/test_problems.h	/^        double SurfaceIntegral() const {$/;"	f	class:InhomoConstantSphere
SurfaceIntegral	src/apps/interior_bc/test_problems.h	/^        double SurfaceIntegral() const {$/;"	f	class:Y20Sphere
SurfaceMoleculeInteraction	src/examples/colloid.cc	/^    SurfaceMoleculeInteraction(const double& d, const double& R,const$/;"	f	class:SurfaceMoleculeInteraction
SurfaceMoleculeInteraction	src/examples/colloid.cc	/^class SurfaceMoleculeInteraction {$/;"	c	file:
Svec	src/apps/chem/distpm.cc	/^    const std::vector<tensorT>& Svec;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
Svec	src/apps/polar/distpm.cc	/^    const std::vector<tensorT>& Svec;$/;"	m	class:SystolicPMOrbitalLocalize	file:
Swap	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^inline void Swap$/;"	f	namespace:elem
Swap	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^inline void Swap( Orientation orientation, Matrix<F>& X, Matrix<F>& Y )$/;"	f	namespace:elem
Swap	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^inline void Swap( int n, T* x, int incx, T* y, int incy )$/;"	f	namespace:elem::blas
Swap	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Swap( int n, dcomplex* x, int incx, dcomplex* y, int incy )$/;"	f	namespace:elem::blas
Swap	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Swap( int n, double* x, int incx, double* y, int incy )$/;"	f	namespace:elem::blas
Swap	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Swap( int n, float* x, int incx, float* y, int incy )$/;"	f	namespace:elem::blas
Swap	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Swap( int n, scomplex* x, int incx, scomplex* y, int incy )$/;"	f	namespace:elem::blas
SwapClear	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^SwapClear( T& x )$/;"	f	namespace:elem
Sylvester	src/madness/external/elemental/include/elemental/control/Sylvester.hpp	/^Sylvester$/;"	f	namespace:elem
Symm	src/madness/external/elemental/include/elemental/blas-like/level3/Symm.hpp	/^Symm$/;"	f	namespace:elem
Symm	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Symm$/;"	f	namespace:elem::blas
SymmLL	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LL.hpp	/^SymmLL$/;"	f	namespace:elem::internal
SymmLLA	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LL.hpp	/^SymmLLA$/;"	f	namespace:elem::internal
SymmLLC	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LL.hpp	/^SymmLLC$/;"	f	namespace:elem::internal
SymmLU	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LU.hpp	/^SymmLU$/;"	f	namespace:elem::internal
SymmLUA	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LU.hpp	/^SymmLUA$/;"	f	namespace:elem::internal
SymmLUC	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LU.hpp	/^SymmLUC$/;"	f	namespace:elem::internal
SymmRL	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RL.hpp	/^SymmRL$/;"	f	namespace:elem::internal
SymmRLA	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RL.hpp	/^SymmRLA$/;"	f	namespace:elem::internal
SymmRLC	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RL.hpp	/^SymmRLC$/;"	f	namespace:elem::internal
SymmRU	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RU.hpp	/^SymmRU$/;"	f	namespace:elem::internal
SymmRUA	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RU.hpp	/^SymmRUA$/;"	f	namespace:elem::internal
SymmRUC	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RU.hpp	/^SymmRUC$/;"	f	namespace:elem::internal
Symmetric2x2Inv	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Inv.hpp	/^Symmetric2x2Inv( UpperOrLower uplo, Matrix<F>& D, bool conjugate=false )$/;"	f	namespace:elem
Symmetric2x2Scale	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Scale.hpp	/^Symmetric2x2Scale$/;"	f	namespace:elem
Symmetric2x2Solve	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Solve.hpp	/^Symmetric2x2Solve$/;"	f	namespace:elem
SymmetricEntrywiseNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Entrywise.hpp	/^SymmetricEntrywiseNorm$/;"	f	namespace:elem
SymmetricEntrywiseOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/EntrywiseOne.hpp	/^SymmetricEntrywiseOneNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
SymmetricEntrywiseOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/EntrywiseOne.hpp	/^SymmetricEntrywiseOneNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SymmetricFrobeniusNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Frobenius.hpp	/^SymmetricFrobeniusNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
SymmetricFrobeniusNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Frobenius.hpp	/^SymmetricFrobeniusNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SymmetricInfinityNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Infinity.hpp	/^SymmetricInfinityNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
SymmetricInfinityNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Infinity.hpp	/^SymmetricInfinityNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SymmetricInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Symmetric.hpp	/^SymmetricInverse$/;"	f	namespace:elem
SymmetricKyFanNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/KyFan.hpp	/^SymmetricKyFanNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A, Int k )$/;"	f	namespace:elem
SymmetricKyFanNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/KyFan.hpp	/^SymmetricKyFanNorm( UpperOrLower uplo, const Matrix<F>& A, Int k )$/;"	f	namespace:elem
SymmetricMax	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	/^SymmetricMax( UpperOrLower uplo, const DistMatrix<Real,U,V>& A )$/;"	f	namespace:elem
SymmetricMax	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	/^SymmetricMax( UpperOrLower uplo, const Matrix<Real>& A )$/;"	f	namespace:elem
SymmetricMaxAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	/^SymmetricMaxAbs( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
SymmetricMaxAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	/^SymmetricMaxAbs( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SymmetricMaxNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Max.hpp	/^SymmetricMaxNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
SymmetricMaxNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Max.hpp	/^SymmetricMaxNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SymmetricMin	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	/^SymmetricMin( UpperOrLower uplo, const DistMatrix<Real,U,V>& A )$/;"	f	namespace:elem
SymmetricMin	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	/^SymmetricMin( UpperOrLower uplo, const Matrix<Real>& A )$/;"	f	namespace:elem
SymmetricMinAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	/^SymmetricMinAbs( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
SymmetricMinAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	/^SymmetricMinAbs( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SymmetricNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm.hpp	/^SymmetricNorm$/;"	f	namespace:elem
SymmetricNuclearNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Nuclear.hpp	/^SymmetricNuclearNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
SymmetricNuclearNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Nuclear.hpp	/^SymmetricNuclearNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SymmetricOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/One.hpp	/^SymmetricOneNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
SymmetricOneNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/One.hpp	/^SymmetricOneNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SymmetricSchattenNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Schatten.hpp	/^SymmetricSchattenNorm$/;"	f	namespace:elem
SymmetricSolve	src/madness/external/elemental/include/elemental/lapack-like/solve/SymmetricSolve.hpp	/^SymmetricSolve$/;"	f	namespace:elem
SymmetricSwap	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^inline void SymmetricSwap$/;"	f	namespace:elem
SymmetricTridiagEig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^int SymmetricTridiagEig$/;"	f	namespace:elem::lapack
SymmetricTridiagEig	src/madness/external/elemental/src/core/imports/lapack.cpp	/^void SymmetricTridiagEig$/;"	f	namespace:elem::lapack
SymmetricTridiagEigWrapper	src/madness/external/elemental/src/core/imports/lapack.cpp	/^int SymmetricTridiagEigWrapper$/;"	f	namespace:elem::lapack
SymmetricTwoNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Two.hpp	/^SymmetricTwoNorm( UpperOrLower uplo, const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
SymmetricTwoNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Two.hpp	/^SymmetricTwoNorm( UpperOrLower uplo, const Matrix<F>& A )$/;"	f	namespace:elem
SymmetricTwoNormEstimate	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/TwoEstimate.hpp	/^SymmetricTwoNormEstimate$/;"	f	namespace:elem
Symmetry	doc/Latex/implementation.tex	/^\\subsubsection{Symmetry}$/;"	b
Symv	src/madness/external/elemental/include/elemental/blas-like/level2/Symv.hpp	/^Symv$/;"	f	namespace:elem
Symv	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Symv$/;"	f	namespace:elem::blas
Syr	src/madness/external/elemental/include/elemental/blas-like/level2/Syr.hpp	/^Syr$/;"	f	namespace:elem
Syr	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Syr$/;"	f	namespace:elem::blas
Syr2	src/madness/external/elemental/include/elemental/blas-like/level2/Syr2.hpp	/^Syr2$/;"	f	namespace:elem
Syr2	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Syr2$/;"	f	namespace:elem::blas
Syr2k	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k.hpp	/^Syr2k$/;"	f	namespace:elem
Syr2k	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Syr2k$/;"	f	namespace:elem::blas
Syr2kLN	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/LN.hpp	/^Syr2kLN$/;"	f	namespace:elem::internal
Syr2kLT	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/LT.hpp	/^Syr2kLT$/;"	f	namespace:elem::internal
Syr2kUN	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/UN.hpp	/^Syr2kUN$/;"	f	namespace:elem::internal
Syr2kUT	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/UT.hpp	/^Syr2kUT$/;"	f	namespace:elem::internal
Syrk	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk.hpp	/^Syrk$/;"	f	namespace:elem
Syrk	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Syrk$/;"	f	namespace:elem::blas
SyrkLN	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/LN.hpp	/^SyrkLN$/;"	f	namespace:elem::internal
SyrkLT	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/LT.hpp	/^SyrkLT$/;"	f	namespace:elem::internal
SyrkUN	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/UN.hpp	/^SyrkUN$/;"	f	namespace:elem::internal
SyrkUT	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/UT.hpp	/^SyrkUT$/;"	f	namespace:elem::internal
SystolicEigensolver	src/apps/ii/eigen_solver.cc	/^SystolicEigensolver<T>::SystolicEigensolver(DistributedMatrix<T>& AV, int tag):$/;"	f	class:SystolicEigensolver
SystolicEigensolver	src/apps/ii/eigen_solver.cc	/^class SystolicEigensolver : public SystolicMatrixAlgorithm<T> {$/;"	c	file:
SystolicEigensolver	src/apps/ii/testsystolic.cc	/^SystolicEigensolver<T>::SystolicEigensolver(DistributedMatrix<T>& AV, int tag):$/;"	f	class:SystolicEigensolver
SystolicEigensolver	src/apps/ii/testsystolic.cc	/^class SystolicEigensolver : public SystolicMatrixAlgorithm<T> {$/;"	c	file:
SystolicFixOrbitalOrders	src/apps/chem/distpm.cc	/^    SystolicFixOrbitalOrders(DistributedMatrix<double>& U, int tag=5556)$/;"	f	class:madness::SystolicFixOrbitalOrders
SystolicFixOrbitalOrders	src/apps/chem/distpm.cc	/^class SystolicFixOrbitalOrders : public SystolicMatrixAlgorithm<double> {$/;"	c	namespace:madness	file:
SystolicFixOrbitalOrders	src/apps/polar/distpm.cc	/^    SystolicFixOrbitalOrders(DistributedMatrix<double>& U, int tag=5556) $/;"	f	class:SystolicFixOrbitalOrders
SystolicFixOrbitalOrders	src/apps/polar/distpm.cc	/^class SystolicFixOrbitalOrders : public SystolicMatrixAlgorithm<double> {$/;"	c	file:
SystolicMatrixAlgorithm	src/apps/ii/systolic.h	/^        SystolicMatrixAlgorithm(DistributedMatrix<T>& A, int tag, int nthread=ThreadPool::size()+1)$/;"	f	class:madness::SystolicMatrixAlgorithm
SystolicMatrixAlgorithm	src/apps/ii/systolic.h	/^    class SystolicMatrixAlgorithm : public TaskInterface {$/;"	c	namespace:madness
SystolicMatrixAlgorithm	src/madness/tensor/systolic.h	/^        SystolicMatrixAlgorithm(DistributedMatrix<T>& A, int tag, int nthread=ThreadPool::size()+1)$/;"	f	class:madness::SystolicMatrixAlgorithm
SystolicMatrixAlgorithm	src/madness/tensor/systolic.h	/^    class SystolicMatrixAlgorithm : public TaskInterface {$/;"	c	namespace:madness
SystolicPMOrbitalLocalize	src/apps/chem/distpm.cc	/^    SystolicPMOrbitalLocalize(DistributedMatrix<double>& A,$/;"	f	class:madness::SystolicPMOrbitalLocalize
SystolicPMOrbitalLocalize	src/apps/chem/distpm.cc	/^class SystolicPMOrbitalLocalize : public SystolicMatrixAlgorithm<double> {$/;"	c	namespace:madness	file:
SystolicPMOrbitalLocalize	src/apps/polar/distpm.cc	/^    SystolicPMOrbitalLocalize(DistributedMatrix<double>& A, $/;"	f	class:SystolicPMOrbitalLocalize
SystolicPMOrbitalLocalize	src/apps/polar/distpm.cc	/^class SystolicPMOrbitalLocalize : public SystolicMatrixAlgorithm<double> {$/;"	c	file:
T	src/apps/chem/PNO.h	/^	Kinetic<double, 3> T;$/;"	m	class:madness::PNO
T	src/apps/chem/SCFOperators.h	/^    Kinetic<double,3> T;$/;"	m	class:madness::Fock
T	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void Print(const T (&a)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalPrinter
T	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void Print(const T (&value)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalTersePrinter
T	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {$/;"	m	namespace:testing::internal
T	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^inline void CopyArray(const T(&from)[N], U(*to)[N]) {$/;"	m	namespace:testing::internal
T	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^internal::ParamGenerator<T> ValuesIn(const T (&array)[N]);$/;"	m	namespace:testing
T	src/madness/mra/convolution1d.h	/^        Tensor<Q> R, T;                 \/\/\/< if NS: R=ns, T=T part of ns; if modified NS: T=\\uparrow r^(n-1)$/;"	m	struct:madness::ConvolutionData1D
TAG_CP	src/apps/pno/pno.cpp	/^const std::string TAG_CP = "computeprotocol";$/;"	v
TAG_F12	src/apps/pno/pno.cpp	/^const std::string TAG_F12 = "f12";$/;"	v
TAG_PNO	src/apps/pno/pno.cpp	/^const std::string TAG_PNO = "pno";$/;"	v
TARGET_CHUNKS	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	23;"	d	file:
TBB	src/apps/moldft/parsemad.py	/^        TBB = (filename[0] == "T")$/;"	v
TBB	src/apps/moldft/parsemad.py	/^    TBB = (filename[0] == "T")$/;"	v
TDHF	src/apps/adrian/TDDFT.cc	/^TDHF::TDHF(World &world, const char *filename)$/;"	f	class:TDHF
TDHF	src/apps/adrian/TDDFT.cc	/^TDHF::TDHF(World &world, std::shared_ptr<std::istream> input) {$/;"	f	class:TDHF
TDHF	src/apps/adrian/TDDFT.h	/^class TDHF {$/;"	c
TDHF	src/apps/adrian/TDHF.cc	/^TDHF::TDHF(World & world,$/;"	f	class:TDHF
TDHF	src/apps/adrian/TDHF.h	/^class TDHF $/;"	c
TDHF	src/apps/adrian/TDHF2.cc	/^TDHF::TDHF(World & world,$/;"	f	class:TDHF
TDHF	src/apps/adrian/TDHF2.h	/^class TDHF $/;"	c
TDHF	src/apps/bryan/TDHF.cc	/^TDHF::TDHF(World & world,$/;"	f	class:TDHF
TDHF	src/apps/bryan/TDHF.h	/^class TDHF $/;"	c
TDHF	src/apps/bryan/TDHF2.cc	/^TDHF::TDHF(World & world,$/;"	f	class:TDHF
TDHF	src/apps/bryan/TDHF2.h	/^class TDHF $/;"	c
TDHF	src/apps/chem/TDHF.cc	/^TDHF::TDHF(World &world, const Nemo & nemo_, const Parameters& param)$/;"	f	class:madness::TDHF
TDHF	src/apps/chem/TDHF.cc	/^TDHF::TDHF(World &world, const Nemo & nemo_, const std::string& input)$/;"	f	class:madness::TDHF
TDHF	src/apps/chem/TDHF.h	/^class TDHF{$/;"	c	namespace:madness
TDHF_allocator	src/apps/adrian/TDDFT.cc	/^  TDHF_allocator(World &world, const int num_vir, const int num_occ)$/;"	f	struct:TDHF_allocator
TDHF_allocator	src/apps/adrian/TDDFT.cc	/^struct TDHF_allocator {$/;"	s	file:
TDHF_allocator	src/apps/adrian/TDHF.cc	/^   TDHF_allocator(World& world, const int num_vir, const int num_occ) : world(world), num_vir(num_vir), num_occ(num_occ) {}$/;"	f	struct:TDHF_allocator
TDHF_allocator	src/apps/adrian/TDHF.cc	/^struct TDHF_allocator$/;"	s	file:
TDHF_allocator	src/apps/adrian/TDHF2.cc	/^   TDHF_allocator(World& world, const int num_vir, const int num_occ) : world(world), num_vir(num_vir), num_occ(num_occ) {}$/;"	f	struct:TDHF_allocator
TDHF_allocator	src/apps/adrian/TDHF2.cc	/^struct TDHF_allocator$/;"	s	file:
TDHF_allocator	src/apps/bryan/TDHF.cc	/^   TDHF_allocator(World& world, const int num_vir, const int num_occ) : world(world), num_vir(num_vir), num_occ(num_occ) {}$/;"	f	struct:TDHF_allocator
TDHF_allocator	src/apps/bryan/TDHF.cc	/^struct TDHF_allocator$/;"	s	file:
TDHF_allocator	src/apps/bryan/TDHF2.cc	/^   TDHF_allocator(World& world, const int num_vir, const int num_occ) : world(world), num_vir(num_vir), num_occ(num_occ) {}$/;"	f	struct:TDHF_allocator
TDHF_allocator	src/apps/bryan/TDHF2.cc	/^struct TDHF_allocator$/;"	s	file:
TDHF_allocator	src/apps/chem/TDHF.cc	/^	TDHF_allocator(World& world, const int nnoct) : world(world), noct(nnoct) {}$/;"	f	struct:madness::TDHF_allocator
TDHF_allocator	src/apps/chem/TDHF.cc	/^struct TDHF_allocator{$/;"	s	namespace:madness	file:
TENSORTRAIN_H_	src/madness/tensor/tensortrain.h	35;"	d
TENSOR_ALIGNMENT	src/madness/tensor/tensor.h	354;"	d
TENSOR_ASSERT	src/madness/tensor/tensorexcept.h	130;"	d
TENSOR_CC	src/madness/tensor/tensor.cc	36;"	d	file:
TENSOR_EXCEPTION	src/madness/tensor/tensorexcept.h	126;"	d
TENSOR_EXCEPTION_AT	src/madness/tensor/tensorexcept.h	124;"	d
TENSOR_MAXDIM	src/madness/tensor/tensor_macros.h	194;"	d
TENSOR_MAX_TYPE_ID	src/madness/tensor/type_data.h	113;"	d
TENSOR_MAX_TYPE_ID	src/madness/tensor/type_data.h	115;"	d
TENSOR_RESULT_TYPE	src/madness/tensor/type_data.h	205;"	d
TENSOR_SHARED_PTR	src/madness/tensor/tensor.h	2516;"	d
TENSOR_SHARED_PTR	src/madness/tensor/tensor.h	288;"	d
TENSOR_STRINGIZE	src/madness/tensor/tensorexcept.h	123;"	d
TERNARYITERATOR	src/madness/tensor/tensor_macros.h	647;"	d
TERNARYITERATOR1	src/madness/tensor/tensor_macros.h	491;"	d
TERNARYITERATOR2	src/madness/tensor/tensor_macros.h	505;"	d
TERNARYITERATOR3	src/madness/tensor/tensor_macros.h	523;"	d
TERNARYITERATOR4	src/madness/tensor/tensor_macros.h	545;"	d
TERNARYITERATOR5	src/madness/tensor/tensor_macros.h	575;"	d
TERNARYITERATOR6	src/madness/tensor/tensor_macros.h	609;"	d
TERNARY_OPTIMIZED_ITERATOR	src/madness/tensor/tensor_macros.h	719;"	d
TEST	src/madness/external/gtest/include/gtest/gtest.h	2242;"	d
TEST	src/madness/world/test_ar.cc	624;"	d	file:
TEST	src/madness/world/test_ar.cc	674;"	d	file:
TEST	src/madness/world/test_vector.cc	/^    TEST(VectorTest, Hash) {$/;"	f	namespace:__anon5
TEST	src/madness/world/test_vector.cc	/^    TEST(VectorTest, InitializerWorks) {$/;"	f	namespace:__anon5
TEST	src/madness/world/test_vector.cc	/^    TEST(VectorTest, SizeWorks) {$/;"	f	namespace:__anon5
TEST_CORRELATION_FACTOR	src/apps/chem/test_correlation_factor.h	8;"	d
TEST_DID_NOT_DIE	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^    TEST_DID_NOT_DIE$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_ENCOUNTERED_RETURN_STATEMENT	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^    TEST_ENCOUNTERED_RETURN_STATEMENT,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_F	src/madness/external/gtest/include/gtest/gtest.h	2271;"	d
TEST_F	src/madness/world/test_googletest.cc	/^    TEST_F(WorldTest, Else) {$/;"	f	namespace:__anon4
TEST_F	src/madness/world/test_googletest.cc	/^    TEST_F(WorldTest, Something) {$/;"	f	namespace:__anon4
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, Assignment) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, BooleanOperations) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, ConversionAssignment) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, CopyConstructor) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, CopyConversionConstructor) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, DefaultConstructor) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, LocalOwnership) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, PointerAccess) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, PrimaryConstructor) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, RemoteNullPtr) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, RemotePtr) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, Serialize) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, Swap) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldptr.cc	/^    TEST_F(WorldPtrTest, WorldAccess) {$/;"	f	namespace:__anon6
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, Boolean) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, CopyAssignment) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, CopyConstructor) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, CopyConversionAssignment) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, CopyConversionConstructor) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, Counter) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, DefaultConstructor) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, Ownership) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, Pointer) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, PointerConstructor) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, RemoteRef) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, Reset) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, Serialize) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, Swap) {$/;"	f	namespace:__anon1
TEST_F	src/madness/world/test_worldref.cc	/^    TEST_F(WorldRefTest, World) {$/;"	f	namespace:__anon1
TEST_P	src/madness/external/gtest/include/gtest/gtest-param-test.h	1380;"	d
TEST_P	src/madness/mra/test_mra6.cc	/^    TEST_P(BinaryGenTest, Addition) {$/;"	f	namespace:__anon12
TEST_P	src/madness/mra/test_mra6.cc	/^    TEST_P(BinaryGenTest, InnerOuter) {$/;"	f	namespace:__anon12
TEST_P	src/madness/mra/test_mra6.cc	/^    TEST_P(BinaryGenTest, RankReduction) {$/;"	f	namespace:__anon12
TEST_P	src/madness/mra/test_mra6.cc	/^    TEST_P(BinaryGenTest, ScalarMultiplication) {$/;"	f	namespace:__anon12
TEST_P	src/madness/mra/test_mra6.cc	/^    TEST_P(BinaryGenTest, SliceAddition) {$/;"	f	namespace:__anon12
TEST_P	src/madness/mra/test_mra6.cc	/^    TEST_P(UnaryGenTest, Norms_etc) {$/;"	f	namespace:__anon12
TEST_P	src/madness/mra/test_mra6.cc	/^    TEST_P(UnaryGenTest, Transform) {$/;"	f	namespace:__anon12
TEST_P	src/madness/tensor/test_gentensor.cc	/^    TEST_P(BinaryGenTest, Addition) {$/;"	f	namespace:__anon43
TEST_P	src/madness/tensor/test_gentensor.cc	/^    TEST_P(BinaryGenTest, InnerOuter) {$/;"	f	namespace:__anon43
TEST_P	src/madness/tensor/test_gentensor.cc	/^    TEST_P(BinaryGenTest, RankReduction) {$/;"	f	namespace:__anon43
TEST_P	src/madness/tensor/test_gentensor.cc	/^    TEST_P(BinaryGenTest, ScalarMultiplication) {$/;"	f	namespace:__anon43
TEST_P	src/madness/tensor/test_gentensor.cc	/^    TEST_P(BinaryGenTest, SliceAddition) {$/;"	f	namespace:__anon43
TEST_P	src/madness/tensor/test_gentensor.cc	/^    TEST_P(UnaryGenTest, Norms_etc) {$/;"	f	namespace:__anon43
TEST_P	src/madness/tensor/test_gentensor.cc	/^    TEST_P(UnaryGenTest, Transform) {$/;"	f	namespace:__anon43
TEST_THREW_EXCEPTION	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^    TEST_THREW_EXCEPTION,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEXT	src/madness/external/tinyxml/tinyxml.h	/^		TEXT,$/;"	e	enum:TiXmlNode::NodeType
THREAD_FUNNELED	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int THREAD_FUNNELED = 1;$/;"	m	namespace:elem::mpi
THREAD_FUNNELED	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int THREAD_FUNNELED = MPI_THREAD_FUNNELED;$/;"	m	namespace:elem::mpi
THREAD_MULTIPLE	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int THREAD_MULTIPLE = 3;$/;"	m	namespace:elem::mpi
THREAD_MULTIPLE	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int THREAD_MULTIPLE = MPI_THREAD_MULTIPLE;$/;"	m	namespace:elem::mpi
THREAD_SERIALIZED	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int THREAD_SERIALIZED = 2;$/;"	m	namespace:elem::mpi
THREAD_SERIALIZED	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int THREAD_SERIALIZED = MPI_THREAD_SERIALIZED;$/;"	m	namespace:elem::mpi
THREAD_SINGLE	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int THREAD_SINGLE = 0;$/;"	m	namespace:elem::mpi
THREAD_SINGLE	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int THREAD_SINGLE = MPI_THREAD_SINGLE;$/;"	m	namespace:elem::mpi
THREE	src/madness/external/elemental/external/pmrrr/src/process_c_task.c	59;"	d	file:
THRESH_GRHO	src/apps/hf/lda.h	/^const double THRESH_GRHO = 1e-20;$/;"	v
THRESH_RHO	src/apps/hf/lda.h	/^const double THRESH_RHO = 1e-8;$/;"	v
THREW	src/madness/external/gtest/src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
TIME	src/examples/dielectric.cc	195;"	d	file:
TIME	src/examples/gygi_soltion.cc	72;"	d	file:
TIME	src/examples/molecularsurface.cc	14;"	d	file:
TIME	src/examples/svpe.cc	58;"	d	file:
TIMER	src/apps/chem/PNO.h	13;"	d
TIXML_DEFAULT_ENCODING	src/madness/external/tinyxml/tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	v
TIXML_ENCODING_LEGACY	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_ENCODING_LEGACY$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UNKNOWN	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN,$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UTF8	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UTF8,$/;"	e	enum:TiXmlEncoding
TIXML_ERROR	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_DOCUMENT_EMPTY	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_DOCUMENT_TOP_ONLY	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_EMBEDDED_NULL	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_OPENING_FILE	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_OUT_OF_MEMORY	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_OUT_OF_MEMORY,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_PARSING_CDATA	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_PARSING_COMMENT	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_PARSING_DECLARATION	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_PARSING_ELEMENT	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_PARSING_EMPTY	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_PARSING_UNKNOWN	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_READING_ATTRIBUTES	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_READING_ELEMENT_VALUE	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_READING_END_TAG	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon41
TIXML_ERROR_STRING_COUNT	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon41
TIXML_EXPLICIT	src/madness/external/tinyxml/tinystr.h	51;"	d
TIXML_EXPLICIT	src/madness/external/tinyxml/tinystr.h	54;"	d
TIXML_EXPLICIT	src/madness/external/tinyxml/tinystr.h	56;"	d
TIXML_LOG	src/madness/external/tinyxml/tinyxmlparser.cc	34;"	d	file:
TIXML_LOG	src/madness/external/tinyxml/tinyxmlparser.cc	36;"	d	file:
TIXML_MAJOR_VERSION	src/madness/external/tinyxml/tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	v
TIXML_MINOR_VERSION	src/madness/external/tinyxml/tinyxml.h	/^const int TIXML_MINOR_VERSION = 5;$/;"	v
TIXML_NO_ATTRIBUTE	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_NO_ATTRIBUTE,$/;"	e	enum:__anon40
TIXML_NO_ERROR	src/madness/external/tinyxml/tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon41
TIXML_PATCH_VERSION	src/madness/external/tinyxml/tinyxml.h	/^const int TIXML_PATCH_VERSION = 3;$/;"	v
TIXML_SAFE	src/madness/external/tinyxml/tinyxml.h	61;"	d
TIXML_SNPRINTF	src/madness/external/tinyxml/tinyxml.h	66;"	d
TIXML_SNPRINTF	src/madness/external/tinyxml/tinyxml.h	72;"	d
TIXML_SNPRINTF	src/madness/external/tinyxml/tinyxml.h	78;"	d
TIXML_SNSCANF	src/madness/external/tinyxml/tinyxml.h	67;"	d
TIXML_SNSCANF	src/madness/external/tinyxml/tinyxml.h	73;"	d
TIXML_SNSCANF	src/madness/external/tinyxml/tinyxml.h	79;"	d
TIXML_SSCANF	src/madness/external/tinyxml/tinyxml.h	68;"	d
TIXML_SSCANF	src/madness/external/tinyxml/tinyxml.h	74;"	d
TIXML_SSCANF	src/madness/external/tinyxml/tinyxml.h	80;"	d
TIXML_SSCANF	src/madness/external/tinyxml/tinyxml.h	82;"	d
TIXML_STRING	src/madness/external/tinyxml/tinyxml.h	51;"	d
TIXML_STRING	src/madness/external/tinyxml/tinyxml.h	54;"	d
TIXML_SUCCESS	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_SUCCESS,$/;"	e	enum:__anon40
TIXML_USE_STL	src/madness/external/tinyxml/tinyxml.h	46;"	d
TIXML_UTF_LEAD_0	src/madness/external/tinyxml/tinyxmlparser.cc	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v
TIXML_UTF_LEAD_1	src/madness/external/tinyxml/tinyxmlparser.cc	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v
TIXML_UTF_LEAD_2	src/madness/external/tinyxml/tinyxmlparser.cc	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v
TIXML_WRONG_TYPE	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_WRONG_TYPE$/;"	e	enum:__anon40
TO_STRING	src/apps/exciting/wannier.cc	1047;"	d	file:
TO_STRING	src/apps/hf/test_be.cc	202;"	d	file:
TO_STRING	src/apps/hf/test_he.cc	438;"	d	file:
TO_STRING	src/apps/hf/test_hf.cc	384;"	d	file:
TO_STRING	src/apps/hf/test_hydro.cc	185;"	d	file:
TO_STRING	src/apps/hf/test_xc.cc	518;"	d	file:
TO_STRING	src/madness/mra/testsuite.cc	1285;"	d	file:
TO_STRING2	src/apps/exciting/wannier.cc	1048;"	d	file:
TO_STRING2	src/apps/hf/test_be.cc	203;"	d	file:
TO_STRING2	src/apps/hf/test_he.cc	439;"	d	file:
TO_STRING2	src/apps/hf/test_hf.cc	385;"	d	file:
TO_STRING2	src/apps/hf/test_hydro.cc	186;"	d	file:
TO_STRING2	src/apps/hf/test_xc.cc	519;"	d	file:
TO_STRING2	src/madness/mra/testsuite.cc	1286;"	d	file:
TRANSPOSE	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    TRANSPOSE,$/;"	e	enum:elem::OrientationNS::Orientation
TRIANGULAR_LOWER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    TRIANGULAR_LOWER,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
TRIANGULAR_LOWER_UNIT	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    TRIANGULAR_LOWER_UNIT,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
TRIANGULAR_UPPER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    TRIANGULAR_UPPER,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
TRIANGULAR_UPPER_UNIT	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    TRIANGULAR_UPPER_UNIT,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
TRIDIAG_LOWER_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    TRIDIAG_LOWER_PACKED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
TRIDIAG_UPPER_PACKED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    TRIDIAG_UPPER_PACKED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
TRUE_	src/madness/external/elemental/external/pmrrr/src/lapack/odr1v.c	10;"	d	file:
TRUE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	12;"	d	file:
TRUE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrre.c	13;"	d	file:
TRUE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrrf.c	11;"	d	file:
TRUE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrrr.c	10;"	d	file:
TRUE_	src/madness/external/elemental/external/pmrrr/src/lapack/odrrv.c	12;"	d	file:
TRUE_	src/madness/external/elemental/external/pmrrr/src/lapack/odstmr.c	13;"	d	file:
TRY_RQC	src/madness/external/elemental/external/pmrrr/include/pmrrr.h	205;"	d
TS	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^TS( const DistMatrix<F,U,STAR>& A )$/;"	f	namespace:elem::qr
TSQR	src/madness/external/elemental/include/elemental/convex/SVT/TSQR.hpp	/^TSQR( DistMatrix<F,U,STAR>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem::svt
TTASKS_H	src/madness/external/elemental/external/pmrrr/include/tasks.h	42;"	d
TTT	src/madness/world/test_world.cc	/^    TTT() : state(0) {};$/;"	f	class:TTT
TTT	src/madness/world/test_world.cc	/^class TTT {$/;"	c	file:
TT_2D	src/madness/tensor/tensor.h	/^	enum TensorType {TT_NONE, TT_FULL, TT_2D, TT_TENSORTRAIN};$/;"	e	enum:madness::TensorType
TT_FULL	src/madness/tensor/tensor.h	/^	enum TensorType {TT_NONE, TT_FULL, TT_2D, TT_TENSORTRAIN};$/;"	e	enum:madness::TensorType
TT_NONE	src/madness/tensor/tensor.h	/^	enum TensorType {TT_NONE, TT_FULL, TT_2D, TT_TENSORTRAIN};$/;"	e	enum:madness::TensorType
TT_TENSORTRAIN	src/madness/tensor/tensor.h	/^	enum TensorType {TT_NONE, TT_FULL, TT_2D, TT_TENSORTRAIN};$/;"	e	enum:madness::TensorType
TU	src/madness/mra/convolution1d.h	/^        Tensor<Q> RU, RVT, TU, TVT;     \/\/\/< SVD approximations to R and T$/;"	m	struct:madness::ConvolutionData1D
TVT	src/madness/mra/convolution1d.h	/^        Tensor<Q> RU, RVT, TU, TVT;     \/\/\/< SVD approximations to R and T$/;"	m	struct:madness::ConvolutionData1D
TWO_NORM	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    TWO_NORM            \/\/ Infinity-norm of the singular values$/;"	e	enum:elem::NormTypeNS::NormType
TYPECOUNT	src/madness/external/tinyxml/tinyxml.h	/^		TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TYPED_TEST	src/madness/external/gtest/include/gtest/gtest-typed-test.h	169;"	d
TYPED_TEST	src/madness/mra/test_mra6.cc	/^    TYPED_TEST(GenTensorTest, Construction) {$/;"	f	namespace:__anon12
TYPED_TEST	src/madness/mra/test_mra6.cc	/^    TYPED_TEST(GenTensorTest, SlicingConstruction) {$/;"	f	namespace:__anon12
TYPED_TEST	src/madness/tensor/test_gentensor.cc	/^    TYPED_TEST(LowRankTensorTest, Construction) {$/;"	f	namespace:__anon43
TYPED_TEST	src/madness/tensor/test_gentensor.cc	/^    TYPED_TEST(LowRankTensorTest, SlicingConstruction) {$/;"	f	namespace:__anon43
TYPED_TEST	src/madness/tensor/test_tensor.cc	/^    TYPED_TEST(TensorTest, Basic) {$/;"	f	namespace:__anon44
TYPED_TEST	src/madness/tensor/test_tensor.cc	/^    TYPED_TEST(TensorTest, Reshaping) {$/;"	f	namespace:__anon44
TYPED_TEST	src/madness/tensor/test_tensor.cc	/^    TYPED_TEST(TensorTest, SliceAndDice) {$/;"	f	namespace:__anon44
TYPED_TEST	src/madness/tensor/test_tensor.cc	/^    TYPED_TEST(TensorTest, Slicing1d) {$/;"	f	namespace:__anon44
TYPED_TEST	src/madness/tensor/test_tensor.cc	/^    TYPED_TEST(TensorTest, Transpose) {$/;"	f	namespace:__anon44
TYPED_TEST	src/madness/world/test_stack.cc	/^    TYPED_TEST(StackTest, CopyAssign) {$/;"	f	namespace:__anon3
TYPED_TEST	src/madness/world/test_stack.cc	/^    TYPED_TEST(StackTest, CopyCtor) {$/;"	f	namespace:__anon3
TYPED_TEST	src/madness/world/test_stack.cc	/^    TYPED_TEST(StackTest, DefaultConstructor) {$/;"	f	namespace:__anon3
TYPED_TEST	src/madness/world/test_stack.cc	/^    TYPED_TEST(StackTest, MoveAssign) {$/;"	f	namespace:__anon3
TYPED_TEST	src/madness/world/test_stack.cc	/^    TYPED_TEST(StackTest, MoveCtor) {$/;"	f	namespace:__anon3
TYPED_TEST	src/madness/world/test_stack.cc	/^    TYPED_TEST(StackTest, PushPop) {$/;"	f	namespace:__anon3
TYPED_TEST_CASE	src/madness/external/gtest/include/gtest/gtest-typed-test.h	165;"	d
TYPED_TEST_CASE_P	src/madness/external/gtest/include/gtest/gtest-typed-test.h	219;"	d
TYPED_TEST_P	src/madness/external/gtest/include/gtest/gtest-typed-test.h	223;"	d
TYPEINFO	src/madness/tensor/type_data.h	118;"	d
TYPEINFO	src/madness/tensor/type_data.h	88;"	d
TabSize	src/madness/external/tinyxml/tinyxml.h	/^	int TabSize() const	{ return tabsize; }$/;"	f	class:TiXmlDocument
Tag	src/madness/world/worldtypes.h	/^typedef int Tag;       \/\/\/< Used to clearly identify message tag\/type.$/;"	t
TaggedIRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T TaggedIRecv( int from, int tag, Comm comm, Request& request )$/;"	f	namespace:elem::mpi
TaggedIRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedIRecv$/;"	f	namespace:elem::mpi
TaggedISSend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedISSend$/;"	f	namespace:elem::mpi
TaggedISSend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedISSend( T b, int to, int tag, Comm comm, Request& request )$/;"	f	namespace:elem::mpi
TaggedISend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedISend$/;"	f	namespace:elem::mpi
TaggedISend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedISend( T b, int to, int tag, Comm comm, Request& request )$/;"	f	namespace:elem::mpi
TaggedKey	src/madness/world/distributed_id.h	/^        TaggedKey() : key_() { }$/;"	f	class:madness::TaggedKey
TaggedKey	src/madness/world/distributed_id.h	/^        TaggedKey(const Key& key) : key_(key) { }$/;"	f	class:madness::TaggedKey
TaggedKey	src/madness/world/distributed_id.h	/^        TaggedKey(const TaggedKey<Key, Tag>& other) : key_(other.key_) { }$/;"	f	class:madness::TaggedKey
TaggedKey	src/madness/world/distributed_id.h	/^    class TaggedKey {$/;"	c	namespace:madness
TaggedRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T TaggedRecv( int from, int tag, Comm comm )$/;"	f	namespace:elem::mpi
TaggedRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedRecv( Complex<R>* buf, int count, int from, int tag, Comm comm )$/;"	f	namespace:elem::mpi
TaggedRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedRecv( R* buf, int count, int from, int tag, Comm comm )$/;"	f	namespace:elem::mpi
TaggedSend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedSend( T b, int to, int tag, Comm comm )$/;"	f	namespace:elem::mpi
TaggedSend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedSend( const Complex<R>* buf, int count, int to, int tag, Comm comm )$/;"	f	namespace:elem::mpi
TaggedSend	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedSend( const R* buf, int count, int to, int tag, Comm comm )$/;"	f	namespace:elem::mpi
TaggedSendRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^T TaggedSendRecv( T sb, int to, int stag, int from, int rtag, Comm comm )$/;"	f	namespace:elem::mpi
TaggedSendRecv	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void TaggedSendRecv$/;"	f	namespace:elem::mpi
TaggedSort	src/madness/external/elemental/include/elemental/lapack-like/util/Sort.hpp	/^TaggedSort( const DistMatrix<Real,U,V>& x, SortType sort=ASCENDING )$/;"	f	namespace:elem
TaggedSort	src/madness/external/elemental/include/elemental/lapack-like/util/Sort.hpp	/^TaggedSort( const Matrix<Real>& x, SortType sort=ASCENDING )$/;"	f	namespace:elem
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14> Tail;$/;"	t	struct:testing::internal::Templates14
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Templates27
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Templates26
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Templates25
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Templates24
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Templates23
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Templates22
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Templates21
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Templates20
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Templates19
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Templates18
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17> Tail;$/;"	t	struct:testing::internal::Templates17
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15, T16> Tail;$/;"	t	struct:testing::internal::Templates16
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Templates15
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Types15
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> Tail;$/;"	t	struct:testing::internal::Types28
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Types27
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Types26
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Types25
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Types24
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Types23
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Types22
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Types21
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Types20
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Types19
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Types18
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16, T17> Tail;$/;"	t	struct:testing::internal::Types17
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T16> Tail;$/;"	t	struct:testing::internal::Types16
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28> Tail;$/;"	t	struct:testing::internal::Templates28
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Templates41
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Templates40
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Templates39
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Templates38
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Templates37
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Templates36
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Templates35
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Templates34
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Templates33
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Templates32
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31> Tail;$/;"	t	struct:testing::internal::Templates31
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29, T30> Tail;$/;"	t	struct:testing::internal::Templates30
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Templates29
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Types29
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> Tail;$/;"	t	struct:testing::internal::Types42
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Types41
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Types40
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Types39
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Types38
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Types37
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Types36
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Types35
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Types34
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Types33
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Types32
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30, T31> Tail;$/;"	t	struct:testing::internal::Types31
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T30> Tail;$/;"	t	struct:testing::internal::Types30
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42> Tail;$/;"	t	struct:testing::internal::Templates42
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Templates50
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Templates49
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Templates48
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Templates47
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Templates46
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45> Tail;$/;"	t	struct:testing::internal::Templates45
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T43, T44> Tail;$/;"	t	struct:testing::internal::Templates44
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Templates43
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Types43
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Types50
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Types49
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Types48
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Types47
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Types46
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T44, T45> Tail;$/;"	t	struct:testing::internal::Types45
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T44> Tail;$/;"	t	struct:testing::internal::Types44
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates0 Tail;$/;"	t	struct:testing::internal::Templates1
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Templates11
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Templates12
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Templates13
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates1<T2> Tail;$/;"	t	struct:testing::internal::Templates2
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates2<T2, T3> Tail;$/;"	t	struct:testing::internal::Templates3
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Templates4
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Templates5
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Templates6
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Templates7
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Templates8
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Templates9
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Templates10
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types0 Tail;$/;"	t	struct:testing::internal::Types1
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Types11
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Types12
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Types13
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tail;$/;"	t	struct:testing::internal::Types14
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types1<T2> Tail;$/;"	t	struct:testing::internal::Types2
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types2<T2, T3> Tail;$/;"	t	struct:testing::internal::Types3
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Types4
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Types5
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Types6
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Types7
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Types8
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Types9
Tail	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Types10
TallAbsoluteThresholded	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	/^TallAbsoluteThresholded$/;"	f	namespace:elem::svd
TallCross	src/madness/external/elemental/include/elemental/convex/SVT/Cross.hpp	/^TallCross( DistMatrix<F,VC,STAR>& A, Base<F> tau, bool relative=false )$/;"	f	namespace:elem::svt
TallRelativeThresholded	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	/^TallRelativeThresholded$/;"	f	namespace:elem::svd
TallThresholded	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	/^TallThresholded$/;"	f	namespace:elem::svd
Tan	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Tan( const F& alpha )$/;"	f	namespace:elem
Tan	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Tan(value_type v)   { return tan(v);  }$/;"	f	class:mu::Parser
Tanh	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^Tanh( const F& alpha )$/;"	f	namespace:elem
Tanh	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::Tanh(value_type v)  { return tanh(v); }$/;"	f	class:mu::Parser
Task	src/madness/world/test_queue.cc	/^    Task(int gen) : gen(gen), done(false) {}$/;"	f	class:Task
Task	src/madness/world/test_queue.cc	/^class Task : public madness::TaskInterface {$/;"	c	file:
TaskAttributes	src/madness/world/thread.h	/^        TaskAttributes(const TaskAttributes& attr)$/;"	f	class:madness::TaskAttributes
TaskAttributes	src/madness/world/thread.h	/^        explicit TaskAttributes(unsigned long flags = 0)$/;"	f	class:madness::TaskAttributes
TaskAttributes	src/madness/world/thread.h	/^    class TaskAttributes {$/;"	c	namespace:madness
TaskEvent	src/madness/world/thread.h	/^        class TaskEvent {$/;"	c	namespace:madness::profiling
TaskEventList	src/madness/world/thread.h	/^            TaskEventList(const unsigned int nmax) :$/;"	f	class:madness::profiling::TaskEventList
TaskEventList	src/madness/world/thread.h	/^        class TaskEventList : public TaskEventListBase {$/;"	c	namespace:madness::profiling
TaskEventListBase	src/madness/world/thread.h	/^            TaskEventListBase()$/;"	f	class:madness::profiling::TaskEventListBase
TaskEventListBase	src/madness/world/thread.h	/^        class TaskEventListBase {$/;"	c	namespace:madness::profiling
TaskFn	src/madness/world/taskfn.h	/^        TaskFn(const futureT& result, functionT func, a1T&& a1, a2T&& a2,$/;"	f	struct:madness::TaskFn
TaskFn	src/madness/world/taskfn.h	/^        TaskFn(const futureT& result, functionT func, a1T&& a1,$/;"	f	struct:madness::TaskFn
TaskFn	src/madness/world/taskfn.h	/^        TaskFn(const futureT& result, functionT func, const TaskAttributes& attr) :$/;"	f	struct:madness::TaskFn
TaskFn	src/madness/world/taskfn.h	/^        TaskFn(const futureT& result, functionT func, const TaskAttributes& attr,$/;"	f	struct:madness::TaskFn
TaskFn	src/madness/world/taskfn.h	/^        TaskFn(const futureT& result, functionT func, const a1T& a1, const a2T& a2,$/;"	f	struct:madness::TaskFn
TaskFn	src/madness/world/taskfn.h	/^        TaskFn(const futureT& result, functionT func, const a1T& a1,$/;"	f	struct:madness::TaskFn
TaskFn	src/madness/world/taskfn.h	/^    struct TaskFn : public TaskInterface {$/;"	s	namespace:madness
TaskFn_	src/madness/world/taskfn.h	/^                arg8T, arg9T> TaskFn_;$/;"	t	struct:madness::TaskFn
TaskHandlerInfo	src/madness/world/world_task_queue.h	/^            TaskHandlerInfo(const refT& ref, functionT func, const TaskAttributes& attr)$/;"	f	struct:madness::detail::TaskHandlerInfo
TaskHandlerInfo	src/madness/world/world_task_queue.h	/^        struct TaskHandlerInfo {$/;"	s	namespace:madness::detail
TaskInterface	src/madness/world/taskfn.h	/^        TaskInterface(int ndepend, const char* caller, const TaskAttributes attr = TaskAttributes())$/;"	f	class:madness::TaskInterface
TaskInterface	src/madness/world/taskfn.h	/^        TaskInterface(int ndepend=0, const TaskAttributes attr = TaskAttributes())$/;"	f	class:madness::TaskInterface
TaskInterface	src/madness/world/taskfn.h	/^        explicit TaskInterface(const TaskAttributes& attr)$/;"	f	class:madness::TaskInterface
TaskInterface	src/madness/world/taskfn.h	/^    class TaskInterface : public PoolTaskInterface, public DependencyInterface {$/;"	c	namespace:madness
TaskProfiler	src/madness/world/thread.h	/^            TaskProfiler()$/;"	f	class:madness::profiling::TaskProfiler
TaskProfiler	src/madness/world/thread.h	/^        class TaskProfiler {$/;"	c	namespace:madness::profiling
TaskThreadEnv	src/madness/world/thread.h	/^        TaskThreadEnv(int nthread, int id)$/;"	f	class:madness::TaskThreadEnv
TaskThreadEnv	src/madness/world/thread.h	/^        TaskThreadEnv(int nthread, int id, Barrier* barrier)$/;"	f	class:madness::TaskThreadEnv
TaskThreadEnv	src/madness/world/thread.h	/^    class TaskThreadEnv {$/;"	c	namespace:madness
Tasks task attributes and the thread pool thread h	doc/Latex/api.tex	/^\\subsubsection{Tasks, task attributes and the thread pool (thread.h)}$/;"	b
Tasks task queues futures and dependencies	doc/Latex/parallel-runtime.tex	/^\\subsubsection{Tasks, task queues, futures, and dependencies}$/;"	b
TearDown	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual void TearDown() {}$/;"	f	class:testing::Environment
TearDown	src/madness/external/gtest/src/gtest.cc	/^void Test::TearDown() {$/;"	f	class:testing::Test
TearDown	src/madness/mra/test_mra6.cc	/^        virtual void TearDown() {}$/;"	f	class:__anon12::GenTensorTest
TearDown	src/madness/tensor/test_gentensor.cc	/^        virtual void TearDown() {}$/;"	f	class:__anon43::LowRankTensorTest
TearDown	src/madness/tensor/test_tensor.cc	/^        virtual void TearDown() {}$/;"	f	class:__anon44::TensorTest
TearDown	src/madness/world/test_googletest.cc	/^        virtual void TearDown() {$/;"	f	class:__anon4::WorldTest
TearDown	src/madness/world/test_stack.cc	/^        virtual void TearDown() { }$/;"	f	class:__anon3::StackTest
TearDown	src/madness/world/test_worldptr.cc	/^        virtual void TearDown() {$/;"	f	class:__anon6::WorldPtrTest
TearDown	src/madness/world/test_worldref.cc	/^        virtual void TearDown() {$/;"	f	class:__anon1::WorldRefTest
TearDownEnvironment	src/madness/external/gtest/src/gtest.cc	/^static void TearDownEnvironment(Environment* env) { env->TearDown(); }$/;"	f	namespace:testing::internal
TearDownTestCase	src/madness/external/gtest/include/gtest/gtest.h	/^  static void TearDownTestCase() {}$/;"	f	class:testing::Test
TearDownTestCaseFunc	src/madness/external/gtest/include/gtest/gtest.h	/^  typedef internal::TearDownTestCaseFunc TearDownTestCaseFunc;$/;"	t	class:testing::Test
TearDownTestCaseFunc	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^typedef void (*TearDownTestCaseFunc)();$/;"	t	namespace:testing::internal
Telescoping series	doc/Latex/implementation.tex	/^\\subsection[Telescoping series]{Telescoping series}$/;"	b
TemplateSel	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct TemplateSel {$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates {$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, NoneT,$/;"	s	namespace:testing::internal
Templates	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing::internal
Templates0	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates0 {};$/;"	s	namespace:testing::internal
Templates1	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates1 {$/;"	s	namespace:testing::internal
Templates10	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates10 {$/;"	s	namespace:testing::internal
Templates11	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates11 {$/;"	s	namespace:testing::internal
Templates12	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates12 {$/;"	s	namespace:testing::internal
Templates13	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates13 {$/;"	s	namespace:testing::internal
Templates14	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates14 {$/;"	s	namespace:testing::internal
Templates15	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates15 {$/;"	s	namespace:testing::internal
Templates16	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates16 {$/;"	s	namespace:testing::internal
Templates17	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates17 {$/;"	s	namespace:testing::internal
Templates18	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates18 {$/;"	s	namespace:testing::internal
Templates19	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates19 {$/;"	s	namespace:testing::internal
Templates2	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates2 {$/;"	s	namespace:testing::internal
Templates20	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates20 {$/;"	s	namespace:testing::internal
Templates21	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates21 {$/;"	s	namespace:testing::internal
Templates22	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates22 {$/;"	s	namespace:testing::internal
Templates23	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates23 {$/;"	s	namespace:testing::internal
Templates24	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates24 {$/;"	s	namespace:testing::internal
Templates25	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates25 {$/;"	s	namespace:testing::internal
Templates26	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates26 {$/;"	s	namespace:testing::internal
Templates27	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates27 {$/;"	s	namespace:testing::internal
Templates28	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates28 {$/;"	s	namespace:testing::internal
Templates29	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates29 {$/;"	s	namespace:testing::internal
Templates3	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates3 {$/;"	s	namespace:testing::internal
Templates30	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates30 {$/;"	s	namespace:testing::internal
Templates31	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates31 {$/;"	s	namespace:testing::internal
Templates32	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates32 {$/;"	s	namespace:testing::internal
Templates33	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates33 {$/;"	s	namespace:testing::internal
Templates34	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates34 {$/;"	s	namespace:testing::internal
Templates35	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates35 {$/;"	s	namespace:testing::internal
Templates36	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates36 {$/;"	s	namespace:testing::internal
Templates37	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates37 {$/;"	s	namespace:testing::internal
Templates38	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates38 {$/;"	s	namespace:testing::internal
Templates39	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates39 {$/;"	s	namespace:testing::internal
Templates4	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates4 {$/;"	s	namespace:testing::internal
Templates40	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates40 {$/;"	s	namespace:testing::internal
Templates41	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates41 {$/;"	s	namespace:testing::internal
Templates42	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates42 {$/;"	s	namespace:testing::internal
Templates43	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates43 {$/;"	s	namespace:testing::internal
Templates44	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates44 {$/;"	s	namespace:testing::internal
Templates45	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates45 {$/;"	s	namespace:testing::internal
Templates46	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates46 {$/;"	s	namespace:testing::internal
Templates47	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates47 {$/;"	s	namespace:testing::internal
Templates48	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates48 {$/;"	s	namespace:testing::internal
Templates49	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates49 {$/;"	s	namespace:testing::internal
Templates5	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates5 {$/;"	s	namespace:testing::internal
Templates50	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates50 {$/;"	s	namespace:testing::internal
Templates6	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates6 {$/;"	s	namespace:testing::internal
Templates7	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates7 {$/;"	s	namespace:testing::internal
Templates8	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates8 {$/;"	s	namespace:testing::internal
Templates9	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Templates9 {$/;"	s	namespace:testing::internal
Tensor	src/madness/tensor/tensor.h	/^        Tensor() : _p(0) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^        Tensor(const Tensor<T>& t) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^        explicit Tensor(const std::vector<long>& d, bool dozero=true) : _p(0) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^        explicit Tensor(long d0) : _p(0) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^        explicit Tensor(long d0, long d1) : _p(0) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^        explicit Tensor(long d0, long d1, long d2) : _p(0) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^        explicit Tensor(long d0, long d1, long d2, long d3) : _p(0) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^        explicit Tensor(long d0, long d1, long d2, long d3, long d4) : _p(0) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^        explicit Tensor(long d0, long d1, long d2, long d3, long d4, long d5) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^        explicit Tensor(long nd, const long d[], bool dozero=true) : _p(0) {$/;"	f	class:madness::Tensor
Tensor	src/madness/tensor/tensor.h	/^    template <class T> class Tensor : public BaseTensor {$/;"	c	namespace:madness
TensorArgs	src/madness/tensor/gentensor.h	/^		TensorArgs(const double& thresh1, const TensorType& tt1)$/;"	f	struct:madness::TensorArgs
TensorArgs	src/madness/tensor/gentensor.h	/^	struct TensorArgs {$/;"	s	namespace:madness
TensorArgs	src/madness/tensor/gentensor.h	/^        TensorArgs() : thresh(-1.0), tt(TT_NONE) {}$/;"	f	struct:madness::TensorArgs
TensorException	src/madness/tensor/tensorexcept.h	/^        TensorException(const char* s, const char *a, int err, const BaseTensor* tp,$/;"	f	class:madness::TensorException
TensorException	src/madness/tensor/tensorexcept.h	/^    class TensorException : public std::exception {$/;"	c	namespace:madness
TensorFill	src/madness/mra/test_mra6.cc	/^    enum TensorFill {null, index, random};$/;"	g	namespace:__anon12	file:
TensorFill	src/madness/tensor/test_gentensor.cc	/^    enum TensorFill {null, index, random};$/;"	g	namespace:__anon43	file:
TensorIterator	src/madness/tensor/tensoriter.h	/^    TensorIterator<T,Q,R>::TensorIterator(const Tensor<T>* t0,$/;"	f	class:madness::TensorIterator
TensorIterator	src/madness/tensor/tensoriter.h	/^    template <class T, class Q = T, class R = T> class TensorIterator {$/;"	c	namespace:madness
TensorResultType	src/madness/tensor/type_data.h	/^    struct TensorResultType {};$/;"	s	namespace:madness
TensorTest	src/madness/tensor/test_tensor.cc	/^        TensorTest() {}$/;"	f	class:__anon44::TensorTest
TensorTest	src/madness/tensor/test_tensor.cc	/^    class TensorTest : public ::testing::Test {$/;"	c	namespace:__anon44	file:
TensorTestTypes	src/madness/tensor/test_tensor.cc	/^    typedef ::testing::Types<int, long, float, double, float_complex, double_complex> TensorTestTypes;$/;"	t	namespace:__anon44	file:
TensorTrain	src/madness/tensor/tensortrain.h	/^		TensorTrain() : core(), zero_rank(true) {$/;"	f	class:madness::TensorTrain
TensorTrain	src/madness/tensor/tensortrain.h	/^		TensorTrain(const Tensor<T>& t, double eps)$/;"	f	class:madness::TensorTrain
TensorTrain	src/madness/tensor/tensortrain.h	/^		TensorTrain(const Tensor<T>& t, double eps, const std::vector<long> dims)$/;"	f	class:madness::TensorTrain
TensorTrain	src/madness/tensor/tensortrain.h	/^		TensorTrain(const TensorTrain& other) : core(other.core),$/;"	f	class:madness::TensorTrain
TensorTrain	src/madness/tensor/tensortrain.h	/^		TensorTrain(const std::vector<long>& dims) {$/;"	f	class:madness::TensorTrain
TensorTrain	src/madness/tensor/tensortrain.h	/^	class TensorTrain {$/;"	c	namespace:madness
TensorTrain	src/madness/tensor/tensortrain.h	/^        TensorTrain(const std::vector<Tensor<T> >& c) : core(c) {$/;"	f	class:madness::TensorTrain
TensorType	src/madness/tensor/tensor.h	/^	enum TensorType {TT_NONE, TT_FULL, TT_2D, TT_TENSORTRAIN};$/;"	g	namespace:madness
TensorTypeFromId	src/madness/tensor/type_data.h	/^    class TensorTypeFromId {$/;"	c	namespace:madness
Tensor_IJ_IK	src/apps/chem/PNOTensors.h	/^	Tensor_IJ_IK(size_t n) : n_(n), data_(ntri(n) * n) {$/;"	f	class:__anon48::Tensor_IJ_IK
Tensor_IJ_IK	src/apps/chem/PNOTensors.h	/^class Tensor_IJ_IK {$/;"	c	namespace:__anon48
Tensor_IJ_KJ	src/apps/chem/PNOTensors.h	/^	Tensor_IJ_KJ(size_t n) : n_(n), data_(ntri(n) * n) {$/;"	f	class:__anon48::Tensor_IJ_KJ
Tensor_IJ_KJ	src/apps/chem/PNOTensors.h	/^class Tensor_IJ_KJ {$/;"	c	namespace:__anon48
TersePrintPrefixToStrings	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void TersePrintPrefixToStrings(const Tuple& t, Strings* strings) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
TersePrintPrefixToStrings	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  static void TersePrintPrefixToStrings(const Tuple&, Strings*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
Test	src/madness/external/elemental/src/core/imports/mpi.cpp	/^bool Test( Request& request )$/;"	f	namespace:elem::mpi
Test	src/madness/external/gtest/include/gtest/gtest.h	/^class GTEST_API_ Test {$/;"	c	namespace:testing
Test	src/madness/external/gtest/src/gtest.cc	/^Test::Test()$/;"	f	class:testing::Test
Test	src/madness/external/muParser/muParserTest.h	/^  namespace Test$/;"	n	namespace:mu
Test	src/madness/tensor/kain.cc	/^struct Test : public OptimizationTargetInterface {$/;"	s	file:
Test	src/madness/tensor/test_solvers.cc	/^struct Test : public OptimizationTargetInterface {$/;"	s	file:
Test	src/madness/world/safempi.h	/^        bool Test() {$/;"	f	class:SafeMPI::Request
Test	src/madness/world/safempi.h	/^        bool Test(MPI_Status& status) {$/;"	f	class:SafeMPI::Request
Test1	src/madness/tensor/oldtest.cc	/^template <typename T, typename Q> void Test1() {$/;"	f
Test2	src/madness/tensor/kain.cc	/^struct Test2 : public OptimizationTargetInterface {$/;"	s	file:
Test2	src/madness/tensor/test_solvers.cc	/^struct Test2 : public OptimizationTargetInterface {$/;"	s	file:
Test3	src/madness/tensor/oldtest.cc	/^template <typename T> void Test3() {$/;"	f
Test5	src/madness/tensor/oldtest.cc	/^template <class T> void Test5() {$/;"	f
Test6	src/madness/tensor/oldtest.cc	/^template <class T> void Test6() {$/;"	f
Test6a	src/madness/tensor/oldtest.cc	/^void Test6a(Tensor<T> &f, long ind[])$/;"	f
Test6a	src/madness/tensor/oldtest.cc	/^void Test6a(Tensor<double_complex> &, long [])$/;"	f
Test6a	src/madness/tensor/oldtest.cc	/^void Test6a(Tensor<float_complex> &, long [])$/;"	f
Test7	src/madness/tensor/oldtest.cc	/^template <class T> void Test7() {$/;"	f
Test8	src/madness/tensor/oldtest.cc	/^template <class T> void Test8() {$/;"	f
TestAndFree	src/madness/world/worldam.h	/^            bool TestAndFree() { \/\/ assumes lock held if necessary$/;"	f	class:madness::WorldAmInterface::SendReq
TestBarrier	src/madness/world/test_world.cc	/^    TestBarrier(const madness::TaskAttributes& attr)$/;"	f	class:TestBarrier
TestBarrier	src/madness/world/test_world.cc	/^class TestBarrier : public TaskInterface {$/;"	c	file:
TestBidiag	src/madness/external/elemental/tests/lapack-like/Bidiag.cpp	/^void TestBidiag$/;"	f
TestBidiag	src/madness/external/elemental/tests/lapack-like/SequentialBidiag.cpp	/^void TestBidiag( Int m, Int n, bool testCorrectness, bool print, bool display )$/;"	f
TestCalculationParameters	src/apps/chem/test_qc.cc	/^	TestCalculationParameters(const CalculationParameters& cp) : CalculationParameters(cp) {}$/;"	f	class:TestCalculationParameters
TestCalculationParameters	src/apps/chem/test_qc.cc	/^class TestCalculationParameters : public CalculationParameters {$/;"	c	file:
TestCase	src/madness/external/gtest/include/gtest/gtest.h	/^class GTEST_API_ TestCase {$/;"	c	namespace:testing
TestCase	src/madness/external/gtest/src/gtest.cc	/^TestCase::TestCase(const char* a_name, const char* a_type_param,$/;"	f	class:testing::TestCase
TestCaseFailed	src/madness/external/gtest/src/gtest.cc	/^static bool TestCaseFailed(const TestCase* test_case) {$/;"	f	namespace:testing::internal
TestCaseInfoContainer	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef ::std::vector<ParameterizedTestCaseInfoBase*> TestCaseInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseRegistry
TestCaseNameIs	src/madness/external/gtest/src/gtest.cc	/^  explicit TestCaseNameIs(const std::string& name)$/;"	f	class:testing::internal::TestCaseNameIs
TestCaseNameIs	src/madness/external/gtest/src/gtest.cc	/^class TestCaseNameIs {$/;"	c	namespace:testing::internal	file:
TestCasePassed	src/madness/external/gtest/src/gtest.cc	/^static bool TestCasePassed(const TestCase* test_case) {$/;"	f	namespace:testing::internal
TestCholesky	src/madness/external/elemental/tests/lapack-like/Cholesky.cpp	/^void TestCholesky$/;"	f
TestCholeskyMod	src/madness/external/elemental/tests/lapack-like/CholeskyMod.cpp	/^void TestCholeskyMod$/;"	f
TestCholeskyMod	src/madness/external/elemental/tests/lapack-like/SequentialCholeskyMod.cpp	/^void TestCholeskyMod$/;"	f
TestCorrectness	src/madness/external/elemental/tests/blas-like/TwoSidedTrmm.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/blas-like/TwoSidedTrsm.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/convex/TSSVT.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/ApplyPackedReflectors.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/Bidiag.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/Cholesky.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/CholeskyMod.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/CholeskyQR.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/HermitianEig.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/HermitianGenDefiniteEig.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/HermitianTridiag.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/Hessenberg.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/LDL.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/LQ.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/LU.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/LUMod.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/MultiShiftHessSolve.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/QR.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/RQ.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/SequentialBidiag.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/SequentialCholeskyMod.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/SequentialHessenberg.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/SequentialLU.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/SequentialMultiShiftHessSolve.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/TSQR.cpp	/^void TestCorrectness$/;"	f
TestCorrectness	src/madness/external/elemental/tests/lapack-like/TriangularInverse.cpp	/^void TestCorrectness$/;"	f
TestDisabled	src/madness/external/gtest/include/gtest/gtest.h	/^  static bool TestDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestEventListener	src/madness/external/gtest/include/gtest/gtest.h	/^class TestEventListener {$/;"	c	namespace:testing
TestEventListeners	src/madness/external/gtest/include/gtest/gtest.h	/^class GTEST_API_ TestEventListeners {$/;"	c	namespace:testing
TestEventListeners	src/madness/external/gtest/src/gtest.cc	/^TestEventListeners::TestEventListeners()$/;"	f	class:testing::TestEventListeners
TestEventRepeater	src/madness/external/gtest/src/gtest.cc	/^  TestEventRepeater() : forwarding_enabled_(true) {}$/;"	f	class:testing::internal::TestEventRepeater
TestEventRepeater	src/madness/external/gtest/src/gtest.cc	/^class TestEventRepeater : public TestEventListener {$/;"	c	namespace:testing::internal	file:
TestFactoryBase	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
TestFactoryBase	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class TestFactoryBase {$/;"	c	namespace:testing::internal
TestFactoryImpl	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class TestFactoryImpl : public TestFactoryBase {$/;"	c	namespace:testing::internal
TestFailed	src/madness/external/gtest/include/gtest/gtest.h	/^  static bool TestFailed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestFutureForwarding	src/madness/world/test_world.cc	/^    TestFutureForwarding(World& world)$/;"	f	class:TestFutureForwarding
TestFutureForwarding	src/madness/world/test_world.cc	/^class TestFutureForwarding : public WorldObject<TestFutureForwarding> {$/;"	c	file:
TestGemm	src/madness/external/elemental/tests/blas-like/Gemm.cpp	/^void TestGemm$/;"	f
TestHemm	src/madness/external/elemental/tests/blas-like/Hemm.cpp	/^void TestHemm$/;"	f
TestHer2k	src/madness/external/elemental/tests/blas-like/Her2k.cpp	/^void TestHer2k$/;"	f
TestHerk	src/madness/external/elemental/tests/blas-like/Herk.cpp	/^void TestHerk$/;"	f
TestHermitianEig	src/madness/external/elemental/tests/lapack-like/HermitianEig.cpp	/^void TestHermitianEig$/;"	f
TestHermitianGenDefiniteEig	src/madness/external/elemental/tests/lapack-like/HermitianGenDefiniteEig.cpp	/^void TestHermitianGenDefiniteEig$/;"	f
TestHermitianTridiag	src/madness/external/elemental/tests/lapack-like/HermitianTridiag.cpp	/^void TestHermitianTridiag$/;"	f
TestHessenberg	src/madness/external/elemental/tests/lapack-like/Hessenberg.cpp	/^void TestHessenberg$/;"	f
TestHessenberg	src/madness/external/elemental/tests/lapack-like/MultiShiftHessSolve.cpp	/^void TestHessenberg$/;"	f
TestHessenberg	src/madness/external/elemental/tests/lapack-like/SequentialHessenberg.cpp	/^void TestHessenberg$/;"	f
TestHessenberg	src/madness/external/elemental/tests/lapack-like/SequentialMultiShiftHessSolve.cpp	/^void TestHessenberg$/;"	f
TestInfo	src/madness/external/gtest/include/gtest/gtest.h	/^class GTEST_API_ TestInfo {$/;"	c	namespace:testing
TestInfo	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    TestInfo(const char* a_test_case_base_name,$/;"	f	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
TestInfo	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  struct TestInfo {$/;"	s	class:testing::internal::ParameterizedTestCaseInfo
TestInfo	src/madness/external/gtest/src/gtest.cc	/^TestInfo::TestInfo(const std::string& a_test_case_name,$/;"	f	class:testing::TestInfo
TestInfoContainer	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef ::std::vector<linked_ptr<TestInfo> > TestInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
TestLDL	src/madness/external/elemental/tests/lapack-like/LDL.cpp	/^void TestLDL$/;"	f
TestLQ	src/madness/external/elemental/tests/lapack-like/LQ.cpp	/^void TestLQ( bool testCorrectness, bool print, Int m, Int n, const Grid& g )$/;"	f
TestLU	src/madness/external/elemental/tests/lapack-like/LU.cpp	/^void TestLU$/;"	f
TestLU	src/madness/external/elemental/tests/lapack-like/SequentialLU.cpp	/^void TestLU( bool pivot, bool testCorrectness, bool print, Int m )$/;"	f
TestLUMod	src/madness/external/elemental/tests/lapack-like/LUMod.cpp	/^void TestLUMod$/;"	f
TestMatrix	src/madness/external/elemental/tests/core/Matrix.cpp	/^void TestMatrix( Int m, Int n, Int ldim )$/;"	f
TestMetaFactory	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  TestMetaFactory() {}$/;"	f	class:testing::internal::TestMetaFactory
TestMetaFactory	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class TestMetaFactory$/;"	c	namespace:testing::internal
TestMetaFactoryBase	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class TestMetaFactoryBase {$/;"	c	namespace:testing::internal
TestMultiShiftQuasiTrsm	src/madness/external/elemental/tests/blas-like/MultiShiftQuasiTrsm.cpp	/^void TestMultiShiftQuasiTrsm$/;"	f
TestNameIs	src/madness/external/gtest/src/gtest.cc	/^  explicit TestNameIs(const char* name)$/;"	f	class:testing::__anon38::TestNameIs
TestNameIs	src/madness/external/gtest/src/gtest.cc	/^class TestNameIs {$/;"	c	namespace:testing::__anon38	file:
TestPartFatallyFailed	src/madness/external/gtest/src/gtest.cc	/^static bool TestPartFatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartNonfatallyFailed	src/madness/external/gtest/src/gtest.cc	/^static bool TestPartNonfatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartResult	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  TestPartResult(Type a_type,$/;"	f	class:testing::TestPartResult
TestPartResult	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^class GTEST_API_ TestPartResult {$/;"	c	namespace:testing
TestPartResultArray	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  TestPartResultArray() {}$/;"	f	class:testing::TestPartResultArray
TestPartResultArray	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^class GTEST_API_ TestPartResultArray {$/;"	c	namespace:testing
TestPartResultReporterInterface	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^class TestPartResultReporterInterface {$/;"	c	namespace:testing
TestPartResultTypeToString	src/madness/external/gtest/src/gtest.cc	/^static const char * TestPartResultTypeToString(TestPartResult::Type type) {$/;"	f	namespace:testing
TestPassed	src/madness/external/gtest/include/gtest/gtest.h	/^  static bool TestPassed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestPmap	src/madness/world/test_dc.cc	/^    TestPmap(World& world, int shift)$/;"	f	class:TestPmap
TestPmap	src/madness/world/test_dc.cc	/^class TestPmap : public WorldDCPmapInterface<int> {$/;"	c	file:
TestPropertiesAsXmlAttributes	src/madness/external/gtest/src/gtest.cc	/^std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
TestProperty	src/madness/external/gtest/include/gtest/gtest.h	/^  TestProperty(const std::string& a_key, const std::string& a_value) :$/;"	f	class:testing::TestProperty
TestProperty	src/madness/external/gtest/include/gtest/gtest.h	/^class TestProperty {$/;"	c	namespace:testing
TestPropertyKeyIs	src/madness/external/gtest/src/gtest-internal-inl.h	/^  explicit TestPropertyKeyIs(const std::string& key) : key_(key) {}$/;"	f	class:testing::internal::TestPropertyKeyIs
TestPropertyKeyIs	src/madness/external/gtest/src/gtest-internal-inl.h	/^class TestPropertyKeyIs {$/;"	c	namespace:testing::internal
TestQR	src/madness/external/elemental/tests/lapack-like/CholeskyQR.cpp	/^void TestQR$/;"	f
TestQR	src/madness/external/elemental/tests/lapack-like/QR.cpp	/^void TestQR( bool testCorrectness, bool print, Int m, Int n, const Grid& g )$/;"	f
TestQR	src/madness/external/elemental/tests/lapack-like/TSQR.cpp	/^void TestQR$/;"	f
TestQuasiTrsm	src/madness/external/elemental/tests/blas-like/QuasiTrsm.cpp	/^void TestQuasiTrsm$/;"	f
TestRQ	src/madness/external/elemental/tests/lapack-like/RQ.cpp	/^void TestRQ( bool testCorrectness, bool print, Int m, Int n, const Grid& g )$/;"	f
TestReportable	src/madness/external/gtest/include/gtest/gtest.h	/^  static bool TestReportable(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestReportableDisabled	src/madness/external/gtest/include/gtest/gtest.h	/^  static bool TestReportableDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestResult	src/madness/external/gtest/include/gtest/gtest.h	/^class GTEST_API_ TestResult {$/;"	c	namespace:testing
TestResult	src/madness/external/gtest/src/gtest.cc	/^TestResult::TestResult()$/;"	f	class:testing::TestResult
TestResultAccessor	src/madness/external/gtest/src/gtest-internal-inl.h	/^class TestResultAccessor {$/;"	c	namespace:testing::internal
TestRole	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	g	class:testing::internal::DeathTest
TestSVT	src/madness/external/elemental/tests/convex/TSSVT.cpp	/^void TestSVT$/;"	f
TestSymm	src/madness/external/elemental/tests/blas-like/Symm.cpp	/^void TestSymm$/;"	f
TestSymv	src/madness/external/elemental/tests/blas-like/Symv.cpp	/^void TestSymv$/;"	f
TestSyr2k	src/madness/external/elemental/tests/blas-like/Syr2k.cpp	/^void TestSyr2k$/;"	f
TestSyrk	src/madness/external/elemental/tests/blas-like/Syrk.cpp	/^void TestSyrk$/;"	f
TestSystolicMatrixAlgorithm	src/madness/tensor/test_systolic.cc	/^    TestSystolicMatrixAlgorithm(DistributedMatrix<T>& A, int tag)$/;"	f	class:TestSystolicMatrixAlgorithm
TestSystolicMatrixAlgorithm	src/madness/tensor/test_systolic.cc	/^class TestSystolicMatrixAlgorithm : public SystolicMatrixAlgorithm<T> {$/;"	c	file:
TestTask	src/madness/world/test_world.cc	/^class TestTask : public TaskInterface {$/;"	c	file:
TestTriangularInverse	src/madness/external/elemental/tests/lapack-like/TriangularInverse.cpp	/^void TestTriangularInverse$/;"	f
TestTrmm	src/madness/external/elemental/tests/blas-like/Trmm.cpp	/^void TestTrmm$/;"	f
TestTrsm	src/madness/external/elemental/tests/blas-like/Trsm.cpp	/^void TestTrsm$/;"	f
TestTrsv	src/madness/external/elemental/tests/blas-like/Trsv.cpp	/^void TestTrsv$/;"	f
TestTwoSidedTrmm	src/madness/external/elemental/tests/blas-like/TwoSidedTrmm.cpp	/^void TestTwoSidedTrmm$/;"	f
TestTwoSidedTrsm	src/madness/external/elemental/tests/blas-like/TwoSidedTrsm.cpp	/^void TestTwoSidedTrsm$/;"	f
TestUT	src/madness/external/elemental/tests/lapack-like/ApplyPackedReflectors.cpp	/^void TestUT$/;"	f
TestWithParam	src/madness/external/gtest/include/gtest/gtest.h	/^class TestWithParam : public Test, public WithParamInterface<T> {$/;"	c	namespace:testing
Test_got_lock_already	src/madness/world/safempi.h	/^        bool Test_got_lock_already() {$/;"	f	class:SafeMPI::Request
Test_got_lock_already	src/madness/world/safempi.h	/^        bool Test_got_lock_already(MPI_Status& status) {$/;"	f	class:SafeMPI::Request
Testany	src/madness/world/safempi.h	/^        static bool Testany(int count, Request* requests, int& index) {$/;"	f	class:SafeMPI::Request
Testany	src/madness/world/safempi.h	/^        static bool Testany(int count, Request* requests, int& index, Status& status) {$/;"	f	class:SafeMPI::Request
Testsome	src/madness/world/safempi.h	/^        static int Testsome(int incount, Request* requests, int* indices) {$/;"	f	class:SafeMPI::Request
Testsome	src/madness/world/safempi.h	/^        static int Testsome(int incount, Request* requests, int* indices, Status* statuses) {$/;"	f	class:SafeMPI::Request
Text	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlText* Text() const			{ return ToText(); }$/;"	f	class:TiXmlHandle
TextFstreamInputArchive	src/madness/world/text_fstream_archive.h	/^            TextFstreamInputArchive(const char* filename = nullptr,$/;"	f	class:madness::archive::TextFstreamInputArchive
TextFstreamInputArchive	src/madness/world/text_fstream_archive.h	/^        class TextFstreamInputArchive : public BaseInputArchive {$/;"	c	namespace:madness::archive
TextFstreamOutputArchive	src/madness/world/text_fstream_archive.h	/^            TextFstreamOutputArchive(const char* filename = nullptr,$/;"	f	class:madness::archive::TextFstreamOutputArchive
TextFstreamOutputArchive	src/madness/world/text_fstream_archive.h	/^        class TextFstreamOutputArchive : public BaseOutputArchive {$/;"	c	namespace:madness::archive
Thread	src/madness/world/thread.h	/^        Thread() : f(nullptr), args(nullptr) { }$/;"	f	class:madness::Thread
Thread	src/madness/world/thread.h	/^        Thread(void* (*f)(void *), void* args=nullptr)$/;"	f	class:madness::Thread
Thread	src/madness/world/thread.h	/^    class Thread : public ThreadBase {$/;"	c	namespace:madness
ThreadBase	src/madness/world/thread.h	/^        ThreadBase() : pool_num(-1) { }$/;"	f	class:madness::ThreadBase
ThreadBase	src/madness/world/thread.h	/^    class ThreadBase {$/;"	c	namespace:madness
ThreadFuncWithCLinkage	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {$/;"	f	namespace:testing::internal
ThreadLocal	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ThreadLocal() : key_(CreateKey()),$/;"	f	class:testing::internal::ThreadLocal
ThreadLocal	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ThreadLocal() : value_() {}$/;"	f	class:testing::internal::ThreadLocal
ThreadLocal	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  explicit ThreadLocal(const T& value) : key_(CreateKey()),$/;"	f	class:testing::internal::ThreadLocal
ThreadLocal	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  explicit ThreadLocal(const T& value) : value_(value) {}$/;"	f	class:testing::internal::ThreadLocal
ThreadLocal	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class ThreadLocal {$/;"	c	namespace:testing::internal
ThreadLocalValueHolderBase	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class ThreadLocalValueHolderBase {$/;"	c	namespace:testing::internal
ThreadPool	src/madness/world/thread.cc	/^    ThreadPool::ThreadPool(int nthread) :$/;"	f	class:madness::ThreadPool
ThreadPool	src/madness/world/thread.h	/^    class ThreadPool {$/;"	c	namespace:madness
ThreadPoolThread	src/madness/world/thread.h	/^        ThreadPoolThread() : Thread() { }$/;"	f	class:madness::ThreadPoolThread
ThreadPoolThread	src/madness/world/thread.h	/^    class ThreadPoolThread : public Thread {$/;"	c	namespace:madness
ThreadWithParam	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ThreadWithParam($/;"	f	class:testing::internal::ThreadWithParam
ThreadWithParam	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class ThreadWithParam : public ThreadWithParamBase {$/;"	c	namespace:testing::internal
ThreadWithParamBase	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class ThreadWithParamBase {$/;"	c	namespace:testing::internal
Threads thread h	doc/Latex/api.tex	/^\\subsubsection{Threads (thread.h)}$/;"	b
Thresholded	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	/^Thresholded$/;"	f	namespace:elem::svd
TiXmlAttribute	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute
TiXmlAttribute	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute
TiXmlAttribute	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute
TiXmlAttribute	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlAttribute : public TiXmlBase$/;"	c
TiXmlAttributeSet	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet
TiXmlAttributeSet	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlAttributeSet$/;"	c
TiXmlBase	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlBase()	:	userData(0)		{}$/;"	f	class:TiXmlBase
TiXmlBase	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlBase$/;"	c
TiXmlComment	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::COMMENT )$/;"	f	class:TiXmlComment
TiXmlComment	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::COMMENT ) {$/;"	f	class:TiXmlComment
TiXmlComment	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlComment() : TiXmlNode( TiXmlNode::COMMENT ) {}$/;"	f	class:TiXmlComment
TiXmlComment	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlComment : public TiXmlNode$/;"	c
TiXmlCursor	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlCursor()		{ Clear(); }$/;"	f	struct:TiXmlCursor
TiXmlCursor	src/madness/external/tinyxml/tinyxml.h	/^struct TiXmlCursor$/;"	s
TiXmlDeclaration	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::DECLARATION ) {}$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlDeclaration : public TiXmlNode$/;"	c
TiXmlDocument	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlDocument : public TiXmlNode$/;"	c
TiXmlElement	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement
TiXmlElement	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement
TiXmlElement	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement
TiXmlElement	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlElement : public TiXmlNode$/;"	c
TiXmlEncoding	src/madness/external/tinyxml/tinyxml.h	/^enum TiXmlEncoding$/;"	g
TiXmlFOpen	src/madness/external/tinyxml/tinyxml.cc	/^FILE* TiXmlFOpen( const char* filename, const char* mode )$/;"	f
TiXmlHandle	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }$/;"	f	class:TiXmlHandle
TiXmlHandle	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlHandle( const TiXmlHandle& ref )			{ this->node = ref.node; }$/;"	f	class:TiXmlHandle
TiXmlHandle	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlHandle$/;"	c
TiXmlNode	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode
TiXmlNode	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlNode : public TiXmlBase$/;"	c
TiXmlOutStream	src/madness/external/tinyxml/tinystr.h	/^class TiXmlOutStream : public TiXmlString$/;"	c
TiXmlParsingData	src/madness/external/tinyxml/tinyxmlparser.cc	/^	TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:
TiXmlParsingData	src/madness/external/tinyxml/tinyxmlparser.cc	/^class TiXmlParsingData$/;"	c	file:
TiXmlPrinter	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter
TiXmlPrinter	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlPrinter : public TiXmlVisitor$/;"	c
TiXmlString	src/madness/external/tinyxml/tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * copy) : rep_(0)$/;"	f	class:TiXmlString
TiXmlString	src/madness/external/tinyxml/tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * str, size_type len) : rep_(0)$/;"	f	class:TiXmlString
TiXmlString	src/madness/external/tinyxml/tinystr.h	/^	TiXmlString ( const TiXmlString & copy) : rep_(0)$/;"	f	class:TiXmlString
TiXmlString	src/madness/external/tinyxml/tinystr.h	/^	TiXmlString () : rep_(&nullrep_)$/;"	f	class:TiXmlString
TiXmlString	src/madness/external/tinyxml/tinystr.h	/^class TiXmlString$/;"	c
TiXmlText	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:TiXmlText
TiXmlText	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TEXT )	{ copy.CopyTo( this ); }$/;"	f	class:TiXmlText
TiXmlText	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:TiXmlText
TiXmlText	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlText : public TiXmlNode$/;"	c
TiXmlUnknown	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::UNKNOWN )		{ copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown
TiXmlUnknown	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlUnknown() : TiXmlNode( TiXmlNode::UNKNOWN )	{}$/;"	f	class:TiXmlUnknown
TiXmlUnknown	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlUnknown : public TiXmlNode$/;"	c
TiXmlVisitor	src/madness/external/tinyxml/tinyxml.h	/^class TiXmlVisitor$/;"	c
Time	src/madness/external/elemental/src/core/imports/mpi.cpp	/^double Time()$/;"	f	namespace:elem::mpi
TimeBarrier	src/madness/world/test_world.cc	/^    TimeBarrier(const madness::TaskAttributes& attr)$/;"	f	class:TimeBarrier
TimeBarrier	src/madness/world/test_world.cc	/^class TimeBarrier : public TaskInterface {$/;"	c	file:
TimeInMillis	src/madness/external/gtest/include/gtest/gtest.h	/^typedef internal::TimeInMillis TimeInMillis;$/;"	t	namespace:testing
TimeInMillis	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<8>::Int TimeInMillis;  \/\/ Represents time in milliseconds.$/;"	t	namespace:testing::internal
TimedGemm	src/madness/external/elemental/examples/blas-like/Gemm.cpp	/^void TimedGemm$/;"	f
Timer	src/madness/external/elemental/include/elemental/core/Timer/decl.hpp	/^class Timer$/;"	c	namespace:elem
Timer	src/madness/external/elemental/include/elemental/core/Timer/impl.hpp	/^inline Timer::Timer( const std::string& name )$/;"	f	class:elem::Timer
Timer	src/madness/mra/function_common_data.h	/^        Timer() {$/;"	f	class:madness::Timer
Timer	src/madness/mra/function_common_data.h	/^    class Timer {$/;"	c	namespace:madness
Tnorm	src/madness/mra/convolution1d.h	/^        double Rnorm, Tnorm, Rnormf, Tnormf, NSnormf;$/;"	m	struct:madness::ConvolutionData1D
Tnormf	src/madness/mra/convolution1d.h	/^        double Rnorm, Tnorm, Rnormf, Tnormf, NSnormf;$/;"	m	struct:madness::ConvolutionData1D
ToComment	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToComment	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlComment*  ToComment() { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment
ToComment	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToComment	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlComment*  ToComment() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment
ToDeclaration	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration
ToDeclaration	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDeclaration	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDeclaration	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration
ToDocument	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument
ToDocument	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDocument	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDocument	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument
ToElement	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlElement* ToElement() const		{ return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:TiXmlHandle
ToElement	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement
ToElement	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToElement	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToElement	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement
ToLower	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline char ToLower(char ch) {$/;"	f	namespace:testing::internal
ToLower	src/madness/external/tinyxml/tinyxml.h	/^	inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
ToNode	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* ToNode() const			{ return node; } $/;"	f	class:TiXmlHandle
ToText	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlText* ToText() const			{ return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle
ToText	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlText*	            ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToText	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText
ToText	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToText	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText
ToUnknown	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlUnknown* ToUnknown() const		{ return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:TiXmlHandle
ToUnknown	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToUnknown	src/madness/external/tinyxml/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown
ToUnknown	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToUnknown	src/madness/external/tinyxml/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown
ToUpper	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline char ToUpper(char ch) {$/;"	f	namespace:testing::internal
Toeplitz	src/madness/external/elemental/include/elemental/matrices/Toeplitz.hpp	/^Toeplitz( BlockDistMatrix<S,U,V>& A, Int m, Int n, const std::vector<T>& a )$/;"	f	namespace:elem
Toeplitz	src/madness/external/elemental/include/elemental/matrices/Toeplitz.hpp	/^Toeplitz( DistMatrix<S,U,V>& A, Int m, Int n, const std::vector<T>& a )$/;"	f	namespace:elem
Toeplitz	src/madness/external/elemental/include/elemental/matrices/Toeplitz.hpp	/^Toeplitz( Matrix<S>& A, Int m, Int n, const std::vector<T>& a )$/;"	f	namespace:elem
Total	src/madness/external/elemental/include/elemental/core/Timer/impl.hpp	/^Timer::Total() const$/;"	f	class:elem::Timer
TotalRecv	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    int TotalRecv() const { return recvCounts.back()+recvDispls.back(); }$/;"	f	struct:elem::PermutationMeta
TotalSend	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    int TotalSend() const { return sendCounts.back()+sendDispls.back(); }$/;"	f	struct:elem::PermutationMeta
Trace	src/madness/external/elemental/include/elemental/lapack-like/props/Trace.hpp	/^inline F Trace( const DistMatrix<F>& A )$/;"	f	namespace:elem
Trace	src/madness/external/elemental/include/elemental/lapack-like/props/Trace.hpp	/^inline F Trace( const Matrix<F>& A )$/;"	f	namespace:elem
TraceInfo	src/madness/external/gtest/src/gtest-internal-inl.h	/^struct TraceInfo {$/;"	s	namespace:testing::internal
Trans	src/madness/tensor/cblas_types.h	/^      Trans=1,$/;"	e	enum:madness::cblas::__anon45
Transformation	src/madness/mra/operator.h	/^        struct Transformation {$/;"	s	class:madness::SeparatedConvolution
Translate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::Translate( BlockDistMatrix<T,U,V>& A ) const$/;"	f	class:elem::GeneralBlockDistMatrix
Translate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::Translate( DistMatrix<T,U,V>& A ) const$/;"	f	class:elem::GeneralDistMatrix
Translate	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int Translate( Comm origComm, int origRank, Comm newComm )$/;"	f	namespace:elem::mpi
Translate	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int Translate( Comm origComm, int origRank, Group newGroup )$/;"	f	namespace:elem::mpi
Translate	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int Translate( Group origGroup, int origRank, Comm newComm )$/;"	f	namespace:elem::mpi
Translate	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int Translate( Group origGroup, int origRank, Group newGroup )$/;"	f	namespace:elem::mpi
Translate	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Translate$/;"	f	namespace:elem::mpi
Translate_ranks	src/madness/world/safempi.h	/^        void Translate_ranks(int nproc, const int* ranks1, const Group& grp2, int* ranks2) const {$/;"	f	class:SafeMPI::Group
Translation	src/madness/mra/key.h	/^    typedef int64_t Translation;$/;"	t	namespace:madness
Transpose	src/madness/external/elemental/include/elemental/blas-like/level1/Transpose.hpp	/^Transpose$/;"	f	namespace:elem
Transpose	src/madness/external/elemental/include/elemental/blas-like/level1/Transpose.hpp	/^Transpose( const Matrix<T>& A, Matrix<T>& B, bool conjugate=false )$/;"	f	namespace:elem
TransposeColAllGather	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposeColAllGather$/;"	f	class:elem::GeneralBlockDistMatrix
TransposeColAllGather	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposeColAllGather$/;"	f	class:elem::GeneralDistMatrix
TransposeColFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposeColFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
TransposeColFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposeColFilterFrom$/;"	f	class:elem::GeneralDistMatrix
TransposeColSumScatterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposeColSumScatterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
TransposeColSumScatterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposeColSumScatterFrom$/;"	f	class:elem::GeneralDistMatrix
TransposeColSumScatterUpdate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposeColSumScatterUpdate$/;"	f	class:elem::GeneralBlockDistMatrix
TransposeColSumScatterUpdate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposeColSumScatterUpdate$/;"	f	class:elem::GeneralDistMatrix
TransposePartialColAllGather	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposePartialColAllGather$/;"	f	class:elem::GeneralBlockDistMatrix
TransposePartialColAllGather	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposePartialColAllGather$/;"	f	class:elem::GeneralDistMatrix
TransposePartialColFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposePartialColFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
TransposePartialColFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposePartialColFilterFrom$/;"	f	class:elem::GeneralDistMatrix
TransposePartialColSumScatterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposePartialColSumScatterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
TransposePartialColSumScatterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposePartialColSumScatterFrom$/;"	f	class:elem::GeneralDistMatrix
TransposePartialColSumScatterUpdate	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposePartialColSumScatterUpdate$/;"	f	class:elem::GeneralBlockDistMatrix
TransposePartialColSumScatterUpdate	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposePartialColSumScatterUpdate$/;"	f	class:elem::GeneralDistMatrix
TransposePartialRowFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposePartialRowFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
TransposePartialRowFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposePartialRowFilterFrom$/;"	f	class:elem::GeneralDistMatrix
TransposeRowFilterFrom	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::TransposeRowFilterFrom$/;"	f	class:elem::GeneralBlockDistMatrix
TransposeRowFilterFrom	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::TransposeRowFilterFrom$/;"	f	class:elem::GeneralDistMatrix
Trdtrmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm.hpp	/^Trdtrmm$/;"	f	namespace:elem
Trdtrmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm.hpp	/^Trdtrmm( UpperOrLower uplo, DistMatrix<F>& A, bool conjugate=false )$/;"	f	namespace:elem
Trdtrmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm.hpp	/^Trdtrmm( UpperOrLower uplo, Matrix<F>& A, bool conjugate=false )$/;"	f	namespace:elem
TrdtrmmLUnblocked	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/Unblocked.hpp	/^TrdtrmmLUnblocked( Matrix<F>& L, bool conjugate=false )$/;"	f	namespace:elem::internal
TrdtrmmLUnblocked	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/Unblocked.hpp	/^TrdtrmmLUnblocked( Matrix<F>& L, const Matrix<F>& dSub, bool conjugate=false )$/;"	f	namespace:elem::internal
TrdtrmmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/LVar1.hpp	/^TrdtrmmLVar1$/;"	f	namespace:elem::internal
TrdtrmmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/LVar1.hpp	/^TrdtrmmLVar1( DistMatrix<F>& L, bool conjugate=false )$/;"	f	namespace:elem::internal
TrdtrmmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/LVar1.hpp	/^TrdtrmmLVar1( Matrix<F>& L, bool conjugate=false )$/;"	f	namespace:elem::internal
TrdtrmmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/LVar1.hpp	/^TrdtrmmLVar1( Matrix<F>& L, const Matrix<F>& dSub, bool conjugate=false )$/;"	f	namespace:elem::internal
TrdtrmmUUnblocked	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/Unblocked.hpp	/^TrdtrmmUUnblocked( Matrix<F>& U, bool conjugate=false )$/;"	f	namespace:elem::internal
TrdtrmmUVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/UVar1.hpp	/^TrdtrmmUVar1( DistMatrix<F>& U, bool conjugate=false )$/;"	f	namespace:elem::internal
TrdtrmmUVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/UVar1.hpp	/^TrdtrmmUVar1( Matrix<F>& U, bool conjugate=false )$/;"	f	namespace:elem::internal
TreeData	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^    TreeData( Int numStages=0 )$/;"	f	struct:elem::qr::TreeData
TreeData	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^    TreeData( TreeData<F>&& treeData )$/;"	f	struct:elem::qr::TreeData
TreeData	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^struct TreeData$/;"	s	namespace:elem::qr
Trefethen	src/madness/external/elemental/include/elemental/matrices/Trefethen.hpp	/^Trefethen( BlockDistMatrix<Complex<Real>,U,V>& A, Int n )$/;"	f	namespace:elem
Trefethen	src/madness/external/elemental/include/elemental/matrices/Trefethen.hpp	/^Trefethen( DistMatrix<Complex<Real>,U,V>& A, Int n )$/;"	f	namespace:elem
Trefethen	src/madness/external/elemental/include/elemental/matrices/Trefethen.hpp	/^Trefethen( Matrix<Complex<Real>>& A, Int n )$/;"	f	namespace:elem
TriW	src/madness/external/elemental/include/elemental/matrices/TriW.hpp	/^TriW( BlockDistMatrix<T,U,V>& A, Int m, Int n, T alpha, Int k )$/;"	f	namespace:elem
TriW	src/madness/external/elemental/include/elemental/matrices/TriW.hpp	/^TriW( DistMatrix<T,U,V>& A, Int m, Int n, T alpha, Int k )$/;"	f	namespace:elem
TriW	src/madness/external/elemental/include/elemental/matrices/TriW.hpp	/^TriW( Matrix<T>& A, Int m, Int n, T alpha, Int k )$/;"	f	namespace:elem
TriangIsNormal	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^TriangIsNormal( const DistMatrix<F>& U, Base<F> tol )$/;"	f	namespace:elem::pspec
TriangIsNormal	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^TriangIsNormal( const Matrix<F>& U, Base<F> tol )$/;"	f	namespace:elem::pspec
Triangle	src/madness/external/elemental/include/elemental/matrices/Triangle.hpp	/^Triangle( BlockDistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Triangle	src/madness/external/elemental/include/elemental/matrices/Triangle.hpp	/^Triangle( DistMatrix<F,U,V>& A, Int n )$/;"	f	namespace:elem
Triangle	src/madness/external/elemental/include/elemental/matrices/Triangle.hpp	/^Triangle( Matrix<F>& A, Int n )$/;"	f	namespace:elem
TriangularInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular.hpp	/^TriangularInverse( UpperOrLower uplo, UnitOrNonUnit diag, DistMatrix<F>& A  )$/;"	f	namespace:elem
TriangularInverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular.hpp	/^TriangularInverse( UpperOrLower uplo, UnitOrNonUnit diag, Matrix<F>& A )$/;"	f	namespace:elem
TriangularPseudospectrum	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum.hpp	/^TriangularPseudospectrum$/;"	f	namespace:elem
Trmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm.hpp	/^Trmm$/;"	f	namespace:elem
Trmm	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Trmm$/;"	f	namespace:elem::blas
Trmm	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void Trmm$/;"	f	namespace:elem::scalapack
Trmv	src/madness/external/elemental/include/elemental/blas-like/level2/Trmv.hpp	/^Trmv$/;"	f	namespace:elem
Trmv	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Trmv$/;"	f	namespace:elem::blas
Trr	src/madness/external/elemental/include/elemental/blas-like/level2/Trr.hpp	/^Trr$/;"	f	namespace:elem
Trr2	src/madness/external/elemental/include/elemental/blas-like/level2/Trr2.hpp	/^Trr2$/;"	f	namespace:elem
Trr2k	src/madness/external/elemental/src/blas-like/Trr2k.cpp	/^void Trr2k$/;"	f	namespace:elem
Trr2kNNNN	src/madness/external/elemental/src/blas-like/Trr2k/NNNN.hpp	/^void Trr2kNNNN$/;"	f	namespace:elem::internal
Trr2kNNNT	src/madness/external/elemental/src/blas-like/Trr2k/NNNT.hpp	/^void Trr2kNNNT$/;"	f	namespace:elem::internal
Trr2kNNTN	src/madness/external/elemental/src/blas-like/Trr2k/NNTN.hpp	/^void Trr2kNNTN$/;"	f	namespace:elem::internal
Trr2kNNTT	src/madness/external/elemental/src/blas-like/Trr2k/NNTT.hpp	/^void Trr2kNNTT$/;"	f	namespace:elem::internal
Trr2kNTNN	src/madness/external/elemental/src/blas-like/Trr2k/NTNN.hpp	/^void Trr2kNTNN$/;"	f	namespace:elem::internal
Trr2kNTNT	src/madness/external/elemental/src/blas-like/Trr2k/NTNT.hpp	/^void Trr2kNTNT$/;"	f	namespace:elem::internal
Trr2kNTTN	src/madness/external/elemental/src/blas-like/Trr2k/NTTN.hpp	/^void Trr2kNTTN$/;"	f	namespace:elem::internal
Trr2kNTTT	src/madness/external/elemental/src/blas-like/Trr2k/NTTT.hpp	/^void Trr2kNTTT$/;"	f	namespace:elem::internal
Trr2kTNNN	src/madness/external/elemental/src/blas-like/Trr2k/TNNN.hpp	/^void Trr2kTNNN$/;"	f	namespace:elem::internal
Trr2kTNNT	src/madness/external/elemental/src/blas-like/Trr2k/TNNT.hpp	/^void Trr2kTNNT$/;"	f	namespace:elem::internal
Trr2kTNTN	src/madness/external/elemental/src/blas-like/Trr2k/TNTN.hpp	/^void Trr2kTNTN$/;"	f	namespace:elem::internal
Trr2kTNTT	src/madness/external/elemental/src/blas-like/Trr2k/TNTT.hpp	/^void Trr2kTNTT$/;"	f	namespace:elem::internal
Trr2kTTNN	src/madness/external/elemental/src/blas-like/Trr2k/TTNN.hpp	/^void Trr2kTTNN$/;"	f	namespace:elem::internal
Trr2kTTNT	src/madness/external/elemental/src/blas-like/Trr2k/TTNT.hpp	/^void Trr2kTTNT$/;"	f	namespace:elem::internal
Trr2kTTTN	src/madness/external/elemental/src/blas-like/Trr2k/TTTN.hpp	/^void Trr2kTTTN$/;"	f	namespace:elem::internal
Trr2kTTTT	src/madness/external/elemental/src/blas-like/Trr2k/TTTT.hpp	/^void Trr2kTTTT$/;"	f	namespace:elem::internal
Trrk	src/madness/external/elemental/src/blas-like/Trrk.cpp	/^void Trrk$/;"	f	namespace:elem
TrrkNN	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void TrrkNN$/;"	f	namespace:elem::internal
TrrkNN	src/madness/external/elemental/src/blas-like/Trrk/NN.hpp	/^void TrrkNN$/;"	f	namespace:elem::internal
TrrkNNKernel	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^TrrkNNKernel$/;"	f	namespace:elem::trrk
TrrkNT	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void TrrkNT$/;"	f	namespace:elem::internal
TrrkNT	src/madness/external/elemental/src/blas-like/Trrk/NT.hpp	/^void TrrkNT$/;"	f	namespace:elem::internal
TrrkNTKernel	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^TrrkNTKernel$/;"	f	namespace:elem::trrk
TrrkTN	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void TrrkTN$/;"	f	namespace:elem::internal
TrrkTN	src/madness/external/elemental/src/blas-like/Trrk/TN.hpp	/^void TrrkTN$/;"	f	namespace:elem::internal
TrrkTNKernel	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^TrrkTNKernel$/;"	f	namespace:elem::trrk
TrrkTT	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^void TrrkTT$/;"	f	namespace:elem::internal
TrrkTT	src/madness/external/elemental/src/blas-like/Trrk/TT.hpp	/^void TrrkTT$/;"	f	namespace:elem::internal
TrrkTTKernel	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^TrrkTTKernel$/;"	f	namespace:elem::trrk
Trsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm.hpp	/^Trsm$/;"	f	namespace:elem
Trsm	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Trsm$/;"	f	namespace:elem::blas
Trsm	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void Trsm$/;"	f	namespace:elem::scalapack
Trstrm	src/madness/external/elemental/include/elemental/blas-like/level3/Trstrm.hpp	/^Trstrm$/;"	f	namespace:elem
TrstrmLLN	src/madness/external/elemental/include/elemental/blas-like/level3/Trstrm/LLN.hpp	/^TrstrmLLN$/;"	f	namespace:elem::internal
TrstrmLLNUnb	src/madness/external/elemental/include/elemental/blas-like/level3/Trstrm/LLN.hpp	/^TrstrmLLNUnb( UnitOrNonUnit diag, F alpha, const Matrix<F>& L, Matrix<F>& X )$/;"	f	namespace:elem::internal
Trsv	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv.hpp	/^Trsv$/;"	f	namespace:elem
Trsv	src/madness/external/elemental/src/core/imports/blas.cpp	/^void Trsv$/;"	f	namespace:elem::blas
TrsvLN	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/LN.hpp	/^TrsvLN( UnitOrNonUnit diag, const DistMatrix<F>& L, DistMatrix<F>& x )$/;"	f	namespace:elem::internal
TrsvLT	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/LT.hpp	/^TrsvLT$/;"	f	namespace:elem::internal
TrsvUN	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/UN.hpp	/^TrsvUN( UnitOrNonUnit diag, const DistMatrix<F>& U, DistMatrix<F>& x )$/;"	f	namespace:elem::internal
TrsvUT	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/UT.hpp	/^TrsvUT$/;"	f	namespace:elem::internal
Trtrmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm.hpp	/^Trtrmm( UpperOrLower uplo, DistMatrix<T>& A, bool conjugate=false )$/;"	f	namespace:elem
Trtrmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm.hpp	/^Trtrmm( UpperOrLower uplo, Matrix<T>& A, bool conjugate=false )$/;"	f	namespace:elem
TrtrmmLUnblocked	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/Unblocked.hpp	/^TrtrmmLUnblocked( Matrix<T>& L, bool conjugate=false )$/;"	f	namespace:elem::internal
TrtrmmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/LVar1.hpp	/^TrtrmmLVar1( DistMatrix<T>& L, bool conjugate=false )$/;"	f	namespace:elem::internal
TrtrmmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/LVar1.hpp	/^TrtrmmLVar1( Matrix<T>& L, bool conjugate=false )$/;"	f	namespace:elem::internal
TrtrmmUUnblocked	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/Unblocked.hpp	/^TrtrmmUUnblocked( Matrix<T>& U, bool conjugate=false )$/;"	f	namespace:elem::internal
TrtrmmUVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/UVar1.hpp	/^TrtrmmUVar1( DistMatrix<T>& U, bool conjugate=false )$/;"	f	namespace:elem::internal
TrtrmmUVar1	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/UVar1.hpp	/^TrtrmmUVar1( Matrix<T>& U, bool conjugate=false )$/;"	f	namespace:elem::internal
Truncation criteria	doc/Latex/implementation.tex	/^\\subsection{Truncation criteria}$/;"	b
Ts	src/madness/mra/convolution1d.h	/^        Tensor<typename Tensor<Q>::scalar_type> Rs, Ts;     \/\/\/< hold relative errors, NOT the singular values..$/;"	m	struct:madness::ConvolutionData1D
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 0, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 1, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 2, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 3, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 4, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 5, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 6, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 7, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 8, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct TupleElement<true, 9, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TuplePrefixPrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^struct TuplePrefixPrinter {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^struct TuplePrefixPrinter<0> {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^struct TuplePrefixPrinter<1> {$/;"	s	namespace:testing::internal
Two	src/apps/chem/correlationfactor.h	/^	    Polynomial, Slater, poly4erfc, Two};$/;"	e	enum:madness::NuclearCorrelationFactor::corrfactype
TwoCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Two.hpp	/^TwoCondition( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
TwoCondition	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Two.hpp	/^TwoCondition( const Matrix<F>& A )$/;"	f	namespace:elem
TwoElectronFactory	src/madness/mra/function_factory.h	/^    TwoElectronFactory(World& world)$/;"	f	class:madness::TwoElectronFactory
TwoElectronFactory	src/madness/mra/function_factory.h	/^  class TwoElectronFactory : public FunctionFactory<double,6> {$/;"	c	namespace:madness
TwoElectronInterface	src/madness/mra/function_interface.h	/^		TwoElectronInterface(double lo, double eps,$/;"	f	class:madness::TwoElectronInterface
TwoElectronInterface	src/madness/mra/function_interface.h	/^    class TwoElectronInterface : public FunctionFunctorInterface<T,NDIM> {$/;"	c	namespace:madness
TwoNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Two.hpp	/^TwoNorm( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
TwoNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Two.hpp	/^TwoNorm( const Matrix<F>& A )$/;"	f	namespace:elem
TwoNormEstimate	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/TwoEstimate.hpp	/^TwoNormEstimate( const DistMatrix<F>& A, Base<F> tol=1e-6, Int maxIts=1000 )$/;"	f	namespace:elem
TwoNormEstimate	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/TwoEstimate.hpp	/^TwoNormEstimate( const Matrix<F>& A, Base<F> tol=1e-6, Int maxIts=1000 )$/;"	f	namespace:elem
TwoSidedTrmm	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm.hpp	/^TwoSidedTrmm$/;"	f	namespace:elem
TwoSidedTrmm	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void TwoSidedTrmm$/;"	f	namespace:elem::scalapack
TwoSidedTrmmLUnb	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm.hpp	/^TwoSidedTrmmLUnb( UnitOrNonUnit diag, Matrix<T>& A, const Matrix<T>& L )$/;"	f	namespace:elem::internal
TwoSidedTrmmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar1.hpp	/^TwoSidedTrmmLVar1$/;"	f	namespace:elem::internal
TwoSidedTrmmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar1.hpp	/^TwoSidedTrmmLVar1( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrmmLVar2	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar2.hpp	/^TwoSidedTrmmLVar2$/;"	f	namespace:elem::internal
TwoSidedTrmmLVar2	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar2.hpp	/^TwoSidedTrmmLVar2( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrmmLVar4	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar4.hpp	/^TwoSidedTrmmLVar4$/;"	f	namespace:elem::internal
TwoSidedTrmmLVar4	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar4.hpp	/^TwoSidedTrmmLVar4( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrmmLVar5	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar5.hpp	/^TwoSidedTrmmLVar5$/;"	f	namespace:elem::internal
TwoSidedTrmmLVar5	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar5.hpp	/^TwoSidedTrmmLVar5( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrmmUUnb	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm.hpp	/^TwoSidedTrmmUUnb( UnitOrNonUnit diag, Matrix<T>& A, const Matrix<T>& U )$/;"	f	namespace:elem::internal
TwoSidedTrmmUVar1	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar1.hpp	/^TwoSidedTrmmUVar1$/;"	f	namespace:elem::internal
TwoSidedTrmmUVar1	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar1.hpp	/^TwoSidedTrmmUVar1( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
TwoSidedTrmmUVar2	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar2.hpp	/^TwoSidedTrmmUVar2$/;"	f	namespace:elem::internal
TwoSidedTrmmUVar2	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar2.hpp	/^TwoSidedTrmmUVar2( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
TwoSidedTrmmUVar4	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar4.hpp	/^TwoSidedTrmmUVar4$/;"	f	namespace:elem::internal
TwoSidedTrmmUVar4	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar4.hpp	/^TwoSidedTrmmUVar4( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
TwoSidedTrmmUVar5	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar5.hpp	/^TwoSidedTrmmUVar5$/;"	f	namespace:elem::internal
TwoSidedTrmmUVar5	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar5.hpp	/^TwoSidedTrmmUVar5( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
TwoSidedTrsm	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm.hpp	/^TwoSidedTrsm$/;"	f	namespace:elem
TwoSidedTrsm	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^void TwoSidedTrsm$/;"	f	namespace:elem::scalapack
TwoSidedTrsmLUnb	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm.hpp	/^TwoSidedTrsmLUnb( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar1.hpp	/^TwoSidedTrsmLVar1$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar1	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar1.hpp	/^TwoSidedTrsmLVar1( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar2	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar2.hpp	/^TwoSidedTrsmLVar2$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar2	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar2.hpp	/^TwoSidedTrsmLVar2( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar3	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar3.hpp	/^TwoSidedTrsmLVar3$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar3	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar3.hpp	/^TwoSidedTrsmLVar3( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar4	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar4.hpp	/^TwoSidedTrsmLVar4$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar4	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar4.hpp	/^TwoSidedTrsmLVar4( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar5	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar5.hpp	/^TwoSidedTrsmLVar5$/;"	f	namespace:elem::internal
TwoSidedTrsmLVar5	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar5.hpp	/^TwoSidedTrsmLVar5( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& L )$/;"	f	namespace:elem::internal
TwoSidedTrsmUUnb	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm.hpp	/^TwoSidedTrsmUUnb( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar1	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar1.hpp	/^TwoSidedTrsmUVar1$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar1	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar1.hpp	/^TwoSidedTrsmUVar1( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar2	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar2.hpp	/^TwoSidedTrsmUVar2$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar2	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar2.hpp	/^TwoSidedTrsmUVar2( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar3	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar3.hpp	/^TwoSidedTrsmUVar3$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar3	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar3.hpp	/^TwoSidedTrsmUVar3( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar4	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar4.hpp	/^TwoSidedTrsmUVar4$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar4	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar4.hpp	/^TwoSidedTrsmUVar4( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar5	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar5.hpp	/^TwoSidedTrsmUVar5$/;"	f	namespace:elem::internal
TwoSidedTrsmUVar5	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar5.hpp	/^TwoSidedTrsmUVar5( UnitOrNonUnit diag, Matrix<F>& A, const Matrix<F>& U )$/;"	f	namespace:elem::internal
Type	src/examples/compiler/mra-driver.hh	/^    enum Type {$/;"	g	class:Exp
Type	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  enum Type {$/;"	g	class:testing::TestPartResult
Type	src/madness/external/tinyxml/tinyxml.h	/^	int Type() const	{ return type; }$/;"	f	class:TiXmlNode
TypeId	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^typedef const void* TypeId;$/;"	t	namespace:testing::internal
TypeIdHelper	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class TypeIdHelper {$/;"	c	namespace:testing::internal
TypeKind	src/madness/external/gtest/include/gtest/gtest-printers.h	/^enum TypeKind {$/;"	g	namespace:testing::internal2
TypeList	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct TypeList {$/;"	s	namespace:testing::internal
TypeList	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct TypeList<Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing::internal
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^inline Datatype TypeMap<unsigned long long>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<Complex<double>>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<Complex<float>>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<ValueInt<Int>>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<ValueInt<double>>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<ValueInt<float>>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<ValueIntPair<Int>>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<ValueIntPair<double>>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<ValueIntPair<float>>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<byte>() { return MPI_UNSIGNED_CHAR; }$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<double>() { return MPI_DOUBLE; }$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<float>() { return MPI_FLOAT; }$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<int>() { return MPI_INT; }$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<long int>() { return MPI_LONG_INT; }$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<long long int>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<long unsigned>()$/;"	f	namespace:elem::mpi
TypeMap	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^template<> inline Datatype TypeMap<unsigned>() { return MPI_UNSIGNED; }$/;"	f	namespace:elem::mpi
TypeParameterizedTest	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class TypeParameterizedTest {$/;"	c	namespace:testing::internal
TypeParameterizedTest	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class TypeParameterizedTest<Fixture, TestSel, Types0> {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class TypeParameterizedTestCase {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class TypeParameterizedTestCase<Fixture, Templates0, Types> {$/;"	c	namespace:testing::internal
TypeWithSize	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class TypeWithSize {$/;"	c	namespace:testing::internal
TypeWithSize	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class TypeWithSize<4> {$/;"	c	namespace:testing::internal
TypeWithSize	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class TypeWithSize<8> {$/;"	c	namespace:testing::internal
TypeWithoutFormatter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class TypeWithoutFormatter {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class TypeWithoutFormatter<T, kConvertibleToInteger> {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class TypeWithoutFormatter<T, kProtobuf> {$/;"	c	namespace:testing::internal2
TypedTestCasePState	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  TypedTestCasePState() : registered_(false) {}$/;"	f	class:testing::internal::TypedTestCasePState
TypedTestCasePState	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^class GTEST_API_ TypedTestCasePState {$/;"	c	namespace:testing::internal
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types {$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<T1, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types<internal::None, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types0	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types0 {};$/;"	s	namespace:testing::internal
Types1	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types1 {$/;"	s	namespace:testing::internal
Types10	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types10 {$/;"	s	namespace:testing::internal
Types11	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types11 {$/;"	s	namespace:testing::internal
Types12	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types12 {$/;"	s	namespace:testing::internal
Types13	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types13 {$/;"	s	namespace:testing::internal
Types14	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types14 {$/;"	s	namespace:testing::internal
Types15	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types15 {$/;"	s	namespace:testing::internal
Types16	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types16 {$/;"	s	namespace:testing::internal
Types17	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types17 {$/;"	s	namespace:testing::internal
Types18	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types18 {$/;"	s	namespace:testing::internal
Types19	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types19 {$/;"	s	namespace:testing::internal
Types2	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types2 {$/;"	s	namespace:testing::internal
Types20	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types20 {$/;"	s	namespace:testing::internal
Types21	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types21 {$/;"	s	namespace:testing::internal
Types22	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types22 {$/;"	s	namespace:testing::internal
Types23	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types23 {$/;"	s	namespace:testing::internal
Types24	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types24 {$/;"	s	namespace:testing::internal
Types25	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types25 {$/;"	s	namespace:testing::internal
Types26	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types26 {$/;"	s	namespace:testing::internal
Types27	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types27 {$/;"	s	namespace:testing::internal
Types28	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types28 {$/;"	s	namespace:testing::internal
Types29	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types29 {$/;"	s	namespace:testing::internal
Types3	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types3 {$/;"	s	namespace:testing::internal
Types30	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types30 {$/;"	s	namespace:testing::internal
Types31	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types31 {$/;"	s	namespace:testing::internal
Types32	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types32 {$/;"	s	namespace:testing::internal
Types33	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types33 {$/;"	s	namespace:testing::internal
Types34	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types34 {$/;"	s	namespace:testing::internal
Types35	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types35 {$/;"	s	namespace:testing::internal
Types36	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types36 {$/;"	s	namespace:testing::internal
Types37	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types37 {$/;"	s	namespace:testing::internal
Types38	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types38 {$/;"	s	namespace:testing::internal
Types39	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types39 {$/;"	s	namespace:testing::internal
Types4	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types4 {$/;"	s	namespace:testing::internal
Types40	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types40 {$/;"	s	namespace:testing::internal
Types41	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types41 {$/;"	s	namespace:testing::internal
Types42	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types42 {$/;"	s	namespace:testing::internal
Types43	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types43 {$/;"	s	namespace:testing::internal
Types44	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types44 {$/;"	s	namespace:testing::internal
Types45	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types45 {$/;"	s	namespace:testing::internal
Types46	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types46 {$/;"	s	namespace:testing::internal
Types47	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types47 {$/;"	s	namespace:testing::internal
Types48	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types48 {$/;"	s	namespace:testing::internal
Types49	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types49 {$/;"	s	namespace:testing::internal
Types5	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types5 {$/;"	s	namespace:testing::internal
Types50	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types50 {$/;"	s	namespace:testing::internal
Types6	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types6 {$/;"	s	namespace:testing::internal
Types7	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types7 {$/;"	s	namespace:testing::internal
Types8	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types8 {$/;"	s	namespace:testing::internal
Types9	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^struct Types9 {$/;"	s	namespace:testing::internal
U	src/apps/chem/electronic_correlation_factor.h	/^        U(double gamma, int axis, double dcut) : gamma(gamma), axis(axis),$/;"	f	struct:madness::CorrelationFactor::U
U	src/apps/chem/electronic_correlation_factor.h	/^    struct U : FunctionFunctorInterface<double,6>  {$/;"	s	class:madness::CorrelationFactor
U	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/U.hpp	/^U( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& tP, DistMatrix<F,STAR,STAR>& tQ )$/;"	f	namespace:elem::bidiag
U	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/U.hpp	/^inline void U( Matrix<F>& A, Matrix<F>& tP, Matrix<F>& tQ )$/;"	f	namespace:elem::bidiag
U	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/U.hpp	/^inline void U( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& t )$/;"	f	namespace:elem::hessenberg
U	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/U.hpp	/^inline void U( Matrix<F>& A, Matrix<F>& t )$/;"	f	namespace:elem::hessenberg
U	src/madness/external/elemental/src/lapack-like/HermitianTridiag/U.hpp	/^void U( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& t )$/;"	f	namespace:elem::herm_tridiag
U	src/madness/external/elemental/src/lapack-like/HermitianTridiag/U.hpp	/^void U( Matrix<F>& A, Matrix<F>& t )$/;"	f	namespace:elem::herm_tridiag
U	src/madness/mra/operator.h	/^            const Q* U;         \/\/ Ptr to matrix$/;"	m	struct:madness::SeparatedConvolution::Transformation
U1	src/apps/chem/correlationfactor.h	/^	virtual const real_function_3d U1(const int axis) const {$/;"	f	class:madness::NuclearCorrelationFactor
U1	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d U1(const int axis) const {$/;"	f	class:madness::CorrelationFactor
U1	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d U1(const int axis) const {$/;"	f	class:madness::CorrelationFactor2
U1X_functor	src/apps/chem/correlationfactor.h	/^        U1X_functor(const NuclearCorrelationFactor* ncf, const Atom& atom1,$/;"	f	class:madness::NuclearCorrelationFactor::U1X_functor
U1X_functor	src/apps/chem/correlationfactor.h	/^        U1X_functor(const NuclearCorrelationFactor* ncf, const int iatom,$/;"	f	class:madness::NuclearCorrelationFactor::U1X_functor
U1X_functor	src/apps/chem/correlationfactor.h	/^    class U1X_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
U1_atomic_functor	src/apps/chem/correlationfactor.h	/^        U1_atomic_functor(const NuclearCorrelationFactor* ncf, const size_t atom,$/;"	f	class:madness::NuclearCorrelationFactor::U1_atomic_functor
U1_atomic_functor	src/apps/chem/correlationfactor.h	/^    class U1_atomic_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
U1_dot_U1_functor	src/apps/chem/correlationfactor.h	/^        U1_dot_U1_functor(const NuclearCorrelationFactor* ncf) : ncf(ncf) {}$/;"	f	class:madness::NuclearCorrelationFactor::U1_dot_U1_functor
U1_dot_U1_functor	src/apps/chem/correlationfactor.h	/^    class U1_dot_U1_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
U1_function	src/apps/chem/correlationfactor.h	/^	std::vector<real_function_3d> U1_function;$/;"	m	class:madness::NuclearCorrelationFactor
U1_functor	src/apps/chem/correlationfactor.h	/^		U1_functor(const NuclearCorrelationFactor* ncf, const int axis)$/;"	f	class:madness::NuclearCorrelationFactor::U1_functor
U1_functor	src/apps/chem/correlationfactor.h	/^	class U1_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
U1_functor	src/apps/chem/electronic_correlation_factor.h	/^        U1_functor(double gamma, int axis) : gamma(gamma), axis(axis) {$/;"	f	class:madness::CorrelationFactor2::U1_functor
U1_functor	src/apps/chem/electronic_correlation_factor.h	/^    class U1_functor : public FunctionFunctorInterface<double,6> {$/;"	c	class:madness::CorrelationFactor2
U1axis	src/apps/chem/correlationfactor.h	/^        const int U1axis;           \/\/\/ U1x\/U1y\/U1z potential?$/;"	m	class:madness::NuclearCorrelationFactor::U1X_functor
U1vec	src/apps/chem/correlationfactor.h	/^	std::vector<real_function_3d> U1vec() const {$/;"	f	class:madness::NuclearCorrelationFactor
U2	src/apps/chem/correlationfactor.h	/^	const real_function_3d U2() const {$/;"	f	class:madness::PseudoNuclearCorrelationFactor
U2	src/apps/chem/correlationfactor.h	/^	virtual const real_function_3d U2() const  {return U2_function;}$/;"	f	class:madness::NuclearCorrelationFactor
U2	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d U2() const {$/;"	f	class:madness::CorrelationFactor
U2	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d U2() const {$/;"	f	class:madness::CorrelationFactor2
U2X_functor	src/apps/chem/correlationfactor.h	/^        U2X_functor(const NuclearCorrelationFactor* ncf, const int& atom1,$/;"	f	class:madness::NuclearCorrelationFactor::U2X_functor
U2X_functor	src/apps/chem/correlationfactor.h	/^    class U2X_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
U2X_spherical	src/apps/chem/correlationfactor.h	/^    double U2X_spherical(const double& r, const double& Z, const double& rcut) const {$/;"	f	class:madness::GaussSlater
U2X_spherical	src/apps/chem/correlationfactor.h	/^    double U2X_spherical(const double& r, const double& Z, const double& rcut) const {$/;"	f	class:madness::GradientalGaussSlater
U2X_spherical	src/apps/chem/correlationfactor.h	/^    double U2X_spherical(const double& r, const double& Z, const double& rcut) const {$/;"	f	class:madness::Polynomial
U2X_spherical	src/apps/chem/correlationfactor.h	/^    double U2X_spherical(const double& r, const double& Z, const double& rcut) const {$/;"	f	class:madness::PseudoNuclearCorrelationFactor
U2X_spherical	src/apps/chem/correlationfactor.h	/^    double U2X_spherical(const double& r, const double& Z, const double& rcut) const {$/;"	f	class:madness::Slater
U2X_spherical	src/apps/chem/correlationfactor.h	/^    double U2X_spherical(const double& r, const double& Z, const double& rcut) const {$/;"	f	class:madness::poly4erfc
U2X_spherical	src/apps/chem/correlationfactor.h	/^    virtual double U2X_spherical(const double& r, const double& Z, const double& rcut) const {$/;"	f	class:madness::NuclearCorrelationFactor
U2_atomic_functor	src/apps/chem/correlationfactor.h	/^        U2_atomic_functor(const NuclearCorrelationFactor* ncf, const size_t atom)$/;"	f	class:madness::NuclearCorrelationFactor::U2_atomic_functor
U2_atomic_functor	src/apps/chem/correlationfactor.h	/^    class U2_atomic_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
U2_function	src/apps/chem/correlationfactor.h	/^	real_function_3d U2_function;$/;"	m	class:madness::NuclearCorrelationFactor
U2_functor	src/apps/chem/correlationfactor.h	/^		U2_functor(const NuclearCorrelationFactor* ncf) : ncf(ncf) {}$/;"	f	class:madness::NuclearCorrelationFactor::U2_functor
U2_functor	src/apps/chem/correlationfactor.h	/^	class U2_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
U2_functor	src/apps/chem/electronic_correlation_factor.h	/^        U2_functor(double gamma) : gamma(gamma) {$/;"	f	class:madness::CorrelationFactor2::U2_functor
U2_functor	src/apps/chem/electronic_correlation_factor.h	/^    class U2_functor : public FunctionFunctorInterface<double,6> {$/;"	c	class:madness::CorrelationFactor2
U3X_functor	src/apps/chem/correlationfactor.h	/^        U3X_functor(const NuclearCorrelationFactor* ncf, const size_t iatom,$/;"	f	class:madness::NuclearCorrelationFactor::U3X_functor
U3X_functor	src/apps/chem/correlationfactor.h	/^    class U3X_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
U3_atomic_functor	src/apps/chem/correlationfactor.h	/^        U3_atomic_functor(const NuclearCorrelationFactor* ncf, const int atom)$/;"	f	class:madness::NuclearCorrelationFactor::U3_atomic_functor
U3_atomic_functor	src/apps/chem/correlationfactor.h	/^    class U3_atomic_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
U3_functor	src/apps/chem/correlationfactor.h	/^		U3_functor(const NuclearCorrelationFactor* ncf) : ncf(ncf) {}$/;"	f	class:madness::NuclearCorrelationFactor::U3_functor
U3_functor	src/apps/chem/correlationfactor.h	/^	class U3_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
UCP	src/madness/external/elemental/src/core/imports/mpi.cpp	/^typedef unsigned char* UCP;$/;"	t	file:
UDiag	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    static constexpr Dist UDiag = DiagColDist<U,V>();$/;"	m	class:elem::GeneralBlockDistMatrix
UDiag	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    static constexpr Dist UDiag = DiagColDist<U,V>();$/;"	m	class:elem::GeneralDistMatrix
UDowndate	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	/^UDowndate( DistMatrix<F>& U, DistMatrix<F>& V )$/;"	f	namespace:elem::cholesky::mod
UDowndate	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	/^UDowndate( Matrix<F>& U, Matrix<F>& V )$/;"	f	namespace:elem::cholesky::mod
UGath	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    static constexpr Dist UGath = GatheredDist<U>();$/;"	m	class:elem::GeneralBlockDistMatrix
UGath	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    static constexpr Dist UGath = GatheredDist<U>();$/;"	m	class:elem::GeneralDistMatrix
UInt	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef unsigned __int64 UInt;$/;"	t	class:testing::internal::TypeWithSize
UInt	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef unsigned int UInt;$/;"	t	class:testing::internal::TypeWithSize
UInt	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef void UInt;$/;"	t	class:testing::internal::TypeWithSize
UInt32	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<4>::UInt UInt32;$/;"	t	namespace:testing::internal
UInt64	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<8>::UInt UInt64;$/;"	t	namespace:testing::internal
UMod	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	/^UMod( DistMatrix<F>& U, Base<F> alpha, DistMatrix<F>& V )$/;"	f	namespace:elem::cholesky
UMod	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	/^UMod( Matrix<F>& U, Base<F> alpha, Matrix<F>& V )$/;"	f	namespace:elem::cholesky
UN	src/madness/external/elemental/include/elemental/lapack-like/solve/MultiShiftHessSolve.hpp	/^UN$/;"	f	namespace:elem::mshs
UN	src/madness/external/elemental/include/elemental/lapack-like/solve/MultiShiftHessSolve.hpp	/^UN( F alpha, const Matrix<F>& H, const Matrix<F>& shifts, Matrix<F>& X ) $/;"	f	namespace:elem::mshs
UNARYITERATOR	src/madness/tensor/tensor_macros.h	346;"	d
UNARYITERATOR1	src/madness/tensor/tensor_macros.h	262;"	d
UNARYITERATOR2	src/madness/tensor/tensor_macros.h	270;"	d
UNARYITERATOR3	src/madness/tensor/tensor_macros.h	280;"	d
UNARYITERATOR4	src/madness/tensor/tensor_macros.h	292;"	d
UNARYITERATOR5	src/madness/tensor/tensor_macros.h	308;"	d
UNARYITERATOR6	src/madness/tensor/tensor_macros.h	326;"	d
UNARY_OPTIMIZED_ITERATOR	src/madness/tensor/tensor_macros.h	658;"	d
UNARY_UNOPTIMIZED_ITERATOR	src/madness/tensor/tensor_macros.h	678;"	d
UNARY_UNOPTIMIZED_ITERATOR_NESTED	src/madness/tensor/tensor_macros.h	691;"	d
UNCONJUGATED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    UNCONJUGATED,$/;"	e	enum:elem::ConjugationNS::Conjugation
UNDEFINED	src/apps/chem/CCStructures.h	/^  enum FuncType {UNDEFINED,HOLE,PARTICLE,MIXED,RESPONSE};$/;"	e	enum:madness::FuncType
UNDEFINED	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^const int UNDEFINED = MPI_UNDEFINED;$/;"	m	namespace:elem::mpi
UNDEFINED_COLOR	src/madness/world/safempi.h	/^        static const int UNDEFINED_COLOR = MPI_UNDEFINED;$/;"	m	class:SafeMPI::Intracomm
UNDEFINED_SPLIT_TYPE	src/madness/world/safempi.h	/^      static const int UNDEFINED_SPLIT_TYPE = MPI_UNDEFINED;$/;"	m	class:SafeMPI::Intracomm
UNIT	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    UNIT$/;"	e	enum:elem::UnitOrNonUnitNS::UnitOrNonUnit
UNITARY	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    UNITARY,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
UNKNOWN	src/examples/compiler/mra-driver.hh	/^        UNKNOWN$/;"	e	enum:Exp::Type
UNKNOWN	src/madness/external/tinyxml/tinyxml.h	/^		UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
UNKNOWN_ENERGYTYPE	src/apps/chem/PNOParameters.h	/^enum EnergyType{PROJECTED_ENERGYTYPE,HYLLERAAS_ENERGYTYPE,UNKNOWN_ENERGYTYPE};$/;"	e	enum:madness::EnergyType
UNKNOWN_GUESSTYPE	src/apps/chem/PNOParameters.h	/^enum GuessType{PARTIAL_WAVE_GUESSTYPE,FROM_FILE_GUESSTYPE,PREDEFINED_GUESSTYPE,SCF_GUESSTYPE,EXOP_GUESSTYPE,EMPTY_GUESSTYPE,PSI4_GUESSTYPE,UNKNOWN_GUESSTYPE};$/;"	e	enum:madness::GuessType
UNKNOWN_PAIRTYPE	src/apps/chem/PNOParameters.h	/^enum PairType{MP2_PAIRTYPE,CISPD_PAIRTYPE,ALL_PAIRTYPE,NONE_PAIRTYPE,UNKNOWN_PAIRTYPE};$/;"	e	enum:madness::PairType
UNLOCKED	src/madness/world/worldmutex.h	/^        enum {UNLOCKED, LOCKED};$/;"	e	enum:madness::MutexReaderWriter::__anon2
UNSORTED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    UNSORTED,$/;"	e	enum:elem::SortTypeNS::SortType
UNSPECIFIED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    UNSPECIFIED,$/;"	e	enum:elem::MatrixClassNS::MatrixClass
UPPER	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    UPPER$/;"	e	enum:elem::UpperOrLowerNS::UpperOrLower
UPan	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UPan.hpp	/^UPan$/;"	f	namespace:elem::bidiag
UPan	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UPan.hpp	/^UPan( Matrix<F>& A, Matrix<F>& tP, Matrix<F>& tQ, Matrix<F>& X, Matrix<F>& Y )$/;"	f	namespace:elem::bidiag
UPan	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/UPan.hpp	/^inline void UPan$/;"	f	namespace:elem::hessenberg
UPan	src/madness/external/elemental/src/lapack-like/HermitianTridiag/UPan.hpp	/^void UPan$/;"	f	namespace:elem::herm_tridiag
UPanSquare	src/madness/external/elemental/src/lapack-like/HermitianTridiag/UPanSquare.hpp	/^void UPanSquare$/;"	f	namespace:elem::herm_tridiag
UPanelPivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Pivoted.hpp	/^UPanelPivoted$/;"	f	namespace:elem::cholesky
UPart	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    static constexpr Dist UPart = PartialDist<U>();$/;"	m	class:elem::GeneralBlockDistMatrix
UPart	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    static constexpr Dist UPart = PartialDist<U>();$/;"	m	class:elem::GeneralDistMatrix
URL	cmake/Makefile	/^URL := https:\/\/cmake.org\/files\/v3.5\/$(CMAKE).tar.gz$/;"	m
USE_LRT	src/madness/tensor/gentensor.h	121;"	d
USE_LRT	src/madness/tensor/gentensor.h	123;"	d
USE_SPINLOCKS	build/src/madness/config.h	110;"	d
UScat	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    static constexpr Dist UScat = ScatteredColDist<U,V>();$/;"	m	class:elem::GeneralBlockDistMatrix
UScat	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    static constexpr Dist UScat = ScatteredColDist<U,V>();$/;"	m	class:elem::GeneralDistMatrix
USquare	src/madness/external/elemental/src/lapack-like/HermitianTridiag/USquare.hpp	/^void USquare( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& t )$/;"	f	namespace:elem::herm_tridiag
UTIL_H_	src/apps/hf/util.h	33;"	d
UUnb	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UUnb.hpp	/^inline void UUnb$/;"	f	namespace:elem::bidiag
UUnb	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UUnb.hpp	/^inline void UUnb( Matrix<F>& A, Matrix<F>& tP, Matrix<F>& tQ )$/;"	f	namespace:elem::bidiag
UUnb	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/UUnb.hpp	/^inline void UUnb( DistMatrix<F>& A, DistMatrix<F,STAR,STAR>& t )$/;"	f	namespace:elem::hessenberg
UUnb	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/UUnb.hpp	/^inline void UUnb( Matrix<F>& A, Matrix<F>& t )$/;"	f	namespace:elem::hessenberg
UUnblockedPivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Pivoted.hpp	/^UUnblockedPivoted( DistMatrix<F>& A, DistMatrix<Int,UPerm,STAR>& pPerm )$/;"	f	namespace:elem::cholesky
UUnblockedPivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Pivoted.hpp	/^UUnblockedPivoted( Matrix<F>& A, Matrix<Int>& pPerm )$/;"	f	namespace:elem::cholesky
UUpdate	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	/^UUpdate( DistMatrix<F>& U, DistMatrix<F>& V )$/;"	f	namespace:elem::cholesky::mod
UUpdate	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	/^UUpdate( Matrix<F>& U, Matrix<F>& V )$/;"	f	namespace:elem::cholesky::mod
UVar2	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar2.hpp	/^UVar2( DistMatrix<F>& A )$/;"	f	namespace:elem::cholesky
UVar2	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar2.hpp	/^UVar2( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
UVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3.hpp	/^UVar3( DistMatrix<F>& A )$/;"	f	namespace:elem::cholesky
UVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3.hpp	/^UVar3( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
UVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Pivoted.hpp	/^UVar3( DistMatrix<F>& A, DistMatrix<Int,UPerm,STAR>& pPerm )$/;"	f	namespace:elem::cholesky
UVar3	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Pivoted.hpp	/^UVar3( Matrix<F>& A, Matrix<Int>& pPerm )$/;"	f	namespace:elem::cholesky
UVar3	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/UVar3.hpp	/^UVar3( UnitOrNonUnit diag, DistMatrix<F>& U )$/;"	f	namespace:elem::triang_inv
UVar3	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/UVar3.hpp	/^UVar3( UnitOrNonUnit diag, Matrix<F>& U )$/;"	f	namespace:elem::triang_inv
UVar3Square	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Square.hpp	/^UVar3Square( DistMatrix<F>& A )$/;"	f	namespace:elem::cholesky
UVar3Unb	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3.hpp	/^UVar3Unb( Matrix<F>& A )$/;"	f	namespace:elem::cholesky
UVar3Unb	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/UVar3.hpp	/^UVar3Unb( UnitOrNonUnit diag, Matrix<F>& U )$/;"	f	namespace:elem::triang_inv
Uabinit	src/apps/polar/moldft.cc	/^    functionT Uabinit;$/;"	m	struct:Calculation	file:
UnaryGenTest	src/madness/mra/test_mra6.cc	/^		UnaryGenTest() {$/;"	f	class:__anon12::UnaryGenTest
UnaryGenTest	src/madness/mra/test_mra6.cc	/^    class UnaryGenTest : public ::testing::TestWithParam<std::tr1::tuple<$/;"	c	namespace:__anon12	file:
UnaryGenTest	src/madness/tensor/test_gentensor.cc	/^		UnaryGenTest() {$/;"	f	class:__anon43::UnaryGenTest
UnaryGenTest	src/madness/tensor/test_gentensor.cc	/^    class UnaryGenTest : public ::testing::TestWithParam<std::tr1::tuple<$/;"	c	namespace:__anon43	file:
UnaryMinus	src/madness/external/muParser/muParser.cpp	/^  value_type Parser::UnaryMinus(value_type v) $/;"	f	class:mu::Parser
UnaryOpStructure	src/apps/chem/AC.h	/^	UnaryOpStructure(const std::shared_ptr<FunctionFunctorInterface<double,NDIM> > f_, const std::shared_ptr<FunctionFunctorInterface<double,NDIM> > f2_) :$/;"	f	struct:madness::UnaryOpStructure
UnaryOpStructure	src/apps/chem/AC.h	/^struct UnaryOpStructure {$/;"	s	namespace:madness
Unb	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Local.hpp	/^Unb( Matrix<F>& A )$/;"	f	namespace:elem::lu
UnbFLAME	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Local.hpp	/^UnbFLAME( Matrix<F>& A )$/;"	f	namespace:elem::lu
UnblockedPivoted	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^UnblockedPivoted$/;"	f	namespace:elem::ldl
Uniform	src/madness/external/elemental/include/elemental/matrices/Uniform.hpp	/^Uniform( BlockDistMatrix<T,U,V>& A, Int m, Int n, T center=0, Base<T> radius=1 )$/;"	f	namespace:elem
Uniform	src/madness/external/elemental/include/elemental/matrices/Uniform.hpp	/^Uniform( DistMatrix<T,U,V>& A, Int m, Int n, T center=0, Base<T> radius=1 )$/;"	f	namespace:elem
Uniform	src/madness/external/elemental/include/elemental/matrices/Uniform.hpp	/^Uniform( Matrix<T>& A, Int m, Int n, T center=0, Base<T> radius=1 )$/;"	f	namespace:elem
UniformHelmholtzGreens	src/madness/external/elemental/include/elemental/matrices/UniformHelmholtzGreens.hpp	/^UniformHelmholtzGreens$/;"	f	namespace:elem
UniformHelmholtzGreens	src/madness/external/elemental/include/elemental/matrices/UniformHelmholtzGreens.hpp	/^UniformHelmholtzGreens( DistMatrix<Complex<Real>,U,V>& A, Int n, Real lambda )$/;"	f	namespace:elem
UniformHelmholtzGreens	src/madness/external/elemental/include/elemental/matrices/UniformHelmholtzGreens.hpp	/^UniformHelmholtzGreens( Matrix<Complex<Real>>& A, Int n, Real lambda )$/;"	f	namespace:elem
Union	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Union( Group groupA, Group groupB, Group& newGroup )$/;"	f	namespace:elem::mpi
UnitCell	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^inline T UnitCell()$/;"	f	namespace:elem
UnitOrNonUnit	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum UnitOrNonUnit$/;"	g	namespace:elem::UnitOrNonUnitNS
UnitOrNonUnitNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace UnitOrNonUnitNS {$/;"	n	namespace:elem
UnitOrNonUnitNS	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^namespace UnitOrNonUnitNS {$/;"	n	namespace:elem
UnitOrNonUnitToChar	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^UnitOrNonUnitToChar( UnitOrNonUnit diag )$/;"	f	namespace:elem::UnitOrNonUnitNS
UnitTest	src/madness/external/gtest/include/gtest/gtest.h	/^class GTEST_API_ UnitTest {$/;"	c	namespace:testing
UnitTest	src/madness/external/gtest/src/gtest.cc	/^UnitTest::UnitTest() {$/;"	f	class:testing::UnitTest
UnitTestImpl	src/madness/external/gtest/src/gtest-internal-inl.h	/^class GTEST_API_ UnitTestImpl {$/;"	c	namespace:testing::internal
UnitTestImpl	src/madness/external/gtest/src/gtest.cc	/^UnitTestImpl::UnitTestImpl(UnitTest* parent)$/;"	f	class:testing::internal::UnitTestImpl
UnitTestOptions	src/madness/external/gtest/src/gtest-internal-inl.h	/^class GTEST_API_ UnitTestOptions {$/;"	c	namespace:testing::internal
UniversalPrint	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void UniversalPrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	src/madness/external/gtest/src/gtest-printers.cc	/^void UniversalPrintArray(const char* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	src/madness/external/gtest/src/gtest-printers.cc	/^void UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintCharArray	src/madness/external/gtest/src/gtest-printers.cc	/^static void UniversalPrintCharArray($/;"	f	namespace:testing::internal
UniversalPrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalPrinter {$/;"	c	namespace:testing::internal
UniversalPrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalPrinter<T&> {$/;"	c	namespace:testing::internal
UniversalPrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalPrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrint	src/madness/external/gtest/include/gtest/gtest-printers.h	/^void UniversalTersePrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrintTupleFieldsToStrings	src/madness/external/gtest/include/gtest/gtest-printers.h	/^Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {$/;"	f	namespace:testing::internal
UniversalTersePrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalTersePrinter {$/;"	c	namespace:testing::internal
UniversalTersePrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalTersePrinter<T&> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalTersePrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalTersePrinter<char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalTersePrinter<const char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalTersePrinter<const wchar_t*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	src/madness/external/gtest/include/gtest/gtest-printers.h	/^class UniversalTersePrinter<wchar_t*> {$/;"	c	namespace:testing::internal
Unknown	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlUnknown* Unknown() const	{ return ToUnknown(); }$/;"	f	class:TiXmlHandle
Unlock	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void Unlock() {$/;"	f	class:testing::internal::MutexBase
Unlock	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void Unlock() {}$/;"	f	class:testing::internal::Mutex
UnshuffleTests	src/madness/external/gtest/src/gtest.cc	/^void TestCase::UnshuffleTests() {$/;"	f	class:testing::TestCase
UnshuffleTests	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::UnshuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
Unsigned	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^typedef long long unsigned Unsigned;$/;"	t	namespace:elem
Unsigned	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^typedef unsigned Unsigned;$/;"	t	namespace:elem
Uop	src/examples/binaryop.cc	/^struct Uop {$/;"	s	file:
Update	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::Update( Int i, Int j, T value )$/;"	f	class:elem::AbstractBlockDistMatrix
Update	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::Update( Int i, Int j, T value )$/;"	f	class:elem::AbstractDistMatrix
Update	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::Update( Int i, Int j, T alpha ) $/;"	f	class:elem::Matrix
UpdateDiagonal	src/madness/external/elemental/include/elemental/blas-like/level1/UpdateDiagonal.hpp	/^UpdateDiagonal$/;"	f	namespace:elem
UpdateDiagonal	src/madness/external/elemental/include/elemental/blas-like/level1/UpdateDiagonal.hpp	/^UpdateDiagonal( DistMatrix<T,U,V>& A, S alpha )$/;"	f	namespace:elem
UpdateDiagonal	src/madness/external/elemental/include/elemental/blas-like/level1/UpdateDiagonal.hpp	/^UpdateDiagonal( Matrix<T>& A, S alpha )$/;"	f	namespace:elem
UpdateDiagonal	src/madness/external/elemental/include/elemental/blas-like/level1/UpdateDiagonal.hpp	/^UpdateDiagonal( Matrix<T>& A, S alpha, Int offset, LeftOrRight side=LEFT )$/;"	f	namespace:elem
UpdateDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::UpdateDiagonal$/;"	f	class:elem::GeneralBlockDistMatrix
UpdateDiagonal	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::UpdateDiagonal$/;"	f	class:elem::GeneralDistMatrix
UpdateDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::UpdateDiagonal( const Matrix<T>& d, Int offset )$/;"	f	class:elem::Matrix
UpdateImagPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^UpdateImagPart( Complex<Real>& alpha, const Real& beta )$/;"	f	namespace:elem
UpdateImagPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^UpdateImagPart( Real& alpha, const Real& beta )$/;"	f	namespace:elem
UpdateImagPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateImagPart( Int i, Int j, Base<T> value )$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateImagPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateImagPart( Int i, Int j, Base<T> value )$/;"	f	class:elem::AbstractDistMatrix
UpdateImagPart	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::UpdateImagPart( Int i, Int j, Base<T> alpha )$/;"	f	class:elem::Matrix
UpdateImagPartOfDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::UpdateImagPartOfDiagonal$/;"	f	class:elem::GeneralBlockDistMatrix
UpdateImagPartOfDiagonal	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::UpdateImagPartOfDiagonal$/;"	f	class:elem::GeneralDistMatrix
UpdateImagPartOfDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::UpdateImagPartOfDiagonal( const Matrix<Base<T>>& d, Int offset )$/;"	f	class:elem::Matrix
UpdateImagPartOfLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateImagPartOfLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateImagPartOfLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateImagPartOfLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
UpdateImagPartOfSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateImagPartOfSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateImagPartOfSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateImagPartOfSubmatrix$/;"	f	class:elem::AbstractDistMatrix
UpdateImagPartOfSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::UpdateImagPartOfSubmatrix$/;"	f	class:elem::Matrix
UpdateList	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	/^UpdateList$/;"	f	namespace:elem::pspec
UpdateLocal	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateLocal( Int iLoc, Int jLoc, T alpha )$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateLocal	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateLocal( Int iLoc, Int jLoc, T alpha )$/;"	f	class:elem::AbstractDistMatrix
UpdateLocalImagPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateLocalImagPart$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateLocalImagPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateLocalImagPart$/;"	f	class:elem::AbstractDistMatrix
UpdateLocalRealPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateLocalRealPart$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateLocalRealPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateLocalRealPart$/;"	f	class:elem::AbstractDistMatrix
UpdateLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
UpdateMaxImagWindowVal	src/madness/external/elemental/src/core/global.cpp	/^void UpdateMaxImagWindowVal( double maxVal )$/;"	f	namespace:elem
UpdateMaxRealWindowVal	src/madness/external/elemental/src/core/global.cpp	/^void UpdateMaxRealWindowVal( double maxVal )$/;"	f	namespace:elem
UpdateMinImagWindowVal	src/madness/external/elemental/src/core/global.cpp	/^void UpdateMinImagWindowVal( double minVal )$/;"	f	namespace:elem
UpdateMinRealWindowVal	src/madness/external/elemental/src/core/global.cpp	/^void UpdateMinRealWindowVal( double minVal )$/;"	f	namespace:elem
UpdateRealPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^UpdateRealPart( Complex<Real>& alpha, const Real& beta )$/;"	f	namespace:elem
UpdateRealPart	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^UpdateRealPart( Real& alpha, const Real& beta )$/;"	f	namespace:elem
UpdateRealPart	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateRealPart( Int i, Int j, Base<T> value )$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateRealPart	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateRealPart( Int i, Int j, Base<T> value )$/;"	f	class:elem::AbstractDistMatrix
UpdateRealPart	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::UpdateRealPart( Int i, Int j, Base<T> alpha )$/;"	f	class:elem::Matrix
UpdateRealPartOfDiagonal	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::UpdateRealPartOfDiagonal$/;"	f	class:elem::GeneralBlockDistMatrix
UpdateRealPartOfDiagonal	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::UpdateRealPartOfDiagonal$/;"	f	class:elem::GeneralDistMatrix
UpdateRealPartOfDiagonal	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::UpdateRealPartOfDiagonal( const Matrix<Base<T>>& d, Int offset )$/;"	f	class:elem::Matrix
UpdateRealPartOfLocalSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateRealPartOfLocalSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateRealPartOfLocalSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateRealPartOfLocalSubmatrix$/;"	f	class:elem::AbstractDistMatrix
UpdateRealPartOfSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateRealPartOfSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateRealPartOfSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateRealPartOfSubmatrix$/;"	f	class:elem::AbstractDistMatrix
UpdateRealPartOfSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::UpdateRealPartOfSubmatrix$/;"	f	class:elem::Matrix
UpdateRequestStatuses	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::UpdateRequestStatuses()$/;"	f	class:elem::AxpyInterface
UpdateSubmatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::UpdateSubmatrix$/;"	f	class:elem::AbstractBlockDistMatrix
UpdateSubmatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::UpdateSubmatrix$/;"	f	class:elem::AbstractDistMatrix
UpdateSubmatrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::UpdateSubmatrix$/;"	f	class:elem::Matrix
UpperClip	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^UpperClip( BlockDistMatrix<Real,U,V>& X, Real upperBound=0 )$/;"	f	namespace:elem
UpperClip	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^UpperClip( DistMatrix<Real,U,V>& X, Real upperBound=0 )$/;"	f	namespace:elem
UpperClip	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^UpperClip( Matrix<Real>& X, Real upperBound=0 )$/;"	f	namespace:elem
UpperOrLower	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum UpperOrLower$/;"	g	namespace:elem::UpperOrLowerNS
UpperOrLowerNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace UpperOrLowerNS {$/;"	n	namespace:elem
UpperOrLowerNS	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^namespace UpperOrLowerNS {$/;"	n	namespace:elem
UpperOrLowerToChar	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^UpperOrLowerToChar( UpperOrLower uplo )$/;"	f	namespace:elem::UpperOrLowerNS
UrlEncode	src/madness/external/gtest/src/gtest.cc	/^string StreamingListener::UrlEncode(const char* str) {$/;"	f	class:testing::internal::StreamingListener
User and simulation coordinates	doc/Latex/implementation.tex	/^\\section{User and simulation coordinates}$/;"	s
UserFunction	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^typedef MPI_User_function UserFunction;$/;"	t	namespace:elem::mpi
UserThreadFunc	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef void (*UserThreadFunc)(T);$/;"	t	class:testing::internal::ThreadWithParam
Utf16ToAnsi	src/madness/external/gtest/src/gtest.cc	/^const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {$/;"	f	class:testing::internal::String
V	src/apps/chem/PNO.h	/^	Nuclear V;$/;"	m	class:madness::PNO
V	src/apps/chem/SCFOperators.h	/^    Nuclear V;$/;"	m	class:madness::Fock
V	src/apps/ii/hatom_energy.cc	/^double V(const Vector<double,3>& r) {$/;"	f
V	src/apps/nick/extra.cc	/^complexd V(const vector3D& r) {$/;"	f
V	src/apps/nick/tdse1.cc	/^static double V(const coordT& r) {$/;"	f	file:
V	src/apps/tdse/tdse.cc	/^static double V(const coordT& r) {$/;"	f	file:
V	src/apps/tdse/tdse.confused.cc	/^static double V(const coordT& r) {$/;"	f	file:
V	src/examples/h2.cc	/^static double V(const coord_3d& r) {$/;"	f	file:
V	src/examples/h2dft.cc	/^static double V(const coord_3d& r) {$/;"	f	file:
V	src/examples/h2dynamic.cc	/^static double V(const coord_3d& r) {$/;"	f	file:
V	src/examples/hatom_1d.cc	/^static double V(const coord_1d& r) {$/;"	f	file:
V	src/examples/hatom_energy.cc	/^double V(const Vector<double,3>& r) {$/;"	f
V	src/examples/he.cc	/^static double V(const coord_6d& r) {$/;"	f	file:
V	src/examples/hedft.cc	/^static double V(const coord_3d& r) {$/;"	f	file:
V	src/examples/hehf.cc	/^static double V(const coord_3d& r) {$/;"	f	file:
V	src/examples/helium_mp2.cc	/^static double V(const coord_3d& r) {$/;"	f	file:
V	src/examples/helium_mp2.cc	/^static double V(const coord_6d& r) {$/;"	f	file:
V	src/examples/newsolver.cc	/^static double V(const coord_3d& r) {$/;"	f	file:
V	src/examples/newsolver_lda.cc	/^static double V(const coord_3d& r) {$/;"	f	file:
V	src/examples/takeshi_response.cc	/^static double V(const coord_3d& r){$/;"	f	file:
V	src/examples/tdse1d.cc	/^double V(const coord_1d& r) {$/;"	f
V	src/examples/tdse_example.cc	/^static double V(const coordT& r) {$/;"	f	file:
V	src/examples/vnucso.cc	/^static double V(const coordT& r)$/;"	f	file:
V	src/madness/mra/test6.cc	/^static double V(const Vector<double,3>& r) {$/;"	f	file:
V	src/madness/mra/testqm.cc	/^double_complex V(const coord_1d& r) {$/;"	f
V1	src/examples/vnucso.cc	/^const double V1 = -50.0*reduced;   \/\/ potential parameter$/;"	v
V2	src/examples/vnucso.cc	/^const double V2 = -50.0*reduced;   \/\/ potential parameter$/;"	v
VC	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    VC,   \/\/ Col-major vector distribution$/;"	e	enum:elem::DistNS::Dist
VCComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::VCComm()     const { return vectorColComm_;      }$/;"	f	class:elem::Grid
VCRank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::VCRank() const { return mpi::Rank(vectorColComm_); }$/;"	f	class:elem::Grid
VCSize	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::VCSize() const { return size_;         }$/;"	f	class:elem::Grid
VCToViewingMap	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::VCToViewingMap( int VCRank ) const$/;"	f	class:elem::Grid
VDiag	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    static constexpr Dist VDiag = DiagRowDist<U,V>();$/;"	m	class:elem::GeneralBlockDistMatrix
VDiag	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    static constexpr Dist VDiag = DiagRowDist<U,V>();$/;"	m	class:elem::GeneralDistMatrix
VERIFY_TREE	src/madness/mra/mra.h	/^static const bool VERIFY_TREE = false; \/\/true$/;"	v
VERSION	src/madness/madness_config.h	50;"	d
VERTICAL	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    VERTICAL,$/;"	e	enum:elem::VerticalOrHorizontalNS::VerticalOrHorizontal
VGath	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    static constexpr Dist VGath = GatheredDist<V>();$/;"	m	class:elem::GeneralBlockDistMatrix
VGath	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    static constexpr Dist VGath = GatheredDist<V>();$/;"	m	class:elem::GeneralDistMatrix
VIEW	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    VIEW = 0x1,$/;"	e	enum:elem::ViewTypeNS::ViewType
VIEW_FIXED	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    VIEW_FIXED = 0x3,$/;"	e	enum:elem::ViewTypeNS::ViewType
VLocalFunctor	src/apps/chem/gth_pseudopotential.h	/^    VLocalFunctor(double Zeff, double zi, $/;"	f	class:madness::VLocalFunctor
VLocalFunctor	src/apps/chem/gth_pseudopotential.h	/^class VLocalFunctor : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness
VLocalFunctor	src/apps/polar/gth_pseudopotential.h	/^    VLocalFunctor(double Zeff, double zi, $/;"	f	class:VLocalFunctor
VLocalFunctor	src/apps/polar/gth_pseudopotential.h	/^class VLocalFunctor : public FunctionFunctorInterface<double,3> {$/;"	c
VPart	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    static constexpr Dist VPart = PartialDist<V>();$/;"	m	class:elem::GeneralBlockDistMatrix
VPart	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    static constexpr Dist VPart = PartialDist<V>();$/;"	m	class:elem::GeneralDistMatrix
VR	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    VR,   \/\/ Row-major vector distribution$/;"	e	enum:elem::DistNS::Dist
VRComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::VRComm()     const { return vectorRowComm_;      }$/;"	f	class:elem::Grid
VRRank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::VRRank() const { return mpi::Rank(vectorRowComm_); }$/;"	f	class:elem::Grid
VRSize	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::VRSize() const { return size_;         }$/;"	f	class:elem::Grid
VScat	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    static constexpr Dist VScat = ScatteredRowDist<U,V>();$/;"	m	class:elem::GeneralBlockDistMatrix
VScat	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    static constexpr Dist VScat = ScatteredRowDist<U,V>();$/;"	m	class:elem::GeneralDistMatrix
VT	src/madness/mra/operator.h	/^            const Q* VT;$/;"	m	struct:madness::SeparatedConvolution::Transformation
VVV	src/examples/heat2.cc	/^static const double VVV = 0.2;  \/\/ Vp constant value$/;"	v	file:
V_1	src/examples/helium_mp2.cc	/^static double V_1(const coord_6d& r) {$/;"	f	file:
V_cosine1D	src/apps/hf/test_coulomb.cc	/^static double V_cosine1D(const coordT1d& r)$/;"	f	file:
V_cosine3D	src/apps/hf/test_coulomb.cc	/^static double V_cosine3D(const coordT3d& r)$/;"	f	file:
V_cosine3D_sep	src/apps/hf/test_coulomb.cc	/^static double V_cosine3D_sep(const coordT3d& r)$/;"	f	file:
V_epsilon	src/examples/gygi_soltion.cc	/^  realfunc V_epsilon(const realfunc& u) const {$/;"	f	class:GygiPot
V_for_particle1	src/madness/mra/function_factory.h	/^    V_for_particle1(const Function<T, MDIM>& f) {$/;"	f	class:madness::CompositeFactory
V_for_particle2	src/madness/mra/function_factory.h	/^    V_for_particle2(const Function<T, MDIM>& f) {$/;"	f	class:madness::CompositeFactory
V_func_be	src/apps/hf/test_be.cc	/^static double V_func_be(const coordT& r)$/;"	f	file:
V_func_be	src/apps/hf/test_hf.cc	/^static double V_func_be(const coordT& r)$/;"	f	file:
V_func_h2	src/apps/hf/test_hf.cc	/^double V_func_h2(const Vector<double,3>& r)$/;"	f
V_func_he	src/apps/hf/test_coulomb.cc	/^static double V_func_he(const coordT3d& r)$/;"	f	file:
V_func_he	src/apps/hf/test_he.cc	/^static double V_func_he(const coordT& r)$/;"	f	file:
V_func_he	src/apps/hf/test_hf.cc	/^static double V_func_he(const coordT& r)$/;"	f	file:
V_times_phi	src/examples/helium_mp2.cc	/^static double V_times_phi(const coord_6d& r) {$/;"	f	file:
ValidInfixOprtChars	src/madness/external/muParser/muParserBase.cpp	/^  const char_type* ParserBase::ValidInfixOprtChars() const$/;"	f	class:mu::ParserBase
ValidNameChars	src/madness/external/muParser/muParserBase.cpp	/^  const char_type* ParserBase::ValidNameChars() const$/;"	f	class:mu::ParserBase
ValidOprtChars	src/madness/external/muParser/muParserBase.cpp	/^  const char_type* ParserBase::ValidOprtChars() const$/;"	f	class:mu::ParserBase
ValidateRegex	src/madness/external/gtest/src/gtest-port.cc	/^bool ValidateRegex(const char* regex) {$/;"	f	namespace:testing::internal
ValidateTestProperty	src/madness/external/gtest/src/gtest.cc	/^bool TestResult::ValidateTestProperty(const std::string& xml_element,$/;"	f	class:testing::TestResult
ValidateTestPropertyName	src/madness/external/gtest/src/gtest.cc	/^bool ValidateTestPropertyName(const std::string& property_name,$/;"	f	namespace:testing
Value	src/madness/external/tinyxml/tinyxml.h	/^	const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode
Value	src/madness/external/tinyxml/tinyxml.h	/^	const char*		Value() const		{ return value.c_str(); }		\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute
Value	src/madness/tensor/elem.h	/^            Value(){} \/\/ required for use in STL container$/;"	f	struct:madness::detail::Value
Value	src/madness/tensor/elem.h	/^            Value(int i, int j, T t) : i(i), j(j), t(t) {}$/;"	f	struct:madness::detail::Value
Value	src/madness/tensor/elem.h	/^        struct Value {$/;"	s	namespace:madness::detail
ValueArray1	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  explicit ValueArray1(T1 v1) : v1_(v1) {}$/;"	f	class:testing::internal::ValueArray1
ValueArray1	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray1 {$/;"	c	namespace:testing::internal
ValueArray10	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray10(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray10
ValueArray10	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray10 {$/;"	c	namespace:testing::internal
ValueArray11	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray11(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray11
ValueArray11	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray11 {$/;"	c	namespace:testing::internal
ValueArray12	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray12(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray12
ValueArray12	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray12 {$/;"	c	namespace:testing::internal
ValueArray13	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray13(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray13
ValueArray13	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray13 {$/;"	c	namespace:testing::internal
ValueArray14	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray14(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray14
ValueArray14	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray14 {$/;"	c	namespace:testing::internal
ValueArray15	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray15(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray15
ValueArray15	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray15 {$/;"	c	namespace:testing::internal
ValueArray16	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray16(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray16
ValueArray16	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray16 {$/;"	c	namespace:testing::internal
ValueArray17	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray17(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray17
ValueArray17	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray17 {$/;"	c	namespace:testing::internal
ValueArray18	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray18(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray18
ValueArray18	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray18 {$/;"	c	namespace:testing::internal
ValueArray19	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray19(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray19
ValueArray19	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray19 {$/;"	c	namespace:testing::internal
ValueArray2	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray2(T1 v1, T2 v2) : v1_(v1), v2_(v2) {}$/;"	f	class:testing::internal::ValueArray2
ValueArray2	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray2 {$/;"	c	namespace:testing::internal
ValueArray20	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray20(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray20
ValueArray20	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray20 {$/;"	c	namespace:testing::internal
ValueArray21	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray21(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray21
ValueArray21	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray21 {$/;"	c	namespace:testing::internal
ValueArray22	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray22(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray22
ValueArray22	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray22 {$/;"	c	namespace:testing::internal
ValueArray23	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray23(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray23
ValueArray23	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray23 {$/;"	c	namespace:testing::internal
ValueArray24	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray24(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray24
ValueArray24	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray24 {$/;"	c	namespace:testing::internal
ValueArray25	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray25(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray25
ValueArray25	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray25 {$/;"	c	namespace:testing::internal
ValueArray26	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray26(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray26
ValueArray26	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray26 {$/;"	c	namespace:testing::internal
ValueArray27	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray27(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray27
ValueArray27	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray27 {$/;"	c	namespace:testing::internal
ValueArray28	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray28(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray28
ValueArray28	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray28 {$/;"	c	namespace:testing::internal
ValueArray29	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray29(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray29
ValueArray29	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray29 {$/;"	c	namespace:testing::internal
ValueArray3	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray3(T1 v1, T2 v2, T3 v3) : v1_(v1), v2_(v2), v3_(v3) {}$/;"	f	class:testing::internal::ValueArray3
ValueArray3	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray3 {$/;"	c	namespace:testing::internal
ValueArray30	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray30(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray30
ValueArray30	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray30 {$/;"	c	namespace:testing::internal
ValueArray31	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray31(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray31
ValueArray31	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray31 {$/;"	c	namespace:testing::internal
ValueArray32	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray32(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray32
ValueArray32	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray32 {$/;"	c	namespace:testing::internal
ValueArray33	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray33(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray33
ValueArray33	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray33 {$/;"	c	namespace:testing::internal
ValueArray34	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray34(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray34
ValueArray34	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray34 {$/;"	c	namespace:testing::internal
ValueArray35	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray35(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray35
ValueArray35	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray35 {$/;"	c	namespace:testing::internal
ValueArray36	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray36(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray36
ValueArray36	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray36 {$/;"	c	namespace:testing::internal
ValueArray37	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray37(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray37
ValueArray37	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray37 {$/;"	c	namespace:testing::internal
ValueArray38	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray38(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray38
ValueArray38	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray38 {$/;"	c	namespace:testing::internal
ValueArray39	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray39(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray39
ValueArray39	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray39 {$/;"	c	namespace:testing::internal
ValueArray4	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray4(T1 v1, T2 v2, T3 v3, T4 v4) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray4
ValueArray4	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray4 {$/;"	c	namespace:testing::internal
ValueArray40	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray40(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray40
ValueArray40	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray40 {$/;"	c	namespace:testing::internal
ValueArray41	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray41(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray41
ValueArray41	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray41 {$/;"	c	namespace:testing::internal
ValueArray42	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray42(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray42
ValueArray42	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray42 {$/;"	c	namespace:testing::internal
ValueArray43	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray43(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray43
ValueArray43	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray43 {$/;"	c	namespace:testing::internal
ValueArray44	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray44(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray44
ValueArray44	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray44 {$/;"	c	namespace:testing::internal
ValueArray45	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray45(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray45
ValueArray45	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray45 {$/;"	c	namespace:testing::internal
ValueArray46	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray46(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray46
ValueArray46	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray46 {$/;"	c	namespace:testing::internal
ValueArray47	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray47(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray47
ValueArray47	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray47 {$/;"	c	namespace:testing::internal
ValueArray48	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray48(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray48
ValueArray48	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray48 {$/;"	c	namespace:testing::internal
ValueArray49	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray49(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray49
ValueArray49	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray49 {$/;"	c	namespace:testing::internal
ValueArray5	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray5(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray5
ValueArray5	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray5 {$/;"	c	namespace:testing::internal
ValueArray50	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray50(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray50
ValueArray50	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray50 {$/;"	c	namespace:testing::internal
ValueArray6	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray6(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6) : v1_(v1), v2_(v2),$/;"	f	class:testing::internal::ValueArray6
ValueArray6	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray6 {$/;"	c	namespace:testing::internal
ValueArray7	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray7(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7) : v1_(v1),$/;"	f	class:testing::internal::ValueArray7
ValueArray7	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray7 {$/;"	c	namespace:testing::internal
ValueArray8	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray8(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	class:testing::internal::ValueArray8
ValueArray8	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray8 {$/;"	c	namespace:testing::internal
ValueArray9	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  ValueArray9(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	class:testing::internal::ValueArray9
ValueArray9	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^class ValueArray9 {$/;"	c	namespace:testing::internal
ValueHolder	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^    explicit ValueHolder(const T& value) : value_(value) {}$/;"	f	class:testing::internal::ThreadLocal::ValueHolder
ValueHolder	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  class ValueHolder : public ThreadLocalValueHolderBase {$/;"	c	class:testing::internal::ThreadLocal
ValueInt	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^struct ValueInt$/;"	s	namespace:elem
ValueInt	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^struct ValueInt<Complex<Real>>$/;"	s	namespace:elem
ValueIntPair	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^struct ValueIntPair$/;"	s	namespace:elem
ValueIntPair	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^struct ValueIntPair<Complex<Real>>$/;"	s	namespace:elem
ValueIntPairType	src/madness/external/elemental/src/core/mpi_register.cpp	/^Datatype& ValueIntPairType<Int>()    { return ::typeIntIntPair; }$/;"	f	namespace:elem::mpi
ValueIntPairType	src/madness/external/elemental/src/core/mpi_register.cpp	/^Datatype& ValueIntPairType<double>() { return ::typeDoubleIntPair; }$/;"	f	namespace:elem::mpi
ValueIntPairType	src/madness/external/elemental/src/core/mpi_register.cpp	/^Datatype& ValueIntPairType<float>()  { return ::typeFloatIntPair; }$/;"	f	namespace:elem::mpi
ValueIntType	src/madness/external/elemental/src/core/mpi_register.cpp	/^Datatype& ValueIntType<Int>()        { return ::typeIntInt; }$/;"	f	namespace:elem::mpi
ValueIntType	src/madness/external/elemental/src/core/mpi_register.cpp	/^Datatype& ValueIntType<double>()     { return ::typeDoubleInt; }$/;"	f	namespace:elem::mpi
ValueIntType	src/madness/external/elemental/src/core/mpi_register.cpp	/^Datatype& ValueIntType<float>()      { return ::typeFloatInt; }$/;"	f	namespace:elem::mpi
ValueOf	src/madness/external/muParser/muParserTest.h	/^        static value_type ValueOf(const char_type*)      $/;"	f	class:mu::Test::ParserTester
ValueStr	src/madness/external/tinyxml/tinyxml.h	/^	const std::string& ValueStr() const	{ return value; }				\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute
ValueStr	src/madness/external/tinyxml/tinyxml.h	/^	const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode
ValueTStr	src/madness/external/tinyxml/tinyxml.h	/^	const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T11> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T12> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T13> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Values(T1 v1,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16, T17, T18, T19, T20, T21> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16, T17, T18, T19, T20> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16, T17, T18, T19> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16, T17, T18> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16, T17> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15, T16> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14, T15> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T14> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T26> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T27> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T28> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Values(T1 v1,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31, T32, T33, T34, T35, T36> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31, T32, T33, T34, T35> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31, T32, T33, T34> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31, T32, T33> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31, T32> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30, T31> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29, T30> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T29> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T41> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T42> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T43> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T44, T45, T46, T47, T48, T49, T50> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T44, T45, T46, T47, T48, T49> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T44, T45, T46, T47, T48> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T44, T45, T46, T47> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T44, T45, T46> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T44, T45> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^    T44> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Values(T1 v1,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray1<T1> Values(T1 v1) {$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray2<T1, T2> Values(T1 v1, T2 v2) {$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray3<T1, T2, T3> Values(T1 v1, T2 v2, T3 v3) {$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray4<T1, T2, T3, T4> Values(T1 v1, T2 v2, T3 v3, T4 v4) {$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray5<T1, T2, T3, T4, T5> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray6<T1, T2, T3, T4, T5, T6> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray7<T1, T2, T3, T4, T5, T6, T7> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray8<T1, T2, T3, T4, T5, T6, T7, T8> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ValueArray9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values at end points	doc/Latex/implementation.tex	/^\\subsubsection[Values at end points]{Values at end points}$/;"	b
ValuesIn	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^ValuesIn(ForwardIterator begin, ForwardIterator end) {$/;"	f	namespace:testing
ValuesIn	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^internal::ParamGenerator<typename Container::value_type> ValuesIn($/;"	f	namespace:testing
ValuesInIteratorRangeGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
ValuesInIteratorRangeGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
Var3	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Var3.hpp	/^Var3( DistMatrix<F>& A, bool conjugate=false )$/;"	f	namespace:elem::ldl
Var3	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Var3.hpp	/^Var3( Matrix<F>& A, bool conjugate=false )$/;"	f	namespace:elem::ldl
Var3	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular.hpp	/^Var3( UpperOrLower uplo, UnitOrNonUnit diag, DistMatrix<F>& A  )$/;"	f	namespace:elem::triang_inv
Var3	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular.hpp	/^Var3( UpperOrLower uplo, UnitOrNonUnit diag, Matrix<F>& A  )$/;"	f	namespace:elem::triang_inv
Var3Unb	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Var3.hpp	/^Var3Unb( Matrix<F>& A, bool conjugate=false )$/;"	f	namespace:elem::ldl
Vdynamic	src/examples/nonlinschro.cc	/^static void Vdynamic(const Key<1> & key, Tensor<T>& t)$/;"	f	file:
Ve	src/apps/tdse/tdse4.cc	/^static double Ve(const coordT& r) {$/;"	f	file:
Vector	src/madness/world/vector.h	/^        Vector(const Vector<Q,N>& other) {$/;"	f	class:madness::Vector
Vector	src/madness/world/vector.h	/^        Vector(const Vector<T,N>& other) {$/;"	f	class:madness::Vector
Vector	src/madness/world/vector.h	/^        Vector(const std::initializer_list<T>& list) :$/;"	f	class:madness::Vector
Vector	src/madness/world/vector.h	/^        explicit Vector(Q t) {$/;"	f	class:madness::Vector
Vector	src/madness/world/vector.h	/^        explicit Vector(const std::array<Q, N>& t) {$/;"	f	class:madness::Vector
Vector	src/madness/world/vector.h	/^        explicit Vector(const std::vector<Q, A>& t) {$/;"	f	class:madness::Vector
Vector	src/madness/world/vector.h	/^    class Vector {$/;"	c	namespace:madness
VectorInputArchive	src/madness/world/vector_archive.h	/^            VectorInputArchive(std::vector<unsigned char>& v) : v(&v) , i(0) {}$/;"	f	class:madness::archive::VectorInputArchive
VectorInputArchive	src/madness/world/vector_archive.h	/^        class VectorInputArchive : public BaseInputArchive {$/;"	c	namespace:madness::archive
VectorMax	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	/^VectorMax( const DistMatrix<Real,U,V>& x )$/;"	f	namespace:elem
VectorMax	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	/^VectorMax( const Matrix<Real>& x )$/;"	f	namespace:elem
VectorMaxAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	/^VectorMaxAbs( const DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
VectorMaxAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	/^VectorMaxAbs( const Matrix<F>& x )$/;"	f	namespace:elem
VectorMin	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	/^VectorMin( const DistMatrix<Real,U,V>& x )$/;"	f	namespace:elem
VectorMin	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	/^VectorMin( const Matrix<Real>& x )$/;"	f	namespace:elem
VectorMinAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	/^VectorMinAbs( const DistMatrix<F,U,V>& x )$/;"	f	namespace:elem
VectorMinAbs	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	/^VectorMinAbs( const Matrix<F>& x )$/;"	f	namespace:elem
VectorOfFunctionsSpace	src/madness/tensor/gmres.h	/^            VectorOfFunctionsSpace(World &world) : AbstractVectorSpace$/;"	f	class:madness::VectorOfFunctionsSpace
VectorOfFunctionsSpace	src/madness/tensor/gmres.h	/^    class VectorOfFunctionsSpace : public AbstractVectorSpace<$/;"	c	namespace:madness
VectorOutputArchive	src/madness/world/vector_archive.h	/^            VectorOutputArchive(std::vector<unsigned char>& v, std::size_t hint=262144)$/;"	f	class:madness::archive::VectorOutputArchive
VectorOutputArchive	src/madness/world/vector_archive.h	/^        class VectorOutputArchive : public BaseOutputArchive {$/;"	c	namespace:madness::archive
VectorSpace	src/madness/tensor/gmres.h	/^            VectorSpace(World &world) : AbstractVectorSpace<$/;"	f	class:madness::VectorSpace
VectorSpace	src/madness/tensor/gmres.h	/^    class VectorSpace : public AbstractVectorSpace<Vector<T, NDIM>,$/;"	c	namespace:madness
VerifyRegisteredTestNames	src/madness/external/gtest/src/gtest-typed-test.cc	/^const char* TypedTestCasePState::VerifyRegisteredTestNames($/;"	f	class:testing::internal::TypedTestCasePState
Version	src/madness/external/tinyxml/tinyxml.h	/^	const char *Version() const			{ return version.c_str (); }$/;"	f	class:TiXmlDeclaration
VerticalOrHorizontal	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum VerticalOrHorizontal$/;"	g	namespace:elem::VerticalOrHorizontalNS
VerticalOrHorizontalNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace VerticalOrHorizontalNS {$/;"	n	namespace:elem
Vext	src/examples/molecularmask.h	/^    const double Vint, Vext, fac;$/;"	m	class:MolecularVolumeExponentialSwitch
VextCosFunctor	src/apps/chem/SCF.h	/^	VextCosFunctor(World& world,$/;"	f	class:madness::VextCosFunctor
VextCosFunctor	src/apps/chem/SCF.h	/^class VextCosFunctor {$/;"	c	namespace:madness
VextCosFunctor	src/apps/polar/moldft.cc	/^    VextCosFunctor(World &world,$/;"	f	class:VextCosFunctor
VextCosFunctor	src/apps/polar/moldft.cc	/^class VextCosFunctor$/;"	c	file:
View	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> View$/;"	f	namespace:elem
View	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> View( DistMatrix<T,U,V>& B )$/;"	f	namespace:elem
View	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> View( Matrix<T>& B )$/;"	f	namespace:elem
View	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> View( Matrix<T>& B, Int i, Int j, Int height, Int width )$/;"	f	namespace:elem
View	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View$/;"	f	namespace:elem
View	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View( BlockDistMatrix<T,U,V>& A, DistMatrix<T,U,V>& B )$/;"	f	namespace:elem
View	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View( DistMatrix<T,U,V>& A, BlockDistMatrix<T,U,V>& B )$/;"	f	namespace:elem
View	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View( DistMatrix<T,U,V>& A, DistMatrix<T,U,V>& B )$/;"	f	namespace:elem
View	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View( Matrix<T>& A, Matrix<T>& B )$/;"	f	namespace:elem
View1x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> View1x2( DistMatrix<T,U,V>& BL, DistMatrix<T,U,V>& BR )$/;"	f	namespace:elem
View1x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> View1x2( Matrix<T>& BL, Matrix<T>& BR )$/;"	f	namespace:elem
View1x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View1x2$/;"	f	namespace:elem
View1x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View1x2( Matrix<T>& A, Matrix<T>& BL, Matrix<T>& BR )$/;"	f	namespace:elem
View2x1	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> View2x1( DistMatrix<T,U,V>& BT, DistMatrix<T,U,V>& BB )$/;"	f	namespace:elem
View2x1	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> View2x1( Matrix<T>& BT, Matrix<T>& BB )$/;"	f	namespace:elem
View2x1	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View2x1$/;"	f	namespace:elem
View2x1	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View2x1( Matrix<T>& A, Matrix<T>& BT, Matrix<T>& BB )$/;"	f	namespace:elem
View2x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline DistMatrix<T,U,V> View2x2$/;"	f	namespace:elem
View2x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline Matrix<T> View2x2$/;"	f	namespace:elem
View2x2	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^inline void View2x2$/;"	f	namespace:elem
ViewRange	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^DistMatrix<T,U,V> ViewRange$/;"	f	namespace:elem
ViewRange	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^Matrix<T> ViewRange$/;"	f	namespace:elem
ViewRange	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^void ViewRange$/;"	f	namespace:elem
ViewType	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^enum ViewType$/;"	g	namespace:elem::ViewTypeNS
ViewTypeNS	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace ViewTypeNS {$/;"	n	namespace:elem
Viewing	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^bool AbstractBlockDistMatrix<T>::Viewing() const $/;"	f	class:elem::AbstractBlockDistMatrix
Viewing	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^bool AbstractDistMatrix<T>::Viewing() const { return IsViewing( viewType_ ); }$/;"	f	class:elem::AbstractDistMatrix
Viewing	src/madness/external/elemental/src/core/Matrix.cpp	/^bool Matrix<T>::Viewing() const { return IsViewing( viewType_ ); }$/;"	f	class:elem::Matrix
ViewingComm	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline mpi::Comm Grid::ViewingComm() const { return viewingComm_; }$/;"	f	class:elem::Grid
ViewingRank	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::ViewingRank() const { return mpi::Rank(viewingComm_); }$/;"	f	class:elem::Grid
Vint	src/examples/molecularmask.h	/^    const double Vint, Vext, fac;$/;"	m	class:MolecularVolumeExponentialSwitch
Visit	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter
Visit	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter
Visit	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter
Visit	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter
Visit	src/madness/external/tinyxml/tinyxml.h	/^	virtual bool Visit( const TiXmlComment& \/*comment*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
Visit	src/madness/external/tinyxml/tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor
Visit	src/madness/external/tinyxml/tinyxml.h	/^	virtual bool Visit( const TiXmlText& \/*text*\/ )					{ return true; }$/;"	f	class:TiXmlVisitor
Visit	src/madness/external/tinyxml/tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
VisitEnter	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter
VisitEnter	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:TiXmlPrinter
VisitEnter	src/madness/external/tinyxml/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
VisitEnter	src/madness/external/tinyxml/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor
VisitExit	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter
VisitExit	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter
VisitExit	src/madness/external/tinyxml/tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
VisitExit	src/madness/external/tinyxml/tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& \/*element*\/ )		{ return true; }$/;"	f	class:TiXmlVisitor
Vm_cstr	src/madness/world/worldmem.cc	/^    template <> const char* Vm_cstr<char>() { return "Vm"; }$/;"	f	namespace:madness::detail
Vm_cstr	src/madness/world/worldmem.cc	/^    template <> const wchar_t* Vm_cstr<wchar_t>() { return L"Vm"; }$/;"	f	namespace:madness::detail
Vn	src/apps/tdse/tdse4.cc	/^static double Vn(const coordT& r) {$/;"	f	file:
Vnuclear	src/examples/testspectralprop.cc	/^    Vnuclear(double current_time) : atom_x(atom_position(current_time)) {}$/;"	f	class:Vnuclear
Vnuclear	src/examples/testspectralprop.cc	/^class Vnuclear : public FunctionFunctorInterface<double,1>$/;"	c	file:
VolumeIntegral	src/apps/interior_bc/test_problems.h	/^        double VolumeIntegral() const {$/;"	f	class:ConstantSphere
VolumeIntegral	src/apps/interior_bc/test_problems.h	/^        double VolumeIntegral() const {$/;"	f	class:CosineSphere
VolumeIntegral	src/apps/interior_bc/test_problems.h	/^        double VolumeIntegral() const {$/;"	f	class:InhomoConstantSphere
VolumeIntegral	src/apps/interior_bc/test_problems.h	/^        double VolumeIntegral() const {$/;"	f	class:Y20Sphere
Vp	src/examples/heat2.cc	/^static double Vp(const coord_3d& r) {$/;"	f	file:
Vphi_op_NS	src/madness/mra/funcimpl.h	/^          Vphi_op_NS() {}$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
Vphi_op_NS	src/madness/mra/funcimpl.h	/^          Vphi_op_NS(implT* result, const opT& leaf_op, const ctT& iaket,$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
Vphi_op_NS	src/madness/mra/funcimpl.h	/^        struct Vphi_op_NS {$/;"	s	class:madness::FunctionImpl
Vsc	src/apps/nick/tdse1.cc	/^static double Vsc(const coordT& r) {$/;"	f	file:
Vstatic	src/examples/nonlinschro.cc	/^static double Vstatic(const coord_1d& r) {$/;"	f	file:
Vx	src/apps/chem/PNOStructures.h	/^	vector_real_function_3d Vx=vector_real_function_3d();$/;"	m	struct:madness::CISData
W	src/apps/chem/PNOStructures.h	/^		double W;$/;"	m	struct:madness::PNOPairs::MemInfo
W	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double        *W;$/;"	m	struct:__anon30
W	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *W;$/;"	m	struct:__anon29
W	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *restrict W;$/;"	m	struct:__anon22
WARN	src/examples/compiler/Makefile	/^   WARN = -Waddress \\$/;"	m
WARNING	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^    WARNING = '\\033[93m'$/;"	v	class:COLORS
WARNING	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^    WARNING = '\\033[93m'$/;"	v	class:COLORS
WAVEF_H	src/apps/nick/wavef.h	34;"	d
WF	src/apps/nick/extra.h	/^    WF(const std::string& STR, const complex_functionT& FUNC) $/;"	f	struct:WF
WF	src/apps/nick/extra.h	/^struct WF {$/;"	s
WF	src/apps/nick/wfSlice.cc	/^    WF(const int& timeStep, const complex_functionT& FUNC) : t(timeStep), func(FUNC) {$/;"	f	struct:WF
WF	src/apps/nick/wfSlice.cc	/^struct WF {$/;"	s	file:
WITH_G12	src/examples/helium_exact.cc	58;"	d	file:
WITH_G12	src/examples/helium_exact.cc	59;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/apps/polar/gth_pseudopotential.h	1;"	d
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/apps/polar/moldft.cc	39;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/apps/polar/preal.cc	1;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/apps/polar/testperiodic.cc	11;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/apps/polar/testpg.cc	31;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/apps/polar/testxc.cc	32;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/examples/array_worldobject.cc	1;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/examples/newsolver_lda.cc	2;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/tensor/test_distributed_matrix.cc	1;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/tensor/test_elemental.cc	4;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/world/test_binsorter.cc	1;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/world/test_dc.cc	32;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/world/test_future2.cc	32;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/world/test_future3.cc	32;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/world/test_hashdc.cc	32;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/world/test_tree.cc	33;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/world/test_world.cc	35;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/world/test_worldptr.cc	37;"	d	file:
WORLD_INSTANTIATE_STATIC_TEMPLATES	src/madness/world/test_worldref.cc	36;"	d	file:
WRITELOCK	src/madness/world/worldmutex.h	/^        enum lockT {NOLOCK, READLOCK, WRITELOCK};$/;"	e	enum:madness::MutexReaderWriter::lockT
WRITELOCK	src/madness/world/worldmutex.h	/^        static const int WRITELOCK=2;$/;"	m	class:madness::MutexReaderWriter
WSTAtomicBasisFunctor	src/apps/hf/solver.h	/^      WSTAtomicBasisFunctor(const AtomicBasisFunction& aofunc, double L, double kx, double ky, double kz)$/;"	f	class:madness::WSTAtomicBasisFunctor
WSTAtomicBasisFunctor	src/apps/hf/solver.h	/^  class WSTAtomicBasisFunctor : public FunctionFunctorInterface<double_complex,3> {$/;"	c	namespace:madness
WSTFunctional	src/apps/moldft/wst_functional.h	/^class WSTFunctional$/;"	c
WST_PI	src/apps/hf/poperator.h	39;"	d
WST_PI	src/apps/hf/test_coulomb.cc	43;"	d	file:
W_ij	src/apps/chem/PNOStructures.h	/^	std::valarray<Tensor<double> > W_ij;			\/\/\/< Fluctuation matrix$/;"	m	struct:madness::PNOPairs
W_ij_i	src/apps/chem/PNOStructures.h	/^	vfT W_ij_i;										\/\/\/< Fluctuation Potential$/;"	m	struct:madness::PNOPairs
W_ij_j	src/apps/chem/PNOStructures.h	/^	vfT W_ij_j;										\/\/\/< Fluctuation Potential$/;"	m	struct:madness::PNOPairs
Wait	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Wait( Request& request )$/;"	f	namespace:elem::mpi
Wait	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void Wait( Request& request, Status& status )$/;"	f	namespace:elem::mpi
Wait	src/madness/external/gtest/src/gtest-death-test.cc	/^int ForkingDeathTest::Wait() {$/;"	f	class:testing::internal::ForkingDeathTest
Wait	src/madness/external/gtest/src/gtest-death-test.cc	/^int WindowsDeathTest::Wait() {$/;"	f	class:testing::internal::WindowsDeathTest
WaitAll	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void WaitAll( int numRequests, Request* requests )$/;"	f	namespace:elem::mpi
WaitAll	src/madness/external/elemental/src/core/imports/mpi.cpp	/^void WaitAll( int numRequests, Request* requests, Status* statuses )$/;"	f	namespace:elem::mpi
WaitForNotification	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void WaitForNotification() {$/;"	f	class:testing::internal::Notification
Walker1	src/madness/world/test_world.cc	/^    Walker1(WorldContainer<Key,Node>& d) : d(d) {};$/;"	f	struct:Walker1
Walker1	src/madness/world/test_world.cc	/^struct Walker1 {$/;"	s	file:
Walsh	src/madness/external/elemental/include/elemental/matrices/Walsh.hpp	/^Walsh( DistMatrix<T,U,V>& A, Int k, bool binary=false )$/;"	f	namespace:elem
Walsh	src/madness/external/elemental/include/elemental/matrices/Walsh.hpp	/^Walsh( Matrix<T>& A, Int k, bool binary=false )$/;"	f	namespace:elem
Wannier	src/apps/exciting/wannier.cc	/^  Wannier(int n, Vector<int,3>& itr, const coordT& center) :$/;"	f	class:Wannier
Wannier	src/apps/exciting/wannier.cc	/^class Wannier: public FunctionFunctorInterface<T, NDIM>$/;"	c	file:
Wavelet transform	doc/Latex/implementation.tex	/^\\subsection{Wavelet transform}$/;"	b
Werr	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double        *Werr;$/;"	m	struct:__anon30
Werr	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *Werr;$/;"	m	struct:__anon29
Werr	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *restrict Werr;$/;"	m	struct:__anon22
Wgap	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double        *Wgap;$/;"	m	struct:__anon30
Wgap	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *restrict Wgap;$/;"	m	struct:__anon22
Whale	src/madness/external/elemental/include/elemental/matrices/Whale.hpp	/^Whale( BlockDistMatrix<Complex<Real>,U,V>& A, Int n )$/;"	f	namespace:elem
Whale	src/madness/external/elemental/include/elemental/matrices/Whale.hpp	/^Whale( DistMatrix<Complex<Real>,U,V>& A, Int n )$/;"	f	namespace:elem
Whale	src/madness/external/elemental/include/elemental/matrices/Whale.hpp	/^Whale( Matrix<Complex<Real>>& A, Int n )$/;"	f	namespace:elem
WideAbsoluteThresholded	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	/^WideAbsoluteThresholded$/;"	f	namespace:elem::svd
WideCStringEquals	src/madness/external/gtest/src/gtest.cc	/^bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {$/;"	f	class:testing::internal::String
WideRelativeThresholded	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	/^WideRelativeThresholded$/;"	f	namespace:elem::svd
WideStringToUtf8	src/madness/external/gtest/src/gtest.cc	/^std::string WideStringToUtf8(const wchar_t* str, int num_chars) {$/;"	f	namespace:testing::internal
WideThresholded	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	/^WideThresholded$/;"	f	namespace:elem::svd
Width	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline int Grid::Width()  const { return MRSize(); }$/;"	f	class:elem::Grid
Width	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^Int AbstractBlockDistMatrix<T>::Width() const { return width_; }$/;"	f	class:elem::AbstractBlockDistMatrix
Width	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^Int AbstractDistMatrix<T>::Width() const { return width_; }$/;"	f	class:elem::AbstractDistMatrix
Width	src/madness/external/elemental/src/core/Matrix.cpp	/^Int Matrix<T>::Width() const { return width_; }$/;"	f	class:elem::Matrix
Wigner	src/madness/external/elemental/include/elemental/matrices/Wigner.hpp	/^Wigner( DistMatrix<T,U,V>& A, Int n, T mean=0, Base<T> stddev=1 )$/;"	f	namespace:elem
Wigner	src/madness/external/elemental/include/elemental/matrices/Wigner.hpp	/^Wigner( Matrix<T>& A, Int n, T mean=0, Base<T> stddev=1 )$/;"	f	namespace:elem
Wilkinson	src/madness/external/elemental/include/elemental/matrices/Wilkinson.hpp	/^Wilkinson( DistMatrix<T,U,V>& A, Int k )$/;"	f	namespace:elem
Wilkinson	src/madness/external/elemental/include/elemental/matrices/Wilkinson.hpp	/^Wilkinson( Matrix<T>& A, Int k )$/;"	f	namespace:elem
Windex	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int            *Windex;$/;"	m	struct:__anon30
Windex	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    *Windex;$/;"	m	struct:__anon29
Windex	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    *restrict Windex;$/;"	m	struct:__anon22
WindowsDeathTest	src/madness/external/gtest/src/gtest-death-test.cc	/^  WindowsDeathTest(const char* a_statement,$/;"	f	class:testing::internal::WindowsDeathTest
WindowsDeathTest	src/madness/external/gtest/src/gtest-death-test.cc	/^class WindowsDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
WithParamInterface	src/madness/external/gtest/include/gtest/gtest.h	/^class WithParamInterface {$/;"	c	namespace:testing
Worker	src/madness/world/test_hashthreaded.cc	/^    Worker(ConcurrentHashMap<int,double>& a, size_t& count, double& sum)$/;"	f	class:Worker
Worker	src/madness/world/test_hashthreaded.cc	/^class Worker : public madness::ThreadBase {$/;"	c	file:
World	src/madness/world/world.cc	/^    World::World(const SafeMPI::Intracomm& comm)$/;"	f	class:madness::World
World	src/madness/world/world.h	/^    class World : private NO_DEFAULTS {$/;"	c	namespace:madness
WorldAbsMaxOp	src/madness/world/worldgop.h	/^    struct WorldAbsMaxOp {$/;"	s	namespace:madness
WorldAbsMinOp	src/madness/world/worldgop.h	/^    struct WorldAbsMinOp {$/;"	s	namespace:madness
WorldAmInterface	src/madness/world/worldam.cc	/^    WorldAmInterface::WorldAmInterface(World& world)$/;"	f	class:madness::WorldAmInterface
WorldAmInterface	src/madness/world/worldam.h	/^    class WorldAmInterface : private SCALABLE_MUTEX_TYPE {$/;"	c	namespace:madness
WorldBitAndOp	src/madness/world/worldgop.h	/^    struct WorldBitAndOp {$/;"	s	namespace:madness
WorldBitOrOp	src/madness/world/worldgop.h	/^    struct WorldBitOrOp {$/;"	s	namespace:madness
WorldBitXorOp	src/madness/world/worldgop.h	/^    struct WorldBitXorOp {$/;"	s	namespace:madness
WorldContainer	src/madness/world/worlddc.h	/^        WorldContainer()$/;"	f	class:madness::WorldContainer
WorldContainer	src/madness/world/worlddc.h	/^        WorldContainer(World& world, bool do_pending=true, const hashfunT& hf = hashfunT())$/;"	f	class:madness::WorldContainer
WorldContainer	src/madness/world/worlddc.h	/^        WorldContainer(World& world,$/;"	f	class:madness::WorldContainer
WorldContainer	src/madness/world/worlddc.h	/^        WorldContainer(const WorldContainer& other)$/;"	f	class:madness::WorldContainer
WorldContainer	src/madness/world/worlddc.h	/^    class WorldContainer : public archive::ParallelSerializableObject {$/;"	c	namespace:madness
WorldContainerImpl	src/madness/world/worlddc.h	/^        WorldContainerImpl(World& world,$/;"	f	class:madness::WorldContainerImpl
WorldContainerImpl	src/madness/world/worlddc.h	/^    class WorldContainerImpl$/;"	c	namespace:madness
WorldContainerIterator	src/madness/world/worlddc.h	/^        WorldContainerIterator(const WorldContainerIterator& other)$/;"	f	class:madness::WorldContainerIterator
WorldContainerIterator	src/madness/world/worlddc.h	/^        WorldContainerIterator(const WorldContainerIterator<iteratorT>& other)$/;"	f	class:madness::WorldContainerIterator
WorldContainerIterator	src/madness/world/worlddc.h	/^        explicit WorldContainerIterator()$/;"	f	class:madness::WorldContainerIterator
WorldContainerIterator	src/madness/world/worlddc.h	/^        explicit WorldContainerIterator(const internal_iteratorT& it)$/;"	f	class:madness::WorldContainerIterator
WorldContainerIterator	src/madness/world/worlddc.h	/^        explicit WorldContainerIterator(const value_type& v)$/;"	f	class:madness::WorldContainerIterator
WorldContainerIterator	src/madness/world/worlddc.h	/^    class WorldContainerIterator {$/;"	c	namespace:madness
WorldDCDefaultPmap	src/madness/world/worlddc.h	/^        WorldDCDefaultPmap(World& world, const hashfunT& hf = hashfunT()) :$/;"	f	class:madness::WorldDCDefaultPmap
WorldDCDefaultPmap	src/madness/world/worlddc.h	/^    class WorldDCDefaultPmap : public WorldDCPmapInterface<keyT> {$/;"	c	namespace:madness
WorldDCPmapInterface	src/madness/world/worlddc.h	/^    class WorldDCPmapInterface {$/;"	c	namespace:madness
WorldDCRedistributeInterface	src/madness/world/worlddc.h	/^    class WorldDCRedistributeInterface {$/;"	c	namespace:madness
WorldGopInterface	src/madness/world/worldgop.h	/^        WorldGopInterface(World& world) :$/;"	f	class:madness::WorldGopInterface
WorldGopInterface	src/madness/world/worldgop.h	/^    class WorldGopInterface {$/;"	c	namespace:madness
WorldInitObject	src/madness/world/safempi.cc	/^    struct Intracomm::WorldInitObject {$/;"	s	class:SafeMPI::Intracomm	file:
WorldLogicAndOp	src/madness/world/worldgop.h	/^    struct WorldLogicAndOp {$/;"	s	namespace:madness
WorldLogicOrOp	src/madness/world/worldgop.h	/^    struct WorldLogicOrOp {$/;"	s	namespace:madness
WorldMaxOp	src/madness/world/worldgop.h	/^    struct WorldMaxOp {$/;"	s	namespace:madness
WorldMemInfo	src/madness/world/worldmem.h	/^    class WorldMemInfo {$/;"	c	namespace:madness
WorldMinOp	src/madness/world/worldgop.h	/^    struct WorldMinOp {$/;"	s	namespace:madness
WorldMpi	src/madness/world/worldmpi.h	/^            WorldMpi(int& argc, char**& argv, int requested) {$/;"	f	class:madness::detail::WorldMpi
WorldMpi	src/madness/world/worldmpi.h	/^        class WorldMpi {$/;"	c	namespace:madness::detail
WorldMpiInterface	src/madness/world/worldmpi.h	/^        WorldMpiInterface(const SafeMPI::Intracomm& comm) :$/;"	f	class:madness::WorldMpiInterface
WorldMpiInterface	src/madness/world/worldmpi.h	/^    class WorldMpiInterface$/;"	c	namespace:madness
WorldMpiRuntime	src/madness/world/worldmpi.h	/^            WorldMpiRuntime() : world_mpi(WorldMpi::world_mpi) { }$/;"	f	class:madness::detail::WorldMpiRuntime
WorldMpiRuntime	src/madness/world/worldmpi.h	/^        class WorldMpiRuntime {$/;"	c	namespace:madness::detail
WorldMultOp	src/madness/world/worldgop.h	/^    struct WorldMultOp {$/;"	s	namespace:madness
WorldObject	src/madness/world/world_object.h	/^        WorldObject(World& world)$/;"	f	class:madness::WorldObject
WorldObject	src/madness/world/world_object.h	/^        WorldObject(const WorldObject& other) : world(other.world) { abort(); }$/;"	f	class:madness::WorldObject
WorldObject	src/madness/world/world_object.h	/^    class WorldObject {$/;"	c	namespace:madness
WorldObjectTaskHelper	src/madness/world/world_object.h	/^        struct WorldObjectTaskHelper {$/;"	s	namespace:madness::detail
WorldObjectTaskHelper	src/madness/world/world_object.h	/^        struct WorldObjectTaskHelper<objT, memfnT,$/;"	s	namespace:madness::detail
WorldProfile	src/madness/world/worldprofile.h	/^    class WorldProfile {$/;"	c	namespace:madness
WorldProfileEntry	src/madness/world/worldprofile.cc	/^    WorldProfileEntry::WorldProfileEntry(const WorldProfileEntry& other)$/;"	f	class:madness::WorldProfileEntry
WorldProfileEntry	src/madness/world/worldprofile.cc	/^    WorldProfileEntry::WorldProfileEntry(const char* name)$/;"	f	class:madness::WorldProfileEntry
WorldProfileEntry	src/madness/world/worldprofile.h	/^    struct WorldProfileEntry : public Spinlock {$/;"	s	namespace:madness
WorldProfileObj	src/madness/world/worldprofile.cc	/^    WorldProfileObj::WorldProfileObj(int id) : prev(call_stack), id(id), cpu_base(madness::cpu_time()), stats_base(::madness::RMI::get_stats()) {$/;"	f	class:madness::WorldProfileObj
WorldProfileObj	src/madness/world/worldprofile.h	/^    class WorldProfileObj {$/;"	c	namespace:madness
WorldPtr	src/madness/world/worldptr.h	/^            WorldPtr() :$/;"	f	class:madness::detail::WorldPtr
WorldPtr	src/madness/world/worldptr.h	/^            WorldPtr(World& w, T* p) :$/;"	f	class:madness::detail::WorldPtr
WorldPtr	src/madness/world/worldptr.h	/^            WorldPtr(const WorldPtr<T>& other) :$/;"	f	class:madness::detail::WorldPtr
WorldPtr	src/madness/world/worldptr.h	/^            WorldPtr(const WorldPtr<U>& other) :$/;"	f	class:madness::detail::WorldPtr
WorldPtr	src/madness/world/worldptr.h	/^        class WorldPtr {$/;"	c	namespace:madness::detail
WorldPtrTest	src/madness/world/test_worldptr.cc	/^        WorldPtrTest() : p(*pworld, i.get()), p0() {$/;"	f	class:__anon6::WorldPtrTest
WorldPtrTest	src/madness/world/test_worldptr.cc	/^    class WorldPtrTest : public ::testing::Test {$/;"	c	namespace:__anon6	file:
WorldRank	src/madness/external/elemental/src/core/imports/mpi.cpp	/^int WorldRank()$/;"	f	namespace:elem::mpi
WorldRefTest	src/madness/world/test_worldref.cc	/^        WorldRefTest() : r(*pworld, i), r0() {$/;"	f	class:__anon1::WorldRefTest
WorldRefTest	src/madness/world/test_worldref.cc	/^    class WorldRefTest : public ::testing::Test {$/;"	c	namespace:__anon1	file:
WorldSumOp	src/madness/world/worldgop.h	/^    struct WorldSumOp {$/;"	s	namespace:madness
WorldTaskQueue	src/madness/world/world_task_queue.cc	/^    WorldTaskQueue::WorldTaskQueue(World& world)$/;"	f	class:madness::WorldTaskQueue
WorldTaskQueue	src/madness/world/world_task_queue.h	/^    class WorldTaskQueue : public CallbackInterface, private NO_DEFAULTS {$/;"	c	namespace:madness
WorldTest	src/madness/world/test_googletest.cc	/^        WorldTest() {$/;"	f	class:__anon4::WorldTest
WorldTest	src/madness/world/test_googletest.cc	/^    class WorldTest : public ::testing::Test {$/;"	c	namespace:__anon4	file:
Write	src/madness/external/elemental/include/elemental/io/Write.hpp	/^Write$/;"	f	namespace:elem
Write	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^inline int Write(int fd, const void* buf, unsigned int count) {$/;"	f	namespace:testing::internal::posix
WriteToShardStatusFileIfNeeded	src/madness/external/gtest/src/gtest.cc	/^void WriteToShardStatusFileIfNeeded() {$/;"	f	namespace:testing::internal
Wshifted	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *restrict Wshifted;$/;"	m	struct:__anon22
Wstruct	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  val_t        *Wstruct;$/;"	m	struct:__anon31
Wtime	src/apps/nick/parse.py	/^Wtime   = []$/;"	v
Wtime	src/madness/world/safempi.h	/^    inline double Wtime() { return MPI_Wtime(); }$/;"	f	namespace:SafeMPI
WtimeFile	src/apps/nick/parse.py	/^WtimeFile  = open("Wtime.dat",     'w')$/;"	v
X86_32	src/madness/madness_config.h	131;"	d
X86_64	src/madness/madness_config.h	62;"	d
X86_64	src/madness/madness_config.h	81;"	d
XBM	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    XBM,$/;"	e	enum:elem::FileFormatNS::FileFormat
XC DFT exchange correlation	doc/Latex/apps/moldft/manual.tex	/^\\section{XC --- DFT exchange correlation}$/;"	s
XCFunctionalLDA	src/apps/hf/dft.cc	/^  XCFunctionalLDA<T,NDIM>::XCFunctionalLDA(World& world, double coeff, double thresh)$/;"	f	class:madness::XCFunctionalLDA
XCFunctionalLDA	src/apps/hf/dft.h	/^  class XCFunctionalLDA : public EigSolverOp<T,NDIM>$/;"	c	namespace:madness
XCOperator	src/apps/chem/SCFOperators.cc	/^XCOperator::XCOperator(World& world, const Nemo* nemo, int ispin)$/;"	f	class:madness::XCOperator
XCOperator	src/apps/chem/SCFOperators.cc	/^XCOperator::XCOperator(World& world, const Nemo* nemo,$/;"	f	class:madness::XCOperator
XCOperator	src/apps/chem/SCFOperators.cc	/^XCOperator::XCOperator(World& world, const SCF* calc, int ispin,$/;"	f	class:madness::XCOperator
XCOperator	src/apps/chem/SCFOperators.cc	/^XCOperator::XCOperator(World& world, const SCF* calc,$/;"	f	class:madness::XCOperator
XCOperator	src/apps/chem/SCFOperators.cc	/^XCOperator::XCOperator(World& world, std::string xc_data,$/;"	f	class:madness::XCOperator
XCOperator	src/apps/chem/SCFOperators.h	/^    XCOperator(World& world) : world(world), nbeta(0), ispin(0),$/;"	f	class:madness::XCOperator
XCOperator	src/apps/chem/SCFOperators.h	/^class XCOperator {$/;"	c	namespace:madness
XCfunctional	src/apps/chem/xcfunctional.h	/^class XCfunctional {$/;"	c	namespace:madness
XCfunctional	src/apps/chem/xcfunctional_ldaonly.cc	/^XCfunctional::XCfunctional() : hf_coeff(0.0) {$/;"	f	class:madness::XCfunctional
XCfunctional	src/apps/chem/xcfunctional_libxc.cc	/^XCfunctional::XCfunctional() : hf_coeff(0.0) {$/;"	f	class:madness::XCfunctional
XCfunctional	src/apps/polar/xcfunctional.h	/^class XCfunctional {$/;"	c	namespace:madness
XCfunctional	src/apps/polar/xcfunctional_ldaonly.cc	/^XCfunctional::XCfunctional() : hf_coeff(0.0) {$/;"	f	class:madness::XCfunctional
XCfunctional	src/apps/polar/xcfunctional_libxc.cc	/^XCfunctional::XCfunctional() : hf_coeff(0.0) {$/;"	f	class:madness::XCfunctional
XNonlinearSolver	src/madness/mra/nonlinsol.h	/^	XNonlinearSolver(const Alloc& alloc = Alloc(),bool print=false)$/;"	f	class:madness::XNonlinearSolver
XNonlinearSolver	src/madness/mra/nonlinsol.h	/^	XNonlinearSolver(const XNonlinearSolver& other)$/;"	f	class:madness::XNonlinearSolver
XNonlinearSolver	src/madness/mra/nonlinsol.h	/^    class XNonlinearSolver {$/;"	c	namespace:madness
XPM	src/madness/external/elemental/include/elemental/io/decl.hpp	/^    XPM,$/;"	e	enum:elem::FileFormatNS::FileFormat
XTERM_EXECUTABLE	build/src/madness/config.h	140;"	d
XXstart	src/examples/dielectric.cc	/^double XXstart;$/;"	v
XXstart	src/examples/gygi_soltion.cc	/^double XXstart;$/;"	v
XXstart	src/examples/molecularsurface.cc	/^double XXstart;$/;"	v
XXstart	src/examples/svpe.cc	/^double XXstart;$/;"	v
XferPtr	src/madness/world/test_worldptr.cc	/^            explicit XferPtr(madness::World& w) :$/;"	f	class:__anon6::WorldPtrTest::XferPtr
XferPtr	src/madness/world/test_worldptr.cc	/^        class XferPtr : public madness::WorldObject<XferPtr<T> > {$/;"	c	class:__anon6::WorldPtrTest	file:
XferRef	src/madness/world/test_worldref.cc	/^            explicit XferRef(madness::World& w) :$/;"	f	class:__anon1::WorldRefTest::XferRef
XferRef	src/madness/world/test_worldref.cc	/^        class XferRef : public madness::WorldObject<XferRef<T> > {$/;"	c	class:__anon1::WorldRefTest	file:
XmlUnitTestResultPrinter	src/madness/external/gtest/src/gtest.cc	/^XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
XmlUnitTestResultPrinter	src/madness/external/gtest/src/gtest.cc	/^class XmlUnitTestResultPrinter : public EmptyTestEventListener {$/;"	c	namespace:testing::internal	file:
Y20Sphere	src/apps/interior_bc/test_problems.h	/^        Y20Sphere(int k, double thresh, double eps, std::string penalty_name,$/;"	f	class:Y20Sphere
Y20Sphere	src/apps/interior_bc/test_problems.h	/^class Y20Sphere : public EmbeddedDirichlet {$/;"	c
YY_DECL	src/examples/compiler/mra-driver.hh	10;"	d
YetAnotherWrapperClass	src/examples/he.cc	/^    YetAnotherWrapperClass(const real_function_6d& f)$/;"	f	class:YetAnotherWrapperClass
YetAnotherWrapperClass	src/examples/he.cc	/^class YetAnotherWrapperClass {$/;"	c	file:
YetAnotherWrapperClass	src/examples/helium_mp2.cc	/^    YetAnotherWrapperClass(const real_function_6d& f)$/;"	f	class:YetAnotherWrapperClass
YetAnotherWrapperClass	src/examples/helium_mp2.cc	/^class YetAnotherWrapperClass {$/;"	c	file:
Yl	src/apps/nick/extract.py	/^        Yl = re.match( "^Y(\\d)0", line)$/;"	v
Yl	src/apps/nick/extract.py	/^    Yl      = re.match( "^Y(\\d)0", line)$/;"	v
Yl0	src/apps/nick/wavef.cc	/^Yl0::Yl0( int l=0 ) : l_(l)  { }$/;"	f	class:Yl0
Yl0	src/apps/nick/wavef.h	/^class Yl0 : public madness::FunctionFunctorInterface<double,NDIM> {$/;"	c
YlmFunctor	src/apps/polar/gth_pseudopotential.h	/^    YlmFunctor(int l, int m, const coord_3d& center) $/;"	f	class:YlmFunctor
YlmFunctor	src/apps/polar/gth_pseudopotential.h	/^class YlmFunctor : public FunctionFunctorInterface<double_complex, 3> {$/;"	c
YlmStore	src/apps/polar/gth_pseudopotential.h	/^    YlmStore(World& world, int maxL, const coord_3d& center) : maxL(maxL) {$/;"	f	class:YlmStore
YlmStore	src/apps/polar/gth_pseudopotential.h	/^class YlmStore {$/;"	c
Z	src/apps/chem/PNOGuessFunctions.h	/^		double Z;$/;"	m	class:madness::BasisFunctions::SolidHarmonicGaussian
Z	src/apps/nick/extra.h	/^  double Z[MAXNATOM]; \/\/ Nuclear charge of atoms$/;"	m	struct:InputParameters
Z	src/apps/nick/tdse1.cc	/^    double Z[MAXNATOM]; \/\/ Nuclear charge of atoms$/;"	m	struct:InputParameters	file:
Z	src/apps/nick/wavef.h	/^    double Z;$/;"	m	class:BoundWF
Z	src/apps/tdse/tdse.cc	/^  double Z[MAXNATOM]; \/\/ Nuclear charge of atoms$/;"	m	struct:InputParameters	file:
Z	src/apps/tdse/tdse.confused.cc	/^  double Z[MAXNATOM]; \/\/ Nuclear charge of atoms$/;"	m	struct:InputParameters	file:
Z	src/apps/tdse/tdse4.cc	/^static const double Z=1.0;$/;"	v	file:
Z	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *restrict Z;$/;"	m	struct:__anon23
Z1	src/examples/helium_mp2.cc	/^static double Z1(const coord_3d& r) {$/;"	f	file:
Z2	src/examples/helium_mp2.cc	/^static double Z2(const coord_3d& r) {$/;"	f	file:
ZERO	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	2656;"	d	file:
ZERO	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^#define ZERO(a)  pxor a,a$/;"	d
ZERO	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	2653;"	d	file:
ZGEMM_FNAME	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_Zmtxmq.cc	58;"	d	file:
Z_	src/apps/nick/wavef.h	/^    const double Z_;$/;"	m	class:ScatteringWF
Zcis	src/apps/chem/zcis.h	/^	Zcis(World& w, std::shared_ptr<Znemo> n) : world(w), cis_param(world), nemo(n),$/;"	f	class:madness::Zcis
Zcis	src/apps/chem/zcis.h	/^class Zcis {$/;"	c	namespace:madness
Zeff	src/apps/chem/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:madness::VLocalFunctor
Zeff	src/apps/polar/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:VLocalFunctor
Zero	src/madness/external/elemental/include/elemental/blas-like/level1/Zero.hpp	/^Zero( DistMatrix<T,U,V>& A )$/;"	f	namespace:elem
Zero	src/madness/external/elemental/include/elemental/blas-like/level1/Zero.hpp	/^Zero( Matrix<T>& A )$/;"	f	namespace:elem
ZeroNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Zero.hpp	/^ZeroNorm( const DistMatrix<F,U,V>& A )$/;"	f	namespace:elem
ZeroNorm	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Zero.hpp	/^ZeroNorm( const Matrix<F>& A )$/;"	f	namespace:elem
ZeroPivotException	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^    ZeroPivotException( const char* msg="Zero pivot was chosen" )$/;"	f	class:elem::ZeroPivotException
ZeroPivotException	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^class ZeroPivotException : public std::runtime_error$/;"	c	namespace:elem
Zeros	src/madness/external/elemental/include/elemental/matrices/Zeros.hpp	/^Zeros( BlockDistMatrix<T,U,V>& A, Int m, Int n )$/;"	f	namespace:elem
Zeros	src/madness/external/elemental/include/elemental/matrices/Zeros.hpp	/^Zeros( DistMatrix<T,U,V>& A, Int m, Int n )$/;"	f	namespace:elem
Zeros	src/madness/external/elemental/include/elemental/matrices/Zeros.hpp	/^Zeros( Matrix<T>& A, Int m, Int n )$/;"	f	namespace:elem
Zindex	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    *restrict Zindex;$/;"	m	struct:__anon23
Znemo	src/apps/chem/znemo.cc	/^Znemo::Znemo(World& world) : NemoBase(world), param(world), mol("input"), cparam() {$/;"	f	class:madness::Znemo
Znemo	src/apps/chem/znemo.h	/^class Znemo : public NemoBase {$/;"	c	namespace:madness
Zstruct	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  vec_t        *Zstruct;$/;"	m	struct:__anon31
Zsupp	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    *restrict Zsupp;$/;"	m	struct:__anon23
_ESOLVER_H	src/apps/hf/esolver.h	41;"	d
_HAS_EXCEPTIONS	src/madness/external/gtest/include/gtest/internal/gtest-port.h	346;"	d
_Myptr	src/madness/external/muParser/muParserFixes.h	/^	    _Ty *_Myptr;$/;"	m	class:std::_my_auto_ptr
_Q	src/apps/hf/solver.h	/^    tensorT _Q;$/;"	m	class:madness::Subspace
_Q	src/apps/hf/solver.h	/^    vectensorT _Q;$/;"	m	class:madness::SubspaceK
_Q	src/apps/moldft/subspace.h	/^    tensor_complex _Q;$/;"	m	class:Subspace
_Restrict	build/src/madness/config.h	127;"	d
_T	src/madness/external/muParser/muParserDef.h	58;"	d
_T	src/madness/external/muParser/muParserDef.h	62;"	d
_V	src/apps/hf/dft.h	/^    funcT _V;$/;"	m	class:madness::DFTNuclearPotentialOp
_V	src/apps/hf/hartreefock.h	/^    funcT _V;$/;"	m	class:madness::HartreeFock
_V	src/apps/hf/hartreefock.h	/^    funcT _V;$/;"	m	class:madness::HartreeFockNuclearPotentialOp
_Vc	src/apps/hf/dft.h	/^    funcT _Vc;$/;"	m	class:madness::DFTCoulombOp
_Vc	src/apps/hf/dft.h	/^    funcT _Vc;$/;"	m	class:madness::DFTCoulombPeriodicOp
_Vnuc	src/apps/hf/dft.h	/^    funcT _Vnuc;$/;"	m	class:madness::DFTNuclearChargeDensityOp
_Vnuc	src/apps/hf/test_hydro.cc	/^    funcT _Vnuc;$/;"	m	class:NuclearChargeDensityOp	file:
__Basis_basis_h__	src/apps/adrian/basis.h	14;"	d
__Basis_basis_h__	src/apps/bryan/basis.h	14;"	d
__Basis_gaussian_h__	src/apps/adrian/gaussian.h	16;"	d
__Basis_gaussian_h__	src/apps/bryan/gaussian.h	16;"	d
__Basis_polynomial_h__	src/apps/adrian/polynomial.h	16;"	d
__Basis_polynomial_h__	src/apps/bryan/polynomial.h	16;"	d
__ESInterface_ESInterface_h__	src/apps/adrian/ESInterface.h	15;"	d
__ESInterface_ESInterface_h__	src/apps/bryan/ESInterface.h	15;"	d
__ESInterface_NWChem_h__	src/apps/adrian/NWChem.h	12;"	d
__ESInterface_NWChem_h__	src/apps/bryan/NWChem.h	12;"	d
__INLINE__	src/madness/world/bgq_atomics.h	15;"	d
__MP_REAL_H__	src/apps/nick/mpreal.h	59;"	d
__RUN_chores	src/madness/world/parsec.cc	/^        static const __dague_chore_t __RUN_chores[] = {$/;"	v	file:
___	src/madness/tensor/slice.h	/^    static const std::vector<Slice> ___ = vector_factory(_,_,_,_,_,_); \/\/\/ Entire tensor$/;"	m	namespace:madness
__abs__	src/madness/mra/tools/longfloat.py	/^    def __abs__(self):$/;"	m	class:longfloat	file:
__add__	src/madness/mra/tools/longfloat.py	/^    def __add__(self,other):$/;"	m	class:longfloat	file:
__asciifile	src/madness/mra/tools/dump2.py	/^__asciifile = "coeffs"$/;"	v
__checksum	src/madness/mra/tools/dump2.py	/^__checksum = (1.57015282218922890,1.48602374574943450)$/;"	v
__cmp__	src/madness/mra/tools/longfloat.py	/^    def __cmp__(self, other):$/;"	m	class:longfloat	file:
__coerce__	src/madness/mra/tools/longfloat.py	/^    def __coerce__(self, other):$/;"	m	class:longfloat	file:
__common_exponent	src/madness/mra/tools/longfloat.py	/^    def __common_exponent(self,other):$/;"	m	class:longfloat	file:
__cos	src/madness/mra/tools/longfloat.py	/^    def __cos(self):$/;"	m	class:longfloat	file:
__div__	src/madness/mra/tools/longfloat.py	/^    def __div__(self, other):$/;"	m	class:longfloat	file:
__factorial	src/madness/mra/tools/quadrature.py	/^    def __factorial(self,n):$/;"	m	class:Quadrature	file:
__float__	src/madness/mra/tools/longfloat.py	/^    def __float__(self):$/;"	m	class:longfloat	file:
__grule	src/madness/mra/tools/quadrature.py	/^    def __grule(self):$/;"	m	class:Quadrature	file:
__hn	src/madness/mra/tools/quadrature.py	/^    def __hn(self, n, x):$/;"	m	class:Quadrature	file:
__hrule	src/madness/mra/tools/quadrature.py	/^    def __hrule(self):$/;"	m	class:Quadrature	file:
__init__	src/apps/moldft/moldx.py	/^    def __init__(self,symbol,covrad,vdwrad,col,name,atno):$/;"	m	class:Element
__init__	src/apps/polar/moldx.py	/^    def __init__(self,symbol,covrad,vdwrad,col,name,atno):$/;"	m	class:Element
__init__	src/madness/mra/tools/longfloat.py	/^    def __init__(self):$/;"	m	class:interpolators
__init__	src/madness/mra/tools/longfloat.py	/^    def __init__(self, func, lo, hi, n, precomputed=None):$/;"	m	class:interptable
__init__	src/madness/mra/tools/longfloat.py	/^    def __init__(self, value, nbits=None):$/;"	m	class:longfloat
__init__	src/madness/mra/tools/quadrature.py	/^    def __init__(self, order, region=[-1.,1.], rule='GaussLegendre',$/;"	m	class:Quadrature
__init__	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def __init__(self, *args):$/;"	m	class:MTXMAVX
__init__	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def __init__(self, *args):$/;"	m	class:MTXMAVX2
__init__	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def __init__(self, *args):$/;"	m	class:MTXMBGP
__init__	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def __init__(self, *args):$/;"	m	class:MTXMBGQ
__init__	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def __init__(self, *args):$/;"	m	class:MTXMSSE
__init__	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def __init__(self, cxa=False, cxb=False):$/;"	m	class:MTXMGen
__int__	src/madness/mra/tools/longfloat.py	/^    def __int__(self):$/;"	m	class:longfloat	file:
__kmax	src/madness/mra/tools/dump2.py	/^__kmax = 60$/;"	v
__ln	src/madness/mra/tools/quadrature.py	/^    def __ln(self, n, x):$/;"	m	class:Quadrature	file:
__log10	src/madness/mra/tools/longfloat.py	/^    def __log10(self):$/;"	m	class:longfloat	file:
__log2	src/madness/mra/tools/longfloat.py	/^    def __log2(self):$/;"	m	class:longfloat	file:
__long__	src/madness/mra/tools/longfloat.py	/^    def __long__(self):$/;"	m	class:longfloat	file:
__lrule	src/madness/mra/tools/quadrature.py	/^    def __lrule(self):$/;"	m	class:Quadrature	file:
__mp_do_test	src/madness/mra/tools/longfloat.py	/^def __mp_do_test(test_nbits,ntest=10,ntime=10):$/;"	f	file:
__mul__	src/madness/mra/tools/longfloat.py	/^    def __mul__(self,other):$/;"	m	class:longfloat	file:
__name__	src/madness/mra/tools/longfloat.py	/^    __name__ = 'longfloat'$/;"	v	class:longfloat
__nbits_in_mantissa	src/madness/mra/tools/longfloat.py	/^    def __nbits_in_mantissa(self):$/;"	m	class:longfloat	file:
__neg__	src/madness/mra/tools/longfloat.py	/^    def __neg__(self):$/;"	m	class:longfloat	file:
__nonzero__	src/madness/mra/tools/longfloat.py	/^    def __nonzero__(self):$/;"	m	class:longfloat	file:
__pn	src/madness/mra/tools/quadrature.py	/^    def __pn(self, n,x):$/;"	m	class:Quadrature	file:
__pos__	src/madness/mra/tools/longfloat.py	/^    def __pos__(self):$/;"	m	class:longfloat	file:
__pow__	src/madness/mra/tools/longfloat.py	/^    def __pow__(self,power):$/;"	m	class:longfloat	file:
__power2	src/madness/mra/tools/longfloat.py	/^    def __power2(self, exponent):$/;"	m	class:longfloat	file:
__radd__	src/madness/mra/tools/longfloat.py	/^    def __radd__(self,other):$/;"	m	class:longfloat	file:
__rdiv__	src/madness/mra/tools/longfloat.py	/^    def __rdiv__(self,other):$/;"	m	class:longfloat	file:
__repr__	src/madness/mra/tools/longfloat.py	/^    def __repr__(self):$/;"	m	class:interptable	file:
__repr__	src/madness/mra/tools/longfloat.py	/^    def __repr__(self):$/;"	m	class:longfloat	file:
__restrict__	build/src/madness/config.h	128;"	d
__rmul__	src/madness/mra/tools/longfloat.py	/^    def __rmul__(self,other):$/;"	m	class:longfloat	file:
__rpow__	src/madness/mra/tools/longfloat.py	/^    def __rpow__(self,power):$/;"	m	class:longfloat	file:
__rsub__	src/madness/mra/tools/longfloat.py	/^    def __rsub__(self,other):$/;"	m	class:longfloat	file:
__sin	src/madness/mra/tools/longfloat.py	/^    def __sin(self):$/;"	m	class:longfloat	file:
__small_int_recip	src/madness/mra/tools/longfloat.py	/^    __small_int_recip = [(0,0)]*501  # Cache 1\/n  for 0<n<=500 ... entry is (1\/n,nbits)$/;"	v	class:longfloat
__small_integer_reciprocal	src/madness/mra/tools/longfloat.py	/^    def __small_integer_reciprocal(self):$/;"	m	class:longfloat	file:
__str__	src/apps/moldft/moldx.py	/^    def __str__(self):$/;"	m	class:Element	file:
__str__	src/apps/polar/moldx.py	/^    def __str__(self):$/;"	m	class:Element	file:
__str__	src/madness/mra/tools/longfloat.py	/^    def __str__(self):$/;"	m	class:longfloat	file:
__sub__	src/madness/mra/tools/longfloat.py	/^    def __sub__(self,other):$/;"	m	class:longfloat	file:
_ainv	src/apps/exciting/wannier.cc	/^  Tensor<double> _ainv;$/;"	m	class:ExcitingApp	file:
_aobasis	src/apps/hf/solver.h	/^    AtomicBasisSet _aobasis;$/;"	m	class:madness::Solver
_aobasisf	src/apps/hf/solver.h	/^    cvecfuncT _aobasisf;$/;"	m	class:madness::Solver
_array	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _array(self, z, x, xx, y, yy, cpx):$/;"	m	class:MTXMGen
_autorefine	src/madness/mra/function_factory.h	/^    bool _autorefine;$/;"	m	class:madness::FunctionFactory
_avec	src/apps/exciting/wannier.cc	/^  Tensor<double> _avec;$/;"	m	class:ExcitingApp	file:
_bCoulomb	src/apps/hf/hartreefock.h	/^    bool _bCoulomb;$/;"	m	class:madness::HartreeFock
_bExchange	src/apps/hf/hartreefock.h	/^    bool _bExchange;$/;"	m	class:madness::HartreeFock
_back	src/madness/world/dqueue.h	/^        volatile int _back;    \/\/\/< Index of element at back of buffer$/;"	m	class:madness::DQueue
_barrier	src/madness/world/thread.h	/^        Barrier* _barrier; \/\/\/< Pointer to the shared barrier, `null` if there is only a single thread.$/;"	m	class:madness::TaskThreadEnv
_binv	src/apps/exciting/wannier.cc	/^  Tensor<double> _binv;$/;"	m	class:ExcitingApp	file:
_bops	src/apps/hf/eigsolver.h	/^  std::vector<poperatorT> _bops;$/;"	m	class:madness::EigSolver
_bvec	src/apps/exciting/wannier.cc	/^  Tensor<double> _bvec;$/;"	m	class:ExcitingApp	file:
_c	src/madness/mra/twoscale.cc	/^    static Tensor<double> _c;$/;"	m	namespace:madness	file:
_center	src/apps/exciting/wannier.cc	/^  coordT _center;$/;"	m	class:Wannier	file:
_close_braces	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _close_braces(self, indent=0):$/;"	m	class:MTXMGen
_coeff	src/apps/hf/eigsolver.h	/^  double _coeff;$/;"	m	class:madness::EigSolverOp
_coeffs	src/madness/mra/funcimpl.h	/^        coeffT _coeffs; \/\/\/< The coefficients, if any$/;"	m	class:madness::FunctionNode
_coeffs	src/madness/mra/funcimpl.h	/^        coeffT _coeffs;$/;"	m	struct:madness::ShallowNode
_compressed	src/madness/mra/function_factory.h	/^    bool _compressed;$/;"	m	class:madness::FunctionFactory
_cop	src/apps/hf/dft.h	/^    SeparatedConvolution<T,NDIM>* _cop;$/;"	m	class:madness::DFTCoulombOp
_cop	src/apps/hf/dft.h	/^    SeparatedConvolution<T,NDIM>* _cop;$/;"	m	class:madness::DFTCoulombPeriodicOp
_cop	src/apps/hf/solver.h	/^    SeparatedConvolution<T,NDIM>* _cop;$/;"	m	class:madness::Solver
_cop	src/apps/hf/test_hydro.cc	/^    SeparatedConvolution<T,NDIM>* _cop;$/;"	m	class:NuclearChargeDensityOp	file:
_cread	src/madness/mra/twoscale.cc	/^    static Tensor<double> _cread;$/;"	m	namespace:madness	file:
_dim	src/madness/tensor/basetensor.h	/^        long _dim[TENSOR_MAXDIM];	\/\/\/< Size of each dimension$/;"	m	class:madness::BaseTensor
_domega	src/apps/exciting/wannier.cc	/^  double _domega;$/;"	m	class:ExcitingApp	file:
_eigF	src/apps/hf/solver.h	/^    std::ofstream _eigF;$/;"	m	class:madness::Solver
_eigs	src/apps/hf/eigsolver.h	/^  std::vector<double> _eigs;$/;"	m	class:madness::EigSolver
_eigsa	src/apps/hf/solver.h	/^    std::vector<T> _eigsa;$/;"	m	class:madness::Solver
_eigsb	src/apps/hf/solver.h	/^    std::vector<T> _eigsb;$/;"	m	class:madness::Solver
_empty	src/madness/mra/function_factory.h	/^    bool _empty;$/;"	m	class:madness::FunctionFactory
_eta	src/apps/exciting/wannier.cc	/^  double _eta;$/;"	m	class:ExcitingApp	file:
_extra	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _extra(self):$/;"	m	class:MTXMAVX
_extra	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _extra(self):$/;"	m	class:MTXMBGQ
_extra	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _extra(self):$/;"	m	class:MTXMGen
_f	src/apps/chem/SCF.h	/^	Function<T,3> _f;$/;"	m	class:madness::VextCosFunctor
_f	src/apps/polar/moldft.cc	/^    Function<T, 3> _f;$/;"	m	class:VextCosFunctor	file:
_fence	src/madness/mra/function_factory.h	/^    bool _fence;$/;"	m	class:madness::FunctionFactory
_fma	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fma(self, at, bt, ct):$/;"	m	class:MTXMAVX
_fma	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fma(self, at, bt, ct):$/;"	m	class:MTXMAVX2
_fma	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fma(self, at, bt, ct):$/;"	m	class:MTXMBGP
_fma	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fma(self, at, bt, ct):$/;"	m	class:MTXMBGQ
_fma	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fma(self, at, bt, ct):$/;"	m	class:MTXMGen
_fma	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fma(self, at, bt, ct):$/;"	m	class:MTXMSSE
_fmaddsub	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fmaddsub(self, at, bt, ct):$/;"	m	class:MTXMAVX
_fmaddsub	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fmaddsub(self, at, bt, ct):$/;"	m	class:MTXMAVX2
_fmaddsub	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fmaddsub(self, at, bt, ct):$/;"	m	class:MTXMBGP
_fmaddsub	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fmaddsub(self, at, bt, ct):$/;"	m	class:MTXMBGQ
_fmaddsub	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fmaddsub(self, at, bt, ct):$/;"	m	class:MTXMGen
_fmaddsub	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _fmaddsub(self, at, bt, ct):$/;"	m	class:MTXMSSE
_footer	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _footer(self):$/;"	m	class:MTXMGen
_front	src/madness/world/dqueue.h	/^        volatile int _front;  \/\/\/< Index of element at front of buffer$/;"	m	class:madness::DQueue
_func	src/madness/mra/function_factory.h	/^    std::shared_ptr<CompositeFunctorInterface<T, NDIM, MDIM> > _func;$/;"	m	class:madness::CompositeFactory
_functor	src/madness/mra/function_factory.h	/^    std::shared_ptr<FunctionFunctorInterface<T, NDIM> > _functor;$/;"	m	class:madness::FunctionFactory
_g12	src/madness/mra/function_factory.h	/^    std::shared_ptr<FunctionImpl<T,NDIM> > _g12;            \/\/\/< supposedly a interaction potential$/;"	m	class:madness::CompositeFactory
_gamma	src/apps/chem/electronic_correlation_factor.h	/^    double _gamma;      \/\/\/< the correlation factor exp(-gamma r12)$/;"	m	class:madness::CorrelationFactor
_gamma	src/apps/chem/electronic_correlation_factor.h	/^    double _gamma;      \/\/\/< the correlation factor exp(-gamma r12)$/;"	m	class:madness::CorrelationFactor2
_glens	src/apps/exciting/wannier.cc	/^  std::vector<double> _glens;$/;"	m	class:ExcitingApp	file:
_gmaxlen	src/apps/exciting/wannier.cc	/^  double _gmaxlen;$/;"	m	class:ExcitingApp	file:
_gshells	src/apps/exciting/wannier.cc	/^  std::vector<int> _gshells;$/;"	m	class:ExcitingApp	file:
_gvecs	src/apps/exciting/wannier.cc	/^  std::vector<vec3dT> _gvecs;$/;"	m	class:ExcitingApp	file:
_has_children	src/madness/mra/funcimpl.h	/^        bool _has_children; \/\/\/< True if there are children$/;"	m	class:madness::FunctionNode
_has_children	src/madness/mra/funcimpl.h	/^        bool _has_children;$/;"	m	struct:madness::ShallowNode
_header	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/bgqdriver.py	/^def _header(complex_c, complex_a, complex_b):$/;"	f
_header	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/driver.py	/^def _header(bg, complex_c, complex_a, complex_b):$/;"	f
_header	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _header(self, func_name):$/;"	m	class:MTXMGen
_id	src/madness/tensor/basetensor.h	/^        long _id; 			\/\/\/< Id from TensorTypeData<T> in type_data.h$/;"	m	class:madness::BaseTensor
_id	src/madness/world/thread.h	/^        const int _id; \/\/\/< ID of this thread (0,...,nthread-1).$/;"	m	class:madness::TaskThreadEnv
_id	src/madness/world/world.h	/^        unsigned long _id; \/\/\/< Universe wide unique ID of this world.$/;"	m	class:madness::World
_init_quadrature	src/madness/mra/mraimpl.h	/^    void FunctionCommonData<T,NDIM>::_init_quadrature$/;"	f	class:madness::FunctionCommonData
_init_twoscale	src/madness/mra/mraimpl.h	/^    void FunctionCommonData<T,NDIM>::_init_twoscale() {$/;"	f	class:madness::FunctionCommonData
_initial_level	src/madness/mra/function_factory.h	/^    int _initial_level=FunctionDefaults<NDIM>::get_initial_level();$/;"	m	class:madness::FunctionFactory
_inner_loops	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _inner_loops(self, perm, sizes, indent=0, unrolls=None, bc_mod=""):$/;"	m	class:MTXMGen
_instance	src/apps/hf/outputwriter.h	/^  static OutputWriter* _instance;$/;"	m	class:OutputWriter
_instance	src/apps/hf/outputwriter.h	/^OutputWriter* OutputWriter::_instance = 0;$/;"	m	class:OutputWriter
_is_on_demand	src/madness/mra/function_factory.h	/^    bool _is_on_demand;$/;"	m	class:madness::FunctionFactory
_isinf	src/apps/nick/mpreal.h	/^inline bool _isinf(const mpreal& v)$/;"	f	namespace:mpfr
_isint	src/apps/nick/mpreal.h	/^inline bool _isint(const mpreal& v)$/;"	f	namespace:mpfr
_isnan	src/apps/nick/mpreal.h	/^inline bool _isnan(const mpreal& v)$/;"	f	namespace:mpfr
_isnum	src/apps/nick/mpreal.h	/^inline bool _isnum(const mpreal& v)$/;"	f	namespace:mpfr
_iszero	src/apps/nick/mpreal.h	/^inline bool _iszero(const mpreal& v)$/;"	f	namespace:mpfr
_it	src/apps/hf/solver.h	/^    int _it;$/;"	m	class:madness::Solver
_itr	src/apps/exciting/wannier.cc	/^  Vector<int,3> _itr;$/;"	m	class:Wannier	file:
_j0	src/apps/nick/mpreal.h	/^inline const mpreal _j0 (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_j1	src/apps/nick/mpreal.h	/^inline const mpreal _j1 (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_jn	src/apps/nick/mpreal.h	/^inline const mpreal _jn (long n, const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_k	src/madness/mra/function_factory.h	/^    int _k;$/;"	m	class:madness::FunctionFactory
_ket	src/madness/mra/function_factory.h	/^    std::shared_ptr<FunctionImpl<T,NDIM> > _ket;            \/\/\/< supposedly a 6D pair function ket$/;"	m	class:madness::CompositeFactory
_kmeshF	src/apps/hf/solver.h	/^    std::ofstream _kmeshF;$/;"	m	class:madness::Solver
_kpoints	src/apps/hf/eigsolver.h	/^  std::vector<kvecT> _kpoints;$/;"	m	class:madness::EigSolver
_kpoints	src/apps/hf/solver.h	/^    std::vector<KPoint> _kpoints;$/;"	m	class:madness::Solver
_kpoints	src/apps/hf/solver.h	/^    std::vector<KPoint> _kpoints;$/;"	m	class:madness::Subspace
_kpoints	src/apps/hf/solver.h	/^    std::vector<KPoint> _kpoints;$/;"	m	class:madness::SubspaceK
_kx	src/apps/exciting/wannier.cc	/^  double _kx;$/;"	m	class:ComplexExpFunction	file:
_kx	src/apps/hf/eigsolver.h	/^  double _kx;$/;"	m	class:madness::KPoint
_ky	src/apps/exciting/wannier.cc	/^  double _ky;$/;"	m	class:ComplexExpFunction	file:
_ky	src/apps/hf/eigsolver.h	/^  double _ky;$/;"	m	class:madness::KPoint
_kz	src/apps/exciting/wannier.cc	/^  double _kz;$/;"	m	class:ComplexExpFunction	file:
_kz	src/apps/hf/eigsolver.h	/^  double _kz;$/;"	m	class:madness::KPoint
_l	src/examples/helium_mp2.cc	/^    long _l;$/;"	m	struct:true_if_n_gt_op	file:
_load_a	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _load_a(self, unrolls, indent):$/;"	m	class:MTXMGen
_load_az	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _load_az(self, spaces, addr, temp, k, i):$/;"	m	class:MTXMGen
_load_b	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _load_b(self, unrolls, indent):$/;"	m	class:MTXMGen
_load_br	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _load_br(self, spaces, addr, temp, k, j):$/;"	m	class:MTXMAVX
_load_br	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _load_br(self, spaces, addr, temp, k, j):$/;"	m	class:MTXMGen
_load_bz	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _load_bz(self, spaces, addr, temp, k, j):$/;"	m	class:MTXMAVX
_load_bz	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _load_bz(self, spaces, addr, temp, k, j):$/;"	m	class:MTXMBGQ
_load_bz	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _load_bz(self, spaces, addr, temp, k, j):$/;"	m	class:MTXMGen
_load_c	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _load_c(self, unrolls, indent):$/;"	m	class:MTXMGen
_loops	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _loops(self, i, size, bc_mod=""):$/;"	m	class:MTXMGen
_lvecs	src/apps/exciting/wannier.cc	/^  std::vector<vec3dT> _lvecs;$/;"	m	class:ExcitingApp	file:
_main	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/bgqdriver.py	/^def _main(mtxms, complex_c, complex_a, complex_b):$/;"	f
_main	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/driver.py	/^def _main(mtxms, complex_c, complex_a, complex_b):$/;"	f
_matF	src/apps/hf/solver.h	/^    std::ofstream _matF;$/;"	m	class:madness::Solver
_maths	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _maths(self, unrolls, indent=0):$/;"	m	class:MTXMGen
_max_refine_level	src/madness/mra/function_factory.h	/^    int _max_refine_level;$/;"	m	class:madness::FunctionFactory
_maxomega	src/apps/exciting/wannier.cc	/^  double _maxomega;$/;"	m	class:ExcitingApp	file:
_maxsub	src/apps/moldft/subspace.h	/^    int _maxsub;$/;"	m	class:Subspace
_maxthresh	src/apps/hf/solver.h	/^    double _maxthresh;$/;"	m	class:madness::Solver
_mentity	src/apps/hf/electronicstructureapp.h	/^    const MolecularEntity& _mentity;$/;"	m	class:MolecularNuclearChargeDensityFunctor
_mentity	src/apps/hf/electronicstructureapp.h	/^    const MolecularEntity& _mentity;$/;"	m	class:MolecularPotentialFunctor
_mentity	src/apps/hf/ewald.cc	/^    const MolecularEntity& _mentity;$/;"	m	class:MolecularNuclearChargeDensityFunctor	file:
_mentity	src/apps/hf/solver.h	/^    MolecularEntity _mentity;$/;"	m	class:madness::Solver
_messageME	src/apps/hf/eigsolver.h	/^  std::string _messageME;$/;"	m	class:madness::EigSolverOp
_mm256_storeu2_m128d	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	/^_mm256_storeu2_m128d(double *__addr_hi, double *__addr_lo, __m256d __a)$/;"	f	namespace:madness
_mm256_storeu2_m128d	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	/^_mm256_storeu2_m128d(double *__addr_hi, double *__addr_lo, __m256d __a)$/;"	f	namespace:madness
_my_auto_ptr	src/madness/external/muParser/muParserFixes.h	/^	  _my_auto_ptr(_my_auto_ptr<_Ty>& _Right)$/;"	f	class:std::_my_auto_ptr
_my_auto_ptr	src/madness/external/muParser/muParserFixes.h	/^	  explicit _my_auto_ptr(_Ty *_Ptr = 0)$/;"	f	class:std::_my_auto_ptr
_my_auto_ptr	src/madness/external/muParser/muParserFixes.h	/^  class _my_auto_ptr$/;"	c	namespace:std
_n	src/apps/exciting/wannier.cc	/^  int _n;$/;"	m	class:Wannier	file:
_nao	src/apps/hf/solver.h	/^    int _nao;$/;"	m	class:madness::Solver
_ndim	src/madness/tensor/basetensor.h	/^        long _ndim;			\/\/\/< Number of dimensions (-1=invalid; 0=no supported; >0=tensor)$/;"	m	class:madness::BaseTensor
_ngridk0	src/apps/exciting/wannier.cc	/^  int _ngridk0;$/;"	m	class:ExcitingApp	file:
_ngridk1	src/apps/exciting/wannier.cc	/^  int _ngridk1;$/;"	m	class:ExcitingApp	file:
_ngridk2	src/apps/exciting/wannier.cc	/^  int _ngridk2;$/;"	m	class:ExcitingApp	file:
_ngshells	src/apps/exciting/wannier.cc	/^  int _ngshells;$/;"	m	class:ExcitingApp	file:
_norm_tree	src/madness/mra/funcimpl.h	/^        double _norm_tree; \/\/\/< After norm_tree will contain norm of coefficients summed up tree$/;"	m	class:madness::FunctionNode
_nrshells	src/apps/exciting/wannier.cc	/^  int _nrshells;$/;"	m	class:ExcitingApp	file:
_nthread	src/madness/world/thread.h	/^        const int _nthread; \/\/\/< Number of threads collaborating on task.$/;"	m	class:madness::TaskThreadEnv
_obs	src/apps/hf/eigsolver.h	/^  std::vector<IEigSolverObserver<T,NDIM>*> _obs;$/;"	m	class:madness::EigSolver
_occs	src/apps/hf/eigsolver.h	/^  std::vector<double> _occs;$/;"	m	class:madness::EigSolver
_occsa	src/apps/hf/solver.h	/^    std::vector<double> _occsa;$/;"	m	class:madness::Solver
_occsb	src/apps/hf/solver.h	/^    std::vector<double> _occsb;$/;"	m	class:madness::Solver
_omega	src/apps/chem/SCF.h	/^	double _omega;$/;"	m	class:madness::VextCosFunctor
_omega	src/apps/polar/moldft.cc	/^    double _omega;$/;"	m	class:VextCosFunctor	file:
_ops	src/apps/hf/eigsolver.h	/^  std::vector< EigSolverOp<T,NDIM>* > _ops;$/;"	m	class:madness::EigSolver
_outputF	src/apps/hf/solver.h	/^    std::ofstream _outputF;$/;"	m	class:madness::Solver
_p	src/madness/tensor/tensor.h	/^        T* MADNESS_RESTRICT _p;$/;"	m	class:madness::Tensor
_p0	src/madness/tensor/tensoriter.h	/^        T* _p0;$/;"	m	class:madness::TensorIterator
_p0_save	src/madness/tensor/tensoriter.h	/^        T* _p0_save;$/;"	m	class:madness::TensorIterator
_p1	src/madness/tensor/tensoriter.h	/^        Q* _p1;$/;"	m	class:madness::TensorIterator
_p1_save	src/madness/tensor/tensoriter.h	/^        Q* _p1_save;$/;"	m	class:madness::TensorIterator
_p2	src/madness/tensor/tensoriter.h	/^        R* _p2;$/;"	m	class:madness::TensorIterator
_p2_save	src/madness/tensor/tensoriter.h	/^        R* _p2_save;$/;"	m	class:madness::TensorIterator
_params	src/apps/hf/dft.h	/^      ElectronicStructureParams _params;$/;"	m	class:madness::DFT
_params	src/apps/hf/eigsolver.h	/^  ElectronicStructureParams _params;$/;"	m	class:madness::EigSolver
_params	src/apps/hf/solver.h	/^    ElectronicStructureParams _params;$/;"	m	class:madness::Solver
_params	src/apps/hf/solver.h	/^    ElectronicStructureParams _params;$/;"	m	class:madness::Subspace
_params	src/apps/hf/solver.h	/^    ElectronicStructureParams _params;$/;"	m	class:madness::SubspaceK
_particle1	src/madness/mra/function_factory.h	/^    std::shared_ptr<FunctionImpl<T,MDIM> > _particle1;      \/\/\/< supposedly particle 1$/;"	m	class:madness::CompositeFactory
_particle2	src/madness/mra/function_factory.h	/^    std::shared_ptr<FunctionImpl<T,MDIM> > _particle2;      \/\/\/< supposedly particle 2$/;"	m	class:madness::CompositeFactory
_phis	src/apps/hf/eigsolver.h	/^  std::vector<funcT> _phis;$/;"	m	class:madness::EigSolver
_phisa	src/apps/hf/solver.h	/^    vecfuncT _phisa;$/;"	m	class:madness::Solver
_phisb	src/apps/hf/solver.h	/^    vecfuncT _phisb;$/;"	m	class:madness::Solver
_pmap	src/madness/mra/function_factory.h	/^    std::shared_ptr<WorldDCPmapInterface<Key<NDIM> > > _pmap;$/;"	m	class:madness::FunctionFactory
_post_process	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _post_process(self, lines):$/;"	m	class:MTXMBGP
_post_process	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _post_process(self, lines):$/;"	m	class:MTXMBGQ
_post_process	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _post_process(self, lines):$/;"	m	class:MTXMGen
_qv	src/apps/exciting/wannier.cc	/^  vec3dT _qv;$/;"	m	class:ExcitingApp	file:
_refine	src/madness/mra/function_factory.h	/^    bool _refine;$/;"	m	class:madness::FunctionFactory
_residual	src/apps/hf/solver.h	/^    double _residual;$/;"	m	class:madness::Solver
_residual	src/apps/hf/solver.h	/^    double _residual;$/;"	m	class:madness::SubspaceK
_rho	src/apps/hf/eigsolver.h	/^  Function<double,NDIM> _rho;$/;"	m	class:madness::EigSolver
_rho	src/apps/hf/solver.h	/^    rfunctionT _rho;$/;"	m	class:madness::Solver
_rhoa	src/apps/hf/solver.h	/^    rfunctionT _rhoa;$/;"	m	class:madness::Solver
_rhob	src/apps/hf/solver.h	/^    rfunctionT _rhob;$/;"	m	class:madness::Solver
_rhon	src/apps/hf/dft.h	/^    funcT _rhon;$/;"	m	class:madness::DFTCoulombPeriodicOp
_rhon	src/apps/hf/dft.h	/^    funcT _rhon;$/;"	m	class:madness::DFTNuclearChargeDensityOp
_rhon	src/apps/hf/test_hydro.cc	/^    funcT _rhon;$/;"	m	class:NuclearChargeDensityOp	file:
_rlens	src/apps/exciting/wannier.cc	/^  std::vector<double> _rlens;$/;"	m	class:ExcitingApp	file:
_rmaxlen	src/apps/exciting/wannier.cc	/^  double _rmaxlen;$/;"	m	class:ExcitingApp	file:
_rshells	src/apps/exciting/wannier.cc	/^  std::vector<int> _rshells;$/;"	m	class:ExcitingApp	file:
_s0	src/madness/tensor/tensoriter.h	/^        long _s0;$/;"	m	class:madness::TensorIterator
_s1	src/madness/tensor/tensoriter.h	/^        long _s1;$/;"	m	class:madness::TensorIterator
_s2	src/madness/tensor/tensoriter.h	/^        long _s2;$/;"	m	class:madness::TensorIterator
_shptr	src/madness/tensor/tensor.h	/^        TENSOR_SHARED_PTR <T> _shptr;$/;"	m	class:madness::Tensor
_size	src/madness/tensor/basetensor.h	/^        long _size;			\/\/\/< Number of elements in the tensor$/;"	m	class:madness::BaseTensor
_solver	src/apps/hf/dft.h	/^      EigSolver<T,NDIM>* _solver;$/;"	m	class:madness::DFT
_solver	src/apps/hf/hartreefock.h	/^    EigSolver<T,NDIM>* _solver;$/;"	m	class:madness::HartreeFock
_special_level	src/madness/mra/function_factory.h	/^    int _special_level=FunctionDefaults<NDIM>::get_special_level();$/;"	m	class:madness::FunctionFactory
_special_points	src/madness/mra/function_factory.h	/^    std::vector<Vector<double,NDIM> > _special_points;$/;"	m	class:madness::FunctionFactory
_specialpts	src/apps/hf/electronicstructureapp.h	/^    const std::vector<coordT> _specialpts;$/;"	m	class:MolecularNuclearChargeDensityFunctor
_specialpts	src/apps/hf/electronicstructureapp.h	/^  std::vector<coordT> _specialpts;$/;"	m	class:AtomicBasisFunctor
_specialpts	src/apps/hf/ewald.cc	/^    const std::vector<coordT> _specialpts;$/;"	m	class:MolecularNuclearChargeDensityFunctor	file:
_spinpol	src/apps/hf/dft.h	/^    bool _spinpol;$/;"	m	class:madness::DFTCoulombOp
_spinpol	src/apps/hf/dft.h	/^    bool _spinpol;$/;"	m	class:madness::DFTCoulombPeriodicOp
_spinpol	src/apps/moldft/subspace.h	/^    bool _spinpol;$/;"	m	class:Subspace
_store_c	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _store_c(self, unrolls, indent, bc_mod=""):$/;"	m	class:MTXMGen
_stride	src/madness/tensor/basetensor.h	/^        long _stride[TENSOR_MAXDIM];     \/\/\/< Increment between elements in each dimension$/;"	m	class:madness::BaseTensor
_subspace	src/apps/hf/solver.h	/^    Subspace<T,NDIM>* _subspace;$/;"	m	class:madness::Solver
_subspace	src/apps/hf/solver.h	/^    subspaceT _subspace;$/;"	m	class:madness::Subspace
_subspace	src/apps/hf/solver.h	/^    vecsubspaceT _subspace;$/;"	m	class:madness::SubspaceK
_subspace	src/apps/moldft/subspace.h	/^    subspaceT _subspace;$/;"	m	class:Subspace
_temp	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _temp(self, prefix, x, y):$/;"	m	class:MTXMGen
_temp_dec	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _temp_dec(self, size):$/;"	m	class:MTXMGen
_temps	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _temps(self, prefix, x, y, size):$/;"	m	class:MTXMGen
_temps_to_load	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def _temps_to_load(self, unrolls, z, x, y, tname=None):$/;"	m	class:MTXMGen
_tester	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/bgqdriver.py	/^def _tester(i, m, trans=False):$/;"	f
_tester	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/driver.py	/^def _tester(i, m, trans=False):$/;"	f
_thresh	src/apps/hf/eigsolver.h	/^  double _thresh;$/;"	m	class:madness::EigSolverOp
_thresh	src/apps/hf/hartreefock.h	/^    double _thresh;$/;"	m	class:madness::HartreeFock
_thresh	src/madness/mra/function_factory.h	/^    double _thresh;$/;"	m	class:madness::FunctionFactory
_timer	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/bgqdriver.py	/^def _timer(mtxms, complex_c, complex_a, complex_b):$/;"	f
_timer	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/driver.py	/^def _timer(mtxms, complex_c, complex_a, complex_b):$/;"	f
_transtimer	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/bgqdriver.py	/^def _transtimer(mtxms, complex_c, complex_a, complex_b):$/;"	f
_transtimer	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/driver.py	/^def _transtimer(mtxms, complex_c, complex_a, complex_b):$/;"	f
_truncate_mode	src/madness/mra/function_factory.h	/^    int _truncate_mode;$/;"	m	class:madness::FunctionFactory
_truncate_on_project	src/madness/mra/function_factory.h	/^    bool _truncate_on_project;$/;"	m	class:madness::FunctionFactory
_v1	src/madness/mra/function_factory.h	/^    std::shared_ptr<FunctionImpl<T,MDIM> > _v1;             \/\/\/< supposedly a potential for particle 1$/;"	m	class:madness::CompositeFactory
_v2	src/madness/mra/function_factory.h	/^    std::shared_ptr<FunctionImpl<T,MDIM> > _v2;             \/\/\/< supposedly a potential for particle 2$/;"	m	class:madness::CompositeFactory
_vkc	src/apps/exciting/wannier.cc	/^  std::vector<vec3dT> _vkc;$/;"	m	class:ExcitingApp	file:
_vkl	src/apps/exciting/wannier.cc	/^  std::vector<vec3dT> _vkl;$/;"	m	class:ExcitingApp	file:
_vnuc	src/apps/hf/solver.h	/^    rfunctionT _vnuc;$/;"	m	class:madness::Solver
_vnucrhon	src/apps/hf/dft.h	/^      Function<double,NDIM> _vnucrhon;$/;"	m	class:madness::DFT
_vnucrhon	src/apps/hf/solver.h	/^    rfunctionT _vnucrhon;$/;"	m	class:madness::Solver
_weight	src/apps/hf/eigsolver.h	/^  double _weight;$/;"	m	class:madness::KPoint
_wfs	src/apps/exciting/wannier.cc	/^  std::vector<wannierf> _wfs;$/;"	m	class:ExcitingApp	file:
_wkpt	src/apps/exciting/wannier.cc	/^  std::vector<vec3dT> _wkpt;$/;"	m	class:ExcitingApp	file:
_world	src/apps/exciting/wannier.cc	/^  World& _world;$/;"	m	class:ExcitingApp	file:
_world	src/apps/hf/dft.h	/^      World& _world;$/;"	m	class:madness::DFT
_world	src/apps/hf/eigsolver.h	/^  World& _world;$/;"	m	class:madness::EigSolver
_world	src/apps/hf/eigsolver.h	/^  World& _world;$/;"	m	class:madness::EigSolverOp
_world	src/apps/hf/hartreefock.h	/^    World& _world;$/;"	m	class:madness::HartreeFock
_world	src/apps/hf/solver.h	/^    World& _world;$/;"	m	class:madness::Solver
_world	src/apps/hf/solver.h	/^    World& _world;$/;"	m	class:madness::Subspace
_world	src/apps/hf/solver.h	/^    World& _world;$/;"	m	class:madness::SubspaceK
_world	src/apps/ii/systolic.h	/^        World& _world;$/;"	m	class:madness::DistributedMatrix
_world	src/madness/mra/function_factory.h	/^    World& _world;$/;"	m	class:madness::FunctionFactory
_xcfunc	src/apps/hf/dft.h	/^      EigSolverOp<T,NDIM>* _xcfunc;$/;"	m	class:madness::DFT
_y0	src/apps/nick/mpreal.h	/^inline const mpreal _y0 (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_y1	src/apps/nick/mpreal.h	/^inline const mpreal _y1 (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_yn	src/apps/nick/mpreal.h	/^inline const mpreal _yn (long n, const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
a	src/apps/chem/CCStructures.h	/^    vector_real_function_3d a;$/;"	m	struct:madness::CCPairFunction
a	src/apps/chem/correlationfactor.h	/^    const double a;$/;"	m	class:madness::GradientalGaussSlater
a	src/apps/chem/correlationfactor.h	/^    double a;$/;"	m	class:madness::poly4erfc
a	src/apps/moldft/fci/timer.f	/^      double precision a(/;"	v
a	src/apps/nick/interp.h	/^    std::vector<T> a;           \/\/< (1+4)*npt vector of x and polynomial coefficients$/;"	m	class:CubicInterpolationTable
a	src/apps/nick/wavef.h	/^    double a;$/;"	m	class:Gaussian
a	src/examples/nonlinschro.cc	/^static const double a = 0.125;$/;"	v	file:
a	src/madness/misc/interpolation_1d.h	/^    std::vector<T> a;     \/\/\/< (1+4)*npt vector of x and polynomial coefficients$/;"	m	class:CubicInterpolationTable
a	src/madness/mra/minmax/y1.cc	/^FLOAT a(int j, FLOAT z) {$/;"	f
a	src/madness/mra/sdf_shape_3D.h	/^        double a; \/\/\/< half the length of the cylinder$/;"	m	class:madness::SDFCylinder
a	src/madness/mra/testsuite.cc	/^    const double a;$/;"	m	class:QMtest	file:
a	src/madness/mra/tools/mathutil.py	/^    a = zeromatrix(k,n)$/;"	v
a	src/madness/mra/tools/mathutil.py	/^    a = zeromatrix(n,n)$/;"	v
a	src/madness/tensor/tempspec.py	/^a = []$/;"	v
a	src/madness/world/test_ar.cc	/^    float a;$/;"	m	class:A	file:
a	src/madness/world/test_future.cc	/^    string a(const string& input) const {$/;"	f	class:Fred
a	src/madness/world/test_hashthreaded.cc	/^    ConcurrentHashMap<int,double>& a; \/\/ Better would be a shared pointer$/;"	m	class:Peasant	file:
a	src/madness/world/test_hashthreaded.cc	/^    ConcurrentHashMap<int,double>& a; \/\/ Better would be a shared pointer$/;"	m	class:Worker	file:
a	src/madness/world/test_prof.cc	/^void a() {$/;"	f
a	src/madness/world/test_sig.cc	/^void a() {$/;"	f
a	src/madness/world/test_world.cc	/^    int a;$/;"	m	class:Foo	file:
a0	src/apps/chem/correlationfactor.h	/^    double a0, a1, a2, a3, a4;$/;"	m	class:madness::poly4erfc
a1	src/apps/chem/correlationfactor.h	/^    double a0, a1, a2, a3, a4;$/;"	m	class:madness::poly4erfc
a1	src/examples/vnucso.cc	/^const double a1 = 1.0;     \/\/ potential parameter$/;"	v
a2	src/apps/chem/correlationfactor.h	/^    double a0, a1, a2, a3, a4;$/;"	m	class:madness::poly4erfc
a2	src/examples/vnucso.cc	/^const double a2 = 1.0;     \/\/ potential parameter$/;"	v
a3	src/apps/chem/correlationfactor.h	/^    double a0, a1, a2, a3, a4;$/;"	m	class:madness::poly4erfc
a4	src/apps/chem/correlationfactor.h	/^    double a0, a1, a2, a3, a4;$/;"	m	class:madness::poly4erfc
aForm	src/apps/nick/wavef.cc	/^complexd ScatteringWF::aForm(complexd ZZ) const {$/;"	f	class:ScatteringWF
a_	src/apps/chem/correlationfactor.h	/^	double a_;$/;"	m	class:madness::LinearSlater
a_	src/apps/chem/correlationfactor.h	/^	double a_;$/;"	m	class:madness::Polynomial
a_	src/apps/chem/correlationfactor.h	/^	double a_;$/;"	m	class:madness::Slater
a_gaussian	src/examples/derivatives.cc	/^const double a_gaussian = 1.0; $/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(const muChar_t*) mupGetErrorExpr(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(const muChar_t*) mupGetErrorMsg(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(const muChar_t*) mupGetErrorToken(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(const muChar_t*) mupGetExpr(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(int) mupGetConstNum(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(int) mupGetExprVarNum(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(int) mupGetVarNum(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(muBool_t) mupError(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(muFloat_t) mupEval(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(muInt_t) mupGetErrorCode(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(muInt_t) mupGetErrorPos(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(void) mupClearConst(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(void) mupClearFun(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(void) mupClearOprt(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(void) mupClearVar(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(void) mupErrorReset(muParserHandle_t a_hParser);$/;"	v
a_hParser	src/madness/external/muParser/muParserDLL.h	/^API_EXPORT(void) mupRelease(muParserHandle_t a_hParser);$/;"	v
a_param	src/apps/chem/correlationfactor.h	/^	double a_param() const {return 1.0;}$/;"	f	class:madness::LinearSlater
a_param	src/apps/chem/correlationfactor.h	/^	double a_param() const {return a_;}$/;"	f	class:madness::Polynomial
a_param	src/apps/chem/correlationfactor.h	/^	double a_param() const {return a_;}$/;"	f	class:madness::Slater
a_param	src/apps/chem/correlationfactor.h	/^    double a_param() const {return a;}$/;"	f	class:madness::poly4erfc
aa	src/madness/mra/testbsh.cc	/^double aa;$/;"	v
abs	src/apps/hf/complexfun.h	/^Function<typename TensorTypeData<Q>::scalar_type,NDIM> abs(const Function<Q,NDIM>& func)$/;"	f	namespace:madness
abs	src/apps/hf/complexfun.h	/^double abs(double x) {return fabs(x);}$/;"	f	namespace:madness
abs	src/apps/nick/mpreal.h	/^inline const mpreal abs(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
abs	src/madness/mra/mra.h	/^        Function<T,NDIM>& abs(bool fence = true) {$/;"	f	class:madness::Function
abs	src/madness/tensor/tensor.h	/^    Tensor< typename Tensor<T>::scalar_type > abs(const Tensor<T>& t) {$/;"	f	namespace:madness
abs	src/madness/tensor/tensor.h	/^    static long abs(long a) {$/;"	f	namespace:std
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::GeneralBlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    typedef AbstractBlockDistMatrix<T> absType;$/;"	t	class:elem::BlockDistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::GeneralDistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
absType	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    typedef AbstractDistMatrix<T> absType;$/;"	t	class:elem::DistMatrix
abs_c	src/apps/chem/PNOParameters.h	/^	bool abs_c()const { return get<bool >("abs_c");}$/;"	f	class:madness::F12Parameters
abs_inplace	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::abs_inplace(bool fence) {$/;"	f	class:madness::FunctionImpl
abs_op	src/apps/hf/complexfun.h	/^struct abs_op$/;"	s	namespace:madness
abs_square	src/apps/exciting/wannier.cc	/^Function<typename TensorTypeData<Q>::scalar_type,NDIM> abs_square(const Function<Q,NDIM>& func)$/;"	f
abs_square	src/apps/hf/complexfun.h	/^Function<typename TensorTypeData<Q>::scalar_type,NDIM> abs_square(const Function<Q,NDIM>& func)$/;"	f	namespace:madness
abs_square	src/madness/mra/mra.h	/^        Function<T,NDIM>& abs_square(bool fence = true) {$/;"	f	class:madness::Function
abs_square_inplace	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::abs_square_inplace(bool fence) {$/;"	f	class:madness::FunctionImpl
abs_square_op	src/apps/exciting/wannier.cc	/^struct abs_square_op$/;"	s	file:
abs_square_op	src/apps/hf/complexfun.h	/^struct abs_square_op$/;"	s	namespace:madness
abs_u	src/apps/chem/PNOParameters.h	/^	bool abs_u()const { return get<bool >("abs_u");}$/;"	f	class:madness::F12Parameters
absinplace	src/madness/mra/mraimpl.h	/^        struct absinplace {$/;"	s	namespace:madness::detail
absmax	src/madness/tensor/tensor.h	/^        scalar_type absmax(long *ind = 0) const {$/;"	f	class:madness::Tensor
absmax	src/madness/world/worldgop.h	/^        inline void absmax(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
absmin	src/madness/tensor/tensor.h	/^        scalar_type absmin(long *ind = 0) const {$/;"	f	class:madness::Tensor
absmin	src/madness/world/worldgop.h	/^        inline void absmin(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
abssq	src/madness/mra/vmra.h	/^std::vector<Function<typename Tensor<T>::scalar_type, NDIM>> abssq($/;"	f	namespace:madness
abssquareinplace	src/madness/mra/mraimpl.h	/^        struct abssquareinplace {$/;"	s	namespace:madness::detail
ac	src/apps/chem/nemo.h	/^	AC<3> ac;$/;"	m	class:madness::Nemo
acKmos	src/apps/chem/PNOF12Potentials.h	/^	vector_real_function_3d acKmos; 										\/\/\/< Intermediate for K(active_mos) (takes approx. as much memory than the mos itself. Since #mos<<<#PNOs this should not be a problem$/;"	m	class:madness::F12Potentials
ac_data	src/apps/chem/CalculationParameters.h	/^	std::string ac_data() const {return get<std::string>("ac_data");}$/;"	f	struct:madness::CalculationParameters
ac_param_	src/apps/chem/AC.h	/^	ACParameters<NDIM> ac_param_;$/;"	m	class:madness::AC
ac_param_	src/apps/chem/AC.h	/^	const ACParameters<NDIM> &ac_param_;$/;"	m	class:madness::int_factor_functor
ac_param_	src/apps/chem/AC.h	/^	const ACParameters<NDIM> &ac_param_;$/;"	m	class:madness::lr_pot_functor
accel	src/apps/nick/parse.py	/^accel   = []$/;"	v
accelFile	src/apps/nick/parse.py	/^accelFile  = open("accel.dat",     'w')$/;"	v
accessor	src/madness/mra/function_common_data.h	/^        typedef ConcurrentHashMap<int,double>::accessor accessor;$/;"	t	class:madness::Timer
accessor	src/madness/world/worlddc.h	/^        typedef typename implT::accessor accessor;$/;"	t	class:madness::WorldContainer
accessor	src/madness/world/worlddc.h	/^        typedef typename internal_containerT::accessor accessor;$/;"	t	class:madness::WorldContainerImpl
accessor	src/madness/world/worldhashmap.h	/^        typedef Hash_private::HashAccessor<hashT,entryT::WRITELOCK> accessor;$/;"	t	class:madness::ConcurrentHashMap
accumulate	src/madness/mra/funcimpl.h	/^        double accumulate(const coeffT& t, const typename FunctionNode<T,NDIM>::dcT& c,$/;"	f	class:madness::FunctionNode
accumulate	src/madness/mra/function_common_data.h	/^        void accumulate(const double time) const {$/;"	f	class:madness::Timer
accumulate2	src/madness/mra/funcimpl.h	/^        double accumulate2(const tensorT& t, const typename FunctionNode<T,NDIM>::dcT& c,$/;"	f	class:madness::FunctionNode
accumulate_timer	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::accumulate_timer(const double time) const {$/;"	f	class:madness::FunctionImpl
acmos	src/apps/chem/PNOF12Potentials.h	/^	vector_real_function_3d acmos;											\/\/\/< Active Molecular Orbitals$/;"	m	class:madness::F12Potentials
acos	src/apps/nick/mpreal.h	/^inline const mpreal acos (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
acos	src/madness/mra/tools/longfloat.py	/^    def acos(self):$/;"	m	class:longfloat
acosh	src/apps/nick/mpreal.h	/^inline const mpreal acosh  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
act_ground_energies	src/apps/adrian/TDDFT.h	/^      act_ground_energies;  \/\/ Ground state energies being used for calculation$/;"	m	class:TDHF
act_ground_energies	src/apps/adrian/TDHF.h	/^      Tensor<double> act_ground_energies;             \/\/ Ground state energies being used for calculation$/;"	m	class:TDHF
act_ground_energies	src/apps/adrian/TDHF2.h	/^      Tensor<double> act_ground_energies;             \/\/ Ground state energies being used for calculation$/;"	m	class:TDHF
act_ground_energies	src/apps/bryan/TDHF.h	/^      Tensor<double> act_ground_energies;             \/\/ Ground state energies being used for calculation$/;"	m	class:TDHF
act_ground_energies	src/apps/bryan/TDHF2.h	/^      Tensor<double> act_ground_energies;             \/\/ Ground state energies being used for calculation$/;"	m	class:TDHF
act_num_orbitals	src/apps/adrian/TDDFT.h	/^  unsigned int act_num_orbitals;  \/\/ Number of ground state orbitals being used$/;"	m	class:TDHF
act_num_orbitals	src/apps/adrian/TDHF.h	/^      unsigned int act_num_orbitals;                  \/\/ Number of ground state orbitals being used in calculation$/;"	m	class:TDHF
act_num_orbitals	src/apps/adrian/TDHF2.h	/^      unsigned int act_num_orbitals;                  \/\/ Number of ground state orbitals being used in calculation$/;"	m	class:TDHF
act_num_orbitals	src/apps/bryan/TDHF.h	/^      unsigned int act_num_orbitals;                  \/\/ Number of ground state orbitals being used in calculation$/;"	m	class:TDHF
act_num_orbitals	src/apps/bryan/TDHF2.h	/^      unsigned int act_num_orbitals;                  \/\/ Number of ground state orbitals being used in calculation$/;"	m	class:TDHF
act_orbitals	src/apps/adrian/TDDFT.h	/^      act_orbitals;  \/\/ Ground state orbitals being used in calculation$/;"	m	class:TDHF
act_orbitals	src/apps/adrian/TDHF.h	/^      std::vector<real_function_3d> act_orbitals;     \/\/ Ground state orbitals being used in calculation$/;"	m	class:TDHF
act_orbitals	src/apps/adrian/TDHF2.h	/^      std::vector<real_function_3d> act_orbitals;     \/\/ Ground state orbitals being used in calculation$/;"	m	class:TDHF
act_orbitals	src/apps/bryan/TDHF.h	/^      std::vector<real_function_3d> act_orbitals;     \/\/ Ground state orbitals being used in calculation$/;"	m	class:TDHF
act_orbitals	src/apps/bryan/TDHF2.h	/^      std::vector<real_function_3d> act_orbitals;     \/\/ Ground state orbitals being used in calculation$/;"	m	class:TDHF
action	src/apps/interior_bc/test_problems.h	/^        void action(const Function<double, 3> &invec,$/;"	f	class:DirichletCondIntOp
action	src/examples/test_gmres.cc	/^		void action(const Function<double, 3> &invec,$/;"	f	class:RealFuncIdentOp
action	src/examples/test_gmres.cc	/^		void action(const Function<double, 3> &invec,$/;"	f	class:RealFuncLinearOp
action	src/examples/test_gmres.cc	/^		void action(const Function<std::complex<double>, 3> &invec,$/;"	f	class:ComplexFuncIdentOp
action	src/examples/test_gmres.cc	/^		void action(const Function<std::complex<double>, 3> &invec,$/;"	f	class:ComplexFuncLinearOp
action	src/examples/test_gmres.cc	/^		void action(const Vector<double, 3> &invec, Vector<double, 3> &outvec)$/;"	f	class:RealVecIdentOp
action	src/examples/test_gmres.cc	/^		void action(const Vector<double, 3> &invec, Vector<double, 3> &outvec)$/;"	f	class:RealVecLinearOp
action	src/examples/test_gmres.cc	/^		void action(const Vector<std::complex<double>, 3> &invec,$/;"	f	class:ComplexVecIdentOp
action	src/examples/test_gmres.cc	/^		void action(const Vector<std::complex<double>, 3> &invec,$/;"	f	class:ComplexVecLinearOp
activate	src/madness/mra/funcimpl.h	/^    	Future<CoeffTracker> activate() const {$/;"	f	class:madness::CoeffTracker
activate	src/madness/mra/funcimpl.h	/^            Future<this_type> activate() const {$/;"	f	struct:madness::FunctionImpl::add_op
activate	src/madness/mra/funcimpl.h	/^            Future<this_type> activate() const {$/;"	f	struct:madness::FunctionImpl::hartree_op
activate	src/madness/mra/funcimpl.h	/^            Future<this_type> activate() const {$/;"	f	struct:madness::FunctionImpl::multiply_op
activate	src/madness/mra/funcimpl.h	/^            Future<this_type> activate() const {$/;"	f	struct:madness::FunctionImpl::project_out_op
activate	src/madness/mra/funcimpl.h	/^            Future<this_type> activate() const {$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
activate	src/madness/mra/funcimpl.h	/^            Future<this_type> activate() const {$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
activate	src/madness/mra/funcimpl.h	/^          Future<this_type> activate() const {$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
active	src/apps/adrian/TDDFT.h	/^  std::vector<int> active;     \/\/ The labels of orbitals selected as "active"$/;"	m	class:TDHF
active	src/apps/adrian/TDHF.h	/^      std::vector<int> active;                        \/\/ The labels of orbitals selected as "active"$/;"	m	class:TDHF
active	src/apps/adrian/TDHF2.h	/^      std::vector<int> active;                        \/\/ The labels of orbitals selected as "active"$/;"	m	class:TDHF
active	src/apps/bryan/TDHF.h	/^      std::vector<int> active;                        \/\/ The labels of orbitals selected as "active"$/;"	m	class:TDHF
active	src/apps/bryan/TDHF2.h	/^      std::vector<int> active;                        \/\/ The labels of orbitals selected as "active"$/;"	m	class:TDHF
active_mo	src/apps/chem/zcis.h	/^	std::vector<complex_function_3d> active_mo(const std::vector<complex_function_3d>& mo) const {$/;"	f	class:madness::Zcis
active_pairs_of_orbital	src/apps/chem/PNOParameters.h	/^	std::vector<int> active_pairs_of_orbital()const { return get<std::vector<int> >("active_pairs_of_orbital");}$/;"	f	class:madness::PNOParameters
acut1e_6	src/apps/hf/poperator.h	/^  const double acut1e_6 = 0.25; \/\/0.6450626287524907;$/;"	m	namespace:madness
ad_hoc_test_result	src/madness/external/gtest/include/gtest/gtest.h	/^  const TestResult& ad_hoc_test_result() const { return ad_hoc_test_result_; }$/;"	f	class:testing::TestCase
ad_hoc_test_result	src/madness/external/gtest/src/gtest-internal-inl.h	/^  const TestResult* ad_hoc_test_result() const { return &ad_hoc_test_result_; }$/;"	f	class:testing::internal::UnitTestImpl
ad_hoc_test_result	src/madness/external/gtest/src/gtest.cc	/^const TestResult& UnitTest::ad_hoc_test_result() const {$/;"	f	class:testing::UnitTest
ad_hoc_test_result_	src/madness/external/gtest/include/gtest/gtest.h	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::TestCase
ad_hoc_test_result_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::internal::UnitTestImpl
adaptive_solver	src/apps/chem/PNO.cpp	/^PNOPairs PNO::adaptive_solver(PNOPairs& pairs)const{$/;"	f	class:madness::PNO
adaptive_solver	src/apps/chem/PNOParameters.h	/^	PairType adaptive_solver()const { return assign_from_string<PairType>(get<std::string >("adaptive_solver"));}$/;"	f	class:madness::PNOParameters
add	src/examples/compiler/mra-driver.hh	/^    Exp* add(Exp* child) $/;"	f	class:Exp
add	src/examples/compiler/mra-driver.hh	/^    Exp* add(Exp* statement) {$/;"	f	class:mra_driver
add	src/examples/compiler/mra-driver.hh	/^    Exp* add(const std::string& str, Type t=UNKNOWN) $/;"	f	class:Exp
add	src/madness/mra/lbdeux.h	/^        void add(double cost, bool got_kids) {$/;"	f	class:madness::LBNodeDeux
add	src/madness/mra/vmra.h	/^inline std::vector<Function<TENSOR_RESULT_TYPE(T, R), NDIM>> add($/;"	f	namespace:madness
add	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(T, R), NDIM>> add($/;"	f	namespace:madness
add	src/madness/mra/vmra1.h	/^      add(World& world,$/;"	f	namespace:madness
add	src/madness/world/deferred_cleanup.cc	/^        void DeferredCleanup::add(const void_ptr& obj) {$/;"	f	class:madness::detail::DeferredCleanup
add	src/madness/world/deferred_cleanup.h	/^            void add(const std::shared_ptr<objT>& obj) {$/;"	f	class:madness::detail::DeferredCleanup
add	src/madness/world/test_world.cc	/^    void add(int i) {$/;"	f	class:Mary
add	src/madness/world/thread.h	/^        static void add(PoolTaskInterface* task) {$/;"	f	class:madness::ThreadPool
add	src/madness/world/thread.h	/^        static void add(const std::vector<PoolTaskInterface*>& tasks) {$/;"	f	class:madness::ThreadPool
add	src/madness/world/world_task_queue.h	/^        add(ProcessID dest, fnT fn, const TaskAttributes& attr=TaskAttributes())$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(ProcessID dest, fnT fn, const a1T& a1, const TaskAttributes& attr=TaskAttributes())$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(ProcessID dest, fnT fn, const a1T& a1, const a2T& a2, const a3T& a3,$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(ProcessID dest, fnT fn, const a1T& a1, const a2T& a2,$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(TaskFn<fnT, a1T, a2T, a3T, a4T, a5T, a6T, a7T, a8T, a9T>* t) {$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(fnT fn, const TaskAttributes& attr=TaskAttributes()) {$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(fnT fn, const a1T& a1, const TaskAttributes& attr=TaskAttributes()) {$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(fnT fn, const a1T& a1, const a2T& a2, const TaskAttributes& attr=TaskAttributes()) {$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(fnT fn, const a1T& a1, const a2T& a2, const a3T& a3, const a4T& a4,$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(fnT fn, const a1T& a1, const a2T& a2, const a3T& a3,$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(fnT&& fn, argsT&&... args) {$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        add(objT&& obj, memfnT memfn, argT&&... args)$/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        typename detail::function_enabler<fnT(future_to_ref_t<argsT>...)>::type add($/;"	f	class:madness::WorldTaskQueue
add	src/madness/world/world_task_queue.h	/^        void add(TaskInterface* t)  {$/;"	f	class:madness::WorldTaskQueue
addObserver	src/apps/hf/eigsolver.h	/^  void addObserver(IEigSolverObserver<T,NDIM>* obs)$/;"	f	class:madness::EigSolver
add_SVD	src/madness/tensor/gentensor.h	/^		void add_SVD(const GenTensor<T>& rhs, const double& eps) {*this+=rhs;}$/;"	f	class:madness::GenTensor
add_SVD	src/madness/tensor/lowranktensor.h	/^    void add_SVD(const LowRankTensor& other, const double& thresh) {$/;"	f	class:madness::LowRankTensor
add_SVD	src/madness/tensor/srconf.h	/^		void add_SVD(const SRConf<T>& rhs, const double& thresh) {$/;"	f	class:madness::SRConf
add_atom	src/apps/chem/molecule.cc	/^void Molecule::add_atom(double x, double y, double z, double q, int atomic_number)$/;"	f	class:madness::Molecule
add_atom	src/apps/chem/molecule.cc	/^void Molecule::add_atom(double x, double y, double z, double q, int atomic_number, bool pseudo_atom)$/;"	f	class:madness::Molecule
add_atom	src/apps/hf/mentity.cc	/^void MolecularEntity::add_atom(double x, double y, double z, int atomic_number, double q) {$/;"	f	class:MolecularEntity
add_atom	src/apps/polar/molecule.cc	/^void Molecule::add_atom(double x, double y, double z, double q, int atomic_number) {$/;"	f	class:Molecule
add_future	src/madness/world/future.h	/^    struct add_future {$/;"	s	namespace:madness
add_future	src/madness/world/future.h	/^    struct add_future< Future<T> > {$/;"	s	namespace:madness
add_keys_to_map	src/madness/mra/funcimpl.h	/^        void add_keys_to_map(mapT* map, int index) const {$/;"	f	class:madness::FunctionImpl
add_local_coupling	src/apps/chem/mp2.cc	/^void MP2::add_local_coupling(const Pairs<ElectronPair>& pairs,$/;"	f	class:madness::MP2
add_op	src/apps/hf/test_xc.cc	/^void add_op(const Key<3>& key, Tensor<double> tcube,$/;"	f
add_op	src/madness/mra/funcimpl.h	/^            add_op() {};$/;"	f	struct:madness::FunctionImpl::add_op
add_op	src/madness/mra/funcimpl.h	/^            add_op(const ctT& f, const ctT& g, const double alpha, const double beta)$/;"	f	struct:madness::FunctionImpl::add_op
add_op	src/madness/mra/funcimpl.h	/^        struct add_op {$/;"	s	class:madness::FunctionImpl
add_op	src/madness/mra/lbdeux.h	/^            add_op(LoadBalanceDeux* lb, const costT& costfn) : lb(lb), costfn(costfn) {}$/;"	f	struct:madness::LoadBalanceDeux::add_op
add_op	src/madness/mra/lbdeux.h	/^        struct add_op {$/;"	s	class:madness::LoadBalanceDeux
add_quotes	src/apps/chem/QCCalculationParametersBase.h	/^	static std::string add_quotes(const std::string arg) {$/;"	f	class:madness::QCCalculationParametersBase
add_randomness	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::add_randomness(World &world, ResponseFunction &f,$/;"	f	class:TDHF
add_randomness	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::add_randomness(World & world,$/;"	f	class:TDHF
add_randomness	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::add_randomness(World & world,$/;"	f	class:TDHF
add_randomness	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::add_randomness(World & world,$/;"	f	class:TDHF
add_randomness	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::add_randomness(World & world,$/;"	f	class:TDHF
add_ref	src/madness/world/worldref.h	/^            void add_ref() {$/;"	f	class:madness::detail::RemoteCounterBase
add_scalar	src/madness/mra/mra.h	/^        Function<T,NDIM>& add_scalar(T t, bool fence=true) {$/;"	f	class:madness::Function
add_scalar_inplace	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::add_scalar_inplace(T t, bool fence) {$/;"	f	class:madness::FunctionImpl
add_to_assignments	src/madness/world/future.h	/^        inline void add_to_assignments(const std::shared_ptr< FutureImpl<T> > f) {$/;"	f	class:madness::FutureImpl
add_tree	src/madness/mra/lbdeux.h	/^        void add_tree(const Function<T,NDIM>& f, const costT& costfn, bool fence=false) {$/;"	f	class:madness::LoadBalanceDeux
add_unprojected_cc2_projector_response	src/apps/chem/CCStructures.h	/^    void add_unprojected_cc2_projector_response(const vector_real_function_3d& tmp){unprojected_cc2_projector_response_=copy(world,tmp);}$/;"	f	struct:madness::CCIntermediatePotentials
addsyms	src/examples/compiler/mra-driver.hh	/^    void addsyms(const Exp* e, const std::string& type) {$/;"	f	class:mra_driver
adq	src/madness/mra/adquad.h	/^    typename funcT::returnT adq(double lo, double hi, const funcT& func, double thresh) {$/;"	f	namespace:madness
adq1	src/madness/mra/adquad.h	/^    typename funcT::returnT adq1(double lo, double hi, const funcT& func, double thresh,$/;"	f	namespace:madness
adqtest	src/madness/mra/adquad.h	/^        struct adqtest {$/;"	s	namespace:madness::detail
adv	src/examples/navstokes_cosines.cc	/^template<typename T, int NDIM> void adv(const myfun& uu, myfun& advu) {$/;"	f
advance	src/madness/world/range.h	/^        advance(integralT& i, distanceT n) { i += n; }$/;"	f	class:madness::Range
advance	src/madness/world/range.h	/^        advance(iterT& it, distanceT n) { std::advance(it, n); }$/;"	f	class:madness::Range
advance	src/madness/world/worldhashmap.h	/^            void advance(int n) {$/;"	f	class:madness::Hash_private::HashIterator
advance	src/madness/world/worldhashmap.h	/^    inline void advance( madness::Hash_private::HashIterator<hashT>& it, const distT& dist ) {$/;"	f	namespace:std
aeps	src/apps/chem/SCF.h	/^	tensorT aeps, beps;$/;"	m	class:madness::SCF
aeps	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
aeps	src/apps/chem/znemo.h	/^	Tensor<double> aeps, beps;$/;"	m	class:madness::Znemo
aeps	src/apps/moldft/mcpfit.cc	/^    tensorT aeps, beps;$/;"	m	struct:Calculation	file:
aeps	src/apps/polar/mcpfit.cc	/^    tensorT aeps, beps;$/;"	m	struct:Calculation	file:
aeps	src/apps/polar/moldft.cc	/^    tensorT aeps, beps;$/;"	m	struct:Calculation	file:
aeps_mp	src/apps/polar/moldft.cc	/^    tensorT aeps_mp, beps_mp;$/;"	m	struct:Calculation	file:
afiller	src/madness/tensor/test_elemental.cc	/^double afiller(int64_t i, int64_t j) {$/;"	f
afunction	src/apps/chem/zcis.h	/^		std::vector<complex_function_3d> afunction;$/;"	m	struct:madness::Zcis::root
ag	src/apps/chem/molecularbasis.h	/^    std::vector<AtomicBasis> ag;  \/\/\/< Basis associated by atomic number = 1, 2, ...; 0=Bq.$/;"	m	class:madness::AtomicBasisSet
ag	src/apps/hf/molecularbasis.h	/^    std::vector<AtomicBasis> ag;  \/\/< Basis associated by atomic number = 1, 2, ...; 0=Bq.$/;"	m	class:AtomicBasisSet
ag	src/apps/polar/molecularbasis.h	/^    std::vector<AtomicBasis> ag;  \/\/< Basis associated by atomic number = 1, 2, ...; 0=Bq.$/;"	m	class:AtomicBasisSet
agm	src/apps/nick/mpreal.cc	/^const mpreal agm (const mpreal& v1, const mpreal& v2, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
alan	src/madness/world/test_world.cc	/^    string alan(int i, int j, int proc) {$/;"	f	class:Mary
algopt	src/apps/chem/CalculationParameters.h	/^	std::string algopt() const {return get<std::string>("algopt");}$/;"	f	struct:madness::CalculationParameters
algopt	src/apps/polar/moldft.cc	/^    std::string algopt;                \/\/\/< algorithm used for optimization$/;"	m	struct:CalculationParameters	file:
align	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    Int align;$/;"	m	struct:elem::PermutationMeta
aligned_add	src/madness/tensor/aligned.h	/^    void aligned_add(long n, T* MADNESS_RESTRICT a, const Q* MADNESS_RESTRICT b) {$/;"	f	namespace:madness
aligned_axpy	src/madness/tensor/aligned.h	/^    void aligned_axpy(long n, T* MADNESS_RESTRICT a, const T* MADNESS_RESTRICT b, Q s) {$/;"	f	namespace:madness
aligned_axpy	src/madness/tensor/aligned.h	/^    void aligned_axpy(long n, double * MADNESS_RESTRICT a, const double * MADNESS_RESTRICT b, double s) {$/;"	f	namespace:madness
aligned_axpy	src/madness/tensor/aligned.h	/^    void aligned_axpy(long n, double_complex * MADNESS_RESTRICT a, const double_complex * MADNESS_RESTRICT b, double s) {$/;"	f	namespace:madness
aligned_axpy	src/madness/tensor/aligned.h	/^    void aligned_axpy(long n, double_complex * MADNESS_RESTRICT a, const double_complex * MADNESS_RESTRICT b, double_complex s) {$/;"	f	namespace:madness
aligned_sub	src/madness/tensor/aligned.h	/^    void aligned_sub(long n, T* MADNESS_RESTRICT a, const Q* MADNESS_RESTRICT b) {$/;"	f	namespace:madness
aligned_zero	src/madness/tensor/aligned.h	/^    void aligned_zero(long n, T* a) {$/;"	f	namespace:madness
all_instrumented	src/madness/world/thread.cc	/^    bool ThreadBase::all_instrumented;$/;"	m	class:madness::ThreadBase	file:
all_instrumented	src/madness/world/thread.h	/^        static bool all_instrumented; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::ThreadBase
all_reduce	src/madness/world/worldgop.h	/^        all_reduce(const keyT& key, const valueT& value, const opT& op) {$/;"	f	class:madness::WorldGopInterface
all_reduce	src/madness/world/worldgop.h	/^        all_reduce(const keyT& key, const valueT& value, const opT& op, const Group& group) {$/;"	f	class:madness::WorldGopInterface
alloc	src/madness/mra/nonlinsol.h	/^        Alloc alloc;$/;"	m	class:madness::XNonlinearSolver
alloc_am_arg	src/madness/world/worldam.h	/^    inline AmArg* alloc_am_arg(std::size_t nbyte) {$/;"	f	namespace:madness
allocate	src/madness/tensor/tensor.h	/^            T* allocate(std::size_t size, unsigned int alignment) {$/;"	f	class:madness::detail::SharedAlignedArray
allocate	src/madness/tensor/tensor.h	/^        void allocate(long nd, const long d[], bool dozero) {$/;"	f	class:madness::Tensor
allocate	src/madness/world/stack.h	/^        T* allocate(const size_type n) {$/;"	f	class:madness::Stack
allocator	src/apps/chem/nemo.h	/^	allocator(World& world, const int nn) :$/;"	f	struct:madness::allocator
allocator	src/apps/chem/nemo.h	/^struct allocator {$/;"	s	namespace:madness
allocator	src/examples/newsolver.cc	/^    allocator(World& world) : world(world) {}$/;"	f	struct:allocator
allocator	src/examples/newsolver.cc	/^struct allocator {$/;"	s	file:
allocator	src/examples/testsolver.cc	/^F allocator() {$/;"	f
allowed_values	src/apps/chem/QCCalculationParametersBase.h	/^	std::vector<std::string> allowed_values=std::vector<std::string>();$/;"	m	struct:madness::QCParameter
allpairs	src/apps/chem/CCStructures.h	/^    pairmapT allpairs;$/;"	m	struct:madness::Pairs
allpairs	src/apps/chem/mp2.h	/^            pairmapT allpairs;$/;"	m	struct:madness::MP2::Pairs
alpha	src/apps/chem/corepotential.h	/^    std::vector<double> alpha;$/;"	m	struct:madness::CorePotential
alpha	src/apps/chem/gth_pseudopotential.h	/^    double alpha; \/\/ radius$/;"	m	class:madness::ProjRLMFunctor
alpha	src/apps/chem/test_dft.cc	/^static double alpha=10.0;   \/\/ exponent of the density$/;"	v	file:
alpha	src/apps/hf/ewald.cc	/^  double alpha;$/;"	m	class:EwaldNuclearPotentialFunctor	file:
alpha	src/apps/hf/test_coulomb.cc	/^const double alpha = 4.5;$/;"	v
alpha	src/apps/moldft/mcpfit.cc	/^    double alpha, rcut;$/;"	m	class:PotentialBasisFunctor	file:
alpha	src/apps/moldft/mcpfit.cc	/^    double alpha;$/;"	m	class:GaussianFunctor	file:
alpha	src/apps/moldft/testcosine.cc	/^static const double alpha = 2.5;$/;"	v	file:
alpha	src/apps/polar/corepotential.h	/^    std::vector<double> alpha;$/;"	m	struct:CorePotential
alpha	src/apps/polar/gth_pseudopotential.h	/^    double alpha; \/\/ radius$/;"	m	class:ProjFunctor
alpha	src/apps/polar/gth_pseudopotential.h	/^    double alpha; \/\/ radius$/;"	m	class:ProjRLMFunctor
alpha	src/apps/polar/mcpfit.cc	/^    double alpha, rcut;$/;"	m	class:PotentialBasisFunctor	file:
alpha	src/apps/polar/mcpfit.cc	/^    double alpha;$/;"	m	class:GaussianFunctor	file:
alpha	src/examples/heat.cc	/^static const double alpha = 1.9; \/\/ Exponent$/;"	v	file:
alpha	src/examples/heat2.cc	/^static const double alpha = 1.9; \/\/ Exponent$/;"	v	file:
alpha	src/madness/mra/funcimpl.h	/^            T alpha; \/\/\/< the current function impl$/;"	m	struct:madness::FunctionImpl::do_gaxpy_inplace
alpha	src/madness/mra/funcimpl.h	/^            T alpha;$/;"	m	struct:madness::FunctionImpl::do_merge_trees
alpha	src/madness/mra/funcimpl.h	/^            double alpha, beta;$/;"	m	struct:madness::FunctionImpl::add_op
alpha	src/madness/mra/mra.h	/^    gaxpy_oop(TENSOR_RESULT_TYPE(L,R) alpha, const Function<L,NDIM>& left,$/;"	m	namespace:madness
alpha	src/madness/tensor/gfit.cc	/^    const double alpha;$/;"	m	class:Fred	file:
alpha_func	src/madness/mra/testgaxpyext.cc	/^static double alpha_func(const coord_3d& r) {$/;"	f	file:
alpha_func	src/madness/mra/testinnerext.cc	/^static double alpha_func(const coord_3d& r) {$/;"	f	file:
alpha_functor	src/madness/mra/testinnerext.cc	/^    alpha_functor(double coeff=1.0) : coeff(coeff) {}$/;"	f	class:alpha_functor
alpha_functor	src/madness/mra/testinnerext.cc	/^class alpha_functor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
also_run_disabled_tests_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool also_run_disabled_tests_;$/;"	m	class:testing::internal::GTestFlagSaver
am	src/madness/world/world.h	/^        WorldAmInterface& am; \/\/\/< AM interface.$/;"	m	class:madness::World
am_arg	src/madness/world/world_object.h	/^        static inline const T& am_arg(const Future<T>& f) {$/;"	f	class:madness::WorldObject
am_arg	src/madness/world/world_object.h	/^        static inline const T& am_arg(const T& t) {$/;"	f	class:madness::WorldObject
am_arg	src/madness/world/world_task_queue.h	/^        inline const T& am_arg(const Future<T>& f) {$/;"	f	class:madness::WorldTaskQueue
am_arg	src/madness/world/world_task_queue.h	/^        inline const T& am_arg(const T& t) {$/;"	f	class:madness::WorldTaskQueue
am_handlerT	src/madness/world/worldam.h	/^    typedef void (*am_handlerT)(const AmArg&);$/;"	t	namespace:madness
amo	src/apps/chem/SCF.h	/^	vecfuncT amo, bmo;$/;"	m	class:madness::SCF
amo	src/apps/chem/znemo.h	/^	std::vector<complex_function_3d> amo, bmo;$/;"	m	class:madness::Znemo
amo	src/apps/moldft/mcpfit.cc	/^    vecfuncT amo, bmo;$/;"	m	struct:Calculation	file:
amo	src/apps/polar/mcpfit.cc	/^    vecfuncT amo, bmo;$/;"	m	struct:Calculation	file:
amo	src/apps/polar/moldft.cc	/^    vecfuncT amo, bmo;$/;"	m	struct:Calculation	file:
amo_m	src/apps/polar/moldft.cc	/^    vecfuncT amo_m, bmo_m;$/;"	m	struct:Calculation	file:
amo_p	src/apps/polar/moldft.cc	/^    vecfuncT amo_p, bmo_p;$/;"	m	struct:Calculation	file:
analysis	src/apps/adrian/TDDFT.cc	/^void TDHF::analysis(World &world) {$/;"	f	class:TDHF
analysis	src/apps/adrian/TDHF.cc	/^void TDHF::analysis(World & world)$/;"	f	class:TDHF
analysis	src/apps/adrian/TDHF2.cc	/^void TDHF::analysis(World & world)$/;"	f	class:TDHF
analysis	src/apps/bryan/TDHF.cc	/^void TDHF::analysis(World & world)$/;"	f	class:TDHF
analysis	src/apps/bryan/TDHF2.cc	/^void TDHF::analysis(World & world)$/;"	f	class:TDHF
analytical_slater_functor	src/examples/smooth.h	/^static double analytical_slater_functor(double rho){$/;"	f
analyze	src/apps/chem/TDHF.cc	/^void TDHF::analyze(const std::vector<CC_vecfunction> &x) const {$/;"	f	class:madness::TDHF
analyze	src/apps/chem/znemo.cc	/^double Znemo::analyze() {$/;"	f	class:madness::Znemo
analyze_vectors	src/apps/chem/SCF.cc	/^void SCF::analyze_vectors(World &world, const vecfuncT &mo, const tensorT &occ,$/;"	f	class:madness::SCF
analyze_vectors	src/apps/polar/moldft.cc	/^    void analyze_vectors(World &world, const vecfuncT &mo, const tensorT &occ = tensorT(), const tensorT &energy = tensorT(), const std::vector<int> &set = std::vector<int>())$/;"	f	struct:Calculation
angstrom	src/apps/chem/molecule.h	/^    enum {atomic, angstrom} units;$/;"	e	enum:madness::Molecule::__anon49
angular_momentum	src/apps/chem/molecularbasis.h	/^    int angular_momentum() const {$/;"	f	class:madness::ContractedGaussianShell
angular_momentum	src/apps/hf/molecularbasis.h	/^    int angular_momentum() const {$/;"	f	class:ContractedGaussianShell
angular_momentum	src/apps/polar/molecularbasis.h	/^    int angular_momentum() const {$/;"	f	class:ContractedGaussianShell
any_terms	src/madness/mra/operator.h	/^            bool any_terms() const {return r_term or t_term;}$/;"	f	struct:madness::SeparatedConvolution::ApplyTerms
ao	src/apps/chem/SCF.h	/^	vecfuncT ao;$/;"	m	class:madness::SCF
ao	src/apps/polar/moldft.cc	/^    vecfuncT ao;$/;"	m	struct:Calculation	file:
aobasis	src/apps/chem/CalculationParameters.h	/^	std::string aobasis() const {return get<std::string>("aobasis");}$/;"	f	struct:madness::CalculationParameters
aobasis	src/apps/chem/SCF.h	/^	AtomicBasisSet aobasis;$/;"	m	class:madness::SCF
aobasis	src/apps/chem/SCF.h	/^	const AtomicBasisSet& aobasis;$/;"	m	class:madness::MolecularGuessDensityFunctor
aobasis	src/apps/chem/znemo.h	/^    AtomicBasisSet aobasis;$/;"	m	class:madness::Znemo
aobasis	src/apps/hf/solver.h	/^        const AtomicBasisSet& aobasis;$/;"	m	struct:madness::Solver::GuessDensity
aobasis	src/apps/moldft/preal.cc	/^    AtomicBasisSet aobasis;$/;"	m	class:MiniDFT	file:
aobasis	src/apps/moldft/preal.cc	/^    const AtomicBasisSet& aobasis;$/;"	m	class:MolecularGuessDensityFunctor	file:
aobasis	src/apps/moldft/testperiodic.cc	/^    const AtomicBasisSet& aobasis;$/;"	m	class:MolecularGuessDensityFunctor	file:
aobasis	src/apps/moldft/testperiodic.cc	/^static AtomicBasisSet aobasis;$/;"	v	file:
aobasis	src/apps/polar/moldft.cc	/^    AtomicBasisSet aobasis;$/;"	m	struct:Calculation	file:
aobasis	src/apps/polar/moldft.cc	/^    const AtomicBasisSet &aobasis;$/;"	m	class:MolecularGuessDensityFunctor	file:
aobasis	src/apps/polar/moldft.cc	/^    std::string aobasis;   \/\/\/< AO basis used for initial guess (6-31g or sto-3g)$/;"	m	struct:CalculationParameters	file:
aobasis	src/apps/polar/preal.cc	/^    const AtomicBasisSet& aobasis;$/;"	m	class:MolecularGuessDensityFunctor	file:
aobasis	src/apps/polar/preal.cc	/^static AtomicBasisSet aobasis;$/;"	v	file:
aobasis	src/apps/polar/testperiodic.cc	/^    const AtomicBasisSet& aobasis;$/;"	m	class:MolecularGuessDensityFunctor	file:
aobasis	src/apps/polar/testperiodic.cc	/^static AtomicBasisSet aobasis;$/;"	v	file:
aocc	src/apps/chem/SCF.h	/^	tensorT aocc, bocc;$/;"	m	class:madness::SCF
aocc	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
aocc	src/apps/moldft/mcpfit.cc	/^    tensorT aocc, bocc;$/;"	m	struct:Calculation	file:
aocc	src/apps/polar/mcpfit.cc	/^    tensorT aocc, bocc;$/;"	m	struct:Calculation	file:
aocc	src/apps/polar/moldft.cc	/^    tensorT aocc, bocc;$/;"	m	struct:Calculation	file:
aocc_mp	src/apps/polar/moldft.cc	/^    tensorT aocc_mp, bocc_mp;$/;"	m	struct:Calculation	file:
aoccpsp	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
aofunc	src/apps/chem/SCF.h	/^	const AtomicBasisFunction aofunc;$/;"	m	class:madness::AtomicBasisFunctor
aofunc	src/apps/hf/electronicstructureapp.h	/^  const AtomicBasisFunction aofunc;$/;"	m	class:AtomicBasisFunctor
aofunc	src/apps/hf/solver.h	/^      const AtomicBasisFunction aofunc;$/;"	m	class:madness::WSTAtomicBasisFunctor
aofunc	src/apps/moldft/preal.cc	/^    const AtomicBasisFunction aofunc;$/;"	m	class:AtomicBasisFunctor	file:
aofunc	src/apps/moldft/testperiodic.cc	/^    const AtomicBasisFunction aofunc;$/;"	m	class:AtomicBasisFunctor	file:
aofunc	src/apps/moldft/testperiodic.cc	/^    const AtomicBasisFunction aofunc;$/;"	m	class:AtomicOrbitalFunctor	file:
aofunc	src/apps/polar/moldft.cc	/^    const AtomicBasisFunction aofunc;$/;"	m	class:AtomicBasisFunctor	file:
aofunc	src/apps/polar/preal.cc	/^    const AtomicBasisFunction aofunc;$/;"	m	class:AtomicBasisFunctor	file:
aofunc	src/apps/polar/testperiodic.cc	/^    const AtomicBasisFunction aofunc;$/;"	m	class:AtomicBasisFunctor	file:
apex	src/madness/mra/sdf_shape_3D.h	/^        const coord_3d apex; \/\/\/< The apex$/;"	m	class:madness::SDFCone
apex	src/madness/mra/sdf_shape_3D.h	/^        const coord_3d apex; \/\/\/< The apex$/;"	m	class:madness::SDFParaboloid
apot	src/apps/chem/zcis.h	/^		std::vector<complex_function_3d> apot;$/;"	m	struct:madness::Zcis::root
append	src/madness/external/tinyxml/tinystr.cc	/^TiXmlString& TiXmlString::append(const char* str, size_type len)$/;"	f	class:TiXmlString
append	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> append($/;"	f	namespace:madness
append	src/madness/tensor/srconf.h	/^		void append(const SRConf<T>& rhs, const double fac=1.0) {$/;"	f	class:madness::SRConf
append	src/madness/tensor/srconf.h	/^		void append(const SRConf<T>& rhs, const double_complex fac=1.0) {$/;"	f	class:madness::SRConf
append	src/madness/world/test_ar.cc	/^    void append(int value) {$/;"	f	class:linked_list
apply	src/apps/adrian/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> apply(World & world,$/;"	f
apply	src/apps/adrian/TDHF_Basic_Operators2.h	/^ResponseFunction apply($/;"	f
apply	src/apps/adrian/TDHF_Basic_Operators2.h	/^ResponseFunction apply(World& world, real_derivative_3d& op,$/;"	f
apply	src/apps/bryan/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> apply(World & world,$/;"	f
apply	src/apps/bryan/TDHF_Basic_Operators2.h	/^ResponseFunction apply(World & world,$/;"	f
apply	src/apps/chem/AC.h	/^   Function<double,NDIM> apply(Function<double,NDIM> xc_functional)const{$/;"	f	class:madness::AC
apply	src/apps/chem/AC.h	/^   Function<double,NDIM> apply(Function<double,NDIM> xc_functional, const Function<double,NDIM> v_hartree)const{$/;"	f	class:madness::AC
apply	src/apps/moldft/pointgroup.h	/^    coordT apply(int op, const coordT& r) const {$/;"	f	class:PointGroup
apply	src/apps/moldft/pointgroup.h	/^    static coordT apply(const std::string& op, const coordT& r)  {$/;"	f	class:PointGroup
apply	src/apps/moldft/testperiodic.cc	/^    vector_complex_function_3d apply(World& world, const vector_complex_function_3d& v, const tensor_real& evals, double shift = 0.0) {$/;"	f	class:KPeriodicBSHOperator
apply	src/apps/polar/pointgroup.h	/^    coordT apply(int op, const coordT& r) const {$/;"	f	class:PointGroup
apply	src/apps/polar/pointgroup.h	/^    static coordT apply(const std::string& op, const coordT& r)  {$/;"	f	class:PointGroup
apply	src/madness/mra/derivative.h	/^    apply(const Derivative<T,NDIM>& D, const Function<T,NDIM>& f, bool fence=true) {$/;"	f	namespace:madness
apply	src/madness/mra/funcimpl.h	/^        void apply(opT& op, const FunctionImpl<R,NDIM>& f, bool fence) {$/;"	f	class:madness::FunctionImpl
apply	src/madness/mra/operator.h	/^        Tensor<TENSOR_RESULT_TYPE(T,Q)> apply(const Key<NDIM>& source,$/;"	f	class:madness::SeparatedConvolution
apply	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> apply(World& world, const Derivative<T, NDIM>& D,$/;"	f	namespace:madness
apply	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(T, R), NDIM>> apply($/;"	f	namespace:madness
apply	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(typename opT::opT, R), NDIM>> apply($/;"	f	namespace:madness
apply	src/madness/mra/vmra1.h	/^      apply(World& world,$/;"	f	namespace:madness
apply	src/madness/tensor/tensortrain.h	/^    TensorTrain<TENSOR_RESULT_TYPE(T,Q)> apply(const TensorTrain<T>& op,$/;"	f	namespace:madness
apply2	src/madness/mra/operator.h	/^        GenTensor<TENSOR_RESULT_TYPE(T,Q)> apply2(const Key<NDIM>& source,$/;"	f	class:madness::SeparatedConvolution
apply2_lowdim	src/madness/mra/operator.h	/^        GenTensor<TENSOR_RESULT_TYPE(T,Q)> apply2_lowdim(const Key<NDIM>& source,$/;"	f	class:madness::SeparatedConvolution
applyN	src/examples/testspectralprop.cc	/^complex_function_1d applyN(double t, const complex_function_1d& u) {$/;"	f
applyOp	src/madness/tensor/gmres.h	/^            T & applyOp(const T &in, T &out) const {$/;"	f	class:madness::Operator
apply_1d_realspace_push	src/madness/mra/funcimpl.h	/^        apply_1d_realspace_push(const opT& op, const FunctionImpl<R,NDIM>* f, int axis, bool fence) {$/;"	f	class:madness::FunctionImpl
apply_1d_realspace_push_op	src/madness/mra/funcimpl.h	/^        apply_1d_realspace_push_op(const archive::archive_ptr<const opT>& pop, int axis, const keyT& key, const Tensor<R>& c) {$/;"	f	class:madness::FunctionImpl
apply_G	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_G(const CCPairFunction& u,const real_convolution_6d& G) const {$/;"	f	class:madness::CCPotentials
apply_G	src/apps/chem/CCPotentials.h	/^    real_function_6d apply_G(const real_function_6d &f, const real_convolution_6d &G)const{$/;"	f	class:madness::CCPotentials
apply_G	src/apps/chem/CCStructures.cc	/^  real_function_6d CCPairFunction::apply_G(const real_convolution_6d &G)const{$/;"	f	class:madness::CCPairFunction
apply_G	src/apps/chem/TDHF.cc	/^std::vector<vector_real_function_3d>  TDHF::apply_G(std::vector<CC_vecfunction> &x,std::vector<vector_real_function_3d> &V)const{$/;"	f	class:madness::TDHF
apply_K	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_K(const real_function_6d& u,const size_t& particle) const {$/;"	f	class:madness::CCPotentials
apply_Kf	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_Kf(const CCFunction& x,const CCFunction& y) const {$/;"	f	class:madness::CCPotentials
apply_Ot	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_Ot(const CCPairFunction& f,const CC_vecfunction& t,const size_t particle) const {$/;"	f	class:madness::CCPotentials
apply_Q12	src/apps/chem/mp2.h	/^        void apply_Q12(real_function_6d &f)const{$/;"	f	class:madness::MP2
apply_Q12t	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_Q12t(const real_function_6d& f,const CC_vecfunction& t) const {$/;"	f	class:madness::CCPotentials
apply_Qt	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_Qt(const CCPairFunction& f,const CC_vecfunction& t,const size_t particle,const double c) const {$/;"	f	class:madness::CCPotentials
apply_Qt	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_Qt(const CC_vecfunction& f,const CC_vecfunction& ket_,const double c) const {$/;"	f	class:madness::CCPotentials
apply_U	src/apps/chem/correlationfactor.h	/^	real_function_3d apply_U(const real_function_3d& rhs) const {$/;"	f	class:madness::PseudoNuclearCorrelationFactor
apply_U	src/apps/chem/correlationfactor.h	/^	virtual real_function_3d apply_U(const real_function_3d& rhs) const {$/;"	f	class:madness::NuclearCorrelationFactor
apply_U	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d apply_U(const real_function_3d& phi_i, const real_function_3d& phi_j,$/;"	f	class:madness::CorrelationFactor
apply_U	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d apply_U(const real_function_6d& psi, const double eps) const {$/;"	f	class:madness::CorrelationFactor2
apply_U_ecf	src/examples/helium_exact.cc	/^real_function_6d apply_U_ecf(World& world, const real_function_6d& psi,$/;"	f
apply_U_mix	src/examples/helium_exact.cc	/^real_function_6d apply_U_mix(World& world, const real_function_6d& psi,$/;"	f
apply_U_ncf	src/examples/helium_exact.cc	/^real_function_6d apply_U_ncf(World& world, const real_function_6d& psi,$/;"	f
apply_V	src/examples/helium_exact.cc	/^real_function_6d apply_V(World& world, const real_function_6d& psi, const SCF& calc) {$/;"	f
apply_Vreg	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_Vreg(const CCFunction& ti,const CCFunction& tj,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
apply_c2	src/apps/chem/molecule.cc	/^static void apply_c2(double xaxis, double yaxis, double zaxis, double &x, double &y, double &z)$/;"	f	namespace:madness
apply_c2	src/apps/polar/molecule.cc	/^static void apply_c2(double xaxis, double yaxis, double zaxis, double& x, double& y, double& z) {$/;"	f	file:
apply_exchange	src/apps/chem/mp2.cc	/^real_function_6d MP2::apply_exchange(const real_function_6d& f,$/;"	f	class:madness::MP2
apply_exchange_commutator	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_exchange_commutator(const CCFunction& x,const CCFunction& y,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
apply_exchange_commutator1	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_exchange_commutator1(const CCFunction& x,const CCFunction& y,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
apply_excitation_operators	src/apps/chem/TDHF.cc	/^vector_real_function_3d TDHF::apply_excitation_operators(const vector_real_function_3d& seed, const bool& use_trigo) const {$/;"	f	class:madness::TDHF
apply_fK	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_fK(const CCFunction& x,const CCFunction& y,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
apply_gf	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_gf(const real_function_3d& f) const {$/;"	f	class:madness::CCPotentials
apply_hf_exchange	src/apps/hf/solver.h	/^    void apply_hf_exchange(vecfuncT& phisa, vecfuncT& phisb,$/;"	f	class:madness::Solver
apply_hf_exchange	src/apps/polar/moldft.cc	/^    vecfuncT apply_hf_exchange(World &world, const tensorT &occ, const vecfuncT &psi, const vecfuncT &f)$/;"	f	struct:Calculation
apply_hf_exchange3	src/apps/hf/solver.h	/^    void apply_hf_exchange3(vecfuncT& phisa, vecfuncT& phisb,$/;"	f	class:madness::Solver
apply_hf_exchange4	src/apps/hf/solver.h	/^    void apply_hf_exchange4(vecfuncT& phisa, vecfuncT& phisb,$/;"	f	class:madness::Solver
apply_inverse	src/apps/chem/molecule.cc	/^static void apply_inverse(double xjunk, double yjunk, double zjunk, double &x, double &y, double &z)$/;"	f	namespace:madness
apply_inverse	src/apps/polar/molecule.cc	/^static void apply_inverse(double xjunk, double yjunk, double zjunk, double& x, double& y, double& z) {$/;"	f	file:
apply_kernel_helper	src/examples/smooth.h	/^	apply_kernel_helper(const double &ipot_): ipot(ipot_), asl(ipot_){}$/;"	f	struct:apply_kernel_helper
apply_kernel_helper	src/examples/smooth.h	/^struct apply_kernel_helper{$/;"	s
apply_nonlocal_potential	src/apps/chem/potentialmanager.h	/^    void apply_nonlocal_potential(World& world, const vector_real_function_3d& amo, vector_real_function_3d Vpsi) {$/;"	f	class:madness::PotentialManager
apply_nonlocal_potential	src/apps/polar/potentialmanager.h	/^    void apply_nonlocal_potential(World& world, const vector_real_function_3d& amo, vector_real_function_3d Vpsi) {$/;"	f	class:PotentialManager
apply_op	src/madness/mra/funcimpl.h	/^            const opT* apply_op;$/;"	m	struct:madness::FunctionImpl::recursive_apply_op2
apply_op	src/madness/mra/funcimpl.h	/^            opT* apply_op;$/;"	m	struct:madness::FunctionImpl::recursive_apply_op
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLHB.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLHF.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLVB.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLVF.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUHB.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUHF.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUVB.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUVF.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLHB.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLHF.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLVB.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLVF.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUHB.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUHF.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUVB.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUVF.hpp	/^namespace apply_packed_reflectors {$/;"	n	namespace:elem
apply_periodic_bsh	src/apps/moldft/testcosine.cc	/^complex_function_3d apply_periodic_bsh(World& world, const complex_function_3d& f, $/;"	f
apply_periodic_bsh	src/apps/moldft/testperiodic.cc	/^complex_function_3d apply_periodic_bsh(World& world, const complex_function_3d& f, $/;"	f
apply_poisson	src/apps/chem/CCPotentials.h	/^    real_function_3d apply_poisson(const real_function_3d &f)const{$/;"	f	class:madness::CCPotentials
apply_polynomial_exop	src/apps/chem/GuessFactory.cc	/^real_function_3d apply_polynomial_exop(real_function_3d& f, const std::string& exop_input, coord_3d center, const bool& fence) {$/;"	f	namespace:madness::guessfactory
apply_polynomial_exop	src/apps/chem/GuessFactory.cc	/^vector_real_function_3d apply_polynomial_exop(vector_real_function_3d& vf, const std::string& exop_input, std::vector<coord_3d> centers, const bool& fence) {$/;"	f	namespace:madness::guessfactory
apply_potential	src/apps/chem/SCF.cc	/^vecfuncT SCF::apply_potential(World &world, const tensorT &occ,$/;"	f	class:madness::SCF
apply_potential	src/apps/chem/diamagneticpotentialfactor.cc	/^std::vector<complex_function_3d> Diamagnetic_potential_factor::apply_potential(const std::vector<complex_function_3d>& rhs) const {$/;"	f	class:madness::Diamagnetic_potential_factor
apply_potential	src/apps/chem/gth_pseudopotential.h	/^    std::vector<Function<Q,3> > apply_potential(World& world, const real_function_3d& potential, const std::vector<Function<Q,3> >& psi, const tensorT & occ, Q & enl) {$/;"	f	class:madness::GTHPseudopotential
apply_potential	src/apps/hf/solver.h	/^    void apply_potential(vecfuncT& pfuncsa,$/;"	f	class:madness::Solver
apply_potential	src/apps/moldft/preal.cc	/^    vector_real_function_3d apply_potential(World& world, const real_function_3d& potential, const vector_real_function_3d& psi)$/;"	f	class:MiniDFT
apply_potential	src/apps/moldft/testcosine.cc	/^vector_complex_function_3d apply_potential(const real_function_3d& potential, const vector_complex_function_3d& psi)$/;"	f
apply_potential	src/apps/moldft/testperiodic.cc	/^vector_complex_function_3d apply_potential(World& world, const real_function_3d& potential, const vector_complex_function_3d& psi)$/;"	f
apply_potential	src/apps/polar/gth_pseudopotential.h	/^    std::vector<Function<Q,3> > apply_potential(World& world, const real_function_3d& potential, const std::vector<Function<Q,3> >& psi) {$/;"	f	class:GTHPseudopotential
apply_potential	src/apps/polar/moldft.cc	/^    vecfuncT apply_potential(World &world, const tensorT &occ, const vecfuncT &amo,$/;"	f	struct:Calculation
apply_potential	src/apps/polar/preal.cc	/^vector_real_function_3d apply_potential(World& world, const real_function_3d& potential, const vector_real_function_3d& psi)$/;"	f
apply_potential	src/apps/polar/testperiodic.cc	/^vector_complex_function_3d apply_potential(const real_function_3d& potential, const vector_complex_function_3d& psi)$/;"	f
apply_potential	src/examples/vnucso.cc	/^void apply_potential(World& world,$/;"	f
apply_potential2	src/apps/polar/gth_pseudopotential.h	/^    std::vector<Function<Q,3> > apply_potential2(World& world, const real_function_3d& potential, const std::vector<Function<Q,3> >& psi) {$/;"	f	class:GTHPseudopotential
apply_potential_mp	src/apps/polar/moldft.cc	/^    vecfuncT apply_potential_mp(World &world, const tensorT &occ, const vecfuncT &amo_mp,$/;"	f	struct:Calculation
apply_potential_ne	src/apps/polar/gth_pseudopotential.h	/^    std::vector<Function<Q,3> > apply_potential_ne(World& world, const real_function_3d& potential, const std::vector<Function<Q,3> >& psi) {$/;"	f	class:GTHPseudopotential
apply_potential_response	src/apps/chem/SCF.cc	/^vecfuncT SCF::apply_potential_response(World &world, const vecfuncT &dmo,$/;"	f	class:madness::SCF
apply_potential_response	src/apps/polar/moldft.cc	/^    vecfuncT apply_potential_response(World &world, const tensorT &occ, const vecfuncT &dmo,$/;"	f	struct:Calculation
apply_potential_simple	src/apps/chem/gth_pseudopotential.h	/^    std::vector<Function<Q,3> > apply_potential_simple(World& world, const real_function_3d& potential, const std::vector<Function<Q,3> >& psi, const tensorT & occ, Q & enl) {$/;"	f	class:madness::GTHPseudopotential
apply_potential_wsttiger	src/apps/polar/gth_pseudopotential.h	/^    vector_real_function_3d apply_potential_wsttiger(World& world, const real_function_3d& potential, const vector_complex_function_3d& psi) {$/;"	f	class:GTHPseudopotential
apply_projector	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_projector(const CC_vecfunction& f,const CC_vecfunction& ket_) const {$/;"	f	class:madness::CCPotentials
apply_randomize	src/madness/mra/funcdefaults.h	/^        static bool apply_randomize;   \/\/\/< If true use randomization for load balancing in apply integral operator$/;"	m	class:madness::FunctionDefaults
apply_randomize	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> bool FunctionDefaults<NDIM>::apply_randomize;$/;"	m	class:madness::FunctionDefaults
apply_reduced_F	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_reduced_F(const CCFunction& ti,const CCFunction& tj,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
apply_regularized_potential	src/apps/chem/PNOF12Potentials.cpp	/^vector_real_function_3d F12Potentials::apply_regularized_potential(const real_function_3d& ket1, const real_function_3d& ket2,const real_function_3d Ki, const real_function_3d& Kj, const vector_real_function_3d& bra,const vector_real_function_3d& Kpno) const {$/;"	f	class:madness::F12Potentials
apply_s2b_operation	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_s2b_operation(const CCFunction& bra,const CCPairFunction& u,const size_t particle) const {$/;"	f	class:madness::CCPotentials
apply_shift	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::apply_shift(World &world, Tensor<double> &shifts,$/;"	f	class:TDHF
apply_shift	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::apply_shift(World & world,$/;"	f	class:TDHF
apply_shift	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::apply_shift(World & world,$/;"	f	class:TDHF
apply_shift	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::apply_shift(World & world,$/;"	f	class:TDHF
apply_shift	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::apply_shift(World & world,$/;"	f	class:TDHF
apply_sigma	src/apps/chem/molecule.cc	/^static void apply_sigma(double xaxis, double yaxis, double zaxis, double &x, double &y, double &z)$/;"	f	namespace:madness
apply_sigma	src/apps/polar/molecule.cc	/^static void apply_sigma(double xaxis, double yaxis, double zaxis, double& x, double& y, double& z) {$/;"	f	file:
apply_source_driven	src/madness/mra/funcimpl.h	/^        void apply_source_driven(opT& op, const FunctionImpl<R,NDIM>& f, bool fence) {$/;"	f	class:madness::FunctionImpl
apply_symmetry_operators	src/apps/chem/pointgroupsymmetry.cc	/^std::vector<Function<T,NDIM> > projector_irrep::apply_symmetry_operators($/;"	f	class:madness::projector_irrep
apply_transformation	src/madness/mra/operator.h	/^        void apply_transformation(long dimk,$/;"	f	class:madness::SeparatedConvolution
apply_transformation2	src/madness/mra/operator.h	/^        void apply_transformation2(Level n, long dimk,  double tol,$/;"	f	class:madness::SeparatedConvolution
apply_transformation3	src/madness/mra/operator.h	/^        void apply_transformation3(const Tensor<T> trans2[NDIM],$/;"	f	class:madness::SeparatedConvolution
apply_transformed_Ue	src/apps/chem/CCPotentials.cc	/^  CCPotentials::apply_transformed_Ue(const CCFunction& x,const CCFunction& y,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
apply_trigonometric_exop	src/apps/chem/GuessFactory.h	/^Function<T,NDIM> apply_trigonometric_exop(Function<T,NDIM>& f, const std::string& exop_input, coord_3d center, const bool& fence) {$/;"	f	namespace:madness::guessfactory
apply_trigonometric_exop	src/apps/chem/GuessFactory.h	/^std::vector<Function<T,NDIM> > apply_trigonometric_exop(std::vector<Function<T,NDIM> >& vf,$/;"	f	namespace:madness::guessfactory
apply_xc	src/apps/moldft/wst_functional.h	/^  std::pair<real_function_3d, double> apply_xc(World& world, const XCfunctional& xc, real_function_3d& rho)$/;"	f	class:WSTFunctional
apply_xc_kernel	src/apps/chem/SCFOperators.cc	/^real_function_3d XCOperator::apply_xc_kernel($/;"	f	class:madness::XCOperator
applyexpLt	src/examples/testspectralprop.cc	/^complex_function_1d applyexpLt(double dt, const complex_function_1d& u) {$/;"	f
approach	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^    HermitianTridiagApproach approach;$/;"	m	struct:elem::HermitianTridiagCtrl
approx	src/apps/chem/SCFProtocol.h	/^    bool approx(const double a, const double b) const {$/;"	f	class:madness::SCFProtocol
ar	src/madness/world/parallel_archive.h	/^            mutable Archive ar; \/\/\/< The local archive.$/;"	m	class:madness::archive::BaseParallelArchive
archive	src/apps/adrian/ResponseParameters.h	/^      std::string archive;               \/\/\/< Name of input archive to read in ground state$/;"	m	struct:madness::ResponseParameters
archive	src/apps/bryan/ResponseParameters.h	/^      std::string archive;               \/\/\/< Name of input archive to read in ground state$/;"	m	struct:madness::ResponseParameters
archive	src/madness.h	/^    namespace archive { $/;"	n	namespace:madness
archive	src/madness/mra/derivative.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/mra/funcimpl.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/mra/key.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/mra/operator.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/tensor/gentensor.h	/^	namespace archive {$/;"	n	namespace:madness
archive	src/madness/tensor/gentensor.h	/^namespace archive {$/;"	n	namespace:madness
archive	src/madness/tensor/lowranktensor.h	/^namespace archive {$/;"	n	namespace:madness
archive	src/madness/tensor/tensor.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/archive.cc	/^namespace archive {$/;"	n	namespace:madness	file:
archive	src/madness/world/archive.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/archive_type_names.cc	/^    namespace archive {$/;"	n	namespace:madness	file:
archive	src/madness/world/binary_fstream_archive.cc	/^    namespace archive {$/;"	n	namespace:madness	file:
archive	src/madness/world/binary_fstream_archive.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/buffer_archive.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/cereal_archive.h	/^namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/future.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/mpi_archive.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/parallel_archive.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/test_ar.cc	/^    namespace archive {$/;"	n	namespace:madness	file:
archive	src/madness/world/test_hashdc.cc	/^    namespace archive {$/;"	n	namespace:madness	file:
archive	src/madness/world/text_fstream_archive.cc	/^    namespace archive {$/;"	n	namespace:madness	file:
archive	src/madness/world/text_fstream_archive.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/type_traits.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/vector_archive.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/world.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/world_object.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/worlddc.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/worldptr.h	/^    namespace archive {$/;"	n	namespace:madness
archive	src/madness/world/worldref.h	/^    namespace archive {$/;"	n	namespace:madness
archive_array	src/madness/world/archive.h	/^            archive_array() : ptr(nullptr), n(0) {}$/;"	f	class:madness::archive::archive_array
archive_array	src/madness/world/archive.h	/^            archive_array(const T *ptr, unsigned int n) : ptr(ptr), n(n) {}$/;"	f	class:madness::archive::archive_array
archive_array	src/madness/world/archive.h	/^        class archive_array {$/;"	c	namespace:madness::archive
archive_initialize_type_names	src/madness/world/archive_type_names.cc	/^        void archive_initialize_type_names() {$/;"	f	namespace:madness::archive
archive_ptr	src/madness/world/archive.h	/^            archive_ptr(T* t = nullptr)$/;"	f	class:madness::archive::archive_ptr
archive_ptr	src/madness/world/archive.h	/^        class archive_ptr {$/;"	c	namespace:madness::archive
archive_type_names	src/madness/world/archive.h	/^        const char *archive_type_names[256];$/;"	m	namespace:madness::archive
archive_typeinfo	src/madness/world/archive.h	/^        struct archive_typeinfo {$/;"	s	namespace:madness::archive
area_two_spheres	src/examples/molecularsurface.cc	/^double area_two_spheres(double r1, double r2, double d) {$/;"	f
arg	src/apps/chem/diamagneticpotentialfactor.cc	/^	std::function<double(const coord_3d& r, const coord_3d& B, const coord_3d& vv)>& arg;$/;"	m	struct:madness::R_times_arg_div_R	file:
arg	src/apps/chem/test_SCFOperators.cc	/^    double arg;         \/\/ argument of the error function$/;"	m	struct:refpotfunctor	file:
arg	src/madness/mra/convolution1d.h	/^        double arg;$/;"	m	class:madness::Convolution1D
arg	src/madness/tensor/tensor.h	/^    Tensor< typename Tensor<T>::scalar_type > arg(const Tensor<T>& t) {$/;"	f	namespace:madness
arg	src/madness/world/world_object.h	/^            AmArg* arg;$/;"	m	struct:madness::detail::PendingMsg
arg1_	src/madness/world/taskfn.h	/^        typename detail::task_arg<arg1T>::holderT arg1_;\/\/\/< Argument 1 that will be given to the function$/;"	m	struct:madness::TaskFn
arg2_	src/madness/world/taskfn.h	/^        typename detail::task_arg<arg2T>::holderT arg2_;\/\/\/< Argument 2 that will be given to the function$/;"	m	struct:madness::TaskFn
arg3_	src/madness/world/taskfn.h	/^        typename detail::task_arg<arg3T>::holderT arg3_;\/\/\/< Argument 3 that will be given to the function$/;"	m	struct:madness::TaskFn
arg4_	src/madness/world/taskfn.h	/^        typename detail::task_arg<arg4T>::holderT arg4_;\/\/\/< Argument 4 that will be given to the function$/;"	m	struct:madness::TaskFn
arg5_	src/madness/world/taskfn.h	/^        typename detail::task_arg<arg5T>::holderT arg5_;\/\/\/< Argument 5 that will be given to the function$/;"	m	struct:madness::TaskFn
arg6_	src/madness/world/taskfn.h	/^        typename detail::task_arg<arg6T>::holderT arg6_;\/\/\/< Argument 6 that will be given to the function$/;"	m	struct:madness::TaskFn
arg7_	src/madness/world/taskfn.h	/^        typename detail::task_arg<arg7T>::holderT arg7_;\/\/\/< Argument 7 that will be given to the function$/;"	m	struct:madness::TaskFn
arg8_	src/madness/world/taskfn.h	/^        typename detail::task_arg<arg8T>::holderT arg8_;\/\/\/< Argument 8 that will be given to the function$/;"	m	struct:madness::TaskFn
arg9_	src/madness/world/taskfn.h	/^        typename detail::task_arg<arg9T>::holderT arg9_;\/\/\/< Argument 9 that will be given to the function$/;"	m	struct:madness::TaskFn
argT	src/madness/mra/derivative.h	/^        typedef std::pair<keyT,coeffT>  argT     ;$/;"	t	class:madness::Derivative
argT	src/madness/mra/derivative.h	/^        typedef std::pair<keyT,coeffT>  argT     ;$/;"	t	class:madness::DerivativeBase
argT	src/madness/mra/funcimpl.h	/^            typedef std::pair<bool,coeffT> argT;$/;"	t	struct:madness::FunctionImpl::project_out_op
argT	src/madness/mra/funcimpl.h	/^            typedef std::pair<bool,coeffT> argT;$/;"	t	struct:madness::FunctionImpl::recursive_apply_op2
arg_	src/madness/world/taskfn.h	/^            Arg arg_;$/;"	m	class:madness::detail::ArgHolder
arg_holder	src/madness/world/taskfn.h	/^        namespace arg_holder {$/;"	n	namespace:madness::detail
argc_	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    int argc_;$/;"	m	class:elem::choice::Args
argc_	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    int argc_;$/;"	m	class:elem::choice::MpiArgs
argparse	src/madness/tensor/mtxmq_graveyard/new_mtxmq/main.py	/^import argparse$/;"	i
args	src/madness/external/elemental/src/core/global.cpp	/^Args* args = 0;$/;"	m	namespace:__anon33	file:
args	src/madness/mra/funcimpl.h	/^            TensorArgs args;$/;"	m	struct:madness::FunctionImpl::do_reduce_rank
args	src/madness/world/thread.h	/^        void* args; \/\/\/< The arguments passed to this thread for execution.$/;"	m	class:madness::Thread
args	src/madness/world/world.cc	/^    void World::args(int argc, char** argv) {$/;"	f	class:madness::World
args_	src/madness/external/gtest/src/gtest-death-test.cc	/^  std::vector<char*> args_;$/;"	m	class:testing::internal::Arguments	file:
argv	src/madness/external/gtest/src/gtest-death-test.cc	/^  char* const* argv;  \/\/ Command-line arguments for the child's call to exec$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
argv_	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    char** argv_;$/;"	m	class:elem::choice::Args
argv_	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    char** argv_;$/;"	m	class:elem::choice::MpiArgs
arithmetic_series	src/madness/tensor/gfit.cc	/^Tensor<double> arithmetic_series(long n, double a, double h) {$/;"	f
arity	src/madness/world/function_traits.h	/^            static const int arity = sizeof...(argTs);$/;"	m	struct:madness::detail::callable_traits
arity	src/madness/world/function_traits.h	/^            static const int arity = sizeof...(argTs);$/;"	m	struct:madness::detail::function_traits
arity	src/madness/world/function_traits.h	/^            static const int arity = sizeof...(argTs);$/;"	m	struct:madness::detail::memfunc_traits
arity	src/madness/world/function_traits.h	/^          static const int arity = sizeof...(argTs);$/;"	m	struct:madness::detail::function_traits
arity	src/madness/world/taskfn.h	/^        static const unsigned int arity = detail::ArgCount<arg1T, arg2T, arg3T,$/;"	m	struct:madness::TaskFn
arnoldi	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    bool arnoldi;$/;"	m	struct:elem::PseudospecCtrl
array	src/apps/nick/parse.py	/^import sys, string, re, array, os$/;"	i
array	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-rvalue_references.cxx	/^   char *array;$/;"	m	class:rvmove	file:
array	src/madness/mra/tools/dump2.py	/^from array import array$/;"	i
array_	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  std::vector<TestPartResult> array_;$/;"	m	class:testing::TestPartResultArray
array_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  const Element* array_;$/;"	m	class:testing::internal::NativeArray
asc_coord	src/apps/chem/pcm.cc	/^    std::vector<coord_3d> asc_coord;$/;"	m	struct:madness::detail::asc_potential	file:
asc_lbl	src/apps/chem/pcm.h	/^    std::string asc_lbl;$/;"	m	class:madness::PCM
asc_potential	src/apps/chem/pcm.cc	/^    asc_potential(const int size, const Tensor<double> coord, const Tensor<double> val)$/;"	f	struct:madness::detail::asc_potential
asc_potential	src/apps/chem/pcm.cc	/^struct asc_potential : public FunctionFunctorInterface<double,3> {$/;"	s	namespace:madness::detail	file:
asc_value	src/apps/chem/pcm.cc	/^    std::vector<double> asc_value;$/;"	m	struct:madness::detail::asc_potential	file:
aset	src/apps/chem/SCF.h	/^	std::vector<int> aset, bset;$/;"	m	class:madness::SCF
aset	src/apps/moldft/mcpfit.cc	/^    vector<int> aset, bset;$/;"	m	struct:Calculation	file:
aset	src/apps/moldft/preal.cc	/^    std::vector<int> aset;$/;"	m	struct:BoysLocalization	file:
aset	src/apps/polar/mcpfit.cc	/^    vector<int> aset, bset;$/;"	m	struct:Calculation	file:
aset	src/apps/polar/moldft.cc	/^    std::vector<int> aset, bset;$/;"	m	struct:Calculation	file:
aset_mp	src/apps/polar/moldft.cc	/^    std::vector<int> aset_mp, bset_mp;$/;"	m	struct:Calculation	file:
asin	src/apps/nick/mpreal.h	/^inline const mpreal asin (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
asin	src/madness/mra/tools/longfloat.py	/^    def asin(self):$/;"	m	class:longfloat
asinh	src/apps/nick/mpreal.h	/^inline const mpreal asinh  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
asl	src/examples/smooth.h	/^	asymptotic_slater asl;$/;"	m	struct:apply_kernel_helper
assemble_coefficients	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::coeffT FunctionImpl<T,NDIM>::assemble_coefficients($/;"	f	class:madness::FunctionImpl
assert_aslr_off	src/madness/world/worldrmi.cc	/^    void RMI::assert_aslr_off(const SafeMPI::Intracomm& comm) {$/;"	f	class:madness::RMI
assertion	src/madness/tensor/tensorexcept.h	/^        const char* assertion;$/;"	m	class:madness::TensorException
assertion	src/madness/world/madness_exception.h	/^        const char* assertion; \/\/\/< String describing the assertion.$/;"	m	class:madness::MadnessException
assign	src/madness/external/tinyxml/tinystr.cc	/^TiXmlString& TiXmlString::assign(const char* str, size_type len)$/;"	f	class:TiXmlString
assign_calctype	src/apps/chem/CCStructures.cc	/^  assign_calctype(const std::string name) {$/;"	f	namespace:madness
assign_from_string	src/apps/chem/PNOParameters.h	/^	T assign_from_string(const std::string& string)const{$/;"	f	class:madness::PNOParameters
assign_name	src/apps/chem/CCStructures.cc	/^  assign_name(const CCState& input) {$/;"	f	namespace:madness
assign_name	src/apps/chem/CCStructures.cc	/^  assign_name(const CalcType& inp) {$/;"	f	namespace:madness
assign_name	src/apps/chem/CCStructures.cc	/^  assign_name(const FuncType& inp) {$/;"	f	namespace:madness
assign_name	src/apps/chem/CCStructures.cc	/^  assign_name(const OpType& input) {$/;"	f	namespace:madness
assign_name	src/apps/chem/CCStructures.cc	/^  assign_name(const PairFormat& input) {$/;"	f	namespace:madness
assign_name	src/apps/chem/CCStructures.cc	/^  assign_name(const PotentialType& inp) {$/;"	f	namespace:madness
assign_particles	src/apps/chem/CCStructures.cc	/^  const std::pair<vector_real_function_3d,vector_real_function_3d> CCPairFunction::assign_particles(const size_t particle)const{$/;"	f	class:madness::CCPairFunction
assign_to_proc	src/madness/external/elemental/external/pmrrr/src/plarrv.c	/^int assign_to_proc(proc_t *procinfo, in_t *Dstruct, val_t *Wstruct,$/;"	f	file:
assigned	src/madness/world/future.h	/^        volatile bool assigned;$/;"	m	class:madness::FutureImpl
assignmentT	src/madness/world/future.h	/^        typedef Stack<std::shared_ptr<FutureImpl<T> >,MAXCALLBACKS> assignmentT; \/\/\/< Assignment type.$/;"	t	class:madness::FutureImpl
assignments	src/madness/world/future.h	/^        volatile mutable assignmentT assignments;$/;"	m	class:madness::FutureImpl
asymmetry	src/apps/chem/mp2.cc	/^double MP2::asymmetry(const real_function_6d& f, const std::string s) const {$/;"	f	class:madness::MP2
asymptotic_density	src/examples/smooth.h	/^	asymptotic_density(const double &ie):ionization_energy_(ie), center_of_charge_(0.0){}$/;"	f	struct:asymptotic_density
asymptotic_density	src/examples/smooth.h	/^	asymptotic_density(const double &ie, const coord_3d &coc):ionization_energy_(ie), center_of_charge_(coc){}$/;"	f	struct:asymptotic_density
asymptotic_density	src/examples/smooth.h	/^struct asymptotic_density{$/;"	s
asymptotic_rho_	src/examples/smooth.h	/^	const asymptotic_density asymptotic_rho_;$/;"	m	struct:asymptotic_slater_kernel
asymptotic_slater	src/examples/smooth.h	/^	asymptotic_slater(const double &ipot_): ipot(ipot_){}$/;"	f	struct:asymptotic_slater
asymptotic_slater	src/examples/smooth.h	/^struct asymptotic_slater : public FunctionFunctorInterface<double,3>{$/;"	s
asymptotic_slater_kernel	src/examples/smooth.h	/^	asymptotic_slater_kernel(const asymptotic_density &tmp): asymptotic_rho_(tmp){}$/;"	f	struct:asymptotic_slater_kernel
asymptotic_slater_kernel	src/examples/smooth.h	/^struct asymptotic_slater_kernel{$/;"	s
at	src/madness/external/tinyxml/tinystr.h	/^	const char& at (size_type index) const$/;"	f	class:TiXmlString
at	src/madness/world/vector.h	/^        const_reference at(size_type i) const { return data_.at(i); }$/;"	f	class:madness::Vector
at	src/madness/world/vector.h	/^        reference at(size_type i) { return data_.at(i); }$/;"	f	class:madness::Vector
at_nbf	src/apps/chem/SCF.h	/^	std::vector<int> at_to_bf, at_nbf;$/;"	m	class:madness::SCF
at_nbf	src/apps/chem/distpm.cc	/^    const std::vector<int>& at_nbf;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
at_nbf	src/apps/moldft/preal.cc	/^static std::vector<int> at_to_bf, at_nbf;$/;"	v	file:
at_nbf	src/apps/polar/distpm.cc	/^    const std::vector<int>& at_nbf;$/;"	m	class:SystolicPMOrbitalLocalize	file:
at_nbf	src/apps/polar/moldft.cc	/^    std::vector<int> at_to_bf, at_nbf;$/;"	m	struct:Calculation	file:
at_nbf	src/apps/polar/preal.cc	/^static std::vector<int> at_to_bf, at_nbf;$/;"	v	file:
at_to_bf	src/apps/chem/SCF.h	/^	std::vector<int> at_to_bf, at_nbf;$/;"	m	class:madness::SCF
at_to_bf	src/apps/chem/distpm.cc	/^    const std::vector<int>& at_to_bf;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
at_to_bf	src/apps/moldft/preal.cc	/^static std::vector<int> at_to_bf, at_nbf;$/;"	v	file:
at_to_bf	src/apps/polar/distpm.cc	/^    const std::vector<int>& at_to_bf;$/;"	m	class:SystolicPMOrbitalLocalize	file:
at_to_bf	src/apps/polar/moldft.cc	/^    std::vector<int> at_to_bf, at_nbf;$/;"	m	struct:Calculation	file:
at_to_bf	src/apps/polar/preal.cc	/^static std::vector<int> at_to_bf, at_nbf;$/;"	v	file:
atan	src/apps/nick/mpreal.h	/^inline const mpreal atan (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
atan	src/madness/mra/tools/longfloat.py	/^    def atan(x):$/;"	m	class:longfloat
atan2	src/apps/nick/mpreal.h	/^inline const mpreal atan2 (const mpreal& y, const mpreal& x, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
atan2	src/madness/mra/tools/longfloat.py	/^    def atan2(self,x,y):$/;"	m	class:longfloat
atanh	src/apps/nick/mpreal.h	/^inline const mpreal atanh  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
atn	src/apps/moldft/mcpfit.cc	/^    unsigned int atn;               \/\/\/< atomic number of target atom$/;"	m	struct:Calculation	file:
atn	src/apps/moldft/mcpfit.cc	/^    unsigned int atn;$/;"	m	class:CoreOrbitalFunctor	file:
atn	src/apps/polar/mcpfit.cc	/^    unsigned int atn;               \/\/\/< atomic number of target atom$/;"	m	struct:Calculation	file:
atn	src/apps/polar/mcpfit.cc	/^    unsigned int atn;$/;"	m	class:CoreOrbitalFunctor	file:
atom	src/apps/chem/SCF.h	/^	const int atom;$/;"	m	class:madness::CorePotentialDerivativeFunctor
atom	src/apps/chem/SCF.h	/^	const int atom;$/;"	m	class:madness::MolecularDerivativeFunctor
atom	src/apps/chem/SCF.h	/^	const int atom;$/;"	m	class:madness::MolecularSecondDerivativeFunctor
atom	src/apps/chem/potentialmanager.h	/^    const int atom, axis;$/;"	m	class:madness::CoreOrbitalDerivativeFunctor
atom	src/apps/chem/potentialmanager.h	/^    const int atom;$/;"	m	class:madness::CoreOrbitalFunctor
atom	src/apps/polar/moldft.cc	/^    const int atom;$/;"	m	class:CorePotentialDerivativeFunctor	file:
atom	src/apps/polar/moldft.cc	/^    const int atom;$/;"	m	class:MolecularDerivativeFunctor	file:
atom	src/apps/polar/potentialmanager.h	/^    const int atom, axis;$/;"	m	class:CoreOrbitalDerivativeFunctor
atom	src/apps/polar/potentialmanager.h	/^    const int atom;$/;"	m	class:CoreOrbitalFunctor
atom_core	src/apps/chem/corepotential.h	/^    std::map<unsigned int,AtomCore> atom_core;$/;"	m	class:madness::CorePotentialManager
atom_core	src/apps/polar/corepotential.h	/^    std::map<unsigned int,AtomCore> atom_core;$/;"	m	class:CorePotentialManager
atom_information	src/apps/chem/AC.h	/^struct atom_information{$/;"	s	namespace:madness
atom_position	src/examples/tdse1d.cc	/^double atom_position() {$/;"	f
atom_position	src/examples/testspectralprop.cc	/^double atom_position(double current_time) {$/;"	f
atom_x	src/examples/testspectralprop.cc	/^    const double atom_x;$/;"	m	class:PsiExact	file:
atom_x	src/examples/testspectralprop.cc	/^    const double atom_x;$/;"	m	class:Vnuclear	file:
atomic	src/apps/chem/molecule.h	/^    enum {atomic, angstrom} units;$/;"	e	enum:madness::Molecule::__anon49
atomic_attraction	src/apps/chem/nemo.cc	/^    atomic_attraction(const Molecule& mol, const size_t iatom1)$/;"	f	class:madness::atomic_attraction
atomic_attraction	src/apps/chem/nemo.cc	/^class atomic_attraction : public FunctionFunctorInterface<double,3> {$/;"	c	namespace:madness	file:
atomic_attraction_potential	src/apps/chem/molecule.cc	/^double Molecule::atomic_attraction_potential(int iatom, double x, double y,$/;"	f	class:madness::Molecule
atomic_cmask	src/examples/molecularmask.h	/^    double atomic_cmask(const madness::coord_3d& r, unsigned int i) const {$/;"	f	class:MolecularMaskBase
atomic_coords	src/examples/molecularmask.h	/^    const std::vector<madness::coord_3d> atomic_coords;$/;"	m	class:MolecularMaskBase
atomic_data	src/apps/chem/atomutil.cc	/^static const AtomicData atomic_data[NUMBER_OF_ATOMS_IN_TABLE] = {$/;"	m	namespace:madness	file:
atomic_data	src/apps/hf/mentity.cc	/^static const AtomicData atomic_data[NUMBER_OF_ATOMS_IN_TABLE] = {$/;"	v	file:
atomic_data	src/apps/polar/atomutil.cc	/^static const AtomicData atomic_data[NUMBER_OF_ATOMS_IN_TABLE] = {$/;"	v	file:
atomic_int	src/madness/world/atomicint.h	/^        typedef std::atomic_int atomic_int;$/;"	t	class:madness::AtomicInt
atomic_mask	src/examples/molecularmask.h	/^    double atomic_mask(const madness::coord_3d& r, unsigned int i) const {$/;"	f	class:MolecularMaskBase
atomic_mass_constant	src/madness/constants.h	/^        const double atomic_mass_constant = 1.660538782e-27 ; \/\/    0.000000083e-27    kg$/;"	m	namespace:madness::constants
atomic_mass_in_au	src/madness/constants.h	/^        const double atomic_mass_in_au = 1822.88848;$/;"	m	namespace:madness::constants
atomic_number	src/apps/chem/atomutil.h	/^    const unsigned int atomic_number;$/;"	m	struct:madness::AtomicData
atomic_number	src/apps/chem/corepotential.h	/^    unsigned int atomic_number;$/;"	m	struct:madness::AtomCore
atomic_number	src/apps/chem/molecule.h	/^    unsigned int atomic_number; \/\/\/< Atomic number$/;"	m	class:madness::Atom
atomic_number	src/apps/hf/mentity.h	/^    const unsigned int atomic_number;$/;"	m	struct:AtomicData
atomic_number	src/apps/hf/mentity.h	/^    unsigned int atomic_number; \/\/\/< Atomic number$/;"	m	class:Atom
atomic_number	src/apps/polar/atomutil.h	/^    const unsigned int atomic_number;$/;"	m	struct:AtomicData
atomic_number	src/apps/polar/corepotential.h	/^    unsigned int atomic_number;$/;"	m	struct:AtomCore
atomic_number	src/apps/polar/molecule.h	/^    unsigned int atomic_number; \/\/\/< Atomic number$/;"	m	class:Atom
atomic_number_to_symbol	src/apps/chem/atomutil.cc	/^std::string atomic_number_to_symbol(const unsigned int atomic_number) {$/;"	f	namespace:madness
atomic_radii	src/apps/chem/molecule.h	/^    std::vector<double> atomic_radii;$/;"	m	class:madness::Molecule
atomic_radii	src/apps/polar/molecule.h	/^    std::vector<double> atomic_radii;$/;"	m	class:Molecule
atomic_radii	src/examples/molecularmask.h	/^    const std::vector<double> atomic_radii;$/;"	m	class:MolecularMaskBase
atomic_unit_of_1st_hyperpolarizablity	src/madness/constants.h	/^        const double atomic_unit_of_1st_hyperpolarizablity = 3.206361533e-53 ; \/\/   0.000000081e-53    C^3 m^3 J^-2$/;"	m	namespace:madness::constants
atomic_unit_of_2nd_hyperpolarizablity	src/madness/constants.h	/^        const double atomic_unit_of_2nd_hyperpolarizablity = 6.23538095e-65  ; \/\/    0.00000031e-65     C^4 m^4 J^-3$/;"	m	namespace:madness::constants
atomic_unit_of_action	src/madness/constants.h	/^        const double atomic_unit_of_action = 1.054571628e-34 ; \/\/   0.000000053e-34    J s$/;"	m	namespace:madness::constants
atomic_unit_of_charge	src/madness/constants.h	/^        const double atomic_unit_of_charge = 1.602176487e-19 ; \/\/   0.000000040e-19    C$/;"	m	namespace:madness::constants
atomic_unit_of_charge_density	src/madness/constants.h	/^        const double atomic_unit_of_charge_density = 1.081202300e12 ; \/\/     0.000000027 e12     C m^-3$/;"	m	namespace:madness::constants
atomic_unit_of_current	src/madness/constants.h	/^        const double atomic_unit_of_current = 6.62361763e-3 ; \/\/     0.00000017e-3      A$/;"	m	namespace:madness::constants
atomic_unit_of_electric_dipole_moment	src/madness/constants.h	/^        const double atomic_unit_of_electric_dipole_moment = 8.47835281e-30 ; \/\/    0.00000021e-30     C m$/;"	m	namespace:madness::constants
atomic_unit_of_electric_field	src/madness/constants.h	/^        const double atomic_unit_of_electric_field = 5.14220632e11 ; \/\/      0.00000013 e11      V m^-1$/;"	m	namespace:madness::constants
atomic_unit_of_electric_field_gradient	src/madness/constants.h	/^        const double atomic_unit_of_electric_field_gradient = 9.71736166e21 ; \/\/  0.00000024 e21      V m^-2$/;"	m	namespace:madness::constants
atomic_unit_of_electric_polarizablity	src/madness/constants.h	/^        const double atomic_unit_of_electric_polarizablity = 1.6487772536e-41 ; \/\/   0.0000000034e-41   C^2 m^2 J^-1$/;"	m	namespace:madness::constants
atomic_unit_of_electric_potential	src/madness/constants.h	/^        const double atomic_unit_of_electric_potential = 27.21138386 ; \/\/        0.00000068          V$/;"	m	namespace:madness::constants
atomic_unit_of_electric_quadrupole_moment	src/madness/constants.h	/^        const double atomic_unit_of_electric_quadrupole_moment = 4.48655107e-40 ; \/\/    0.00000011e-40     C m^2$/;"	m	namespace:madness::constants
atomic_unit_of_energy	src/madness/constants.h	/^        const double atomic_unit_of_energy = 4.35974394e-18 ; \/\/     0.00000022e-18     J$/;"	m	namespace:madness::constants
atomic_unit_of_force	src/madness/constants.h	/^        const double atomic_unit_of_force = 8.23872206e-8 ; \/\/     0.00000041e-8      N$/;"	m	namespace:madness::constants
atomic_unit_of_length	src/madness/constants.h	/^        const double atomic_unit_of_length = 0.52917720859e-10 ; \/\/ 0.00000000036e-10 m$/;"	m	namespace:madness::constants
atomic_unit_of_magnetic_dipole_moment	src/madness/constants.h	/^        const double atomic_unit_of_magnetic_dipole_moment = 1.854801830e-23 ; \/\/   0.000000046e-23    J T^-1$/;"	m	namespace:madness::constants
atomic_unit_of_magnetic_flux_density	src/madness/constants.h	/^        const double atomic_unit_of_magnetic_flux_density = 2.350517382e5 ; \/\/      0.000000059 e5      T$/;"	m	namespace:madness::constants
atomic_unit_of_magnetizability	src/madness/constants.h	/^        const double atomic_unit_of_magnetizability = 7.891036433e-29 ; \/\/    0.000000027e-29    J T^-2$/;"	m	namespace:madness::constants
atomic_unit_of_mass	src/madness/constants.h	/^        const double atomic_unit_of_mass = 9.10938215e-31 ; \/\/    0.00000045e-31     kg$/;"	m	namespace:madness::constants
atomic_unit_of_momentum	src/madness/constants.h	/^        const double atomic_unit_of_momentum = 1.992851565e-24 ; \/\/   0.000000099e-24    kg m s^-1$/;"	m	namespace:madness::constants
atomic_unit_of_permittivity	src/madness/constants.h	/^        const double atomic_unit_of_permittivity = 1.112650056e-10 ; \/\/ (exact)               F m^-1$/;"	m	namespace:madness::constants
atomic_unit_of_time	src/madness/constants.h	/^        const double atomic_unit_of_time = 2.418884326505e-17 ; \/\/ 0.000000000016e-17 s$/;"	m	namespace:madness::constants
atomic_unit_of_velocity	src/madness/constants.h	/^        const double atomic_unit_of_velocity = 2.1876912541e6 ; \/\/  0.0000000015 e6     m s^-1$/;"	m	namespace:madness::constants
atoms	src/apps/adrian/ESInterface.h	/^  const Atoms &atoms; \/\/\/< Publically accessible list of atoms.$/;"	m	class:slymer::ES_Interface
atoms	src/apps/bryan/ESInterface.h	/^  const Atoms &atoms; \/\/\/< Publically accessible list of atoms.$/;"	m	class:slymer::ES_Interface
atoms	src/apps/chem/molecule.h	/^    std::vector<Atom> atoms;$/;"	m	class:madness::Molecule
atoms	src/apps/hf/mentity.h	/^    std::vector<Atom> atoms;$/;"	m	class:MolecularEntity
atoms	src/apps/polar/molecule.h	/^    std::vector<Atom> atoms;$/;"	m	class:Molecule
atoms	src/examples/ac_corr.cc	/^	std::vector<atom_information<NDIM> > atoms;$/;"	m	class:xc_functor	file:
atoms_	src/apps/chem/AC.h	/^	std::vector< atom_information<NDIM> > atoms_;$/;"	m	struct:madness::ACParameters
atoms_to_bfn	src/apps/chem/molecularbasis.h	/^    void atoms_to_bfn(const Molecule& molecule, std::vector<int>& at_to_bf, std::vector<int>& at_nbf) const {$/;"	f	class:madness::AtomicBasisSet
atoms_to_bfn	src/apps/hf/molecularbasis.h	/^    void atoms_to_bfn(const MolecularEntity& mentity, std::vector<int>& at_to_bf, std::vector<int>& at_nbf) {$/;"	f	class:AtomicBasisSet
atoms_to_bfn	src/apps/polar/molecularbasis.h	/^    void atoms_to_bfn(const Molecule& molecule, std::vector<int>& at_to_bf, std::vector<int>& at_nbf) {$/;"	f	class:AtomicBasisSet
atoms_with_projectors	src/apps/chem/gth_pseudopotential.h	/^    std::vector<unsigned int> atoms_with_projectors;$/;"	m	class:madness::GTHPseudopotential
attachedForGlobalToLocal_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    bool attachedForLocalToGlobal_, attachedForGlobalToLocal_;$/;"	m	class:elem::AxpyInterface
attachedForLocalToGlobal_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    bool attachedForLocalToGlobal_, attachedForGlobalToLocal_;$/;"	m	class:elem::AxpyInterface
attr	src/madness/world/world_object.h	/^            TaskAttributes attr; \/\/\/< \\todo Description needed.$/;"	m	struct:madness::detail::info_base
attr	src/madness/world/world_task_queue.h	/^            TaskAttributes attr; \/\/\/< Task attributes.$/;"	m	struct:madness::detail::TaskHandlerInfo
attr	src/madness/world/worldrmi.h	/^                attrT attr;$/;"	m	struct:madness::RMI::RmiTask::header
attr	src/madness/world/worldrmi.h	/^        attrT attr;$/;"	m	struct:madness::qmsg
attrT	src/madness/world/worldrmi.h	/^        typedef uint32_t attrT;$/;"	t	class:madness::RMI
attrT	src/madness/world/worldrmi.h	/^        typedef uint32_t attrT;$/;"	t	struct:madness::qmsg
attributeSet	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement
au2invcm	src/madness/constants.h	/^        const double au2invcm = 219474.6313705;$/;"	m	namespace:madness::constants
augment	src/apps/adrian/TDDFT.cc	/^void TDHF::augment($/;"	f	class:TDHF
augment	src/apps/adrian/TDHF.cc	/^void TDHF::augment(World & world,$/;"	f	class:TDHF
augment	src/apps/adrian/TDHF2.cc	/^void TDHF::augment(World & world,$/;"	f	class:TDHF
augment	src/apps/bryan/TDHF.cc	/^void TDHF::augment(World & world,$/;"	f	class:TDHF
augment	src/apps/bryan/TDHF2.cc	/^void TDHF::augment(World & world,$/;"	f	class:TDHF
augment_full	src/apps/adrian/TDDFT.cc	/^void TDHF::augment_full($/;"	f	class:TDHF
augment_full	src/apps/adrian/TDHF2.cc	/^void TDHF::augment_full(World & world,$/;"	f	class:TDHF
augment_full	src/apps/bryan/TDHF2.cc	/^void TDHF::augment_full(World & world,$/;"	f	class:TDHF
auto_ptr	src/madness/external/muParser/muParserFixes.h	79;"	d
autoc	src/madness/mra/twoscale.cc	/^    bool autoc(int k, Tensor<double>* c) {$/;"	f	namespace:madness
autocorr_filename	src/madness/mra/twoscale.cc	/^    static const char *autocorr_filename = "autocorr";  \/\/ Will be overriden by load_coeff$/;"	m	namespace:madness	file:
autorefine	src/madness/mra/funcdefaults.h	/^        static bool autorefine;        \/\/\/< Whether to autorefine in multiplication, etc.$/;"	m	class:madness::FunctionDefaults
autorefine	src/madness/mra/funcimpl.h	/^        bool autorefine; \/\/\/< If true, autorefine where appropriate$/;"	m	class:madness::FunctionImpl
autorefine	src/madness/mra/function_factory.h	/^    autorefine() {$/;"	f	class:madness::FunctionFactory
autorefine	src/madness/mra/mra.h	/^        bool autorefine() const {$/;"	f	class:madness::Function
autorefine	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> bool FunctionDefaults<NDIM>::autorefine;$/;"	m	class:madness::FunctionDefaults
autorefine_square_op	src/madness/mra/mra.h	/^        struct autorefine_square_op {$/;"	s	class:madness::Function
autorefine_square_test	src/madness/mra/mraimpl.h	/^    bool FunctionImpl<T,NDIM>::autorefine_square_test(const keyT& key, const nodeT& t) const {$/;"	f	class:madness::FunctionImpl
auxMemory_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    Memory<T> auxMemory_;$/;"	m	class:elem::AbstractBlockDistMatrix
auxMemory_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    Memory<T> auxMemory_;$/;"	m	class:elem::AbstractDistMatrix
auxarg1_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} auxarg1_t;$/;"	t	typeref:struct:__anon29
auxarg2_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} auxarg2_t;$/;"	t	typeref:struct:__anon30
auxarg3_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} auxarg3_t;$/;"	t	typeref:struct:__anon31
auxbas	src/apps/chem/PNOParameters.h	/^	std::map<std::string,std::vector<int> > auxbas()const {$/;"	f	class:madness::F12Parameters
auxbas_file	src/apps/chem/PNOParameters.h	/^	std::string auxbas_file()const {$/;"	f	class:madness::F12Parameters
avec	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
avec	src/apps/hf/molecularbasis.h	/^    Tensor<double> dmat, avec, bvec;$/;"	m	class:AtomicBasis
avec	src/apps/polar/molecularbasis.h	/^    Tensor<double> dmat, avec, bvec;$/;"	m	class:AtomicBasis
average	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::average(const implT& rhs) {$/;"	f	class:madness::FunctionImpl
avg	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^            avg = sum(x[3] for x in vfilter)\/len(vfilter)$/;"	v
avgs	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^        avgs = {}$/;"	v
await	src/madness/world/thread.h	/^	  static void await(const Probe& probe, bool dowork = true, bool sleep = false) {$/;"	f	class:madness::ThreadPool
await	src/madness/world/world.h	/^	  static void inline await(const Probe& probe, bool dowork = true, bool sleep=false) {$/;"	f	class:madness::World
await	src/madness/world/world.h	/^        static void inline await(SafeMPI::Request& request, bool dowork = true) {$/;"	f	class:madness::World
await_timeout	src/madness/world/thread.cc	/^    double ThreadPool::await_timeout = 900.0;$/;"	m	class:madness::ThreadPool	file:
await_timeout	src/madness/world/thread.h	/^        static double await_timeout; \/\/\/< Waiter timeout.$/;"	m	class:madness::ThreadPool
axis	src/apps/chem/SCF.h	/^	const int axis;$/;"	m	class:madness::CorePotentialDerivativeFunctor
axis	src/apps/chem/SCF.h	/^	const int axis;$/;"	m	class:madness::DipoleFunctor
axis	src/apps/chem/SCF.h	/^	const int axis;$/;"	m	class:madness::MolecularDerivativeFunctor
axis	src/apps/chem/SCFOperators.h	/^    int axis;$/;"	m	class:madness::DerivativeOperator
axis	src/apps/chem/correlationfactor.h	/^		const int axis;$/;"	m	class:madness::NuclearCorrelationFactor::U1_functor
axis	src/apps/chem/correlationfactor.h	/^        const int axis;$/;"	m	class:madness::NuclearCorrelationFactor::U1_atomic_functor
axis	src/apps/chem/correlationfactor.h	/^        const int axis;$/;"	m	class:madness::NuclearCorrelationFactor::U2X_functor
axis	src/apps/chem/correlationfactor.h	/^        const int axis;$/;"	m	class:madness::NuclearCorrelationFactor::U3X_functor
axis	src/apps/chem/correlationfactor.h	/^        const int axis;$/;"	m	class:madness::NuclearCorrelationFactor::square_times_V_derivative_functor
axis	src/apps/chem/electronic_correlation_factor.h	/^        int axis;$/;"	m	class:madness::CorrelationFactor2::U1_functor
axis	src/apps/chem/electronic_correlation_factor.h	/^        int axis;$/;"	m	struct:madness::CorrelationFactor::U
axis	src/apps/chem/potentialmanager.h	/^    const int atom, axis;$/;"	m	class:madness::CoreOrbitalDerivativeFunctor
axis	src/apps/hf/solver.h	/^      const int axis;$/;"	m	class:madness::DipoleFunctor
axis	src/apps/ii/localize_boys.cc	/^    const int axis;$/;"	m	class:DipoleFunctor	file:
axis	src/apps/moldft/preal.cc	/^    const int axis;$/;"	m	class:DipoleFunctor	file:
axis	src/apps/polar/moldft.cc	/^    const int axis;$/;"	m	class:CorePotentialDerivativeFunctor	file:
axis	src/apps/polar/moldft.cc	/^    const int axis;$/;"	m	class:DipoleFunctor	file:
axis	src/apps/polar/moldft.cc	/^    const int axis;$/;"	m	class:MolecularDerivativeFunctor	file:
axis	src/apps/polar/potentialmanager.h	/^    const int atom, axis;$/;"	m	class:CoreOrbitalDerivativeFunctor
axis	src/examples/siam_example.cc	/^  const int axis; \/\/\/< The component of the log-derivative we want.$/;"	m	class:DSphere	file:
axis	src/madness/mra/derivative.h	/^        const std::size_t axis      ;  \/\/\/< Axis along which the operation is performed$/;"	m	class:madness::DerivativeBase
axis	src/madness/mra/sdf_shape_3D.h	/^        coord_3d axis; \/\/\/< the axial direction of the cylinder$/;"	m	class:madness::SDFCylinder
axis	src/madness/mra/testpdiff.cc	/^std::size_t axis; \/\/ Axis we are diffing$/;"	v
axis	src/madness/mra/testsuite.cc	/^    const int axis;$/;"	m	class:DerivativeGaussian	file:
axis_to_string	src/apps/chem/GuessFactory.h	/^	std::string axis_to_string(const int& axis)const{$/;"	f	class:madness::guessfactory::PolynomialFunctor
axpy	src/madness/tensor/cblas.h	/^    inline void axpy(const integer n, const complex_real4 alpha, complex_real4* x, const integer incx,$/;"	f	namespace:madness::cblas
axpy	src/madness/tensor/cblas.h	/^    inline void axpy(const integer n, const complex_real8 alpha, complex_real8* x, const integer incx,$/;"	f	namespace:madness::cblas
axpy	src/madness/tensor/cblas.h	/^    inline void axpy(const integer n, const double alpha, double* x, const integer incx,$/;"	f	namespace:madness::cblas
axpy	src/madness/tensor/cblas.h	/^    inline void axpy(const integer n, const float alpha, float* x, const integer incx,$/;"	f	namespace:madness::cblas
b	src/apps/chem/CCStructures.h	/^    vector_real_function_3d b;$/;"	m	struct:madness::CCPairFunction
b	src/apps/interior_bc/test_problems.h	/^        const Function<double, 3> &b;$/;"	m	class:DirichletCondIntOp
b	src/apps/moldft/fci/timer.f	/^      doubl/;"	v
b	src/examples/nonlinschro.cc	/^static const double b = 1.0;$/;"	v	file:
b	src/examples/test_gmres.cc	/^		const Function<double, 3> &b;$/;"	m	class:RealFuncLinearOp	file:
b	src/examples/test_gmres.cc	/^		const Function<std::complex<double>, 3> &b;$/;"	m	class:ComplexFuncLinearOp	file:
b	src/madness/mra/minmax/y1.cc	/^FLOAT b(int j, FLOAT z) {$/;"	f
b	src/madness/mra/tools/mathutil.py	/^    b = zeromatrix(k,m)$/;"	v
b	src/madness/mra/tools/mathutil.py	/^    b = zerovector(n)$/;"	v
b	src/madness/world/test_ar.cc	/^    bool b;$/;"	m	class:B	file:
b	src/madness/world/test_future.cc	/^    string b(const string& input) const {$/;"	f	class:Fred
b	src/madness/world/test_prof.cc	/^void b() {$/;"	f
b	src/madness/world/test_sig.cc	/^void b() {$/;"	f
b	src/madness/world/test_world.cc	/^    long b;$/;"	m	class:B	file:
b_param	src/apps/chem/correlationfactor.h	/^	static double b_param(const double& a) {return N*a\/(1.0+a);}$/;"	f	class:madness::Polynomial
back	src/madness/external/elemental/external/pmrrr/include/queue.h	/^  task_t            *back;$/;"	m	struct:__anon20
back	src/madness/world/vector.h	/^        const_reference back() const { return data_.back(); }$/;"	f	class:madness::Vector
back	src/madness/world/vector.h	/^        reference back() { return data_.back(); }$/;"	f	class:madness::Vector
back	src/madness/world/worldmutex.h	/^        mutable volatile int back;$/;"	m	class:madness::ConditionVariable
back	src/madness/world/worldmutex.h	/^        mutable volatile int back;$/;"	m	class:madness::MutexFair
backward_substitution	src/madness/mra/tools/mathutil.py	/^def backward_substitution(U,y):$/;"	f
bandlimited_propagator_plot	src/madness/mra/qmprop.cc	/^    void bandlimited_propagator_plot(){BandlimitedPropagator::plot();}$/;"	f	namespace:madness
bar	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final_fail_compile.cxx	/^    virtual int bar(int a)$/;"	f	class:final
bar	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-sizeof_member.cxx	/^    char bar;$/;"	m	struct:foo	file:
bar	src/madness/world/test_future3.cc	/^    const int bar;$/;"	m	class:Foo	file:
bare_diamagnetic_potential	src/apps/chem/diamagneticpotentialfactor.h	/^	real_function_3d bare_diamagnetic_potential() const {$/;"	f	class:madness::Diamagnetic_potential_factor
barrier	src/madness/world/thread.h	/^        Barrier* barrier; \/\/\/< Barrier, only allocated for multithreaded tasks.$/;"	m	class:madness::PoolTaskInterface
barrier	src/madness/world/thread.h	/^        bool barrier() const {$/;"	f	class:madness::TaskThreadEnv
barrier	src/madness/world/worldgop.h	/^        void barrier() {$/;"	f	class:madness::WorldGopInterface
base	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final.cxx	/^class base {$/;"	c	file:
base	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final_fail_compile.cxx	/^class base {$/;"	c	file:
base	src/madness/tensor/tensor.h	/^        BaseTensor* base() {$/;"	f	class:madness::Tensor
base	src/madness/tensor/tensor.h	/^        const BaseTensor* base() const {$/;"	f	class:madness::Tensor
baseT	src/madness/mra/derivative.h	/^        typedef DerivativeBase<T, NDIM> baseT;$/;"	t	class:madness::Derivative
baseWF	src/apps/nick/wavef.h	/^class baseWF : public madness::FunctionFunctorInterface<complexd,NDIM> {$/;"	c
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
base_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
basic_manipulator	src/madness/external/gtest/include/gtest/gtest.h	/^      ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {$/;"	f	class:testing::AssertionResult
basis	src/apps/chem/PNO.h	/^	BasisFunctions basis; \/\/\/< class which holds all methods to read or create guess functions for PNO or CABS$/;"	m	class:madness::PNO
basis	src/apps/chem/PNOF12Potentials.h	/^	const BasisFunctions& basis;											\/\/\/< all methods to create basis functions$/;"	m	class:madness::F12Potentials
basis	src/apps/hf/electronicstructureparams.h	/^  std::string basis;$/;"	m	struct:madness::ElectronicStructureParams
basis	src/apps/moldft/xmlguess.py	/^basis = "STO-3G"$/;"	v
basis	src/apps/polar/xmlguess.py	/^basis = "STO-3G"$/;"	v
basisSize	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    Int basisSize;$/;"	m	struct:elem::PseudospecCtrl
basis_name	src/apps/moldft/nwtoxml.py	/^basis_name = "6-31G"$/;"	v
basis_name	src/apps/polar/nwtoxml.py	/^basis_name = "6-31G"$/;"	v
basis_set	src/apps/adrian/ESInterface.h	/^  const BasisSet &basis_set; \/\/\/< Publicly accessible basis set.$/;"	m	class:slymer::ES_Interface
basis_set	src/apps/bryan/ESInterface.h	/^  const BasisSet &basis_set; \/\/\/< Publicly accessible basis set.$/;"	m	class:slymer::ES_Interface
basisfn_to_atom	src/apps/chem/molecularbasis.h	/^    int basisfn_to_atom(const Molecule& molecule, size_t ibf) const {$/;"	f	class:madness::AtomicBasisSet
basisfn_to_atom	src/apps/hf/molecularbasis.h	/^    int basisfn_to_atom(const MolecularEntity& mentity, int ibf) const {$/;"	f	class:AtomicBasisSet
basisfn_to_atom	src/apps/polar/molecularbasis.h	/^    int basisfn_to_atom(const Molecule& molecule, int ibf) const {$/;"	f	class:AtomicBasisSet
baz	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-sizeof_member.cxx	/^    int baz;$/;"	m	struct:foo	file:
bc	src/apps/hf/ewald.cc	/^  BoundaryConditions<3> bc;$/;"	m	class:MolecularNuclearPotentialFunctor2	file:
bc	src/madness/mra/derivative.h	/^        const BoundaryConditions<NDIM> bc;$/;"	m	class:madness::DerivativeBase
bc	src/madness/mra/funcdefaults.h	/^        BCType bc[NDIM*2];$/;"	m	class:madness::BoundaryConditions
bc	src/madness/mra/funcdefaults.h	/^        static BoundaryConditions<NDIM> bc; \/\/\/< Default boundary conditions$/;"	m	class:madness::FunctionDefaults
bc	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> BoundaryConditions<NDIM> FunctionDefaults<NDIM>::bc;$/;"	m	class:madness::FunctionDefaults
bc	src/madness/mra/operator.h	/^        const BoundaryConditions<NDIM> bc;$/;"	m	class:madness::SeparatedConvolution
bc_	src/madness/mra/function_factory.h	/^    BoundaryConditions<6> bc_;$/;"	m	class:madness::TwoElectronFactory
bcast	src/madness/world/worldgop.h	/^        void bcast(const keyT& key, Future<valueT>& value, const ProcessID root) const {$/;"	f	class:madness::WorldGopInterface
bcast	src/madness/world/worldgop.h	/^        void bcast(const keyT& key, Future<valueT>& value,$/;"	f	class:madness::WorldGopInterface
bcast_handler	src/madness/world/worldgop.h	/^        static void bcast_handler(const AmArg& arg) {$/;"	f	class:madness::WorldGopInterface
bcast_internal	src/madness/world/worldgop.h	/^        void bcast_internal(const keyT& key, Future<valueT>& value, const ProcessID root) const {$/;"	f	class:madness::WorldGopInterface
bcast_internal	src/madness/world/worldgop.h	/^        void bcast_internal(const keyT& key, Future<valueT>& value,$/;"	f	class:madness::WorldGopInterface
bcast_task	src/madness/world/worldgop.h	/^        void bcast_task(const keyT& key, const valueT& value, const ProcessID root) const {$/;"	f	class:madness::WorldGopInterface
begin	src/apps/hf/esolver.h	/^  unsigned int begin;$/;"	m	struct:KPoint
begin	src/examples/compiler/mra-driver.hh	/^    const_iterator begin() const {$/;"	f	class:Exp
begin	src/examples/compiler/mra-driver.hh	/^    iterator begin() {$/;"	f	class:Exp
begin	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        begin;$/;"	m	struct:__anon15
begin	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        begin;$/;"	m	struct:__anon16
begin	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        begin;$/;"	m	struct:__anon17
begin	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  const_iterator begin() const { return array_; }$/;"	f	class:testing::internal::NativeArray
begin	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  iterator begin() const { return iterator(impl_->Begin()); }$/;"	f	class:testing::internal::ParamGenerator
begin	src/madness/world/group.h	/^            static typename vectorT::const_iterator begin(const vectorT &v) {$/;"	f	class:madness::Group::Impl
begin	src/madness/world/range.h	/^        const iterator& begin() const { return start; }$/;"	f	class:madness::Range
begin	src/madness/world/thread.cc	/^    void ThreadPool::begin(int nthread) {$/;"	f	class:madness::ThreadPool
begin	src/madness/world/vector.h	/^        const_iterator begin() const { return data_.begin(); }$/;"	f	class:madness::Vector
begin	src/madness/world/vector.h	/^        iterator begin() { return data_.begin(); }$/;"	f	class:madness::Vector
begin	src/madness/world/worlddc.h	/^        const_iterator begin() const {$/;"	f	class:madness::WorldContainer
begin	src/madness/world/worlddc.h	/^        const_iterator begin() const {$/;"	f	class:madness::WorldContainerImpl
begin	src/madness/world/worlddc.h	/^        iterator begin() {$/;"	f	class:madness::WorldContainer
begin	src/madness/world/worlddc.h	/^        iterator begin() {$/;"	f	class:madness::WorldContainerImpl
begin	src/madness/world/worldhashmap.h	/^        const_iterator begin() const {$/;"	f	class:madness::ConcurrentHashMap
begin	src/madness/world/worldhashmap.h	/^        iterator begin() {$/;"	f	class:madness::ConcurrentHashMap
begin	src/madness/world/worldrmi.cc	/^    void RMI::begin(const SafeMPI::Intracomm& comm) {$/;"	f	class:madness::RMI
begin10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T10>::iterator begin10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  const T begin_;$/;"	m	class:testing::internal::RangeGenerator
begin_papi_measurement	src/madness/world/worldpapi.cc	/^    void begin_papi_measurement() {$/;"	f	namespace:madness
belkic	src/apps/nick/extra.cc	/^void belkic(World& world, double cutoff) {$/;"	f
beps	src/apps/chem/SCF.h	/^	tensorT aeps, beps;$/;"	m	class:madness::SCF
beps	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
beps	src/apps/chem/znemo.h	/^	Tensor<double> aeps, beps;$/;"	m	class:madness::Znemo
beps	src/apps/moldft/mcpfit.cc	/^    tensorT aeps, beps;$/;"	m	struct:Calculation	file:
beps	src/apps/polar/mcpfit.cc	/^    tensorT aeps, beps;$/;"	m	struct:Calculation	file:
beps	src/apps/polar/moldft.cc	/^    tensorT aeps, beps;$/;"	m	struct:Calculation	file:
beps_mp	src/apps/polar/moldft.cc	/^    tensorT aeps_mp, beps_mp;$/;"	m	struct:Calculation	file:
bert	src/madness/world/test_world.cc	/^    static int bert(int input) {$/;"	f	class:TTT
beta	src/examples/gygi_soltion.cc	/^const double beta = 1.300;$/;"	v
beta	src/madness/misc/ran.h	/^        const double beta;$/;"	m	class:madness::Random
beta	src/madness/mra/funcimpl.h	/^            R beta; \/\/\/< prefactor for other function impl$/;"	m	struct:madness::FunctionImpl::do_gaxpy_inplace
beta	src/madness/mra/funcimpl.h	/^            R beta;$/;"	m	struct:madness::FunctionImpl::do_merge_trees
beta	src/madness/mra/funcimpl.h	/^            double alpha, beta;$/;"	m	struct:madness::FunctionImpl::add_op
beta	src/madness/mra/mra.h	/^              TENSOR_RESULT_TYPE(L,R) beta,  const Function<R,NDIM>& right, bool fence=true) {$/;"	m	namespace:madness
beta_MOs	src/apps/adrian/ESInterface.h	/^  const madness::Tensor<double> &beta_MOs; \/\/\/< Publically accessible beta MO expansions coefficients. Column is the MO, row is the basis function.$/;"	m	class:slymer::ES_Interface
beta_MOs	src/apps/bryan/ESInterface.h	/^  const madness::Tensor<double> &beta_MOs; \/\/\/< Publically accessible beta MO expansions coefficients. Column is the MO, row is the basis function.$/;"	m	class:slymer::ES_Interface
beta_energies	src/apps/adrian/ESInterface.h	/^  const madness::Tensor<double> &beta_energies; \/\/\/< Publically accessible list of beta MO energies (in eV).$/;"	m	class:slymer::ES_Interface
beta_energies	src/apps/bryan/ESInterface.h	/^  const madness::Tensor<double> &beta_energies; \/\/\/< Publically accessible list of beta MO energies (in eV).$/;"	m	class:slymer::ES_Interface
beta_func	src/madness/mra/testgaxpyext.cc	/^static double beta_func(const coord_3d& r) {$/;"	f	file:
beta_func	src/madness/mra/testinnerext.cc	/^static double beta_func(const coord_3d& r) {$/;"	f	file:
beta_functor	src/madness/mra/testinnerext.cc	/^    beta_functor(double coeff=1.0) : coeff(coeff) {}$/;"	f	class:beta_functor
beta_functor	src/madness/mra/testinnerext.cc	/^class beta_functor : public FunctionFunctorInterface<double,3> {$/;"	c	file:
beta_occupancies	src/apps/adrian/ESInterface.h	/^      beta_MOs(my_beta_MOs), beta_occupancies(my_beta_occupancies)$/;"	f	class:slymer::ES_Interface
beta_occupancies	src/apps/adrian/ESInterface.h	/^      beta_energies(my_beta_energies), beta_MOs(my_beta_MOs), beta_occupancies(my_beta_occupancies)$/;"	f	class:slymer::ES_Interface
beta_occupancies	src/apps/adrian/ESInterface.h	/^  const madness::Tensor<double> &beta_occupancies; \/\/\/< Publically accessible list of beta MO occupancies (in eV).$/;"	m	class:slymer::ES_Interface
beta_occupancies	src/apps/bryan/ESInterface.h	/^      beta_MOs(my_beta_MOs), beta_occupancies(my_beta_occupancies)$/;"	f	class:slymer::ES_Interface
beta_occupancies	src/apps/bryan/ESInterface.h	/^      beta_energies(my_beta_energies), beta_MOs(my_beta_MOs), beta_occupancies(my_beta_occupancies)$/;"	f	class:slymer::ES_Interface
beta_occupancies	src/apps/bryan/ESInterface.h	/^  const madness::Tensor<double> &beta_occupancies; \/\/\/< Publically accessible list of beta MO occupancies (in eV).$/;"	m	class:slymer::ES_Interface
bfunction	src/apps/chem/zcis.h	/^		std::vector<complex_function_3d> bfunction;$/;"	m	struct:madness::Zcis::root
bghw	src/madness/world/hardware.h	/^    DCMF_Hardware_t bghw;$/;"	m	namespace:madness
bghw	src/madness/world/hardware.h	/^    MPIX_Hardware_t bghw;$/;"	m	namespace:madness
bgpmTxmq	src/madness/tensor/mtxmq_bg/bgp_cc.cc	/^    void bgpmTxmq(long dimi, long dimj, long dimk, double_complex *  c_x,  const double_complex *  a_x,  const double_complex *  b_x) {$/;"	f	namespace:madness
bgpmTxmq	src/madness/tensor/mtxmq_bg/bgp_cr.cc	/^    void bgpmTxmq(long dimi, long dimj, long dimk, double_complex *  c_x,  const double_complex *  a_x,  const double  *  b_x) {$/;"	f	namespace:madness
bgpmTxmq	src/madness/tensor/mtxmq_bg/bgp_rc.cc	/^    void bgpmTxmq(long dimi, long dimj, long dimk, double_complex *  c_x,  const double  *  a_x, const  double_complex *  b_x) {$/;"	f	namespace:madness
bgpmTxmq	src/madness/tensor/mtxmq_bg/bgp_rr.cc	/^    void bgpmTxmq(long dimi, long dimj, long dimk, double  *  c_x,  const double  *  a_x,  const double  *  b_x) {$/;"	f	namespace:madness
bgq_mtxmq_padded	src/madness/tensor/mtxmq_bg/bgq_mtxm.cc	/^    void bgq_mtxmq_padded(long dimi, long dimj, long dimk, long extb, __complex__ double *  c_x,  const __complex__ double *  a_x,  const __complex__ double *  b_x) {$/;"	f	namespace:madness
bgq_mtxmq_padded	src/madness/tensor/mtxmq_bg/bgq_mtxm.cc	/^    void bgq_mtxmq_padded(long dimi, long dimj, long dimk, long extb, __complex__ double *  c_x,  const __complex__ double *  a_x,  const double  *  b_x) {$/;"	f	namespace:madness
bgq_mtxmq_padded	src/madness/tensor/mtxmq_bg/bgq_mtxm.cc	/^    void bgq_mtxmq_padded(long dimi, long dimj, long dimk, long extb, __complex__ double *  c_x,  const double  *  a_x,  const __complex__ double *  b_x) {$/;"	f	namespace:madness
bgq_mtxmq_padded	src/madness/tensor/mtxmq_bg/bgq_mtxm.cc	/^    void bgq_mtxmq_padded(long dimi, long dimj, long dimk, long extb, double  *  c_x,  const double  *  a_x,  const double  *  b_x) {$/;"	f	namespace:madness
bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/Apply.hpp	/^namespace bidiag {$/;"	n	namespace:elem
bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/L.hpp	/^namespace bidiag {$/;"	n	namespace:elem
bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LPan.hpp	/^namespace bidiag {$/;"	n	namespace:elem
bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LUnb.hpp	/^namespace bidiag {$/;"	n	namespace:elem
bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/U.hpp	/^namespace bidiag {$/;"	n	namespace:elem
bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UPan.hpp	/^namespace bidiag {$/;"	n	namespace:elem
bidiag	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UUnb.hpp	/^namespace bidiag {$/;"	n	namespace:elem
bin	src/madness/world/worldhashmap.h	/^            bin() : p(0),ninbin(0) {}$/;"	f	class:madness::Hash_private::bin
bin	src/madness/world/worldhashmap.h	/^            int bin;                \/\/ Current bin$/;"	m	class:madness::Hash_private::HashIterator
bin	src/madness/world/worldhashmap.h	/^        class bin : private madness::Spinlock {$/;"	c	namespace:madness::Hash_private
binT	src/madness/world/worldhashmap.h	/^        typedef Hash_private::bin<keyT,valueT> binT;$/;"	t	class:madness::ConcurrentHashMap
binary	src/madness/mra/mraplot.cc	/^    bool binary;                \/\/ output format for plot data$/;"	m	class:Plotter	file:
binaryXX	src/madness/mra/funcimpl.h	/^        void binaryXX(const FunctionImpl<L,NDIM>* left, const FunctionImpl<R,NDIM>* right,$/;"	f	class:madness::FunctionImpl
binaryXXa	src/madness/mra/funcimpl.h	/^        void binaryXXa(const keyT& key,$/;"	f	class:madness::FunctionImpl
binary_iterator	src/madness/tensor/tensor.h	/^        TensorIterator<T,Q> binary_iterator(const Tensor<Q>& q,$/;"	f	class:madness::Tensor
binary_munge	src/apps/chem/xcfunctional.h	/^    double binary_munge(double rho, double refrho, const double thresh) const {$/;"	f	class:madness::XCfunctional
binary_op	src/madness/mra/mra.h	/^    binary_op(const Function<L,NDIM>& left, const Function<R,NDIM>& right, const opT& op, bool fence=true) {$/;"	f	namespace:madness
binary_tree_info	src/madness/world/safempi.cc	/^    void Intracomm::binary_tree_info(int root, int& parent, int& child0, int& child1) {$/;"	f	class:SafeMPI::Intracomm
binaryoptype	src/examples/compiler/mra-driver.hh	/^    static Type binaryoptype(const std::string& op, Type l, Type r) {$/;"	f	class:Exp
bind	src/madness/world/thread.cc	/^    bool ThreadBase::bind[3];$/;"	m	class:madness::ThreadBase	file:
bind	src/madness/world/thread.h	/^        static bool bind[3]; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::ThreadBase
bins	src/madness/world/binsorter.h	/^        std::vector<T>* bins;$/;"	m	class:madness::BinSorter
bins	src/madness/world/worldhashmap.h	/^        binT* bins;                 \/\/ Array of bins$/;"	m	class:madness::ConcurrentHashMap
bit_and	src/madness/world/worldgop.h	/^        inline void bit_and(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
bit_or	src/madness/world/worldgop.h	/^        inline void bit_or(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
bit_xor	src/madness/world/worldgop.h	/^        inline void bit_xor(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
bits	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  const Bits &bits() const { return u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
bits_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^    Bits bits_;      \/\/ The bits that represent the number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
bl_begin	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        bl_begin;   \/* In priciple not needed since info *\/$/;"	m	struct:__anon16
bl_begin	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        bl_begin;$/;"	m	struct:__anon15
bl_end	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        bl_end;     \/* also contained in iblock+isplit *\/$/;"	m	struct:__anon16
bl_end	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        bl_end;$/;"	m	struct:__anon15
bl_size	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int          bl_size;$/;"	m	struct:__anon30
bl_size	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        bl_size;$/;"	m	struct:__anon17
bl_spdiam	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double       bl_spdiam;$/;"	m	struct:__anon30
bl_spdiam	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  double     bl_spdiam;$/;"	m	struct:__anon15
bl_spdiam	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  double     bl_spdiam;$/;"	m	struct:__anon16
bl_spdiam	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  double     bl_spdiam;$/;"	m	struct:__anon17
blacs	src/madness/external/elemental/include/elemental/core/imports/scalapack.hpp	/^namespace blacs {$/;"	n	namespace:elem
blacs	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^namespace blacs {$/;"	n	namespace:elem	file:
blas	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^namespace blas {$/;"	n	namespace:elem
blas	src/madness/external/elemental/src/core/imports/blas.cpp	/^namespace blas {$/;"	n	namespace:elem	file:
blas_complex_double	src/madness/tensor/cblas_types.h	48;"	d
blas_complex_double	src/madness/tensor/cblas_types.h	60;"	d
blas_complex_double	src/madness/tensor/cblas_types.h	68;"	d
blas_complex_float	src/madness/tensor/cblas_types.h	43;"	d
blas_complex_float	src/madness/tensor/cblas_types.h	57;"	d
blas_complex_float	src/madness/tensor/cblas_types.h	65;"	d
blockHeight	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    Int blockHeight, blockWidth;$/;"	m	struct:elem::BlockDistData
blockHeight	src/madness/external/elemental/src/core/global.cpp	/^Int blockHeight=32, blockWidth=32;$/;"	m	namespace:__anon33	file:
blockHeight_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    Int blockHeight_, blockWidth_;$/;"	m	class:elem::AbstractBlockDistMatrix
blockWidth	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    Int blockHeight, blockWidth;$/;"	m	struct:elem::BlockDistData
blockWidth	src/madness/external/elemental/src/core/global.cpp	/^Int blockHeight=32, blockWidth=32;$/;"	m	namespace:__anon33	file:
blockWidth_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    Int blockHeight_, blockWidth_;$/;"	m	class:elem::AbstractBlockDistMatrix
block_ind	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    block_ind;$/;"	m	struct:__anon28
blocksizeStack	src/madness/external/elemental/src/core/global.cpp	/^std::stack<Int> blocksizeStack;$/;"	m	namespace:__anon33	file:
bmax_default	src/madness/mra/displacements.h	/^        static int bmax_default() {$/;"	f	class:madness::Displacements
bmo	src/apps/chem/SCF.h	/^	vecfuncT amo, bmo;$/;"	m	class:madness::SCF
bmo	src/apps/chem/znemo.h	/^	std::vector<complex_function_3d> amo, bmo;$/;"	m	class:madness::Znemo
bmo	src/apps/moldft/mcpfit.cc	/^    vecfuncT amo, bmo;$/;"	m	struct:Calculation	file:
bmo	src/apps/polar/mcpfit.cc	/^    vecfuncT amo, bmo;$/;"	m	struct:Calculation	file:
bmo	src/apps/polar/moldft.cc	/^    vecfuncT amo, bmo;$/;"	m	struct:Calculation	file:
bmo_m	src/apps/polar/moldft.cc	/^    vecfuncT amo_m, bmo_m;$/;"	m	struct:Calculation	file:
bmo_p	src/apps/polar/moldft.cc	/^    vecfuncT amo_p, bmo_p;$/;"	m	struct:Calculation	file:
bocc	src/apps/chem/SCF.h	/^	tensorT aocc, bocc;$/;"	m	class:madness::SCF
bocc	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
bocc	src/apps/moldft/mcpfit.cc	/^    tensorT aocc, bocc;$/;"	m	struct:Calculation	file:
bocc	src/apps/polar/mcpfit.cc	/^    tensorT aocc, bocc;$/;"	m	struct:Calculation	file:
bocc	src/apps/polar/moldft.cc	/^    tensorT aocc, bocc;$/;"	m	struct:Calculation	file:
bocc_mp	src/apps/polar/moldft.cc	/^    tensorT aocc_mp, bocc_mp;$/;"	m	struct:Calculation	file:
boccpsp	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
bond_length	src/apps/tdse/tdse4.cc	/^double bond_length(const coordT& r) {$/;"	f
bool	src/madness/external/elemental/external/pmrrr/include/global.h	/^typedef int    bool;$/;"	t
bool_constant	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^struct bool_constant {$/;"	s	namespace:testing::internal
bounding_cube	src/apps/chem/molecule.cc	/^double Molecule::bounding_cube() const$/;"	f	class:madness::Molecule
bounding_cube	src/apps/hf/mentity.cc	/^double MolecularEntity::bounding_cube() const {$/;"	f	class:MolecularEntity
bounding_cube	src/apps/polar/molecule.cc	/^double Molecule::bounding_cube() const {$/;"	f	class:Molecule
bounds_checking	src/madness/tensor/tensor.h	/^        static bool bounds_checking() {$/;"	f	class:madness::Tensor
box	src/apps/chem/znemo.h	/^	std::vector<double> box() const {return get<std::vector<double> >("box");}$/;"	f	class:madness::Nemo_complex_Parameters
box_interior	src/madness/mra/funcimpl.h	/^        mutable long box_interior[1000];$/;"	m	class:madness::FunctionImpl
box_is_at_boundary	src/madness/mra/leafop.h	/^    virtual bool box_is_at_boundary(const Key<NDIM> &key)const{$/;"	f	struct:madness::Specialbox_op
box_leaf	src/madness/mra/funcimpl.h	/^        mutable long box_leaf[1000];$/;"	m	class:madness::FunctionImpl
box_mask_	src/examples/smooth.h	/^	const Function<T,NDIM> box_mask_;$/;"	m	class:smooth
boys	src/apps/moldft/preal.cc	/^    BoysLocalization boys;$/;"	m	class:MiniDFT	file:
bpot	src/apps/chem/zcis.h	/^		std::vector<complex_function_3d> bpot;$/;"	m	struct:madness::Zcis::root
bra1	src/apps/chem/projector.h	/^    	vecfuncT bra1() const {return bra1_;}$/;"	f	class:madness::StrongOrthogonalityProjector
bra1_	src/apps/chem/projector.h	/^        std::vector<Function<T,NDIM> > ket1_, bra1_, ket2_, bra2_;$/;"	m	class:madness::StrongOrthogonalityProjector
bra2	src/apps/chem/projector.h	/^    	vecfuncT bra2() const {return bra2_;}$/;"	f	class:madness::StrongOrthogonalityProjector
bra2_	src/apps/chem/projector.h	/^        std::vector<Function<T,NDIM> > ket1_, bra1_, ket2_, bra2_;$/;"	m	class:madness::StrongOrthogonalityProjector
brakettype	src/examples/compiler/mra-driver.hh	/^    static Type brakettype(Type f, Type g) {$/;"	f	class:Exp
break_apart	src/madness/mra/key.h	/^        void break_apart(Key<LDIM>& key1, Key<KDIM>& key2) const {$/;"	f	class:madness::Key
break_on_failure_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool break_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver
broadcast	src/madness/world/parallel_archive.h	/^            void broadcast(objT& obj, ProcessID root) const {$/;"	f	class:madness::archive::BaseParallelArchive
broadcast	src/madness/world/worldgop.cc	/^    void WorldGopInterface::broadcast(void* buf, size_t nbyte, ProcessID root, bool dowork, Tag bcast_tag) {$/;"	f	class:madness::WorldGopInterface
broadcast	src/madness/world/worldgop.h	/^        inline void broadcast(T* buf, size_t nelem, ProcessID root) {$/;"	f	class:madness::WorldGopInterface
broadcast	src/madness/world/worldgop.h	/^        void broadcast(T& t) {$/;"	f	class:madness::WorldGopInterface
broadcast	src/madness/world/worldgop.h	/^        void broadcast(T& t, ProcessID root) {$/;"	f	class:madness::WorldGopInterface
broadcast	src/madness/world/worldmutex.h	/^        void broadcast() const {$/;"	f	class:madness::ConditionVariable
broadcast	src/madness/world/worldmutex.h	/^        void broadcast() const {$/;"	f	class:madness::PthreadConditionVariable
broadcast_serializable	src/madness/world/worldgop.h	/^        void broadcast_serializable(objT& obj, ProcessID root) {$/;"	f	class:madness::WorldGopInterface
broaden	src/madness/mra/mra.h	/^        void broaden(const BoundaryConditions<NDIM>& bc=FunctionDefaults<NDIM>::get_bc(),$/;"	f	class:madness::Function
broaden	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::broaden(std::vector<bool> is_periodic, bool fence) {$/;"	f	class:madness::FunctionImpl
broaden_op	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::broaden_op(const keyT& key, const std::vector< Future <bool> >& v) {$/;"	f	class:madness::FunctionImpl
bset	src/apps/chem/SCF.h	/^	std::vector<int> aset, bset;$/;"	m	class:madness::SCF
bset	src/apps/moldft/mcpfit.cc	/^    vector<int> aset, bset;$/;"	m	struct:Calculation	file:
bset	src/apps/polar/mcpfit.cc	/^    vector<int> aset, bset;$/;"	m	struct:Calculation	file:
bset	src/apps/polar/moldft.cc	/^    std::vector<int> aset, bset;$/;"	m	struct:Calculation	file:
bset_mp	src/apps/polar/moldft.cc	/^    std::vector<int> aset_mp, bset_mp;$/;"	m	struct:Calculation	file:
bsh_	src/madness/mra/function_factory.h	/^    enum operatortype {coulomb_, slater_, f12_, bsh_};$/;"	e	enum:madness::TwoElectronFactory::operatortype
bsh_eps	src/apps/chem/CCStructures.h	/^    double bsh_eps;$/;"	m	class:madness::CCPair
bsh_eps	src/apps/chem/mp2.cc	/^static const double bsh_eps = 1.e-7;$/;"	v	file:
bsh_eps	src/examples/helium_exact.cc	/^static double bsh_eps = 1.e-8;$/;"	v	file:
bsh_fit	src/madness/mra/gfit.h	/^	static void bsh_fit(double mu, double lo, double hi, double eps,$/;"	f	class:madness::GFit
bsh_fit_ndim	src/madness/mra/gfit.h	/^	void static bsh_fit_ndim(int ndim, double mu, double lo, double hi, double eps,$/;"	f	class:madness::GFit
bsh_spherical_moments	src/madness/mra/gfit.h	/^	static void bsh_spherical_moments(double mu, double R, Tensor<double>& q) {$/;"	f	class:madness::GFit
bshop	src/apps/chem/PNOF12Potentials.h	/^	std::shared_ptr<real_convolution_3d> bshop;   							\/\/\/< operator for convolutions with the bsh operator (parametrized with the exponent of the corrfac: gamma)$/;"	m	class:madness::F12Potentials
bshop_sq	src/apps/chem/PNOF12Potentials.h	/^	std::shared_ptr<real_convolution_3d> bshop_sq;   						\/\/\/< operator for convolutions with the bsh operator (parametrized with the exponent of the corrfac: 2*gamma)$/;"	m	class:madness::F12Potentials
bsrtol	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double bsrtol;$/;"	m	struct:__anon29
buf	src/madness/world/dqueue.h	/^        volatile T* volatile buf;        \/\/\/< Actual buffer$/;"	m	class:madness::DQueue
buf	src/madness/world/worldam.h	/^            AmArg* buf;$/;"	m	class:madness::WorldAmInterface::SendReq
buf	src/madness/world/worldam.h	/^        unsigned char* buf() const { return (unsigned char*)(this) + sizeof(AmArg); }$/;"	f	class:madness::AmArg
buffer	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter
buffer	src/madness/mra/funcimpl.h	/^        coeffT buffer; \/\/\/< The coefficients, if any$/;"	m	class:madness::FunctionNode
buffer	src/madness/world/future.h	/^        char buffer[sizeof(T)]; \/\/\/< Buffer to hold a single \\c T object.$/;"	m	class:madness::Future
buffer_	src/madness/external/elemental/include/elemental/core/Memory.hpp	/^    G* buffer_;$/;"	m	class:elem::Memory
buffer_	src/madness/world/stack.h	/^        char buffer_[sizeof(T) * N]; \/\/\/< Static buffer for storing a small number of elements.$/;"	m	class:madness::Stack
bufsize	src/madness/world/binsorter.h	/^        std::size_t bufsize;$/;"	m	class:madness::BinSorter
bufsize	src/madness/world/mpi_archive.h	/^            const std::size_t bufsize; \/\/\/< Size of the buffer.$/;"	m	class:madness::archive::MPIOutputArchive
buildHamiltonian1D	src/apps/hf/matlab/cosine_potential/buildHamiltonian1D.m	/^function H = buildHamiltonian1D(L, npts, alpha)$/;"	f
buildPeriodicHamiltonian	src/apps/hf/matlab/cosine_potential/buildPeriodicHamiltonian.m	/^function H = buildPeriodicHamiltonian()$/;"	f
build_date	src/madness/misc/gitinfo.cc	/^        const char* build_date() {$/;"	f	namespace:madness::info
build_fock_matrix	src/apps/hf/solver.h	/^    tensorT build_fock_matrix(vecfuncT& psi,$/;"	f	class:madness::Solver
build_time	src/madness/misc/gitinfo.cc	/^        const char* build_time() {$/;"	f	namespace:madness::info
build_tree_map	src/madness/mra/mypmap.h	/^        void build_tree_map(std::vector< TreeCoords<D> > v) {$/;"	f	class:madness::MyPmap
buildlaplacian	src/apps/hf/matlab/cosine_potential/buildmatrix.m	/^function A = buildlaplacian(n)$/;"	f
buildlaplacian3d	src/apps/hf/matlab/cosine_potential/buildlaplacian3d.m	/^function A = buildlaplacian3d(n, dx)$/;"	f
bv_left	src/madness/mra/derivative.h	/^        Tensor<double> bv_left, bv_right ; \/\/\/< Blocks of the derivative operator for the boundary contribution$/;"	m	class:madness::Derivative
bv_right	src/madness/mra/derivative.h	/^        Tensor<double> bv_left, bv_right ; \/\/\/< Blocks of the derivative operator for the boundary contribution$/;"	m	class:madness::Derivative
bvec	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
bvec	src/apps/hf/molecularbasis.h	/^    Tensor<double> dmat, avec, bvec;$/;"	m	class:AtomicBasis
bvec	src/apps/polar/molecularbasis.h	/^    Tensor<double> dmat, avec, bvec;$/;"	m	class:AtomicBasis
by_time	bin/taskprofile.pl	/^sub by_time {$/;"	s
byte	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^typedef unsigned char byte;$/;"	t	namespace:elem
bytecode_type	src/madness/external/muParser/muParserDef.h	/^  typedef MUP_BYTECODE_TYPE bytecode_type;$/;"	t	namespace:mu
c	src/apps/moldft/fci/timer.f	/^      double preci/;"	v
c	src/apps/moldft/mcpfit.cc	/^    double c;$/;"	m	class:NcOverR	file:
c	src/apps/moldft/pointgroup.h	/^    int c[8][8];                \/\/\/< Character table$/;"	m	class:PointGroup
c	src/apps/polar/mcpfit.cc	/^    double c;$/;"	m	class:NcOverR	file:
c	src/apps/polar/pointgroup.h	/^    int c[8][8];                \/\/< Character table$/;"	m	class:PointGroup
c	src/examples/compiler/mra-driver.hh	/^    std::vector<Exp*> c; \/\/ Children in order$/;"	m	class:Exp
c	src/examples/heat.cc	/^static const double c = 2.0;       \/\/$/;"	v	file:
c	src/examples/heat2.cc	/^static const double c = 2.0;       \/\/$/;"	v	file:
c	src/examples/nonlinschro.cc	/^static const double c = 1.0;$/;"	v	file:
c	src/examples/tdse1d.cc	/^static double c = 1.86*ctarget;$/;"	v	file:
c	src/examples/testspectralprop.cc	/^static double c = 1.86*ctarget;$/;"	v	file:
c	src/madness/mra/convolution1d.h	/^        Tensor<double> c;$/;"	m	class:madness::Convolution1D
c	src/madness/mra/sdf_shape_3D.h	/^        const double c; \/\/\/< Curvature\/radius of the surface$/;"	m	class:madness::SDFParaboloid
c	src/madness/mra/sdf_shape_3D.h	/^        const double c; \/\/\/< The radius$/;"	m	class:madness::SDFCone
c	src/madness/mra/tools/mathutil.py	/^    c = sparse_mtxm(a,b)$/;"	v
c	src/madness/tensor/gfit.cc	/^const double c = 137.0359895;$/;"	v
c	src/madness/world/test_ar.cc	/^    long c;$/;"	m	class:C	file:
c	src/madness/world/test_sig.cc	/^void c() {$/;"	f
c0	src/madness/tensor/srconf.h	/^		const std::vector<Slice>& c0() const {$/;"	f	class:madness::SRConf
c_DefaultOprt	src/madness/external/muParser/muParserBase.cpp	/^  const char_type* ParserBase::c_DefaultOprt[] =$/;"	m	class:mu::ParserBase	file:
c_DefaultOprt	src/madness/external/muParser/muParserBase.h	/^    static const char_type *c_DefaultOprt[];$/;"	m	class:mu::ParserBase
c__0	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	/^static int c__0 = 0;$/;"	v	file:
c__1	src/madness/external/elemental/external/pmrrr/src/lapack/odnst.c	/^static int c__1 = 1;$/;"	v	file:
c__1	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	/^static int c__1 = 1;$/;"	v	file:
c__1	src/madness/external/elemental/external/pmrrr/src/lapack/odrre.c	/^static int c__1 = 1;$/;"	v	file:
c__1	src/madness/external/elemental/external/pmrrr/src/lapack/odrrf.c	/^static int c__1 = 1;$/;"	v	file:
c__1	src/madness/external/elemental/external/pmrrr/src/lapack/odrrv.c	/^static int c__1 = 1;$/;"	v	file:
c__1	src/madness/external/elemental/external/pmrrr/src/lapack/odsq2.c	/^static int c__1 = 1;$/;"	v	file:
c__1	src/madness/external/elemental/external/pmrrr/src/lapack/odstmr.c	/^static int c__1 = 1;$/;"	v	file:
c__1	src/madness/external/elemental/external/pmrrr/src/lapack/oerbla.c	/^static int c__1 = 1;$/;"	v	file:
c__10	src/madness/external/elemental/external/pmrrr/src/lapack/odsq2.c	/^static int c__10 = 10;$/;"	v	file:
c__11	src/madness/external/elemental/external/pmrrr/src/lapack/odsq2.c	/^static int c__11 = 11;$/;"	v	file:
c__2	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	/^static int c__2 = 2;$/;"	v	file:
c__2	src/madness/external/elemental/external/pmrrr/src/lapack/odrre.c	/^static int c__2 = 2;$/;"	v	file:
c__2	src/madness/external/elemental/external/pmrrr/src/lapack/odrrv.c	/^static int c__2 = 2;$/;"	v	file:
c__2	src/madness/external/elemental/external/pmrrr/src/lapack/odsq2.c	/^static int c__2 = 2;$/;"	v	file:
c__3	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	/^static int c__3 = 3;$/;"	v	file:
c__3	src/madness/external/elemental/external/pmrrr/src/lapack/odsq2.c	/^static int c__3 = 3;$/;"	v	file:
c__4	src/madness/external/elemental/external/pmrrr/src/lapack/odsq2.c	/^static int c__4 = 4;$/;"	v	file:
c_b14	src/apps/chem/lda.cc	/^const double c_b14 = 1.333333333333333333333333333333;$/;"	m	namespace:madness	file:
c_b14	src/apps/hf/lda.h	/^static double c_b14 = 1.333333333333333333333333333333;$/;"	v
c_b14	src/apps/polar/lda.cc	/^const double c_b14 = 1.333333333333333333333333333333;$/;"	m	namespace:madness	file:
c_b18	src/madness/external/elemental/external/pmrrr/src/lapack/odstmr.c	/^static double c_b18 = .001;$/;"	v	file:
c_b2	src/apps/chem/lda.cc	/^const double c_b2  = 0.333333333333333333333333333333333;$/;"	m	namespace:madness	file:
c_b2	src/apps/hf/lda.h	/^static double c_b2 = .333333333333333333333333333333333;$/;"	v
c_b2	src/apps/polar/lda.cc	/^const double c_b2  = 0.333333333333333333333333333333333;$/;"	m	namespace:madness	file:
c_b5	src/madness/external/elemental/external/pmrrr/src/lapack/odrrv.c	/^static double c_b5 = 0.;$/;"	v	file:
c_b7	src/apps/chem/lda.cc	/^const double c_b7  = 0.333333333333333333333333333333;$/;"	m	namespace:madness	file:
c_b7	src/apps/hf/lda.h	/^static double c_b7 = .333333333333333333333333333333;$/;"	v
c_b7	src/apps/polar/lda.cc	/^const double c_b7  = 0.333333333333333333333333333333;$/;"	m	namespace:madness	file:
c_b8	src/apps/hf/lda.h	/^static double c_b8 = .5;$/;"	v
c_iCount	src/madness/external/muParser/muParserTest.h	/^        static int c_iCount;$/;"	m	class:mu::Test::ParserTester
c_n1	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	/^static int c_n1 = -1;$/;"	v	file:
c_queue	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  queue_t *c_queue;$/;"	m	struct:__anon27
c_rks_vwn5	src/apps/moldft/lda.f	/^      subroutine c_rks_vwn5(/;"	s
c_rks_vwn5	src/apps/polar/lda.f	/^      subroutine c_rks_vwn5(/;"	s
c_rks_vwn5__	src/apps/chem/lda.cc	/^int c_rks_vwn5__(const double *r__, double *f, double * dfdra) {$/;"	f	namespace:madness
c_rks_vwn5__	src/apps/hf/lda.h	/^inline \/* Subroutine *\/ int c_rks_vwn5__(const double *r__, double *f, double *$/;"	f
c_rks_vwn5__	src/apps/polar/lda.cc	/^int c_rks_vwn5__(const double *r__, double *f, double * dfdra) {$/;"	f	namespace:madness
c_str	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^  const char* c_str() const { return pathname_.c_str(); }$/;"	f	class:testing::internal::FilePath
c_str	src/madness/external/tinyxml/tinystr.h	/^	const char * c_str () const { return rep_->str; }$/;"	f	class:TiXmlString
c_uks_vwn5	src/apps/moldft/lda.f	/^      subroutine c_uks_vwn5(/;"	s
c_uks_vwn5	src/apps/polar/lda.f	/^      subroutine c_uks_vwn5(/;"	s
c_uks_vwn5__	src/apps/chem/lda.cc	/^int c_uks_vwn5__(double *ra, double *rb, double * f, double *dfdra, double *dfdrb) {$/;"	f	namespace:madness
c_uks_vwn5__	src/apps/hf/lda.h	/^inline \/* Subroutine *\/ int c_uks_vwn5__(double *ra, double *rb, double *$/;"	f
c_uks_vwn5__	src/apps/polar/lda.cc	/^int c_uks_vwn5__(double *ra, double *rb, double * f, double *dfdra, double *dfdrb) {$/;"	f	namespace:madness
cabs_thresh	src/apps/chem/PNOParameters.h	/^	double cabs_thresh()const { return get<double >("cabs_thresh");}$/;"	f	class:madness::F12Parameters
cache	src/madness/mra/simplecache.h	/^        mapT cache;$/;"	m	class:madness::SimpleCache
cache	src/madness/mra/twoscale.cc	/^    cache[kmax+1];$/;"	m	namespace:madness	typeref:class:madness::twoscale_cache_class	file:
cache_container	src/madness/world/dist_cache.h	/^            typedef madness::ConcurrentHashMap<keyT, Cache*> cache_container;$/;"	t	class:madness::detail::DistCache
caches_	src/madness/world/dist_cache.h	/^            static cache_container caches_; \/\/\/< Cache container$/;"	m	class:madness::detail::DistCache
caches_	src/madness/world/dist_cache.h	/^        typename DistCache<keyT>::cache_container DistCache<keyT>::caches_;$/;"	m	class:madness::detail::DistCache
calc	src/apps/chem/SCF.h	/^	SCF& calc;$/;"	m	class:madness::MolecularEnergy
calc	src/apps/chem/mp2.h	/^        std::shared_ptr<SCF> calc;$/;"	m	class:madness::HartreeFock
calc	src/apps/chem/nemo.h	/^	std::shared_ptr<SCF> calc;$/;"	m	class:madness::Nemo
calc	src/apps/moldft/mcpfit.cc	/^    Calculation & calc;$/;"	m	struct:CoreFittingTarget	file:
calc	src/apps/polar/mcpfit.cc	/^    Calculation & calc;$/;"	m	struct:CoreFittingTarget	file:
calc	src/apps/polar/moldft.cc	/^    Calculation &calc;$/;"	m	class:MolecularEnergy	file:
calc_density	src/apps/adrian/ResponsePotential.h	/^      real_function_3d calc_density(std::vector<real_function_3d>& orbs) {$/;"	f	class:madness::ResponsePotential
calc_density	src/apps/bryan/ResponsePotential.h	/^      real_function_3d calc_density(std::vector<real_function_3d>& orbs) {$/;"	f	class:madness::ResponsePotential
calc_deriv	src/apps/moldft/mcpfit.cc	/^    tensorT calc_deriv (World & world, CorePotential & cp, double r)$/;"	f	struct:Calculation
calc_deriv	src/apps/polar/mcpfit.cc	/^    tensorT calc_deriv (World & world, CorePotential & cp, double r)$/;"	f	struct:Calculation
calc_derivative_Jmo	src/apps/polar/moldft.cc	/^functionT calc_derivative_Jmo(World &world, int &p,$/;"	f	struct:Calculation
calc_dipole_mo	src/apps/chem/SCF.cc	/^vecfuncT SCF::calc_dipole_mo(World &world, vecfuncT &mo, const int axis)$/;"	f	class:madness::SCF
calc_dipole_mo	src/apps/polar/moldft.cc	/^vecfuncT calc_dipole_mo(World &world, vecfuncT &mo, int &axis, int &size)$/;"	f	struct:Calculation
calc_djkmo	src/apps/chem/SCF.cc	/^vecfuncT SCF::calc_djkmo(World &world, XCOperator &xc_alda, const vecfuncT &dmo1,$/;"	f	class:madness::SCF
calc_djkmo	src/apps/polar/moldft.cc	/^vecfuncT calc_djkmo(World &world, vecfuncT &dmo1,$/;"	f	struct:Calculation
calc_dpolar	src/apps/chem/SCF.cc	/^void SCF::calc_dpolar(World &world,$/;"	f	class:madness::SCF
calc_dpolar	src/apps/polar/moldft.cc	/^void calc_dpolar(World &world, double &Dpolar_average,$/;"	f	struct:Calculation
calc_exchange_function	src/apps/chem/SCF.cc	/^functionT SCF::calc_exchange_function(World &world, const int &p,$/;"	f	class:madness::SCF
calc_exchange_function	src/apps/polar/moldft.cc	/^functionT calc_exchange_function(World &world, int &p,$/;"	f	struct:Calculation
calc_freq	src/apps/chem/SCF.cc	/^void SCF::calc_freq(World &world, double &omega, tensorT &ak, tensorT &bk, int sign)$/;"	f	class:madness::SCF
calc_freq	src/apps/polar/moldft.cc	/^void calc_freq(World &world, double &omega, tensorT &ak, tensorT &bk, int sign)$/;"	f	struct:Calculation
calc_optimal_coeffs	src/apps/moldft/mcpfit.cc	/^    CorePotential calc_optimal_coeffs (World & world, CorePotential & cp)$/;"	f	struct:Calculation
calc_optimal_coeffs	src/apps/polar/mcpfit.cc	/^    CorePotential calc_optimal_coeffs (World & world, CorePotential & cp)$/;"	f	struct:Calculation
calc_response_function	src/apps/chem/SCF.cc	/^void SCF::calc_response_function(World &world, vecfuncT &dmo,$/;"	f	class:madness::SCF
calc_response_function	src/apps/polar/moldft.cc	/^void calc_response_function(World &world, vecfuncT &dmo,$/;"	f	struct:Calculation
calc_rhs	src/apps/chem/SCF.cc	/^vecfuncT SCF::calc_rhs(World &world, const vecfuncT &mo,$/;"	f	class:madness::SCF
calc_rhs	src/apps/polar/moldft.cc	/^vecfuncT calc_rhs(World &world, vecfuncT &mo, vecfuncT &Vdmo, vecfuncT &dipolemo, vecfuncT &djkmo)$/;"	f	struct:Calculation
calc_xc_function	src/apps/chem/SCF.cc	/^vecfuncT SCF::calc_xc_function(World &world, XCOperator &xc_alda,$/;"	f	class:madness::SCF
calculate_coulomb_energy	src/apps/hf/hartreefock.cc	/^  double HartreeFock<T,NDIM>::calculate_coulomb_energy(const std::vector<funcT>& phis, const funcT& psi)$/;"	f	class:madness::HartreeFock
calculate_energy_update	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::calculate_energy_update(World &world,$/;"	f	class:TDHF
calculate_energy_update	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::calculate_energy_update(World & world,$/;"	f	class:TDHF
calculate_energy_update	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::calculate_energy_update(World & world,$/;"	f	class:TDHF
calculate_energy_update	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::calculate_energy_update(World & world,$/;"	f	class:TDHF
calculate_energy_update	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::calculate_energy_update(World & world,$/;"	f	class:TDHF
calculate_exchange_energy	src/apps/hf/hartreefock.cc	/^  double HartreeFock<T,NDIM>::calculate_exchange_energy(const std::vector<funcT>& phis,$/;"	f	class:madness::HartreeFock
calculate_ke_sp	src/apps/hf/dft.cc	/^  double DFT<T,NDIM>::calculate_ke_sp(funcT psi, bool periodic)$/;"	f	class:madness::DFT
calculate_ke_sp	src/apps/hf/hartreefock.cc	/^  double HartreeFock<T,NDIM>::calculate_ke_sp(funcT psi)$/;"	f	class:madness::HartreeFock
calculate_kinetic_energy	src/apps/hf/solver.h	/^    double calculate_kinetic_energy()$/;"	f	class:madness::Solver
calculate_max_residual	src/apps/adrian/TDDFT.cc	/^double TDHF::calculate_max_residual(World &world, ResponseFunction &f) {$/;"	f	class:TDHF
calculate_max_residual	src/apps/adrian/TDHF.cc	/^double TDHF::calculate_max_residual(World & world,$/;"	f	class:TDHF
calculate_max_residual	src/apps/adrian/TDHF2.cc	/^double TDHF::calculate_max_residual(World & world,$/;"	f	class:TDHF
calculate_max_residual	src/apps/bryan/TDHF.cc	/^double TDHF::calculate_max_residual(World & world,$/;"	f	class:TDHF
calculate_max_residual	src/apps/bryan/TDHF2.cc	/^double TDHF::calculate_max_residual(World & world,$/;"	f	class:TDHF
calculate_pe_sp	src/apps/hf/hartreefock.cc	/^  double HartreeFock<T,NDIM>::calculate_pe_sp(funcT psi)$/;"	f	class:madness::HartreeFock
calculate_tot_coulomb_energy	src/apps/hf/dft.cc	/^  double DFT<T,NDIM>::calculate_tot_coulomb_energy(const World& world, const Function<double, NDIM>& rho,$/;"	f	class:madness::DFT
calculate_tot_coulomb_energy	src/apps/hf/hartreefock.cc	/^  double HartreeFock<T,NDIM>::calculate_tot_coulomb_energy(const std::vector<funcT>& phis)$/;"	f	class:madness::HartreeFock
calculate_tot_exchange_energy	src/apps/hf/hartreefock.cc	/^  double HartreeFock<T,NDIM>::calculate_tot_exchange_energy(const std::vector<funcT>& phis)$/;"	f	class:madness::HartreeFock
calculate_tot_ke_sp	src/apps/hf/dft.cc	/^  double DFT<T,NDIM>::calculate_tot_ke_sp(const std::vector<funcT>& phis, bool spinpol,$/;"	f	class:madness::DFT
calculate_tot_ke_sp	src/apps/hf/hartreefock.cc	/^  double HartreeFock<T,NDIM>::calculate_tot_ke_sp(const std::vector<funcT>& phis)$/;"	f	class:madness::HartreeFock
calculate_tot_pe_sp	src/apps/hf/dft.cc	/^  double DFT<T,NDIM>::calculate_tot_pe_sp(const World& world, const Function<double,NDIM>& rho,$/;"	f	class:madness::DFT
calculate_tot_pe_sp	src/apps/hf/hartreefock.cc	/^  double HartreeFock<T,NDIM>::calculate_tot_pe_sp(const std::vector<funcT>& phis)$/;"	f	class:madness::HartreeFock
calculate_tot_xc_energy	src/apps/hf/dft.cc	/^  double DFT<T,NDIM>::calculate_tot_xc_energy(const Function<double, NDIM>& rho)$/;"	f	class:madness::DFT
calculation	src/apps/chem/CCStructures.h	/^    CalcType calculation = CT_LRCC2;$/;"	m	struct:madness::CCParameters
call_stack	src/madness/world/worldprofile.cc	/^    thread_local WorldProfileObj* WorldProfileObj::call_stack = 0;$/;"	m	class:madness::WorldProfileObj	file:
call_stack	src/madness/world/worldprofile.h	/^        static thread_local WorldProfileObj* call_stack;  \/\/\/< Current top of this thread's call stack$/;"	m	class:madness::WorldProfileObj
callable_enabler	src/madness/world/world_task_queue.h	/^        struct callable_enabler<callableT,$/;"	s	namespace:madness::detail
callable_traits	src/madness/world/function_traits.h	/^        struct callable_traits : public std::false_type {};$/;"	s	namespace:madness::detail
callable_traits	src/madness/world/function_traits.h	/^        struct callable_traits<fnT(argTs...), typename std::enable_if_t<is_type<std::result_of_t<fnT(argTs...)>>::value>> {$/;"	s	namespace:madness::detail
callbackT	src/madness/world/future.h	/^        typedef Stack<CallbackInterface*, MAXCALLBACKS> callbackT; \/\/\/< Callback type.$/;"	t	class:madness::FutureImpl
callbacks	src/madness/world/dependency_interface.h	/^        mutable volatile callbackT callbacks; \/\/\/< Called ONCE by \\c dec() when `ndepend==0`.$/;"	m	class:madness::DependencyInterface
callbacks	src/madness/world/future.h	/^        volatile callbackT callbacks;$/;"	m	class:madness::FutureImpl
caller_frame_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void* caller_frame_;$/;"	m	class:testing::internal::OsStackTraceGetter
callers_	src/madness/world/dependency_interface.h	/^        std::unordered_map<std::string, int> callers_;$/;"	m	class:madness::DependencyInterface
callers_	src/madness/world/dependency_interface.h	/^        std::unordered_map<std::string,int> callers_;$/;"	m	class:madness::CallbackInterface
calorie_joule_relationship	src/madness/constants.h	/^        const double calorie_joule_relationship = 4.184000000 ; \/\/\/< 1 kcal\/mol = 4.184 kJ\/mol.$/;"	m	namespace:madness::constants
cancel	src/madness/world/thread.h	/^        int cancel() const {$/;"	f	class:madness::ThreadBase
cancelled	src/madness/world/stubmpi.h	/^    int cancelled;$/;"	m	struct:MPI_Status
canon	src/apps/hf/electronicstructureparams.h	/^  bool canon;$/;"	m	struct:madness::ElectronicStructureParams
canonicalize	src/apps/chem/PNO.cpp	/^void PNO::canonicalize(PNOPairs& pairs)const{$/;"	f	class:madness::PNO
canonicalize	src/apps/chem/TDHF.cc	/^vector_real_function_3d TDHF::canonicalize(const vector_real_function_3d& v, Tensor<double>& veps)const{$/;"	f	class:madness::TDHF
canonicalize	src/apps/chem/zcis.cc	/^void Zcis::canonicalize(const std::vector<complex_function_3d>& mo, const real_function_3d& density,$/;"	f	class:madness::Zcis
canonicalize	src/apps/chem/znemo.cc	/^Znemo::canonicalize(std::vector<complex_function_3d>& amo,$/;"	f	class:madness::Znemo
canonicalize_pno	src/apps/chem/PNOParameters.h	/^	bool canonicalize_pno()const { return get<bool >("canonicalize_pno");}$/;"	f	class:madness::PNOParameters
capacity	src/madness/external/tinyxml/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep
capacity	src/madness/external/tinyxml/tinystr.h	/^	size_type capacity () const { return rep_->capacity; }$/;"	f	class:TiXmlString
capacity	src/madness/world/stack.h	/^        size_type capacity() const { return capacity_; }$/;"	f	class:madness::Stack
capacity_	src/madness/world/stack.h	/^        size_type capacity_; \/\/\/< The maximum size, in elements, of the \\c data_ buffer.$/;"	m	class:madness::Stack
capture	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  void capture(T* ptr) {$/;"	f	class:testing::internal::linked_ptr
carl	src/madness/world/test_world.cc	/^    static int carl() {$/;"	f	class:TTT
cart	src/apps/nick/spawnK.py	/^cart = False$/;"	v
cartComm_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    mpi::Comm cartComm_,  \/\/ the processes that are in the grid$/;"	m	class:elem::Grid
cart_ir	src/apps/moldft/pointgroup.h	/^    int cart_ir(int axis) const {$/;"	f	class:PointGroup
cart_ir	src/apps/polar/pointgroup.h	/^    int cart_ir(int axis) const {$/;"	f	class:PointGroup
cary	src/madness/world/test_world.cc	/^    string cary(int i) {$/;"	f	class:Mary
cary0	src/madness/world/test_world.cc	/^    string cary0() {$/;"	f	class:Mary
cast_basis	src/apps/adrian/basis.h	/^std::vector<std::reference_wrapper<const T>> cast_basis(const BasisSet &bset) {$/;"	f	namespace:slymer
cast_basis	src/apps/bryan/basis.h	/^std::vector<std::reference_wrapper<const T>> cast_basis(const BasisSet &bset) {$/;"	f	namespace:slymer
catch_exceptions	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool catch_exceptions() const { return catch_exceptions_; }$/;"	f	class:testing::internal::UnitTestImpl
catch_exceptions_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::GTestFlagSaver
catch_exceptions_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::UnitTestImpl
cavitation_energy	src/examples/gygi_soltion.cc	/^  double cavitation_energy() const {$/;"	f	class:GygiPot
cbegin	src/madness/world/worldhashmap.h	/^        const_iterator cbegin() const {$/;"	f	class:madness::ConcurrentHashMap
cbfT	src/apps/chem/PNOGuessFunctions.h	/^	typedef std::vector<std::tuple<int, std::vector<double>, std::vector<double> > > cbfT;$/;"	t	class:madness::BasisFunctions
cblas	src/madness.h	/^    namespace cblas {$/;"	n	namespace:madness
cblas	src/madness/tensor/cblas.h	/^namespace cblas {$/;"	n	namespace:madness
cblas	src/madness/tensor/cblas_types.h	/^namespace cblas {$/;"	n	namespace:madness
cbrt	src/apps/nick/mpreal.h	/^inline const mpreal cbrt(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
cc	src/examples/navstokes_cosines.cc	/^const double cc = 0;\/\/ L\/(deltaT*Nts)\/2;$/;"	v
cc	src/madness/mra/tools/mathutil.py	/^    cc= mxm(transpose(a),b)$/;"	v
ccs_potential_ex	src/apps/chem/CCPotentials.cc	/^  CCPotentials::ccs_potential_ex(const CC_vecfunction& singles_gs,const CC_vecfunction& singles_ex) const {$/;"	f	class:madness::CCPotentials
ccs_potential_gs	src/apps/chem/CCPotentials.cc	/^  CCPotentials::ccs_potential_gs(const CC_vecfunction& tau) const {$/;"	f	class:madness::CCPotentials
ccs_unprojected	src/apps/chem/CCPotentials.cc	/^  CCPotentials::ccs_unprojected(const CC_vecfunction& ti,const CC_vecfunction& tk) const {$/;"	f	class:madness::CCPotentials
cdata	src/apps/chem/AC.h	/^    FunctionCommonData<double,NDIM> cdata;$/;"	m	struct:madness::BinaryOpStructure
cdata	src/apps/chem/AC.h	/^    FunctionCommonData<double,NDIM> cdata;$/;"	m	struct:madness::UnaryOpStructure
cdata	src/apps/chem/GuessFactory.h	/^    FunctionCommonData<double,3> cdata;$/;"	m	class:madness::guessfactory::ExopUnaryOpStructure
cdata	src/apps/chem/xcfunctional.h	/^    const FunctionCommonData<double,3>& cdata;$/;"	m	struct:madness::xc_kernel_apply
cdata	src/examples/smooth.h	/^    const FunctionCommonData<double,3>& cdata;$/;"	m	struct:slater_kernel_apply
cdata	src/madness/external/tinyxml/tinyxml.h	/^	bool cdata;			\/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText
cdata	src/madness/mra/funcimpl.h	/^        const FunctionCommonData<T,NDIM>& cdata;$/;"	m	class:madness::FunctionImpl
cdata	src/madness/mra/operator.h	/^        const FunctionCommonData<Q,NDIM>& cdata;$/;"	m	class:madness::SeparatedConvolution
ceil	src/apps/nick/mpreal.h	/^inline const mpreal ceil(const mpreal& v)$/;"	f	namespace:mpfr
cell	src/madness/mra/funcdefaults.h	/^        static Tensor<double> cell ;   \/\/\/< cell[NDIM][2] Simulation cell, cell(0,0)=xlo, cell(0,1)=xhi, ...$/;"	m	class:madness::FunctionDefaults
cell	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> Tensor<double> FunctionDefaults<NDIM>::cell;$/;"	m	class:madness::FunctionDefaults
cell	src/madness/mra/mraplot.cc	/^    Tensor<double> cell;        \/\/ Computational cell$/;"	m	class:Plotter	file:
cell_min_width	src/madness/mra/funcdefaults.h	/^        static double cell_min_width;   \/\/\/< Size of smallest dimension$/;"	m	class:madness::FunctionDefaults
cell_min_width	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> double FunctionDefaults<NDIM>::cell_min_width;$/;"	m	class:madness::FunctionDefaults
cell_volume	src/madness/mra/funcdefaults.h	/^        static double cell_volume;      \/\/\/< Volume of simulation cell$/;"	m	class:madness::FunctionDefaults
cell_volume	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> double FunctionDefaults<NDIM>::cell_volume;$/;"	m	class:madness::FunctionDefaults
cell_width	src/madness/mra/funcdefaults.h	/^        static Tensor<double> cell_width;\/\/\/< Width of simulation cell in each dimension$/;"	m	class:madness::FunctionDefaults
cell_width	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> Tensor<double> FunctionDefaults<NDIM>::cell_width;$/;"	m	class:madness::FunctionDefaults
cend	src/madness/world/worldhashmap.h	/^        const_iterator cend() const {$/;"	f	class:madness::ConcurrentHashMap
center	src/apps/adrian/gaussian.h	/^  std::array<double, 3> center;$/;"	m	class:slymer::GaussianFunction
center	src/apps/bryan/gaussian.h	/^  std::array<double, 3> center;$/;"	m	class:slymer::GaussianFunction
center	src/apps/chem/GuessFactory.h	/^	const coord_3d center=coord_3d();$/;"	m	class:madness::guessfactory::GaussFunctor
center	src/apps/chem/GuessFactory.h	/^	coord_3d center=coord_3d();$/;"	m	class:madness::guessfactory::PolynomialFunctor
center	src/apps/chem/gth_pseudopotential.h	/^    coord_3d center;$/;"	m	class:madness::ProjRLMFunctor
center	src/apps/chem/gth_pseudopotential.h	/^    coord_3d center;$/;"	m	class:madness::ProjRLMStore
center	src/apps/chem/gth_pseudopotential.h	/^    coord_3d center;$/;"	m	class:madness::VLocalFunctor
center	src/apps/chem/molecule.cc	/^void Molecule::center()$/;"	f	class:madness::Molecule
center	src/apps/hf/mentity.cc	/^void MolecularEntity::center() {$/;"	f	class:MolecularEntity
center	src/apps/hf/test_he.cc	/^    const coordT center;$/;"	m	class:HeElectronicChargeDensityIGuess	file:
center	src/apps/hf/test_he.cc	/^    const coordT center;$/;"	m	class:HeNuclearChargeDensityIGuess	file:
center	src/apps/polar/gth_pseudopotential.h	/^    coord_3d center;$/;"	m	class:ProjFunctor
center	src/apps/polar/gth_pseudopotential.h	/^    coord_3d center;$/;"	m	class:ProjRLMFunctor
center	src/apps/polar/gth_pseudopotential.h	/^    coord_3d center;$/;"	m	class:RlmFunctor
center	src/apps/polar/gth_pseudopotential.h	/^    coord_3d center;$/;"	m	class:VLocalFunctor
center	src/apps/polar/gth_pseudopotential.h	/^    coord_3d center;$/;"	m	class:YlmFunctor
center	src/apps/polar/molecule.cc	/^void Molecule::center() {$/;"	f	class:Molecule
center	src/examples/dataloadbal.cc	/^    const coord_3d center;$/;"	m	class:Gaussian	file:
center	src/madness/mra/sdf_shape_2D.h	/^        const coord_2d center; \/\/\/< Center of circle$/;"	m	class:madness::SDFCircle
center	src/madness/mra/sdf_shape_2D.h	/^        const coord_2d center; \/\/\/< the center$/;"	m	class:madness::SDFRectangle
center	src/madness/mra/sdf_shape_3D.h	/^        const coord_3d center; \/\/\/< Center of sphere$/;"	m	class:madness::SDFSphere
center	src/madness/mra/sdf_shape_3D.h	/^        const coord_3d center; \/\/\/< the center of the box$/;"	m	class:madness::SDFBox
center	src/madness/mra/sdf_shape_3D.h	/^        coord_3d center; \/\/\/< the center$/;"	m	class:madness::SDFEllipsoid
center	src/madness/mra/sdf_shape_3D.h	/^        coord_3d center; \/\/\/< the central axial point of the cylinder (distance a from both ends)$/;"	m	class:madness::SDFCylinder
center	src/madness/mra/testbc.cc	/^    const coordT center;$/;"	m	class:DSphere	file:
center	src/madness/mra/testbc.cc	/^    const coordT center;$/;"	m	class:Sphere	file:
center	src/madness/mra/testbsh.cc	/^    const coordT center;$/;"	m	class:Gaussian	file:
center	src/madness/mra/testopdir.cc	/^    const coordT center;$/;"	m	class:Gaussian	file:
center	src/madness/mra/testproj.cc	/^    const coordT center;$/;"	m	class:Gaussian	file:
center	src/madness/mra/testsuite.cc	/^    const coordT center;$/;"	m	class:DerivativeGaussian	file:
center	src/madness/mra/testsuite.cc	/^    const coordT center;$/;"	m	class:Gaussian	file:
center	src/madness/mra/testsuite.cc	/^    const coordT center;$/;"	m	class:GaussianPotential	file:
center	src/madness/mra/testunaryop.cc	/^    const coordT center;$/;"	m	class:Gaussian	file:
center	src/madness/mra/testvmra.cc	/^    const coordT center;$/;"	m	class:Gaussian	file:
center_of_charge_	src/examples/smooth.h	/^	const coord_3d center_of_charge_;$/;"	m	struct:asymptotic_density
center_of_mass	src/apps/chem/molecule.cc	/^Tensor<double> Molecule::center_of_mass() const$/;"	f	class:madness::Molecule
centered	src/apps/hf/electronicstructureparams.h	/^  bool centered;$/;"	m	struct:madness::ElectronicStructureParams
centers	src/apps/adrian/gaussian.h	/^    std::vector<madness::coord_3d> centers;$/;"	m	class:slymer::Gaussian_Functor
centers	src/apps/bryan/gaussian.h	/^    std::vector<madness::coord_3d> centers;$/;"	m	class:slymer::Gaussian_Functor
cfactoryT	src/apps/exciting/wannier.cc	/^typedef FunctionFactory<std::complex<double>,3> cfactoryT;$/;"	t	file:
cfrac	src/madness/mra/minmax/y1.cc	/^FLOAT cfrac(FLOAT z) {$/;"	f
cfunctionT	src/apps/exciting/wannier.cc	/^typedef Function<std::complex<double>,3> cfunctionT;$/;"	t	file:
cfunctionT	src/apps/hf/esolver.h	/^typedef Function<std::complex<double>,3> cfunctionT;$/;"	t
cfunctionT	src/examples/csqrt.cc	/^typedef Function<std::complex<double>,1> cfunctionT;$/;"	t	file:
cfunctorT	src/apps/exciting/wannier.cc	/^typedef std::shared_ptr< FunctionFunctorInterface< std::complex<double> ,3> > cfunctorT;$/;"	t	file:
cg_method	src/apps/chem/molecular_optimizer.h	/^	std::string cg_method() const {return get<std::string>("cg_method");}$/;"	f	class:madness::MolecularOptimizationParameters
cgelss_	src/madness/tensor/clapack_fortran.h	57;"	d
cgesv_	src/madness/tensor/clapack_fortran.h	52;"	d
cgesvd_	src/madness/tensor/clapack_fortran.h	47;"	d
cgmin	src/madness/mra/tools/mathutil.py	/^def cgmin(func, dfunc, guess, tol, precond=None, reset=None): $/;"	f
cgmin2	src/madness/mra/tools/mathutil.py	/^def cgmin2(func, guess, tol, eps, printvar=None,reset=None): $/;"	f
cgminold	src/madness/mra/tools/mathutil.py	/^def cgminold(func, dfunc, guess, tol): $/;"	f
changeExpr	src/madness/misc/phandler.h	/^    void changeExpr(const std::string newExpr) {$/;"	f	class:ParserHandler
change_dec_sep	src/madness/external/muParser/muParser.h	/^      explicit change_dec_sep(char_type cDecSep, char_type cThousandsSep = 0, int nGroup = 3)$/;"	f	class:mu::Parser::change_dec_sep
change_dec_sep	src/madness/external/muParser/muParser.h	/^    class change_dec_sep : public std::numpunct<TChar>$/;"	c	class:mu::Parser
change_tensor_type	src/madness/mra/mra.h	/^        void change_tensor_type(const TensorArgs& targs, bool fence=true) {$/;"	f	class:madness::Function
change_tensor_type	src/madness/tensor/gentensor.h	/^    void change_tensor_type(GenTensor<T>& t, const TensorArgs& targs) {$/;"	f	namespace:madness
change_tensor_type1	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::change_tensor_type1(const TensorArgs& targs, bool fence) {$/;"	f	class:madness::FunctionImpl
char_len	src/madness/fortran_ctypes.h	/^typedef int char_len;$/;"	t
char_type	src/madness/external/muParser/muParserDef.h	/^  typedef string_type::value_type char_type;$/;"	t	namespace:mu
characterlineT	src/apps/chem/pointgroupsymmetry.h	/^	typedef std::vector<int> characterlineT;$/;"	t	struct:madness::charactertable
charactertable	src/apps/chem/pointgroupsymmetry.h	/^struct charactertable {$/;"	s	namespace:madness
charge	src/apps/chem/AC.h	/^	int charge;$/;"	m	struct:madness::atom_information
charge	src/apps/chem/CalculationParameters.h	/^	double charge() const {return get<double>("charge");}$/;"	f	struct:madness::CalculationParameters
charge	src/apps/hf/ewald.cc	/^    double charge;$/;"	m	class:MolecularNuclearChargeDensityFunctor	file:
charge	src/apps/polar/moldft.cc	/^    double charge;         \/\/\/< Total molecular charge$/;"	m	struct:CalculationParameters	file:
charge_center	src/examples/colloid.cc	/^    const std::vector<double> charge_center; \/\/defines the center of  nuclear charge$/;"	m	class:SurfaceMoleculeInteraction	file:
charge_function	src/examples/colloid.cc	/^double charge_function(const coord_3d& r) {$/;"	f
charge_function	src/examples/dielectric.cc	/^double charge_function(const coord_3d& r) {$/;"	f
charge_function	src/examples/svpe.cc	/^double charge_function(const coord_3d& r) {$/;"	f
charges	src/apps/chem/pcm.h	/^    Tensor<double> charges;$/;"	m	class:madness::PCM
charon	src/madness/world/safempi.cc	/^    madness::SCALABLE_MUTEX_TYPE charon;$/;"	m	namespace:SafeMPI	file:
check	src/apps/chem/AC.h	/^	void check(World& world){$/;"	f	struct:madness::ACParameters
check	src/madness/mra/test6.cc	/^int check(bool b, const std::string message) {$/;"	f
check	src/madness/tensor/oldtest.cc	/^check(const T& t, const Q& q, double tol=1e-7) {$/;"	f
check	src/madness/tensor/test_distributed_matrix.cc	/^void check(DistributedMatrix<double>& A) {$/;"	f
check	src/madness/tensor/test_tensor.cc	/^    check(const T& t, const Q& q, double tol=1e-7) {$/;"	f	namespace:__anon44
check_allowed	src/apps/chem/QCCalculationParametersBase.h	/^	bool check_allowed() {$/;"	f	struct:madness::QCParameter
check_consistency	src/apps/chem/TDHF.cc	/^void TDHF::check_consistency() const {$/;"	f	class:madness::TDHF
check_cubic	src/madness/mra/operator.h	/^        void check_cubic() {$/;"	f	class:madness::SeparatedConvolution
check_dependencies	src/madness/world/taskfn.h	/^        void check_dependencies() {$/;"	f	struct:madness::TaskFn
check_dependency	src/madness/world/taskfn.h	/^        inline void check_dependency(Future<T>& fut) {$/;"	f	struct:madness::TaskFn
check_dependency	src/madness/world/taskfn.h	/^        inline void check_dependency(Future<T>* fut) {$/;"	f	struct:madness::TaskFn
check_dependency	src/madness/world/taskfn.h	/^        inline void check_dependency(const Future<void>&) { }$/;"	f	struct:madness::TaskFn
check_dependency	src/madness/world/taskfn.h	/^        inline void check_dependency(const detail::ArgHolder<T>&) { }$/;"	f	struct:madness::TaskFn
check_dependency	src/madness/world/taskfn.h	/^        inline void check_dependency(const std::vector<Future<void> >&) { }$/;"	f	struct:madness::TaskFn
check_dependency	src/madness/world/taskfn.h	/^        inline void check_dependency(detail::ArgHolder<std::vector<Future<T> > >& arg) {$/;"	f	struct:madness::TaskFn
check_dependency	src/madness/world/taskfn.h	/^        inline void check_dependency(std::vector<Future<T> >& vec) {$/;"	f	struct:madness::TaskFn
check_end_tag	src/madness/world/text_fstream_archive.h	/^            inline void check_end_tag() const {$/;"	f	class:madness::archive::TextFstreamInputArchive
check_energy_convergence	src/apps/chem/CC2.h	/^    check_energy_convergence(const std::vector<double> &current,const std::vector<double> &updated) const {$/;"	f	class:madness::CC2
check_err	src/apps/chem/test_SCFOperators.cc	/^bool check_err(double err, double thresh, std::string msg) {$/;"	f
check_err	src/apps/chem/test_dft.cc	/^bool check_err(double err, double thresh, std::string msg) {$/;"	f
check_for_inf	src/apps/chem/QCCalculationParametersBase.h	/^check_for_inf(const std::string& str, T& arg) {$/;"	f	namespace:madness
check_if_pseudo_atom	src/apps/chem/atomutil.cc	/^bool check_if_pseudo_atom(const std::string& symbol) {$/;"	f	namespace:madness
check_initialized	src/madness/world/worlddc.h	/^        inline void check_initialized() const {$/;"	f	class:madness::WorldContainer
check_input	src/apps/chem/mp2.h	/^        	void check_input(const std::shared_ptr<HartreeFock> hf) const {$/;"	f	struct:madness::MP2::Parameters
check_k	src/apps/adrian/TDDFT.cc	/^void TDHF::check_k(World &world, double thresh, int k) {$/;"	f	class:TDHF
check_k	src/apps/adrian/TDHF.cc	/^void TDHF::check_k(World& world, $/;"	f	class:TDHF
check_k	src/apps/adrian/TDHF2.cc	/^void TDHF::check_k(World& world, $/;"	f	class:TDHF
check_k	src/apps/bryan/TDHF.cc	/^void TDHF::check_k(World& world, $/;"	f	class:TDHF
check_k	src/apps/bryan/TDHF2.cc	/^void TDHF::check_k(World& world, $/;"	f	class:TDHF
check_linear_dependence	src/madness/mra/nonlinsol.h	/^	void check_linear_dependence(const Tensor<C>& Q, Tensor<C>& c, const double rcondtol, const double cabsmax,$/;"	f	namespace:madness
check_multiplication_table_c2v	src/apps/chem/test_pointgroupsymmetry.cc	/^int check_multiplication_table_c2v(World& world) {$/;"	f
check_operator_multiplications_2d	src/apps/chem/test_pointgroupsymmetry.cc	/^int check_operator_multiplications_2d(World& world) {$/;"	f
check_operator_multiplications_3d	src/apps/chem/test_pointgroupsymmetry.cc	/^int check_operator_multiplications_3d(World& world) {$/;"	f
check_orthonormality	src/apps/chem/PNO.cpp	/^void PNO::check_orthonormality(const vector_real_function_3d& v) const {$/;"	f	class:madness::PNO
check_orthonormality	src/madness/tensor/srconf.h	/^		static const bool check_orthonormality=false;$/;"	m	class:madness::SRConf
check_positive	src/apps/moldft/mcpfit.cc	/^    bool check_positive (tensorT & x)$/;"	f	class:MySteepestDescent
check_positive	src/apps/polar/mcpfit.cc	/^    bool check_positive (tensorT & x)$/;"	f	class:MySteepestDescent
check_pts	src/apps/interior_bc/test_problems.h	/^        virtual std::vector< Vector<double, 3> > check_pts() const {$/;"	f	class:ConstantSphere
check_pts	src/apps/interior_bc/test_problems.h	/^        virtual std::vector< Vector<double, 3> > check_pts() const {$/;"	f	class:CosineSphere
check_pts	src/apps/interior_bc/test_problems.h	/^        virtual std::vector< Vector<double, 3> > check_pts() const {$/;"	f	class:EmbeddedDirichlet
check_pts	src/apps/interior_bc/test_problems.h	/^        virtual std::vector< Vector<double, 3> > check_pts() const {$/;"	f	class:InhomoConstantSphere
check_pts	src/apps/interior_bc/test_problems.h	/^        virtual std::vector< Vector<double, 3> > check_pts() const {$/;"	f	class:Y20Sphere
check_range	src/apps/nick/mpreal.h	/^inline int mpreal::check_range (int t, mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
check_right_orthonormality	src/madness/tensor/srconf.h	/^		bool check_right_orthonormality() const {$/;"	f	class:madness::SRConf
check_size	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-decltype.cxx	/^bool check_size(int i)$/;"	f
check_small	src/madness/mra/test6.cc	/^int check_small(const double val, const double eps, const std::string message) {$/;"	f
check_special_points	src/madness/mra/leafop.h	/^    check_special_points(const Key<NDIM> &key, const FunctionImpl<T,NDIM>*const f) const{$/;"	f	struct:madness::Specialbox_op
check_start_tag	src/madness/world/text_fstream_archive.h	/^            void check_start_tag(bool end=false) const {$/;"	f	class:madness::archive::TextFstreamInputArchive
check_symmetry	src/madness/mra/mra.h	/^        double check_symmetry() const {$/;"	f	class:madness::Function
check_symmetry_local	src/madness/mra/mraimpl.h	/^    double FunctionImpl<T,NDIM>::check_symmetry_local() const {$/;"	f	class:madness::FunctionImpl
check_type	src/apps/chem/QCCalculationParametersBase.h	/^	static bool check_type(const std::string key, const QCParameter& parameter) {$/;"	f	class:madness::QCCalculationParametersBase
check_type_silent	src/apps/chem/QCCalculationParametersBase.h	/^	static bool check_type_silent(const QCParameter& parameter) {$/;"	f	class:madness::QCCalculationParametersBase
check_unique	src/madness/tensor/lowranktensor.h	/^        void check_unique() const {$/;"	f	struct:madness::LowRankTensor::implT
checksum	src/madness/mra/tools/dump2.py	/^def checksum(kmax):$/;"	f
checksum_file	src/madness/misc/checksum_file.cc	/^    unsigned  long checksum_file(const char* filename) {$/;"	f	namespace:madness
cheev_	src/madness/tensor/clapack_fortran.h	62;"	d
chegv_	src/madness/tensor/clapack_fortran.h	68;"	d
child	src/madness/mra/key.h	/^        Key<NDIM> child;$/;"	m	class:madness::KeyChildIterator
child	src/madness/world/test_tree.cc	/^    Key child;$/;"	m	class:KeyChildIterator	file:
child_cost	src/madness/mra/lbdeux.h	/^        volatile double child_cost[nchild];$/;"	m	class:madness::LBNodeDeux
child_handle_	src/madness/external/gtest/src/gtest-death-test.cc	/^  AutoHandle child_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
child_patch	src/madness/mra/mraimpl.h	/^    std::vector<Slice> FunctionImpl<T,NDIM>::child_patch(const keyT& child) const {$/;"	f	class:madness::FunctionImpl
child_pid_	src/madness/external/gtest/src/gtest-death-test.cc	/^  pid_t child_pid_;$/;"	m	class:testing::internal::ForkingDeathTest	file:
chin_chen	src/apps/nick/tdse1.cc	/^complex_functionT chin_chen(const complex_functionT& expV_0,$/;"	f
chin_chen	src/apps/tdse/tdse.cc	/^complex_functionT chin_chen(const complex_functionT& expV_0,$/;"	f
chin_chen	src/apps/tdse/tdse.confused.cc	/^complex_functionT chin_chen(const complex_functionT& expV_0,$/;"	f
chin_chen	src/madness/mra/testqm.cc	/^complex_function_1d chin_chen(const complex_function_1d& expV,$/;"	f
choice	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^namespace choice {$/;"	n	namespace:elem
choice	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^namespace choice {$/;"	n	namespace:elem
choleski	src/madness/mra/tools/mathutil.py	/^def choleski(A):$/;"	f
choleski_solve	src/madness/mra/tools/mathutil.py	/^def choleski_solve(A,b):$/;"	f
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar2.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Square.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/SolveAfter.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar2.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Pivoted.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Square.hpp	/^namespace cholesky {$/;"	n	namespace:elem
cholesky	src/madness/tensor/lapack.cc	/^    void cholesky(Tensor<T>& A) {$/;"	f	namespace:madness
chr	src/madness/external/tinyxml/tinyxml.h	/^		char		    chr;$/;"	m	struct:TiXmlBase::Entity
chunk	src/apps/chem/PNOParameters.h	/^	int chunk()const { return get<int >("chunk");}$/;"	f	class:madness::PNOParameters
chunksize	src/madness/world/range.h	/^        int chunksize; \/\/\/< Number of items to give to each thread\/process.$/;"	m	class:madness::Range
circle2	src/madness/mra/funcplot.h	/^        static coord_3d circle2(double lo, double hi, double radius, coord_3d el2, long npt, long ipt) {$/;"	f	struct:madness::trajectory
circle_6d	src/madness/mra/funcplot.h	/^        static coord_6d circle_6d(const coord_6d& lo, const coord_6d& hi, double radius, coord_3d el2, long npt, long ipt) {$/;"	f	struct:madness::trajectory
cis	src/apps/chem/PNOStructures.h	/^	CISData cis;									\/\/\/< CIS excitation structure$/;"	m	struct:madness::PNOPairs
cis_param	src/apps/chem/zcis.h	/^	Complex_CIS_Parameters cis_param;$/;"	m	class:madness::Zcis
cis_potential_ex	src/apps/chem/CCPotentials.cc	/^  CCPotentials::cis_potential_ex(const CC_vecfunction& x) const {$/;"	f	class:madness::CCPotentials
cispd	src/apps/chem/PNOParameters.h	/^	std::vector<std::pair<int,double> > cispd()const {$/;"	f	class:madness::PNOParameters
clean_up	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^void clean_up(MPI_Comm comm, double *Werr, double *Wgap,$/;"	f	file:
clean_up_plarre	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^void clean_up_plarre(double *E2, double *work, int *iwork, $/;"	f	file:
cleanup_tls	src/madness/world/test_queue.cc	/^void cleanup_tls() {$/;"	f
clear	src/apps/adrian/ResponseFunction2.h	/^  void clear() {$/;"	f	class:madness::ResponseFunction
clear	src/apps/bryan/ResponseFunction2.h	/^      void clear() {$/;"	f	class:madness::ResponseFunction
clear	src/madness/external/muParser/muParserBytecode.cpp	/^  void ParserByteCode::clear()$/;"	f	class:mu::ParserByteCode
clear	src/madness/external/tinyxml/tinystr.h	/^	void clear ()$/;"	f	class:TiXmlString
clear	src/madness/mra/mra.h	/^        void clear(bool fence = true) {$/;"	f	class:madness::Function
clear	src/madness/tensor/distributed_matrix.h	/^        void clear() {$/;"	f	class:madness::DistributedMatrix
clear	src/madness/tensor/distributed_matrix.h	/^        void clear() {$/;"	f	class:madness::DistributedMatrixDistribution
clear	src/madness/tensor/tensor.h	/^        void clear() {deallocate();}$/;"	f	class:madness::Tensor
clear	src/madness/world/stack.h	/^        void clear() {$/;"	f	class:madness::Stack
clear	src/madness/world/worlddc.h	/^        void clear() {$/;"	f	class:madness::WorldContainer
clear	src/madness/world/worlddc.h	/^        void clear() {$/;"	f	class:madness::WorldContainerImpl
clear	src/madness/world/worldhashmap.h	/^            void clear() {$/;"	f	class:madness::Hash_private::bin
clear	src/madness/world/worldhashmap.h	/^        void clear() {$/;"	f	class:madness::ConcurrentHashMap
clear	src/madness/world/worldprofile.cc	/^    void WorldProfile::clear() {$/;"	f	class:madness::WorldProfile
clear	src/madness/world/worldprofile.cc	/^    void WorldProfileEntry::clear() {$/;"	f	class:madness::WorldProfileEntry
clear	src/madness/world/worldprofile.h	/^        void clear() {$/;"	f	struct:madness::ProfileStat
clear_all	src/apps/chem/CCStructures.h	/^    void clear_all(){$/;"	f	struct:madness::CCIntermediatePotentials
clear_all_intermediates	src/apps/chem/CCStructures.h	/^    void clear_all_intermediates(){$/;"	f	struct:madness::CCConvolutionOperator
clear_coeff	src/madness/mra/funcimpl.h	/^        void clear_coeff() {$/;"	f	class:madness::FunctionNode
clear_flags	src/madness/world/worldam.h	/^        void clear_flags() { flags = 0; }$/;"	f	class:madness::AmArg
clear_intermediates	src/apps/chem/CCStructures.cc	/^  void CCConvolutionOperator::clear_intermediates(const FuncType &type){$/;"	f	class:madness::CCConvolutionOperator
clear_intermediates	src/apps/chem/PNOStructures.cpp	/^void PNOPairs::clear_intermediates(const ElectronPairIterator& it) {$/;"	f	class:madness::PNOPairs
clear_potentials	src/apps/chem/CCPotentials.h	/^    void clear_potentials(const CC_vecfunction &t)const{$/;"	f	class:madness::CCPotentials
clear_response	src/apps/chem/CCStructures.h	/^    void clear_response(){$/;"	f	struct:madness::CCIntermediatePotentials
clear_send_req	src/madness/world/worldrmi.h	/^        static void clear_send_req() {$/;"	f	class:madness::RMI
clear_subspace	src/madness/mra/nonlinsol.h	/^	void clear_subspace() {$/;"	f	class:madness::XNonlinearSolver
clear_user_state	src/madness/world/world.h	/^        void clear_user_state() { user_state = nullptr; }$/;"	f	class:madness::World
clock	src/madness/mra/tools/longfloat.py	/^    from time import clock$/;"	i
close	src/madness/world/binary_fstream_archive.cc	/^        void BinaryFstreamInputArchive::close() {$/;"	f	class:madness::archive::BinaryFstreamInputArchive
close	src/madness/world/binary_fstream_archive.cc	/^        void BinaryFstreamOutputArchive::close() {$/;"	f	class:madness::archive::BinaryFstreamOutputArchive
close	src/madness/world/buffer_archive.h	/^            void close() {}$/;"	f	class:madness::archive::BufferInputArchive
close	src/madness/world/buffer_archive.h	/^            void close() {}$/;"	f	class:madness::archive::BufferOutputArchive
close	src/madness/world/cereal_archive.h	/^  void close(){};$/;"	f	class:madness::archive::CerealInputArchive
close	src/madness/world/cereal_archive.h	/^  void close(){};$/;"	f	class:madness::archive::CerealOutputArchive
close	src/madness/world/mpi_archive.h	/^            void close() {$/;"	f	class:madness::archive::MPIOutputArchive
close	src/madness/world/parallel_archive.h	/^            void close() {$/;"	f	class:madness::archive::BaseParallelArchive
close	src/madness/world/text_fstream_archive.cc	/^        void TextFstreamOutputArchive::close() {$/;"	f	class:madness::archive::TextFstreamOutputArchive
close	src/madness/world/text_fstream_archive.h	/^            void close() {$/;"	f	class:madness::archive::TextFstreamInputArchive
close	src/madness/world/vector_archive.h	/^            void close() {}$/;"	f	class:madness::archive::VectorInputArchive
close	src/madness/world/vector_archive.h	/^            void close() {};$/;"	f	class:madness::archive::VectorOutputArchive
close_fd	src/madness/external/gtest/src/gtest-death-test.cc	/^  int close_fd;       \/\/ File descriptor to close; the read end of a pipe$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
cluster_t	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^} cluster_t;$/;"	t	typeref:struct:__anon16
cmADD	src/madness/external/muParser/muParserDef.h	/^    cmADD           = 6,   \/\/\/< Operator item:  add$/;"	e	enum:mu::ECmdCode
cmAND	src/madness/external/muParser/muParserDef.h	/^    cmAND           = 11,  \/\/\/< Operator item:  logical and$/;"	e	enum:mu::ECmdCode
cmARG_SEP	src/madness/external/muParser/muParserDef.h	/^    cmARG_SEP,             \/\/\/< function argument separator$/;"	e	enum:mu::ECmdCode
cmASSIGN	src/madness/external/muParser/muParserDef.h	/^    cmASSIGN        = 14,  \/\/\/< Operator item:  Assignment operator$/;"	e	enum:mu::ECmdCode
cmBC	src/madness/external/muParser/muParserDef.h	/^    cmBC            = 16,  \/\/\/< Operator item:  closing bracket$/;"	e	enum:mu::ECmdCode
cmBO	src/madness/external/muParser/muParserDef.h	/^    cmBO            = 15,  \/\/\/< Operator item:  opening bracket$/;"	e	enum:mu::ECmdCode
cmDIV	src/madness/external/muParser/muParserDef.h	/^    cmDIV           = 9,   \/\/\/< Operator item:  division$/;"	e	enum:mu::ECmdCode
cmEND	src/madness/external/muParser/muParserDef.h	/^    cmEND,                 \/\/\/< end of formula$/;"	e	enum:mu::ECmdCode
cmEQ	src/madness/external/muParser/muParserDef.h	/^    cmEQ            = 3,   \/\/\/< Operator item:  equals$/;"	e	enum:mu::ECmdCode
cmFUNC	src/madness/external/muParser/muParserDef.h	/^    cmFUNC,                \/\/\/< Code for a function item$/;"	e	enum:mu::ECmdCode
cmFUNC_STR	src/madness/external/muParser/muParserDef.h	/^    cmFUNC_STR,            \/\/\/< Code for a function with a string parameter$/;"	e	enum:mu::ECmdCode
cmGE	src/madness/external/muParser/muParserDef.h	/^    cmGE            = 1,   \/\/\/< Operator item:  greater or equal$/;"	e	enum:mu::ECmdCode
cmGT	src/madness/external/muParser/muParserDef.h	/^    cmGT            = 5,   \/\/\/< Operator item:  greater than$/;"	e	enum:mu::ECmdCode
cmLE	src/madness/external/muParser/muParserDef.h	/^    cmLE            = 0,   \/\/\/< Operator item:  less or equal$/;"	e	enum:mu::ECmdCode
cmLT	src/madness/external/muParser/muParserDef.h	/^    cmLT            = 4,   \/\/\/< Operator item:  less than$/;"	e	enum:mu::ECmdCode
cmMUL	src/madness/external/muParser/muParserDef.h	/^    cmMUL           = 8,   \/\/\/< Operator item:  multiply$/;"	e	enum:mu::ECmdCode
cmNEQ	src/madness/external/muParser/muParserDef.h	/^    cmNEQ           = 2,   \/\/\/< Operator item:  not equal$/;"	e	enum:mu::ECmdCode
cmOPRT_BIN	src/madness/external/muParser/muParserDef.h	/^    cmOPRT_BIN,            \/\/\/< user defined binary operator$/;"	e	enum:mu::ECmdCode
cmOPRT_INFIX	src/madness/external/muParser/muParserDef.h	/^    cmOPRT_INFIX,          \/\/\/< code for infix operators$/;"	e	enum:mu::ECmdCode
cmOPRT_POSTFIX	src/madness/external/muParser/muParserDef.h	/^    cmOPRT_POSTFIX,        \/\/\/< code for postfix operators$/;"	e	enum:mu::ECmdCode
cmOR	src/madness/external/muParser/muParserDef.h	/^    cmOR            = 12,  \/\/\/< Operator item:  logical or$/;"	e	enum:mu::ECmdCode
cmPOW	src/madness/external/muParser/muParserDef.h	/^    cmPOW           = 10,  \/\/\/< Operator item:  y to the power of ...$/;"	e	enum:mu::ECmdCode
cmSTRING	src/madness/external/muParser/muParserDef.h	/^    cmSTRING,              \/\/\/< Code for a string token$/;"	e	enum:mu::ECmdCode
cmSUB	src/madness/external/muParser/muParserDef.h	/^    cmSUB           = 7,   \/\/\/< Operator item:  subtract$/;"	e	enum:mu::ECmdCode
cmUNKNOWN	src/madness/external/muParser/muParserDef.h	/^    cmUNKNOWN,             \/\/\/< uninitialized item$/;"	e	enum:mu::ECmdCode
cmVAL	src/madness/external/muParser/muParserDef.h	/^    cmVAL,                 \/\/\/< value item$/;"	e	enum:mu::ECmdCode
cmVAR	src/madness/external/muParser/muParserDef.h	/^    cmVAR,                 \/\/\/< variable item$/;"	e	enum:mu::ECmdCode
cmXOR	src/madness/external/muParser/muParserDef.h	/^    cmXOR           = 13,  \/\/\/< Operator item:  logical xor$/;"	e	enum:mu::ECmdCode
cmask	src/examples/molecularmask.h	/^    const MolecularVolumeComplementMask cmask;$/;"	m	class:MolecularVolumeExponentialSwitch
cmask	src/examples/molecularmask.h	/^    double cmask(double s) const {$/;"	f	class:MolecularMaskBase
cmd	src/madness/world/threadbind	/^            cmd = 'taskset -p -c %d %s' %(cores[core], tid)$/;"	v
cmd	src/madness/world/threadbind	/^        cmd = "pgrep %s" % p$/;"	v
cmd	src/madness/world/threadbind	/^        cmd = "ps -mo tid -p %s | egrep -v 'T|-'" % pid$/;"	v
cmp	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^int cmp(const void *a1, const void *a2)$/;"	f	file:
cmp	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^int cmp(const void *a1, const void *a2)$/;"	f	file:
cmp_keys	src/madness/mra/displacements.h	/^        static bool cmp_keys(const Key<NDIM>& a, const Key<NDIM>& b) {$/;"	f	class:madness::Displacements
cmp_keys_periodicsum	src/madness/mra/displacements.h	/^        static bool cmp_keys_periodicsum(const Key<NDIM>& a, const Key<NDIM>& b) {$/;"	f	class:madness::Displacements
cmpa	src/madness/external/elemental/external/pmrrr/src/plarrv.c	/^int cmpa(const void *a1, const void *a2)$/;"	f	file:
cmpabs	src/apps/nick/mpreal.h	/^inline int cmpabs(const mpreal& a,const mpreal& b)$/;"	f	namespace:mpfr
cmpb	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^int cmpb(const void *a1, const void *a2)$/;"	f	file:
cnorm	src/madness/mra/funcimpl.h	/^            double tol, fac, cnorm;$/;"	m	struct:madness::FunctionImpl::do_op_args
cnt	src/madness/tensor/tensor.h	/^            AtomicInt* cnt;$/;"	m	class:madness::detail::SharedAlignedArray
code_as_string	src/madness/mra/funcdefaults.h	/^        static const char* code_as_string(BCType code) {$/;"	f	class:madness::BoundaryConditions
coeff	src/apps/chem/corepotential.h	/^    vector<double> coeff, expnt;$/;"	m	struct:madness::CoreOrbital
coeff	src/apps/chem/molecularbasis.h	/^    std::vector<double> coeff;$/;"	m	class:madness::ContractedGaussianShell
coeff	src/apps/hf/eigsolver.h	/^  double coeff() {return _coeff;}$/;"	f	class:madness::EigSolverOp
coeff	src/apps/hf/ewald.cc	/^  Tensor<double> coeff;$/;"	m	class:MolecularNuclearPotentialFunctor2	file:
coeff	src/apps/hf/ewald.cc	/^  double coeff;$/;"	m	class:GaussianFunctor	file:
coeff	src/apps/hf/molecularbasis.h	/^    std::vector<double> coeff;$/;"	m	class:ContractedGaussianShell
coeff	src/apps/hf/solver.h	/^      const double_complex coeff;$/;"	m	class:madness::ComplexExp
coeff	src/apps/hf/test_lattice.cc	/^  double coeff, expnt;$/;"	m	class:wstFunctor	file:
coeff	src/apps/moldft/nwtoxml.py	/^            coeff = []$/;"	v
coeff	src/apps/polar/corepotential.h	/^    vector<double> coeff, expnt;$/;"	m	struct:CoreOrbital
coeff	src/apps/polar/molecularbasis.h	/^    std::vector<double> coeff;$/;"	m	class:ContractedGaussianShell
coeff	src/apps/polar/nwtoxml.py	/^            coeff = []$/;"	v
coeff	src/madness/mra/convolution1d.h	/^        Q coeff;$/;"	m	class:madness::GaussianGenericFunctor
coeff	src/madness/mra/convolution1d.h	/^        const Q coeff;          \/\/\/< Coefficient$/;"	m	class:madness::GaussianConvolution1D
coeff	src/madness/mra/funcimpl.h	/^    	coeffT coeff(const keyT& key) const {$/;"	f	class:madness::CoeffTracker
coeff	src/madness/mra/funcimpl.h	/^    	const coeffT& coeff() const {return coeff_;}$/;"	f	class:madness::CoeffTracker
coeff	src/madness/mra/funcimpl.h	/^        coeff() const {$/;"	f	class:madness::FunctionNode
coeff	src/madness/mra/funcimpl.h	/^        coeff() {$/;"	f	class:madness::FunctionNode
coeff	src/madness/mra/funcimpl.h	/^        coeffT& coeff() {return _coeffs;}$/;"	f	struct:madness::ShallowNode
coeff	src/madness/mra/funcimpl.h	/^        const coeffT& coeff() const {return _coeffs;}$/;"	f	struct:madness::ShallowNode
coeff	src/madness/mra/function_interface.h	/^		coeffT coeff(const Key<6>& key) const {$/;"	f	class:madness::SlaterF12Interface
coeff	src/madness/mra/function_interface.h	/^		coeffT coeff(const Key<NDIM>& key) const {$/;"	f	class:madness::TwoElectronInterface
coeff	src/madness/mra/function_interface.h	/^	    virtual coeffT coeff(const keyT&) const {$/;"	f	class:madness::FunctionFunctorInterface
coeff	src/madness/mra/testinnerext.cc	/^    double coeff;$/;"	m	class:alpha_functor	file:
coeff	src/madness/mra/testinnerext.cc	/^    double coeff;$/;"	m	class:beta_functor	file:
coeffT	src/madness/mra/derivative.h	/^        typedef GenTensor<T>            coeffT   ;	\/\/\/< holding the node's coeffs (possibly low rank)$/;"	t	class:madness::Derivative
coeffT	src/madness/mra/derivative.h	/^        typedef GenTensor<T>            coeffT   ;	\/\/\/< holding the node's coeffs (possibly low rank)$/;"	t	class:madness::DerivativeBase
coeffT	src/madness/mra/funcimpl.h	/^    	typedef GenTensor<T> coeffT;$/;"	t	class:madness::CoeffTracker
coeffT	src/madness/mra/funcimpl.h	/^    	typedef GenTensor<T> coeffT;$/;"	t	class:madness::FunctionNode
coeffT	src/madness/mra/funcimpl.h	/^    	typedef GenTensor<T> coeffT;$/;"	t	struct:madness::insert_op
coeffT	src/madness/mra/funcimpl.h	/^        typedef GenTensor<T> coeffT; \/\/\/< Type of tensor used to hold coeffs$/;"	t	class:madness::FunctionImpl
coeffT	src/madness/mra/funcimpl.h	/^        typedef GenTensor<T> coeffT;$/;"	t	struct:madness::ShallowNode
coeffT	src/madness/mra/function_interface.h	/^		typedef GenTensor<T> coeffT;$/;"	t	class:madness::TwoElectronInterface
coeffT	src/madness/mra/function_interface.h	/^	    typedef GenTensor<T> coeffT;$/;"	t	class:madness::FunctionFunctorInterface
coeffT	src/madness/mra/function_interface.h	/^	    typedef GenTensor<T> coeffT;$/;"	t	class:madness::FunctionInterface
coeffT	src/madness/mra/function_interface.h	/^        typedef GenTensor<T> coeffT;$/;"	t	class:madness::ElementaryInterface
coeffT	src/madness/mra/function_interface.h	/^        typedef GenTensor<T> coeffT;$/;"	t	class:madness::FunctorInterface
coeff_	src/madness/mra/funcimpl.h	/^    	coeffT coeff_;$/;"	m	class:madness::CoeffTracker
coeff_value_adaptor	src/madness/mra/funcimpl.h	/^            coeff_value_adaptor() {};$/;"	f	struct:madness::FunctionImpl::coeff_value_adaptor
coeff_value_adaptor	src/madness/mra/funcimpl.h	/^            coeff_value_adaptor(const FunctionImpl<Q,NDIM>* impl_func,$/;"	f	struct:madness::FunctionImpl::coeff_value_adaptor
coeff_value_adaptor	src/madness/mra/funcimpl.h	/^        struct coeff_value_adaptor {$/;"	s	class:madness::FunctionImpl
coefficient	src/examples/dataloadbal.cc	/^    const double coefficient;$/;"	m	class:Gaussian	file:
coefficient	src/madness/mra/testbsh.cc	/^    const T coefficient;$/;"	m	class:Gaussian	file:
coefficient	src/madness/mra/testopdir.cc	/^    const T coefficient;$/;"	m	class:Gaussian	file:
coefficient	src/madness/mra/testproj.cc	/^    const T coefficient;$/;"	m	class:Gaussian	file:
coefficient	src/madness/mra/testsuite.cc	/^    const T coefficient;$/;"	m	class:DerivativeGaussian	file:
coefficient	src/madness/mra/testsuite.cc	/^    const T coefficient;$/;"	m	class:Gaussian	file:
coefficient	src/madness/mra/testsuite.cc	/^    const double coefficient;$/;"	m	class:GaussianPotential	file:
coefficient	src/madness/mra/testunaryop.cc	/^    const T coefficient;$/;"	m	class:Gaussian	file:
coefficient	src/madness/mra/testvmra.cc	/^    const T coefficient;$/;"	m	class:Gaussian	file:
coeffs	src/apps/adrian/NWChem.cc	/^  std::vector<double> coeffs, \/\/\/< Expansion coefficient for each primitive.$/;"	m	struct:slymer::BasisShell	file:
coeffs	src/apps/adrian/polynomial.h	/^  std::vector<double> coeffs;$/;"	m	class:slymer::PolynomialCoeffs
coeffs	src/apps/bryan/NWChem.cc	/^  std::vector<double> coeffs, \/\/\/< Expansion coefficient for each primitive.$/;"	m	struct:slymer::BasisShell	file:
coeffs	src/apps/bryan/polynomial.h	/^  std::vector<double> coeffs;$/;"	m	class:slymer::PolynomialCoeffs
coeffs	src/apps/moldft/testcosine.cc	/^   real_tensor coeffs;$/;"	m	class:PWFunctor	file:
coeffs	src/madness/mra/funcimpl.h	/^        dcT coeffs; \/\/\/< The coefficients$/;"	m	class:madness::FunctionImpl
coeffs	src/madness/mra/gfit.h	/^	Tensor<T> coeffs() const {return coeffs_;}$/;"	f	class:madness::GFit
coeffs2values	src/madness/mra/funcimpl.h	/^        GenTensor<Q> coeffs2values(const keyT& key, const GenTensor<Q>& coeff) const {$/;"	f	class:madness::FunctionImpl
coeffs2values	src/madness/mra/funcimpl.h	/^        Tensor<Q> coeffs2values(const keyT& key, const Tensor<Q>& coeff) const {$/;"	f	class:madness::FunctionImpl
coeffs_	src/madness/mra/gfit.h	/^	Tensor<T> coeffs_;$/;"	m	class:madness::GFit
coeffs_for_jun	src/madness/mra/mra.h	/^        Tensor<T> coeffs_for_jun(Level n, long mode=0) {$/;"	f	class:madness::Function
coeffs_for_jun	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::tensorT FunctionImpl<T,NDIM>::coeffs_for_jun(Level n, long q) {$/;"	f	class:madness::FunctionImpl
col	src/madness/external/tinyxml/tinyxml.h	/^	int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor
colAlign	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    Int colAlign, rowAlign; $/;"	m	struct:elem::BlockDistData
colAlign	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	/^    Int colAlign, rowAlign; $/;"	m	struct:elem::DistData
colAlign_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    Int colAlign_, rowAlign_,$/;"	m	class:elem::AbstractBlockDistMatrix
colAlign_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    Int colAlign_, rowAlign_,$/;"	m	class:elem::AbstractDistMatrix
colConstrained_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    bool colConstrained_, rowConstrained_, rootConstrained_;$/;"	m	class:elem::AbstractBlockDistMatrix
colConstrained_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    bool colConstrained_, rowConstrained_, rootConstrained_;$/;"	m	class:elem::AbstractDistMatrix
colCut	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    Int colCut, rowCut;$/;"	m	struct:elem::BlockDistData
colCut_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^        colCut_,   rowCut_,$/;"	m	class:elem::AbstractBlockDistMatrix
colDist	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    Dist colDist, rowDist;$/;"	m	struct:elem::BlockDistData
colDist	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	/^    Dist colDist, rowDist;$/;"	m	struct:elem::DistData
colShift_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^        colShift_, rowShift_;$/;"	m	class:elem::AbstractBlockDistMatrix
colShift_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^        colShift_, rowShift_;$/;"	m	class:elem::AbstractDistMatrix
coldim	src/apps/ii/systolic.h	/^        int64_t coldim() const { return n; }$/;"	f	class:madness::DistributedMatrix
coldim	src/apps/ii/systolic.h	/^        int64_t coldim;                 \/\/< A(coldim,rowdim)$/;"	m	class:madness::SystolicMatrixAlgorithm
coldim	src/madness/tensor/distributed_matrix.h	/^        int64_t coldim() const {$/;"	f	class:madness::DistributedMatrixDistribution
coldim	src/madness/tensor/systolic.h	/^        const int64_t coldim;           \/\/\/< A(coldim,rowdim)$/;"	m	class:madness::SystolicMatrixAlgorithm
collections	src/apps/moldft/parsemad.py	/^import collections$/;"	i
colloid_coords	src/examples/colloid.cc	/^    std::vector< madness::Vector<double,3> > colloid_coords()const{$/;"	f	class:SurfaceMoleculeInteraction
colloid_radii	src/examples/colloid.cc	/^    std::vector<double> colloid_radii()const {$/;"	f	class:SurfaceMoleculeInteraction
colorMap	src/madness/external/elemental/src/core/global.cpp	/^ColorMap colorMap=RED_BLACK_GREEN;$/;"	m	namespace:__anon33	file:
color_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::string color_;$/;"	m	class:testing::internal::GTestFlagSaver
colors	src/apps/moldft/moldx.py	/^colors = {$/;"	v
colors	src/apps/polar/moldx.py	/^colors = {$/;"	v
coltile	src/apps/ii/systolic.h	/^        int64_t coltile() const { return tilen; }$/;"	f	class:madness::DistributedMatrix
coltile	src/madness/tensor/distributed_matrix.h	/^        int64_t coltile() const {$/;"	f	class:madness::DistributedMatrixDistribution
column_distributed_matrix	src/apps/ii/systolic.h	/^    DistributedMatrix<T> column_distributed_matrix(World& world, int64_t n, int64_t m, int64_t coltile=0) {$/;"	f	namespace:madness
column_distributed_matrix	src/madness/tensor/distributed_matrix.h	/^    DistributedMatrix<T> column_distributed_matrix(World& world, int64_t n, int64_t m, int64_t coltile=0) {$/;"	f	namespace:madness
column_distributed_matrix_distribution	src/madness/tensor/distributed_matrix.h	/^    column_distributed_matrix_distribution(World& world, int64_t n, int64_t m, int64_t coltile) { \/\/ default coltile=0 above$/;"	f	namespace:madness
combine_hash	src/madness/world/worldhash.h	/^        inline void combine_hash(hashT& seed, hashT hash) {$/;"	f	namespace:madness::detail
comm	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  MPI_Comm comm;$/;"	m	struct:__anon24
comm	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^    MPI_Comm comm;$/;"	m	struct:elem::mpi::Comm
comm	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    mpi::Comm comm;$/;"	m	struct:elem::PermutationMeta
comm	src/madness/world/safempi.h	/^            MPI_Comm comm;$/;"	m	struct:SafeMPI::Intracomm::Impl
comm	src/madness/world/worldmpi.h	/^        SafeMPI::Intracomm& comm() {$/;"	f	class:madness::WorldMpiInterface
comm	src/madness/world/worldrmi.h	/^            SafeMPI::Intracomm comm;$/;"	m	class:madness::RMI::RmiTask
comm_	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    mpi::Comm comm_;$/;"	m	class:elem::choice::MpiArgs
comm_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} comm_t;$/;"	t	typeref:struct:__anon26
comm_world	src/madness/world/safempi.cc	/^        MPI_Comm comm_world() const { return MPI_COMM_WORLD; }$/;"	f	struct:SafeMPI::Intracomm::WorldInitObject
comment	src/apps/chem/QCCalculationParametersBase.h	/^	std::string comment="";$/;"	m	struct:madness::QCParameter
communicate_refined_eigvals	src/madness/external/elemental/external/pmrrr/src/process_c_task.c	/^int communicate_refined_eigvals(cluster_t *cl, proc_t *procinfo,$/;"	f	file:
compare	src/madness/mra/lbdeux.h	/^        static bool compare(const std::pair<keyT,double>& a, const std::pair<keyT,double>& b) {$/;"	f	class:madness::LoadBalanceDeux
compare	src/madness/mra/testdiff1D.cc	/^int compare(World& world, functionT test, functionT exact, const char *str)$/;"	f
compare	src/madness/mra/testdiff1Db.cc	/^int compare(World& world, functionT test, functionT exact, const char *str)$/;"	f
compare	src/madness/mra/testdiff2D.cc	/^int compare(World& world, functionT test, functionT exact, const char *str)$/;"	f
compare	src/madness/mra/testdiff3D.cc	/^int compare(World& world, functionT test, functionT exact, const char *str)$/;"	f
compare1F1	src/apps/nick/extra.cc	/^void compare1F1(World& world, double cutoff) {$/;"	f
compareGroundState	src/apps/nick/extra.cc	/^void compareGroundState(World& world, double Z) {$/;"	f
compare_and_swap	src/madness/world/atomicint.h	/^        inline int compare_and_swap(int compare, int newval) {$/;"	f	class:madness::AtomicInt
compare_calc_and_mos	src/apps/chem/test_MolecularOrbitals.cc	/^int compare_calc_and_mos(World& world, const SCF& calc, const MolecularOrbitals<double,3>& amo) {$/;"	f
compare_fn_addresses	src/madness/world/worldrmi.cc	/^    void compare_fn_addresses(void* addresses_in, void* addresses_inout,$/;"	f	namespace:madness::detail
compare_to_file	src/apps/chem/zcis.h	/^	void compare_to_file(const std::vector<complex_function_3d>& rhs, const std::string name) const {$/;"	f	class:madness::Zcis
compare_to_parent	src/madness/mra/leafop.h	/^    compare_to_parent(const Key<NDIM> &key,const GenTensor<T>& a,const GenTensor<T>& b) const {$/;"	f	class:madness::Leaf_op_other
compare_to_parent	src/madness/mra/leafop.h	/^    compare_to_parent(const Key<NDIM>& key,const GenTensor<T>& coeff,const GenTensor<T>& parent) const{$/;"	f	class:madness::Leaf_op
compatible	src/madness/tensor/srconf.h	/^		friend bool compatible(const SRConf& lhs, const SRConf& rhs) {$/;"	f	class:madness::SRConf
complete_madness_task_execution	src/madness/world/parsec.cc	/^    dague_hook_return_t complete_madness_task_execution (dague_execution_unit_t *eu, $/;"	f	namespace:madness
completion	src/madness/world/taskfn.h	/^        CallbackInterface* completion;$/;"	m	class:madness::TaskInterface
completion_status_	src/madness/world/world_task_queue.h	/^            Future<bool> completion_status_; \/\/\/< The result of this set of tasks.$/;"	m	class:madness::detail::ForEachRootTask
complex_c	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def complex_c(self):$/;"	m	class:MTXMGen
complex_complex	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def complex_complex(self):$/;"	m	class:MTXMGen
complex_convolution_1d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double_complex,1> complex_convolution_1d;$/;"	t	namespace:madness
complex_convolution_1d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<complex_convolution_1d> complex_convolution_1d_ptr;$/;"	t	namespace:madness
complex_convolution_2d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double_complex,2> complex_convolution_2d;$/;"	t	namespace:madness
complex_convolution_2d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<complex_convolution_2d> complex_convolution_2d_ptr;$/;"	t	namespace:madness
complex_convolution_3d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double_complex,3> complex_convolution_3d;$/;"	t	namespace:madness
complex_convolution_3d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<complex_convolution_3d> complex_convolution_3d_ptr;$/;"	t	namespace:madness
complex_convolution_4d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double_complex,4> complex_convolution_4d;$/;"	t	namespace:madness
complex_convolution_4d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<complex_convolution_4d> complex_convolution_4d_ptr;$/;"	t	namespace:madness
complex_convolution_5d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double_complex,5> complex_convolution_5d;$/;"	t	namespace:madness
complex_convolution_5d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<complex_convolution_5d> complex_convolution_5d_ptr;$/;"	t	namespace:madness
complex_convolution_6d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double_complex,6> complex_convolution_6d;$/;"	t	namespace:madness
complex_convolution_6d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<complex_convolution_6d> complex_convolution_6d_ptr;$/;"	t	namespace:madness
complex_derivative_1d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double_complex,1> complex_derivative_1d;$/;"	t	namespace:madness
complex_derivative_2d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double_complex,2> complex_derivative_2d;$/;"	t	namespace:madness
complex_derivative_3d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double_complex,3> complex_derivative_3d;$/;"	t	namespace:madness
complex_derivative_4d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double_complex,4> complex_derivative_4d;$/;"	t	namespace:madness
complex_derivative_5d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double_complex,5> complex_derivative_5d;$/;"	t	namespace:madness
complex_derivative_6d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double_complex,6> complex_derivative_6d;$/;"	t	namespace:madness
complex_exp_1d	src/apps/hf/test_lattice.cc	/^static std::complex<double> complex_exp_1d(const coordT1d r)$/;"	f	file:
complex_factoryT	src/apps/nick/tdse1.cc	/^typedef FunctionFactory<double_complex,NDIM> complex_factoryT;$/;"	t	file:
complex_factoryT	src/apps/nick/test.cc	/^typedef FunctionFactory<complexd,NDIM> complex_factoryT;$/;"	t	file:
complex_factoryT	src/apps/nick/wavef.h	/^typedef FunctionFactory<complexd,NDIM> complex_factoryT;$/;"	t
complex_factoryT	src/apps/nick/wfSlice.cc	/^typedef FunctionFactory<complexd,NDIM> complex_factoryT;$/;"	t	file:
complex_factoryT	src/apps/tdse/tdse.cc	/^typedef FunctionFactory<double_complex,3> complex_factoryT;$/;"	t	file:
complex_factoryT	src/apps/tdse/tdse.confused.cc	/^typedef FunctionFactory<double_complex,3> complex_factoryT;$/;"	t	file:
complex_factoryT	src/apps/tdse/tdse4.cc	/^typedef FunctionFactory<double_complex,4> complex_factoryT;$/;"	t	file:
complex_factoryT	src/examples/tdse_example.cc	/^typedef FunctionFactory<double_complex,3> complex_factoryT;$/;"	t	file:
complex_factoryT	src/examples/vnucso.cc	/^typedef FunctionFactory<double_complex,3> complex_factoryT;$/;"	t	file:
complex_factory_1d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double_complex,1> complex_factory_1d;$/;"	t	namespace:madness
complex_factory_2d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double_complex,2> complex_factory_2d;$/;"	t	namespace:madness
complex_factory_3d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double_complex,3> complex_factory_3d;$/;"	t	namespace:madness
complex_factory_4d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double_complex,4> complex_factory_4d;$/;"	t	namespace:madness
complex_factory_5d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double_complex,5> complex_factory_5d;$/;"	t	namespace:madness
complex_factory_6d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double_complex,6> complex_factory_6d;$/;"	t	namespace:madness
complex_funcimpl_1d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double_complex,1> complex_funcimpl_1d;$/;"	t	namespace:madness
complex_funcimpl_2d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double_complex,2> complex_funcimpl_2d;$/;"	t	namespace:madness
complex_funcimpl_3d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double_complex,3> complex_funcimpl_3d;$/;"	t	namespace:madness
complex_funcimpl_4d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double_complex,4> complex_funcimpl_4d;$/;"	t	namespace:madness
complex_funcimpl_5d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double_complex,5> complex_funcimpl_5d;$/;"	t	namespace:madness
complex_funcimpl_6d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double_complex,6> complex_funcimpl_6d;$/;"	t	namespace:madness
complex_functionT	src/apps/chem/SCF.h	/^typedef Function<std::complex<double>,3> complex_functionT;$/;"	t	namespace:madness
complex_functionT	src/apps/nick/hello.cc	/^typedef Function<complexd,NDIM> complex_functionT;$/;"	t	file:
complex_functionT	src/apps/nick/lineplot.cc	/^typedef Function<double_complex,3> complex_functionT;$/;"	t	file:
complex_functionT	src/apps/nick/tdse1.cc	/^typedef Function<double_complex,NDIM> complex_functionT;$/;"	t	file:
complex_functionT	src/apps/nick/test.cc	/^typedef Function<complexd,NDIM> complex_functionT;$/;"	t	file:
complex_functionT	src/apps/nick/wavef.h	/^typedef Function<complexd,NDIM> complex_functionT;$/;"	t
complex_functionT	src/apps/nick/wfSlice.cc	/^typedef Function<complexd,NDIM> complex_functionT;$/;"	t	file:
complex_functionT	src/apps/polar/moldft.cc	/^typedef Function<std::complex<double>, 3> complex_functionT;$/;"	t	file:
complex_functionT	src/apps/tdse/tdse.cc	/^typedef Function<double_complex,3> complex_functionT;$/;"	t	file:
complex_functionT	src/apps/tdse/tdse.confused.cc	/^typedef Function<double_complex,3> complex_functionT;$/;"	t	file:
complex_functionT	src/apps/tdse/tdse4.cc	/^typedef Function<double_complex,4> complex_functionT;$/;"	t	file:
complex_functionT	src/examples/h2dft.cc	/^typedef Function<std::complex<double>,3> complex_functionT;$/;"	t	file:
complex_functionT	src/examples/hedft.cc	/^typedef Function<std::complex<double>,3> complex_functionT;$/;"	t	file:
complex_functionT	src/examples/hefxc.cc	/^typedef Function<std::complex<double>,3> complex_functionT;$/;"	t	file:
complex_functionT	src/examples/newsolver_lda.cc	/^typedef Function<std::complex<double>,3> complex_functionT;$/;"	t	file:
complex_functionT	src/examples/tdse_example.cc	/^typedef Function<double_complex,3> complex_functionT;$/;"	t	file:
complex_functionT	src/examples/vnucso.cc	/^typedef Function<double_complex,3> complex_functionT;$/;"	t	file:
complex_function_1d	src/madness/mra/functypedefs.h	/^    typedef Function<double_complex,1> complex_function_1d;$/;"	t	namespace:madness
complex_function_2d	src/madness/mra/functypedefs.h	/^    typedef Function<double_complex,2> complex_function_2d;$/;"	t	namespace:madness
complex_function_3d	src/madness/mra/functypedefs.h	/^    typedef Function<double_complex,3> complex_function_3d;$/;"	t	namespace:madness
complex_function_4d	src/madness/mra/functypedefs.h	/^    typedef Function<double_complex,4> complex_function_4d;$/;"	t	namespace:madness
complex_function_5d	src/madness/mra/functypedefs.h	/^    typedef Function<double_complex,5> complex_function_5d;$/;"	t	namespace:madness
complex_function_6d	src/madness/mra/functypedefs.h	/^    typedef Function<double_complex,6> complex_function_6d;$/;"	t	namespace:madness
complex_functorT	src/apps/nick/tdse1.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double_complex,NDIM> > complex_functorT;$/;"	t	file:
complex_functorT	src/apps/tdse/tdse.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double_complex,3> > complex_functorT;$/;"	t	file:
complex_functorT	src/apps/tdse/tdse.confused.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double_complex,3> > complex_functorT;$/;"	t	file:
complex_functorT	src/apps/tdse/tdse4.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double_complex,4> > complex_functorT;$/;"	t	file:
complex_functorT	src/examples/tdse_example.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double_complex,3> > complex_functorT;$/;"	t	file:
complex_functorT	src/examples/vnucso.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double_complex,3> > complex_functorT;$/;"	t	file:
complex_functor_1d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double_complex,1> > complex_functor_1d;$/;"	t	namespace:madness
complex_functor_2d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double_complex,2> > complex_functor_2d;$/;"	t	namespace:madness
complex_functor_3d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double_complex,3> > complex_functor_3d;$/;"	t	namespace:madness
complex_functor_4d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double_complex,4> > complex_functor_4d;$/;"	t	namespace:madness
complex_functor_5d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double_complex,5> > complex_functor_5d;$/;"	t	namespace:madness
complex_functor_6d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double_complex,6> > complex_functor_6d;$/;"	t	namespace:madness
complex_operatorT	src/apps/chem/SCF.h	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	namespace:madness
complex_operatorT	src/apps/nick/tdse1.cc	/^typedef SeparatedConvolution<double_complex,NDIM> complex_operatorT;$/;"	t	file:
complex_operatorT	src/apps/polar/moldft.cc	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	file:
complex_operatorT	src/apps/tdse/tdse.cc	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	file:
complex_operatorT	src/apps/tdse/tdse.confused.cc	/^typedef SeparatedConvolution<double_complex,3> complex_operatorT;$/;"	t	file:
complex_operatorT	src/apps/tdse/tdse4.cc	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	file:
complex_operatorT	src/examples/h2dft.cc	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	file:
complex_operatorT	src/examples/hedft.cc	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	file:
complex_operatorT	src/examples/hefxc.cc	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	file:
complex_operatorT	src/examples/newsolver_lda.cc	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	file:
complex_operatorT	src/examples/tdse1d.cc	/^  typedef SeparatedConvolution<double_complex,1> complex_operatorT;$/;"	t	file:
complex_operatorT	src/examples/tdse_example.cc	/^typedef SeparatedConvolution<double_complex,3> complex_operatorT;$/;"	t	file:
complex_operatorT	src/examples/testspectralprop.cc	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	file:
complex_operatorT	src/madness/mra/testqm.cc	/^typedef Convolution1D<double_complex> complex_operatorT;$/;"	t	file:
complex_real	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def complex_real(self):$/;"	m	class:MTXMGen
complex_real4	src/madness/fortran_ctypes.h	/^typedef std::complex<float> complex_real4;$/;"	t
complex_real8	src/madness/fortran_ctypes.h	/^typedef std::complex<double> complex_real8;$/;"	t
complex_tensor	src/madness/mra/functypedefs.h	/^    typedef Tensor<double_complex> complex_tensor;$/;"	t	namespace:madness
complex_type	src/madness/external/muParser/muParserComplex.h	/^    typedef std::complex<float> complex_type;$/;"	t	class:mu::ParserComplex
complex_typelist	src/madness/tensor/tempspec.py	/^complex_typelist = ["double_complex","float_complex"]$/;"	v
complexd	src/apps/nick/hello.cc	/^typedef std::complex<double> complexd;$/;"	t	file:
complexd	src/apps/nick/hyp.h	/^typedef std::complex<double> complexd;$/;"	t
complexd	src/apps/nick/test.cc	/^typedef std::complex<double> complexd;$/;"	t	file:
complexd	src/apps/nick/wavef.h	/^    typedef std::complex<double> complexd;$/;"	t	class:baseWF
complexd	src/apps/nick/wavef.h	/^typedef std::complex<double> complexd;$/;"	t
complexd	src/apps/nick/wfSlice.cc	/^typedef std::complex<double> complexd;$/;"	t	file:
complexify	src/madness/mra/testsuite.cc	/^T complexify(T c) {$/;"	f
complexify	src/madness/mra/testsuite.cc	/^template <> double_complex complexify<double_complex>(double_complex c) {$/;"	f
complexify	src/madness/mra/testsuite.cc	/^template <> float_complex complexify<float_complex>(float_complex c) {$/;"	f
complexify	src/madness/mra/testvmra.cc	/^T complexify(T c) {$/;"	f
complexify	src/madness/mra/testvmra.cc	/^template <> double_complex complexify<double_complex>(double_complex c) {$/;"	f
complexify	src/madness/mra/testvmra.cc	/^template <> float_complex complexify<float_complex>(float_complex c) {$/;"	f
compress	src/madness/mra/mra.h	/^        const Function<T,NDIM>& compress(bool fence = true) const {$/;"	f	class:madness::Function
compress	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::compress(bool nonstandard, bool keepleaves, bool redundant, bool fence) {$/;"	f	class:madness::FunctionImpl
compress	src/madness/mra/vmra.h	/^void compress(World& world, const std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
compress	src/madness/mra/vmra1.h	/^    void compress(World& world,$/;"	f	namespace:madness
compress_op	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::coeffT FunctionImpl<T,NDIM>::compress_op(const keyT& key, const std::vector< Future<coeffT > >& v, bool nonstandard, bool redundant) {$/;"	f	class:madness::FunctionImpl
compress_rf	src/apps/adrian/ResponseFunction2.h	/^  void compress_rf() {$/;"	f	class:madness::ResponseFunction
compress_rf	src/apps/bryan/ResponseFunction2.h	/^      void compress_rf() {$/;"	f	class:madness::ResponseFunction
compress_spawn	src/madness/mra/mraimpl.h	/^    Future< GenTensor<T> > FunctionImpl<T,NDIM>::compress_spawn(const Key<NDIM>& key,$/;"	f	class:madness::FunctionImpl
compressed	src/madness/mra/funcimpl.h	/^        bool compressed; \/\/\/< Compression status$/;"	m	class:madness::FunctionImpl
compressed	src/madness/mra/function_factory.h	/^    FunctionFactory& compressed(bool value=true) {$/;"	f	class:madness::FunctionFactory
compute_A_coeffs	src/apps/exciting/wannier.cc	/^  Tensor<std::complex<double> > compute_A_coeffs(vec3dT qvc)$/;"	f	class:ExcitingApp
compute_CIS_potentials	src/apps/chem/PNO.cpp	/^vector_real_function_3d PNO::compute_CIS_potentials(const vector_real_function_3d& xcis) const {$/;"	f	class:madness::PNO
compute_E_first	src/apps/chem/oep.h	/^    double compute_E_first(const vecfuncT phi, const vecfuncT Jphi, const vecfuncT Kphi, const real_function_3d Vx) const {$/;"	f	class:madness::OEP
compute_E_zeroth	src/apps/chem/oep.h	/^    double compute_E_zeroth(const tensorT eigvals) const {$/;"	f	class:madness::OEP
compute_IR_intensities	src/apps/chem/nemo.cc	/^Tensor<double> Nemo::compute_IR_intensities(const Tensor<double>& normalmodes,$/;"	f	class:madness::Nemo
compute_Pauli_kinetic_density	src/apps/chem/oep.h	/^    real_function_3d compute_Pauli_kinetic_density(const vecfuncT& nemo, const tensorT eigvals) const {$/;"	f	class:madness::OEP
compute_R2f2_psi	src/examples/helium_exact.cc	/^real_function_6d compute_R2f2_psi(World& world, const real_function_6d& psi,$/;"	f
compute_R_times_T_commutator_scalar_term_numerically	src/apps/chem/diamagneticpotentialfactor.cc	/^real_function_3d Diamagnetic_potential_factor::compute_R_times_T_commutator_scalar_term_numerically() const {$/;"	f	class:madness::Diamagnetic_potential_factor
compute_U2	src/apps/chem/diamagneticpotentialfactor.cc	/^real_function_3d Diamagnetic_potential_factor::compute_U2() const {$/;"	f	class:madness::Diamagnetic_potential_factor
compute_V_aj_i	src/apps/chem/PNO.cpp	/^vector_real_function_3d PNO::compute_V_aj_i($/;"	f	class:madness::PNO
compute_Vreg_aj_i	src/apps/chem/PNO.cpp	/^vector_real_function_3d PNO::compute_Vreg_aj_i($/;"	f	class:madness::PNO
compute_Vreg_aj_i	src/apps/chem/PNO.cpp	/^vector_real_function_3d PNO::compute_Vreg_aj_i(const size_t& i,$/;"	f	class:madness::PNO
compute_Vreg_aj_i_commutator_response	src/apps/chem/PNO.cpp	/^vector_real_function_3d PNO::compute_Vreg_aj_i_commutator_response($/;"	f	class:madness::PNO
compute_Vreg_aj_i_fock_residue	src/apps/chem/PNO.cpp	/^vector_real_function_3d PNO::compute_Vreg_aj_i_fock_residue($/;"	f	class:madness::PNO
compute_all_cphf	src/apps/chem/nemo.cc	/^std::vector<vecfuncT> Nemo::compute_all_cphf() {$/;"	f	class:madness::Nemo
compute_cc2_correlation_energy	src/apps/chem/CCPotentials.cc	/^  CCPotentials::compute_cc2_correlation_energy(const CC_vecfunction& singles,const Pairs<CCPair>& doubles) const {$/;"	f	class:madness::CCPotentials
compute_cc2_excitation_energy	src/apps/chem/CCPotentials.cc	/^  CCPotentials::compute_cc2_excitation_energy(const CC_vecfunction& stau,const CC_vecfunction& sx,const Pairs<CCPair> dtau,const Pairs<CCPair> dx) const {$/;"	f	class:madness::CCPotentials
compute_centroid	src/apps/chem/GuessFactory.cc	/^coord_3d compute_centroid(const real_function_3d& f) {$/;"	f	namespace:madness::guessfactory
compute_centroids	src/apps/chem/GuessFactory.cc	/^std::vector<coord_3d> compute_centroids(const std::vector<Function<T,NDIM> > & vf){$/;"	f	namespace:madness::guessfactory
compute_cijab_integrals	src/apps/chem/PNOF12Potentials.cpp	/^Tensor<double> F12Potentials::compute_cijab_integrals(const size_t &i, const size_t& j, const real_function_3d& Ki, const real_function_3d& Kj , const vector_real_function_3d& functions)const{$/;"	f	class:madness::F12Potentials
compute_cijab_integrals	src/apps/chem/PNOF12Potentials.cpp	/^std::valarray<Tensor<double> > F12Potentials::compute_cijab_integrals(const std::valarray<vector_real_function_3d>& functions) const {$/;"	f	class:madness::F12Potentials
compute_cis_expectation_value	src/apps/chem/CCPotentials.cc	/^  CCPotentials::compute_cis_expectation_value(const CC_vecfunction& x,const vector_real_function_3d& V,const bool print) const {$/;"	f	class:madness::CCPotentials
compute_cispd_correction_es	src/apps/chem/PNO.cpp	/^PairEnergies PNO::compute_cispd_correction_es(const vector_real_function_3d& xcis, PNOPairs& pairs) const {$/;"	f	class:madness::PNO
compute_cispd_correction_gs	src/apps/chem/PNO.cpp	/^PairEnergies PNO::compute_cispd_correction_gs(const vector_real_function_3d& xcis,const PNOPairs& pairs) const {$/;"	f	class:madness::PNO
compute_cispd_energy	src/apps/chem/CCPotentials.cc	/^  CCPotentials::compute_cispd_energy(const CC_vecfunction& x,const Pairs<CCPair> mp2,const Pairs<CCPair> cispd) const {$/;"	f	class:madness::CCPotentials
compute_cispd_f12_correction_es	src/apps/chem/PNO.cpp	/^PairEnergies PNO::compute_cispd_f12_correction_es(const vector_real_function_3d& xcis, PairEnergies& energies) const {$/;"	f	class:madness::PNO
compute_cispd_f12_correction_gs	src/apps/chem/PNO.cpp	/^PairEnergies PNO::compute_cispd_f12_correction_gs(const vector_real_function_3d& xcis, PairEnergies& energies) const {$/;"	f	class:madness::PNO
compute_cispd_f12_energies	src/apps/chem/PNOF12Potentials.h	/^	PairEnergies compute_cispd_f12_energies(const vector_real_function_3d xcis)const{$/;"	f	class:madness::F12Potentials
compute_cispd_fluctuation_matrix	src/apps/chem/PNO.cpp	/^Tensor<double> PNO::compute_cispd_fluctuation_matrix(const ElectronPairIterator& it, PNOPairs& pairs) const {$/;"	f	class:madness::PNO
compute_cispd_fluctuation_potential	src/apps/chem/PNO.cpp	/^PNOPairs PNO::compute_cispd_fluctuation_potential(const ElectronPairIterator& it, PNOPairs& pairs) const {$/;"	f	class:madness::PNO
compute_coulomb_potential	src/apps/chem/oep.h	/^    void compute_coulomb_potential(const vecfuncT& nemo, vecfuncT& Jnemo) const {$/;"	f	class:madness::OEP
compute_cphf_parallel_term	src/apps/chem/nemo.cc	/^vecfuncT Nemo::compute_cphf_parallel_term(const size_t iatom, const int iaxis) const {$/;"	f	class:madness::Nemo
compute_current_density	src/apps/chem/znemo.cc	/^std::vector<real_function_3d> Znemo::compute_current_density($/;"	f	class:madness::Znemo
compute_dcep_correction	src/apps/chem/oep.h	/^    real_function_3d compute_dcep_correction(const vecfuncT& nemoHF, const tensorT& eigvalsHF,$/;"	f	class:madness::OEP
compute_delta_rho	src/apps/chem/oep.h	/^    double compute_delta_rho(const real_function_3d rho_HF, const real_function_3d rho_KS) const {$/;"	f	class:madness::OEP
compute_density	src/apps/chem/SCFOperators.cc	/^real_function_3d Coulomb::compute_density(const SCF* calc) const {$/;"	f	class:madness::Coulomb
compute_density	src/apps/chem/nemo.h	/^	real_function_3d compute_density(const std::vector<Function<T,NDIM> > nemo) const {$/;"	f	class:madness::NemoBase
compute_density	src/apps/chem/oep.h	/^    real_function_3d compute_density(const vecfuncT& nemo) const {$/;"	f	class:madness::OEP
compute_density	src/apps/chem/znemo.cc	/^real_function_3d Znemo::compute_density(const std::vector<complex_function_3d>& amo,$/;"	f	class:madness::Znemo
compute_energy	src/apps/chem/mp2.cc	/^double MP2::compute_energy(ElectronPair& pair) const {$/;"	f	class:madness::MP2
compute_energy	src/apps/chem/nemo.cc	/^double Nemo::compute_energy(const vecfuncT& psi, const vecfuncT& Jpsi,$/;"	f	class:madness::Nemo
compute_energy	src/apps/chem/oep.h	/^    double compute_energy(const vecfuncT phi, const vecfuncT Jphi, const double E_X) const {$/;"	f	class:madness::OEP
compute_energy	src/apps/chem/znemo.cc	/^double Znemo::compute_energy(const std::vector<complex_function_3d>& amo, const Znemo::potentials& apot,$/;"	f	class:madness::Znemo
compute_energy	src/examples/helium_exact.cc	/^double compute_energy(World& world, const real_function_6d& psi,$/;"	f
compute_energy	src/examples/helium_mp2.cc	/^void compute_energy(World& world, const real_function_3d& psi, const real_function_3d& pot, double& ke, double& pe) {$/;"	f
compute_energy	src/examples/helium_mp2.cc	/^void compute_energy(World& world, const real_function_6d& pair,$/;"	f
compute_energy_regularized	src/apps/chem/nemo.cc	/^std::vector<double> Nemo::compute_energy_regularized(const vecfuncT& nemo, const vecfuncT& Jnemo,$/;"	f	class:madness::Nemo
compute_energy_weighted_density	src/apps/chem/oep.h	/^    real_function_3d compute_energy_weighted_density(const vecfuncT& nemo, const tensorT& eigval) const {$/;"	f	class:madness::OEP
compute_energy_with_U	src/examples/helium_exact.cc	/^double compute_energy_with_U(World& world, const real_function_6d& psi,$/;"	f
compute_exchange_energy_conv	src/apps/chem/oep.h	/^    double compute_exchange_energy_conv(const vecfuncT phi, const vecfuncT Kphi) const {$/;"	f	class:madness::OEP
compute_exchange_energy_vir	src/apps/chem/oep.h	/^    double compute_exchange_energy_vir(const vecfuncT phi, const real_function_3d Vx) const {$/;"	f	class:madness::OEP
compute_exchange_potential	src/apps/chem/oep.h	/^    void compute_exchange_potential(const vecfuncT& nemo, vecfuncT& Knemo) const {$/;"	f	class:madness::OEP
compute_excited_pair_energy	src/apps/chem/CCPotentials.cc	/^  CCPotentials::compute_excited_pair_energy(const CCPair& d,const CC_vecfunction& x) const {$/;"	f	class:madness::CCPotentials
compute_f12_correction	src/apps/chem/PNOF12Potentials.cpp	/^PairEnergies F12Potentials::compute_f12_correction(const std::valarray<vector_real_function_3d>& pnos,const std::valarray<vector_real_function_3d>& abs) const {$/;"	f	class:madness::F12Potentials
compute_f12_energies	src/apps/chem/PNOF12Potentials.cpp	/^PairEnergies F12Potentials::compute_f12_energies($/;"	f	class:madness::F12Potentials
compute_f12_energies	src/apps/chem/PNOF12Potentials.cpp	/^PairEnergies F12Potentials::compute_f12_energies() const {$/;"	f	class:madness::F12Potentials
compute_f12_pair_energies	src/apps/chem/PNOF12Potentials.cpp	/^PairEnergies F12Potentials::compute_f12_pair_energies(const std::valarray<vector_real_function_3d>& abs) const {$/;"	f	class:madness::F12Potentials
compute_f12_pair_energy	src/apps/chem/PNOF12Potentials.cpp	/^PairEnergies F12Potentials::compute_f12_pair_energy(const std::valarray<vector_real_function_3d>& pnos, const std::valarray<vector_real_function_3d>& cabs) const {$/;"	f	class:madness::F12Potentials
compute_fQU_integrals	src/apps/chem/PNOF12Potentials.cpp	/^std::valarray<double> F12Potentials::compute_fQU_integrals() const {$/;"	f	class:madness::F12Potentials
compute_fQc_integrals	src/apps/chem/PNOF12Potentials.cpp	/^std::valarray<double> F12Potentials::compute_fQc_integrals($/;"	f	class:madness::F12Potentials
compute_fQc_integrals_ij	src/apps/chem/PNOF12Potentials.cpp	/^std::pair<double, double> F12Potentials::compute_fQc_integrals_ij($/;"	f	class:madness::F12Potentials
compute_fQg_integral	src/apps/chem/PNOF12Potentials.cpp	/^double F12Potentials::compute_fQg_integral(const real_function_3d bra1,$/;"	f	class:madness::F12Potentials
compute_fQg_integrals	src/apps/chem/PNOF12Potentials.cpp	/^std::valarray<double> F12Potentials::compute_fQg_integrals() const {$/;"	f	class:madness::F12Potentials
compute_factor	src/apps/chem/masks_and_boxes.h	/^	static double compute_factor(const double& r, const double& tightness, const double& rmax) {$/;"	f	struct:madness::max_of_x_1_smooth
compute_fijab_integrals	src/apps/chem/PNOF12Potentials.h	/^	Tensor<double> compute_fijab_integrals(const size_t &i, const size_t& j,const vector_real_function_3d& functions)const{$/;"	f	class:madness::F12Potentials
compute_fijab_integrals	src/apps/chem/PNOF12Potentials.h	/^	std::valarray<Tensor<double> > compute_fijab_integrals(const std::valarray<vector_real_function_3d>& functions)const{$/;"	f	class:madness::F12Potentials
compute_fluctuation_matrix	src/apps/chem/PNO.cpp	/^Tensor<double> PNO::compute_fluctuation_matrix(const ElectronPairIterator& it, const vector_real_function_3d& pnos, const vector_real_function_3d& Kpnos_in) const {$/;"	f	class:madness::PNO
compute_fluctuation_potential	src/apps/chem/PNO.cpp	/^PNOPairs PNO::compute_fluctuation_potential(const ElectronPairIterator& it, PNOPairs& pairs) const {$/;"	f	class:madness::PNO
compute_fock_diagonal_elements	src/apps/chem/oep.h	/^    Tensor<double> compute_fock_diagonal_elements(const Tensor<double>& KS_eigvals,$/;"	f	class:madness::OEP
compute_fock_matrix	src/apps/chem/nemo.cc	/^tensorT Nemo::compute_fock_matrix(const vecfuncT& nemo, const tensorT& occ) const {$/;"	f	class:madness::Nemo
compute_fock_pt	src/apps/chem/zcis.cc	/^Tensor<double_complex> Zcis::compute_fock_pt(const std::vector<root>& roots) const {$/;"	f	class:madness::Zcis
compute_frequencies	src/apps/chem/molecular_optimizer.h	/^    static Tensor<double> compute_frequencies(const Molecule& molecule,$/;"	f	class:madness::MolecularOptimizer
compute_frequencies	src/apps/chem/vibanal.cc	/^Tensor<double> compute_frequencies(const Molecule& molecule,$/;"	f
compute_gQf	src/apps/chem/mp2.cc	/^double MP2::compute_gQf(const int i, const int j, ElectronPair& pair) const {$/;"	f	class:madness::MP2
compute_gQf_cc2interface	src/apps/chem/mp2.h	/^        double compute_gQf_cc2interface(const int i, const int j, const real_function_6d &f)const{$/;"	f	class:madness::MP2
compute_gijab_integrals	src/apps/chem/PNOF12Potentials.h	/^	std::valarray<Tensor<double> > compute_gijab_integrals(const std::valarray<vector_real_function_3d>& functions)const{$/;"	f	class:madness::F12Potentials
compute_gradient	src/apps/chem/nemo.cc	/^Tensor<double> NemoBase::compute_gradient(const real_function_3d& rhonemo, const Molecule& molecule) const {$/;"	f	class:madness::NemoBase
compute_hylleraas_f12_energies	src/apps/chem/PNOF12Potentials.cpp	/^PairEnergies F12Potentials::compute_hylleraas_f12_energies($/;"	f	class:madness::F12Potentials
compute_ijab_integrals	src/apps/chem/PNOF12Potentials.cpp	/^std::valarray<Tensor<double> > F12Potentials::compute_ijab_integrals(const std::valarray<vector_real_function_3d>& functions, const std::shared_ptr<real_convolution_3d>& op) const {$/;"	f	class:madness::F12Potentials
compute_kinetic_energy	src/apps/chem/CCPotentials.cc	/^  CCPotentials::compute_kinetic_energy(const vector_real_function_3d& xbra,const vector_real_function_3d& xket) const {$/;"	f	class:madness::CCPotentials
compute_kinetic_energy	src/apps/chem/oep.h	/^    double compute_kinetic_energy(const vecfuncT phi) const {$/;"	f	class:madness::OEP
compute_kinetic_momentum	src/apps/chem/znemo.h	/^	Tensor<double> compute_kinetic_momentum() const {$/;"	f	class:madness::Znemo
compute_linear_moment	src/apps/chem/znemo.h	/^	Tensor<double> compute_linear_moment() const {$/;"	f	class:madness::Znemo
compute_lz_commutator	src/apps/chem/diamagneticpotentialfactor.cc	/^complex_function_3d Diamagnetic_potential_factor::compute_lz_commutator() const {$/;"	f	class:madness::Diamagnetic_potential_factor
compute_madelung_energy	src/apps/hf/ewald.cc	/^void compute_madelung_energy(World& world, MolecularEntity mentity,$/;"	f
compute_madelung_energy_PWSCF	src/apps/hf/ewald.cc	/^void compute_madelung_energy_PWSCF(World& world, MolecularEntity mentity,$/;"	f
compute_magnetic_potential_expectation	src/apps/chem/znemo.h	/^	Tensor<double> compute_magnetic_potential_expectation(const std::vector<real_function_3d>& A) const {$/;"	f	class:madness::Znemo
compute_magnetic_vector_potential	src/apps/chem/znemo.h	/^	static std::vector<real_function_3d> compute_magnetic_vector_potential(World& world,$/;"	f	class:madness::Znemo
compute_mrks_correction	src/apps/chem/oep.h	/^    real_function_3d compute_mrks_correction(const vecfuncT& nemoHF, const tensorT& eigvalsHF,$/;"	f	class:madness::OEP
compute_nabla_R_div_R	src/apps/chem/diamagneticpotentialfactor.cc	/^std::vector<real_function_3d> Diamagnetic_potential_factor::compute_nabla_R_div_R() const {$/;"	f	class:madness::Diamagnetic_potential_factor
compute_nemo_density	src/apps/chem/znemo.h	/^	real_function_3d compute_nemo_density(const std::vector<complex_function_3d>& amo,$/;"	f	class:madness::Znemo
compute_nemo_potentials	src/apps/chem/nemo.cc	/^void Nemo::compute_nemo_potentials(const vecfuncT& nemo, vecfuncT& psi,$/;"	f	class:madness::Nemo
compute_nemo_potentials	src/apps/chem/oep.h	/^    void compute_nemo_potentials(const vecfuncT& nemo, vecfuncT& Jnemo, vecfuncT& Unemo,$/;"	f	class:madness::OEP
compute_new_rrr	src/madness/external/elemental/external/pmrrr/src/process_c_task.c	/^rrr_t* compute_new_rrr(cluster_t *cl, int tid, proc_t *procinfo,$/;"	f	file:
compute_nvec	src/madness/tensor/srconf.h	/^		static unsigned int compute_nvec(const TensorType& tt) {$/;"	f	class:madness::SRConf
compute_ocep_correction	src/apps/chem/oep.h	/^    real_function_3d compute_ocep_correction(const vecfuncT& nemoHF, const tensorT& eigvalsHF,$/;"	f	class:madness::OEP
compute_oep_correction	src/apps/chem/oep.h	/^    real_function_3d compute_oep_correction(const std::string model,$/;"	f	class:madness::OEP
compute_pair_correlation_energy	src/apps/chem/CCPotentials.cc	/^  CCPotentials::compute_pair_correlation_energy(const CCPair& u,const CC_vecfunction& singles) const {$/;"	f	class:madness::CCPotentials
compute_pcm_energy	src/apps/chem/pcm.cc	/^double PCM::compute_pcm_energy() const {$/;"	f	class:madness::PCM
compute_pcm_potential	src/apps/chem/pcm.cc	/^real_function_3d PCM::compute_pcm_potential(const real_function_3d& coulomb_potential,$/;"	f	class:madness::PCM
compute_potential	src/apps/chem/SCFOperators.cc	/^real_function_3d Coulomb::compute_potential(const madness::Nemo* nemo) const {$/;"	f	class:madness::Coulomb
compute_potential	src/apps/chem/SCFOperators.cc	/^real_function_3d Coulomb::compute_potential(const madness::SCF* calc) const {$/;"	f	class:madness::Coulomb
compute_potential	src/apps/chem/SCFOperators.h	/^    Function<T,NDIM> compute_potential(const Function<T,NDIM>& density,$/;"	f	class:madness::Coulomb
compute_potentials	src/apps/chem/zcis.cc	/^void Zcis::compute_potentials(std::vector<root>& roots, const real_function_3d& totdens) const {$/;"	f	class:madness::Zcis
compute_potentials	src/apps/chem/znemo.cc	/^Znemo::potentials Znemo::compute_potentials(const std::vector<complex_function_3d>& mo,$/;"	f	class:madness::Znemo
compute_projected_f12_energies	src/apps/chem/PNOF12Potentials.cpp	/^PairEnergies F12Potentials::compute_projected_f12_energies() const {$/;"	f	class:madness::F12Potentials
compute_projected_mp2_energies	src/apps/chem/PNO.cpp	/^madness::PairEnergies PNO::compute_projected_mp2_energies(PNOPairs& pairs) const {$/;"	f	class:madness::PNO
compute_reduced_mass	src/apps/chem/molecular_optimizer.h	/^    static Tensor<double> compute_reduced_mass(const Molecule& molecule,$/;"	f	class:madness::MolecularOptimizer
compute_reduced_mass	src/apps/chem/vibanal.cc	/^Tensor<double> compute_reduced_mass(const Molecule& molecule, const Tensor<double>& normalmodes) {$/;"	f
compute_regularized_fluctuation_matrix	src/apps/chem/PNOF12Potentials.cpp	/^Tensor<double> F12Potentials::compute_regularized_fluctuation_matrix(const ElectronPairIterator& it, const vector_real_function_3d& pnos, const vector_real_function_3d& Kpnos)const{$/;"	f	class:madness::F12Potentials
compute_regularized_fluctuation_matrix	src/apps/chem/PNOF12Potentials.cpp	/^Tensor<double> F12Potentials::compute_regularized_fluctuation_matrix(const std::pair<vector_real_function_3d,vector_real_function_3d> & KPNOA, const std::pair<vector_real_function_3d,vector_real_function_3d> & KPNOB, const std::pair<real_function_3d,real_function_3d>& MKI, const std::pair<real_function_3d,real_function_3d> MKJ)const{$/;"	f	class:madness::F12Potentials
compute_residual	src/apps/chem/SCF.cc	/^vecfuncT SCF::compute_residual(World &world, tensorT &occ, tensorT &fock,$/;"	f	class:madness::SCF
compute_residual	src/apps/hf/solver.h	/^    vecfuncT compute_residual(const vecfuncT& awfs,$/;"	f	class:madness::Solver
compute_residual	src/apps/polar/moldft.cc	/^    vecfuncT compute_residual(World &world, tensorT &occ, tensorT &fock, const vecfuncT &psi, vecfuncT &Vpsi, double &err)$/;"	f	struct:Calculation
compute_residuals	src/apps/chem/zcis.cc	/^std::vector<complex_function_3d> Zcis::compute_residuals(root& root) const {$/;"	f	class:madness::Zcis
compute_residuals	src/apps/chem/znemo.cc	/^Znemo::compute_residuals($/;"	f	class:madness::Znemo
compute_residuals	src/apps/moldft/mcpfit.cc	/^    double compute_residuals (World & world, CorePotential & cp, vecfuncT & mo, vecfuncT & vmo)$/;"	f	struct:Calculation
compute_residuals	src/apps/polar/mcpfit.cc	/^    double compute_residuals (World & world, CorePotential & cp, vecfuncT & mo, vecfuncT & vmo)$/;"	f	struct:Calculation
compute_rho	src/apps/hf/eigsolver.cc	/^  Function<T, NDIM> EigSolver<T,NDIM>::compute_rho(typename std::vector<funcT> phis,$/;"	f	class:madness::EigSolver
compute_rho	src/apps/hf/solver.h	/^    rfunctionT compute_rho(const vecfuncT& phis, std::vector<KPoint> kpoints,$/;"	f	class:madness::Solver
compute_rho_slow	src/apps/hf/solver.h	/^    rfunctionT compute_rho_slow(const vecfuncT& phis, std::vector<KPoint> kpoints,$/;"	f	class:madness::Solver
compute_slater_potential	src/apps/chem/oep.h	/^    real_function_3d compute_slater_potential(const vecfuncT& nemo, const long homo_ind) const {$/;"	f	class:madness::OEP
compute_standard_gauge_shift	src/apps/chem/znemo.h	/^	Tensor<double> compute_standard_gauge_shift(const Tensor<double>& p_exp) const {$/;"	f	class:madness::Znemo
compute_tightness	src/apps/chem/masks_and_boxes.h	/^	static double compute_tightness(const double deviation_at_dot_8_radius) {$/;"	f	struct:madness::spherical_box
compute_tightness	src/apps/chem/masks_and_boxes.h	/^	static double compute_tightness(const double deviation_at_dot_8_radius, const double rmax) {$/;"	f	struct:madness::max_of_x_1_smooth
compute_total_kinetic_density	src/apps/chem/oep.h	/^    real_function_3d compute_total_kinetic_density(const vecfuncT& nemo, const tensorT eigvals) const {$/;"	f	class:madness::OEP
compute_uijab_integrals	src/apps/chem/PNOF12Potentials.h	/^	Tensor<double> compute_uijab_integrals(const size_t&i, const size_t&j, const vector_real_function_3d& functions)const{$/;"	f	class:madness::F12Potentials
compute_v_vector	src/apps/chem/diamagneticpotentialfactor.h	/^	static std::vector<coord_3d> compute_v_vector(const coord_3d& B,$/;"	f	class:madness::Diamagnetic_potential_factor
compute_value	src/apps/chem/GuessFactory.cc	/^double PolynomialFunctor::compute_value(const coord_3d& r) const {$/;"	f	class:madness::guessfactory::PolynomialFunctor
compute_value	src/apps/chem/GuessFactory.cc	/^double PolynomialTrigonometricsFunctor::compute_value(const coord_3d& r) const {$/;"	f	class:madness::guessfactory::PolynomialTrigonometricsFunctor
compute_vmat	src/apps/chem/znemo.cc	/^Tensor<double_complex> Znemo::compute_vmat(const std::vector<complex_function_3d>& mo,$/;"	f	class:madness::Znemo
compute_volume	src/apps/hf/ewald.cc	/^double compute_volume()$/;"	f
compute_xc_energy	src/apps/chem/SCFOperators.cc	/^double XCOperator::compute_xc_energy() const {$/;"	f	class:madness::XCOperator
compute_xyab_integrals	src/apps/chem/PNOF12Potentials.cpp	/^Tensor<double> F12Potentials::compute_xyab_integrals(const real_function_3d& x, const real_function_3d& y, const vector_real_function_3d& a, const vector_real_function_3d& b, const std::shared_ptr<real_convolution_3d>& op,$/;"	f	class:madness::F12Potentials
concat0	src/madness/world/worldgop.h	/^        std::vector<T> concat0(const std::vector<T>& v, size_t bufsz=1024*1024) {$/;"	f	class:madness::WorldGopInterface
concatenate	src/apps/chem/zcis.h	/^	static Tensor<T> concatenate(const Tensor<T>& t1, const Tensor<T>& t2) {$/;"	f	class:madness::Zcis
concatenate_columns	src/apps/ii/systolic.h	/^    DistributedMatrix<T> concatenate_columns(const DistributedMatrix<T>& a, const DistributedMatrix<T>& b) {$/;"	f	namespace:madness
concatenate_columns	src/madness/tensor/distributed_matrix.h	/^    DistributedMatrix<T> concatenate_columns(const DistributedMatrix<T>& a, const DistributedMatrix<T>& b) {$/;"	f	namespace:madness
concatenate_rows	src/apps/ii/systolic.h	/^    DistributedMatrix<T> concatenate_rows( const DistributedMatrix<T>& a, const DistributedMatrix<T>& b, const DistributedMatrix<T>& c, const DistributedMatrix<T>& d) {$/;"	f	namespace:madness
concatenate_rows	src/apps/ii/systolic.h	/^    DistributedMatrix<T> concatenate_rows(const DistributedMatrix<T>& a, const DistributedMatrix<T>& b) {$/;"	f	namespace:madness
concatenate_rows	src/madness/tensor/distributed_matrix.h	/^    DistributedMatrix<T> concatenate_rows( const DistributedMatrix<T>& a, const DistributedMatrix<T>& b, const DistributedMatrix<T>& c, const DistributedMatrix<T>& d) {$/;"	f	namespace:madness
concatenate_rows	src/madness/tensor/distributed_matrix.h	/^    DistributedMatrix<T> concatenate_rows(const DistributedMatrix<T>& a, const DistributedMatrix<T>& b) {$/;"	f	namespace:madness
condenseWhiteSpace	src/madness/external/tinyxml/tinyxml.cc	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
condenseWhiteSpace	src/madness/external/tinyxml/tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase
conditional_conj	src/madness/tensor/tensor.h	/^    Q conditional_conj(const Q& coeff) {$/;"	f	namespace:madness
conditional_conj_struct	src/madness/tensor/tensor.h	/^    struct conditional_conj_struct {$/;"	s	namespace:madness
conditional_conj_struct	src/madness/tensor/tensor.h	/^    struct conditional_conj_struct<Q,true> {$/;"	s	namespace:madness
conductance_quantum	src/madness/constants.h	/^        const double conductance_quantum = 7.7480917004e-5 ; \/\/  0.0000000053e-5    S$/;"	m	namespace:madness::constants
config	src/madness/tensor/gentensor.h	/^		SRConf<T> config() const {MADNESS_EXCEPTION("no SRConf in complex GenTensor",1);}$/;"	f	class:madness::GenTensor
config	src/madness/tensor/gentensor.h	/^    SRConf<T>& config() const {$/;"	f	class:madness::GenTensor
config	src/madness/tensor/lowranktensor.h	/^    SRConf<T>& config() {$/;"	f	class:madness::LowRankTensor
conforms	src/madness/tensor/basetensor.h	/^        bool conforms(const BaseTensor *t) const {$/;"	f	class:madness::BaseTensor
conforms	src/madness/tensor/tensor.h	/^        template <class Q> bool conforms(const Tensor<Q>& t) const {$/;"	f	class:madness::Tensor
conhyp	src/apps/nick/hyp.cc	/^complexd conhyp(const complexd& a_arg,$/;"	f
conj	src/madness/mra/funcimpl.h	/^        static double conj(float x) {$/;"	f	class:madness::FunctionImpl
conj	src/madness/mra/funcimpl.h	/^        static std::complex<double> conj(const std::complex<double> x) {$/;"	f	class:madness::FunctionImpl
conj	src/madness/mra/mra.h	/^        Function<T,NDIM> conj(bool fence = true) {$/;"	f	class:madness::Function
conj	src/madness/mra/vmra.h	/^inline double conj(double x) { return x; }$/;"	f	namespace:madness
conj	src/madness/mra/vmra.h	/^inline double conj(float x) { return x; }$/;"	f	namespace:madness
conj	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> conj(World& world,$/;"	f	namespace:madness
conj	src/madness/mra/vmra1.h	/^      conj(World& world,$/;"	f	namespace:madness
conj	src/madness/mra/vmra1.h	/^    inline double conj(double x) {$/;"	f	namespace:madness
conj	src/madness/mra/vmra1.h	/^    inline double conj(float x) {$/;"	f	namespace:madness
conj	src/madness/tensor/tensor.h	/^        Tensor<T>& conj() {$/;"	f	class:madness::Tensor
conj	src/madness/tensor/tensor.h	/^    Tensor<T> conj(const Tensor<T>& t) {$/;"	f	namespace:madness
conj_op	src/apps/hf/complexfun.h	/^struct conj_op$/;"	s	namespace:madness
conj_transpose	src/madness/tensor/tensor.h	/^    Tensor<T> conj_transpose(const Tensor<T>& t) {$/;"	f	namespace:madness
console	src/madness/external/muParser/muParserDef.h	/^  inline std::wostream& console()$/;"	f	namespace:mu
console_in	src/madness/external/muParser/muParserDef.h	/^  inline std::wistream& console_in()$/;"	f	namespace:mu
consolidate_buffer	src/madness/mra/funcimpl.h	/^        void consolidate_buffer(const TensorArgs& args) {$/;"	f	class:madness::FunctionNode
const	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
const	src/madness/external/elemental/external/pmrrr/include/global.h	73;"	d
const_accessor	src/madness/world/worlddc.h	/^        typedef typename implT::const_accessor const_accessor;$/;"	t	class:madness::WorldContainer
const_accessor	src/madness/world/worlddc.h	/^        typedef typename internal_containerT::const_accessor const_accessor;$/;"	t	class:madness::WorldContainerImpl
const_accessor	src/madness/world/worldhashmap.h	/^        typedef Hash_private::HashAccessor<const hashT,entryT::READLOCK> const_accessor;$/;"	t	class:madness::ConcurrentHashMap
const_catalan	src/apps/nick/mpreal.h	/^inline const mpreal const_catalan (mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
const_euler	src/apps/nick/mpreal.h	/^inline const mpreal const_euler (mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
const_futureT	src/madness/world/worlddc.h	/^        typedef Future<const_iterator> const_futureT;$/;"	t	class:madness::WorldContainer
const_iterator	src/examples/compiler/mra-driver.hh	/^    typedef std::vector<Exp*>::const_iterator const_iterator;$/;"	t	class:Exp
const_iterator	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  typedef const Element* const_iterator;$/;"	t	class:testing::internal::NativeArray
const_iterator	src/madness/world/worlddc.h	/^        typedef WorldContainerIterator<internal_const_iteratorT> const_iterator;$/;"	t	class:madness::WorldContainerImpl
const_iterator	src/madness/world/worlddc.h	/^        typedef typename implT::const_iterator const_iterator;$/;"	t	class:madness::WorldContainer
const_iterator	src/madness/world/worldhashmap.h	/^        typedef Hash_private::HashIterator<const hashT> const_iterator;$/;"	t	class:madness::ConcurrentHashMap
const_iteratorT	src/madness/mra/lbdeux.h	/^        typedef typename treeT::const_iterator const_iteratorT;$/;"	t	class:madness::LoadBalanceDeux
const_iteratorT	src/madness/world/worlddc.h	/^        typedef WorldContainerIterator<internal_const_iteratorT> const_iteratorT;$/;"	t	class:madness::WorldContainerImpl
const_log2	src/apps/nick/mpreal.h	/^inline const mpreal const_log2 (mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
const_pairT	src/madness/world/worlddc.h	/^        typedef const pairT const_pairT;$/;"	t	class:madness::WorldContainerImpl
const_pi	src/apps/nick/mpreal.h	/^inline const mpreal const_pi (mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
const_reference	src/madness/world/stack.h	/^        typedef const T& const_reference; \/\/\/< Element constant reference type.$/;"	t	class:madness::Stack
constant	src/madness/mra/testper.cc	/^double constant(const coordT& x) {$/;"	f
constant_part	src/apps/chem/CCStructures.h	/^    real_function_6d constant_part;$/;"	m	class:madness::CCPair
constant_term	src/apps/chem/mp2.h	/^        real_function_6d constant_term;	\/\/\/< the first order contribution to the MP1 wave function$/;"	m	class:madness::ElectronPair
constants	src/madness.h	/^    namespace constants {$/;"	n	namespace:madness
constants	src/madness/constants.h	/^    namespace constants {$/;"	n	namespace:madness
constness	src/madness/world/function_traits.h	/^            static const bool constness = false;$/;"	m	struct:madness::detail::memfunc_traits
constness	src/madness/world/function_traits.h	/^            static const bool constness = true;$/;"	m	struct:madness::detail::memfunc_traits
construct_nuclear_correlation_factor	src/apps/chem/nemo.h	/^	void construct_nuclear_correlation_factor(const Molecule& molecule,$/;"	f	class:madness::NemoBase
containerT	src/madness/world/worlddc.h	/^        typedef WorldContainer<keyT,valueT,hashfunT> containerT;$/;"	t	class:madness::WorldContainer
container_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  const ContainerType container_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator
continue_recursion	src/madness/mra/funcimpl.h	/^          std::pair<bool,coeffT> continue_recursion(const std::vector<bool> child_is_leaf,$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
conv_addr_trans2normal	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	176;"	d	file:
conv_addr_trans2normal	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	173;"	d	file:
conv_only_dens	src/apps/polar/moldft.cc	/^    bool conv_only_dens;   \/\/\/< If true remove bsh_residual from convergence criteria   how ugly name is...$/;"	m	struct:CalculationParameters	file:
conv_prime_g	src/madness/mra/testgconv.cc	/^double conv_prime_g(const coord_1d& r) {$/;"	f
conv_thresh	src/apps/chem/oep.h	/^	double conv_thresh() const {return get<double>("conv_threshold");}$/;"	f	class:madness::OEP_Parameters
converge	src/apps/nick/extra.cc	/^void converge(World& world, complex_functionT& potn, complex_functionT& psi, double& eps) {$/;"	f
converge	src/apps/nick/tdse1.cc	/^void converge(World& world, functionT& potn, complex_functionT& psi, double& eps) {$/;"	f
converge	src/apps/tdse/tdse.cc	/^void converge(World& world, functionT& potn, functionT& psi, double& eps) {$/;"	f
converge	src/apps/tdse/tdse.confused.cc	/^void converge(World& world, functionT& potn, functionT& psi, double& eps) {$/;"	f
converge	src/apps/tdse/tdse4.cc	/^void converge(World& world, functionT& potn, functionT& pote, functionT& pot, functionT& psi, double& eps) {$/;"	f
converge	src/examples/tdse_example.cc	/^void converge(World& world, functionT& potn, functionT& psi, double& eps) {$/;"	f
converge2s	src/apps/tdse/tdse.cc	/^void converge2s(World& world, functionT& potn, functionT& psi, double& eps) {$/;"	f
converge_each_energy	src/apps/chem/CalculationParameters.h	/^	bool converge_each_energy() {return get<bool>("converge_each_energy");}$/;"	f	struct:madness::CalculationParameters
converged	src/apps/chem/SCFProtocol.h	/^    bool converged;         \/\/\/< flag if protocol has converged$/;"	m	class:madness::SCFProtocol
converged	src/apps/chem/distpm.cc	/^    bool converged(const TaskThreadEnv& env) const {$/;"	f	class:madness::SystolicFixOrbitalOrders
converged	src/apps/chem/distpm.cc	/^    bool converged(const TaskThreadEnv& env) const {$/;"	f	class:madness::SystolicPMOrbitalLocalize
converged	src/apps/chem/molecular_optimizer.h	/^    bool converged() const {return gradient_norm()<parameters.tol();}$/;"	f	class:madness::MolecularOptimizer
converged	src/apps/chem/mp2.h	/^        bool converged;					\/\/\/< is the pair function converged$/;"	m	class:madness::ElectronPair
converged	src/apps/ii/eigen_solver.cc	/^bool SystolicEigensolver<T>::converged(const TaskThreadEnv& env) const {$/;"	f	class:SystolicEigensolver
converged	src/apps/ii/systolic.h	/^    bool LocalizeBoys<T>::converged(const TaskThreadEnv& env) const$/;"	f	class:madness::LocalizeBoys
converged	src/apps/ii/testsystolic.cc	/^bool SystolicEigensolver<T>::converged(const TaskThreadEnv& env) const {$/;"	f	class:SystolicEigensolver
converged	src/apps/moldft/mcpfit.cc	/^    bool converged() const$/;"	f	class:MySteepestDescent
converged	src/apps/polar/distpm.cc	/^    bool converged(const TaskThreadEnv& env) const {$/;"	f	class:SystolicFixOrbitalOrders
converged	src/apps/polar/distpm.cc	/^    bool converged(const TaskThreadEnv& env) const {$/;"	f	class:SystolicPMOrbitalLocalize
converged	src/apps/polar/mcpfit.cc	/^    bool converged() const$/;"	f	class:MySteepestDescent
converged	src/madness/tensor/kain.cc	/^    bool converged() const {return gnorm < tol;}$/;"	f	class:QuasiNewton
converged	src/madness/tensor/kain.cc	/^    bool converged() const {return gnorm < tol;}$/;"	f	class:SteepestDescent
converged	src/madness/tensor/solvers.cc	/^        bool QuasiNewton::converged() const {return gnorm < tol;}$/;"	f	class:madness::QuasiNewton
converged	src/madness/tensor/solvers.cc	/^    bool SteepestDescent::converged() const {return gnorm < tol;}$/;"	f	class:madness::SteepestDescent
converged	src/madness/tensor/test_systolic.cc	/^    bool converged(const TaskThreadEnv& env) const {$/;"	f	class:TestSystolicMatrixAlgorithm
converged_roots	src/apps/chem/TDHF.h	/^	mutable std::vector<CC_vecfunction> converged_roots;$/;"	m	class:madness::TDHF
conversion_overflow	src/apps/nick/mpreal.h	/^class conversion_overflow : public std::exception {$/;"	c	namespace:mpfr
convert	src/madness/mra/funcimpl.h	/^        convert() const {$/;"	f	class:madness::FunctionNode
convert	src/madness/mra/minmax/y.cc	/^double convert<double>(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y.cc	/^float convert<float>(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y.cc	/^t convert(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y1.cc	/^double convert<double>(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y1.cc	/^float convert<float>(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y1.cc	/^t convert(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y_signed.cc	/^double convert<double>(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y_signed.cc	/^float convert<float>(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y_signed.cc	/^t convert(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y_varx.cc	/^double convert<double>(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y_varx.cc	/^float convert<float>(const char* c) {$/;"	f
convert	src/madness/mra/minmax/y_varx.cc	/^t convert(const char* c) {$/;"	f
convert	src/madness/mra/vmra.h	/^std::vector<Function<R, NDIM>> convert(World& world,$/;"	f	namespace:madness
convert	src/madness/tensor/gentensor.h	/^        GenTensor convert(const TensorArgs& targs) const {return copy(*this);}$/;"	f	class:madness::GenTensor
convert	src/madness/tensor/lowranktensor.h	/^    LowRankTensor convert(const TensorArgs& targs) const {$/;"	f	class:madness::LowRankTensor
convert	src/madness/tensor/lowranktensor.h	/^LowRankTensor<Q> convert(const LowRankTensor<T>& other) {$/;"	f	namespace:madness
convert	src/madness/tensor/tensor.h	/^    Tensor<Q> convert(const Tensor<T>& t) {$/;"	f	namespace:madness
convert_read_lock_to_write_lock	src/madness/world/worldhashmap.h	/^            void convert_read_lock_to_write_lock() {$/;"	f	class:madness::Hash_private::HashAccessor
convert_read_lock_to_write_lock	src/madness/world/worldmutex.h	/^        void convert_read_lock_to_write_lock() const {$/;"	f	class:madness::MutexReaderWriter
convert_write_lock_to_read_lock	src/madness/world/worldmutex.h	/^        void convert_write_lock_to_read_lock() const {$/;"	f	class:madness::MutexReaderWriter
convg	src/madness/mra/testgconv.cc	/^double convg(const coord_1d& r) {$/;"	f
convolve_with_U	src/apps/chem/PNOF12Potentials.cpp	/^real_function_3d F12Potentials::convolve_with_U(const real_function_3d& bra, const real_function_3d& ket1, const real_function_3d& ket2, const bool symmetric) const {$/;"	f	class:madness::F12Potentials
convolve_with_U	src/apps/chem/PNOF12Potentials.cpp	/^vector_real_function_3d F12Potentials::convolve_with_U(const vector_real_function_3d& bra, const real_function_3d& ket1, const real_function_3d& ket2, const bool symmetric) const {$/;"	f	class:madness::F12Potentials
convolve_with_fU	src/apps/chem/PNOF12Potentials.cpp	/^vector_real_function_3d F12Potentials::convolve_with_fU(const vector_real_function_3d& bra, const real_function_3d& ket1, const real_function_3d& ket2, const bool symmetric) const {$/;"	f	class:madness::F12Potentials
convolve_with_fU	src/apps/chem/PNOF12Potentials.h	/^	real_function_3d convolve_with_fU(const real_function_3d& bra,const real_function_3d& ket1,$/;"	f	class:madness::F12Potentials
convolve_with_fg	src/apps/chem/PNOF12Potentials.cpp	/^real_function_3d F12Potentials::convolve_with_fg(const real_function_3d& function) const {$/;"	f	class:madness::F12Potentials
convolve_with_fg	src/apps/chem/PNOF12Potentials.cpp	/^vector_real_function_3d F12Potentials::convolve_with_fg(const vector_real_function_3d& functions) const {$/;"	f	class:madness::F12Potentials
convolve_with_gradslater	src/apps/chem/PNOF12Potentials.h	/^	vector_real_function_3d convolve_with_gradslater(const vector_real_function_3d functions, const size_t axis, const bool& squared=false)const{$/;"	f	class:madness::F12Potentials
convolve_with_local_U	src/apps/chem/PNOF12Potentials.cpp	/^vector_real_function_3d F12Potentials::convolve_with_local_U(const vector_real_function_3d& functions) const {$/;"	f	class:madness::F12Potentials
convolve_with_local_U	src/apps/chem/PNOF12Potentials.h	/^	real_function_3d convolve_with_local_U($/;"	f	class:madness::F12Potentials
convolve_with_nonlocal_U	src/apps/chem/PNOF12Potentials.cpp	/^real_function_3d F12Potentials::convolve_with_nonlocal_U(const real_function_3d& bra, const real_function_3d& ket1, const real_function_3d& ket2, const bool symmetric, const bool& squared) const {$/;"	f	class:madness::F12Potentials
convolve_with_nonlocal_U	src/apps/chem/PNOF12Potentials.cpp	/^vector_real_function_3d F12Potentials::convolve_with_nonlocal_U(const vector_real_function_3d& bra, const real_function_3d& ket1, const real_function_3d& ket2, const bool symmetric, const bool& squared) const {$/;"	f	class:madness::F12Potentials
convolve_with_slater_potential	src/apps/chem/PNOF12Potentials.h	/^	vector_real_function_3d convolve_with_slater_potential(const vector_real_function_3d& functions)const{$/;"	f	class:madness::F12Potentials
cookie	src/madness/world/archive.h	/^            static const unsigned char cookie = 255; \/\/\/< Numeric ID for the type; 255 indicates unknown type.$/;"	m	struct:madness::archive::archive_typeinfo
cookie	src/madness/world/archive_type_names.cc	/^        template <typename T> const unsigned char archive_typeinfo<T>::cookie;$/;"	m	class:madness::archive::archive_typeinfo	file:
coord	src/apps/chem/AC.h	/^	Vector<double,NDIM> coord;$/;"	m	struct:madness::atom_information
coordT	src/apps/adrian/TDDFT.h	/^  typedef Vector<double, NDIM> coordT;$/;"	t	class:GaussianGuess
coordT	src/apps/adrian/TDHF.h	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:GaussianGuess
coordT	src/apps/adrian/TDHF2.h	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:GaussianGuess
coordT	src/apps/adrian/test_ResponseFunction.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:GaussianGuess	file:
coordT	src/apps/bryan/TDHF.h	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:GaussianGuess
coordT	src/apps/bryan/TDHF2.h	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:GaussianGuess
coordT	src/apps/bryan/test_ResponseFunction.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:GaussianGuess	file:
coordT	src/apps/chem/SCF.h	/^typedef Vector<double,3> coordT;$/;"	t	namespace:madness
coordT	src/apps/chem/corepotential.cc	/^typedef Vector<double,3> coordT;$/;"	t	namespace:madness	file:
coordT	src/apps/chem/masks_and_boxes.h	/^	typedef Vector<double,NDIM> coordT;$/;"	t	struct:madness::spherical_box
coordT	src/apps/chem/test_SCFOperators.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:GaussianGuess	file:
coordT	src/apps/exciting/wannier.cc	/^  typedef Vector<double, NDIM> coordT;$/;"	t	class:Wannier	file:
coordT	src/apps/exciting/wannier.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/hf/dft.cc	/^typedef madness::Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/hf/esolver.h	/^typedef Vector<double,3> coordT;$/;"	t
coordT	src/apps/hf/ewald.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/hf/solver.h	/^      typedef Vector<double,NDIM> coordT;$/;"	t	class:madness::ComplexExp
coordT	src/apps/hf/test_be.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/hf/test_he.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:HeElectronicChargeDensityIGuess	file:
coordT	src/apps/hf/test_he.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:HeNuclearChargeDensityIGuess	file:
coordT	src/apps/hf/test_he.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/hf/test_hf.cc	/^  typedef Vector<double,3> coordT;$/;"	t	class:H2Potential	file:
coordT	src/apps/hf/test_hf.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/hf/test_hydro.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/hf/test_xc.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/moldft/mcpfit.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/moldft/pointgroup.h	/^    typedef madness::Vector<double,3> coordT;$/;"	t	class:PointGroup
coordT	src/apps/nick/lineplot.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/nick/tdse1.cc	/^typedef Vector<double,NDIM> coordT;$/;"	t	file:
coordT	src/apps/polar/corepotential.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/polar/mcpfit.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/polar/moldft.cc	/^typedef Vector<double, 3> coordT;$/;"	t	file:
coordT	src/apps/polar/pointgroup.h	/^    typedef madness::Vector<double,3> coordT;$/;"	t	class:PointGroup
coordT	src/apps/tdse/tdse.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/tdse/tdse.confused.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/apps/tdse/tdse4.cc	/^typedef Vector<double,4> coordT;$/;"	t	file:
coordT	src/examples/csqrt.cc	/^typedef Vector<double,1> coordT;$/;"	t	file:
coordT	src/examples/h2dft.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/examples/heat.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/examples/hedft.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/examples/hefxc.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/examples/navstokes_cosines.cc	/^typedef Vector<double, 3> coordT3d,coordT;$/;"	t	file:
coordT	src/examples/newsolver_lda.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/examples/tdse_example.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/examples/vnucso.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/madness/misc/phandler.h	/^    typedef madness::Vector<double, NDIM> coordT;$/;"	t	class:ParserHandler
coordT	src/madness/mra/funcimpl.h	/^        typedef Vector<double,NDIM> coordT; \/\/\/< Type of vector holding coordinates$/;"	t	class:madness::FunctionImpl
coordT	src/madness/mra/funcplot.h	/^        typedef Vector<double,NDIM> coordT;$/;"	t	struct:madness::trajectory
coordT	src/madness/mra/function_factory.h	/^    typedef Vector<double, NDIM> coordT; \/\/\/< Type of vector holding coordinates$/;"	t	class:madness::FunctionFactory
coordT	src/madness/mra/function_interface.h	/^		typedef Vector<double, NDIM> coordT; \/\/\/< Type of vector holding coordinates$/;"	t	class:madness::CompositeFunctorInterface
coordT	src/madness/mra/function_interface.h	/^		typedef Vector<double, NDIM> coordT; \/\/\/< Type of vector holding coordinates$/;"	t	class:madness::ElementaryInterface
coordT	src/madness/mra/function_interface.h	/^        typedef Vector<double, NDIM> coordT; \/\/\/< Type of vector holding coordinates$/;"	t	class:madness::FunctionInterface
coordT	src/madness/mra/function_interface.h	/^        typedef Vector<double, NDIM> coordT; \/\/\/< Type of vector holding coordinates$/;"	t	class:madness::FunctorInterface
coordT	src/madness/mra/mra.h	/^        typedef Vector<double,NDIM> coordT; \/\/\/< Type of vector holding coordinates$/;"	t	class:madness::Function
coordT	src/madness/mra/testbc.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/madness/mra/testbsh.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:Gaussian	file:
coordT	src/madness/mra/testdiff1D.cc	/^typedef Vector<double,1> coordT;$/;"	t	file:
coordT	src/madness/mra/testdiff1Db.cc	/^typedef Vector<double,1> coordT;$/;"	t	file:
coordT	src/madness/mra/testdiff2D.cc	/^typedef Vector<double,2> coordT;$/;"	t	file:
coordT	src/madness/mra/testdiff3D.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/madness/mra/testopdir.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:Gaussian	file:
coordT	src/madness/mra/testpdiff.cc	/^typedef Vector<double,NDIM> coordT;$/;"	t	file:
coordT	src/madness/mra/testper.cc	/^typedef Vector<double,1> coordT;$/;"	t	file:
coordT	src/madness/mra/testperiodic.cc	/^typedef Vector<double,3> coordT;$/;"	t	file:
coordT	src/madness/mra/testproj.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:Gaussian	file:
coordT	src/madness/mra/testsuite.cc	/^    typedef Vector<double,1> coordT;$/;"	t	class:QMtest	file:
coordT	src/madness/mra/testsuite.cc	/^    typedef Vector<double,3> coordT;$/;"	t	class:GaussianPotential	file:
coordT	src/madness/mra/testsuite.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:BinaryOp	file:
coordT	src/madness/mra/testsuite.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:DerivativeGaussian	file:
coordT	src/madness/mra/testsuite.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:Gaussian	file:
coordT	src/madness/mra/testunaryop.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:Gaussian	file:
coordT	src/madness/mra/testvmra.cc	/^    typedef Vector<double,NDIM> coordT;$/;"	t	class:Gaussian	file:
coordT1d	src/apps/hf/test_coulomb.cc	/^typedef Vector<double,1> coordT1d;$/;"	t	file:
coordT1d	src/apps/hf/test_lattice.cc	/^typedef Vector<double,1> coordT1d;$/;"	t	file:
coordT1d	src/examples/navstokes_cosines.cc	/^typedef Vector<double, 1> coordT1d;$/;"	t	file:
coordT3d	src/apps/hf/test_coulomb.cc	/^typedef Vector<double,3> coordT3d;$/;"	t	file:
coordT3d	src/apps/hf/test_lattice.cc	/^typedef Vector<double,3> coordT3d;$/;"	t	file:
coordT3d	src/examples/navstokes_cosines.cc	/^typedef Vector<double, 3> coordT3d,coordT;$/;"	t	file:
coord_1d	src/madness/mra/functypedefs.h	/^    typedef Vector<double,1> coord_1d;$/;"	t	namespace:madness
coord_2d	src/madness/mra/functypedefs.h	/^    typedef Vector<double,2> coord_2d;$/;"	t	namespace:madness
coord_3d	src/madness/mra/funcplot.h	/^    typedef Vector<double,3> coord_3d;$/;"	t	namespace:madness
coord_3d	src/madness/mra/functypedefs.h	/^    typedef Vector<double,3> coord_3d;$/;"	t	namespace:madness
coord_4d	src/madness/mra/functypedefs.h	/^    typedef Vector<double,4> coord_4d;$/;"	t	namespace:madness
coord_5d	src/madness/mra/functypedefs.h	/^    typedef Vector<double,5> coord_5d;$/;"	t	namespace:madness
coord_6d	src/madness/mra/funcplot.h	/^    typedef Vector<double,6> coord_6d;$/;"	t	namespace:madness
coord_6d	src/madness/mra/functypedefs.h	/^    typedef Vector<double,6> coord_6d;$/;"	t	namespace:madness
coord_chksum	src/apps/chem/mp2.h	/^        double coord_chksum() const {return coords_sum;}$/;"	f	class:madness::HartreeFock
coord_chksum	src/apps/chem/mp2.h	/^        double coord_chksum() const {return coords_sum;}$/;"	f	class:madness::MP2
coordinates	src/apps/chem/pcm.h	/^    Tensor<double> coordinates;$/;"	m	class:madness::PCM
coords	src/apps/chem/diamagneticpotentialfactor.h	/^	std::vector<coord_3d> coords;$/;"	m	class:madness::Diamagnetic_potential_factor
coords	src/apps/moldft/moldx.py	/^            coords = []$/;"	v
coords	src/apps/polar/moldx.py	/^            coords = []$/;"	v
coords_sum	src/apps/chem/SCF.h	/^	mutable double coords_sum;     \/\/ sum of square of coords at last solved geometry$/;"	m	class:madness::MolecularEnergy
coords_sum	src/apps/chem/mp2.h	/^        double coords_sum;						\/\/\/< check sum for the geometry$/;"	m	class:madness::MP2
coords_sum	src/apps/chem/mp2.h	/^        mutable double coords_sum;     \/\/ sum of square of coords at last solved geometry$/;"	m	class:madness::HartreeFock
coords_sum	src/apps/chem/nemo.h	/^	mutable double coords_sum;$/;"	m	class:madness::Nemo
coords_sum	src/apps/polar/moldft.cc	/^    mutable double coords_sum; \/\/ sum of square of coords at last solved geometry$/;"	m	class:MolecularEnergy	file:
coperatorT	src/apps/moldft/testcosine.cc	/^typedef SeparatedConvolution<double_complex,3> coperatorT;$/;"	t	file:
coperatorT	src/apps/moldft/testperiodic.cc	/^typedef SeparatedConvolution<double_complex,3> coperatorT;$/;"	t	file:
copied_parent_rrr	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  bool            copied_parent_rrr;$/;"	m	struct:__anon19
copy	src/apps/adrian/ResponseFunction2.h	/^  ResponseFunction copy() {$/;"	f	class:madness::ResponseFunction
copy	src/apps/adrian/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> copy(World & world,$/;"	f
copy	src/apps/bryan/ResponseFunction2.h	/^      ResponseFunction copy() {$/;"	f	class:madness::ResponseFunction
copy	src/apps/bryan/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> copy(World & world,$/;"	f
copy	src/apps/chem/CCStructures.cc	/^  CCPairFunction::copy() const {$/;"	f	class:madness::CCPairFunction
copy	src/apps/chem/CCStructures.cc	/^  CC_vecfunction::copy() const {$/;"	f	class:madness::CC_vecfunction
copy	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  template <typename U> void copy(linked_ptr<U> const* ptr) {$/;"	f	class:testing::internal::linked_ptr
copy	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> copy(World& world, const Function<T, NDIM>& v,$/;"	f	namespace:madness
copy	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> copy(World& world,$/;"	f	namespace:madness
copy	src/madness/mra/vmra1.h	/^      copy(World& world,$/;"	f	namespace:madness
copy	src/madness/tensor/distributed_matrix.h	/^    DistributedMatrix<T> copy(const DistributedMatrix<T>& A) {$/;"	f	namespace:madness
copy	src/madness/tensor/gentensor.h	/^    friend GenTensor<T> copy(const GenTensor<T>& rhs) {$/;"	f	class:madness::GenTensor
copy	src/madness/tensor/lowranktensor.h	/^    friend LowRankTensor copy(const LowRankTensor& other) {$/;"	f	class:madness::LowRankTensor
copy	src/madness/tensor/lowranktensor.h	/^    friend LowRankTensor<T> copy(const SliceLowRankTensor<T>& other) {$/;"	f	class:madness::SliceLowRankTensor
copy	src/madness/tensor/srconf.h	/^		friend SRConf<T> copy(const SRConf<T>& rhs) {$/;"	f	class:madness::SRConf
copy	src/madness/tensor/tensor.h	/^    template <class T> Tensor<T> copy(const Tensor<T>& t) {$/;"	f	namespace:madness
copy	src/madness/tensor/tensortrain.h	/^		friend TensorTrain copy(const TensorTrain& other) {$/;"	f	class:madness::TensorTrain
copy	src/madness/tensor/tensortrain.h	/^		friend TensorTrain copy(const TensorTrain& other, const std::vector<Slice>& s) {$/;"	f	class:madness::TensorTrain
copy	src/madness/world/worlddc.h	/^        void copy(const WorldContainerIterator<iteratorT>& other) {$/;"	f	class:madness::WorldContainerIterator
copy_2d_patch	src/madness/mra/convolution1d.h	/^    static void copy_2d_patch(T* MADNESS_RESTRICT out, long ldout, const T* MADNESS_RESTRICT in, long ldin, long n, long m) {$/;"	f	namespace:madness
copy_am_arg	src/madness/world/worldam.h	/^    inline AmArg* copy_am_arg(const AmArg& arg) {$/;"	f	namespace:madness
copy_and_replace_key_in_parameters	src/apps/chem/test_qc.cc	/^	CalculationParameters copy_and_replace_key_in_parameters(const CalculationParameters& ref_parameters, const std::string& key, int index) const {$/;"	f	class:TestCalculationParameters
copy_coeffs	src/madness/mra/funcimpl.h	/^        void copy_coeffs(const FunctionImpl<Q,NDIM>& other, bool fence) {$/;"	f	class:madness::FunctionImpl
copy_from_elemental	src/madness/tensor/elem.h	/^    void copy_from_elemental(const elem::DistMatrix<T>& din, DistributedMatrix<T>& dout) {$/;"	f	namespace:madness
copy_from_replicated	src/madness/tensor/distributed_matrix.h	/^        void copy_from_replicated(const Tensor<T>& s) {$/;"	f	class:madness::DistributedMatrix
copy_from_replicated_patch	src/madness/tensor/distributed_matrix.h	/^        void copy_from_replicated_patch(int64_t ilow, int64_t ihigh, int64_t jlow, int64_t jhigh, const Tensor<T>& s) {$/;"	f	class:madness::DistributedMatrix
copy_slice	src/madness/tensor/srconf.h	/^        SRConf<T> copy_slice(const std::vector<Slice>& s) const {$/;"	f	class:madness::SRConf
copy_to_elemental	src/madness/tensor/elem.h	/^    void copy_to_elemental(const DistributedMatrix<T>& din, elem::DistMatrix<T>& dout) {$/;"	f	namespace:madness
copy_to_replicated	src/madness/tensor/distributed_matrix.h	/^        void copy_to_replicated(Tensor<T>& s) const {$/;"	f	class:madness::DistributedMatrix
copy_to_replicated_patch	src/madness/tensor/distributed_matrix.h	/^        void copy_to_replicated_patch(int64_t ilow, int64_t ihigh, int64_t jlow, int64_t jhigh, Tensor<T>& s) const {$/;"	f	class:madness::DistributedMatrix
copyin	src/apps/ii/systolic.h	/^        void copyin(const Tensor<T>& s) {$/;"	f	class:madness::DistributedMatrix
copymatrix	src/madness/mra/tools/mathutil.py	/^def copymatrix(x): $/;"	f
copyout	src/apps/ii/systolic.h	/^        void copyout(Tensor<T>& s) const {$/;"	f	class:madness::DistributedMatrix
copyvector	src/madness/mra/tools/mathutil.py	/^def copyvector(x):$/;"	f
core	src/apps/chem/potentialmanager.h	/^    const unsigned int core;$/;"	m	class:madness::CoreOrbitalDerivativeFunctor
core	src/apps/chem/potentialmanager.h	/^    const unsigned int core;$/;"	m	class:madness::CoreOrbitalFunctor
core	src/apps/moldft/mcpfit.cc	/^    unsigned int core;$/;"	m	class:CoreOrbitalFunctor	file:
core	src/apps/polar/mcpfit.cc	/^    unsigned int core;$/;"	m	class:CoreOrbitalFunctor	file:
core	src/apps/polar/potentialmanager.h	/^    const unsigned int core;$/;"	m	class:CoreOrbitalDerivativeFunctor
core	src/apps/polar/potentialmanager.h	/^    const unsigned int core;$/;"	m	class:CoreOrbitalFunctor
core	src/madness/tensor/tensortrain.h	/^		std::vector<Tensor<T> > core;$/;"	m	class:madness::TensorTrain
core	src/madness/world/threadbind	/^            core = (core + 1)%ncores$/;"	v
core	src/madness/world/threadbind	/^core=0$/;"	v
coreApp	src/madness/external/elemental/src/core/global.cpp	/^QCoreApplication* coreApp;$/;"	m	namespace:__anon33	file:
core_derivative	src/apps/chem/corepotential.h	/^    inline double core_derivative(unsigned int atn, unsigned int core, int m, int axis, double xi, double rsq, double x, double y, double z) const {$/;"	f	class:madness::CorePotentialManager
core_derivative	src/apps/chem/molecule.cc	/^double Molecule::core_derivative(int atom, int axis, unsigned int core, int m, double x, double y, double z) const$/;"	f	class:madness::Molecule
core_derivative	src/apps/polar/corepotential.h	/^    inline double core_derivative(unsigned int atn, unsigned int core, int m, int axis, double xi, double rsq, double x, double y, double z) const {$/;"	f	class:CorePotentialManager
core_derivative	src/apps/polar/molecule.cc	/^double Molecule::core_derivative(int atom, int axis, unsigned int core, int m, double x, double y, double z) const {$/;"	f	class:Molecule
core_eval	src/apps/chem/corepotential.h	/^    inline double core_eval(unsigned int atn, unsigned int core, int m, double rsq, double x, double y, double z) const {$/;"	f	class:madness::CorePotentialManager
core_eval	src/apps/chem/molecule.cc	/^double Molecule::core_eval(int atom, unsigned int core, int m, double x, double y, double z) const$/;"	f	class:madness::Molecule
core_eval	src/apps/polar/corepotential.h	/^    inline double core_eval(unsigned int atn, unsigned int core, int m, double rsq, double x, double y, double z) const {$/;"	f	class:CorePotentialManager
core_eval	src/apps/polar/molecule.cc	/^double Molecule::core_eval(int atom, unsigned int core, int m, double x, double y, double z) const {$/;"	f	class:Molecule
core_pot	src/apps/chem/molecule.h	/^    CorePotentialManager core_pot;$/;"	m	class:madness::Molecule
core_pot	src/apps/polar/molecule.h	/^    CorePotentialManager core_pot;$/;"	m	class:Molecule
core_potential_derivative	src/apps/chem/molecule.cc	/^double Molecule::core_potential_derivative(int atom, int axis, double x, double y, double z) const$/;"	f	class:madness::Molecule
core_potential_derivative	src/apps/polar/molecule.cc	/^double Molecule::core_potential_derivative(int atom, int axis, double x, double y, double z) const {$/;"	f	class:Molecule
core_projection	src/apps/chem/SCF.cc	/^vecfuncT SCF::core_projection(World &world, const vecfuncT &psi,$/;"	f	class:madness::SCF
core_projection	src/apps/chem/potentialmanager.h	/^    vector_real_function_3d core_projection(World & world, const vector_real_function_3d& psi, const bool include_Bc = true)$/;"	f	class:madness::PotentialManager
core_projection	src/apps/polar/moldft.cc	/^    vecfuncT core_projection(World &world, const vecfuncT &psi, const bool include_Bc = true)$/;"	f	struct:Calculation
core_projection	src/apps/polar/potentialmanager.h	/^    vector_real_function_3d core_projection(World & world, const vector_real_function_3d& psi, const bool include_Bc = true)$/;"	f	class:PotentialManager
core_projector_derivative	src/apps/chem/SCF.cc	/^double SCF::core_projector_derivative(World &world, const vecfuncT &mo,$/;"	f	class:madness::SCF
core_projector_derivative	src/apps/chem/potentialmanager.h	/^    double core_projector_derivative(World & world, const vector_real_function_3d& mo, const real_tensor& occ, int atom, int axis)$/;"	f	class:madness::PotentialManager
core_projector_derivative	src/apps/polar/moldft.cc	/^    double core_projector_derivative(World &world, const vecfuncT &mo, const tensorT &occ, int atom, int axis)$/;"	f	struct:Calculation
core_projector_derivative	src/apps/polar/potentialmanager.h	/^    double core_projector_derivative(World & world, const vector_real_function_3d& mo, const real_tensor& occ, int atom, int axis)$/;"	f	class:PotentialManager
core_type	src/apps/chem/CalculationParameters.h	/^	std::string core_type() const {return get<std::string>("core_type");}$/;"	f	struct:madness::CalculationParameters
core_type	src/apps/chem/corepotential.h	/^    std::string core_type;      \/\/\/< core potential type (eg. mcp)$/;"	m	class:madness::CorePotentialManager
core_type	src/apps/chem/potentialmanager.h	/^std::string core_type;$/;"	m	class:madness::PotentialManager
core_type	src/apps/polar/corepotential.h	/^    std::string core_type;      \/\/\/< core potential type (eg. mcp)$/;"	m	class:CorePotentialManager
core_type	src/apps/polar/moldft.cc	/^    std::string core_type; \/\/\/< core potential type ("" or "mcp")$/;"	m	struct:CalculationParameters	file:
core_type	src/apps/polar/potentialmanager.h	/^std::string core_type;$/;"	m	class:PotentialManager
corepot	src/apps/moldft/mcpfit.cc	/^    CorePotentialManager corepot;$/;"	m	struct:Calculation	file:
corepot	src/apps/polar/mcpfit.cc	/^    CorePotentialManager corepot;$/;"	m	struct:Calculation	file:
cores	src/madness/world/threadbind	/^cores = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]$/;"	v
correlation_energy	src/apps/chem/mp2.h	/^        double correlation_energy;				\/\/\/< the correlation energy$/;"	m	class:madness::MP2
corrfac	src/apps/chem/CCPotentials.h	/^    CorrelationFactor corrfac;$/;"	m	class:madness::CCPotentials
corrfac	src/apps/chem/mp2.h	/^        CorrelationFactor corrfac;              \/\/\/< correlation factor: Slater$/;"	m	class:madness::MP2
corrfac	src/apps/chem/test_correlation_factor.h	/^	CorrelationFactor corrfac;$/;"	m	struct:test_correlation_factor
corrfac_gamma	src/apps/chem/CCStructures.h	/^    double corrfac_gamma=1.0;$/;"	m	struct:madness::CCParameters
corrfactype	src/apps/chem/correlationfactor.h	/^	enum corrfactype {None, GradientalGaussSlater, GaussSlater, LinearSlater,$/;"	g	class:madness::NuclearCorrelationFactor
cos	src/apps/nick/mpreal.h	/^inline const mpreal cos(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
cos	src/madness/mra/tools/longfloat.py	/^    def cos(self):$/;"	m	class:longfloat
cos	src/madness/mra/tools/longfloat.py	/^    def cos(self,x):$/;"	m	class:interpolators
cosdcos	src/madness/mra/tools/longfloat.py	/^    def cosdcos(self, x):$/;"	m	class:interpolators
cosh	src/apps/nick/mpreal.h	/^inline const mpreal cosh (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
cosinus	src/apps/chem/GuessFactory.h	/^    const std::vector<bool> cosinus;$/;"	m	class:madness::guessfactory::PlaneWaveFunctor
cost	src/madness/mra/lbdeux.h	/^            double cost;$/;"	m	struct:madness::LoadBalanceDeux::CostPerProc
costfn	src/madness/mra/lbdeux.h	/^            const costT& costfn;$/;"	m	struct:madness::LoadBalanceDeux::add_op
costhK	src/apps/nick/wavef.h	/^    double costhK;$/;"	m	class:Expikr
costmapcmp	src/madness/mra/mypmap.h	/^        static bool costmapcmp(const std::pair<KeyD,double>& a, const std::pair<KeyD,double>& b) {$/;"	f	class:madness::MyPmap
cot	src/apps/nick/mpreal.h	/^inline const mpreal cot(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
coth	src/apps/nick/mpreal.h	/^inline const mpreal coth (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
coul	src/examples/helium_mp2.cc	/^static double coul(const coord_6d& r) {$/;"	f	file:
coulomb	src/apps/adrian/TDHF.cc	/^real_function_3d TDHF::coulomb(World& world)$/;"	f	class:TDHF
coulomb	src/apps/adrian/TDHF2.cc	/^real_function_3d TDHF::coulomb(World& world)$/;"	f	class:TDHF
coulomb	src/apps/bryan/TDHF.cc	/^real_function_3d TDHF::coulomb(World& world)$/;"	f	class:TDHF
coulomb	src/apps/bryan/TDHF2.cc	/^real_function_3d TDHF::coulomb(World& world)$/;"	f	class:TDHF
coulomb	src/apps/chem/mp2.h	/^        mutable real_function_3d coulomb;$/;"	m	class:madness::HartreeFock
coulomb_	src/madness/mra/function_factory.h	/^    enum operatortype {coulomb_, slater_, f12_, bsh_};$/;"	e	enum:madness::TwoElectronFactory::operatortype
coulomb_terms	src/apps/adrian/ResponsePotential.h	/^      void coulomb_terms(ResponseFunction& x,$/;"	f	class:madness::ResponsePotential
coulomb_terms	src/apps/bryan/ResponsePotential.h	/^      void coulomb_terms(ResponseFunction& x,$/;"	f	class:madness::ResponsePotential
coulombop	src/apps/chem/PNOF12Potentials.h	/^	std::shared_ptr<real_convolution_3d> coulombop;							\/\/\/< operator for convolutions with the coulomb operator$/;"	m	class:madness::F12Potentials
coulop	src/apps/chem/SCF.h	/^	poperatorT coulop;$/;"	m	class:madness::SCF
coulop	src/apps/chem/znemo.h	/^	std::shared_ptr<real_convolution_3d> coulop;$/;"	m	class:madness::Znemo
coulop	src/apps/moldft/mcpfit.cc	/^    poperatorT coulop;$/;"	m	struct:Calculation	file:
coulop	src/apps/polar/mcpfit.cc	/^    poperatorT coulop;$/;"	m	struct:Calculation	file:
coulop	src/apps/polar/moldft.cc	/^    poperatorT coulop;$/;"	m	struct:Calculation	file:
count	src/madness/world/stubmpi.h	/^    int count;$/;"	m	struct:MPI_Status
count	src/madness/world/test_hashthreaded.cc	/^    size_t& count;$/;"	m	class:Worker	file:
count	src/madness/world/test_world.cc	/^    volatile int count;$/;"	m	class:TestBarrier	file:
count	src/madness/world/thread.h	/^        AtomicInt count; \/\/\/< Used to count threads as they start.$/;"	m	class:madness::PoolTaskInterface
count	src/madness/world/worldmutex.h	/^        unsigned int count;$/;"	m	class:madness::MutexWaiter
count	src/madness/world/worldprofile.h	/^        ProfileStat<unsigned long> count;   \/\/\/< count of times called$/;"	m	struct:madness::WorldProfileEntry
count	src/madness/world/worldrmi.h	/^        counterT count;$/;"	m	struct:madness::qmsg
count_	src/madness/world/worldref.h	/^            madness::AtomicInt count_;          \/\/\/< reference count$/;"	m	class:madness::detail::RemoteCounterBase
count_only	src/madness/world/buffer_archive.h	/^            bool count_only() const { return countonly; }$/;"	f	class:madness::archive::BufferOutputArchive
counterT	src/madness/world/worldrmi.h	/^        typedef uint16_t counterT;$/;"	t	class:madness::RMI
counterT	src/madness/world/worldrmi.h	/^        typedef uint16_t counterT;$/;"	t	struct:madness::qmsg
counter_	src/madness/world/worldref.h	/^        detail::RemoteCounter counter_; \/\/\/< Remote reference counter$/;"	m	class:madness::RemoteReference
counter_t	src/madness/external/elemental/external/pmrrr/include/counter.h	/^} counter_t;$/;"	t	typeref:struct:__anon18
countonly	src/madness/world/buffer_archive.h	/^            bool countonly; \/\/\/< If true just count, don't copy.$/;"	m	class:madness::archive::BufferOutputArchive
covalent_radius	src/apps/chem/atomutil.h	/^    const double covalent_radius;$/;"	m	struct:madness::AtomicData
covalent_radius	src/apps/hf/mentity.h	/^    const double covalent_radius;$/;"	m	struct:AtomicData
covalent_radius	src/apps/polar/atomutil.h	/^    const double covalent_radius;$/;"	m	struct:AtomicData
cp	src/apps/moldft/mcpfit.cc	/^    CorePotential & cp;$/;"	m	struct:CoreFittingTarget	file:
cp	src/apps/polar/mcpfit.cc	/^    CorePotential & cp;$/;"	m	struct:CoreFittingTarget	file:
cparam	src/apps/chem/znemo.h	/^    Nemo::NemoCalculationParameters cparam;$/;"	m	class:madness::Znemo
cpk	src/apps/moldft/moldx.py	/^cpk = {0: "light grey",$/;"	v
cpk	src/apps/polar/moldx.py	/^cpk = {0: "light grey",$/;"	v
cplxfunc0	src/examples/test_gmres.cc	/^bool cplxfunc0() {$/;"	f
cplxfunc1	src/examples/test_gmres.cc	/^bool cplxfunc1() {$/;"	f
cplxfunc2	src/examples/test_gmres.cc	/^bool cplxfunc2() {$/;"	f
cplxvec0	src/examples/test_gmres.cc	/^bool cplxvec0() {$/;"	f
cplxvec1	src/examples/test_gmres.cc	/^bool cplxvec1() {$/;"	f
cplxvec2	src/examples/test_gmres.cc	/^bool cplxvec2() {$/;"	f
cpm	src/apps/moldft/mcpfit.cc	/^    CorePotentialManager & cpm;$/;"	m	class:CoreOrbitalFunctor	file:
cpm	src/apps/polar/mcpfit.cc	/^    CorePotentialManager & cpm;$/;"	m	class:CoreOrbitalFunctor	file:
cpu_base	src/madness/world/worldprofile.h	/^        const double cpu_base;       \/\/\/< Time that I started executing$/;"	m	class:madness::WorldProfileObj
cpu_frequency	src/madness/world/timers.cc	/^    double cpu_frequency() {$/;"	f	namespace:madness
cpu_relax	src/madness/world/timers.h	/^    inline void cpu_relax() {$/;"	f	namespace:madness
cpu_start	src/madness/world/worldprofile.cc	/^    double WorldProfile::cpu_start = madness::cpu_time();$/;"	m	class:madness::WorldProfile	file:
cpu_start	src/madness/world/worldprofile.h	/^        double cpu_start;            \/\/\/< Time that I was at top of stack$/;"	m	class:madness::WorldProfileObj
cpu_start	src/madness/world/worldprofile.h	/^        static double cpu_start;$/;"	m	class:madness::WorldProfile
cpu_time	src/madness/world/test_list.cc	/^double cpu_time() {$/;"	f
cpu_time	src/madness/world/timers.h	/^    static inline double cpu_time() {$/;"	f	namespace:madness
cpufrequency	src/madness/world/hardware.h	/^    double  cpufrequency;$/;"	m	namespace:madness
cpuhi	src/madness/world/thread.cc	/^    int ThreadBase::cpuhi[3];$/;"	m	class:madness::ThreadBase	file:
cpuhi	src/madness/world/thread.h	/^        static int cpuhi[3]; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::ThreadBase
cpulo	src/madness/world/thread.cc	/^    int ThreadBase::cpulo[3];$/;"	m	class:madness::ThreadBase	file:
cpulo	src/madness/world/thread.h	/^        static int cpulo[3]; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::ThreadBase
crap	src/madness/tensor/test_Zmtxmq.cc	/^void crap(double rate, double fastest, double start) {$/;"	f
crap	src/madness/tensor/test_mtxmq.cc	/^void crap(double rate, double fastest, double start) {$/;"	f
create	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-rvalue_references.cxx	/^   static rvmove create()$/;"	f	class:rvmove
create_A	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_A(World &world,$/;"	f	class:TDHF
create_A	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_A(World &world,$/;"	f	class:TDHF
create_B	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_B(World &world,$/;"	f	class:TDHF
create_B	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_B(World &world,$/;"	f	class:TDHF
create_B	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_B(World &world,$/;"	f	class:TDHF
create_B	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_B(World &world,$/;"	f	class:TDHF
create_all_potentials	src/apps/adrian/TDDFT.cc	/^void TDHF::create_all_potentials(World &world, ResponseFunction &x,$/;"	f	class:TDHF
create_all_potentials	src/apps/adrian/TDHF2.cc	/^void TDHF::create_all_potentials(World & world,$/;"	f	class:TDHF
create_all_potentials	src/apps/bryan/TDHF2.cc	/^void TDHF::create_all_potentials(World & world,$/;"	f	class:TDHF
create_auxarg1	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^auxarg1_t *create_auxarg1(int n, double *D, double *E, double *E2,$/;"	f	file:
create_auxarg2	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^auxarg2_t *create_auxarg2(int bl_size, double *D, double *DE2,$/;"	f	file:
create_auxarg3	src/madness/external/elemental/external/pmrrr/src/plarrv.c	/^create_auxarg3(int tid, proc_t *procinfo, val_t *Wstruct,$/;"	f	file:
create_bsh_operators	src/apps/adrian/TDDFT.cc	/^TDHF::create_bsh_operators(World &world, Tensor<double> &shift,$/;"	f	class:TDHF
create_bsh_operators	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<std::shared_ptr<real_convolution_3d>>> TDHF::create_bsh_operators(World & world,$/;"	f	class:TDHF
create_bsh_operators	src/apps/adrian/TDHF2.cc	/^std::vector<std::vector<std::shared_ptr<real_convolution_3d>>> TDHF::create_bsh_operators(World & world,$/;"	f	class:TDHF
create_bsh_operators	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<std::shared_ptr<real_convolution_3d>>> TDHF::create_bsh_operators(World & world,$/;"	f	class:TDHF
create_bsh_operators	src/apps/bryan/TDHF2.cc	/^std::vector<std::vector<std::shared_ptr<real_convolution_3d>>> TDHF::create_bsh_operators(World & world,$/;"	f	class:TDHF
create_coulomb_derivative	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_coulomb_derivative(World &world,$/;"	f	class:TDHF
create_coulomb_derivative	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_coulomb_derivative(World &world,$/;"	f	class:TDHF
create_coulomb_derivative	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_coulomb_derivative(World &world,$/;"	f	class:TDHF
create_coulomb_derivative	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_coulomb_derivative(World &world,$/;"	f	class:TDHF
create_exchange_derivative	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_exchange_derivative(World &world,$/;"	f	class:TDHF
create_exchange_derivative	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_exchange_derivative(World &world,$/;"	f	class:TDHF
create_exchange_derivative	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_exchange_derivative(World &world,$/;"	f	class:TDHF
create_exchange_derivative	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_exchange_derivative(World &world,$/;"	f	class:TDHF
create_fock	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_fock(World & world,$/;"	f	class:TDHF
create_fock	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_fock(World & world,$/;"	f	class:TDHF
create_fock	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_fock(World & world,$/;"	f	class:TDHF
create_fock	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_fock(World & world,$/;"	f	class:TDHF
create_full_response_matrix	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::create_full_response_matrix(World & world, $/;"	f	class:TDHF
create_full_response_matrix	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::create_full_response_matrix(World & world, $/;"	f	class:TDHF
create_full_response_matrix	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::create_full_response_matrix(World & world, $/;"	f	class:TDHF
create_full_response_matrix	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::create_full_response_matrix(World & world, $/;"	f	class:TDHF
create_fxc	src/apps/adrian/TDDFT.cc	/^std::vector<real_function_3d> TDHF::create_fxc($/;"	f	class:TDHF
create_fxc	src/apps/adrian/TDHF2.cc	/^std::vector<real_function_3d> TDHF::create_fxc(World& world,$/;"	f	class:TDHF
create_fxc	src/apps/bryan/TDHF2.cc	/^std::vector<real_function_3d> TDHF::create_fxc(World& world,$/;"	f	class:TDHF
create_gamma	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_gamma(World &world,$/;"	f	class:TDHF
create_gamma	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_gamma(World &world,$/;"	f	class:TDHF
create_gamma	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_gamma(World &world,$/;"	f	class:TDHF
create_gamma	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_gamma(World &world,$/;"	f	class:TDHF
create_ground_hamiltonian	src/apps/adrian/TDHF.cc	/^void TDHF::create_ground_hamiltonian(World & world,$/;"	f	class:TDHF
create_ground_hamiltonian	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::create_ground_hamiltonian(World & world,$/;"	f	class:TDHF
create_ground_hamiltonian	src/apps/bryan/TDHF.cc	/^void TDHF::create_ground_hamiltonian(World & world,$/;"	f	class:TDHF
create_ground_hamiltonian	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::create_ground_hamiltonian(World & world,$/;"	f	class:TDHF
create_ground_vxc	src/apps/adrian/ResponsePotential.h	/^      real_function_3d create_ground_vxc() {$/;"	f	class:madness::ResponsePotential
create_ground_vxc	src/apps/bryan/ResponsePotential.h	/^      real_function_3d create_ground_vxc() {$/;"	f	class:madness::ResponsePotential
create_nuclear_correlation_factor	src/apps/chem/correlationfactor.cc	/^	create_nuclear_correlation_factor(World& world,$/;"	f	namespace:madness
create_nwchem_guess	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::create_nwchem_guess(World &world, int m) {$/;"	f	class:TDHF
create_nwchem_guess	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_nwchem_guess(World & world, $/;"	f	class:TDHF
create_nwchem_guess	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_nwchem_guess(World & world, $/;"	f	class:TDHF
create_nwchem_guess	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_nwchem_guess(World & world, $/;"	f	class:TDHF
create_nwchem_guess	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_nwchem_guess(World & world, $/;"	f	class:TDHF
create_overlap	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::create_overlap(World & world,$/;"	f	class:TDHF
create_overlap	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::create_overlap(World & world,$/;"	f	class:TDHF
create_perturbed_vxc	src/apps/adrian/ResponsePotential.h	/^      std::vector<real_function_3d> create_perturbed_vxc(ResponseFunction& x) {$/;"	f	class:madness::ResponsePotential
create_perturbed_vxc	src/apps/bryan/ResponsePotential.h	/^      std::vector<real_function_3d> create_perturbed_vxc(ResponseFunction& x) {$/;"	f	class:madness::ResponsePotential
create_potential	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_potential(World & world,$/;"	f	class:TDHF
create_potential	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_potential(World & world,$/;"	f	class:TDHF
create_potential	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_potential(World & world,$/;"	f	class:TDHF
create_potential	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_potential(World & world,$/;"	f	class:TDHF
create_random_guess	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::create_random_guess($/;"	f	class:TDHF
create_random_guess	src/apps/adrian/TDDFT.cc	/^std::vector<real_function_3d> TDHF::create_random_guess($/;"	f	class:TDHF
create_random_guess	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_random_guess(World & world, $/;"	f	class:TDHF
create_random_guess	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_random_guess(World & world, $/;"	f	class:TDHF
create_random_guess	src/apps/adrian/TDHF2.cc	/^std::vector<real_function_3d> TDHF::create_random_guess(World & world, $/;"	f	class:TDHF
create_random_guess	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_random_guess(World & world, $/;"	f	class:TDHF
create_random_guess	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_random_guess(World & world, $/;"	f	class:TDHF
create_random_guess	src/apps/bryan/TDHF2.cc	/^std::vector<real_function_3d> TDHF::create_random_guess(World & world, $/;"	f	class:TDHF
create_response_matrix	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::create_response_matrix($/;"	f	class:TDHF
create_response_matrix	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::create_response_matrix(World & world,$/;"	f	class:TDHF
create_response_matrix	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::create_response_matrix(World & world,$/;"	f	class:TDHF
create_response_matrix	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::create_response_matrix(World & world,$/;"	f	class:TDHF
create_response_matrix	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::create_response_matrix(World & world,$/;"	f	class:TDHF
create_shift	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::create_shift(World &world, Tensor<double> &ground,$/;"	f	class:TDHF
create_shift	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::create_shift(World & world,$/;"	f	class:TDHF
create_shift	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::create_shift(World & world,$/;"	f	class:TDHF
create_shift	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::create_shift(World & world,$/;"	f	class:TDHF
create_shift	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::create_shift(World & world,$/;"	f	class:TDHF
create_shift_target	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::create_shift_target(World &world, Tensor<double> &ground,$/;"	f	class:TDHF
create_shift_target	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::create_shift_target(World & world,$/;"	f	class:TDHF
create_shift_target	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::create_shift_target(World & world,$/;"	f	class:TDHF
create_subtasks	src/madness/external/elemental/external/pmrrr/src/process_c_task.c	/^int create_subtasks(cluster_t *cl, int tid, proc_t *procinfo, $/;"	f	file:
create_symmetry_adapted_basis	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<Function<T,NDIM> > create_symmetry_adapted_basis($/;"	f	class:madness::projector_irrep
create_trial_functions	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::create_trial_functions($/;"	f	class:TDHF
create_trial_functions	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_trial_functions(World & world,$/;"	f	class:TDHF
create_trial_functions	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::create_trial_functions(World & world,$/;"	f	class:TDHF
create_trial_functions	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::create_trial_functions(World & world,$/;"	f	class:TDHF
create_trial_functions	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::create_trial_functions(World & world,$/;"	f	class:TDHF
create_workQ	src/madness/external/elemental/external/pmrrr/src/plarrv.c	/^static workQ_t *create_workQ()$/;"	f	file:
create_xcoperator	src/apps/adrian/TDDFT.cc	/^XCOperator TDHF::create_xcoperator(World &world,$/;"	f	class:TDHF
create_xcoperator	src/apps/adrian/TDHF2.cc	/^XCOperator TDHF::create_xcoperator(World& world,$/;"	f	class:TDHF
create_xcoperator	src/apps/bryan/TDHF2.cc	/^XCOperator TDHF::create_xcoperator(World& world,$/;"	f	class:TDHF
cross	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(T, R), NDIM>> cross($/;"	f	namespace:madness
cross	src/madness/world/vector.h	/^	cross(const Vector<T,N>& l, const Vector<T,N>& r) {$/;"	f	namespace:madness
csc	src/apps/nick/mpreal.h	/^inline const mpreal csc(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
csch	src/apps/nick/mpreal.h	/^inline const mpreal csch (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
csqrt	src/apps/hf/solver.h	/^    ctensorT csqrt(const ctensorT& s, double tol=1e-8) {$/;"	f	class:madness::Solver
csqrt_op	src/examples/csqrt.cc	/^inline static void csqrt_op(const Key<1>& key, Tensor< T >& t) {$/;"	f	file:
cstart_	src/apps/chem/PNOStructures.h	/^	mutable double wstart_, cstart_;$/;"	m	struct:madness::MyTimer
cstop_	src/apps/chem/PNOStructures.h	/^	mutable double wstop_, cstop_;$/;"	m	struct:madness::MyTimer
csv	src/apps/moldft/parsemad.py	/^import csv$/;"	i
ctL	src/madness/mra/funcimpl.h	/^            typedef CoeffTracker<T,LDIM> ctL;$/;"	t	struct:madness::FunctionImpl::hartree_op
ctL	src/madness/mra/funcimpl.h	/^            typedef CoeffTracker<T,LDIM> ctL;$/;"	t	struct:madness::FunctionImpl::multiply_op
ctL	src/madness/mra/funcimpl.h	/^            typedef CoeffTracker<T,LDIM> ctL;$/;"	t	struct:madness::FunctionImpl::project_out_op
ctL	src/madness/mra/funcimpl.h	/^          typedef CoeffTracker<T,LDIM> ctL;$/;"	t	struct:madness::FunctionImpl::Vphi_op_NS
ctT	src/madness/mra/funcimpl.h	/^            typedef CoeffTracker<T,NDIM> ctT;$/;"	t	struct:madness::FunctionImpl::add_op
ctT	src/madness/mra/funcimpl.h	/^            typedef CoeffTracker<T,NDIM> ctT;$/;"	t	struct:madness::FunctionImpl::multiply_op
ctT	src/madness/mra/funcimpl.h	/^            typedef CoeffTracker<T,NDIM> ctT;$/;"	t	struct:madness::FunctionImpl::recursive_apply_op2
ctT	src/madness/mra/funcimpl.h	/^          typedef CoeffTracker<T,NDIM> ctT;$/;"	t	struct:madness::FunctionImpl::Vphi_op_NS
ctable	src/apps/moldft/pointgroup.h	/^    int ctable(int ir, int op) const {$/;"	f	class:PointGroup
ctable	src/apps/polar/pointgroup.h	/^    int ctable(int ir, int op) const {$/;"	f	class:PointGroup
ctarget	src/examples/tdse1d.cc	/^static double ctarget = 20.0; \/\/ Estimated from FT of exact solution ... was 20$/;"	v	file:
ctarget	src/examples/testspectralprop.cc	/^static double ctarget = 20.0; \/\/ Estimated from FT of exact solution ... was 20$/;"	v	file:
ctensorT	src/apps/hf/esolver.h	/^typedef Tensor< std::complex<double> > ctensorT;$/;"	t
ctensorT	src/apps/hf/solver.h	/^    typedef Tensor<std::complex<double> > ctensorT;$/;"	t	class:madness::Solver
ctime_	src/apps/chem/PNOStructures.h	/^	mutable double wtime_, ctime_;$/;"	m	struct:madness::MyTimer
ctype	src/apps/chem/CCStructures.h	/^    const CalcType ctype;$/;"	m	class:madness::CCPair
cubefile_header	src/apps/chem/molecule.cc	/^std::vector<std::string> Molecule::cubefile_header() const$/;"	f	class:madness::Molecule
cubefile_header	src/apps/chem/molecule.cc	/^std::vector<std::string> cubefile_header(std::string filename, const bool &no_orient = false)$/;"	f	namespace:madness
cubic_fit	src/apps/nick/interp.h	/^    void cubic_fit(const double* x, const T* f, T* a) {$/;"	f	class:CubicInterpolationTable
cubic_fit	src/madness/misc/interpolation_1d.h	/^    static void cubic_fit(const double* x, const T* f, T* a) {$/;"	f	class:CubicInterpolationTable
cur	src/examples/compiler/mra-driver.hh	/^    std::vector<Exp*>::iterator cur; \/\/ When traversing entire tree this is the current statement$/;"	m	class:mra_driver
cur	src/madness/misc/ran.h	/^        int cur;$/;"	m	struct:madness::RandomState
cur	src/madness/misc/ran.h	/^        volatile int cur;$/;"	m	class:madness::Random
cur_msg	src/madness/world/worldam.h	/^        volatile int cur_msg;               \/\/\/< Index of next buffer to attempt to use$/;"	m	class:madness::WorldAmInterface
cur_num_bytes	src/madness/world/worldmem.h	/^        unsigned long cur_num_bytes;   \/\/\/< Current amount of allocated memory in bytes$/;"	m	class:madness::WorldMemInfo
cur_num_frags	src/madness/world/worldmem.h	/^        unsigned long cur_num_frags;   \/\/\/< Current number of allocated fragments$/;"	m	class:madness::WorldMemInfo
curl	cmake/Makefile	/^curl := $(shell curl 2>\/dev\/null)$/;"	m
current10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T10>::iterator current10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current_cpu	src/apps/chem/CCStructures.h	/^    double current_cpu(){return current_time().second;}$/;"	f	struct:madness::CCTimer
current_energy	src/apps/chem/SCF.h	/^	double current_energy;$/;"	m	class:madness::SCF
current_energy	src/apps/polar/moldft.cc	/^    double current_energy;$/;"	m	struct:Calculation	file:
current_error	src/apps/chem/CCStructures.h	/^    double current_error;$/;"	m	struct:madness::CCFunction
current_error	src/apps/chem/CCStructures.h	/^    double current_error;$/;"	m	struct:madness::CC_vecfunction
current_prec	src/apps/chem/SCFProtocol.h	/^    double current_prec;    \/\/\/< current precision$/;"	m	class:madness::SCFProtocol
current_s2b_potential_ex_	src/apps/chem/CCStructures.h	/^    vector_real_function_3d current_s2b_potential_ex_;$/;"	m	struct:madness::CCIntermediatePotentials
current_s2b_potential_gs_	src/apps/chem/CCStructures.h	/^    vector_real_function_3d current_s2b_potential_gs_;$/;"	m	struct:madness::CCIntermediatePotentials
current_s2c_potential_ex_	src/apps/chem/CCStructures.h	/^    vector_real_function_3d current_s2c_potential_ex_;$/;"	m	struct:madness::CCIntermediatePotentials
current_s2c_potential_gs_	src/apps/chem/CCStructures.h	/^    vector_real_function_3d current_s2c_potential_gs_;$/;"	m	struct:madness::CCIntermediatePotentials
current_singles_potential_ex_	src/apps/chem/CCStructures.h	/^    vector_real_function_3d current_singles_potential_ex_;$/;"	m	struct:madness::CCIntermediatePotentials
current_singles_potential_gs_	src/apps/chem/CCStructures.h	/^    vector_real_function_3d current_singles_potential_gs_;$/;"	m	struct:madness::CCIntermediatePotentials
current_test_case	src/madness/external/gtest/src/gtest-internal-inl.h	/^  const TestCase* current_test_case() const { return current_test_case_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_case_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TestCase* current_test_case_;$/;"	m	class:testing::internal::UnitTestImpl
current_test_info	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TestInfo* current_test_info() { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info	src/madness/external/gtest/src/gtest-internal-inl.h	/^  const TestInfo* current_test_info() const { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TestInfo* current_test_info_;$/;"	m	class:testing::internal::UnitTestImpl
current_test_result	src/madness/external/gtest/src/gtest.cc	/^TestResult* UnitTestImpl::current_test_result() {$/;"	f	class:testing::internal::UnitTestImpl
current_time	src/apps/chem/CCStructures.h	/^    std::pair<double,double> current_time(bool printout = false){$/;"	f	struct:madness::CCTimer
current_time	src/examples/tdse1d.cc	/^static double current_time = 0.0; \/\/ Lazy but easier than making functors for everything$/;"	v	file:
current_time	src/examples/testspectralprop.cc	/^    const double current_time;$/;"	m	class:PsiExact	file:
current_value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current_value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current_value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current_value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current_value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current_value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current_value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current_value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current_value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current_wall	src/apps/chem/CCStructures.h	/^    double current_wall(){return current_time().first;}$/;"	f	struct:madness::CCTimer
cursor	src/madness/external/tinyxml/tinyxmlparser.cc	/^	TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	file:
curve	src/madness/mra/funcplot.h	/^    	coordT (*curve)(const coordT& lo, const coordT& hi, double radius, coord_3d el2, long npt, long ipt);$/;"	m	struct:madness::trajectory
custom_factor	src/apps/chem/diamagneticpotentialfactor.h	/^	real_function_3d custom_factor(const coord_3d& B, const std::vector<coord_3d>& vv,$/;"	f	class:madness::Diamagnetic_potential_factor
custom_guess	src/apps/chem/znemo.cc	/^Znemo::custom_guess() const {$/;"	f	class:madness::Znemo
cut	src/apps/nick/extra.h	/^  double cut;         \/\/ smoothing parameter for 1\/r (same for all atoms for now)$/;"	m	struct:InputParameters
cut	src/apps/nick/tdse1.cc	/^    double cut;         \/\/ smoothing parameter for 1\/r (same for all atoms for now)$/;"	m	struct:InputParameters	file:
cut	src/apps/tdse/tdse.cc	/^  double cut;         \/\/ smoothing parameter for 1\/r (same for all atoms for now)$/;"	m	struct:InputParameters	file:
cut	src/apps/tdse/tdse.confused.cc	/^  double cut;         \/\/ smoothing parameter for 1\/r (same for all atoms for now)$/;"	m	struct:InputParameters	file:
cut	src/apps/tdse/tdse4.cc	/^  double cut;         \/\/ smoothing parameter for 1\/r (same for all atoms for now)$/;"	m	struct:InputParameters	file:
cut	src/examples/tdse_example.cc	/^static const double cut = 0.2;  \/\/ smoothing parameter for 1\/r$/;"	v	file:
cut_oscillations	src/examples/smooth.h	/^	Function<T,NDIM> cut_oscillations(const Function<T,NDIM> &f,const double & cutoff, const size_t order)const{$/;"	f	class:smooth
cutoff	src/examples/smooth.h	/^    const double cutoff;$/;"	m	struct:merging_operator
cutoff	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^    Int cutoff;$/;"	m	struct:elem::SdcCtrl
cutoff	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    Int cutoff;$/;"	m	struct:elem::HermitianSdcCtrl
cutoff_	src/apps/nick/wavef.h	/^    const double cutoff_;$/;"	m	class:ScatteringWF
cutoff_radius	src/examples/smooth.h	/^static double cutoff_radius = 5.0;$/;"	v
cutoff_radius_	src/examples/smooth.h	/^		const double cutoff_radius_;$/;"	m	struct:smooth::inv_mask_functor
cutoff_radius_	src/examples/smooth.h	/^		const double cutoff_radius_;$/;"	m	struct:smooth::mask_functor
cutrho	src/examples/gygi_soltion.cc	/^  static const double cutrho = 1e-8;  \/\/cutoff value of the density$/;"	m	class:GygiPot	file:
cv	src/madness/world/worldmutex.h	/^        mutable pthread_cond_t cv;$/;"	m	class:madness::PthreadConditionVariable
cvecfuncT	src/apps/chem/SCF.h	/^typedef std::vector<complex_functionT> cvecfuncT;$/;"	t	namespace:madness
cvecfuncT	src/apps/hf/esolver.h	/^typedef std::vector<cfunctionT> cvecfuncT;$/;"	t
cvecfuncT	src/apps/polar/moldft.cc	/^typedef std::vector<complex_functionT> cvecfuncT;$/;"	t	file:
cvecfuncT	src/examples/h2dft.cc	/^typedef std::vector<complex_functionT> cvecfuncT;$/;"	t	file:
cvecfuncT	src/examples/hedft.cc	/^typedef std::vector<complex_functionT> cvecfuncT;$/;"	t	file:
cvecfuncT	src/examples/hefxc.cc	/^typedef std::vector<complex_functionT> cvecfuncT;$/;"	t	file:
cvecfuncT	src/examples/newsolver_lda.cc	/^typedef std::vector<complex_functionT> cvecfuncT;$/;"	t	file:
cxx_type_name	src/examples/compiler/mra-driver.hh	/^    static const char* cxx_type_name(Type t) {$/;"	f	class:Exp
cycle	src/apps/ii/systolic.h	/^        void cycle() {$/;"	f	class:madness::SystolicMatrixAlgorithm
cycle	src/madness/tensor/systolic.h	/^        void cycle() {$/;"	f	class:madness::SystolicMatrixAlgorithm
cycle_count	src/madness/world/timers.h	/^    static inline uint64_t cycle_count() {$/;"	f	namespace:madness
cycledim	src/madness/tensor/tensor.h	/^        Tensor<T> cycledim(long nshift, long start, long end) {$/;"	f	class:madness::Tensor
cycledim	src/madness/tensor/tensor.h	/^        const Tensor<T> cycledim(long nshift, long start, long end) const {$/;"	f	class:madness::Tensor
cycledim_inplace	src/madness/tensor/basetensor.cc	/^    void BaseTensor::cycledim_inplace(long nshift, long start, long end) {$/;"	f	class:madness::BaseTensor
d	src/examples/colloid.cc	/^    const double& d; \/\/distance between reaction surface and molecular center$/;"	m	class:SurfaceMoleculeInteraction	file:
d	src/examples/nonlinschro.cc	/^static const double d = 1.0;$/;"	v	file:
d	src/madness/mra/funcimpl.h	/^            Key<OPDIM> key,d;$/;"	m	struct:madness::FunctionImpl::do_op_args
d	src/madness/tensor/elem.h	/^            DistributedMatrix<T>& d;$/;"	m	class:madness::detail::ElemToMadDistCopy
d	src/madness/tensor/elem.h	/^            elem::DistMatrix<T>& d;$/;"	m	class:madness::detail::MadToElemDistCopy
d	src/madness/world/test_sig.cc	/^void d() {$/;"	f
d	src/madness/world/test_world.cc	/^        dcT& d;$/;"	m	struct:Node::do_random_insert	file:
d	src/madness/world/test_world.cc	/^    WorldContainer<Key,Node>& d;$/;"	m	struct:Walker1	file:
d0	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^    Matrix<Base<F>> d0;$/;"	m	struct:elem::qr::TreeData
d12cut	src/examples/he.cc	/^static const double d12cut = 0.01; \/\/ Smoothing distance in wave function$/;"	v	file:
d2smoothed_potential	src/apps/chem/atomutil.cc	/^double d2smoothed_potential(double r) {$/;"	f	namespace:madness
dESP_drho	src/examples/gygi_soltion.cc	/^  realfunc dESP_drho(const realfunc u) const {$/;"	f	class:GygiPot
dList	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^    std::vector<Matrix<Base<F>>> dList;$/;"	m	struct:elem::qr::TreeData
dTH	src/apps/nick/spawnK.py	/^  dTH = PI\/float(sys.argv[4])$/;"	v
dVdx	src/apps/nick/tdse1.cc	/^static double dVdx(const coordT& r) {$/;"	f	file:
dVdx	src/apps/tdse/tdse.cc	/^static double dVdx(const coordT& r) {$/;"	f	file:
dVdx	src/apps/tdse/tdse.confused.cc	/^static double dVdx(const coordT& r) {$/;"	f	file:
dVdy	src/apps/nick/tdse1.cc	/^static double dVdy(const coordT& r) {$/;"	f	file:
dVdy	src/apps/tdse/tdse.cc	/^static double dVdy(const coordT& r) {$/;"	f	file:
dVdy	src/apps/tdse/tdse.confused.cc	/^static double dVdy(const coordT& r) {$/;"	f	file:
dVdz	src/apps/nick/tdse1.cc	/^static double dVdz(const coordT& r) {$/;"	f	file:
dVdz	src/apps/tdse/tdse.cc	/^static double dVdz(const coordT& r) {$/;"	f	file:
dVdz	src/apps/tdse/tdse.confused.cc	/^static double dVdz(const coordT& r) {$/;"	f	file:
dVsq	src/examples/tdse1d.cc	/^double dVsq(const coord_1d& r) {$/;"	f
dVsq	src/madness/mra/testqm.cc	/^double_complex dVsq(const coord_1d& r) {$/;"	f
d_smoothed_potential	src/apps/nick/tdse1.cc	/^static double d_smoothed_potential(double r) {$/;"	f	file:
d_smoothed_potential	src/apps/tdse/tdse.cc	/^static double d_smoothed_potential(double r) {$/;"	f	file:
d_smoothed_potential	src/apps/tdse/tdse.confused.cc	/^static double d_smoothed_potential(double r) {$/;"	f	file:
da_ldaop	src/apps/hf/test_xc.cc	/^static void da_ldaop(const Key<3>& key, Tensor<double>& t) {$/;"	f	file:
damp_coeff	src/apps/chem/oep.h	/^	std::vector<double> damp_coeff() const {return get<std::vector<double> >("damp_coeff");}$/;"	f	class:madness::OEP_Parameters
damp_num	src/apps/chem/oep.h	/^	long damp_num() const {return get<std::vector<double> >("damp_coeff").size();}$/;"	f	class:madness::OEP_Parameters
dampf	src/apps/chem/GuessFactory.h	/^	GaussFunctor dampf;$/;"	m	class:madness::guessfactory::PolynomialFunctor
damping_width	src/apps/chem/TDHF.h	/^		double damping_width() const {return get<double>("damping_width");}$/;"	f	struct:madness::TDHF::Parameters
data	src/apps/ii/systolic.h	/^        Tensor<T>& data()  {return t;}$/;"	f	class:madness::DistributedMatrix
data	src/apps/ii/systolic.h	/^        const Tensor<T>& data() const {return t;}$/;"	f	class:madness::DistributedMatrix
data	src/apps/moldft/xmlguess.py	/^data = sys.stdin$/;"	v
data	src/apps/polar/xmlguess.py	/^data = sys.stdin$/;"	v
data	src/madness/external/elemental/external/pmrrr/include/queue.h	/^  void       *data;       \/* ptr to data, has to be casted *\/$/;"	m	struct:task_aux
data	src/madness/external/tinyxml/tinystr.h	/^	const char * data () const { return rep_->str; }$/;"	f	class:TiXmlString
data	src/madness/mra/function_common_data.h	/^        map data;$/;"	m	class:madness::Timer
data	src/madness/mra/function_common_data.h	/^        static const FunctionCommonData<T, NDIM>* data[MAXK];$/;"	m	class:madness::FunctionCommonData
data	src/madness/mra/mraimpl.h	/^    const FunctionCommonData<T,NDIM>* FunctionCommonData<T,NDIM>::data[MAXK] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};$/;"	m	class:madness::FunctionCommonData
data	src/madness/mra/operator.h	/^        mutable SimpleCache< SeparatedConvolutionData<Q,NDIM>, NDIM > data; \/\/\/< cache for all terms, dims and displacements$/;"	m	class:madness::SeparatedConvolution
data	src/madness/tensor/distributed_matrix.h	/^        Tensor<T>& data() {return t;}$/;"	f	class:madness::DistributedMatrix
data	src/madness/tensor/distributed_matrix.h	/^        const Tensor<T>& data() const {return t;}$/;"	f	class:madness::DistributedMatrix
data	src/madness/world/stack.h	/^        T* data() { return data_; }$/;"	f	class:madness::Stack
data	src/madness/world/stack.h	/^        const T* data() const { return data_; }$/;"	f	class:madness::Stack
data	src/madness/world/vector.h	/^        T* data() { return data_.data(); }$/;"	f	class:madness::Vector
data	src/madness/world/vector.h	/^        const T* data() const { return data_.data(); }$/;"	f	class:madness::Vector
dataSendRequests_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        dataSendRequests_, requestSendRequests_, replySendRequests_;$/;"	m	class:elem::AxpyInterface
dataVectors_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        dataVectors_, requestVectors_, replyVectors_;$/;"	m	class:elem::AxpyInterface
data_	src/apps/chem/GuessFactory.h	/^	const std::vector<std::vector<double>> data_;$/;"	m	class:madness::guessfactory::PolynomialFunctor
data_	src/apps/chem/PNOTensors.h	/^	std::valarray<madness::Tensor<T>> data_;$/;"	m	class:__anon48::Tensor_IJ_IK
data_	src/apps/chem/PNOTensors.h	/^	std::valarray<madness::Tensor<T>> data_;$/;"	m	class:__anon48::Tensor_IJ_KJ
data_	src/madness/external/elemental/include/elemental/core/Matrix.hpp	/^    const T* data_;$/;"	m	class:elem::Matrix
data_	src/madness/external/gtest/include/gtest/gtest.h	/^  AssertHelperData* const data_;$/;"	m	class:testing::internal::AssertHelper
data_	src/madness/world/stack.h	/^        T* data_; \/\/\/< Pointer to the stack data.$/;"	m	class:madness::Stack
data_	src/madness/world/vector.h	/^        arrayT data_; \/\/\/< The underlying array.$/;"	m	class:madness::Vector
data_is_read	src/madness/mra/legendre.cc	/^    static bool data_is_read = false;$/;"	m	namespace:madness	file:
data_type	src/madness/mra/mraplot.cc	/^    std::string data_type;           \/\/ presently only double or complex$/;"	m	class:Plotter	file:
datum	src/madness/world/worldhashmap.h	/^            datumT datum;$/;"	m	class:madness::Hash_private::entry
datumT	src/madness/mra/convolution1d.h	/^        typedef typename ConcurrentHashMap<hashT, std::shared_ptr< GaussianConvolution1D<Q> > >::datumT datumT;$/;"	t	struct:madness::GaussianConvolution1DCache
datumT	src/madness/mra/funcimpl.h	/^        typedef std::pair<Key<NDIM>,ShallowNode<T,NDIM> > datumT;$/;"	t	class:madness::CoeffTracker
datumT	src/madness/mra/funcimpl.h	/^        typedef std::pair<const keyT,nodeT> datumT; \/\/\/< Type of entry in container$/;"	t	class:madness::FunctionImpl
datumT	src/madness/world/worldhashmap.h	/^                    typename hashT::datumT>::type datumT;$/;"	t	class:madness::Hash_private::HashAccessor
datumT	src/madness/world/worldhashmap.h	/^                    typename hashT::datumT>::type datumT;$/;"	t	class:madness::Hash_private::HashIterator
datumT	src/madness/world/worldhashmap.h	/^            typedef std::pair<const keyT, valueT> datumT;$/;"	t	class:madness::Hash_private::bin
datumT	src/madness/world/worldhashmap.h	/^            typedef std::pair<const keyT, valueT> datumT;$/;"	t	class:madness::Hash_private::entry
datumT	src/madness/world/worldhashmap.h	/^        typedef std::pair<const keyT,valueT> datumT;$/;"	t	class:madness::ConcurrentHashMap
datum_type	src/madness/world/dist_cache.h	/^            typedef typename cache_container::datumT datum_type;$/;"	t	class:madness::detail::DistCache
dave	src/madness/world/test_world.cc	/^    static int dave(World* world) {$/;"	f	class:TTT
dave	src/madness/world/test_worldprofile.cc	/^void dave(int i) {$/;"	f
davidson	src/madness/mra/tools/mathutil.py	/^def davidson(A,thresh=1e-6,maxsub=10,guess=None):$/;"	f
daxpy	src/apps/moldft/fci/daxpy.F	/^      subroutine daxpy(/;"	s
dbuf	src/madness/world/test_world.cc	/^    const std::vector<double>& dbuf() const { return dbuf_long(); }$/;"	f	class:Foo
dbuf_long	src/madness/world/test_world.cc	/^    const std::vector<double>& dbuf_long() const { return dbuf_long_; }$/;"	f	class:Foo
dbuf_long_	src/madness/world/test_world.cc	/^    std::vector<double> dbuf_long_;$/;"	m	class:Foo	file:
dbuf_short	src/madness/world/test_world.cc	/^    const std::vector<double>& dbuf_short() const { return dbuf_short_; }$/;"	f	class:Foo
dbuf_short_	src/madness/world/test_world.cc	/^    std::vector<double> dbuf_short_;$/;"	m	class:Foo	file:
dcT	src/madness/mra/derivative.h	/^        typedef WorldContainer< Key<NDIM> , FunctionNode<T, NDIM> > dcT;$/;"	t	class:madness::Derivative
dcT	src/madness/mra/derivative.h	/^        typedef WorldContainer<Key<NDIM> , FunctionNode<T, NDIM> > dcT;$/;"	t	class:madness::DerivativeBase
dcT	src/madness/mra/funcimpl.h	/^        typedef WorldContainer<Key<NDIM> , FunctionNode<T, NDIM> > dcT; \/\/\/< Type of container holding the nodes$/;"	t	class:madness::FunctionNode
dcT	src/madness/mra/funcimpl.h	/^        typedef WorldContainer<keyT,nodeT> dcT; \/\/\/< Type of container holding the coefficients$/;"	t	class:madness::FunctionImpl
dcT	src/madness/world/test_tree.cc	/^    typedef WorldContainer<Key,Node> dcT;$/;"	t	struct:Node	file:
dcT	src/madness/world/test_world.cc	/^    typedef WorldContainer<Key,Node> dcT;$/;"	t	struct:Node	file:
dcomplex	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^typedef Complex<double> dcomplex;$/;"	t	namespace:elem
dconv	src/apps/adrian/ResponseParameters.h	/^      double dconv;                      \/\/\/< Convergence criterion for the orbital density $/;"	m	struct:madness::ResponseParameters
dconv	src/apps/bryan/ResponseParameters.h	/^      double dconv;                      \/\/\/< Convergence criterion for the orbital density $/;"	m	struct:madness::ResponseParameters
dconv	src/apps/chem/CalculationParameters.h	/^	double dconv() const {return get<double>("dconv");}$/;"	f	struct:madness::CalculationParameters
dconv	src/apps/chem/PNOParameters.h	/^	double dconv()const { return get<double >("dconv");}$/;"	f	class:madness::PNOParameters
dconv	src/apps/chem/SCFProtocol.h	/^    double dconv;           \/\/\/< density convergence of SCF calculations$/;"	m	class:madness::SCFProtocol
dconv	src/apps/chem/TDHF.h	/^		double dconv() const {return get<double>("dconv");}$/;"	f	struct:madness::TDHF::Parameters
dconv	src/apps/chem/mp2.h	/^        	double dconv() const {return this->get<double>("dconv");}   		\/\/\/ convenience function$/;"	f	struct:madness::MP2::Parameters
dconv	src/apps/chem/test_QCCalculationParametersBase.cc	/^	double dconv() const {return get<double>("dconv");}$/;"	f	class:Parameters
dconv	src/apps/chem/zcis.h	/^	double dconv() const {return get<double>("dconv");};$/;"	f	class:madness::Complex_CIS_Parameters
dconv	src/apps/moldft/mcpfit.cc	/^    double dconv;   \/\/\/< conversion criteria$/;"	m	struct:CalculationParameters	file:
dconv	src/apps/polar/mcpfit.cc	/^    double dconv;   \/\/\/< conversion criteria$/;"	m	struct:CalculationParameters	file:
dconv	src/apps/polar/moldft.cc	/^    double dconv;          \/\/\/< Density convergence$/;"	m	struct:CalculationParameters	file:
dconv_3D	src/apps/chem/CCStructures.h	/^    double dconv_3D=FunctionDefaults<6>::get_thresh();$/;"	m	struct:madness::CCParameters
dconv_6D	src/apps/chem/CCStructures.h	/^    double dconv_6D=FunctionDefaults<6>::get_thresh();;$/;"	m	struct:madness::CCParameters
dconv_set	src/apps/adrian/ResponseParameters.h	/^      bool dconv_set;                    \/\/\/< Convergence flag for the orbital density $/;"	m	struct:madness::ResponseParameters
dconv_set	src/apps/bryan/ResponseParameters.h	/^      bool dconv_set;                    \/\/\/< Convergence flag for the orbital density $/;"	m	struct:madness::ResponseParameters
dcopy	src/apps/moldft/fci/dcopy.F	/^      subroutine  dcopy(/;"	s
dcut	src/apps/chem/electronic_correlation_factor.h	/^        double dcut;$/;"	m	struct:madness::CorrelationFactor::U
dcut	src/apps/chem/electronic_correlation_factor.h	/^        double dcut;$/;"	m	struct:madness::CorrelationFactor::f_over_r_
dcut	src/apps/chem/electronic_correlation_factor.h	/^        double dcut;$/;"	m	struct:madness::CorrelationFactor::fg_
dcut	src/apps/chem/electronic_correlation_factor.h	/^    double dcut;        \/\/\/< the cutoff for the 1\/r potential$/;"	m	class:madness::CorrelationFactor
dcut	src/apps/chem/electronic_correlation_factor.h	/^    double dcut;        \/\/\/< the cutoff for the 1\/r potential$/;"	m	class:madness::CorrelationFactor2
dcut	src/apps/chem/mp2.cc	/^static const double dcut = 1.e-7;$/;"	v	file:
dcut	src/examples/he.cc	/^static const double   dcut = 0.01; \/\/ Smoothing distance in wave function$/;"	v	file:
dcut	src/examples/helium_mp2.cc	/^static const double dcut=1.e-5;$/;"	v	file:
dcut	src/madness/mra/function_factory.h	/^    TwoElectronFactory& dcut(double dcut) {$/;"	f	class:madness::TwoElectronFactory
dcut_	src/madness/mra/function_factory.h	/^    double dcut_;           \/\/\/< cutoff radius for 1\/r12, aka regularization$/;"	m	class:madness::TwoElectronFactory
dddd	src/madness/world/future.h	/^        class dddd {};$/;"	c	class:madness::Future
ddot	src/apps/moldft/fci/ddot.F	/^      double precision function ddot(/;"	f
deallocate	src/madness/tensor/tensor.h	/^        void deallocate() {$/;"	f	class:madness::Tensor
deallocate	src/madness/world/stack.h	/^        void deallocate() { if(! is_small()) std::free(data_); }$/;"	f	class:madness::Stack
death_test_count	src/madness/external/gtest/include/gtest/gtest.h	/^  int death_test_count() const { return death_test_count_; }$/;"	f	class:testing::TestResult
death_test_count_	src/madness/external/gtest/include/gtest/gtest.h	/^  int death_test_count_;$/;"	m	class:testing::TestResult
death_test_factory	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::DeathTestFactory* death_test_factory() {$/;"	f	class:testing::internal::UnitTestImpl
death_test_factory_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::scoped_ptr<internal::DeathTestFactory> death_test_factory_;$/;"	m	class:testing::internal::UnitTestImpl
death_test_style_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::string death_test_style_;$/;"	m	class:testing::internal::GTestFlagSaver
death_test_use_fork_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool death_test_use_fork_;$/;"	m	class:testing::internal::GTestFlagSaver
debug	src/apps/chem/CCStructures.h	/^    bool debug;$/;"	m	struct:madness::CCMessenger
debug	src/apps/chem/CCStructures.h	/^    bool debug=false;$/;"	m	struct:madness::CCParameters
debug	src/apps/chem/PNOParameters.h	/^	bool debug()const { return get<bool >("debug");}$/;"	f	class:madness::PNOParameters
debug	src/apps/chem/TDHF.h	/^		bool debug() const {return get<bool>("debug");}$/;"	f	struct:madness::TDHF::Parameters
debug	src/apps/nick/tdse1.cc	/^const bool debug = false;$/;"	v
debug	src/madness/mra/funcdefaults.h	/^        static bool debug;             \/\/\/< Controls output of debug info$/;"	m	class:madness::FunctionDefaults
debug	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> bool FunctionDefaults<NDIM>::debug;$/;"	m	class:madness::FunctionDefaults
debug	src/madness/mra/tools/longfloat.py	/^    debug   = 0$/;"	v	class:longfloat
debug	src/madness/world/taskfn.h	/^        static bool debug;$/;"	m	class:madness::TaskInterface
debug	src/madness/world/world_task_queue.cc	/^    bool TaskInterface::debug = false;$/;"	m	class:madness::TaskInterface	file:
debugSlice	src/apps/nick/projPsi.cc	/^void debugSlice(World& world, const int n, double L, double Z, double k) {$/;"	f
debug_	src/madness/world/worldgop.h	/^        bool debug_; \/\/\/< Debug mode$/;"	m	class:madness::WorldGopInterface
debug_cc2	src/apps/chem/mp2.h	/^        real_function_6d debug_cc2(const real_function_6d &f, const size_t &i, const size_t &j) const{$/;"	f	class:madness::MP2
debug_output	src/apps/chem/CCStructures.h	/^    void debug_output(const std::string &msg)const{$/;"	f	struct:madness::CCMessenger
debug_stream	src/apps/hf/outputwriter.h	/^  std::ofstream* debug_stream()$/;"	f	class:OutputWriter
debugging	src/madness/world/worldrmi.cc	/^    volatile bool RMI::debugging = false;$/;"	m	class:madness::RMI	file:
debugging	src/madness/world/worldrmi.h	/^        static volatile bool debugging;    \/\/ True if debugging$/;"	m	class:madness::RMI
dec	src/madness/tensor/tensor.h	/^            void dec() {if (p && ((*cnt)-- == 1)) {free(p); p = 0;}}$/;"	f	class:madness::detail::SharedAlignedArray
dec	src/madness/world/dependency_interface.h	/^        void dec() {$/;"	f	class:madness::DependencyInterface
dec_and_test	src/madness/world/atomicint.h	/^        bool dec_and_test() {$/;"	f	class:madness::AtomicInt
dec_debug	src/madness/world/dependency_interface.h	/^        void dec_debug(const char* caller) {$/;"	f	class:madness::DependencyInterface
decay	src/madness/world/taskfn.h	/^        T& decay(ArgHolder<T>& arg_holder) {$/;"	f	namespace:madness::detail::arg_holder
decay	src/madness/world/taskfn.h	/^        T& decay(Future<T>& arg_holder) {$/;"	f	namespace:madness::detail::arg_holder
decay	src/madness/world/taskfn.h	/^        T& decay(Future<T>* arg_holder) {$/;"	f	namespace:madness::detail::arg_holder
decay	src/madness/world/taskfn.h	/^        T&& decay(ArgHolder<T>&& arg_holder) {$/;"	f	namespace:madness::detail::arg_holder
decay	src/madness/world/taskfn.h	/^        T&& decay(Future<T>&& arg_holder) {$/;"	f	namespace:madness::detail::arg_holder
decay	src/madness/world/taskfn.h	/^        const T& decay(const ArgHolder<T>& arg_holder) {$/;"	f	namespace:madness::detail::arg_holder
decay	src/madness/world/taskfn.h	/^        const T& decay(const Future<T>& arg_holder) {$/;"	f	namespace:madness::detail::arg_holder
decompose	src/madness/tensor/tensortrain.h	/^		void decompose(const Tensor<T>& t, double eps,$/;"	f	class:madness::TensorTrain
decompose_Q	src/apps/chem/CCStructures.h	/^    bool decompose_Q=false;$/;"	m	struct:madness::CCParameters
dectab	src/examples/compiler/mra.cc	/^std::map<std::string, bool> dectab;        \/\/ keeps track of CXX declared symbols$/;"	v
def	src/apps/chem/QCCalculationParametersBase.h	/^	enum {def, derived, defined} precedence=def;$/;"	e	enum:madness::QCParameter::__anon47
defaultGrid	src/madness/external/elemental/src/core/global.cpp	/^Grid* defaultGrid = 0;$/;"	m	namespace:__anon33	file:
defaultVal	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::Args::OptionalArg
defaultVal	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::MpiArgs::OptionalArg
default_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const T default_;  \/\/ The default value for each thread.$/;"	m	class:testing::internal::ThreadLocal
default_allocator	src/madness/mra/nonlinsol.h	/^	struct default_allocator {$/;"	s	namespace:madness
default_base	src/apps/nick/mpreal.cc	/^int		   mpreal::default_base = 10;$/;"	m	class:mpfr::mpreal	file:
default_base	src/apps/nick/mpreal.h	/^	static int		  default_base;$/;"	m	class:mpfr::mpreal
default_colors	src/apps/moldft/moldx.py	/^default_colors = range(104)$/;"	v
default_colors	src/apps/polar/moldx.py	/^default_colors = range(104)$/;"	v
default_global_test_part_result_reporter_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl
default_initializer	src/madness/world/future.h	/^        static const Future<T> default_initializer() {$/;"	f	class:madness::Future
default_jdim	src/madness/tensor/tensoriter.h	/^    static const long default_jdim = 5551212; \/\/ Never a valid dimension num.$/;"	m	namespace:madness
default_nthread	src/madness/world/thread.cc	/^    int ThreadPool::default_nthread() {$/;"	f	class:madness::ThreadPool
default_per_thread_test_part_result_reporter_	src/madness/external/gtest/src/gtest-internal-inl.h	/^      default_per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl
default_prec	src/apps/nick/mpreal.cc	/^mp_prec_t  mpreal::default_prec = mpfr_get_default_prec();	$/;"	m	class:mpfr::mpreal	file:
default_prec	src/apps/nick/mpreal.h	/^	static mp_prec_t  default_prec;	$/;"	m	class:mpfr::mpreal
default_radii	src/apps/moldft/moldx.py	/^default_radii = range(104)$/;"	v
default_radii	src/apps/polar/moldx.py	/^default_radii = range(104)$/;"	v
default_random_generator	src/madness/misc/ran.cc	/^    Random default_random_generator;$/;"	m	namespace:madness	file:
default_result_printer	src/madness/external/gtest/include/gtest/gtest.h	/^  TestEventListener* default_result_printer() const {$/;"	f	class:testing::TestEventListeners
default_result_printer_	src/madness/external/gtest/include/gtest/gtest.h	/^  TestEventListener* default_result_printer_;$/;"	m	class:testing::TestEventListeners
default_rnd	src/apps/nick/mpreal.cc	/^mp_rnd_t   mpreal::default_rnd  = mpfr_get_default_rounding_mode();	$/;"	m	class:mpfr::mpreal	file:
default_rnd	src/apps/nick/mpreal.h	/^	static mp_rnd_t   default_rnd;	$/;"	m	class:mpfr::mpreal
default_value	src/apps/chem/QCCalculationParametersBase.h	/^	std::string default_value="";$/;"	m	struct:madness::QCParameter
default_world	src/madness/world/world.cc	/^    World* World::default_world = nullptr; \/\/\/< The default \\c World.$/;"	m	class:madness::World	file:
default_world	src/madness/world/world.h	/^        static World* default_world; \/\/\/< Default world.$/;"	m	class:madness::World
default_xml_generator	src/madness/external/gtest/include/gtest/gtest.h	/^  TestEventListener* default_xml_generator() const {$/;"	f	class:testing::TestEventListeners
default_xml_generator_	src/madness/external/gtest/include/gtest/gtest.h	/^  TestEventListener* default_xml_generator_;$/;"	m	class:testing::TestEventListeners
deferred_	src/madness/world/deferred_cleanup.h	/^            void_ptr_list deferred_;    \/\/\/< List of pointers to cleanup$/;"	m	class:madness::detail::DeferredCleanup
deferred_	src/madness/world/worldgop.h	/^        std::shared_ptr<detail::DeferredCleanup> deferred_; \/\/\/< Deferred cleanup object.$/;"	m	class:madness::WorldGopInterface
deferred_cleanup	src/madness/world/deferred_cleanup.h	/^        inline void deferred_cleanup(World& world, const std::shared_ptr<objT>& p) {$/;"	f	namespace:madness::detail
defined	src/apps/chem/QCCalculationParametersBase.h	/^	enum {def, derived, defined} precedence=def;$/;"	e	enum:madness::QCParameter::__anon47
defined_test_names_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  ::std::set<const char*> defined_test_names_;$/;"	m	class:testing::internal::TypedTestCasePState
deflate	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    bool deflate; $/;"	m	struct:elem::PseudospecCtrl
degree	src/apps/adrian/polynomial.h	/^  unsigned degree;$/;"	m	class:slymer::PolynomialCoeffs
degree	src/apps/bryan/polynomial.h	/^  unsigned degree;$/;"	m	class:slymer::PolynomialCoeffs
del	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-delegating_constructors.cxx	/^class del {$/;"	c	file:
del	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-delegating_constructors.cxx	/^del::del()$/;"	f	class:del
del	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-delegating_constructors.cxx	/^del::del(int k)$/;"	f	class:del
del	src/madness/world/worldhashmap.h	/^            bool del(const keyT& key, int lockmode) {$/;"	f	class:madness::Hash_private::bin
delete_thread_key	src/madness/world/thread.h	/^        static void delete_thread_key() {$/;"	f	class:madness::ThreadBase
deleter	src/madness/mra/lbdeux.h	/^        void deleter(const treeT& tree, const keyT& key) {$/;"	f	class:madness::LBNodeDeux
deleter	src/madness/world/group.h	/^            static void deleter(Impl* pimpl) {$/;"	f	class:madness::Group::Impl
delsqfred	src/apps/tdse/tdse4.cc	/^double delsqfred(const coordT& r) {$/;"	f
delta	src/apps/chem/CCStructures.h	/^    double delta; \/\/ Last difference in Energy$/;"	m	struct:madness::CC_vecfunction
delta	src/apps/chem/zcis.h	/^		double delta=1.e3;				\/\/ last wave function error$/;"	m	struct:madness::Zcis::root
delta	src/apps/moldft/mcpfit.cc	/^    double delta;   \/\/\/< step size to calc numerical derivative of residual$/;"	m	struct:CalculationParameters	file:
delta	src/apps/polar/mcpfit.cc	/^    double delta;   \/\/\/< step size to calc numerical derivative of residual$/;"	m	struct:CalculationParameters	file:
delta	src/examples/binaryop.cc	/^double delta(const coord_3d& r) {$/;"	f
delta	src/examples/dielectric_external_field.cc	/^const double delta = 0.65*sigma;$/;"	v
deltaT	src/examples/navstokes_cosines.cc	/^const double deltaT = pi*0.0001; \/\/ Size of time step$/;"	v
dens_inv	src/apps/chem/nemo.cc	/^struct dens_inv{$/;"	s	namespace:madness	file:
dens_inv1	src/apps/chem/oep.h	/^	dens_inv1(const double thresh = 1.0e-8) {$/;"	f	struct:madness::dens_inv1
dens_inv1	src/apps/chem/oep.h	/^struct dens_inv1{$/;"	s	namespace:madness
dens_thresh_hi	src/apps/chem/oep.h	/^	double dens_thresh_hi() const {return get<double>("density_threshold_high");}$/;"	f	class:madness::OEP_Parameters
dens_thresh_inv	src/apps/chem/oep.h	/^	double dens_thresh_inv() const{return get<double>("density_threshold_inv");}$/;"	f	class:madness::OEP_Parameters
dens_thresh_lo	src/apps/chem/oep.h	/^	double dens_thresh_lo() const {return get<double>("density_threshold_low");}$/;"	f	class:madness::OEP_Parameters
density	src/examples/ac_corr.cc	/^	double density (const Vector<double, NDIM> &r) const{$/;"	f	class:xc_functor	file:
density_mask_operator	src/examples/smooth.h	/^    density_mask_operator(const double thresh): safety(thresh){}$/;"	f	struct:density_mask_operator
density_mask_operator	src/examples/smooth.h	/^struct density_mask_operator{$/;"	s
depart	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  void depart() {$/;"	f	class:testing::internal::linked_ptr
depsilon_dr	src/examples/gygi_soltion.cc	/^  realfunc depsilon_dr() const {$/;"	f	class:GygiPot
depsilon_drho	src/examples/gygi_soltion.cc	/^  realfunc depsilon_drho() const {$/;"	f	class:GygiPot
depth	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  int             depth;$/;"	m	struct:__anon19
depth	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        depth;$/;"	m	struct:__anon15
depth	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        depth;$/;"	m	struct:__anon16
depth	src/madness/external/tinyxml/tinyxml.h	/^	int depth;$/;"	m	class:TiXmlPrinter
depth	src/madness/world/worldprofile.h	/^        int depth[MAX_NTHREAD];             \/\/\/< depth of recursive calls by thread (0 if no active calls)$/;"	m	struct:madness::WorldProfileEntry
depthpt	src/madness/mra/mra.h	/^        Level depthpt(const coordT& xuser) const {$/;"	f	class:madness::Function
deregister_callback	src/madness/world/worlddc.h	/^        void deregister_callback(ptrT ptr) {$/;"	f	class:madness::WorldDCPmapInterface
deriv	src/apps/chem/CalculationParameters.h	/^	std::string deriv() const {return get<std::string>("deriv");}$/;"	f	struct:madness::CalculationParameters
derivativeaxis	src/apps/chem/correlationfactor.h	/^        const int derivativeaxis;   \/\/\/ direction of the derivative operator$/;"	m	class:madness::NuclearCorrelationFactor::RX_functor
derivativeaxis	src/apps/chem/correlationfactor.h	/^        const int derivativeaxis;   \/\/\/ direction of the derivative operator$/;"	m	class:madness::NuclearCorrelationFactor::U1X_functor
derivatives	src/apps/chem/CalculationParameters.h	/^	bool derivatives() const {return get<bool>("derivatives");}$/;"	f	struct:madness::CalculationParameters
derivatives	src/apps/chem/SCF.cc	/^tensorT SCF::derivatives(World &world, const functionT &rho) const$/;"	f	class:madness::SCF
derivatives	src/apps/polar/moldft.cc	/^    bool derivatives;      \/\/\/< If true calculate derivatives$/;"	m	struct:CalculationParameters	file:
derivatives	src/apps/polar/moldft.cc	/^    tensorT derivatives(World &world)$/;"	f	struct:Calculation
derived	src/apps/chem/QCCalculationParametersBase.h	/^	enum {def, derived, defined} precedence=def;$/;"	e	enum:madness::QCParameter::__anon47
derived_value	src/apps/chem/QCCalculationParametersBase.h	/^	std::string derived_value="";$/;"	m	struct:madness::QCParameter
desc	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::Args::OptionalArg
desc	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        std::string name, desc, typeInfo, usedVal; $/;"	m	struct:elem::choice::Args::RequiredArg
desc	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::MpiArgs::OptionalArg
desc	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        std::string name, desc, typeInfo, usedVal; $/;"	m	struct:elem::choice::MpiArgs::RequiredArg
dest	src/madness/mra/funcimpl.h	/^            keyT dest;$/;"	m	struct:madness::FunctionImpl::do_op_args
dest	src/madness/world/mpi_archive.h	/^            ProcessID dest; \/\/\/< The destination process.$/;"	m	class:madness::archive::MPIOutputArchive
dest	src/madness/world/mpi_archive.h	/^            ProcessID dest; \/\/\/< The destination process.$/;"	m	class:madness::archive::MPIRawOutputArchive
dest_	src/madness/world/worldgop.h	/^            const ProcessID dest_; \/\/\/< The destination process id$/;"	m	class:madness::WorldGopInterface::DelayedSend
destroy	src/madness/tensor/gmres.h	/^            virtual void destroy(Function<scalar_type, NDIM> &f) const {$/;"	f	class:madness::FunctionSpace
destroy	src/madness/tensor/gmres.h	/^            virtual void destroy(T &) const {}$/;"	f	class:madness::AbstractVectorSpace
destroy	src/madness/tensor/gmres.h	/^            virtual void destroy(Vector<Function<scalar_type, FDIM>, VDIM> &f)$/;"	f	class:madness::VectorOfFunctionsSpace
destroy	src/madness/world/deferred_cleanup.cc	/^        bool DeferredCleanup::destroy() const {$/;"	f	class:madness::detail::DeferredCleanup
destroy	src/madness/world/deferred_cleanup.cc	/^        void DeferredCleanup::destroy(bool mode) {$/;"	f	class:madness::detail::DeferredCleanup
destroy	src/madness/world/stack.h	/^            static void destroy(T* first, T* last) {$/;"	f	class:madness::detail::StackBase
destroy	src/madness/world/stack.h	/^            static void destroy(T* ptr) { ptr->~T(); }$/;"	f	class:madness::detail::StackBase
destroy	src/madness/world/stack.h	/^            static void destroy(T*) { }$/;"	f	class:madness::detail::StackBase
destroy	src/madness/world/stack.h	/^            static void destroy(T*, T*) { }$/;"	f	class:madness::detail::StackBase
destroy	src/madness/world/worldref.h	/^            void destroy() {$/;"	f	class:madness::detail::RemoteCounter
destroy_	src/madness/world/deferred_cleanup.h	/^            bool destroy_;              \/\/\/< Object destroy mode$/;"	m	class:madness::detail::DeferredCleanup
destroy_workQ	src/madness/external/elemental/external/pmrrr/src/plarrv.c	/^static void destroy_workQ(workQ_t *wq)$/;"	f	file:
destructive	src/madness/mra/operator.h	/^        bool& destructive() {return destructive_;}$/;"	f	class:madness::SeparatedConvolution
destructive	src/madness/mra/operator.h	/^        const bool& destructive() const {return destructive_;}$/;"	f	class:madness::SeparatedConvolution
destructive_	src/madness/mra/operator.h	/^        bool destructive_;	\/\/\/< destroy the argument or restore it (expensive for 6d functions)$/;"	m	class:madness::SeparatedConvolution
det	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/LUPartialPiv.hpp	/^namespace det {$/;"	n	namespace:elem
detail	src/apps/chem/pcm.cc	/^namespace detail {$/;"	n	namespace:madness	file:
detail	src/madness.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/mra/adquad.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/mra/funcplot.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/mra/mraimpl.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/mra/power.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/tensor/elem.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/tensor/tensor.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/archive.cc	/^namespace detail {$/;"	n	namespace:madness::archive	file:
detail	src/madness/world/deferred_cleanup.cc	/^    namespace detail {$/;"	n	namespace:madness	file:
detail	src/madness/world/deferred_cleanup.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/dist_cache.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/function_traits.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/mem_func_wrapper.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/safempi.h	/^    namespace detail {$/;"	n	namespace:SafeMPI
detail	src/madness/world/stack.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/taskfn.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/world_object.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/world_task_queue.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/worldgop.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/worldhash.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/worldmem.cc	/^  namespace detail {$/;"	n	namespace:madness	file:
detail	src/madness/world/worldmem.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/worldmpi.cc	/^    namespace detail {$/;"	n	namespace:madness	file:
detail	src/madness/world/worldmpi.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/worldmutex.cc	/^    namespace detail {$/;"	n	namespace:madness	file:
detail	src/madness/world/worldmutex.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/worldptr.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/worldref.cc	/^    namespace detail {$/;"	n	namespace:madness	file:
detail	src/madness/world/worldref.h	/^    namespace detail {$/;"	n	namespace:madness
detail	src/madness/world/worldrmi.cc	/^    namespace detail {$/;"	n	namespace:madness	file:
df	src/madness/mra/tools/mathutil.py	/^    def df(x): $/;"	f
df_repo_functionals	src/apps/chem/plotxc.cc	/^static std::string df_repo_functionals[] = {$/;"	v	file:
df_repo_functionals	src/apps/chem/testxc.cc	/^static std::string df_repo_functionals[] = {$/;"	v	file:
df_repo_functionals	src/apps/polar/testxc.cc	/^static std::string df_repo_functionals[] = {$/;"	v	file:
dfill	src/apps/moldft/fci/fci_dfill.F	/^      subroutine dfill(/;"	s
dfree_drho	src/examples/gygi_soltion.cc	/^  realfunc dfree_drho() const {$/;"	f	class:GygiPot
dft_coefficient_	src/apps/chem/AC.h	/^	double dft_coefficient_; \/\/\/ dft coefficient for hybrid functionals (=1.0 for non hybrid)$/;"	m	struct:madness::ACParameters
dft_deriv	src/apps/chem/CalculationParameters.h	/^	std::string dft_deriv() const {return get<std::string>("dft_deriv");}$/;"	f	struct:madness::CalculationParameters
dft_deriv	src/apps/chem/SCFOperators.h	/^    std::string dft_deriv;$/;"	m	class:madness::XCOperator
dft_xc_lda_V	src/apps/hf/lda.h	/^ inline void dft_xc_lda_V(const Key<NDIM>& key, Tensor<double>& t)$/;"	f
dft_xc_lda_ene	src/apps/hf/lda.h	/^ inline void dft_xc_lda_ene(const Key<NDIM>& key, Tensor<double>& t)$/;"	f
dfunc	src/madness/mra/testpdiff.cc	/^double dfunc(const coordT& r) {$/;"	f
dgaussian	src/apps/chem/test_pointgroupsymmetry.cc	/^double dgaussian(const coord_3d& r) {$/;"	f
dgeev_	src/madness/tensor/lapack.cc	/^STATIC inline void dgeev_(const char* jobz, const char* uplo, integer *n,$/;"	f
dgelss_	src/madness/tensor/clapack_fortran.h	56;"	d
dgelss_	src/madness/tensor/lapack.cc	/^STATIC inline void dgelss_(integer *m, integer *n, integer *nrhs,$/;"	f
dgesv_	src/madness/tensor/clapack_fortran.h	51;"	d
dgesv_	src/madness/tensor/lapack.cc	/^STATIC inline void dgesv_(integer* n, integer* nrhs, double_complex* AT, integer* lda,$/;"	f
dgesv_	src/madness/tensor/lapack.cc	/^STATIC inline void dgesv_(integer* n, integer* nrhs, float* AT, integer* lda,$/;"	f
dgesv_	src/madness/tensor/lapack.cc	/^STATIC inline void dgesv_(integer* n, integer* nrhs, float_complex* AT, integer* lda,$/;"	f
dgesvd_	src/madness/tensor/clapack_fortran.h	46;"	d
dgesvd_	src/madness/tensor/lapack.cc	/^void dgesvd_(const char *jobu, const char *jobvt, integer *m, integer *n,$/;"	f
dgetrf_	src/madness/tensor/clapack_fortran.h	73;"	d
dgetri_	src/madness/tensor/clapack_fortran.h	74;"	d
dggev_	src/madness/tensor/lapack.cc	/^STATIC inline void dggev_(const char* jobl, const char* jobr, integer *n,$/;"	f
diafac	src/apps/chem/znemo.h	/^	std::shared_ptr<Diamagnetic_potential_factor> diafac;$/;"	m	class:madness::Znemo
diagPathsAndRanks_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    std::vector<int> diagPathsAndRanks_;$/;"	m	class:elem::Grid
diag_and_transform	src/apps/moldft/testperiodic.cc	/^std::pair<vector_complex_function_3d, tensor_real> diag_and_transform(World& world, $/;"	f
diag_fock_matrix	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::diag_fock_matrix($/;"	f	class:TDHF
diag_fock_matrix	src/apps/adrian/TDHF.cc	/^Tensor<int> TDHF::diag_fock_matrix(World & world,$/;"	f	class:TDHF
diag_fock_matrix	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::diag_fock_matrix(World & world,$/;"	f	class:TDHF
diag_fock_matrix	src/apps/bryan/TDHF.cc	/^Tensor<int> TDHF::diag_fock_matrix(World & world,$/;"	f	class:TDHF
diag_fock_matrix	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::diag_fock_matrix(World & world,$/;"	f	class:TDHF
diag_fock_matrix	src/apps/chem/SCF.cc	/^tensorT SCF::diag_fock_matrix(World &world, tensorT &fock, vecfuncT &psi,$/;"	f	class:madness::SCF
diag_fock_matrix	src/apps/polar/moldft.cc	/^    tensorT diag_fock_matrix(World &world, tensorT &fock, vecfuncT &psi, vecfuncT &Vpsi, tensorT &evals, const tensorT &occ, double thresh)$/;"	f	struct:Calculation
diag_full_response	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::diag_full_response(World & world,$/;"	f	class:TDHF
diag_full_response	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::diag_full_response(World & world,$/;"	f	class:TDHF
diag_full_response	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::diag_full_response(World & world,$/;"	f	class:TDHF
diag_full_response	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::diag_full_response(World & world,$/;"	f	class:TDHF
diagfilename	src/apps/moldft/fci/fci.F	/^      character*9 evecfilename, diagfilename$/;"	v	program:fci
diagonal	src/apps/chem/PNOStructures.h	/^	bool diagonal()const{return (i_==j_);}$/;"	f	struct:madness::ElectronPairIterator
diagonalize_CIS_guess	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::diagonalize_CIS_guess($/;"	f	class:TDHF
diagonalize_CIS_guess	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::diagonalize_CIS_guess(World & world,$/;"	f	class:TDHF
diagonalize_CIS_guess	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::diagonalize_CIS_guess(World & world,$/;"	f	class:TDHF
diagonalize_guess	src/apps/adrian/TDHF.cc	/^void TDHF::diagonalize_guess(World & world,$/;"	f	class:TDHF
diagonalize_guess	src/apps/bryan/TDHF.cc	/^void TDHF::diagonalize_guess(World & world,$/;"	f	class:TDHF
diamagnetic_U1	src/apps/chem/diamagneticpotentialfactor.h	/^	std::vector<real_function_3d> diamagnetic_U1;$/;"	m	class:madness::Diamagnetic_potential_factor
diamagnetic_U2	src/apps/chem/diamagneticpotentialfactor.h	/^	real_function_3d diamagnetic_U2;$/;"	m	class:madness::Diamagnetic_potential_factor
diamagnetic_factor_	src/apps/chem/diamagneticpotentialfactor.h	/^	real_function_3d diamagnetic_factor_;$/;"	m	class:madness::Diamagnetic_potential_factor
diamagnetic_factor_square	src/apps/chem/diamagneticpotentialfactor.h	/^	real_function_3d diamagnetic_factor_square;$/;"	m	class:madness::Diamagnetic_potential_factor
diamagnetic_mo	src/apps/chem/znemo.h	/^		std::vector<complex_function_3d> diamagnetic_mo;$/;"	m	struct:madness::Znemo::potentials
did_	src/madness/world/group.h	/^            DistributedID did_; \/\/\/< Group distributed id$/;"	m	class:madness::Group::Impl
dielectric_constant	src/madness/constants.h	/^        const double dielectric_constant = 8.854187817e-12;     \/\/ F m^{-1}$/;"	m	namespace:madness::constants
diff	src/examples/navstokes_cosines.cc	/^static Function<T,NDIM> diff(const Function<T,NDIM>& f, int axis) {$/;"	f	file:
diff	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::diff(const DerivativeBase<T,NDIM>* D, const implT* f, bool fence) {$/;"	f	class:madness::FunctionImpl
difference_type	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:testing::internal::ParamIterator
difference_type	src/madness/world/worlddc.h	/^      typedef typename std::iterator_traits<internal_iteratorT>::difference_type difference_type;$/;"	t	class:madness::WorldContainerIterator
difference_type	src/madness/world/worldhashmap.h	/^            typedef std::ptrdiff_t difference_type;$/;"	t	class:madness::Hash_private::HashIterator
dim	src/apps/chem/PNOStructures.h	/^	const size_t dim;$/;"	m	struct:madness::valarray_allocator
dim	src/apps/nick/mpreal.h	/^inline const mpreal dim(const mpreal& a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
dim	src/madness/mra/funcimpl.h	/^            int dim;				\/\/\/< 0: project 0..LDIM-1, 1: project LDIM..NDIM-1$/;"	m	struct:madness::FunctionImpl::project_out_op
dim	src/madness/mra/indexit.h	/^        std::vector<int> dim;$/;"	m	class:madness::NonstandardIndexIterator
dim	src/madness/mra/test_mra6.cc	/^    	std::vector<long> dim;$/;"	m	class:__anon12::BinaryGenTest	file:
dim	src/madness/mra/test_mra6.cc	/^    	std::vector<long> dim;$/;"	m	class:__anon12::UnaryGenTest	file:
dim	src/madness/tensor/basetensor.h	/^        long dim(int i) const {return _dim[i];}$/;"	f	class:madness::BaseTensor
dim	src/madness/tensor/lowranktensor.h	/^    long dim(const int i) const {$/;"	f	class:madness::LowRankTensor
dim	src/madness/tensor/srconf.h	/^		unsigned int dim() const {return dim_;}$/;"	f	class:madness::SRConf
dim	src/madness/tensor/tensoriter.h	/^        long dim[TENSOR_MAXDIM];$/;"	m	class:madness::TensorIterator
dim	src/madness/tensor/tensortrain.h	/^		long dim(const int i) const {$/;"	f	class:madness::TensorTrain
dim	src/madness/tensor/test_gentensor.cc	/^    	std::vector<long> dim;$/;"	m	class:__anon43::BinaryGenTest	file:
dim	src/madness/tensor/test_gentensor.cc	/^    	std::vector<long> dim;$/;"	m	class:__anon43::UnaryGenTest	file:
dim_	src/madness/tensor/srconf.h	/^		unsigned int dim_;$/;"	m	class:madness::SRConf
dim_eff	src/madness/tensor/srconf.h	/^		unsigned int dim_eff() const {return vector_.size();}$/;"	f	class:madness::SRConf
dim_per_vector	src/madness/tensor/srconf.h	/^		int dim_per_vector() const {$/;"	f	class:madness::SRConf
dimj	src/madness/tensor/tensoriter.h	/^        long dimj;$/;"	m	class:madness::TensorIterator
dims	src/madness/tensor/basetensor.h	/^        const long* dims() const {return _dim;}$/;"	f	class:madness::BaseTensor
dims	src/madness/tensor/tensortrain.h	/^		std::vector<long> dims() const {$/;"	f	class:madness::TensorTrain
dipole	src/apps/chem/CalculationParameters.h	/^	bool dipole() const {return get<bool>("dipole");}$/;"	f	struct:madness::CalculationParameters
dipole	src/apps/chem/SCF.cc	/^tensorT SCF::dipole(World &world, const functionT &rho) const$/;"	f	class:madness::SCF
dipole	src/apps/polar/moldft.cc	/^    bool dipole;           \/\/\/< If true calculatio dipole moment$/;"	m	struct:CalculationParameters	file:
dipole	src/apps/polar/moldft.cc	/^    tensorT dipole(World &world)$/;"	f	struct:Calculation
dipole_guess	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::dipole_guess(World &world,$/;"	f	class:TDHF
dipole_guess	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::dipole_guess(World &world,$/;"	f	class:TDHF
dipole_guess	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::dipole_guess(World &world,$/;"	f	class:TDHF
dipole_matrix_elements	src/apps/chem/SCF.cc	/^void SCF::dipole_matrix_elements(World &world, const vecfuncT &mo, const tensorT &occ,$/;"	f	class:madness::SCF
dir	src/apps/chem/corepotential.cc	/^static const string dir = "coredata\/";$/;"	m	namespace:madness	file:
dir	src/apps/polar/corepotential.cc	/^static const string dir = "coredata\/";$/;"	v	file:
dir	src/madness/mra/sdf_shape_3D.h	/^        const coord_3d dir; \/\/\/< The direction of the axis, from the apex INSIDE$/;"	m	class:madness::SDFCone
dir	src/madness/mra/sdf_shape_3D.h	/^        const coord_3d dir;\/\/\/< The direction of the axis, from the apex INSIDE$/;"	m	class:madness::SDFParaboloid
dir	src/madness/mra/testopdir.cc	/^    const int dir;$/;"	m	class:DPot	file:
dirac_convolution	src/apps/chem/CCStructures.cc	/^  real_function_3d CCPairFunction::dirac_convolution(const CCFunction &x, const CCConvolutionOperator &op, const size_t particle)const{$/;"	f	class:madness::CCPairFunction
dirac_convolution	src/madness/mra/mra.h	/^        Function<T,LDIM> dirac_convolution(const bool fence=true) const {$/;"	f	class:madness::Function
dirac_convolution_decomposed	src/apps/chem/CCStructures.cc	/^  real_function_3d CCPairFunction::dirac_convolution_decomposed(const CCFunction &bra, const CCConvolutionOperator &op, const size_t particle)const{$/;"	f	class:madness::CCPairFunction
dirac_convolution_op	src/madness/mra/funcimpl.h	/^		void dirac_convolution_op(const keyT &key, const nodeT &node, FunctionImpl<T,LDIM>* f) const {$/;"	f	class:madness::FunctionImpl
disable	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^    def disable(self):$/;"	m	class:COLORS
disable	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^    def disable(self):$/;"	m	class:COLORS
disabled_test_count	src/madness/external/gtest/src/gtest.cc	/^int TestCase::disabled_test_count() const {$/;"	f	class:testing::TestCase
disabled_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::disabled_test_count() const {$/;"	f	class:testing::UnitTest
disabled_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::disabled_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
disp	src/madness/mra/displacements.h	/^        static std::vector< Key<NDIM> > disp;$/;"	m	class:madness::Displacements
disp	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> std::vector< Key<NDIM> > Displacements<NDIM>::disp;$/;"	m	class:madness::Displacements
disp_periodicsum	src/madness/mra/displacements.h	/^        static std::vector< Key<NDIM> > disp_periodicsum[64];$/;"	m	class:madness::Displacements
disp_periodicsum	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> std::vector< Key<NDIM> > Displacements<NDIM>::disp_periodicsum[64];$/;"	m	class:madness::Displacements
displacement	src/madness/mra/key.h	/^    Key<NDIM> displacement(const Key<NDIM>& source, const Key<NDIM>& target) {$/;"	f	namespace:madness
display_	src/madness/external/elemental/include/elemental/io/DisplayWindow-premoc.hpp	/^    DisplayWidget<double> *display_;$/;"	m	class:elem::DisplayWindow
dist	src/apps/moldft/moldx.py	/^def dist(i,j):$/;"	f
dist	src/apps/polar/moldx.py	/^def dist(i,j):$/;"	f
distance	src/apps/chem/molecule.cc	/^static inline double distance(double x1, double y1, double z1, double x2, double y2, double z2)$/;"	f	namespace:madness
distance	src/apps/hf/mentity.cc	/^static inline double distance(double x1, double y1, double z1, double x2, double y2, double z2) {$/;"	f	file:
distance	src/apps/polar/molecule.cc	/^static inline double distance(double x1, double y1, double z1, double x2, double y2, double z2) {$/;"	f	file:
distance	src/examples/molecularmask.h	/^inline double distance(const madness::coord_3d& a, const madness::coord_3d& b) {$/;"	f
distance	src/examples/spectralprop.h	/^    inline double distance(double a, double b)$/;"	f	namespace:madness
distance	src/examples/spectralprop.h	/^    inline double distance(std::complex<T>& a, std::complex<T>& b)$/;"	f	namespace:madness
distance	src/examples/testspectralprop.cc	/^    double distance(const Fred& a, const Fred& b)$/;"	f	namespace:madness
distance	src/examples/testspectralprop.cc	/^double distance(madness::Function<std::complex<double>, 1ul>& a, madness::Function<std::complex<double>, 1ul>& b) {$/;"	f	namespace:madness
distance	src/madness/world/range.h	/^            -> decltype(std::distance(first, last))$/;"	f	class:madness::Range
distance	src/madness/world/range.h	/^        distance(integralT first, integralT last) { return last - first; }$/;"	f	class:madness::Range
distance	src/madness/world/worldhashmap.h	/^            int distance(const HashIterator& other) const {$/;"	f	class:madness::Hash_private::HashIterator
distance	src/madness/world/worldhashmap.h	/^    inline int distance(const madness::Hash_private::HashIterator<hashT>& it, const madness::Hash_private::HashIterator<hashT>& jt) {$/;"	f	namespace:std
distance1	src/examples/colloid.cc	/^inline double distance1(const coord_3d& r, const coord_3d& center){$/;"	f
distance_sq	src/apps/chem/molecule.cc	/^static inline double distance_sq(double x1, double y1, double z1, double x2, double y2, double z2)$/;"	f	namespace:madness
distance_sq	src/apps/hf/mentity.cc	/^static inline double distance_sq(double x1, double y1, double z1, double x2, double y2, double z2) {$/;"	f	file:
distance_sq	src/apps/polar/molecule.cc	/^static inline double distance_sq(double x1, double y1, double z1, double x2, double y2, double z2) {$/;"	f	file:
distances	src/examples/he.cc	/^void distances(const coord_6d& r, double& r1, double& r2, double& r12) {$/;"	f
distances	src/examples/helium_mp2.cc	/^void distances(const coord_6d& r, double& r1, double& r2, double& r12) {$/;"	f
distmatT	src/apps/chem/SCF.h	/^typedef DistributedMatrix<double> distmatT;$/;"	t	namespace:madness
distmatT	src/apps/chem/SCFOperators.h	/^    typedef DistributedMatrix<T> distmatT;$/;"	t	class:madness::Kinetic
distributed_localize_PM	src/apps/chem/distpm.cc	/^DistributedMatrix<double> distributed_localize_PM(World & world,$/;"	f	namespace:madness
distributed_localize_PM	src/apps/polar/distpm.cc	/^tensorT distributed_localize_PM(World & world, $/;"	f
distribution	src/madness/tensor/distributed_matrix.h	/^        const DistributedMatrixDistribution& distribution() const {return *this;}$/;"	f	class:madness::DistributedMatrixDistribution
distsq	src/madness/mra/key.h	/^        distsq() const {$/;"	f	class:madness::Key
div	src/examples/navstokes_cosines.cc	/^inline functionT div(const functT& uint) {$/;"	f
div	src/madness/mra/vmra.h	/^Function<T, NDIM> div(const std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
div_2si	src/apps/nick/mpreal.h	/^inline const mpreal div_2si(const mpreal& v, long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
div_2ui	src/apps/nick/mpreal.h	/^inline const mpreal div_2ui(const mpreal& v, unsigned long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
divide_add_interpolate	src/apps/chem/oep.h	/^	divide_add_interpolate(double hi, double lo) : thresh_high(hi), thresh_low(lo),$/;"	f	struct:madness::divide_add_interpolate
divide_add_interpolate	src/apps/chem/oep.h	/^struct divide_add_interpolate {$/;"	s	namespace:madness
divide_and_conquer_reduce	src/madness/tensor/srconf.h	/^		void divide_and_conquer_reduce(const double& thresh) {$/;"	f	class:madness::SRConf
dk	src/apps/nick/spawnK.py	/^  dk = float(sys.argv[2])$/;"	v
dlamch_	src/madness/tensor/clapack_fortran.h	78;"	d
dlog	src/examples/svpe.cc	/^    vector_real_function_3d dlog; \/\/< Log-derivative of the dielectric$/;"	m	class:SVPESolver	file:
dmask	src/examples/molecularmask.h	/^    double dmask(double s) const {$/;"	f	class:MolecularMaskBase
dmask	src/examples/siam_example.cc	/^  double dmask(double s) const {$/;"	f	class:DSphere
dmask	src/madness/mra/sdf_domainmask.h	/^        double dmask(double d) const {$/;"	f	class:madness::GaussianDomainMask
dmask	src/madness/mra/sdf_domainmask.h	/^        double dmask(double d) const {$/;"	f	class:madness::LLRVDomainMask
dmat	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
dmat	src/apps/hf/molecularbasis.h	/^    Tensor<double> dmat, avec, bvec;$/;"	m	class:AtomicBasis
dmat	src/apps/polar/molecularbasis.h	/^    Tensor<double> dmat, avec, bvec;$/;"	m	class:AtomicBasis
dmatpsp	src/apps/chem/molecularbasis.h	/^    Tensor<double> dmat, dmatpsp, avec, bvec, aocc, bocc, aeps, beps, aoccpsp, boccpsp;$/;"	m	class:madness::AtomicBasis
dmi	src/apps/interior_bc/test_problems.h	/^        DomainMaskInterface *dmi;$/;"	m	class:EmbeddedDirichlet
dmin	src/apps/chem/CCStructures.h	/^    double dmin=1.0;$/;"	m	struct:madness::CCParameters
dnuclear_anchor_test	src/apps/chem/test_SCFOperators.cc	/^int dnuclear_anchor_test(World& world) {$/;"	f
doWork	src/apps/nick/hello.cc	/^void doWork(World& world) {$/;"	f
do_G_sum_v1	src/apps/hf/ewald.cc	/^  double_complex do_G_sum_v1(const coordT& r) const$/;"	f	class:EwaldNuclearPotentialFunctor
do_G_sum_v2	src/apps/hf/ewald.cc	/^  double_complex do_G_sum_v2(const coordT& r) const$/;"	f	class:EwaldNuclearPotentialFunctor
do_R_sum_v1	src/apps/hf/ewald.cc	/^  double_complex do_R_sum_v1(const coordT& r) const$/;"	f	class:EwaldNuclearPotentialFunctor
do_ac	src/apps/chem/nemo.h	/^	bool do_ac() const {return calc->param.ac_data() != "none";}$/;"	f	class:madness::Nemo
do_adq	src/madness/mra/adquad.h	/^    typename funcT::returnT do_adq(double lo, double hi, const funcT& func,$/;"	f	namespace:madness
do_apply	src/madness/mra/funcimpl.h	/^        void do_apply(const opT* op, const keyT& key, const Tensor<R>& c) {$/;"	f	class:madness::FunctionImpl
do_apply_directed_screening	src/madness/mra/funcimpl.h	/^        double do_apply_directed_screening(const opT* op, const keyT& key, const coeffT& coeff,$/;"	f	class:madness::FunctionImpl
do_apply_kernel	src/madness/mra/funcimpl.h	/^        void do_apply_kernel(const opT* op, const Tensor<R>& c, const do_op_args<OPDIM>& args) {$/;"	f	class:madness::FunctionImpl
do_apply_kernel2	src/madness/mra/funcimpl.h	/^        double do_apply_kernel2(const opT* op, const Tensor<R>& c, const do_op_args<OPDIM>& args,$/;"	f	class:madness::FunctionImpl
do_apply_kernel3	src/madness/mra/funcimpl.h	/^        double do_apply_kernel3(const opT* op, const GenTensor<R>& coeff, const do_op_args<OPDIM>& args,$/;"	f	class:madness::FunctionImpl
do_average	src/madness/mra/funcimpl.h	/^            do_average() : g(0) {}$/;"	f	struct:madness::FunctionImpl::do_average
do_average	src/madness/mra/funcimpl.h	/^            do_average(implT& g) : g(&g) {}$/;"	f	struct:madness::FunctionImpl::do_average
do_average	src/madness/mra/funcimpl.h	/^        struct do_average {$/;"	s	class:madness::FunctionImpl
do_binary_op	src/madness/mra/funcimpl.h	/^	  void do_binary_op(const keyT& key, const Tensor<L>& left,$/;"	f	class:madness::FunctionImpl
do_callbacks	src/madness/world/dependency_interface.h	/^        void do_callbacks(callbackT& cb) const {$/;"	f	class:madness::DependencyInterface
do_change_tensor_type	src/madness/mra/funcimpl.h	/^            do_change_tensor_type() {}$/;"	f	struct:madness::FunctionImpl::do_change_tensor_type
do_change_tensor_type	src/madness/mra/funcimpl.h	/^            do_change_tensor_type(const TensorArgs& targs) : targs(targs) {}$/;"	f	struct:madness::FunctionImpl::do_change_tensor_type
do_change_tensor_type	src/madness/mra/funcimpl.h	/^        struct do_change_tensor_type {$/;"	s	class:madness::FunctionImpl
do_check_symmetry_local	src/madness/mra/funcimpl.h	/^            do_check_symmetry_local() : f(0) {}$/;"	f	struct:madness::FunctionImpl::do_check_symmetry_local
do_check_symmetry_local	src/madness/mra/funcimpl.h	/^            do_check_symmetry_local(const implT& f) : f(&f) {}$/;"	f	struct:madness::FunctionImpl::do_check_symmetry_local
do_check_symmetry_local	src/madness/mra/funcimpl.h	/^        struct do_check_symmetry_local {$/;"	s	class:madness::FunctionImpl
do_cleanup	src/madness/world/deferred_cleanup.cc	/^        void DeferredCleanup::do_cleanup() {$/;"	f	class:madness::detail::DeferredCleanup
do_consolidate_buffer	src/madness/mra/funcimpl.h	/^            do_consolidate_buffer() {}$/;"	f	struct:madness::FunctionImpl::do_consolidate_buffer
do_consolidate_buffer	src/madness/mra/funcimpl.h	/^            do_consolidate_buffer(const TensorArgs& targs) : targs(targs) {}$/;"	f	struct:madness::FunctionImpl::do_consolidate_buffer
do_consolidate_buffer	src/madness/mra/funcimpl.h	/^        struct do_consolidate_buffer {$/;"	s	class:madness::FunctionImpl
do_convert_to_color	src/madness/mra/funcimpl.h	/^            do_convert_to_color() {};$/;"	f	struct:madness::FunctionImpl::do_convert_to_color
do_convert_to_color	src/madness/mra/funcimpl.h	/^            do_convert_to_color(const double limit, const bool log) : limit(limit), log(log) {}$/;"	f	struct:madness::FunctionImpl::do_convert_to_color
do_convert_to_color	src/madness/mra/funcimpl.h	/^        struct do_convert_to_color {$/;"	s	class:madness::FunctionImpl
do_damping	src/apps/chem/oep.h	/^	bool do_damping() const {return damp_num() > 1;}$/;"	f	class:madness::OEP_Parameters
do_decimal_point	src/madness/external/muParser/muParser.h	/^      virtual char_type do_decimal_point() const$/;"	f	class:mu::Parser::change_dec_sep
do_del	src/madness/world/worldmem.cc	/^    void WorldMemInfo::do_del(void *p, std::size_t size) {$/;"	f	class:madness::WorldMemInfo
do_diff1	src/madness/mra/derivative.h	/^        void do_diff1(const implT* f, implT* df, const keyT& key,$/;"	f	class:madness::DerivativeBase
do_diff1	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::do_diff1(const DerivativeBase<T,NDIM>* D,$/;"	f	class:madness::FunctionImpl
do_diff2b	src/madness/mra/derivative.h	/^        void do_diff2b(const implT* f, implT* df, const keyT& key,$/;"	f	class:madness::Derivative
do_diff2i	src/madness/mra/derivative.h	/^        void do_diff2i(const implT* f, implT*df, const keyT& key,$/;"	f	class:madness::Derivative
do_dirac_convolution	src/madness/mra/funcimpl.h	/^        void do_dirac_convolution(FunctionImpl<T,LDIM>* f, bool fence) const {$/;"	f	class:madness::FunctionImpl
do_err_box	src/madness/mra/funcimpl.h	/^            do_err_box() {}$/;"	f	class:madness::FunctionImpl::do_err_box
do_err_box	src/madness/mra/funcimpl.h	/^            do_err_box(const do_err_box& e)$/;"	f	class:madness::FunctionImpl::do_err_box
do_err_box	src/madness/mra/funcimpl.h	/^            do_err_box(const implT* impl, const opT* func, int npt, const Tensor<double>& qx,$/;"	f	class:madness::FunctionImpl::do_err_box
do_err_box	src/madness/mra/funcimpl.h	/^        class do_err_box {$/;"	c	class:madness::FunctionImpl
do_error_leaf_op	src/madness/mra/funcimpl.h	/^        bool do_error_leaf_op() const {return false;}$/;"	f	struct:madness::hartree_convolute_leaf_op
do_error_leaf_op	src/madness/mra/funcimpl.h	/^        bool do_error_leaf_op() const {return false;}$/;"	f	struct:madness::hartree_leaf_op
do_error_leaf_op	src/madness/mra/funcimpl.h	/^        bool do_error_leaf_op() const {return true;}$/;"	f	struct:madness::op_leaf_op
do_fence	src/madness/world/parallel_archive.h	/^            bool do_fence; \/\/\/< If true (default), a read\/write of parallel objects fences before and after I\/O.$/;"	m	class:madness::archive::BaseParallelArchive
do_gaxpy_inplace	src/madness/mra/funcimpl.h	/^            do_gaxpy_inplace() {};$/;"	f	struct:madness::FunctionImpl::do_gaxpy_inplace
do_gaxpy_inplace	src/madness/mra/funcimpl.h	/^            do_gaxpy_inplace(FunctionImpl<T,NDIM>* f, T alpha, R beta) : f(f), alpha(alpha), beta(beta) {}$/;"	f	struct:madness::FunctionImpl::do_gaxpy_inplace
do_gaxpy_inplace	src/madness/mra/funcimpl.h	/^        struct do_gaxpy_inplace {$/;"	s	class:madness::FunctionImpl
do_grouping	src/madness/external/muParser/muParser.h	/^      virtual std::string do_grouping() const $/;"	f	class:mu::Parser::change_dec_sep
do_hartree_product	src/madness/mra/mra.h	/^        void do_hartree_product(const FunctionImpl<T,LDIM>* left, const FunctionImpl<T,KDIM>* right) {$/;"	f	class:madness::Function
do_hartree_product	src/madness/mra/mra.h	/^        void do_hartree_product(const FunctionImpl<T,LDIM>* left, const FunctionImpl<T,KDIM>* right,$/;"	f	class:madness::Function
do_inner_ext_local_ffi	src/madness/mra/funcimpl.h	/^            do_inner_ext_local_ffi(const std::shared_ptr< FunctionFunctorInterface<T,NDIM> > f,$/;"	f	struct:madness::FunctionImpl::do_inner_ext_local_ffi
do_inner_ext_local_ffi	src/madness/mra/funcimpl.h	/^        struct do_inner_ext_local_ffi {$/;"	s	class:madness::FunctionImpl
do_inner_local	src/madness/mra/funcimpl.h	/^            do_inner_local(const FunctionImpl<R,NDIM>* other, const bool leaves_only)$/;"	f	struct:madness::FunctionImpl::do_inner_local
do_inner_local	src/madness/mra/funcimpl.h	/^        struct do_inner_local {$/;"	s	class:madness::FunctionImpl
do_inner_localX	src/madness/mra/funcimpl.h	/^        static void do_inner_localX(const typename mapT::iterator lstart,$/;"	f	class:madness::FunctionImpl
do_inner_localX	src/madness/mra/funcimpl.h	/^       static void do_inner_localX(const typename mapT::iterator lstart,$/;"	f	class:madness::FunctionImpl
do_keep_sum_coeffs	src/madness/mra/funcimpl.h	/^            do_keep_sum_coeffs(implT* impl) :impl(impl) {}$/;"	f	struct:madness::FunctionImpl::do_keep_sum_coeffs
do_keep_sum_coeffs	src/madness/mra/funcimpl.h	/^        struct do_keep_sum_coeffs {$/;"	s	class:madness::FunctionImpl
do_leaves	src/madness/mra/funcimpl.h	/^            const bool do_leaves;   \/\/\/< start with leaf nodes instead of initial_level$/;"	m	struct:madness::FunctionImpl::do_inner_ext_local_ffi
do_localize	src/apps/chem/CalculationParameters.h	/^	bool do_localize() const {return (localize_method()!="canon");}$/;"	f	struct:madness::CalculationParameters
do_map_and_mirror	src/madness/mra/funcimpl.h	/^            do_map_and_mirror(const std::vector<long> map, const std::vector<long> mirror, implT& f)$/;"	f	struct:madness::FunctionImpl::do_map_and_mirror
do_map_and_mirror	src/madness/mra/funcimpl.h	/^        struct do_map_and_mirror {$/;"	s	class:madness::FunctionImpl
do_mapdim	src/madness/mra/funcimpl.h	/^            do_mapdim() : f(0) {};$/;"	f	struct:madness::FunctionImpl::do_mapdim
do_mapdim	src/madness/mra/funcimpl.h	/^            do_mapdim(const std::vector<long> map, implT& f) : map(map), f(&f) {}$/;"	f	struct:madness::FunctionImpl::do_mapdim
do_mapdim	src/madness/mra/funcimpl.h	/^        struct do_mapdim {$/;"	s	class:madness::FunctionImpl
do_merge_trees	src/madness/mra/funcimpl.h	/^            do_merge_trees() : other(0) {}$/;"	f	struct:madness::FunctionImpl::do_merge_trees
do_merge_trees	src/madness/mra/funcimpl.h	/^            do_merge_trees(const T alpha, const R beta, FunctionImpl<Q,NDIM>& other)$/;"	f	struct:madness::FunctionImpl::do_merge_trees
do_merge_trees	src/madness/mra/funcimpl.h	/^        struct do_merge_trees {$/;"	s	class:madness::FunctionImpl
do_mirror	src/madness/mra/funcimpl.h	/^            do_mirror() : f(0) {};$/;"	f	struct:madness::FunctionImpl::do_mirror
do_mirror	src/madness/mra/funcimpl.h	/^            do_mirror(const std::vector<long> mirror, implT& f) : mirror(mirror), f(&f) {}$/;"	f	struct:madness::FunctionImpl::do_mirror
do_mirror	src/madness/mra/funcimpl.h	/^        struct do_mirror {$/;"	s	class:madness::FunctionImpl
do_mul	src/madness/mra/funcimpl.h	/^        void do_mul(const keyT& key, const Tensor<L>& left, const std::pair< keyT, Tensor<R> >& arg) {$/;"	f	class:madness::FunctionImpl
do_new	src/madness/mra/funcimpl.h	/^        bool do_new;$/;"	m	class:madness::FunctionImpl
do_new	src/madness/world/worldmem.cc	/^    void WorldMemInfo::do_new(void *p, std::size_t size) {$/;"	f	class:madness::WorldMemInfo
do_norm2sq_local	src/madness/mra/funcimpl.h	/^        struct do_norm2sq_local {$/;"	s	class:madness::FunctionImpl
do_oep	src/apps/chem/TDHF.h	/^		bool do_oep() const {return get<bool>("do_oep");}$/;"	f	struct:madness::TDHF::Parameters
do_oep	src/apps/chem/mp2.h	/^        	bool do_oep;$/;"	m	struct:madness::MP2::Parameters
do_op_args	src/madness/mra/funcimpl.h	/^            do_op_args() {}$/;"	f	struct:madness::FunctionImpl::do_op_args
do_op_args	src/madness/mra/funcimpl.h	/^            do_op_args(const Key<OPDIM>& key, const Key<OPDIM>& d, const keyT& dest, double tol, double fac, double cnorm)$/;"	f	struct:madness::FunctionImpl::do_op_args
do_op_args	src/madness/mra/funcimpl.h	/^        struct do_op_args {$/;"	s	class:madness::FunctionImpl
do_pcm	src/apps/chem/nemo.h	/^	bool do_pcm() const {return calc->param.pcm_data() != "none";}$/;"	f	class:madness::Nemo
do_plots	src/apps/chem/SCF.cc	/^void SCF::do_plots(World &world)$/;"	f	class:madness::SCF
do_plots	src/apps/polar/moldft.cc	/^    void do_plots(World &world)$/;"	f	struct:Calculation
do_pre_screening	src/madness/mra/leafop.h	/^    do_pre_screening() const {$/;"	f	class:madness::Leaf_op
do_pre_screening	src/madness/mra/leafop.h	/^    do_pre_screening() const {$/;"	f	class:madness::Leaf_op_other
do_print	src/apps/chem/znemo.h	/^	    bool do_print=true;$/;"	m	struct:madness::Znemo::timer
do_print	src/madness/mra/nonlinsol.h	/^		bool do_print;$/;"	m	class:madness::NonlinearSolverND
do_print	src/madness/mra/nonlinsol.h	/^        bool do_print;$/;"	m	class:madness::XNonlinearSolver
do_print_grid	src/madness/mra/mraimpl.h	/^    void  FunctionImpl<T,NDIM>::do_print_grid(const std::string filename, const std::vector<keyT>& keys) const {$/;"	f	class:madness::FunctionImpl
do_print_plane	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::do_print_plane(const std::string filename, std::vector<Tensor<double> > plotinfo,$/;"	f	class:madness::FunctionImpl
do_print_tree	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::do_print_tree(const keyT& key, std::ostream& os, Level maxlevel) const {$/;"	f	class:madness::FunctionImpl
do_print_tree_graphviz	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::do_print_tree_graphviz(const keyT& key, std::ostream& os, Level maxlevel) const {$/;"	f	class:madness::FunctionImpl
do_project_out	src/madness/mra/funcimpl.h	/^        void do_project_out(const coeffT& fcoeff, const std::pair<keyT,coeffT> gpair, const keyT& gkey,$/;"	f	class:madness::FunctionImpl
do_random_insert	src/madness/world/test_world.cc	/^        do_random_insert(dcT& d, double value)$/;"	f	struct:Node::do_random_insert
do_random_insert	src/madness/world/test_world.cc	/^    struct do_random_insert {$/;"	s	struct:Node	file:
do_reduce_rank	src/madness/mra/funcimpl.h	/^            do_reduce_rank() {}$/;"	f	struct:madness::FunctionImpl::do_reduce_rank
do_reduce_rank	src/madness/mra/funcimpl.h	/^            do_reduce_rank(const TensorArgs& targs) : args(targs) {}$/;"	f	struct:madness::FunctionImpl::do_reduce_rank
do_reduce_rank	src/madness/mra/funcimpl.h	/^            do_reduce_rank(const double& thresh) {$/;"	f	struct:madness::FunctionImpl::do_reduce_rank
do_reduce_rank	src/madness/mra/funcimpl.h	/^        struct do_reduce_rank {$/;"	s	class:madness::FunctionImpl
do_rhs	src/apps/hf/solver.h	/^    void do_rhs(vecfuncT& wf,$/;"	f	class:madness::Solver
do_rhs_simple	src/apps/hf/solver.h	/^    void do_rhs_simple(vecfuncT& wf,$/;"	f	class:madness::Solver
do_standard	src/madness/mra/funcimpl.h	/^            do_standard() {}$/;"	f	struct:madness::FunctionImpl::do_standard
do_standard	src/madness/mra/funcimpl.h	/^            do_standard(implT* impl) : impl(impl) {}$/;"	f	struct:madness::FunctionImpl::do_standard
do_standard	src/madness/mra/funcimpl.h	/^        struct do_standard {$/;"	s	class:madness::FunctionImpl
do_step_restriction	src/apps/chem/SCF.cc	/^double SCF::do_step_restriction(World &world, const vecfuncT &mo, vecfuncT &mo_new,$/;"	f	class:madness::SCF
do_step_restriction	src/apps/chem/znemo.cc	/^void Znemo::do_step_restriction(const std::vector<complex_function_3d>& mo,$/;"	f	class:madness::Znemo
do_sum	src/madness/world/test_tree.cc	/^    double do_sum(vector< Future<double> > v) {$/;"	f	struct:Node
do_sum_spawn	src/madness/world/test_tree.cc	/^    Future<double> do_sum_spawn(const dcT& d, const Key& key) {$/;"	f	struct:Node
do_symmetry	src/apps/chem/CalculationParameters.h	/^	bool do_symmetry() const {return (pointgroup()!="c1");}$/;"	f	struct:madness::CalculationParameters
do_symmetry	src/apps/chem/nemo.h	/^	bool do_symmetry() const {return (symmetry_projector.get_pointgroup()!="C1");}$/;"	f	class:madness::Nemo
do_test_random	src/madness/world/test_hashthreaded.cc	/^void do_test_random(ConcurrentHashMap<int,double>& a, size_t& count, double& sum) {$/;"	f
do_thousands_sep	src/madness/external/muParser/muParser.h	/^      virtual char_type do_thousands_sep() const$/;"	f	class:mu::Parser::change_dec_sep
do_truncate_NS_leafs	src/madness/mra/funcimpl.h	/^            do_truncate_NS_leafs(const implT* f) : f(f) {}$/;"	f	struct:madness::FunctionImpl::do_truncate_NS_leafs
do_truncate_NS_leafs	src/madness/mra/funcimpl.h	/^        struct do_truncate_NS_leafs {$/;"	s	class:madness::FunctionImpl
do_unary_op_value_inplace	src/madness/mra/funcimpl.h	/^            do_unary_op_value_inplace(implT* impl, const opT& op) : impl(impl), op(op) {}$/;"	f	struct:madness::FunctionImpl::do_unary_op_value_inplace
do_unary_op_value_inplace	src/madness/mra/funcimpl.h	/^        struct do_unary_op_value_inplace {$/;"	s	class:madness::FunctionImpl
do_vtk_plots	src/apps/adrian/Plot_VTK.h	/^void do_vtk_plots(World& world, $/;"	f
do_vtk_plots	src/apps/bryan/Plot_VTK.h	/^void do_vtk_plots(World& world, $/;"	f
doconj	src/madness/mra/mra.h	/^        static void doconj(const Key<NDIM>, Tensor<T>& t) {$/;"	f	class:madness::Function
doctest	src/madness/tensor/mtxmq_graveyard/new_mtxmq/tests/testDocStrings.py	/^import doctest$/;"	i
document	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlDocument*	document;	\/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute
dofence	src/madness/world/parallel_archive.h	/^            bool dofence() const {$/;"	f	class:madness::archive::BaseParallelArchive
doit	src/apps/moldft/preal.cc	/^    void doit(World& world) {$/;"	f	class:MiniDFT
doit	src/apps/nick/tdse1.cc	/^void doit(World& world) {$/;"	f
doit	src/apps/tdse/tdse.cc	/^void doit(World& world) {$/;"	f
doit	src/apps/tdse/tdse.confused.cc	/^void doit(World& world) {$/;"	f
doit	src/apps/tdse/tdse4.cc	/^void doit(World& world) {$/;"	f
doit	src/examples/vnucso.cc	/^void doit(World& world) {$/;"	f
doit	src/madness/tensor/genmtxm.py	/^def doit(transpose):$/;"	f
doit	src/madness/world/test_atomicint.cc	/^void* doit(void *args) {$/;"	f
doit	src/madness/world/test_tree.cc	/^void doit(World& world) {$/;"	f
doleaves	src/madness/mra/operator.h	/^        bool doleaves;  \/\/\/< If should be applied to leaf coefficients ... false by default$/;"	m	class:madness::SeparatedConvolution
dolineplot	src/madness/mra/mraplot.cc	/^    void dolineplot(const Function<T,NDIM>& f) {$/;"	f	class:Plotter
dolineplot	src/madness/mra/mraplot.cc	/^    void dolineplot(const Function<T,NDIM>& f, const Function<T,NDIM>& g) {$/;"	f	class:Plotter
domain	src/apps/nick/wavef.h	/^    double   domain;$/;"	m	class:ScatteringWF
domain_mask_name	src/apps/interior_bc/test_problems.h	/^        std::string domain_mask_name;$/;"	m	class:EmbeddedDirichlet
done	src/madness/world/test_queue.cc	/^    bool done;$/;"	m	class:Task	file:
doplot	src/apps/nick/tdse1.cc	/^void doplot(World& world, int step, const complex_functionT& psi, double Lplot, long numpt, const char* fname) {$/;"	f
doplot	src/apps/nick/wfSlice.cc	/^void doplot(World& world, int step, const complex_functionT& psi, double Lplot, long numpt, const char* fname) {$/;"	f
doplot	src/apps/tdse/tdse.cc	/^void doplot(World& world, int step, const complex_functionT& psi, double Lplot, long numpt, const char* fname) {$/;"	f
doplot	src/apps/tdse/tdse.confused.cc	/^void doplot(World& world, int step, const complex_functionT& psi, double Lplot, long numpt, const char* fname) {$/;"	f
doplot	src/madness/mra/mraplot.cc	/^    void doplot() {$/;"	f	class:Plotter
doplot1	src/madness/mra/mraplot.cc	/^    void doplot1() {$/;"	f	class:Plotter
doplotptk	src/examples/vtk.cc	/^void doplotptk(World& world, int step, const functionT& psi, double Lplot, long numpt, const char* fname) {$/;"	f
doprint	src/apps/ii/systolic.h	/^        const bool randomized, doprint;$/;"	m	class:madness::LocalizeBoys
dorgqr_	src/madness/tensor/lapack.cc	/^STATIC inline void dorgqr_(integer *m, integer *n, integer *k,$/;"	f
dorgqr_	src/madness/tensor/lapack.cc	/^STATIC void dorgqr_(integer *m, integer *n, integer *k,$/;"	f
dostr	src/apps/hf/outputwriter.h	/^  std::ofstream* dostr;$/;"	m	class:OutputWriter
dostuff	src/examples/tiny.cc	/^void dostuff(World& world) {$/;"	f
dot	src/madness/mra/tools/mathutil.py	/^def dot(a,b): $/;"	f
dot	src/madness/mra/tools/twoscalecoeffs.py	/^from mathutil import printvector, printmatrix, dot$/;"	i
dot	src/madness/mra/vmra.h	/^Function<TENSOR_RESULT_TYPE(T, R), NDIM> dot($/;"	f	namespace:madness
dot	src/madness/tensor/cblas.h	/^    inline complex_real4 dot(const integer n, const complex_real4* x,$/;"	f	namespace:madness::cblas
dot	src/madness/tensor/cblas.h	/^    inline complex_real8 dot(const integer n, const complex_real8* x,$/;"	f	namespace:madness::cblas
dot	src/madness/tensor/cblas.h	/^    inline double dot(const integer n, const double* x, const integer incx,$/;"	f	namespace:madness::cblas
dot	src/madness/tensor/cblas.h	/^    inline float dot(const integer n, const float* x, const integer incx,$/;"	f	namespace:madness::cblas
dot_product	src/madness/tensor/kain.cc	/^double dot_product(const Tensor<double>& a, const Tensor<double>& b) {$/;"	f
dot_product	src/madness/tensor/test_solvers.cc	/^double dot_product(const Tensor<double>& a, const Tensor<double>& b) {$/;"	f
double_bits	src/apps/nick/mpreal.cc	/^int        mpreal::double_bits = -1;$/;"	m	class:mpfr::mpreal	file:
double_bits	src/apps/nick/mpreal.h	/^    static int        double_bits;$/;"	m	class:mpfr::mpreal
double_complex	src/apps/nick/lineplot.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/misc/cfft.h	/^typedef std::complex<double> double_complex;$/;"	t
double_complex	src/madness/misc/ran.h	/^typedef std::complex<double> double_complex;$/;"	t
double_complex	src/madness/tensor/basetensor.h	/^typedef std::complex<double> double_complex;$/;"	t
double_complex	src/madness/tensor/mtxmq_bg/bgp_cc.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/tensor/mtxmq_bg/bgp_cr.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/tensor/mtxmq_bg/bgp_rc.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/tensor/mtxmq_graveyard/bgp_tuning/mTxm_tune.cc	/^typedef complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/tensor/mtxmq_graveyard/bgp_tuning/mtxmq.cc	/^typedef complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_Zmtxmq.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/tensor/mtxmq_graveyard/mtxmq.h	/^typedef std::complex<double> double_complex;$/;"	t
double_complex	src/madness/tensor/oldtest.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/tensor/tensoriter.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/tensor/test_Zmtxmq.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/tensor/vmath.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/world/test_ar.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_complex	src/madness/world/test_world.cc	/^typedef std::complex<double> double_complex;$/;"	t	file:
double_count	src/madness/world/test_dc.cc	/^AtomicInt double_count;$/;"	v
double_precision	src/madness/fortran_ctypes.h	/^typedef double double_precision;$/;"	t
double_precision_complex	src/madness/fortran_ctypes.h	/^typedef std::complex<double> double_precision_complex;$/;"	t
doublereal	src/apps/hf/lda.h	/^typedef double doublereal;$/;"	t
dovolumeplot	src/madness/mra/mraplot.cc	/^    void dovolumeplot(const Function<T,NDIM>& f) {$/;"	f	class:Plotter
dovolumeplot	src/madness/mra/mraplot.cc	/^    void dovolumeplot(const Function<T,NDIM>& f, const Function<T,NDIM>& g) {$/;"	f	class:Plotter
download	cmake/Makefile	/^download := curl $(URL) -o $(CMAKE).tar.gz$/;"	m
download	cmake/Makefile	/^download := wget $(URL) -O $(CMAKE).tar.gz$/;"	m
downsample	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::tensorT FunctionImpl<T,NDIM>::downsample(const keyT& key, const std::vector< Future<coeffT > >& v) const {$/;"	f	class:madness::FunctionImpl
dp	src/madness/mra/minmax/y.cc	/^    const vector<FLOAT>& dp;$/;"	m	class:Func	file:
dp	src/madness/mra/minmax/y1.cc	/^    const vector<FLOAT>& dp;$/;"	m	class:Func	file:
dp	src/madness/mra/minmax/y_signed.cc	/^    const vector<FLOAT>& dp;$/;"	m	class:Func	file:
dp	src/madness/mra/minmax/y_varx.cc	/^    const vector<FLOAT>& dp;$/;"	m	class:Func	file:
dpenalty	src/madness/tensor/gfit.cc	/^    double dpenalty(double expnt) const {$/;"	f	class:Fred	file:
dpolar	src/apps/chem/SCF.cc	/^void SCF::dpolar(World &world, tensorT &polar, functionT &drho, const int axis)$/;"	f	class:madness::SCF
dpolar	src/apps/polar/moldft.cc	/^void dpolar(World &world, tensorT &polar, functionT &drho, int &axis)$/;"	f	struct:Calculation
dpotrf_	src/madness/tensor/clapack_fortran.h	72;"	d
drand	src/madness/world/test_hashthreaded.cc	/^double drand() {$/;"	f
drand	src/madness/world/world.h	/^        double drand() { return rand()\/16777216.0; }$/;"	f	class:madness::World
draw_circle	src/examples/tiny.cc	/^void draw_circle(World& world, Function<double,NDIM>& pair, const std::string restart_name) {$/;"	f
draw_line	src/examples/tiny.cc	/^void draw_line(World& world, Function<double,NDIM>& pair, const std::string restart_name) {$/;"	f
driver1	src/madness/world/lookup3.c	/^void driver1()$/;"	f
driver2	src/madness/world/lookup3.c	/^void driver2()$/;"	f
driver3	src/madness/world/lookup3.c	/^void driver3()$/;"	f
driver4	src/madness/world/lookup3.c	/^ void driver4()$/;"	f
drop_last_arg_and_apply	src/madness/world/meta.h	/^struct drop_last_arg_and_apply {$/;"	s	namespace:madness::meta
drop_last_arg_and_apply_callable	src/madness/world/meta.h	/^struct drop_last_arg_and_apply_callable {$/;"	s	namespace:madness::meta
drop_last_arg_and_apply_callable_impl	src/madness/world/meta.h	/^struct drop_last_arg_and_apply_callable_impl<MetaFn, Callable,$/;"	s	namespace:madness::meta
drop_last_arg_and_apply_impl	src/madness/world/meta.h	/^struct drop_last_arg_and_apply_impl<MetaFn, typelist<UpToLast...>, Last> {$/;"	s	namespace:madness::meta
drop_last_arg_and_apply_impl	src/madness/world/meta.h	/^struct drop_last_arg_and_apply_impl<MetaFn, typelist<UpToT...>, T, Rest...> {$/;"	s	namespace:madness::meta
drot	src/apps/chem/distpm.cc	/^void drot(long n, double* MADNESS_RESTRICT a, double* MADNESS_RESTRICT b, double s, double c, long inc) {$/;"	f	namespace:madness
drot	src/apps/ii/systolic.h	/^    void LocalizeBoys<T>::drot(T MADNESS_RESTRICT a[], T MADNESS_RESTRICT b[], double sin, double cos)$/;"	f	class:madness::LocalizeBoys
drot	src/apps/polar/distpm.cc	/^void drot(long n, double* MADNESS_RESTRICT a, double* MADNESS_RESTRICT b, double s, double c, long inc) {$/;"	f
drot	src/madness/tensor/fred.cc	/^void drot(long n, double* MADNESS_RESTRICT a, double* MADNESS_RESTRICT b, double s, double c) {$/;"	f
drot3	src/apps/moldft/preal.cc	/^void drot3(long n, double* MADNESS_RESTRICT a, double* MADNESS_RESTRICT b, double s, double c, long inc) {$/;"	f
drot3	src/apps/polar/moldft.cc	/^void drot3(long n, double *MADNESS_RESTRICT a, double *MADNESS_RESTRICT b, double s, double c, long inc)$/;"	f
dscal	src/apps/moldft/fci/dscal.F	/^      subroutine  dscal(/;"	s
dsmoothed_potential	src/apps/chem/atomutil.cc	/^double dsmoothed_potential(double r) {$/;"	f	namespace:madness
dsmoothed_potential	src/apps/hf/mentity.cc	/^static double dsmoothed_potential(double r)$/;"	f	file:
dsmoothed_potential	src/apps/polar/atomutil.cc	/^double dsmoothed_potential(double r) {$/;"	f
dsmoothed_unitvec	src/apps/chem/correlationfactor.h	/^	coord_3d dsmoothed_unitvec(const coord_3d& xyz, const int axis,$/;"	f	class:madness::NuclearCorrelationFactor
dsurface	src/madness/mra/sdf_domainmask.h	/^        double dsurface(double d) const {$/;"	f	class:madness::GaussianDomainMask
dsurface	src/madness/mra/sdf_domainmask.h	/^        double dsurface(double d) const {$/;"	f	class:madness::LLRVDomainMask
dsyev_	src/madness/tensor/clapack_fortran.h	61;"	d
dsyev_	src/madness/tensor/lapack.cc	/^STATIC inline void dsyev_(const char* jobz, const char* uplo, integer *n,$/;"	f
dsyev_	src/madness/tensor/lapack.cc	/^STATIC void dsyev_(const char* jobz, const char* uplo, integer *n,$/;"	f
dsygv_	src/madness/tensor/clapack_fortran.h	67;"	d
dsygv_	src/madness/tensor/lapack.cc	/^void dsygv_(integer *itype, const char* jobz, const char* uplo, integer *n,$/;"	f
dtrsm_	src/madness/tensor/clapack_fortran.h	76;"	d
du_exact	src/madness/mra/testdiff1D.cc	/^static double du_exact(const coordT &pt) {$/;"	f	file:
du_exact	src/madness/mra/testdiff1Db.cc	/^static double du_exact(const coordT &pt) {$/;"	f	file:
dudx_exact	src/madness/mra/testdiff2D.cc	/^static double dudx_exact(const coordT &pt) {$/;"	f	file:
dudx_exact	src/madness/mra/testdiff3D.cc	/^static double dudx_exact(const coordT &pt) {$/;"	f	file:
dudy_exact	src/madness/mra/testdiff2D.cc	/^static double dudy_exact(const coordT &pt) {$/;"	f	file:
dudy_exact	src/madness/mra/testdiff3D.cc	/^static double dudy_exact(const coordT &pt) {$/;"	f	file:
dudz_exact	src/madness/mra/testdiff3D.cc	/^static double dudz_exact(const coordT &pt) {$/;"	f	file:
dumb	src/madness/world/test_world.cc	/^double dumb(int a1, int a2, int a3, int a4, int a5, int a6, int a7) {$/;"	f
dummy_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static bool dummy_;$/;"	m	class:testing::internal::TypeIdHelper
dummy_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^bool TypeIdHelper<T>::dummy_ = false;$/;"	m	class:testing::internal::TypeIdHelper
dx	src/apps/nick/wavef.h	/^    double   dx;$/;"	m	class:ScatteringWF
dxprintvalue	src/madness/mra/mraimpl.h	/^    static inline void dxprintvalue(FILE* f, const double t) {$/;"	f	namespace:madness
dxprintvalue	src/madness/mra/mraimpl.h	/^    static inline void dxprintvalue(FILE* f, const double_complex& t) {$/;"	f	namespace:madness
dxx	src/apps/adrian/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dxx	src/apps/bryan/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dxxmyy	src/apps/adrian/gaussian.h	/^  dzzmrr, dxxmyy,$/;"	m	class:slymer::GaussianType
dxxmyy	src/apps/bryan/gaussian.h	/^  dzzmrr, dxxmyy,$/;"	m	class:slymer::GaussianType
dxy	src/apps/adrian/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dxy	src/apps/bryan/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dxz	src/apps/adrian/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dxz	src/apps/bryan/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dyy	src/apps/adrian/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dyy	src/apps/bryan/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dyz	src/apps/adrian/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dyz	src/apps/bryan/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dzz	src/apps/adrian/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dzz	src/apps/bryan/gaussian.h	/^  dxx, dxy, dxz, dyy, dyz, dzz,$/;"	m	class:slymer::GaussianType
dzzmrr	src/apps/adrian/gaussian.h	/^  dzzmrr, dxxmyy,$/;"	m	class:slymer::GaussianType
dzzmrr	src/apps/bryan/gaussian.h	/^  dzzmrr, dxxmyy,$/;"	m	class:slymer::GaussianType
e	src/madness/world/test_sig.cc	/^void e() {$/;"	f
e1	src/madness/mra/minmax/y1.cc	/^FLOAT e1(FLOAT z) {$/;"	f
e_ion_	src/apps/chem/AC.h	/^	double e_ion_; \/\/\/ ionisation energy of corresponding ion without ac$/;"	m	struct:madness::ACParameters
e_residuals	src/apps/adrian/TDDFT.h	/^  Tensor<double> e_residuals;  \/\/ Residuals of energies$/;"	m	class:TDHF
e_residuals	src/apps/adrian/TDHF2.h	/^      Tensor<double> e_residuals;  \/\/ Residuals of energies$/;"	m	class:TDHF
e_residuals	src/apps/bryan/TDHF2.h	/^      Tensor<double> e_residuals;  \/\/ Residuals of energies$/;"	m	class:TDHF
e_singlet	src/apps/chem/mp2.h	/^        double e_singlet;				\/\/\/< the energy of the singlet pair ij$/;"	m	class:madness::ElectronPair
e_triplet	src/apps/chem/mp2.h	/^        double e_triplet;				\/\/\/< the energy of the triplet pair ij$/;"	m	class:madness::ElectronPair
e_window	src/apps/adrian/ResponseParameters.h	/^      bool e_window;                     \/\/\/< Use an energy window to excite from$/;"	m	struct:madness::ResponseParameters
e_window	src/apps/bryan/ResponseParameters.h	/^      bool e_window;                     \/\/\/< Use an energy window to excite from$/;"	m	struct:madness::ResponseParameters
eat_eol	src/madness/world/text_fstream_archive.cc	/^        void TextFstreamInputArchive::eat_eol() const {$/;"	f	class:madness::archive::TextFstreamInputArchive
ecBUILTIN_OVERLOAD	src/madness/external/muParser/muParserError.h	/^  ecBUILTIN_OVERLOAD    = 19, \/\/\/< Trying to overload builtin operator$/;"	e	enum:mu::EErrorCodes
ecCOUNT	src/madness/external/muParser/muParserError.h	/^  ecCOUNT,                    \/\/\/< This is no error code, It just stores just the total number of error codes$/;"	e	enum:mu::EErrorCodes
ecDIV_BY_ZERO	src/madness/external/muParser/muParserError.h	/^  ecDIV_BY_ZERO         = 26, \/\/\/< Division by zero (currently unused)$/;"	e	enum:mu::EErrorCodes
ecDOMAIN_ERROR	src/madness/external/muParser/muParserError.h	/^  ecDOMAIN_ERROR        = 25, \/\/\/< catch division by zero, sqrt(-1), log(0) (currently unused)$/;"	e	enum:mu::EErrorCodes
ecEMPTY_EXPRESSION	src/madness/external/muParser/muParserError.h	/^  ecEMPTY_EXPRESSION    = 22, \/\/\/< The Expression is empty$/;"	e	enum:mu::EErrorCodes
ecGENERIC	src/madness/external/muParser/muParserError.h	/^  ecGENERIC             = 27, \/\/\/< Generic error$/;"	e	enum:mu::EErrorCodes
ecINTERNAL_ERROR	src/madness/external/muParser/muParserError.h	/^  ecINTERNAL_ERROR      = 29, \/\/\/< Internal error of any kind.$/;"	e	enum:mu::EErrorCodes
ecINVALID_FUN_PTR	src/madness/external/muParser/muParserError.h	/^  ecINVALID_FUN_PTR     = 20, \/\/\/< Invalid callback function pointer $/;"	e	enum:mu::EErrorCodes
ecINVALID_NAME	src/madness/external/muParser/muParserError.h	/^  ecINVALID_NAME        = 18, \/\/\/< Invalid function, variable or constant name.$/;"	e	enum:mu::EErrorCodes
ecINVALID_VAR_PTR	src/madness/external/muParser/muParserError.h	/^  ecINVALID_VAR_PTR     = 21, \/\/\/< Invalid variable pointer $/;"	e	enum:mu::EErrorCodes
ecLOCALE	src/madness/external/muParser/muParserError.h	/^  ecLOCALE              = 28, \/\/\/< Conflict with current locale$/;"	e	enum:mu::EErrorCodes
ecMISSING_PARENS	src/madness/external/muParser/muParserError.h	/^  ecMISSING_PARENS      = 11, \/\/\/< Missing parens. (Example: "3*sin(3")$/;"	e	enum:mu::EErrorCodes
ecNAME_CONFLICT	src/madness/external/muParser/muParserError.h	/^  ecNAME_CONFLICT       = 23, \/\/\/< Name conflict$/;"	e	enum:mu::EErrorCodes
ecOPRT_TYPE_CONFLICT	src/madness/external/muParser/muParserError.h	/^  ecOPRT_TYPE_CONFLICT  = 16, \/\/\/< binary operators may only be applied to value items of the same type$/;"	e	enum:mu::EErrorCodes
ecOPT_PRI	src/madness/external/muParser/muParserError.h	/^  ecOPT_PRI             = 24, \/\/\/< Invalid operator priority$/;"	e	enum:mu::EErrorCodes
ecSTRING_EXPECTED	src/madness/external/muParser/muParserError.h	/^  ecSTRING_EXPECTED     = 9,  \/\/\/< A string function has been called with a different type of argument$/;"	e	enum:mu::EErrorCodes
ecSTR_RESULT	src/madness/external/muParser/muParserError.h	/^  ecSTR_RESULT          = 17, \/\/\/< result is a string$/;"	e	enum:mu::EErrorCodes
ecTOO_FEW_PARAMS	src/madness/external/muParser/muParserError.h	/^  ecTOO_FEW_PARAMS      = 15, \/\/\/< Too few function parameters. (Example: "ite(1<2,2)")$/;"	e	enum:mu::EErrorCodes
ecTOO_MANY_PARAMS	src/madness/external/muParser/muParserError.h	/^  ecTOO_MANY_PARAMS     = 14, \/\/\/< Too many function parameters$/;"	e	enum:mu::EErrorCodes
ecUNASSIGNABLE_TOKEN	src/madness/external/muParser/muParserError.h	/^  ecUNASSIGNABLE_TOKEN  = 1,  \/\/\/< Token cant be identified.$/;"	e	enum:mu::EErrorCodes
ecUNDEFINED	src/madness/external/muParser/muParserError.h	/^  ecUNDEFINED           = -1  \/\/\/< Undefined message, placeholder to detect unassigned error messages$/;"	e	enum:mu::EErrorCodes
ecUNEXPECTED_ARG	src/madness/external/muParser/muParserError.h	/^  ecUNEXPECTED_ARG      = 4,  \/\/\/< An unexpected argument has been found$/;"	e	enum:mu::EErrorCodes
ecUNEXPECTED_ARG_SEP	src/madness/external/muParser/muParserError.h	/^  ecUNEXPECTED_ARG_SEP  = 3,  \/\/\/< An unexpected comma has been found. (Example: "1,23")$/;"	e	enum:mu::EErrorCodes
ecUNEXPECTED_EOF	src/madness/external/muParser/muParserError.h	/^  ecUNEXPECTED_EOF      = 2,  \/\/\/< Unexpected end of formula. (Example: "2+sin(")$/;"	e	enum:mu::EErrorCodes
ecUNEXPECTED_FUN	src/madness/external/muParser/muParserError.h	/^  ecUNEXPECTED_FUN      = 12, \/\/\/< Unexpected function found. (Example: "sin(8)cos(9)")$/;"	e	enum:mu::EErrorCodes
ecUNEXPECTED_OPERATOR	src/madness/external/muParser/muParserError.h	/^  ecUNEXPECTED_OPERATOR = 0,  \/\/\/< Unexpected binary operator found$/;"	e	enum:mu::EErrorCodes
ecUNEXPECTED_PARENS	src/madness/external/muParser/muParserError.h	/^  ecUNEXPECTED_PARENS   = 7,  \/\/\/< Unexpected Parenthesis, opening or closing$/;"	e	enum:mu::EErrorCodes
ecUNEXPECTED_STR	src/madness/external/muParser/muParserError.h	/^  ecUNEXPECTED_STR      = 8,  \/\/\/< A string has been found at an inapropriate position$/;"	e	enum:mu::EErrorCodes
ecUNEXPECTED_VAL	src/madness/external/muParser/muParserError.h	/^  ecUNEXPECTED_VAL      = 5,  \/\/\/< An unexpected value token has been found$/;"	e	enum:mu::EErrorCodes
ecUNEXPECTED_VAR	src/madness/external/muParser/muParserError.h	/^  ecUNEXPECTED_VAR      = 6,  \/\/\/< An unexpected variable token has been found$/;"	e	enum:mu::EErrorCodes
ecUNTERMINATED_STRING	src/madness/external/muParser/muParserError.h	/^  ecUNTERMINATED_STRING = 13, \/\/\/< unterminated string constant. (Example: "3*valueof('hello')")$/;"	e	enum:mu::EErrorCodes
ecVAL_EXPECTED	src/madness/external/muParser/muParserError.h	/^  ecVAL_EXPECTED        = 10, \/\/\/< A numerical function has been called with a non value type of argument$/;"	e	enum:mu::EErrorCodes
econv	src/apps/chem/CCStructures.h	/^    double econv=FunctionDefaults<6>::get_thresh();$/;"	m	struct:madness::CCParameters
econv	src/apps/chem/CalculationParameters.h	/^	double econv() const {return get<double>("econv");}$/;"	f	struct:madness::CalculationParameters
econv	src/apps/chem/PNOParameters.h	/^	double econv()const { return econv_micro();}$/;"	f	class:madness::PNOParameters
econv	src/apps/chem/SCFProtocol.h	/^    double econv;           \/\/\/< energy convergence of SCF calculations$/;"	m	class:madness::SCFProtocol
econv	src/apps/chem/TDHF.h	/^		double econv() const {return get<double>("econv");}$/;"	f	struct:madness::TDHF::Parameters
econv	src/apps/chem/mp2.h	/^        	double econv() const {return get<double>("econv");}   		\/\/\/ convenience function$/;"	f	struct:madness::MP2::Parameters
econv	src/apps/chem/test_QCCalculationParametersBase.cc	/^	double econv() const {return get<double>("econv");}$/;"	f	class:Parameters
econv_macro	src/apps/chem/PNOParameters.h	/^	double econv_macro()const { return get<double >("econv_macro");}$/;"	f	class:madness::PNOParameters
econv_micro	src/apps/chem/PNOParameters.h	/^	double econv_micro()const { return get<double >("econv_micro");}$/;"	f	class:madness::PNOParameters
econv_pairs	src/apps/chem/CCStructures.h	/^    double econv_pairs=FunctionDefaults<6>::get_thresh();$/;"	m	struct:madness::CCParameters
econv_pairs	src/apps/chem/PNOParameters.h	/^	double econv_pairs()const { return get<double >("econv_pairs");}$/;"	f	class:madness::PNOParameters
ecore	src/apps/moldft/fci/fci.F	/^      double precision ecore,/;"	v	program:fci
eh_	src/apps/chem/AC.h	/^	double eh_; \/\/\/ energy of the homo without ac$/;"	m	struct:madness::ACParameters
eigs	src/apps/hf/dft.h	/^     const std::vector<double>& eigs()$/;"	f	class:madness::DFT
eigs	src/apps/hf/eigsolver.h	/^  const std::vector<double>& eigs()$/;"	f	class:madness::EigSolver
eigs	src/apps/hf/hartreefock.h	/^    const std::vector<double>& eigs()$/;"	f	class:madness::HartreeFock
eigv_stream	src/apps/hf/outputwriter.h	/^  std::ofstream* eigv_stream()$/;"	f	class:OutputWriter
eigval_approx_proc	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^int eigval_approx_proc(proc_t *procinfo, int ifirst, int ilast, $/;"	f	file:
eigval_refine_proc	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^int eigval_refine_proc(proc_t *procinfo, int ifirst, int ilast, $/;"	f	file:
eigval_root_proc	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^int eigval_root_proc(proc_t *procinfo, int ifirst, int ilast, $/;"	f	file:
eigval_subset_thread_a	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^void *eigval_subset_thread_a(void *argin)$/;"	f	file:
eigval_subset_thread_r	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^void *eigval_subset_thread_r(void *argin)$/;"	f	file:
eij	src/apps/chem/PNOStructures.h	/^	std::valarray<double> eij; \/\/\/< total pair energies$/;"	m	struct:madness::PairEnergies
eijs	src/apps/chem/PNOStructures.h	/^	std::valarray<double> eijs; \/\/\/< singlet pair energies (for CIS(D) the GS Part)$/;"	m	struct:madness::PairEnergies
eijs_f12	src/apps/chem/PNOStructures.h	/^	std::valarray<double> eijs_f12; \/\/\/< singlet f12 pair energies (for CIS(D) the GS Part)$/;"	m	struct:madness::PairEnergies
eijt	src/apps/chem/PNOStructures.h	/^	std::valarray<double> eijt; \/\/\/< triplet pair energies (for CIS(D) the ES Part)$/;"	m	struct:madness::PairEnergies
eijt_f12	src/apps/chem/PNOStructures.h	/^	std::valarray<double> eijt_f12; \/\/\/< triplet f12 pair energies (for CIS(D) the ES Part)$/;"	m	struct:madness::PairEnergies
eint	src/apps/nick/mpreal.h	/^inline const mpreal eint   (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
el2	src/madness/mra/funcplot.h	/^    	coord_3d el2;$/;"	m	struct:madness::trajectory
elapsed_time	src/madness/external/gtest/include/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestCase
elapsed_time	src/madness/external/gtest/include/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestResult
elapsed_time	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::internal::UnitTestImpl
elapsed_time	src/madness/external/gtest/src/gtest.cc	/^internal::TimeInMillis UnitTest::elapsed_time() const {$/;"	f	class:testing::UnitTest
elapsed_time_	src/madness/external/gtest/include/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestCase
elapsed_time_	src/madness/external/gtest/include/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestResult
elapsed_time_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::internal::UnitTestImpl
electron_g_factor	src/madness/constants.h	/^        const double electron_g_factor = -2.0023193043622 ; \/\/  0.0000000000015    $/;"	m	namespace:madness::constants
electron_gyromagnetic_ratio	src/madness/constants.h	/^        const double electron_gyromagnetic_ratio = 1.760859770e11 ; \/\/   0.000000044 e11     s^-1 T^-1$/;"	m	namespace:madness::constants
electron_magnetic_moment	src/madness/constants.h	/^        const double electron_magnetic_moment = -928.476377e-26 ; \/\/    0.000023e-26        J T^-1$/;"	m	namespace:madness::constants
electron_magnetic_moment_anomaly	src/madness/constants.h	/^        const double electron_magnetic_moment_anomaly =  1.15965218111e-3 ; \/\/ 0.00000000074e-3  $/;"	m	namespace:madness::constants
electron_magnetic_moment_to_Bohr_magneton_ratio	src/madness/constants.h	/^        const double electron_magnetic_moment_to_Bohr_magneton_ratio =  -1.00115965218111 ; \/\/ 0.000000000000 74  $/;"	m	namespace:madness::constants
electron_magnetic_moment_to_nuclear_magneton_ratio	src/madness/constants.h	/^        const double electron_magnetic_moment_to_nuclear_magneton_ratio = -1838.28197092 ; \/\/     0.00000080          $/;"	m	namespace:madness::constants
electron_mass	src/madness/constants.h	/^        const double electron_mass = 9.10938215e-31 ; \/\/    0.00000045e-31     kg$/;"	m	namespace:madness::constants
electron_proton_mass_ratio	src/madness/constants.h	/^        const double electron_proton_mass_ratio = 5.4461702177e-4 ; \/\/   0.0000000024e-4    $/;"	m	namespace:madness::constants
electron_volt	src/madness/constants.h	/^        const double electron_volt = 1.602176487e-19 ; \/\/   0.000000040e-19    J$/;"	m	namespace:madness::constants
electron_volt_hartree_relationship	src/madness/constants.h	/^        const double electron_volt_hartree_relationship = 3.674932540e-2 ; \/\/     0.000000092e-2     E_h$/;"	m	namespace:madness::constants
electron_volt_hertz_relationship	src/madness/constants.h	/^        const double electron_volt_hertz_relationship = 2.417989454e14 ; \/\/     0.000000060 e14     Hz$/;"	m	namespace:madness::constants
electron_volt_joule_relationship	src/madness/constants.h	/^        const double electron_volt_joule_relationship = 1.602176487e-19 ; \/\/   0.000000040e-19    J$/;"	m	namespace:madness::constants
electronic_charge_function	src/examples/colloid.cc	/^double electronic_charge_function(const coord_3d& r) {$/;"	f
electronic_charge_function	src/examples/svpe.cc	/^double electronic_charge_function(const coord_3d& r) {$/;"	f
elem	src/madness/external/elemental/include/elemental/blas-like/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Adjoint.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Axpy.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/AxpyTriangle.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Conjugate.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Copy.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/DiagonalScale.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/DiagonalScaleTrapezoid.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/DiagonalSolve.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Dot.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Dotu.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/EntrywiseMap.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Hadamard.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/HilbertSchmidt.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/MakeHermitian.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/MakeReal.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/MakeSymmetric.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTrapezoidal.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/MakeTriangular.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Max.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/MaxAbs.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Min.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/MinAbs.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Nrm2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalScale.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/QuasiDiagonalSolve.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Scale.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/ScaleTrapezoid.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/SetDiagonal.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Swap.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Inv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Scale.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Symmetric2x2Solve.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Transpose.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/UpdateDiagonal.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level1/Zero.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv/N.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv/T.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Ger.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Geru.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Hemv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Her.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Her2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Symv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/L.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/U.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Syr.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Syr2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Trmv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Trr.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Trr2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/LN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/LT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/UN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/UT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Hemm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Her2k.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Herk.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Symm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LL.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LU.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RL.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RU.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/LN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/LT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/UN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/UT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/LN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/LT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/UN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/UT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/LVar1.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/UVar1.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/Unblocked.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RLN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RLT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RUN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RUT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trstrm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trstrm/LLN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/LVar1.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/UVar1.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/Unblocked.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar1.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar4.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar5.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar1.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar4.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar5.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar1.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar3.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar4.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar5.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar1.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar3.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar4.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar5.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/control/Lyapunov.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/control/Ricatti.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/control/Sylvester.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/control/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/BasisPursuit.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/Clip.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/Covariance.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/LinearProgram.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/LogBarrier.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/LogDetDiv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/QuadraticProgram.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/SVT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/SVT/Cross.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/SVT/Normal.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/SVT/PivotedQR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/SVT/TSQR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/SoftThreshold.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/SparseInvCov.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/convex/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/forward_decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/DistMatrix/forward_decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/Matrix.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/Matrix/forward_decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/Memory.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/Timer/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/Timer/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/environment/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/imports/blas.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/imports/flame.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/imports/lapack.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/imports/scalapack.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/indexing/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/indexing/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/random/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/random/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/types/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/views/Partition.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/views/Repartition.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/views/SlidePartition.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/core/views/View.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/ComplexDisplayWindow-premoc.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Display.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/DisplayWidget/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/DisplayWindow-premoc.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Print.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Read.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Read/Ascii.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Read/AsciiMatlab.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Read/Binary.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Read/BinaryFlat.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Read/MatrixMarket.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Spy.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/SpyWidget/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/SpyWidget/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/SpyWindow/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Write.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Write/Ascii.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Write/AsciiMatlab.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Write/Binary.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Write/BinaryFlat.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Write/Image.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/Write/MatrixMarket.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/io/impl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/Apply.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/L.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LPan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/LUnb.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/U.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UPan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Bidiag/UUnb.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/HermitianTridiag/ApplyQ.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/ApplyQ.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/L.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/LPan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/LUnb.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/U.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/UPan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/UUnb.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianEig/SDC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianGenDefiniteEig.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig/Sort.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/SVD.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Chan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/GolubReinsch.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Util.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/CheckReal.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/InverseFreeSDC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QuasiTriangEig.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/RealToComplex.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/SkewHermitianEig.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Square.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/SolveAfter.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Pivoted.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UVar3Square.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/GQR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/GRQ.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/ID.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Inertia.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/MultiplyAfter.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/SolveAfter.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Var3.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/ApplyQ.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Explicit.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Householder.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/PanelHouseholder.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/SolveAfter.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LU.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Full.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Local.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Mod.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Panel.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/SolveAfter.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/QR.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/ApplyQ.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Cholesky.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Explicit.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Householder.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/PanelHouseholder.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/SolveAfter.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/ApplyQ.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Cholesky.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Householder.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/PanelHouseholder.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/SolveAfter.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/Skeleton.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/HermitianFunction.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General/LUPartialPiv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyLVar2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyUVar2.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Hermitian.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Symmetric.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/LVar3.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/UVar3.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Pseudoinverse.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/funcs/decl.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyColPivots.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplyRowPivots.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/ApplySymmetricPivots.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/ExplicitPermutation.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/InvertPermutation.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteCols.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/PermuteRows.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/PivotsToPartialPermutation.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/perm/PivotsToPermutation.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Condition.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Frobenius.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Infinity.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Max.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/One.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Condition/Two.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/Cholesky.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/LUPartialPiv.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Inertia.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Entrywise.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/EntrywiseOne.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Frobenius.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Infinity.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/KyFan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Max.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Nuclear.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/One.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Schatten.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Two.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/TwoEstimate.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Norm/Zero.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Analytic.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRA.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRL.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Lanczos.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Power.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/props/Trace.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/solve/GLM.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/solve/GaussianElimination.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/solve/HPDSolve.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/solve/HermitianSolve.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/solve/LSE.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/solve/LeastSquares.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/solve/MultiShiftHessSolve.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/solve/SymmetricSolve.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLHB.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLHF.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLVB.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LLVF.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUHB.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUHF.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUVB.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/LUVF.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLHB.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLHF.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLVB.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RLVF.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUHB.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUHF.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUVB.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/RUVF.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ApplyPackedReflectors/Util.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ExpandPackedReflectors.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/ExpandPackedReflectors/LV.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Col.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Row.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/Median.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/PermutationParity.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/PivotParity.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Col.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Row.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/lapack-like/util/Sort.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/BullsHead.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Cauchy.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/CauchyLike.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Circulant.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Demmel.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Diagonal.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Egorov.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/ExtendedKahan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Fiedler.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Forsythe.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Fourier.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/FoxLi.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/GCDMatrix.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/GKS.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Gaussian.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Gear.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Grcar.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Haar.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Hankel.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Hanowa.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/HatanoNelson.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Helmholtz.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/HelmholtzPML.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/HermitianFromEVD.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/HermitianUniformSpectrum.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Hilbert.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Identity.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Jordan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/KMS.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Kahan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Laplacian.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Lauchli.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Legendre.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Lehmer.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Lotkin.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/MinIJ.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/NormalFromEVD.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/NormalUniformSpectrum.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/OneTwoOne.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Ones.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Parter.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Pei.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Redheffer.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Riemann.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Ris.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Toeplitz.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Trefethen.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/TriW.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Triangle.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Uniform.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/UniformHelmholtzGreens.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Walsh.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Whale.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Wigner.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Wilkinson.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/include/elemental/matrices/Zeros.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/blas-like/Trr2k/Local.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/NNNN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/NNNT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/NNTN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/NNTT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/NTNN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/NTNT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/NTTN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/NTTT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/TNNN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/TNNT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/TNTN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/TNTT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/TTNN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/TTNT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/TTTN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trr2k/TTTT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trrk.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trrk/NN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trrk/NT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trrk/TN.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/blas-like/Trrk/TT.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/core/Matrix.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/Memory.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/global.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/imports/blas.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/imports/flame.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/imports/lapack.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/imports/mpi.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/imports/pmrrr.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/core/mpi_register.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/io/ColorMap.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/io/ComplexDisplayWindow.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/io/DisplayWindow.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/io/SpyWindow.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/lapack-like/HermitianTridiag.cpp	/^namespace elem {$/;"	n	file:
elem	src/madness/external/elemental/src/lapack-like/HermitianTridiag/L.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LPan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LPanSquare.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LSquare.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/lapack-like/HermitianTridiag/U.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/lapack-like/HermitianTridiag/UPan.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/lapack-like/HermitianTridiag/UPanSquare.hpp	/^namespace elem {$/;"	n
elem	src/madness/external/elemental/src/lapack-like/HermitianTridiag/USquare.hpp	/^namespace elem {$/;"	n
elemInitializedMpi	src/madness/external/elemental/src/core/global.cpp	/^bool elemInitializedMpi = false;$/;"	m	namespace:__anon33	file:
elemInitializedQt	src/madness/external/elemental/src/core/global.cpp	/^bool elemInitializedQt = false;$/;"	m	namespace:__anon33	file:
elemOpenedWindow	src/madness/external/elemental/src/core/global.cpp	/^bool elemOpenedWindow = false;$/;"	m	namespace:__anon33	file:
element_type	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  typedef T element_type;$/;"	t	class:testing::internal::linked_ptr
element_type	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef T element_type;$/;"	t	class:testing::internal::scoped_ptr
element_type	src/madness/external/muParser/muParserFixes.h	/^    typedef _Ty element_type;$/;"	t	class:std::_my_auto_ptr
elementary_charge	src/madness/constants.h	/^        const double elementary_charge = 1.602176487e-19 ; \/\/    0.000000040e-19    C$/;"	m	namespace:madness::constants
elements	src/apps/moldft/moldx.py	/^elements = range(104)$/;"	v
elements	src/apps/polar/moldx.py	/^elements = range(104)$/;"	v
empty	src/apps/chem/CCStructures.h	/^    bool empty()const{$/;"	f	struct:madness::Pairs
empty	src/apps/chem/PNOStructures.h	/^	bool empty()const{$/;"	f	struct:madness::PNOPairs
empty	src/madness/external/muParser/muParserStack.h	/^      bool empty() const$/;"	f	class:mu::ParserStack
empty	src/madness/external/tinyxml/tinystr.h	/^	bool empty () const { return rep_->size == 0; }$/;"	f	class:TiXmlString
empty	src/madness/mra/function_factory.h	/^    empty() {$/;"	f	class:madness::FunctionFactory
empty	src/madness/world/dqueue.h	/^        bool empty() const {$/;"	f	class:madness::DQueue
empty	src/madness/world/group.h	/^        bool empty() const { return !pimpl_; }$/;"	f	class:madness::Group
empty	src/madness/world/range.h	/^        bool empty() const { return n==0; }$/;"	f	class:madness::Range
empty	src/madness/world/stack.h	/^        bool empty() const volatile { return ! size_; }$/;"	f	class:madness::Stack
empty	src/madness/world/stack.h	/^        bool empty() const { return ! size_; }$/;"	f	class:madness::Stack
empty	src/madness/world/vector.h	/^        bool empty() const { return data_.empty(); }$/;"	f	class:madness::Vector
empty	src/madness/world/worldref.h	/^            bool empty() const { return ! pimpl_; }$/;"	f	class:madness::detail::RemoteCounter
empty_hook	src/madness/world/parsec.cc	/^        static dague_hook_return_t empty_hook (dague_execution_unit_t *eu, $/;"	f	file:
empty_workQ	src/madness/external/elemental/external/pmrrr/src/plarrv.c	/^void *empty_workQ(void *argin)$/;"	f	file:
emul	src/madness/tensor/lowranktensor.h	/^    LowRankTensor<T>& emul(const LowRankTensor<T>& other) {$/;"	f	class:madness::LowRankTensor
emul	src/madness/tensor/srconf.h	/^        SRConf<T>& emul(const SRConf<T>& other) {$/;"	f	class:madness::SRConf
emul	src/madness/tensor/tensor.h	/^        Tensor<T>& emul(const Tensor<T>& t) {$/;"	f	class:madness::Tensor
emul	src/madness/tensor/tensortrain.h	/^        TensorTrain<T>& emul(const TensorTrain<T>& other) {$/;"	f	class:madness::TensorTrain
encoding	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration
end	src/apps/chem/nemo.h	/^	    void end(const std::string msg) {$/;"	f	struct:madness::Nemo::timer
end	src/apps/chem/test_utilities.h	/^	bool end(bool success) {$/;"	f	struct:madness::test_output
end	src/apps/chem/znemo.h	/^	    void end(const std::string msg) {$/;"	f	struct:madness::Znemo::timer
end	src/apps/hf/esolver.h	/^  unsigned int end;$/;"	m	struct:KPoint
end	src/examples/compiler/mra-driver.hh	/^    const_iterator end() const {$/;"	f	class:Exp
end	src/examples/compiler/mra-driver.hh	/^    iterator end() {$/;"	f	class:Exp
end	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        end;$/;"	m	struct:__anon15
end	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        end;$/;"	m	struct:__anon16
end	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        end;$/;"	m	struct:__anon17
end	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  const_iterator end() const { return array_ + size_; }$/;"	f	class:testing::internal::NativeArray
end	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  iterator end() const { return iterator(impl_->End()); }$/;"	f	class:testing::internal::ParamGenerator
end	src/madness/mra/funcplot.h	/^    	coordT start, end;$/;"	m	struct:madness::trajectory
end	src/madness/tensor/slice.h	/^        long end;$/;"	m	class:madness::Slice
end	src/madness/tensor/tensor.h	/^        const TensorIterator<T>& end() const {$/;"	f	class:madness::Tensor
end	src/madness/world/group.h	/^            static typename vectorT::const_iterator end(const vectorT &v) {$/;"	f	class:madness::Group::Impl
end	src/madness/world/range.h	/^        const iterator& end() const { return finish; }$/;"	f	class:madness::Range
end	src/madness/world/thread.cc	/^    void ThreadPool::end() {$/;"	f	class:madness::ThreadPool
end	src/madness/world/vector.h	/^        const_iterator end() const { return data_.end(); }$/;"	f	class:madness::Vector
end	src/madness/world/vector.h	/^        iterator end() { return data_.end(); }$/;"	f	class:madness::Vector
end	src/madness/world/worlddc.h	/^        const_iterator end() const {$/;"	f	class:madness::WorldContainer
end	src/madness/world/worlddc.h	/^        const_iterator end() const {$/;"	f	class:madness::WorldContainerImpl
end	src/madness/world/worlddc.h	/^        iterator end() {$/;"	f	class:madness::WorldContainer
end	src/madness/world/worlddc.h	/^        iterator end() {$/;"	f	class:madness::WorldContainerImpl
end	src/madness/world/worldhashmap.h	/^        const_iterator end() const {$/;"	f	class:madness::ConcurrentHashMap
end	src/madness/world/worldhashmap.h	/^        iterator end() {$/;"	f	class:madness::ConcurrentHashMap
end	src/madness/world/worldrmi.h	/^        static void end() {$/;"	f	class:madness::RMI
end10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T10>::iterator end10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  const T end_;$/;"	m	class:testing::internal::RangeGenerator
end_cpu	src/apps/chem/CCStructures.h	/^    double end_cpu;$/;"	m	struct:madness::CCTimer
end_index_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  const int end_index_;$/;"	m	class:testing::internal::RangeGenerator
end_iteration_hook	src/apps/chem/distpm.cc	/^    void end_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:madness::SystolicFixOrbitalOrders
end_iteration_hook	src/apps/chem/distpm.cc	/^    void end_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:madness::SystolicPMOrbitalLocalize
end_iteration_hook	src/apps/ii/eigen_solver.cc	/^void SystolicEigensolver<T>::end_iteration_hook(const TaskThreadEnv &env) {$/;"	f	class:SystolicEigensolver
end_iteration_hook	src/apps/ii/systolic.h	/^        virtual void end_iteration_hook(const TaskThreadEnv& env) {}$/;"	f	class:madness::SystolicMatrixAlgorithm
end_iteration_hook	src/apps/ii/systolic.h	/^    void LocalizeBoys<T>::end_iteration_hook(const TaskThreadEnv& env)$/;"	f	class:madness::LocalizeBoys
end_iteration_hook	src/apps/ii/testsystolic.cc	/^    void end_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:SystolicEigensolver
end_iteration_hook	src/apps/polar/distpm.cc	/^    void end_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:SystolicFixOrbitalOrders
end_iteration_hook	src/apps/polar/distpm.cc	/^    void end_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:SystolicPMOrbitalLocalize
end_iteration_hook	src/madness/tensor/systolic.h	/^        virtual void end_iteration_hook(const TaskThreadEnv& env) {}$/;"	f	class:madness::SystolicMatrixAlgorithm
end_papi_measurement	src/madness/world/worldpapi.cc	/^    void end_papi_measurement() {$/;"	f	namespace:madness
end_prec	src/apps/chem/SCFProtocol.h	/^    double end_prec;        \/\/\/< final precision$/;"	m	class:madness::SCFProtocol
end_timer	src/apps/adrian/TDDFT.cc	/^static void end_timer(World &world, const char *msg) {$/;"	f	file:
end_timer	src/apps/adrian/TDHF.cc	/^static void end_timer(World& world,$/;"	f	file:
end_timer	src/apps/adrian/TDHF2.cc	/^static void end_timer(World& world,$/;"	f	file:
end_timer	src/apps/bryan/TDHF.cc	/^static void end_timer(World& world,$/;"	f	file:
end_timer	src/apps/bryan/TDHF2.cc	/^static void end_timer(World& world,$/;"	f	file:
end_wall	src/apps/chem/CCStructures.h	/^    double end_wall;$/;"	m	struct:madness::CCTimer
energies	src/apps/adrian/ESInterface.h	/^  const madness::Tensor<double> &energies; \/\/\/< Publically accessible list of alpha MO energies.$/;"	m	class:slymer::ES_Interface
energies	src/apps/adrian/GroundParameters.h	/^      Tensor<double> energies;                 \/\/\/< Energy of ground state orbitals$/;"	m	struct:madness::GroundParameters
energies	src/apps/bryan/ESInterface.h	/^  const madness::Tensor<double> &energies; \/\/\/< Publically accessible list of alpha MO energies.$/;"	m	class:slymer::ES_Interface
energies	src/apps/bryan/GroundParameters.h	/^      Tensor<double> energies;                 \/\/\/< Energy of ground state orbitals$/;"	m	struct:madness::GroundParameters
energies	src/apps/chem/PNOStructures.h	/^	PairEnergies energies;							\/\/\/< all Pair Energies$/;"	m	struct:madness::PNOPairs
energy	src/apps/chem/PNOStructures.h	/^	double energy=0.0; \/\/\/<total correlation energy (regularized Energy for f12 calculation)$/;"	m	struct:madness::PairEnergies
energy	src/apps/nick/extra.cc	/^double energy(World& world, const Function<T,3>& psi, const Function<T,3>& potn) {$/;"	f
energy	src/apps/nick/parse.py	/^energy  = []$/;"	v
energy	src/apps/nick/tdse1.cc	/^double energy(World& world, const complex_functionT& psi, const functionT& potn) {$/;"	f
energy	src/apps/tdse/tdse.cc	/^double energy(World& world, const Function<T,3>& psi, const functionT& potn) {$/;"	f
energy	src/apps/tdse/tdse.confused.cc	/^double energy(World& world, const Function<T,3>& psi, const functionT& potn) {$/;"	f
energy	src/apps/tdse/tdse4.cc	/^double energy(World& world, const Function<T,4>& psi, const functionT& pote, const functionT& potn, const functionT& potf) {$/;"	f
energy	src/examples/3dharmonic.cc	/^double energy(World& world, const real_function_3d& phi, const real_function_3d& V) {$/;"	f
energy	src/examples/derivatives.cc	/^double (*energy)() = gaussian_energy;$/;"	v
energy	src/examples/he.cc	/^double energy(World& world, const real_function_6d& psi) {$/;"	f
energy	src/examples/tdse_example.cc	/^double energy(World& world, const Function<T,3>& psi, const functionT& potn) {$/;"	f
energy	src/madness/mra/testqm.cc	/^double energy(World& world, const complex_function_1d& v, const complex_function_1d& psi) {$/;"	f
energyFile	src/apps/nick/parse.py	/^energyFile = open("energy.dat",    'w')$/;"	v
energy_and_gradient	src/apps/chem/SCF.h	/^	void energy_and_gradient(const Molecule& molecule, double& energy, Tensor<double>& gradient) {$/;"	f	class:madness::MolecularEnergy
energy_change	src/apps/chem/zcis.h	/^		double energy_change=1.e3;		\/\/ last energy_change$/;"	m	struct:madness::Zcis::root
energy_exact	src/examples/tdse1d.cc	/^static const double energy_exact = -6.188788775728796797594788; \/\/ From Maple$/;"	v	file:
energy_exact	src/examples/testspectralprop.cc	/^static const double energy_exact = -6.188788775728796797594788; \/\/ From Maple$/;"	v	file:
energy_f12	src/apps/chem/PNOStructures.h	/^	double energy_f12=0.0; \/\/\/< total f12 correlation energy$/;"	m	struct:madness::PairEnergies
energy_precision	src/apps/chem/molopt.h	/^        const double energy_precision; \/\/< Assumed precision in energy$/;"	m	class:madness::MolOpt
energytype	src/apps/chem/PNO.h	/^	EnergyType energytype()const{return ( (param.f12() and f12.param.energytype()==PROJECTED_ENERGYTYPE) ? PROJECTED_ENERGYTYPE : HYLLERAAS_ENERGYTYPE);}$/;"	f	class:madness::PNO
energytype	src/apps/chem/PNOParameters.h	/^	EnergyType energytype()const {$/;"	f	class:madness::F12Parameters
enforce_bc	src/madness/mra/derivative.h	/^        static bool enforce_bc(int bc_left, int bc_right, Level n, Translation& l) {$/;"	f	class:madness::DerivativeBase
enforce_bc	src/madness/mra/mraimpl.h	/^    static inline bool enforce_bc(bool is_periodic, Level n, Translation& l) {$/;"	f	namespace:madness
enter	src/madness/world/worldmutex.h	/^        bool enter(const int id) {$/;"	f	class:madness::Barrier
entity	src/madness/external/tinyxml/tinyxml.h	/^	static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase
entity	src/madness/external/tinyxml/tinyxmlparser.cc	/^TiXmlBase::Entity TiXmlBase::entity[ NUM_ENTITY ] = $/;"	m	class:TiXmlBase	file:
entry	src/madness/world/worldhashmap.h	/^            entry(const datumT& datum, entry<keyT,valueT>* next)$/;"	f	class:madness::Hash_private::entry
entry	src/madness/world/worldhashmap.h	/^            entryT* entry;          \/\/ Current entry in bin ... zero means at end$/;"	m	class:madness::Hash_private::HashIterator
entry	src/madness/world/worldhashmap.h	/^            entryT* entry;$/;"	m	class:madness::Hash_private::HashAccessor
entry	src/madness/world/worldhashmap.h	/^        class entry : public madness::MutexReaderWriter {$/;"	c	namespace:madness::Hash_private
entryT	src/madness/world/worldhashmap.h	/^                    typename hashT::entryT>::type entryT;$/;"	t	class:madness::Hash_private::HashAccessor
entryT	src/madness/world/worldhashmap.h	/^                    typename hashT::entryT>::type entryT;$/;"	t	class:madness::Hash_private::HashIterator
entryT	src/madness/world/worldhashmap.h	/^            typedef entry<keyT,valueT> entryT;$/;"	t	class:madness::Hash_private::bin
entryT	src/madness/world/worldhashmap.h	/^        typedef Hash_private::entry<keyT,valueT> entryT;$/;"	t	class:madness::ConcurrentHashMap
enum_chi_aa	src/apps/chem/xcfunctional.h	/^        enum_chi_aa=22,         \/\/\/< \\f$ \\chi_{aa} = \\nabla \\zeta_{\\alpha}.\\nabla \\zeta_{\\alpha} \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_chi_ab	src/apps/chem/xcfunctional.h	/^        enum_chi_ab=23,         \/\/\/< \\f$ \\chi_{ab} = \\nabla \\zeta_{\\alpha}.\\nabla \\zeta_{\\beta} \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_chi_bb	src/apps/chem/xcfunctional.h	/^        enum_chi_bb=24,         \/\/\/< \\f$ \\chi_{bb} = \\nabla \\zeta_{\\beta}.\\nabla \\zeta_{\\beta} \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_ddens_ptx	src/apps/chem/xcfunctional.h	/^        enum_ddens_ptx=25,      \/\/\/< \\f$ \\nabla\\rho_{pt}\\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_ddens_pty	src/apps/chem/xcfunctional.h	/^        enum_ddens_pty=26,      \/\/\/< \\f$ \\nabla\\rho_{pt}\\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_ddens_ptz	src/apps/chem/xcfunctional.h	/^        enum_ddens_ptz=27       \/\/\/< \\f$ \\nabla\\rho_{pt}\\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_rho_pt	src/apps/chem/xcfunctional.h	/^        enum_rho_pt=2,          \/\/\/< perturbed density (CPHF, TDKS) \\f$ \\rho_{pt} \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_rhoa	src/apps/chem/xcfunctional.h	/^        enum_rhoa=0,            \/\/\/< alpha density \\f$ \\rho_\\alpha \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_rhob	src/apps/chem/xcfunctional.h	/^        enum_rhob=1,            \/\/\/< beta density \\f$ \\rho_\\beta \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_saa	src/apps/chem/xcfunctional.h	/^        enum_saa=10,            \/\/\/< \\f$ \\sigma_{aa} = \\nabla \\rho_{\\alpha}.\\nabla \\rho_{\\alpha} \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_sab	src/apps/chem/xcfunctional.h	/^        enum_sab=11,            \/\/\/< \\f$ \\sigma_{ab} = \\nabla \\rho_{\\alpha}.\\nabla \\rho_{\\beta} \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_sbb	src/apps/chem/xcfunctional.h	/^        enum_sbb=12,            \/\/\/< \\f$ \\sigma_{bb} = \\nabla \\rho_{\\beta}.\\nabla \\rho_{\\beta} \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_sigma_pta_div_rho	src/apps/chem/xcfunctional.h	/^        enum_sigma_pta_div_rho=14,      \/\/\/< \\f$ \\zeta_{\\alpha}.\\nabla\\rho_{pt} \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_sigma_ptb_div_rho	src/apps/chem/xcfunctional.h	/^        enum_sigma_ptb_div_rho=15,      \/\/\/< \\f$ \\zeta_{\\beta}.\\nabla\\rho_{pt} \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_sigtot	src/apps/chem/xcfunctional.h	/^        enum_sigtot=13,         \/\/\/< \\f$ \\sigma = \\nabla \\rho.\\nabla \\rho \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_zetaa_x	src/apps/chem/xcfunctional.h	/^        enum_zetaa_x=16,        \/\/\/< \\f$ \\zeta_{a,x}=\\partial\/{\\partial x} \\ln(\\rho_a)  \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_zetaa_y	src/apps/chem/xcfunctional.h	/^        enum_zetaa_y=17,        \/\/\/< \\f$ \\zeta_{a,y}=\\partial\/{\\partial y} \\ln(\\rho_a)  \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_zetaa_z	src/apps/chem/xcfunctional.h	/^        enum_zetaa_z=18,        \/\/\/< \\f$ \\zeta_{a,z}=\\partial\/{\\partial z} \\ln(\\rho_a)  \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_zetab_x	src/apps/chem/xcfunctional.h	/^        enum_zetab_x=19,        \/\/\/< \\f$ \\zeta_{b,x} = \\partial\/{\\partial x} \\ln(\\rho_b)  \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_zetab_y	src/apps/chem/xcfunctional.h	/^        enum_zetab_y=20,        \/\/\/< \\f$ \\zeta_{b,y} = \\partial\/{\\partial y} \\ln(\\rho_b)  \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
enum_zetab_z	src/apps/chem/xcfunctional.h	/^        enum_zetab_z=21,        \/\/\/< \\f$ \\zeta_{b,z} = \\partial\/{\\partial z} \\ln(\\rho_b)  \\f\$$/;"	e	enum:madness::XCfunctional::xc_arg
environ	src/madness/external/gtest/src/gtest-death-test.cc	/^extern "C" char** environ;$/;"	m	namespace:testing::internal	file:
environments	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::vector<Environment*>& environments() { return environments_; }$/;"	f	class:testing::internal::UnitTestImpl
environments_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::vector<Environment*> environments_;$/;"	m	class:testing::internal::UnitTestImpl
eomSendRequests_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    std::vector<mpi::Request> eomSendRequests_;$/;"	m	class:elem::AxpyInterface
eprec	src/apps/chem/corepotential.h	/^    double eprec, rcut0, rcut;$/;"	m	struct:madness::CorePotential
eprec	src/apps/chem/correlationfactor.h	/^    double eprec;$/;"	m	class:madness::PseudoNuclearCorrelationFactor
eprec	src/apps/chem/molecule.h	/^    double eprec;              \/\/ Error in energy\/atom due to smoothing$/;"	m	class:madness::Molecule
eprec	src/apps/chem/test_MolecularOrbitals.cc	/^    double eprec=1.e-6;$/;"	m	struct:write_test_input	file:
eprec	src/apps/chem/test_SCFOperators.cc	/^    double eprec=FunctionDefaults<3>::get_thresh()*0.1;$/;"	m	struct:write_test_input	file:
eprec	src/apps/chem/test_qc.cc	/^    double eprec=1.e-6;$/;"	m	struct:write_test_input	file:
eprec	src/apps/moldft/mcpfit.cc	/^    double eprec;   \/\/\/< precision of smoothing parameter$/;"	m	struct:CalculationParameters	file:
eprec	src/apps/polar/corepotential.h	/^    double eprec, rcut0, rcut;$/;"	m	struct:CorePotential
eprec	src/apps/polar/mcpfit.cc	/^    double eprec;   \/\/\/< precision of smoothing parameter$/;"	m	struct:CalculationParameters	file:
eprec	src/apps/polar/molecule.h	/^    double eprec;              \/\/ Error in energy\/atom due to smoothing$/;"	m	class:Molecule
eprec_	src/apps/chem/correlationfactor.h	/^	double eprec_;$/;"	m	class:madness::Slater
eprec_	src/apps/chem/correlationfactor.h	/^    double eprec_;$/;"	m	class:madness::poly4erfc
eprec_param	src/apps/chem/correlationfactor.h	/^    double eprec_param() const {return eprec_;}$/;"	f	class:madness::Slater
eprec_param	src/apps/chem/correlationfactor.h	/^    double eprec_param() const {return eprec_;}$/;"	f	class:madness::poly4erfc
eps	src/apps/chem/MolecularOrbitals.h	/^	Tensor<double> eps;$/;"	m	class:madness::MolecularOrbitals
eps	src/apps/chem/SCFOperators.h	/^    double eps;$/;"	m	class:madness::Laplacian
eps	src/apps/chem/test_correlation_factor.h	/^	const double eps;$/;"	m	struct:test_correlation_factor
eps	src/apps/interior_bc/test_problems.h	/^        double penalty_prefact, eps;$/;"	m	class:EmbeddedDirichlet
eps	src/apps/nick/spawnK.py	/^eps = 0.001$/;"	v
eps	src/madness/mra/test_mra6.cc	/^        double eps;$/;"	m	class:__anon12::BinaryGenTest	file:
eps	src/madness/mra/test_mra6.cc	/^        double eps;$/;"	m	class:__anon12::UnaryGenTest	file:
eps	src/madness/mra/test_mra6.cc	/^    double eps=1.e-4;$/;"	m	namespace:__anon12	file:
eps	src/madness/mra/tools/longfloat.py	/^    def eps(self):$/;"	m	class:longfloat
eps	src/madness/tensor/test_gentensor.cc	/^        double eps;$/;"	m	class:__anon43::BinaryGenTest	file:
eps	src/madness/tensor/test_gentensor.cc	/^        double eps;$/;"	m	class:__anon43::UnaryGenTest	file:
eps	src/madness/tensor/test_gentensor.cc	/^    double eps=1.e-4;$/;"	m	namespace:__anon43	file:
eps_ext	src/examples/siam_example.cc	/^const double eps_ext =10.0; \/\/\/< Exterior dielectric.$/;"	v
eps_int	src/examples/siam_example.cc	/^const double eps_int = 1.0; \/\/\/< Interior dielectric.$/;"	v
epsf	src/apps/polar/moldft.cc	/^    double epsf;          \/\/\/< eps for finite field polarizability$/;"	m	struct:CalculationParameters	file:
epsilon	src/examples/gygi_soltion.cc	/^  const double& epsilon; \/\/assyptotic value of the dielectric functional$/;"	m	class:GygiPot	file:
epsilon	src/examples/gygi_soltion.cc	/^const double epsilon = 78.304;$/;"	v
epsilon	src/madness/mra/sdf_domainmask.h	/^        const double epsilon; \/\/\/< The width of the transition region$/;"	m	class:madness::GaussianDomainMask
epsilon	src/madness/mra/sdf_domainmask.h	/^        const double epsilon; \/\/\/< The width of the transition region$/;"	m	class:madness::LLRVDomainMask
epsilon_0	src/examples/dielectric.cc	/^const double epsilon_0 = 1.0; \/\/ Interior dielectric$/;"	v
epsilon_0	src/examples/dielectric_external_field.cc	/^const double epsilon_0 = 100.0; \/\/ Interior dielectric$/;"	v
epsilon_0	src/examples/svpe.cc	/^    const double epsilon_0;             \/\/< Interior dielectric$/;"	m	class:SVPESolver	file:
epsilon_0	src/examples/svpe.cc	/^const double epsilon_0 = 1.0; \/\/ Interior dielectric$/;"	v
epsilon_1	src/examples/dielectric.cc	/^const double epsilon_1 =10.0; \/\/ Exterior dielectric$/;"	v
epsilon_1	src/examples/dielectric_external_field.cc	/^const double epsilon_1 =   1.0; \/\/ Exterior dielectric$/;"	v
epsilon_1	src/examples/svpe.cc	/^    const double epsilon_1;             \/\/< Exterior dielectric$/;"	m	class:SVPESolver	file:
epsilon_1	src/examples/svpe.cc	/^const double epsilon_1 = 78.3600; \/\/ Exterior dielectric$/;"	v
epsilon_rho	src/examples/gygi_soltion.cc	/^  realfunc epsilon_rho()const {$/;"	f	class:GygiPot
epslon	src/apps/moldft/fci/rsg.f	/^      double precision function epslon /;"	f
erase	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::erase(const Level& max_level) {$/;"	f	class:madness::FunctionImpl
erase	src/madness/world/worlddc.h	/^        void erase(InIter first, InIter last) {$/;"	f	class:madness::WorldContainerImpl
erase	src/madness/world/worlddc.h	/^        void erase(InIter it) {$/;"	f	class:madness::WorldContainerImpl
erase	src/madness/world/worlddc.h	/^        void erase(const iterator& it) {$/;"	f	class:madness::WorldContainer
erase	src/madness/world/worlddc.h	/^        void erase(const iterator& start, const iterator& finish) {$/;"	f	class:madness::WorldContainer
erase	src/madness/world/worlddc.h	/^        void erase(const keyT& key) {$/;"	f	class:madness::WorldContainer
erase	src/madness/world/worlddc.h	/^        void erase(const keyT& key) {$/;"	f	class:madness::WorldContainerImpl
erase	src/madness/world/worldhashmap.h	/^        std::size_t erase(const keyT& key) {$/;"	f	class:madness::ConcurrentHashMap
erase	src/madness/world/worldhashmap.h	/^        void erase(accessor& item) {$/;"	f	class:madness::ConcurrentHashMap
erase	src/madness/world/worldhashmap.h	/^        void erase(const iterator& it) {$/;"	f	class:madness::ConcurrentHashMap
erase	src/madness/world/worldhashmap.h	/^        void erase(const_accessor& item) {$/;"	f	class:madness::ConcurrentHashMap
erf	src/apps/nick/mpreal.h	/^inline const mpreal erf (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
erfc	src/apps/nick/mpreal.h	/^inline const mpreal erfc (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
eri	src/examples/he.cc	/^    real_function_6d eri;$/;"	m	class:YetAnotherWrapperClass	file:
eri	src/examples/helium_mp2.cc	/^    real_function_6d eri;$/;"	m	class:YetAnotherWrapperClass	file:
eri	src/madness/mra/funcimpl.h	/^          const implT* eri;		\/\/\/< 2-particle potential, must be on-demand$/;"	m	struct:madness::FunctionImpl::Vphi_op_NS
eri_values	src/madness/mra/funcimpl.h	/^          tensorT eri_values(const keyT& key) const {$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
err	src/apps/adrian/ESInterface.h	/^  std::reference_wrapper<std::ostream> err; \/\/\/< Output stream for messages.$/;"	m	class:slymer::ES_Interface
err	src/apps/bryan/ESInterface.h	/^  std::reference_wrapper<std::ostream> err; \/\/\/< Output stream for messages.$/;"	m	class:slymer::ES_Interface
err	src/apps/nick/interp.h	/^    double err(fredT f) const {$/;"	f	class:CubicInterpolationTable
err	src/madness/misc/interpolation_1d.h	/^    double err(const functionT& f) const {$/;"	f	class:CubicInterpolationTable
err	src/madness/mra/mra.h	/^        double err(const funcT& func) const {$/;"	f	class:madness::Function
err	src/madness/mra/tools/mathutil.py	/^    err = 0.0$/;"	v
err	src/madness/mra/tools/twoscalecoeffs.py	/^        err = 0.0$/;"	v
err_box	src/madness/mra/funcimpl.h	/^        double err_box(const keyT& key, const nodeT& node, const opT& func,$/;"	f	class:madness::FunctionImpl
errmsg	src/madness/world/test_hashthreaded.cc	/^void errmsg(const char *msg, int status) {$/;"	f
error	src/apps/chem/CCStructures.h	/^    void error(World& world,const std::string &msg)const{$/;"	f	struct:madness::CCParameters
error	src/apps/chem/CCStructures.h	/^    void error(const std::string &msg)const{$/;"	f	struct:madness::CCConvolutionOperator
error	src/examples/compiler/mra-driver.cc	/^mra_driver::error (const std::string& m)$/;"	f	class:mra_driver
error	src/examples/compiler/mra-driver.cc	/^mra_driver::error (const yy::location& l, const std::string& m)$/;"	f	class:mra_driver
error	src/madness/external/tinyxml/tinyxml.h	/^	bool error;$/;"	m	class:TiXmlDocument
error	src/madness/tensor/oldtest.cc	/^void error(const char *msg, int code) {$/;"	f
error	src/madness/world/world.cc	/^    void error(const char *msg) {$/;"	f	namespace:madness
error	src/madness/world/world.h	/^    static void error(const char *msg, const T& data) {$/;"	f	namespace:madness
errorDesc	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument
errorId	src/madness/external/tinyxml/tinyxml.h	/^	int  errorId;$/;"	m	class:TiXmlDocument
errorLocation	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument
errorString	src/madness/external/tinyxml/tinyxml.h	/^	static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase
errorString	src/madness/external/tinyxml/tinyxmlerror.cc	/^const char* TiXmlBase::errorString[ TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	file:
error_	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    std::ostream& error_;$/;"	m	class:elem::choice::Args
error_	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    std::ostream& error_;$/;"	m	class:elem::choice::MpiArgs
errsq	src/madness/tensor/gfit.cc	/^double errsq(const Tensor<double> f, $/;"	f
errsq_local	src/madness/mra/funcimpl.h	/^        double errsq_local(const opT& func) const {$/;"	f	class:madness::FunctionImpl
errsq_local	src/madness/mra/mra.h	/^        double errsq_local(const funcT& func) const {$/;"	f	class:madness::Function
eshift	src/examples/tdse1d.cc	/^static const double eshift = 0.0;$/;"	v	file:
eshift	src/examples/testspectralprop.cc	/^static const double eshift = 0.0;$/;"	v	file:
esol	src/apps/polar/moldft.cc	/^    double esol; \/\/etot;$/;"	m	struct:Calculation	file:
est_profile_overhead	src/madness/world/worldprofile.cc	/^      void est_profile_overhead() {$/;"	f	namespace:madness::__anon7
estimate_area	src/examples/smooth.h	/^double estimate_area(double x) {$/;"	f
estimate_costs	src/madness/mra/operator.h	/^        double estimate_costs(const Key<NDIM>& source,$/;"	f	class:madness::SeparatedConvolution
estimate_wavefunction_radius	src/apps/chem/diamagneticpotentialfactor.h	/^	double estimate_wavefunction_radius(const double eps=1.e-8) const {$/;"	f	class:madness::Diamagnetic_potential_factor
eta	src/examples/nonlinschro.cc	/^static double eta = eta_end*1024;   \/\/ Initial value foe eta$/;"	v	file:
eta_end	src/examples/nonlinschro.cc	/^static const double eta_end = 1e-5; \/\/ Target value for eta$/;"	v	file:
etol	src/apps/chem/molopt.h	/^        const double etol;          \/\/< Convergence test for energy change$/;"	m	class:madness::MolOpt
ev	src/madness/mra/tools/mathutil.py	/^    ev = mxm(v,a) $/;"	v
eval	src/apps/chem/corepotential.cc	/^double CoreOrbital::eval(int m, double rsq, double x, double y, double z) const {$/;"	f	class:madness::CoreOrbital
eval	src/apps/chem/corepotential.cc	/^double CorePotential::eval(double r) const {$/;"	f	class:madness::CorePotential
eval	src/apps/chem/molecularbasis.h	/^    double* eval(double rsq, double x, double y, double z, double* bf) const {$/;"	f	class:madness::ContractedGaussianShell
eval	src/apps/chem/molecularbasis.h	/^    double* eval(double x, double y, double z, double* bf) const {$/;"	f	class:madness::AtomicBasis
eval	src/apps/chem/molecularbasis.h	/^    void eval(const Molecule& molecule, double x, double y, double z, double *bf) const {$/;"	f	class:madness::AtomicBasisSet
eval	src/apps/hf/molecularbasis.h	/^    double* eval(double rsq, double x, double y, double z, double* bf) const {$/;"	f	class:ContractedGaussianShell
eval	src/apps/hf/molecularbasis.h	/^    double* eval(double x, double y, double z, double* bf) const {$/;"	f	class:AtomicBasis
eval	src/apps/hf/molecularbasis.h	/^    void eval(const MolecularEntity& mentity, double x, double y, double z, double *bf) const {$/;"	f	class:AtomicBasisSet
eval	src/apps/polar/corepotential.cc	/^double CoreOrbital::eval(int m, double rsq, double x, double y, double z) const {$/;"	f	class:CoreOrbital
eval	src/apps/polar/corepotential.cc	/^double CorePotential::eval(double r) const {$/;"	f	class:CorePotential
eval	src/apps/polar/molecularbasis.h	/^    double* eval(double rsq, double x, double y, double z, double* bf) const {$/;"	f	class:ContractedGaussianShell
eval	src/apps/polar/molecularbasis.h	/^    double* eval(double x, double y, double z, double* bf) const {$/;"	f	class:AtomicBasis
eval	src/apps/polar/molecularbasis.h	/^    void eval(const Molecule& molecule, double x, double y, double z, double *bf) const {$/;"	f	class:AtomicBasisSet
eval	src/madness/mra/mra.h	/^        Future<T> eval(const coordT& xuser) const {$/;"	f	class:madness::Function
eval	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::eval(const Vector<double,NDIM>& xin,$/;"	f	class:madness::FunctionImpl
evalR	src/madness/mra/mra.h	/^        Future<long> evalR(const coordT& xuser) const {$/;"	f	class:madness::Function
evalR	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::evalR(const Vector<double,NDIM>& xin,$/;"	f	class:madness::FunctionImpl
eval_cube	src/madness/mra/mra.h	/^        Tensor<T> eval_cube(const Tensor<double>& cell,$/;"	f	class:madness::Function
eval_cube	src/madness/mra/mraimpl.h	/^    T FunctionImpl<T,NDIM>::eval_cube(Level n, coordT& x, const tensorT& c) const {$/;"	f	class:madness::FunctionImpl
eval_cubic	src/madness/mra/sdf_shape_3D.h	/^        long double eval_cubic(const long double x, const long double c,$/;"	f	class:madness::SDFParaboloid
eval_cubic_deriv	src/madness/mra/sdf_shape_3D.h	/^        long double eval_cubic_deriv(const long double x, const long double c,$/;"	f	class:madness::SDFParaboloid
eval_derivative	src/apps/chem/corepotential.cc	/^double CoreOrbital::eval_derivative(int m, int axis, double xi, double rsq, double x, double y, double z) const {$/;"	f	class:madness::CoreOrbital
eval_derivative	src/apps/chem/corepotential.cc	/^double CorePotential::eval_derivative(double xi, double r) const {$/;"	f	class:madness::CorePotential
eval_derivative	src/apps/polar/corepotential.cc	/^double CoreOrbital::eval_derivative(int m, int axis, double xi, double rsq, double x, double y, double z) const {$/;"	f	class:CoreOrbital
eval_derivative	src/apps/polar/corepotential.cc	/^double CorePotential::eval_derivative(double xi, double r) const {$/;"	f	class:CorePotential
eval_guess_density	src/apps/chem/molecularbasis.h	/^    double eval_guess_density(const Molecule& molecule, double x, double y, double z) const {$/;"	f	class:madness::AtomicBasisSet
eval_guess_density	src/apps/chem/molecularbasis.h	/^    double eval_guess_density(double x, double y, double z, bool pspat) const {$/;"	f	class:madness::AtomicBasis
eval_guess_density	src/apps/hf/molecularbasis.h	/^    double eval_guess_density(const MolecularEntity& mentity, double x, double y, double z) const {$/;"	f	class:AtomicBasisSet
eval_guess_density	src/apps/hf/molecularbasis.h	/^    double eval_guess_density(double x, double y, double z) const {$/;"	f	class:AtomicBasis
eval_guess_density	src/apps/polar/molecularbasis.h	/^    double eval_guess_density(const Molecule& molecule, double x, double y, double z) const {$/;"	f	class:AtomicBasisSet
eval_guess_density	src/apps/polar/molecularbasis.h	/^    double eval_guess_density(double x, double y, double z) const {$/;"	f	class:AtomicBasis
eval_local_only	src/madness/mra/mra.h	/^        std::pair<bool,T> eval_local_only(const Vector<double,NDIM>& xuser, Level maxlevel) const {$/;"	f	class:madness::Function
eval_local_only	src/madness/mra/mraimpl.h	/^    FunctionImpl<T,NDIM>::eval_local_only(const Vector<double,NDIM>& xin, Level maxlevel) {$/;"	f	class:madness::FunctionImpl
eval_plot_cube	src/madness/mra/mraimpl.h	/^    Tensor<T> FunctionImpl<T,NDIM>::eval_plot_cube(const coordT& plotlo,$/;"	f	class:madness::FunctionImpl
eval_radial	src/apps/chem/corepotential.cc	/^double CoreOrbital::eval_radial(double rsq) const {$/;"	f	class:madness::CoreOrbital
eval_radial	src/apps/chem/molecularbasis.h	/^    double eval_radial(double rsq) const {$/;"	f	class:madness::ContractedGaussianShell
eval_radial	src/apps/hf/molecularbasis.h	/^    double eval_radial(double rsq) const {$/;"	f	class:ContractedGaussianShell
eval_radial	src/apps/polar/corepotential.cc	/^double CoreOrbital::eval_radial(double rsq) const {$/;"	f	class:CoreOrbital
eval_radial	src/apps/polar/molecularbasis.h	/^    double eval_radial(double rsq) const {$/;"	f	class:ContractedGaussianShell
eval_radial_derivative	src/apps/chem/corepotential.cc	/^double CoreOrbital::eval_radial_derivative(double rsq, double xi) const {$/;"	f	class:madness::CoreOrbital
eval_radial_derivative	src/apps/polar/corepotential.cc	/^double CoreOrbital::eval_radial_derivative(double rsq, double xi) const {$/;"	f	class:CoreOrbital
eval_spherical_harmonics	src/apps/chem/corepotential.cc	/^double CoreOrbital::eval_spherical_harmonics(int m, double x, double y, double z, double& dp, int axis=0) const {$/;"	f	class:madness::CoreOrbital
eval_spherical_harmonics	src/apps/polar/corepotential.cc	/^double CoreOrbital::eval_spherical_harmonics(int m, double x, double y, double z, double& dp, int axis=0) const {$/;"	f	class:CoreOrbital
evaldepthpt	src/madness/mra/mra.h	/^        Future<Level> evaldepthpt(const coordT& xuser) const {$/;"	f	class:madness::Function
evaldepthpt	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::evaldepthpt(const Vector<double,NDIM>& xin,$/;"	f	class:madness::FunctionImpl
evals	src/apps/moldft/fci/fci.F	/^      double precision hami(maxhami*(maxhami+1)\/2), evals(/;"	v	program:fci
evecfilename	src/apps/moldft/fci/fci.F	/^      character*9 evecfilename,/;"	v	program:fci
event	src/madness/world/thread.h	/^            TaskEvent* event() {$/;"	f	class:madness::profiling::TaskEventList
event_handle_	src/madness/external/gtest/src/gtest-death-test.cc	/^  AutoHandle event_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
events	src/madness/world/test_papi.cc	/^int events[NUMEVENTS] = {PAPI_FP_OPS};$/;"	v
events	src/madness/world/worldpapi.cc	/^    static int events[NUMEVENTS] = {PAPI_FP_OPS};$/;"	m	namespace:madness	file:
events_	src/madness/world/thread.h	/^            std::unique_ptr<TaskEvent[]> events_; \/\/\/< The event array.$/;"	m	class:madness::profiling::TaskEventList
evostr	src/apps/hf/outputwriter.h	/^  std::ofstream* evostr;$/;"	m	class:OutputWriter
exFile	src/apps/nick/extract.py	/^    exFile = open("ex.dat", 'w')$/;"	v
exState	src/apps/nick/extract.py	/^        exState = re.match( "^[1-9]", line)$/;"	v
exState	src/apps/nick/extract.py	/^    exState = re.match( "^[1-9]", line)$/;"	v
exact	src/examples/testspectralprop.cc	/^double exact(double t, double u0) {$/;"	f
exact	src/madness/mra/adquad.h	/^            static double exact() {$/;"	f	struct:madness::detail::adqtest
exact_function	src/examples/dielectric.cc	/^double exact_function(const coord_3d& x) {$/;"	f
exact_function	src/examples/dielectric_external_field.cc	/^double exact_function(const coord_3d& x) {$/;"	f
exc	src/apps/chem/xcfunctional_ldaonly.cc	/^madness::Tensor<double> XCfunctional::exc(const std::vector< madness::Tensor<double> >& t) const$/;"	f	class:madness::XCfunctional
exc	src/apps/chem/xcfunctional_libxc.cc	/^madness::Tensor<double> XCfunctional::exc(const std::vector< madness::Tensor<double> >& t) const {$/;"	f	class:madness::XCfunctional
exc	src/apps/polar/xcfunctional_ldaonly.cc	/^madness::Tensor<double> XCfunctional::exc(const std::vector< madness::Tensor<double> >& t, const int ispin) const$/;"	f	class:madness::XCfunctional
exc	src/apps/polar/xcfunctional_libxc.cc	/^madness::Tensor<double> XCfunctional::exc(const std::vector< madness::Tensor<double> >& t, const int ispin) const$/;"	f	class:madness::XCfunctional
exception_break	src/madness/world/madness_exception.cc	/^    void exception_break(bool message) {$/;"	f	namespace:madness
exception_type	src/madness/external/muParser/muParserBase.h	/^    typedef ParserError exception_type;$/;"	t	class:mu::ParserBase
exchange	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::exchange(World &world, ResponseFunction &f) {$/;"	f	class:TDHF
exchange	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::exchange(World& world,$/;"	f	class:TDHF
exchange	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::exchange(World& world,$/;"	f	class:TDHF
exchange	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::exchange(World& world,$/;"	f	class:TDHF
exchange	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::exchange(World& world,$/;"	f	class:TDHF
exchange	src/apps/chem/PNOParameters.h	/^	std::string exchange()const {return get<std::string>("exchange");}$/;"	f	class:madness::PNOParameters
exchange_anchor_test	src/apps/chem/test_SCFOperators.cc	/^int exchange_anchor_test(World& world, Exchange<T,3>& K, const double thresh) {$/;"	f
exchange_and_add	src/madness/world/atomicint.h	/^        inline int exchange_and_add(int i) {$/;"	f	class:madness::AtomicInt
exchange_terms	src/apps/adrian/ResponsePotential.h	/^      void exchange_terms(ResponseFunction& x,$/;"	f	class:madness::ResponsePotential
exchange_terms	src/apps/bryan/ResponsePotential.h	/^      void exchange_terms(ResponseFunction& x,$/;"	f	class:madness::ResponsePotential
excitation	src/apps/chem/CCStructures.h	/^    int excitation; \/\/\/ the excitation number$/;"	m	struct:madness::CC_vecfunction
excitation	src/apps/chem/CCStructures.h	/^    int excitation=-1;$/;"	m	class:madness::CCPair
excitations	src/apps/chem/TDHF.h	/^		std::size_t excitations() const {return get<std::size_t>("excitations");}$/;"	f	struct:madness::TDHF::Parameters
excitations_	src/apps/chem/CCStructures.h	/^    std::vector<size_t> excitations_;$/;"	m	struct:madness::CCParameters
exclusivebytcmp	src/madness/world/worldprofile.cc	/^    bool WorldProfileEntry::exclusivebytcmp(const WorldProfileEntry&a, const WorldProfileEntry& b) {$/;"	f	class:madness::WorldProfileEntry
exclusivecmp	src/madness/world/worldprofile.cc	/^    bool WorldProfileEntry::exclusivecmp(const WorldProfileEntry&a, const WorldProfileEntry& b) {$/;"	f	class:madness::WorldProfileEntry
exec	src/madness/world/archive.h	/^        	  static void exec(const Archive& ar, std::tuple<Types...>& t) {$/;"	f	struct:madness::archive::__anon10::tuple_serialize_helper
exec_context	src/madness/world/thread.h	/^            dague_execution_context_t exec_context;$/;"	m	class:madness::PoolTaskInterface
execute	src/madness/world/taskfn.h	/^        virtual tbb::task* execute() {$/;"	f	struct:madness::TaskFn
execute	src/madness/world/thread.h	/^        tbb::task* execute() {$/;"	f	class:madness::PoolTaskInterface
execute	src/madness/world/world_task_queue.h	/^            virtual tbb::task* execute() {$/;"	f	class:madness::detail::ForEachRootTask
execute	src/madness/world/worldrmi.h	/^            tbb::task* execute() {$/;"	f	class:madness::RMI::RmiTask
exfunc	src/apps/chem/GuessFactory.h	/^    std::shared_ptr<FunctionFunctorInterface<double,3> >  exfunc;$/;"	m	class:madness::guessfactory::ExopUnaryOpStructure
exists	src/madness/world/parallel_archive.h	/^            static bool exists(World& world, const char* filename) {$/;"	f	class:madness::archive::BaseParallelArchive
exists	src/madness/world/world.h	/^        static bool exists(World* world) {$/;"	f	class:madness::World
exists_and_has_children	src/madness/mra/mraimpl.h	/^    bool FunctionImpl<T,NDIM>::exists_and_has_children(const keyT& key) const {$/;"	f	class:madness::FunctionImpl
exists_and_is_leaf	src/madness/mra/mraimpl.h	/^    bool FunctionImpl<T,NDIM>::exists_and_is_leaf(const keyT& key) const {$/;"	f	class:madness::FunctionImpl
exit	src/madness/mra/tools/longfloat.py	/^    from sys import exit$/;"	i
exit	src/madness/world/thread.h	/^        static void exit() {$/;"	f	class:madness::ThreadBase
exit	src/madness/world/worldrmi.h	/^            void exit() {$/;"	f	class:madness::RMI::RmiTask
exit_code_	src/madness/external/gtest/include/gtest/gtest-death-test.h	/^  const int exit_code_;$/;"	m	class:testing::ExitedWithCode
exop	src/apps/chem/PNOParameters.h	/^	std::string exop()const { return get<std::string >("exop");}$/;"	f	class:madness::PNOParameters
exop_trigo	src/apps/chem/PNOParameters.h	/^	bool exop_trigo()const { return get<bool >("exop_trigo");}$/;"	f	class:madness::PNOParameters
exops	src/apps/chem/TDHF.h	/^		std::vector<std::string> exops() const {return get<std::vector<std::string> >("exops");}$/;"	f	struct:madness::TDHF::Parameters
exops	src/apps/chem/zcis.h	/^	std::vector<std::string> exops() const {return get<std::vector<std::string> >("exops");};$/;"	f	class:madness::Complex_CIS_Parameters
exp	src/apps/nick/mpreal.h	/^inline const mpreal exp(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
exp	src/madness/mra/tools/longfloat.py	/^    def exp(self):$/;"	m	class:longfloat
exp	src/madness/mra/tools/longfloat.py	/^    def exp(self,x):$/;"	m	class:interpolators
exp10	src/apps/nick/mpreal.h	/^inline const mpreal exp10(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
exp2	src/apps/nick/mpreal.h	/^inline const mpreal exp2(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
expL	src/examples/testspectralprop.cc	/^Fred expL(double dt, const Fred& f) {$/;"	f
expL_double	src/examples/testspectralprop.cc	/^double expL_double(double dt, double u) {$/;"	f
expPIZ_2kXgamma1pIZ_k	src/apps/nick/wavef.h	/^    complexd expPIZ_2kXgamma1pIZ_k;$/;"	m	class:ScatteringWF
expV	src/examples/tdse1d.cc	/^complex_function_1d expV(World& world, double vcoeff, double dcoeff) {$/;"	f
expand_packed_reflectors	src/madness/external/elemental/include/elemental/lapack-like/util/ExpandPackedReflectors/LV.hpp	/^namespace expand_packed_reflectors {$/;"	n	namespace:elem
expcoeff	src/apps/adrian/gaussian.h	/^  std::vector<double> expcoeff;$/;"	m	class:slymer::GaussianFunction
expcoeff	src/apps/bryan/gaussian.h	/^  std::vector<double> expcoeff;$/;"	m	class:slymer::GaussianFunction
expdexp	src/madness/mra/tools/longfloat.py	/^    def expdexp(self, x):$/;"	m	class:interpolators
expectation	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::expectation(World &world, ResponseFunction &a,$/;"	f	class:TDHF
expectation	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::expectation(World &world,$/;"	f	class:TDHF
expectation	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::expectation(World &world,$/;"	f	class:TDHF
expectation	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::expectation(World &world,$/;"	f	class:TDHF
expectation	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::expectation(World &world,$/;"	f	class:TDHF
explicit_B	src/apps/chem/diamagneticpotentialfactor.h	/^	coord_3d explicit_B={0,0,0};		\/\/\/< the magnetic field strength encoded in the diamagnetic factor$/;"	m	class:madness::Diamagnetic_potential_factor
explicit_B	src/apps/chem/znemo.h	/^	double explicit_B() const {return get<double>("explicit_b");}$/;"	f	class:madness::Nemo_complex_Parameters
expm1	src/apps/nick/mpreal.h	/^inline const mpreal expm1  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
expmIPIAArGammaBBmAA	src/apps/nick/wavef.h	/^    complexd expmIPIAArGammaBBmAA;$/;"	m	class:ScatteringWF
expme	src/apps/chem/SCFOperators.h	/^    struct expme{$/;"	s	class:madness::XCOperator
expme1	src/apps/chem/SCFOperators.h	/^        struct expme1 {$/;"	s	struct:madness::XCOperator::expme
expnt	src/apps/chem/corepotential.h	/^    vector<double> coeff, expnt;$/;"	m	struct:madness::CoreOrbital
expnt	src/apps/chem/molecularbasis.h	/^    std::vector<double> expnt;$/;"	m	class:madness::ContractedGaussianShell
expnt	src/apps/hf/ewald.cc	/^  Tensor<double> expnt;$/;"	m	class:MolecularNuclearPotentialFunctor2	file:
expnt	src/apps/hf/ewald.cc	/^  double expnt;$/;"	m	class:GaussianFunctor	file:
expnt	src/apps/hf/molecularbasis.h	/^    std::vector<double> expnt;$/;"	m	class:ContractedGaussianShell
expnt	src/apps/hf/test_lattice.cc	/^  double coeff, expnt;$/;"	m	class:wstFunctor	file:
expnt	src/apps/moldft/nwtoxml.py	/^            expnt = []$/;"	v
expnt	src/apps/polar/corepotential.h	/^    vector<double> coeff, expnt;$/;"	m	struct:CoreOrbital
expnt	src/apps/polar/molecularbasis.h	/^    std::vector<double> expnt;$/;"	m	class:ContractedGaussianShell
expnt	src/apps/polar/nwtoxml.py	/^            expnt = []$/;"	v
expnt	src/madness/mra/convolution1d.h	/^        const double expnt;     \/\/\/< Exponent$/;"	m	class:madness::GaussianConvolution1D
expnt	src/madness/mra/testbc.cc	/^    const double expnt;$/;"	m	class:DSphere	file:
expnt	src/madness/mra/testbc.cc	/^    const double expnt;$/;"	m	class:Sphere	file:
expnts	src/madness/mra/testopdir.cc	/^    double expnts[3], fac;$/;"	m	class:OpFExact	file:
exponent	src/apps/adrian/TDDFT.h	/^  double exponent;       \/\/\/< exponent of the guess$/;"	m	class:GaussianGuess
exponent	src/apps/adrian/TDHF.h	/^    double exponent;        \/\/\/< exponent of the guess$/;"	m	class:GaussianGuess
exponent	src/apps/adrian/TDHF2.h	/^    double exponent;        \/\/\/< exponent of the guess$/;"	m	class:GaussianGuess
exponent	src/apps/adrian/test_ResponseFunction.cc	/^    double exponent;        \/\/\/< exponent of the guess$/;"	m	class:GaussianGuess	file:
exponent	src/apps/bryan/TDHF.h	/^    double exponent;        \/\/\/< exponent of the guess$/;"	m	class:GaussianGuess
exponent	src/apps/bryan/TDHF2.h	/^    double exponent;        \/\/\/< exponent of the guess$/;"	m	class:GaussianGuess
exponent	src/apps/bryan/test_ResponseFunction.cc	/^    double exponent;        \/\/\/< exponent of the guess$/;"	m	class:GaussianGuess	file:
exponent	src/apps/chem/PNOGuessFunctions.h	/^		double exponent;  \/\/\/< exponent$/;"	m	class:madness::BasisFunctions::CartesianGaussian
exponent	src/apps/chem/PNOGuessFunctions.h	/^		double exponent;  \/\/\/< exponent$/;"	m	class:madness::BasisFunctions::SolidHarmonicGaussian
exponent	src/apps/chem/correlationfactor.h	/^		int exponent;$/;"	m	class:madness::NuclearCorrelationFactor::R_functor
exponent	src/apps/chem/correlationfactor.h	/^        const int exponent;         \/\/\/ 1 or 2 -> R^X or R^X R$/;"	m	class:madness::NuclearCorrelationFactor::RX_functor
exponent	src/apps/chem/electronic_correlation_factor.h	/^        int exponent;$/;"	m	class:madness::CorrelationFactor2::R_functor
exponent	src/apps/chem/test_SCFOperators.cc	/^    double exponent;        \/\/\/< exponent of the guess$/;"	m	class:GaussianGuess	file:
exponent	src/apps/chem/test_SCFOperators.cc	/^    double exponent;    \/\/ exponent of the corresponding Gaussian$/;"	m	struct:refpotfunctor	file:
exponent	src/apps/chem/znemo.h	/^		double exponent=1.0;$/;"	m	struct:madness::Znemo::p_orbital
exponent	src/apps/chem/znemo.h	/^		double exponent=1.0;$/;"	m	struct:madness::Znemo::s_orbital
exponent	src/apps/hf/solver.h	/^      const vec3dT exponent;$/;"	m	class:madness::ComplexExp
exponent	src/examples/dataloadbal.cc	/^    const double exponent;$/;"	m	class:Gaussian	file:
exponent	src/examples/vnucso.cc	/^    const double exponent; \/\/ exponent$/;"	m	struct:Guess	file:
exponent	src/madness/mra/convolution1d.h	/^        double exponent;$/;"	m	class:madness::GaussianGenericFunctor
exponent	src/madness/mra/testbsh.cc	/^    const double exponent;$/;"	m	class:Gaussian	file:
exponent	src/madness/mra/testopdir.cc	/^    const double exponent;$/;"	m	class:Gaussian	file:
exponent	src/madness/mra/testproj.cc	/^    const double exponent;$/;"	m	class:Gaussian	file:
exponent	src/madness/mra/testsuite.cc	/^    const double exponent;$/;"	m	class:DerivativeGaussian	file:
exponent	src/madness/mra/testsuite.cc	/^    const double exponent;$/;"	m	class:Gaussian	file:
exponent	src/madness/mra/testsuite.cc	/^    const double exponent;$/;"	m	class:GaussianPotential	file:
exponent	src/madness/mra/testunaryop.cc	/^    const double exponent;$/;"	m	class:Gaussian	file:
exponent	src/madness/mra/testvmra.cc	/^    const double exponent;$/;"	m	class:Gaussian	file:
exponent_bits	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
exponents	src/madness/mra/gfit.h	/^	Tensor<T> exponents() const {return exponents_;}$/;"	f	class:madness::GFit
exponents_	src/madness/mra/gfit.h	/^	Tensor<T> exponents_;$/;"	m	class:madness::GFit
exppoly	src/apps/adrian/gaussian.h	/^  PolynomialCoeffs exppoly;$/;"	m	class:slymer::PrimitiveGaussian
exppoly	src/apps/bryan/gaussian.h	/^  PolynomialCoeffs exppoly;$/;"	m	class:slymer::PrimitiveGaussian
exps	src/apps/adrian/NWChem.cc	/^                      exps; \/\/\/< Exponent for each primitive.$/;"	m	struct:slymer::BasisShell	file:
exps	src/apps/bryan/NWChem.cc	/^                      exps; \/\/\/< Exponent for each primitive.$/;"	m	struct:slymer::BasisShell	file:
extend_parameters	src/apps/chem/test_qc.cc	/^	void extend_parameters(const std::string& key, std::vector<T> values) {$/;"	f	class:TestCalculationParameters
extended_complex	src/apps/nick/hyp.h	/^typedef std::complex<extended_real> extended_complex;$/;"	t
extended_real	src/apps/nick/hyp.h	/^typedef mpfr::mpreal extended_real;$/;"	t
extra_truncation	src/apps/chem/SCFOperators.h	/^    double extra_truncation;$/;"	m	class:madness::XCOperator
extract	src/apps/chem/PNOStructures.cpp	/^vector_real_function_3d PNOPairs::extract(const vfT& vf) const {$/;"	f	class:madness::PNOPairs
extract_columns	src/madness/tensor/distributed_matrix.h	/^        void extract_columns(int64_t jlow, int64_t jhigh, DistributedMatrix<T>& U) const {$/;"	f	class:madness::DistributedMatrix
f	src/apps/chem/AC.h	/^    std::shared_ptr<FunctionFunctorInterface<double,NDIM> > f;$/;"	m	struct:madness::BinaryOpStructure
f	src/apps/chem/AC.h	/^    std::shared_ptr<FunctionFunctorInterface<double,NDIM> > f;$/;"	m	struct:madness::UnaryOpStructure
f	src/apps/chem/CCStructures.h	/^    real_function_3d f()const{return function;}$/;"	f	struct:madness::CCFunction
f	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d f() const {$/;"	f	class:madness::CorrelationFactor
f	src/apps/chem/molecular_optimizer.h	/^    double f=1.e10;$/;"	m	class:madness::MolecularOptimizer
f	src/apps/chem/test_correlation_factor.h	/^	real_function_3d f;$/;"	m	struct:test_correlation_factor
f	src/apps/exciting/wannier.cc	/^    cfunctionT f;$/;"	m	struct:ExcitingApp::wannierf	file:
f	src/apps/moldft/mcpfit.cc	/^    double f;$/;"	m	class:MySteepestDescent	file:
f	src/apps/moldft/moldx.py	/^    f = sys.stdin$/;"	v
f	src/apps/nick/extract.py	/^            f = open("dr.dat", 'w')$/;"	v
f	src/apps/nick/extract.py	/^            f = open("input2", 'r')$/;"	v
f	src/apps/nick/extract.py	/^        f = open("input", 'r')$/;"	v
f	src/apps/nick/extract.py	/^f = open("time.dat", 'r')$/;"	v
f	src/apps/nick/extract.py	/^f = open(inputFile, 'r')$/;"	v
f	src/apps/nick/parse.py	/^        f = open(file)$/;"	v
f	src/apps/polar/mcpfit.cc	/^    double f;$/;"	m	class:MySteepestDescent	file:
f	src/apps/polar/moldx.py	/^    f = sys.stdin$/;"	v
f	src/examples/csqrt.cc	/^static std::complex<double> f(const coordT& r)$/;"	f	file:
f	src/examples/derivatives.cc	/^    double(*f)(const coord_3d&);$/;"	m	class:F	file:
f	src/examples/derivatives.cc	/^double (*f )(const coord_3d&) = gaussian;$/;"	v
f	src/examples/he.cc	/^    const real_function_6d& f;$/;"	m	class:YetAnotherWrapperClass	file:
f	src/examples/helium_mp2.cc	/^    const real_function_6d& f;$/;"	m	class:YetAnotherWrapperClass	file:
f	src/examples/navstokes_cosines.cc	/^    double (*f)(const coordT&);$/;"	m	struct:FunctorInterfaceWrapper	file:
f	src/madness/mra/funcimpl.h	/^            FunctionImpl<T,NDIM>* f; \/\/\/< prefactor for current function impl$/;"	m	struct:madness::FunctionImpl::do_gaxpy_inplace
f	src/madness/mra/funcimpl.h	/^            const implT* f;     \/\/ for calling its member functions$/;"	m	struct:madness::FunctionImpl::do_truncate_NS_leafs
f	src/madness/mra/funcimpl.h	/^            const implT* f;$/;"	m	struct:madness::FunctionImpl::do_check_symmetry_local
f	src/madness/mra/funcimpl.h	/^            ctT f,g;$/;"	m	struct:madness::FunctionImpl::add_op
f	src/madness/mra/funcimpl.h	/^            ctT f;$/;"	m	struct:madness::FunctionImpl::multiply_op
f	src/madness/mra/funcimpl.h	/^            implT* f;$/;"	m	struct:madness::FunctionImpl::do_map_and_mirror
f	src/madness/mra/funcimpl.h	/^            implT* f;$/;"	m	struct:madness::FunctionImpl::do_mapdim
f	src/madness/mra/funcimpl.h	/^            implT* f;$/;"	m	struct:madness::FunctionImpl::do_mirror
f	src/madness/mra/funcimpl.h	/^        const FunctionImpl<T,NDIM>* f;$/;"	m	struct:madness::hartree_convolute_leaf_op
f	src/madness/mra/funcimpl.h	/^        const FunctionImpl<T,NDIM>* f;$/;"	m	struct:madness::hartree_leaf_op
f	src/madness/mra/funcimpl.h	/^        const implT* f;   \/\/\/< the source or result function, needed for truncate_tol$/;"	m	struct:madness::op_leaf_op
f	src/madness/mra/function_factory.h	/^    f(T (*f)(const coordT&)) {$/;"	f	class:madness::FunctionFactory
f	src/madness/mra/function_interface.h	/^		T (*f)(const coordT&);$/;"	m	class:madness::ElementaryInterface
f	src/madness/mra/leafop.h	/^    const FunctionImpl<T, NDIM>* f;$/;"	m	class:madness::Leaf_op
f	src/madness/mra/minmax/y.cc	/^    const vector<FLOAT>& f;$/;"	m	class:Func	file:
f	src/madness/mra/minmax/y1.cc	/^    const vector<FLOAT>& f;$/;"	m	class:Func	file:
f	src/madness/mra/minmax/y_signed.cc	/^    const vector<FLOAT>& f;$/;"	m	class:Func	file:
f	src/madness/mra/minmax/y_varx.cc	/^    const vector<FLOAT>& f;$/;"	m	class:Func	file:
f	src/madness/mra/mra.h	/^            T (*f)(T);$/;"	m	struct:madness::Function::SimpleUnaryOpWrapper
f	src/madness/mra/testpdiff.cc	/^    double (*f)(const coordT&);$/;"	m	struct:FunctorInterfaceWrapper	file:
f	src/madness/mra/tools/mathutil.py	/^    def f(x): $/;"	f
f	src/madness/mra/tools/twoscalecoeffs.py	/^        def f(x):$/;"	f
f	src/madness/mra/vmra1.h	/^        const Function<T,NDIM>& f;$/;"	m	struct:madness::MatrixInnerTask
f	src/madness/tensor/gfit.cc	/^    const Tensor<double> f, x, w;$/;"	m	class:Fred	file:
f	src/madness/tensor/kain.cc	/^    double f;$/;"	m	class:QuasiNewton	file:
f	src/madness/tensor/kain.cc	/^    double f;$/;"	m	class:SteepestDescent	file:
f	src/madness/tensor/solvers.h	/^        double f;$/;"	m	class:madness::QuasiNewton
f	src/madness/tensor/solvers.h	/^        double f;$/;"	m	class:madness::SteepestDescent
f	src/madness/tensor/tempspec.py	/^f = open("tensor_spec.h","w")$/;"	v
f	src/madness/tensor/tempspec.py	/^f = open("tensoriter_spec.h","w")$/;"	v
f	src/madness/tensor/test_tensor.cc	/^        static madness::Tensor<T> f() { \/\/ For testing move semantics$/;"	f	class:__anon44::TensorTest
f	src/madness/world/future.h	/^        std::shared_ptr< FutureImpl<T> > f;$/;"	m	class:madness::Future
f	src/madness/world/thread.h	/^        void* (*f)(void *); \/\/\/< The function called for executing this thread. \\todo should we replace this by a std::function?$/;"	m	class:madness::Thread
f0	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f0_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T0 f0_;$/;"	m	class:std::tr1::tuple
f1	src/examples/derivatives.cc	/^double (*f1)(const coord_3d&) = gaussian1;$/;"	v
f1	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f1	src/madness/world/test_papi.cc	/^void* f1(void* p) {$/;"	f
f11	src/apps/nick/wavef.cc	/^complexd PhiK::f11(double xx) const {$/;"	f	class:PhiK
f11	src/apps/nick/wavef.cc	/^complexd Phikl::f11(double xx) const {$/;"	f	class:Phikl
f12	src/apps/chem/CCPotentials.h	/^    CCConvolutionOperator f12;$/;"	m	class:madness::CCPotentials
f12	src/apps/chem/PNO.h	/^	F12Potentials f12;$/;"	m	class:madness::PNO
f12	src/apps/chem/PNOParameters.h	/^	bool f12()const { return get<bool >("f12");}$/;"	f	class:madness::F12Parameters
f12	src/apps/chem/PNOParameters.h	/^	bool f12()const { return get<bool >("f12");}$/;"	f	class:madness::PNOParameters
f12	src/madness/mra/function_factory.h	/^    TwoElectronFactory& f12() {$/;"	f	class:madness::TwoElectronFactory
f12_	src/madness/mra/function_factory.h	/^    enum operatortype {coulomb_, slater_, f12_, bsh_};$/;"	e	enum:madness::TwoElectronFactory::operatortype
f1_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T1 f1_;$/;"	m	class:std::tr1::tuple
f1of1	src/madness/external/muParser/muParserTest.h	/^        static value_type f1of1(value_type v) { return v;};$/;"	f	class:mu::Test::ParserTester
f1of2	src/madness/external/muParser/muParserTest.h	/^        static value_type f1of2(value_type v, value_type  ) {return v;};$/;"	f	class:mu::Test::ParserTester
f1of3	src/madness/external/muParser/muParserTest.h	/^        static value_type f1of3(value_type v, value_type  , value_type  ) {return v;};$/;"	f	class:mu::Test::ParserTester
f1of4	src/madness/external/muParser/muParserTest.h	/^        static value_type f1of4(value_type v, value_type,   value_type  , value_type  ) {return v;}$/;"	f	class:mu::Test::ParserTester
f1of5	src/madness/external/muParser/muParserTest.h	/^	      static value_type f1of5(value_type v, value_type,   value_type  , value_type  , value_type  ) { return v; }$/;"	f	class:mu::Test::ParserTester
f2	src/apps/chem/AC.h	/^    std::shared_ptr<FunctionFunctorInterface<double,NDIM> > f2;$/;"	m	struct:madness::UnaryOpStructure
f2	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d f2() const {$/;"	f	class:madness::CorrelationFactor
f2	src/examples/derivatives.cc	/^double (*f2)(const coord_3d&) = gaussian2;$/;"	v
f2	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f2_	src/apps/chem/electronic_correlation_factor.h	/^        f2_(double gamma) : gamma(gamma) {MADNESS_ASSERT(gamma>0.0);}$/;"	f	struct:madness::CorrelationFactor::f2_
f2_	src/apps/chem/electronic_correlation_factor.h	/^    struct f2_ : FunctionFunctorInterface<double,6>  {$/;"	s	class:madness::CorrelationFactor
f2_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T2 f2_;$/;"	m	class:std::tr1::tuple
f2of2	src/madness/external/muParser/muParserTest.h	/^        static value_type f2of2(value_type  , value_type v) {return v;};$/;"	f	class:mu::Test::ParserTester
f2of3	src/madness/external/muParser/muParserTest.h	/^        static value_type f2of3(value_type  , value_type v, value_type  ) {return v;};$/;"	f	class:mu::Test::ParserTester
f2of4	src/madness/external/muParser/muParserTest.h	/^        static value_type f2of4(value_type  , value_type v, value_type  , value_type  ) {return v;}$/;"	f	class:mu::Test::ParserTester
f2of5	src/madness/external/muParser/muParserTest.h	/^	      static value_type f2of5(value_type  , value_type v, value_type  , value_type  , value_type  ) { return v; }$/;"	f	class:mu::Test::ParserTester
f3	src/examples/derivatives.cc	/^double (*f3)(const coord_3d&) = gaussian3;$/;"	v
f3	src/examples/helium_mp2.cc	/^    const real_function_3d f3;$/;"	m	class:YetAnotherWrapperClass	file:
f3	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f3_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T3 f3_;$/;"	m	class:std::tr1::tuple
f3of3	src/madness/external/muParser/muParserTest.h	/^        static value_type f3of3(value_type  , value_type  , value_type v) {return v;};$/;"	f	class:mu::Test::ParserTester
f3of4	src/madness/external/muParser/muParserTest.h	/^        static value_type f3of4(value_type  , value_type,   value_type v, value_type  ) {return v;}$/;"	f	class:mu::Test::ParserTester
f3of5	src/madness/external/muParser/muParserTest.h	/^	      static value_type f3of5(value_type  , value_type,   value_type v, value_type  , value_type  ) { return v; }$/;"	f	class:mu::Test::ParserTester
f4	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f4_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T4 f4_;$/;"	m	class:std::tr1::tuple
f4of4	src/madness/external/muParser/muParserTest.h	/^        static value_type f4of4(value_type  , value_type,   value_type  , value_type v) {return v;}$/;"	f	class:mu::Test::ParserTester
f4of5	src/madness/external/muParser/muParserTest.h	/^	      static value_type f4of5(value_type  , value_type,   value_type  , value_type v, value_type  ) { return v; }$/;"	f	class:mu::Test::ParserTester
f5	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f5_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T5 f5_;$/;"	m	class:std::tr1::tuple
f5of5	src/madness/external/muParser/muParserTest.h	/^	      static value_type f5of5(value_type  , value_type,   value_type  , value_type  , value_type v) { return v; }$/;"	f	class:mu::Test::ParserTester
f6	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f6_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T6 f6_;$/;"	m	class:std::tr1::tuple
f6d	src/examples/he.cc	/^static double f6d(const coord_6d& r) {$/;"	f	file:
f7	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f7_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T7 f7_;$/;"	m	class:std::tr1::tuple
f8	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^      GTEST_BY_REF_(T8) f8, GTEST_BY_REF_(T9) f9) : f0_(f0), f1_(f1), f2_(f2),$/;"	m	class:std::tr1::tuple
f8_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T8 f8_;$/;"	m	class:std::tr1::tuple
f9_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^      f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7), f8_(f8), f9_(f9) {}$/;"	f	class:std::tr1::tuple
f9_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^      f9_(t.f9_) {}$/;"	f	class:std::tr1::tuple
f9_	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  T9 f9_;$/;"	m	class:std::tr1::tuple
f_over_r	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d f_over_r() const {$/;"	f	class:madness::CorrelationFactor
f_over_r_	src/apps/chem/electronic_correlation_factor.h	/^        f_over_r_(double gamma, double dcut) : gamma(gamma), dcut(dcut) {$/;"	f	struct:madness::CorrelationFactor::f_over_r_
f_over_r_	src/apps/chem/electronic_correlation_factor.h	/^    struct f_over_r_ : FunctionFunctorInterface<double,6>  {$/;"	s	class:madness::CorrelationFactor
fabs	src/apps/nick/mpreal.h	/^inline const mpreal fabs(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
fac	src/apps/chem/correlationfactor.h	/^	const double fac;$/;"	m	class:madness::PseudoNuclearCorrelationFactor
fac	src/examples/molecularmask.h	/^    const double Vint, Vext, fac;$/;"	m	class:MolecularVolumeExponentialSwitch
fac	src/examples/molecularmask.h	/^    const double fac;$/;"	m	class:MolecularVolumeExponentialSwitchLogGrad
fac	src/examples/siam_example.cc	/^  const double fac; \/\/\/< The factor multiplying the log-derivative.$/;"	m	class:DSphere	file:
fac	src/madness/mra/convolution1d.h	/^        Q fac;$/;"	m	class:madness::ConvolutionND
fac	src/madness/mra/funcimpl.h	/^            double tol, fac, cnorm;$/;"	m	struct:madness::FunctionImpl::do_op_args
fac	src/madness/mra/testopdir.cc	/^    double expnts[3], fac;$/;"	m	class:OpFExact	file:
fac1	src/examples/vnucso.cc	/^static const double fac1=exp(-R1\/a1);$/;"	v	file:
fac2	src/examples/vnucso.cc	/^static const double fac2=exp(-R2\/a2);$/;"	v	file:
facReduce	src/madness/tensor/lowranktensor.h	/^    static double facReduce() {return 1.e-3;}$/;"	f	class:madness::LowRankTensor
fac_reduce	src/madness/tensor/gentensor.h	/^		static double fac_reduce() {return -1.0;};$/;"	f	class:madness::GenTensor
fac_reduce	src/madness/tensor/lowranktensor.h	/^    static double fac_reduce() {return 1.e-3;}$/;"	f	class:madness::LowRankTensor
fac_ui	src/apps/nick/mpreal.h	/^inline const mpreal fac_ui (unsigned long int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
facfun_type	src/madness/external/muParser/muParserDef.h	/^  typedef value_type* (*facfun_type)(const char_type*, void*);$/;"	t	namespace:mu
factor	src/apps/chem/diamagneticpotentialfactor.h	/^	real_function_3d factor() const {return diamagnetic_factor_;}$/;"	f	class:madness::Diamagnetic_potential_factor
factor	src/apps/moldft/testcosine.cc	/^   double_complex factor;$/;"	m	class:PWFunctor	file:
factor_	src/examples/smooth.h	/^		const double factor_;$/;"	m	struct:smooth::inv_mask_functor
factor_	src/examples/smooth.h	/^		const double factor_;$/;"	m	struct:smooth::mask_functor
factor_square	src/apps/chem/diamagneticpotentialfactor.h	/^	real_function_3d factor_square() const {return diamagnetic_factor_square;}$/;"	f	class:madness::Diamagnetic_potential_factor
factor_with_phase	src/apps/chem/diamagneticpotentialfactor.h	/^	complex_function_3d factor_with_phase(const coord_3d& B, const std::vector<coord_3d>& vv) const {$/;"	f	class:madness::Diamagnetic_potential_factor
factoryT	src/apps/chem/SCF.h	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	namespace:madness
factoryT	src/apps/chem/corepotential.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	namespace:madness	file:
factoryT	src/apps/exciting/wannier.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/apps/hf/esolver.h	/^typedef FunctionFactory<std::complex<double>,3> factoryT;$/;"	t
factoryT	src/apps/hf/solver.h	/^    typedef FunctionFactory<valueT,NDIM> factoryT;$/;"	t	class:madness::Solver
factoryT	src/apps/moldft/mcpfit.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/apps/nick/tdse1.cc	/^typedef FunctionFactory<double,NDIM> factoryT;$/;"	t	file:
factoryT	src/apps/nick/test.cc	/^typedef FunctionFactory<double,NDIM> factoryT;$/;"	t	file:
factoryT	src/apps/nick/wavef.h	/^typedef FunctionFactory<double,NDIM> factoryT;$/;"	t
factoryT	src/apps/nick/wfSlice.cc	/^typedef FunctionFactory<double,NDIM> factoryT;$/;"	t	file:
factoryT	src/apps/polar/corepotential.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/apps/polar/mcpfit.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/apps/polar/moldft.cc	/^typedef FunctionFactory<double, 3> factoryT;$/;"	t	file:
factoryT	src/apps/tdse/tdse.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/apps/tdse/tdse.confused.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/apps/tdse/tdse4.cc	/^typedef FunctionFactory<double,4> factoryT;$/;"	t	file:
factoryT	src/examples/csqrt.cc	/^typedef FunctionFactory<std::complex<double>,1> factoryT;$/;"	t	file:
factoryT	src/examples/h2dft.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/examples/heat.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/examples/hedft.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/examples/hefxc.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/examples/newsolver_lda.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/examples/tdse_example.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/madness/mra/mra.h	/^        typedef FunctionFactory<T,NDIM> factoryT;$/;"	t	class:madness::Function
factoryT	src/madness/mra/testbc.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/madness/mra/testdiff1D.cc	/^typedef FunctionFactory<double,1> factoryT;$/;"	t	file:
factoryT	src/madness/mra/testdiff1Db.cc	/^typedef FunctionFactory<double,1> factoryT;$/;"	t	file:
factoryT	src/madness/mra/testdiff2D.cc	/^typedef FunctionFactory<double,2> factoryT;$/;"	t	file:
factoryT	src/madness/mra/testdiff3D.cc	/^typedef FunctionFactory<double,3> factoryT;$/;"	t	file:
factoryT	src/madness/mra/testpdiff.cc	/^typedef FunctionFactory<double,NDIM> factoryT;$/;"	t	file:
factory_	src/madness/external/gtest/include/gtest/gtest.h	/^  internal::TestFactoryBase* const factory_;  \/\/ The factory that creates$/;"	m	class:testing::TestInfo::internal
failed	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  bool failed() const { return type_ != kSuccess; }$/;"	f	class:testing::TestPartResult
failed_test_case_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::failed_test_case_count() const {$/;"	f	class:testing::UnitTest
failed_test_case_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::failed_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failed_test_count	src/madness/external/gtest/src/gtest.cc	/^int TestCase::failed_test_count() const {$/;"	f	class:testing::TestCase
failed_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }$/;"	f	class:testing::UnitTest
failed_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::failed_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failure_message	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* failure_message() const { return message(); }$/;"	f	class:testing::AssertionResult
false	src/madness/external/elemental/external/pmrrr/include/global.h	62;"	d
false	src/madness/external/elemental/external/pmrrr/include/global.h	81;"	d
false_type	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef bool_constant<false> false_type;$/;"	t	namespace:testing::internal
fast_transform	src/madness/tensor/tensor.h	/^    Tensor< TENSOR_RESULT_TYPE(T,Q) >& fast_transform(const Tensor<T>& t, const Tensor<Q>& c,  Tensor< TENSOR_RESULT_TYPE(T,Q) >& result,$/;"	f	namespace:madness
fast_transpose	src/madness/mra/convolution1d.h	/^    inline void fast_transpose(long n, long m, const T* a, T* MADNESS_RESTRICT b) {$/;"	f	namespace:madness
fatally_failed	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  bool fatally_failed() const { return type_ == kFatalFailure; }$/;"	f	class:testing::TestPartResult
fc	src/apps/chem/corepotential.cc	/^const double CorePotentialManager::fc = 2.0;$/;"	m	class:madness::CorePotentialManager	file:
fc	src/apps/chem/corepotential.h	/^    static const double fc;$/;"	m	class:madness::CorePotentialManager
fc	src/apps/polar/corepotential.cc	/^const double CorePotentialManager::fc = 2.0;$/;"	m	class:CorePotentialManager	file:
fc	src/apps/polar/corepotential.h	/^    static const double fc;$/;"	m	class:CorePotentialManager
fci	src/apps/moldft/fci/fci.F	/^      program fci$/;"	p
fci_1pdm	src/apps/moldft/fci/fci_1pdm.F	/^      subroutine fci_1pdm(/;"	s
fci_2pdm	src/apps/moldft/fci/fci_2pdm.F	/^      subroutine fci_2pdm(/;"	s
fci_3pdm	src/apps/moldft/fci/fci_3pdm.F	/^      subroutine fci_3pdm(/;"	s
fci_apply_eaj	src/apps/moldft/fci/fci_make_eaj.F	/^      subroutine fci_apply_eaj(/;"	s
fci_apply_eaj3	src/apps/moldft/fci/fci_make_eaj.F	/^      subroutine fci_apply_eaj3(/;"	s
fci_axb	src/apps/moldft/fci/fci_axb.F	/^      subroutine fci_axb(/;"	s
fci_cntone	src/apps/moldft/fci/fci_cntone.F	/^      subroutine fci_cntone(/;"	s
fci_couple1	src/apps/moldft/fci/fci_couple1.F	/^      subroutine fci_couple1(/;"	s
fci_couple2	src/apps/moldft/fci/fci_couple2.F	/^      subroutine fci_couple2(/;"	s
fci_couple3	src/apps/moldft/fci/fci_couple3.F	/^      subroutine fci_couple3(/;"	s
fci_davids	src/apps/moldft/fci/fci_davids.F	/^      logical function fci_davids(/;"	f
fci_davids_redmat	src/apps/moldft/fci/fci_davids.F	/^      subroutine fci_davids_redmat(/;"	s
fci_davids_residual	src/apps/moldft/fci/fci_davids.F	/^      subroutine fci_davids_residual(/;"	s
fci_davids_resum	src/apps/moldft/fci/fci_davids.F	/^      subroutine fci_davids_resum(/;"	s
fci_det_to_walk	src/apps/moldft/fci/fci_detwalk.F	/^      subroutine fci_det_to_walk(/;"	s
fci_diags	src/apps/moldft/fci/fci_diags.F	/^      subroutine fci_diags(/;"	s
fci_err	src/apps/moldft/fci/fci_err.F	/^      subroutine fci_err(/;"	s
fci_guess	src/apps/moldft/fci/fci_solve.F	/^      subroutine fci_guess(/;"	s
fci_hami	src/apps/moldft/fci/fci_hami.F	/^      subroutine fci_hami(/;"	s
fci_hamil2	src/apps/moldft/fci/fci_hami.F	/^      subroutine fci_hamil2(/;"	s
fci_heapify	src/apps/moldft/fci/fci_hsort.F	/^      subroutine fci_heapify(/;"	s
fci_hmod	src/apps/moldft/fci/fci_hmod.F	/^      subroutine fci_hmod(/;"	s
fci_hsort	src/apps/moldft/fci/fci_hsort.F	/^      subroutine fci_hsort(/;"	s
fci_hv	src/apps/moldft/fci/fci_hv.F	/^      subroutine fci_hv(/;"	s
fci_intchk	src/apps/moldft/fci/fci_intchk.F	/^      subroutine fci_intchk(/;"	s
fci_load	src/apps/moldft/fci/fci_load.F	/^      subroutine fci_load(/;"	s
fci_make_all_eaj	src/apps/moldft/fci/fci_make_eaj.F	/^      subroutine fci_make_all_eaj$/;"	s
fci_make_eaj	src/apps/moldft/fci/fci_make_eaj.F	/^      subroutine fci_make_eaj(/;"	s
fci_max_num_dets	src/apps/moldft/fci/fci_num.F	/^      integer function fci_max_num_dets(/;"	f
fci_mfind_occ	src/apps/moldft/fci/fci_mfndoc.F	/^      subroutine fci_mfind_occ(/;"	s
fci_mfind_weight	src/apps/moldft/fci/fci_mfndwt.F	/^      subroutine fci_mfind_weight(/;"	s
fci_mgraph	src/apps/moldft/fci/fci_mgraph.F	/^      subroutine fci_mgraph$/;"	s
fci_ncsf	src/apps/moldft/fci/fci_num.F	/^      integer function fci_ncsf(/;"	f
fci_ndets	src/apps/moldft/fci/fci_num.F	/^      integer function fci_ndets(/;"	f
fci_num_csf	src/apps/moldft/fci/fci_num.F	/^      integer function fci_num_csf(/;"	f
fci_num_dets	src/apps/moldft/fci/fci_num.F	/^      integer function fci_num_dets(/;"	f
fci_num_owalks	src/apps/moldft/fci/fci_num.F	/^      integer function fci_num_owalks(/;"	f
fci_ofind_occ	src/apps/moldft/fci/fci_ofndoc.F	/^      subroutine fci_ofind_occ(/;"	s
fci_ofind_weight	src/apps/moldft/fci/fci_ofndwt.F	/^      subroutine fci_ofind_weight(/;"	s
fci_ograph	src/apps/moldft/fci/fci_ograph.F	/^      subroutine fci_ograph$/;"	s
fci_onelcc	src/apps/moldft/fci/fci_onelcc.F	/^      subroutine fci_onelcc(/;"	s
fci_onepdm	src/apps/moldft/fci/fci_onepdm.F	/^      subroutine fci_onepdm(/;"	s
fci_output	src/apps/moldft/fci/fci_output.F	/^      subroutine fci_output /;"	s
fci_owalk_info	src/apps/moldft/fci/fci_owalk_info.F	/^      subroutine fci_owalk_info(/;"	s
fci_print_vector	src/apps/moldft/fci/fci_prvec.F	/^      subroutine fci_print_vector(/;"	s
fci_prntri	src/apps/moldft/fci/fci_prntri.F	/^      subroutine fci_prntri(/;"	s
fci_prspnad	src/apps/moldft/fci/fci_prspnad.F	/^      subroutine fci_prspnad(/;"	s
fci_prteop	src/apps/moldft/fci/fci_prteop.F	/^      subroutine fci_prteop(/;"	s
fci_readevectors	src/apps/moldft/fci/fci_solve.F	/^      subroutine fci_readevectors(/;"	s
fci_setup	src/apps/moldft/fci/fci_setup.F	/^      subroutine fci_setup(/;"	s
fci_sigma	src/apps/moldft/fci/fci_sigma.F	/^      subroutine fci_sigma(/;"	s
fci_solve	src/apps/moldft/fci/fci_solve.F	/^      subroutine fci_solve(/;"	s
fci_spin_adapt	src/apps/moldft/fci/fci_spnad.F	/^      subroutine fci_spin_adapt(/;"	s
fci_spin_adapt_nvec	src/apps/moldft/fci/fci_spnad.F	/^      subroutine fci_spin_adapt_nvec$/;"	s
fci_spin_force	src/apps/moldft/fci/fci_spnfrc.F	/^      subroutine fci_spin_force(/;"	s
fci_srt1cc	src/apps/moldft/fci/fci_srt1cc.F	/^      subroutine fci_srt1cc(/;"	s
fci_strlen	src/apps/moldft/fci/fci_tinit.F	/^      integer function fci_strlen(/;"	f
fci_tfinish	src/apps/moldft/fci/fci_tinit.F	/^      subroutine fci_tfinish(/;"	s
fci_time	src/apps/moldft/fci/fci_tinit.F	/^      double precision function fci_time(/;"	f
fci_tinit	src/apps/moldft/fci/fci_tinit.F	/^      subroutine fci_tinit$/;"	s
fci_tprint	src/apps/moldft/fci/fci_tinit.F	/^      subroutine fci_tprint(/;"	s
fci_tstart	src/apps/moldft/fci/fci_tinit.F	/^      subroutine fci_tstart(/;"	s
fcube	src/madness/mra/mraimpl.h	/^    Tensor<T> fcube(const Key<NDIM>& key, T (*f)(const Vector<double,NDIM>&), const Tensor<double>& qx) {$/;"	f	namespace:madness
fcube	src/madness/mra/mraimpl.h	/^    Tensor<T> fcube(const Key<NDIM>& key, const FunctionFunctorInterface<T,NDIM>& f, const Tensor<double>& qx) {$/;"	f	namespace:madness
fcube	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::fcube(const keyT& key, T (*f)(const coordT&), const Tensor<double>& qx, tensorT& fval) const {$/;"	f	class:madness::FunctionImpl
fcube	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::fcube(const keyT& key, const FunctionFunctorInterface<T,NDIM>& f, const Tensor<double>& qx, tensorT& fval) const {$/;"	f	class:madness::FunctionImpl
fcube	src/madness/mra/mraimpl.h	/^    void fcube(const Key<NDIM>& key, const FunctionFunctorInterface<T,NDIM>& f, const Tensor<double>& qx, Tensor<T>& fval) {$/;"	f	namespace:madness
fcube_for_mul	src/madness/mra/funcimpl.h	/^        GenTensor<Q> fcube_for_mul(const keyT& child, const keyT& parent, const GenTensor<Q>& coeff) const {$/;"	f	class:madness::FunctionImpl
fcube_for_mul	src/madness/mra/funcimpl.h	/^        Tensor<Q> fcube_for_mul(const keyT& child, const keyT& parent, const Tensor<Q>& coeff) const {$/;"	f	class:madness::FunctionImpl
fd_	src/madness/external/gtest/src/gtest-port.cc	/^  const int fd_;  \/\/ A stream to capture.$/;"	m	class:testing::internal::CapturedStream	file:
fds	src/apps/moldft/fci/crayio.c	/^  int fds;                   \/* file descriptor *\/$/;"	m	struct:w_file	file:
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
fence	src/madness/mra/function_factory.h	/^    fence(bool fence = true) {$/;"	f	class:madness::FunctionFactory
fence	src/madness/world/world_task_queue.h	/^        void fence() {$/;"	f	class:madness::WorldTaskQueue
fence	src/madness/world/worldam.h	/^        void fence() {}$/;"	f	class:madness::WorldAmInterface
fence	src/madness/world/worldgop.cc	/^    void WorldGopInterface::fence(bool debug) {$/;"	f	class:madness::WorldGopInterface
fg	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d fg() const {$/;"	f	class:madness::CorrelationFactor
fg_	src/apps/chem/electronic_correlation_factor.h	/^        fg_(double gamma, double dcut) : gamma(gamma), dcut(dcut) {$/;"	f	struct:madness::CorrelationFactor::fg_
fg_	src/apps/chem/electronic_correlation_factor.h	/^    struct fg_ : FunctionFunctorInterface<double,6> {$/;"	s	class:madness::CorrelationFactor
field	src/apps/chem/molecule.h	/^    madness::Tensor<double> field;$/;"	m	class:madness::Molecule
field	src/apps/nick/parse.py	/^field   = []$/;"	v
field	src/apps/polar/molecule.h	/^    madness::Tensor<double> field;$/;"	m	class:Molecule
fieldFile	src/apps/nick/parse.py	/^fieldFile  = open("field.dat",     'w')$/;"	v
file	src/examples/compiler/mra-driver.hh	/^    std::string file;$/;"	m	class:mra_driver
file	src/madness/external/gtest/include/gtest/gtest.h	/^    const char* const file;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
file	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  const std::string& file() const { return file_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
file	src/madness/external/gtest/src/gtest-internal-inl.h	/^  const char* file;$/;"	m	struct:testing::internal::TraceInfo
fileList	src/apps/nick/parse.py	/^fileList = sys.argv[1:]$/;"	v
file_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  std::string file_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
file_	src/madness/external/gtest/src/gtest-death-test.cc	/^  const char* const file_;$/;"	m	class:testing::internal::ExecDeathTest	file:
file_	src/madness/external/gtest/src/gtest-death-test.cc	/^  const char* const file_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
file_array	src/apps/moldft/fci/crayio.c	/^} file_array[max_file];$/;"	v	typeref:struct:w_file	file:
file_exists	src/apps/adrian/adrianXY.cc	/^static inline int file_exists(const char * inpname)$/;"	f	file:
file_exists	src/apps/adrian/driver4.cc	/^static inline int file_exists(const char * inpname)$/;"	f	file:
file_exists	src/apps/adrian/driver5.cc	/^static inline int file_exists(const char * inpname)$/;"	f	file:
file_exists	src/apps/bryan/driver4.cc	/^static inline int file_exists(const char * inpname)$/;"	f	file:
file_exists	src/apps/bryan/driver5.cc	/^static inline int file_exists(const char * inpname)$/;"	f	file:
file_exists	src/apps/moldft/moldft.cc	/^static inline int file_exists(const char * inpname)$/;"	f	file:
file_name	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  const char* file_name() const {$/;"	f	class:testing::TestPartResult
file_name_	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  std::string file_name_;$/;"	m	class:testing::TestPartResult
fileinput	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^import fileinput$/;"	i
fileinput	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^import fileinput$/;"	i
filename	src/apps/chem/SCFProtocol.h	/^    std::string filename;   \/\/\/< name for the restart data file$/;"	m	class:madness::SCFProtocol
filename	src/apps/chem/test_MolecularOrbitals.cc	/^    std::string filename() const {return filename_;}$/;"	f	struct:write_test_input
filename	src/apps/chem/test_SCFOperators.cc	/^    std::string filename() const {return filename_;}$/;"	f	struct:write_test_input
filename	src/apps/chem/test_qc.cc	/^    std::string filename() const {return filename_;}$/;"	f	struct:write_test_input
filename	src/madness/mra/legendre.cc	/^    static const char *filename = "gaussleg";   \/\/ Is overridden by$/;"	m	namespace:madness	file:
filename	src/madness/tensor/tensorexcept.h	/^        const char *filename;$/;"	m	class:madness::TensorException
filename	src/madness/world/madness_exception.h	/^        const char *filename; \/\/\/< File where the exception occurred.$/;"	m	class:madness::MadnessException
filename_	src/apps/chem/test_MolecularOrbitals.cc	/^    std::string filename_;$/;"	m	struct:write_test_input	file:
filename_	src/apps/chem/test_SCFOperators.cc	/^    std::string filename_;$/;"	m	struct:write_test_input	file:
filename_	src/apps/chem/test_qc.cc	/^    std::string filename_;$/;"	m	struct:write_test_input	file:
filename_	src/madness/external/gtest/src/gtest-port.cc	/^  ::std::string filename_;$/;"	m	class:testing::internal::CapturedStream	file:
fill	src/madness/tensor/distributed_matrix.h	/^        void fill(T value) {$/;"	f	class:madness::DistributedMatrix
fill	src/madness/tensor/distributed_matrix.h	/^        void fill(const funcT& f) {$/;"	f	class:madness::DistributedMatrix
fill	src/madness/tensor/tensor.h	/^        Tensor<T>& fill(T x) {$/;"	f	class:madness::Tensor
fill	src/madness/world/vector.h	/^        void fill(const T& t) {$/;"	f	class:madness::Vector
fill0	src/madness/mra/test_mra6.cc	/^        TensorFill fill0;$/;"	m	class:__anon12::BinaryGenTest	file:
fill0	src/madness/mra/test_mra6.cc	/^        TensorFill fill0;$/;"	m	class:__anon12::UnaryGenTest	file:
fill0	src/madness/tensor/test_gentensor.cc	/^        TensorFill fill0;$/;"	m	class:__anon43::BinaryGenTest	file:
fill0	src/madness/tensor/test_gentensor.cc	/^        TensorFill fill0;$/;"	m	class:__anon43::UnaryGenTest	file:
fill1	src/madness/mra/test_mra6.cc	/^        TensorFill fill1;$/;"	m	class:__anon12::BinaryGenTest	file:
fill1	src/madness/tensor/test_gentensor.cc	/^        TensorFill fill1;$/;"	m	class:__anon43::BinaryGenTest	file:
fillWithRandom	src/madness/tensor/srconf.h	/^		void fillWithRandom(const long& rank=1) {$/;"	f	class:madness::SRConf
fill_cuspy_tree	src/madness/mra/mra.h	/^        Function<T,NDIM>& fill_cuspy_tree(const bool fence=true){$/;"	f	class:madness::Function
fill_cuspy_tree	src/madness/mra/mra.h	/^        Function<T,NDIM>& fill_cuspy_tree(const opT& op,const bool fence=true){$/;"	f	class:madness::Function
fill_identity	src/madness/tensor/distributed_matrix.h	/^        void fill_identity() {$/;"	f	class:madness::DistributedMatrix
fill_nuclear_cuspy_tree	src/madness/mra/mra.h	/^        Function<T,NDIM>& fill_nuclear_cuspy_tree(const opT& op,const size_t particle,const bool fence=true){$/;"	f	class:madness::Function
fill_nuclear_cuspy_tree	src/madness/mra/mra.h	/^        Function<T,NDIM>& fill_nuclear_cuspy_tree(const size_t particle,const bool fence=true){$/;"	f	class:madness::Function
fill_peterson	src/apps/chem/PNOGuessFunctions.h	/^	std::vector<int> fill_peterson(const size_t& s)const{$/;"	f	class:madness::BasisFunctions
fill_tree	src/madness/mra/mra.h	/^        Function<T,NDIM>& fill_tree(bool fence=true) {$/;"	f	class:madness::Function
fill_tree	src/madness/mra/mra.h	/^        Function<T,NDIM>& fill_tree(const Function<R,NDIM>& g, bool fence=true) {$/;"	f	class:madness::Function
fill_tree	src/madness/mra/mra.h	/^        Function<T,NDIM>& fill_tree(const opT& op, bool fence=true) {$/;"	f	class:madness::Function
fill_up	src/apps/chem/PNOGuessFunctions.h	/^	std::vector<int> fill_up(std::vector<int> v)const{$/;"	f	class:madness::BasisFunctions
fillindex	src/madness/tensor/tensor.h	/^        Tensor<T>& fillindex() {$/;"	f	class:madness::Tensor
fillrandom	src/madness/tensor/tensor.h	/^        Tensor<T>& fillrandom() {$/;"	f	class:madness::Tensor
filter	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::coeffT FunctionImpl<T,NDIM>::filter(const coeffT& s) const {$/;"	f	class:madness::FunctionImpl
filter	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::tensorT FunctionImpl<T,NDIM>::filter(const tensorT& s) const {$/;"	f	class:madness::FunctionImpl
filter_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::string filter_;$/;"	m	class:testing::internal::GTestFlagSaver
fimpl	src/madness/mra/funcimpl.h	/^            const implT* fimpl;		\/\/\/< the hi dim function f$/;"	m	struct:madness::FunctionImpl::project_out_op
final	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final.cxx	/^class sub final : public base {$/;"	c	file:
final	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final_fail_compile.cxx	/^class sub final : public base {$/;"	c	file:
final	src/madness/world/lookup3.c	153;"	d	file:
final_callback	src/madness/world/dependency_interface.h	/^        mutable volatile CallbackInterface* final_callback;  \/\/\/< The "final" callback can destroy the task, always invoked last, the object is in an invalid state (ndepend set to -1) after its execution$/;"	m	class:madness::DependencyInterface
finalize	src/madness/mra/funcimpl.h	/^            argT finalize(const double kernel_norm, const keyT& key,$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
finalize	src/madness/mra/funcimpl.h	/^            std::pair<bool,coeffT> finalize(const double kernel_norm, const keyT& key,$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
finalize	src/madness/world/world.cc	/^    void finalize() {$/;"	f	namespace:madness
finalize	src/madness/world/worldmpi.h	/^            static void finalize() {$/;"	f	class:madness::detail::WorldMpi
finalize_apply	src/madness/mra/mraimpl.h	/^    double FunctionImpl<T,NDIM>::finalize_apply(const bool fence) {$/;"	f	class:madness::FunctionImpl
find	src/madness/external/tinyxml/tinystr.h	/^	size_type find (char lookup) const$/;"	f	class:TiXmlString
find	src/madness/external/tinyxml/tinystr.h	/^	size_type find (char tofind, size_type offset) const$/;"	f	class:TiXmlString
find	src/madness/world/worlddc.h	/^        Future<const_iterator> find(const keyT& key) const {$/;"	f	class:madness::WorldContainer
find	src/madness/world/worlddc.h	/^        Future<const_iterator> find(const keyT& key) const {$/;"	f	class:madness::WorldContainerImpl
find	src/madness/world/worlddc.h	/^        Future<iterator> find(const keyT& key) {          \/\/$/;"	f	class:madness::WorldContainer
find	src/madness/world/worlddc.h	/^        Future<iterator> find(const keyT& key) {$/;"	f	class:madness::WorldContainerImpl
find	src/madness/world/worlddc.h	/^        bool find(accessor& acc, const keyT& key) {$/;"	f	class:madness::WorldContainer
find	src/madness/world/worlddc.h	/^        bool find(accessor& acc, const keyT& key) {$/;"	f	class:madness::WorldContainerImpl
find	src/madness/world/worlddc.h	/^        bool find(const_accessor& acc, const keyT& key) const {$/;"	f	class:madness::WorldContainer
find	src/madness/world/worlddc.h	/^        bool find(const_accessor& acc, const keyT& key) const {$/;"	f	class:madness::WorldContainerImpl
find	src/madness/world/worldhashmap.h	/^            entryT* find(const keyT& key, const int lockmode) const {$/;"	f	class:madness::Hash_private::bin
find	src/madness/world/worldhashmap.h	/^        bool find(accessor& result, const keyT& key) {$/;"	f	class:madness::ConcurrentHashMap
find	src/madness/world/worldhashmap.h	/^        bool find(const_accessor& result, const keyT& key) const {$/;"	f	class:madness::ConcurrentHashMap
find	src/madness/world/worldhashmap.h	/^        const_iterator find(const keyT& key) const {$/;"	f	class:madness::ConcurrentHashMap
find	src/madness/world/worldhashmap.h	/^        iterator find(const keyT& key) {$/;"	f	class:madness::ConcurrentHashMap
find	src/madness/world/worldprofile.cc	/^    int WorldProfile::find(const std::string& name) {$/;"	f	class:madness::WorldProfile
find_datum	src/madness/mra/mraimpl.h	/^    std::pair<Key<NDIM>,ShallowNode<T,NDIM> > FunctionImpl<T,NDIM>::find_datum(keyT key) const {$/;"	f	class:madness::FunctionImpl
find_failure_handler	src/madness/world/worlddc.h	/^        void find_failure_handler(const RemoteReference< FutureImpl<iterator> >& ref) {$/;"	f	class:madness::WorldContainerImpl
find_fuzzy	src/examples/testspectralprop.cc	/^std::pair<bool, T> find_fuzzy(double t, const std::vector< std::pair<double,T> >& cache) {$/;"	f
find_handler	src/madness/world/worlddc.h	/^        void find_handler(ProcessID requestor, const keyT& key, const RemoteReference< FutureImpl<iterator> >& ref) {$/;"	f	class:madness::WorldContainerImpl
find_instance	src/madness/world/world.h	/^        static World* find_instance(const SafeMPI::Intracomm& comm) {$/;"	f	class:madness::World
find_kpt_from_orb	src/apps/hf/solver.h	/^    KPoint find_kpt_from_orb(unsigned int idx)$/;"	f	class:madness::Solver
find_me	src/madness/mra/mraimpl.h	/^    FunctionImpl<T,NDIM>::find_me(const Key<NDIM>& key) const {$/;"	f	class:madness::FunctionImpl
find_neighbor	src/madness/mra/derivative.h	/^        find_neighbor(const implT* f, const Key<NDIM>& key, int step) const {$/;"	f	class:madness::DerivativeBase
find_root	src/madness/mra/sdf_shape_3D.h	/^        long double find_root(long double lower, long double upper,$/;"	f	class:madness::SDFParaboloid
find_string	src/apps/moldft/xmlguess.py	/^def find_string(s):$/;"	f
find_string	src/apps/polar/xmlguess.py	/^def find_string(s):$/;"	f
find_success_handler	src/madness/world/worlddc.h	/^        void find_success_handler(const RemoteReference< FutureImpl<iterator> >& ref, const pairT& datum) {$/;"	f	class:madness::WorldContainerImpl
findkpt	src/apps/exciting/wannier.cc	/^  int findkpt(vec3dT kvecl)$/;"	f	class:ExcitingApp
fine_structure_constant	src/madness/constants.h	/^        const double fine_structure_constant = 7.2973525376e-3 ;  \/\/   0.0000000050e-3    $/;"	m	namespace:madness::constants
finish	src/madness/external/tinyxml/tinystr.h	/^	char* finish() const { return rep_->str + rep_->size; }$/;"	f	class:TiXmlString
finish	src/madness/world/binsorter.h	/^        void finish() {$/;"	f	class:madness::BinSorter
finish	src/madness/world/range.h	/^        iteratorT finish; \/\/\/< Last item for iteration (first past the end, conventionally).$/;"	m	class:madness::Range
finish	src/madness/world/thread.h	/^        volatile bool finish; \/\/\/< Set to true when time to stop.$/;"	m	class:madness::ThreadPool
finished	src/apps/chem/PNOStructures.h	/^	bool finished()const{return finished_;}$/;"	f	struct:madness::ElectronPairIterator
finished	src/apps/chem/SCFProtocol.h	/^    bool finished() const {$/;"	f	class:madness::SCFProtocol
finished	src/madness/mra/indexit.h	/^        bool finished;$/;"	m	class:madness::IndexIterator
finished	src/madness/mra/key.h	/^        bool finished;$/;"	m	class:madness::KeyChildIterator
finished	src/madness/mra/mraplot.cc	/^    bool finished;              \/\/ true if finishing$/;"	m	class:Plotter	file:
finished	src/madness/world/test_queue.cc	/^    static bool finished() {return total_count==(NGEN*NTASK);}$/;"	f	class:Task
finished	src/madness/world/worldrmi.h	/^            volatile bool finished;     \/\/ True if finished$/;"	m	class:madness::RMI::RmiTask
finished_	src/apps/chem/PNOStructures.h	/^	bool finished_;$/;"	m	struct:madness::OrbitalIterator
finished_	src/apps/chem/PNOStructures.h	/^	bool finished_=false; \/\/\/< true if all pairs where iterated$/;"	m	struct:madness::ElectronPairIterator
finished_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  bool finished_;  \/\/ true iff we know that the thread function has finished.$/;"	m	class:testing::internal::ThreadWithParam
firstChild	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode*		firstChild;$/;"	m	class:TiXmlNode
firstLocalEigenvalue	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	/^    int firstLocalEigenvalue;$/;"	m	struct:elem::herm_tridiag_eig::Info
first_call	src/apps/moldft/fci/crayio.c	/^static int first_call = 1;   \/* need to do stuff on the first call *\/$/;"	v	file:
fit	src/madness/mra/function_interface.h	/^		GFit<double,3> fit(const double eps) const {$/;"	f	class:madness::BSHFunctionInterface
fit	src/madness/mra/function_interface.h	/^		GFit<double,3> fit(const double eps) const {$/;"	f	class:madness::ElectronRepulsionInterface
fit	src/madness/mra/function_interface.h	/^		GFit<double,3> fit(const double eps) const {$/;"	f	class:madness::SlaterF12Interface
fit	src/madness/mra/function_interface.h	/^		GFit<double,3> fit(const double eps) const {$/;"	f	class:madness::SlaterFunctionInterface
fit	src/madness/mra/minmax/y.cc	/^FLOAT fit(const FLOAT& x, const vector<FLOAT>& p) {$/;"	f
fit	src/madness/mra/minmax/y.cc	/^void fit(const FLOAT& x, const vector<FLOAT>& p, FLOAT& f, FLOAT& g, FLOAT& h) {$/;"	f
fit	src/madness/mra/minmax/y1.cc	/^FLOAT fit(const FLOAT& x, const vector<FLOAT>& p) {$/;"	f
fit	src/madness/mra/minmax/y1.cc	/^void fit(const FLOAT& x, const vector<FLOAT>& p, FLOAT& f, FLOAT& g, FLOAT& h) {$/;"	f
fit	src/madness/mra/minmax/y_signed.cc	/^FLOAT fit(const FLOAT& x, const vector<FLOAT>& p) {$/;"	f
fit	src/madness/mra/minmax/y_signed.cc	/^void fit(const FLOAT& x, const vector<FLOAT>& p, FLOAT& f, FLOAT& g, FLOAT& h) {$/;"	f
fit	src/madness/mra/minmax/y_varx.cc	/^FLOAT fit(const FLOAT& x, const vector<FLOAT>& p) {$/;"	f
fit	src/madness/mra/minmax/y_varx.cc	/^void fit(const FLOAT& x, const vector<FLOAT>& p, FLOAT& f, FLOAT& g, FLOAT& h) {$/;"	f
fit	src/madness/mra/qmprop.cc	/^        CubicInterpolationTable<double_complex> fit;$/;"	m	class:madness::BandlimitedPropagator	file:
fit	src/madness/tensor/gfit.cc	/^double fit(double x, const Tensor<double>& c, const Tensor<double>& expnt) {$/;"	f
fit1F1	src/apps/nick/wavef.h	/^    CubicInterpolationTable<complexd > fit1F1;$/;"	m	class:ScatteringWF
fits_in_bits	src/apps/nick/mpreal.h	/^inline bool mpreal::fits_in_bits(double x, int n)$/;"	f	class:mpfr::mpreal
fix_iter_tol	src/examples/tdse1d.cc	/^double fix_iter_tol = thresh*10.0;$/;"	v
fix_occupations	src/apps/hf/solver.h	/^    void fix_occupations(const std::vector<T>& eps,$/;"	f	class:madness::Solver
fixphases	src/apps/moldft/testperiodic.cc	/^void fixphases(World& world, tensor_real& e, tensor_complex& U) {$/;"	f
fixphases	src/apps/moldft/testperiodic.cc	/^void fixphases(World& world, tensor_real& e, tensor_complex& U, vector_complex_function_3d& psik) {$/;"	f
fixture_class_id_	src/madness/external/gtest/include/gtest/gtest.h	/^  const internal::TypeId fixture_class_id_;   \/\/ ID of the test fixture class$/;"	m	class:testing::TestInfo
flVOLATILE	src/madness/external/muParser/muParserToken.h	/^	      flVOLATILE = 1    \/\/\/< Mark a token that depends on a variable or a function that is not conservative$/;"	e	enum:mu::ParserToken::ETokFlags
flag	src/madness/external/elemental/external/pmrrr/include/queue.h	/^  int         flag;       \/* flag specifying the task *\/$/;"	m	struct:task_aux
flags	src/madness/world/thread.h	/^        unsigned long flags; \/\/\/< Byte-string storing the specified attributes.$/;"	m	class:madness::TaskAttributes
flags	src/madness/world/worldam.h	/^        unsigned int flags;     \/\/ Misc. bit flags$/;"	m	class:madness::AmArg
flat	src/madness/tensor/tensor.h	/^        Tensor<T> flat() {$/;"	f	class:madness::Tensor
flat	src/madness/tensor/tensor.h	/^        const Tensor<T> flat() const {$/;"	f	class:madness::Tensor
flat_inplace	src/madness/tensor/basetensor.cc	/^    void BaseTensor::flat_inplace() {$/;"	f	class:madness::BaseTensor
flat_vector	src/madness/tensor/srconf.h	/^		Tensor<T> flat_vector(const unsigned int& idim) {$/;"	f	class:madness::SRConf
flat_vector	src/madness/tensor/srconf.h	/^		const Tensor<T> flat_vector(const unsigned int& idim) const {$/;"	f	class:madness::SRConf
flo_unary_op_node_inplace	src/madness/mra/funcimpl.h	/^        void flo_unary_op_node_inplace(const opT& op, bool fence) const {$/;"	f	class:madness::FunctionImpl
flo_unary_op_node_inplace	src/madness/mra/funcimpl.h	/^        void flo_unary_op_node_inplace(const opT& op, bool fence) {$/;"	f	class:madness::FunctionImpl
floatRange	src/apps/nick/spawnK.py	/^def floatRange(a, b, inc):$/;"	f
float_complex	src/madness/misc/ran.h	/^typedef std::complex<float> float_complex;$/;"	t
float_complex	src/madness/tensor/basetensor.h	/^typedef std::complex<float> float_complex;$/;"	t
float_complex	src/madness/tensor/oldtest.cc	/^typedef std::complex<float> float_complex;$/;"	t	file:
float_complex	src/madness/tensor/tensoriter.cc	/^typedef std::complex<float> float_complex;$/;"	t	file:
float_scalar_type	src/madness/tensor/lowranktensor.h	/^    typedef typename TensorTypeData<T>::float_scalar_type float_scalar_type;$/;"	t	class:madness::LowRankTensor
float_scalar_type	src/madness/tensor/tensor.h	/^        typedef typename TensorTypeData<T>::float_scalar_type float_scalar_type;$/;"	t	class:madness::Tensor
float_scalar_type	src/madness/tensor/tensortrain.h	/^        typedef typename TensorTypeData<T>::float_scalar_type float_scalar_type;$/;"	t	class:madness::TensorTrain
floor	src/apps/nick/mpreal.h	/^inline const mpreal floor(const mpreal& v)$/;"	f	namespace:mpfr
flush	src/madness/world/binary_fstream_archive.cc	/^        void BinaryFstreamOutputArchive::flush() {$/;"	f	class:madness::archive::BinaryFstreamOutputArchive
flush	src/madness/world/binsorter.h	/^        void flush(int owner) {$/;"	f	class:madness::BinSorter
flush	src/madness/world/buffer_archive.h	/^            void flush() {}$/;"	f	class:madness::archive::BufferOutputArchive
flush	src/madness/world/cereal_archive.h	/^  void flush(){};$/;"	f	class:madness::archive::CerealOutputArchive
flush	src/madness/world/mpi_archive.h	/^            void flush() const {$/;"	f	class:madness::archive::MPIOutputArchive
flush	src/madness/world/parallel_archive.h	/^            void flush() {$/;"	f	class:madness::archive::ParallelOutputArchive
flush	src/madness/world/text_fstream_archive.h	/^            void flush() {$/;"	f	class:madness::archive::TextFstreamOutputArchive
flush	src/madness/world/vector_archive.h	/^            void flush() {};$/;"	f	class:madness::archive::VectorOutputArchive
fma	src/apps/nick/mpreal.cc	/^const mpreal fma (const mpreal& v1, const mpreal& v2, const mpreal& v3, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
fmax	src/madness/external/elemental/external/pmrrr/include/global.h	58;"	d
fmax	src/madness/external/elemental/external/pmrrr/include/global.h	77;"	d
fmin	src/madness/external/elemental/external/pmrrr/include/global.h	59;"	d
fmin	src/madness/external/elemental/external/pmrrr/include/global.h	78;"	d
fmod	src/apps/nick/mpreal.h	/^inline const mpreal fmod (const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
fms	src/apps/nick/mpreal.cc	/^const mpreal fms (const mpreal& v1, const mpreal& v2, const mpreal& v3, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
fn	src/madness/world/archive.cc	/^  void fn() {}$/;"	f	struct:madness::archive::detail::Ref
fn	src/madness/world/test_ar.cc	/^  void fn(){}$/;"	f	struct:__anon8::Member
fn_ptr_origin	src/madness/world/archive.cc	/^std::ptrdiff_t fn_ptr_origin() {$/;"	f	namespace:madness::archive
fname	src/apps/adrian/NWChem.h	/^  const std::string &fname;$/;"	m	class:slymer::NWChem_Interface
fname	src/apps/bryan/NWChem.h	/^  const std::string &fname;$/;"	m	class:slymer::NWChem_Interface
fname	src/apps/chem/test_QCCalculationParametersBase.cc	/^	std::string fname;$/;"	m	struct:inputfile	file:
fname	src/madness/world/parallel_archive.h	/^            char fname[256]; \/\/\/< Name of the archive.$/;"	m	class:madness::archive::BaseParallelArchive
fock	src/apps/chem/mp2.h	/^        mutable Tensor<double> fock;			\/\/\/< the Fock matrix$/;"	m	class:madness::MP2
fock_residue_6d	src/apps/chem/CCPotentials.cc	/^  CCPotentials::fock_residue_6d(const CCPair& u) const {$/;"	f	class:madness::CCPotentials
fock_residue_closed_shell	src/apps/chem/CCPotentials.cc	/^  CCPotentials::fock_residue_closed_shell(const CC_vecfunction& singles) const {$/;"	f	class:madness::CCPotentials
foo	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final.cxx	/^    virtual int foo(int a)$/;"	f	class:base
foo	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final_fail_compile.cxx	/^    virtual int foo(int a)$/;"	f	class:base
foo	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-defaulted_functions.cxx	/^    int foo;$/;"	m	struct:A	file:
foo	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-sizeof_member.cxx	/^struct foo {$/;"	s	file:
fop	src/apps/chem/PNOF12Potentials.h	/^	std::shared_ptr<real_convolution_3d> fop;								\/\/\/< operator for convolutions with the correlation factor: f12 = 1\/(2*\\gamma)*(1-exp(-\\gamma*r_{12}))$/;"	m	class:madness::F12Potentials
fop	src/apps/interior_bc/test_problems.h	/^        FunctorOutput fop;$/;"	m	class:EmbeddedDirichlet
for_each	src/madness/world/world_task_queue.h	/^        Future<bool> for_each(const rangeT& range, const opT& op) {$/;"	f	class:madness::WorldTaskQueue
forceComplexPs	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    bool forceComplexPs;$/;"	m	struct:elem::PseudospecCtrl
forceComplexSchur	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    bool forceComplexSchur;$/;"	m	struct:elem::PseudospecCtrl
foreach_child	src/madness/mra/key.h	/^    foreach_child(const Key<NDIM>& parent, objT* obj, void$/;"	f	namespace:madness
foreach_child	src/madness/mra/key.h	/^    foreach_child(const Key<NDIM>& parent, opT& op) {$/;"	f	namespace:madness
foreach_child	src/madness/world/test_world.cc	/^    void foreach_child(const opT& op) const {$/;"	f	struct:Key
formula	src/madness/mra/mraplot.cc	/^    std::string formula;             \/\/ analytic function to plot$/;"	m	class:Plotter	file:
forward_ctor	src/madness/mra/funcimpl.h	/^    	CoeffTracker forward_ctor(const CoeffTracker& other, const datumT& datum) const {$/;"	f	class:madness::CoeffTracker
forward_ctor	src/madness/mra/funcimpl.h	/^            this_type forward_ctor(const ctT& f1, const ctT& g1, const double alpha, const double beta) {$/;"	f	struct:madness::FunctionImpl::add_op
forward_ctor	src/madness/mra/funcimpl.h	/^            this_type forward_ctor(const implT* fimpl1, implL1* result1, const ctL& iag1, const int dim1) {$/;"	f	struct:madness::FunctionImpl::project_out_op
forward_ctor	src/madness/mra/funcimpl.h	/^            this_type forward_ctor(implT* h1, const ctT& f1, const ctL& g1, const int particle) {$/;"	f	struct:madness::FunctionImpl::multiply_op
forward_ctor	src/madness/mra/funcimpl.h	/^            this_type forward_ctor(implT* r, const CoeffTracker<T,LDIM>& f1, const CoeffTracker<T,LDIM>& g1,$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
forward_ctor	src/madness/mra/funcimpl.h	/^            this_type forward_ctor(implT* result1, const ctL& p11, const ctL& p22, const leaf_opT& leaf_op) {$/;"	f	struct:madness::FunctionImpl::hartree_op
forward_ctor	src/madness/mra/funcimpl.h	/^            this_type forward_ctor(implT* result1, const ctT& iaf1, const opT* apply_op1) {$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
forward_ctor	src/madness/mra/funcimpl.h	/^          this_type forward_ctor(implT* result1, const opT& leaf_op, const ctT& iaket1,$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
forward_do_diff1	src/madness/mra/derivative.h	/^        void forward_do_diff1(const implT* f, implT* df, const keyT& key,$/;"	f	class:madness::DerivativeBase
forward_do_diff1	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::forward_do_diff1(const DerivativeBase<T,NDIM>* D,$/;"	f	class:madness::FunctionImpl
forward_elimination	src/madness/mra/tools/mathutil.py	/^def forward_elimination(L,b):$/;"	f
forward_traverse	src/madness/mra/funcimpl.h	/^        void forward_traverse(const coeff_opT& coeff_op, const apply_opT& apply_op, const keyT& key) const {$/;"	f	class:madness::FunctionImpl
forwarding_enabled	src/madness/external/gtest/src/gtest.cc	/^  bool forwarding_enabled() const { return forwarding_enabled_; }$/;"	f	class:testing::internal::TestEventRepeater
forwarding_enabled_	src/madness/external/gtest/src/gtest.cc	/^  bool forwarding_enabled_;$/;"	m	class:testing::internal::TestEventRepeater	file:
found	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        bool found;$/;"	m	struct:elem::choice::Args::OptionalArg
found	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        bool found;$/;"	m	struct:elem::choice::Args::RequiredArg
found	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        bool found;$/;"	m	struct:elem::choice::MpiArgs::OptionalArg
found	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        bool found;$/;"	m	struct:elem::choice::MpiArgs::RequiredArg
fout	src/apps/nick/extract.py	/^fout = open("t.dat", "w")$/;"	v
fout	src/madness/world/redirectio.cc	/^static std::ofstream fout;$/;"	v	file:
frac	src/apps/nick/mpreal.h	/^inline const mpreal frac (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
fraction_bits	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
fractional	src/apps/hf/electronicstructureparams.h	/^  bool fractional;$/;"	m	struct:madness::ElectronicStructureParams
fred	src/apps/tdse/tdse4.cc	/^double fred(const coordT& r) {$/;"	f
fred	src/madness/world/test_world.cc	/^    static void fred() {$/;"	f	class:TTT
fred	src/madness/world/test_world.cc	/^    void fred(int i, double j) {$/;"	f	class:Mary
fred	src/madness/world/test_worldprofile.cc	/^void fred(int i) {$/;"	f
fred_and_mary_sitting_under_a_tree	src/madness/world/archive_type_names.cc	/^        static BaseArchive fred_and_mary_sitting_under_a_tree;$/;"	m	namespace:madness::archive	file:
free	src/madness/world/worldam.h	/^            void free() {if (buf) {free_am_arg(buf); buf=0;}}$/;"	f	class:madness::WorldAmInterface::SendReq
free_am_arg	src/madness/world/worldam.h	/^    inline void free_am_arg(AmArg* arg) {$/;"	f	namespace:madness
free_fn	src/madness/world/test_ar.cc	/^void free_fn() {}$/;"	f	namespace:__anon8
free_managed_buffers	src/madness/world/worldam.h	/^        int free_managed_buffers() {$/;"	f	class:madness::WorldAmInterface
free_space_derivative	src/madness/mra/derivative.h	/^    free_space_derivative(World& world, int axis, int k=FunctionDefaults<NDIM>::get_k()) {$/;"	f	namespace:madness
freeze	src/apps/chem/CCStructures.h	/^		  int freeze=0;$/;"	m	struct:madness::CCConvolutionOperator::Parameters
freeze	src/apps/chem/CCStructures.h	/^    size_t freeze=0;$/;"	m	struct:madness::CCParameters
freeze	src/apps/chem/PNOParameters.h	/^	std::size_t freeze()const { return get<std::size_t >("freeze");}$/;"	f	class:madness::PNOParameters
freeze	src/apps/chem/TDHF.h	/^		std::size_t freeze() const {return get<std::size_t>("freeze");}$/;"	f	struct:madness::TDHF::Parameters
freeze	src/apps/chem/mp2.h	/^        	int freeze() const {return this->get<int>("freeze");}   			\/\/\/ convenience function$/;"	f	struct:madness::MP2::Parameters
freeze	src/apps/chem/zcis.h	/^	int freeze() const {return get<int>("freeze");};$/;"	f	class:madness::Complex_CIS_Parameters
freeze_	src/apps/chem/PNOStructures.h	/^	const size_t freeze_;$/;"	m	struct:madness::OrbitalIterator
freeze_	src/apps/chem/PNOStructures.h	/^	const size_t freeze_=0; \/\/\/< number of frozen orbitals (just to print the correct name)$/;"	m	struct:madness::ElectronPairIterator
freeze_insignificant_pairs	src/apps/chem/PNO.cpp	/^PNOPairs PNO::freeze_insignificant_pairs(PNOPairs& pairs)const{$/;"	f	class:madness::PNO
freeze_pairs	src/apps/chem/PNOParameters.h	/^	std::vector<std::pair<int,int> > freeze_pairs()const{$/;"	f	class:madness::PNOParameters
freeze_pairs_of_orbital	src/apps/chem/PNOParameters.h	/^	std::vector<int> freeze_pairs_of_orbital()const { return get<std::vector<int> >("freeze_pairs_of_orbital");}$/;"	f	class:madness::PNOParameters
fref	src/madness/mra/funcimpl.h	/^            const std::shared_ptr< FunctionFunctorInterface<T, NDIM> > fref;$/;"	m	struct:madness::FunctionImpl::do_inner_ext_local_ffi
frexp	src/apps/nick/mpreal.h	/^inline const mpreal frexp(const mpreal& v, mp_exp_t* exp)$/;"	f	namespace:mpfr
from	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^    Int from[2];$/;"	m	struct:elem::LDLPivot
fromfile	src/madness/mra/tools/twoscalecoeffs.py	/^def fromfile(k):$/;"	f
fromstring	src/apps/chem/QCCalculationParametersBase.h	/^	fromstring(const std::string& arg) {$/;"	f	class:madness::QCCalculationParametersBase
front	src/madness/world/vector.h	/^        const_reference front() const { return data_.front(); }$/;"	f	class:madness::Vector
front	src/madness/world/vector.h	/^        reference front() { return data_.front(); }$/;"	f	class:madness::Vector
front	src/madness/world/worldmutex.h	/^        mutable volatile int front;$/;"	m	class:madness::ConditionVariable
front	src/madness/world/worldmutex.h	/^        mutable volatile int front;$/;"	m	class:madness::MutexFair
frozen_ij	src/apps/chem/PNOStructures.h	/^	std::valarray<bool> frozen_ij;					\/\/\/< if true then pairs are frozen and not optimized (but still contribute to energy -> not frozen core)$/;"	m	struct:madness::PNOPairs
full	src/madness/tensor/lowranktensor.h	/^        std::shared_ptr<Tensor<T> > full;$/;"	m	struct:madness::LowRankTensor::implT
full_pattern_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const char* full_pattern_;  \/\/ For FullMatch();$/;"	m	class:testing::internal::RE
full_regex_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  regex_t full_regex_;     \/\/ For FullMatch().$/;"	m	class:testing::internal::RE
full_tensor	src/madness/tensor/gentensor.h	/^        GenTensor<T> full_tensor() const {return *this;}$/;"	f	class:madness::GenTensor
full_tensor	src/madness/tensor/gentensor.h	/^        GenTensor<T>& full_tensor() {return *this;}$/;"	f	class:madness::GenTensor
full_tensor	src/madness/tensor/lowranktensor.h	/^    Tensor<T>& full_tensor() {$/;"	f	class:madness::LowRankTensor
full_tensor	src/madness/tensor/lowranktensor.h	/^    const Tensor<T>& full_tensor() const {$/;"	f	class:madness::LowRankTensor
full_tensor_copy	src/madness/tensor/gentensor.h	/^        GenTensor<T> full_tensor_copy() const {return copy(*this);}$/;"	f	class:madness::GenTensor
full_tensor_copy	src/madness/tensor/gentensor.h	/^        GenTensor<T> full_tensor_copy() {return copy(*this);}$/;"	f	class:madness::GenTensor
full_tensor_copy	src/madness/tensor/lowranktensor.h	/^    Tensor<T> full_tensor_copy() const {$/;"	f	class:madness::LowRankTensor
fun_type0	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*fun_type0)();$/;"	t	namespace:mu
fun_type1	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*fun_type1)(value_type);$/;"	t	namespace:mu
fun_type2	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*fun_type2)(value_type, value_type);$/;"	t	namespace:mu
fun_type3	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*fun_type3)(value_type, value_type, value_type);$/;"	t	namespace:mu
fun_type4	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*fun_type4)(value_type, value_type, value_type, value_type);$/;"	t	namespace:mu
fun_type5	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*fun_type5)(value_type, value_type, value_type, value_type, value_type);$/;"	t	namespace:mu
func	src/apps/adrian/gaussian.h	/^    GaussianFunction func;$/;"	m	class:slymer::Gaussian_Functor
func	src/apps/bryan/gaussian.h	/^    GaussianFunction func;$/;"	m	class:slymer::Gaussian_Functor
func	src/apps/exciting/wannier.cc	/^std::complex<double> func(int n, int t1, int t2, int t3, double xx, double yy, double zz)$/;"	f
func	src/apps/nick/extra.h	/^    complex_functionT func;$/;"	m	struct:WF
func	src/apps/nick/wfSlice.cc	/^    complex_functionT func;$/;"	m	struct:WF	file:
func	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-nullptr.cxx	/^int func(int)$/;"	f
func	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-nullptr.cxx	/^int func(void *)$/;"	f
func	src/madness/misc/interp3.cc	/^double func(double x) {$/;"	f
func	src/madness/mra/funcimpl.h	/^            const opT* func;$/;"	m	class:madness::FunctionImpl::do_err_box
func	src/madness/mra/testpdiff.cc	/^double func(const coordT& r) {$/;"	f
func	src/madness/world/parsec.cc	/^    const dague_function_t* PoolTaskInterface::func = &madness_function;$/;"	m	class:madness::PoolTaskInterface	file:
func	src/madness/world/thread.h	/^            static const dague_function_t*   func;$/;"	m	class:madness::PoolTaskInterface
func	src/madness/world/world_task_queue.h	/^            functionT func; \/\/\/< A task function.$/;"	m	struct:madness::detail::TaskHandlerInfo
func	src/madness/world/worldam.h	/^        std::ptrdiff_t func;    \/\/ User function to call, as a relative fn ptr (see archive::to_rel_fn_ptr)$/;"	m	class:madness::AmArg
func	src/madness/world/worldrmi.h	/^                rel_fn_ptr_t func;$/;"	m	struct:madness::RMI::RmiTask::header
func	src/madness/world/worldrmi.h	/^        rmi_handlerT func;$/;"	m	struct:madness::qmsg
funcT	src/apps/chem/projector.h	/^        typedef Function<T,NDIM> funcT;$/;"	t	class:madness::Projector
funcT	src/apps/hf/dft.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::DFT
funcT	src/apps/hf/dft.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::DFTCoulombOp
funcT	src/apps/hf/dft.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::DFTCoulombPeriodicOp
funcT	src/apps/hf/dft.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::DFTNuclearChargeDensityOp
funcT	src/apps/hf/dft.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::DFTNuclearPotentialOp
funcT	src/apps/hf/dft.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::XCFunctionalLDA
funcT	src/apps/hf/eigsolver.h	/^  typedef Function<T,NDIM> funcT;$/;"	t	class:madness::EigSolver
funcT	src/apps/hf/eigsolver.h	/^  typedef Function<T,NDIM> funcT;$/;"	t	class:madness::EigSolverOp
funcT	src/apps/hf/eigsolver.h	/^  typedef Function<T,NDIM> funcT;$/;"	t	class:madness::IEigSolverObserver
funcT	src/apps/hf/hartreefock.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::HartreeFock
funcT	src/apps/hf/hartreefock.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::HartreeFockCoulombOp
funcT	src/apps/hf/hartreefock.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::HartreeFockExchangeOp
funcT	src/apps/hf/hartreefock.h	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:madness::HartreeFockNuclearPotentialOp
funcT	src/apps/hf/test_hydro.cc	/^    typedef Function<T,NDIM> funcT;$/;"	t	class:NuclearChargeDensityOp	file:
func_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const UserThreadFunc func_;  \/\/ User-supplied thread function.$/;"	m	class:testing::internal::ThreadWithParam
func_	src/madness/world/taskfn.h	/^        const functionT func_; \/\/\/< The task function$/;"	m	struct:madness::TaskFn
func_ones	src/apps/hf/test_lattice.cc	/^static double func_ones(const coordT3d& r)$/;"	f	file:
funcname	src/examples/derivatives.cc	/^const std::string funcname = "gaussian";$/;"	v
funcs	src/apps/chem/xcfunctional.h	/^    std::vector< std::pair<xc_func_type*,double> > funcs;$/;"	m	class:madness::XCfunctional
funcs	src/apps/polar/xcfunctional.h	/^    std::vector< std::pair<xc_func_type*,double> > funcs;$/;"	m	class:madness::XCfunctional
functT	src/examples/navstokes_cosines.cc	/^typedef std::vector<functionT> functT;$/;"	t	file:
function	src/apps/chem/CCStructures.h	/^    real_function_3d function;$/;"	m	struct:madness::CCFunction
function	src/apps/chem/CCStructures.h	/^    real_function_6d function()const{$/;"	f	class:madness::CCPair
function	src/apps/chem/correlationfactor.h	/^	virtual real_function_3d function() const {$/;"	f	class:madness::NuclearCorrelationFactor
function	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d function() const {$/;"	f	class:madness::CorrelationFactor2
function	src/apps/chem/mp2.h	/^        real_function_6d function;      \/\/\/< pair function for a specific pair w\/o correlation factor part$/;"	m	class:madness::ElectronPair
function	src/examples/functionio.cc	/^static double function(const coord_3d& r) {$/;"	f	file:
function	src/madness/tensor/tensorexcept.h	/^        const char *function;$/;"	m	class:madness::TensorException
function	src/madness/world/madness_exception.h	/^        const char *function; \/\/\/< Function where the exception occurred.$/;"	m	class:madness::MadnessException
functionT	src/apps/chem/SCF.h	/^typedef Function<double,3> functionT;$/;"	t	namespace:madness
functionT	src/apps/chem/SCFOperators.h	/^	typedef Function<T,NDIM> functionT;$/;"	t	class:madness::Exchange
functionT	src/apps/chem/SCFOperators.h	/^    typedef Function<T,NDIM> functionT;$/;"	t	class:madness::DerivativeOperator
functionT	src/apps/chem/SCFOperators.h	/^    typedef Function<T,NDIM> functionT;$/;"	t	class:madness::Kinetic
functionT	src/apps/chem/SCFOperators.h	/^    typedef Function<T,NDIM> functionT;$/;"	t	class:madness::Laplacian
functionT	src/apps/chem/corepotential.cc	/^typedef Function<double,3> functionT;$/;"	t	namespace:madness	file:
functionT	src/apps/chem/distpm.cc	/^typedef Function<double,3> functionT;$/;"	t	namespace:madness	file:
functionT	src/apps/exciting/wannier.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/apps/hf/esolver.h	/^typedef Function<std::complex<double>,3> functionT;$/;"	t
functionT	src/apps/hf/solver.h	/^    typedef Function<valueT,NDIM> functionT;$/;"	t	class:madness::Solver
functionT	src/apps/hf/solver.h	/^    typedef Function<valueT,NDIM> functionT;$/;"	t	class:madness::Subspace
functionT	src/apps/hf/solver.h	/^    typedef Function<valueT,NDIM> functionT;$/;"	t	class:madness::SubspaceK
functionT	src/apps/moldft/mcpfit.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/apps/nick/tdse1.cc	/^typedef Function<double,NDIM> functionT;$/;"	t	file:
functionT	src/apps/nick/test.cc	/^typedef Function<double,NDIM> functionT;$/;"	t	file:
functionT	src/apps/nick/wavef.h	/^typedef Function<double,NDIM> functionT;$/;"	t
functionT	src/apps/nick/wfSlice.cc	/^typedef Function<double,NDIM> functionT;$/;"	t	file:
functionT	src/apps/polar/corepotential.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/apps/polar/distpm.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/apps/polar/mcpfit.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/apps/polar/moldft.cc	/^typedef Function<double, 3> functionT;$/;"	t	file:
functionT	src/apps/tdse/tdse.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/apps/tdse/tdse.confused.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/apps/tdse/tdse4.cc	/^typedef Function<double,4> functionT;$/;"	t	file:
functionT	src/examples/h2dft.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/examples/heat.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/examples/hedft.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/examples/hefxc.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/examples/navstokes_cosines.cc	/^typedef Function<double, 3> functionT;$/;"	t	file:
functionT	src/examples/newsolver_lda.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/examples/tdse_example.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/madness/mra/derivative.h	/^        typedef Function<T,NDIM>        functionT;$/;"	t	class:madness::Derivative
functionT	src/madness/mra/derivative.h	/^        typedef Function<T,NDIM>        functionT;$/;"	t	class:madness::DerivativeBase
functionT	src/madness/mra/testbc.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/madness/mra/testdiff1D.cc	/^typedef Function<double,1> functionT;$/;"	t	file:
functionT	src/madness/mra/testdiff1Db.cc	/^typedef Function<double,1> functionT;$/;"	t	file:
functionT	src/madness/mra/testdiff2D.cc	/^typedef Function<double,2> functionT;$/;"	t	file:
functionT	src/madness/mra/testdiff3D.cc	/^typedef Function<double,3> functionT;$/;"	t	file:
functionT	src/madness/mra/testpdiff.cc	/^typedef Function<double,NDIM> functionT;$/;"	t	file:
functionT	src/madness/world/taskfn.h	/^        typedef fnT functionT; \/\/\/< The task function type$/;"	t	struct:madness::TaskFn
function_defaults_1d	src/madness/mra/functypedefs.h	/^    typedef FunctionDefaults<1> function_defaults_1d;$/;"	t	namespace:madness
function_defaults_2d	src/madness/mra/functypedefs.h	/^    typedef FunctionDefaults<2> function_defaults_2d;$/;"	t	namespace:madness
function_defaults_3d	src/madness/mra/functypedefs.h	/^    typedef FunctionDefaults<3> function_defaults_3d;$/;"	t	namespace:madness
function_defaults_4d	src/madness/mra/functypedefs.h	/^    typedef FunctionDefaults<4> function_defaults_4d;$/;"	t	namespace:madness
function_defaults_5d	src/madness/mra/functypedefs.h	/^    typedef FunctionDefaults<5> function_defaults_5d;$/;"	t	namespace:madness
function_defaults_6d	src/madness/mra/functypedefs.h	/^    typedef FunctionDefaults<6> function_defaults_6d;$/;"	t	namespace:madness
function_enabler	src/madness/world/world_task_queue.h	/^        struct function_enabler : public$/;"	s	namespace:madness::detail
function_enabler_helper	src/madness/world/world_task_queue.h	/^        struct function_enabler_helper {$/;"	s	namespace:madness::detail
function_enabler_helper	src/madness/world/world_task_queue.h	/^        struct function_enabler_helper<false, returnT> { };$/;"	s	namespace:madness::detail
function_name	src/madness/mra/mraplot.cc	/^    std::string function_name;       \/\/ function name for VTK output$/;"	m	class:Plotter	file:
function_real2complex	src/apps/hf/complexfun.h	/^Function<std::complex<Q>,NDIM> function_real2complex(const Function<Q,NDIM>& r)$/;"	f	namespace:madness
function_real2complex	src/apps/polar/preal.cc	/^Function<std::complex<double>,3> function_real2complex(const Function<double,3>& r)$/;"	f
function_real2complex_op	src/apps/hf/complexfun.h	/^struct function_real2complex_op$/;"	s	namespace:madness
function_real2complex_op	src/apps/polar/preal.cc	/^struct function_real2complex_op$/;"	s	file:
function_traits	src/madness/world/function_traits.h	/^        struct function_traits : public std::false_type {};$/;"	s	namespace:madness::detail
function_traits	src/madness/world/function_traits.h	/^        struct function_traits<fnT(argTs...), typename std::enable_if_t<is_type<std::result_of_t<fnT(argTs...)>>::value>> {$/;"	s	namespace:madness::detail
function_traits	src/madness/world/function_traits.h	/^        struct function_traits<resultT(*&)(argTs...), void> {$/;"	s	namespace:madness::detail
function_traits	src/madness/world/function_traits.h	/^        struct function_traits<resultT(*)(argTs...), void> {$/;"	s	namespace:madness::detail
functional	src/apps/hf/electronicstructureparams.h	/^  int functional;$/;"	m	struct:madness::ElectronicStructureParams
functions	src/apps/chem/CCStructures.h	/^    CC_functionmap functions;$/;"	m	struct:madness::CC_vecfunction
functions	src/apps/chem/CCStructures.h	/^    std::vector<CCPairFunction> functions;$/;"	m	class:madness::CCPair
functor	src/madness/mra/funcimpl.h	/^        std::shared_ptr< FunctionFunctorInterface<T,NDIM> > functor;$/;"	m	class:madness::FunctionImpl
functor	src/madness/mra/function_factory.h	/^    FunctionFactory& >::type functor(const opT& op) {$/;"	f	class:madness::FunctionFactory
functor	src/madness/mra/function_factory.h	/^    functor(const std::shared_ptr<FunctionFunctorInterface<T, NDIM> >& f) {$/;"	f	class:madness::FunctionFactory
functorL	src/madness/mra/testsuite.cc	/^    typedef std::shared_ptr< FunctionFunctorInterface<L,NDIM> > functorL;$/;"	t	class:BinaryOp	file:
functorR	src/madness/mra/testsuite.cc	/^    typedef std::shared_ptr< FunctionFunctorInterface<R,NDIM> > functorR;$/;"	t	class:BinaryOp	file:
functorT	src/apps/chem/SCF.h	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	namespace:madness
functorT	src/apps/chem/corepotential.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	namespace:madness	file:
functorT	src/apps/chem/correlationfactor.h	/^	typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	class:madness::NuclearCorrelationFactor
functorT	src/apps/chem/electronic_correlation_factor.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double,6> > functorT;$/;"	t	class:madness::CorrelationFactor2
functorT	src/apps/exciting/wannier.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/apps/hf/esolver.h	/^typedef std::shared_ptr< FunctionFunctorInterface<std::complex<double>,3> > functorT;$/;"	t
functorT	src/apps/moldft/mcpfit.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/apps/nick/tdse1.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,NDIM> > functorT;$/;"	t	file:
functorT	src/apps/nick/wavef.h	/^typedef std::shared_ptr< madness::FunctionFunctorInterface<complexd,NDIM> > functorT;$/;"	t
functorT	src/apps/polar/corepotential.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/apps/polar/mcpfit.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/apps/polar/moldft.cc	/^typedef std::shared_ptr<FunctionFunctorInterface<double, 3>> functorT;$/;"	t	file:
functorT	src/apps/tdse/tdse.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/apps/tdse/tdse.confused.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/apps/tdse/tdse4.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,4> > functorT;$/;"	t	file:
functorT	src/examples/csqrt.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<std::complex<double>,1> > functorT;$/;"	t	file:
functorT	src/examples/h2dft.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/examples/heat.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/examples/hedft.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/examples/hefxc.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/examples/newsolver_lda.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/examples/tdse_example.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/madness/mra/testbc.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/madness/mra/testgaxpyext.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functorT	src/madness/mra/testinnerext.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > functorT;$/;"	t	file:
functor_r2	src/apps/chem/CCPotentials.cc	/^  static double functor_r2(const coord_3d &r){ return (r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);}$/;"	f	namespace:madness
functor_x	src/apps/chem/CCPotentials.cc	/^  static double functor_x(const coord_3d &r){ return r[0];}$/;"	f	namespace:madness
functor_y	src/apps/chem/CCPotentials.cc	/^  static double functor_y(const coord_3d &r){ return r[1];}$/;"	f	namespace:madness
funmap_type	src/madness/external/muParser/muParserCallback.h	/^typedef std::map<string_type, ParserCallback> funmap_type; $/;"	t	namespace:mu
funtype	src/examples/compiler/mra-driver.hh	/^    static Type funtype(Type t) {$/;"	f	class:Exp
fusedim	src/madness/tensor/tensor.h	/^        Tensor<T> fusedim(long i) {$/;"	f	class:madness::Tensor
fusedim	src/madness/tensor/tensor.h	/^        const Tensor<T> fusedim(long i) const {$/;"	f	class:madness::Tensor
fusedim	src/madness/tensor/tensortrain.h	/^		void fusedim(const long i) {$/;"	f	class:madness::TensorTrain
fusedim_inplace	src/madness/tensor/basetensor.cc	/^    void BaseTensor::fusedim_inplace(long i) { \/\/ fuse i,i+1 --> i$/;"	f	class:madness::BaseTensor
futureT	src/madness/world/taskfn.h	/^            typedef Future<resultT> futureT;$/;"	t	struct:madness::detail::task_result_type
futureT	src/madness/world/taskfn.h	/^        typedef typename detail::task_result_type<fnT>::futureT futureT;$/;"	t	struct:madness::TaskFn
futureT	src/madness/world/world_object.h	/^            typedef Future< REMFUTURE(MEMFUN_RETURNT(memfunT)) > futureT;$/;"	t	struct:madness::detail::info
futureT	src/madness/world/worlddc.h	/^        typedef Future<iterator> futureT;$/;"	t	class:madness::WorldContainer
future_to_ref	src/madness/world/future.h	/^    struct future_to_ref {$/;"	s	namespace:madness
future_to_ref	src/madness/world/future.h	/^    struct future_to_ref<Future<T>&> {$/;"	s	namespace:madness
future_to_ref	src/madness/world/future.h	/^    struct future_to_ref<Future<T>*> {$/;"	s	namespace:madness
future_to_ref	src/madness/world/future.h	/^    struct future_to_ref<Future<T>> {$/;"	s	namespace:madness
future_to_ref	src/madness/world/future.h	/^    struct future_to_ref<const Future<T>&> {$/;"	s	namespace:madness
future_vector_factory	src/madness/world/future.h	/^    std::vector< Future<T> > future_vector_factory(std::size_t n) {$/;"	f	namespace:madness
fxc	src/apps/polar/xcfunctional_ldaonly.cc	/^madness::Tensor<double> XCfunctional::fxc(const std::vector< madness::Tensor<double> >& t, const int ispin, const int what) const$/;"	f	class:madness::XCfunctional
fxc	src/apps/polar/xcfunctional_libxc.cc	/^madness::Tensor<double> XCfunctional::fxc(const std::vector< madness::Tensor<double> >& t, const int ispin, const int what) const$/;"	f	class:madness::XCfunctional
fxc_apply	src/apps/chem/xcfunctional_ldaonly.cc	/^std::vector<madness::Tensor<double> > XCfunctional::fxc_apply(const std::vector<Tensor<double> >& t,$/;"	f	class:madness::XCfunctional
fxc_apply	src/apps/chem/xcfunctional_libxc.cc	/^std::vector<madness::Tensor<double> > XCfunctional::fxc_apply($/;"	f	class:madness::XCfunctional
fxexact	src/examples/navstokes_cosines.cc	/^static double fxexact(const coordT3d& r)$/;"	f	file:
fxxx	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxxx	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxxy	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxxy	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxxymyyy	src/apps/adrian/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fxxymyyy	src/apps/bryan/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fxxz	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxxz	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxxzmyyz	src/apps/adrian/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fxxzmyyz	src/apps/bryan/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fxyy	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxyy	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxyymxxx	src/apps/adrian/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fxyymxxx	src/apps/bryan/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fxyz	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxyz	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxzz	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxzz	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fxzzmrrx	src/apps/adrian/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fxzzmrrx	src/apps/bryan/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fyexact	src/examples/navstokes_cosines.cc	/^static double fyexact(const coordT3d& r)$/;"	f	file:
fyyy	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fyyy	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fyyz	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fyyz	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fyzz	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fyzz	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fyzzmrry	src/apps/adrian/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fyzzmrry	src/apps/bryan/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fzexact	src/examples/navstokes_cosines.cc	/^static double fzexact(const coordT3d& r)$/;"	f	file:
fzzz	src/apps/adrian/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fzzz	src/apps/bryan/gaussian.h	/^  fxxx, fxxy, fxxz, fxyy, fxyz, fxzz, fyyy, fyyz, fyzz, fzzz,$/;"	m	class:slymer::GaussianType
fzzzmrrz	src/apps/adrian/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
fzzzmrrz	src/apps/bryan/gaussian.h	/^  fxyymxxx, fxxzmyyz, fxzzmrrx, fzzzmrrz, fyzzmrry, fxxymyyy,$/;"	m	class:slymer::GaussianType
g	src/apps/chem/molecularbasis.h	/^    std::vector<ContractedGaussianShell> g;$/;"	m	class:madness::AtomicBasis
g	src/apps/hf/molecularbasis.h	/^    std::vector<ContractedGaussianShell> g;$/;"	m	class:AtomicBasis
g	src/apps/moldft/fci/fci.F	/^      double precision ecore, h(maxtri), g(/;"	v	program:fci
g	src/apps/polar/molecularbasis.h	/^    std::vector<ContractedGaussianShell> g;$/;"	m	class:AtomicBasis
g	src/examples/molecularmask.h	/^    const MolecularVolumeMaskGrad g;$/;"	m	class:MolecularVolumeExponentialSwitchLogGrad
g	src/madness/mra/funcimpl.h	/^            ctL g;$/;"	m	struct:madness::FunctionImpl::multiply_op
g	src/madness/mra/funcimpl.h	/^            ctT f,g;$/;"	m	struct:madness::FunctionImpl::add_op
g	src/madness/mra/funcimpl.h	/^            implT* g;$/;"	m	struct:madness::FunctionImpl::do_average
g	src/madness/mra/funcimpl.h	/^        const implL* g;     \/\/ for use of its cdata only$/;"	m	struct:madness::hartree_convolute_leaf_op
g	src/madness/mra/testgconv.cc	/^double g(const coord_1d& r) {$/;"	f
g	src/madness/mra/vmra1.h	/^        const std::vector< Function<R,NDIM> >& g;$/;"	m	struct:madness::MatrixInnerTask
g0	src/madness/mra/function_common_data.h	/^        Tensor<double> h0, h1, g0, g1;      \/\/\/< The separate blocks of twoscale coefficients$/;"	m	class:madness::FunctionCommonData
g0	src/madness/mra/test_mra6.cc	/^		GenTensor<double> g0;$/;"	m	class:__anon12::BinaryGenTest	file:
g0	src/madness/mra/test_mra6.cc	/^		GenTensor<double> g0;$/;"	m	class:__anon12::UnaryGenTest	file:
g0	src/madness/mra/twoscale.cc	/^        Tensor<double> g0;$/;"	m	class:madness::twoscale_cache_class	file:
g0	src/madness/tensor/test_gentensor.cc	/^		LowRankTensor<double> g0;$/;"	m	class:__anon43::BinaryGenTest	file:
g0	src/madness/tensor/test_gentensor.cc	/^		LowRankTensor<double> g0;$/;"	m	class:__anon43::UnaryGenTest	file:
g0T	src/madness/mra/function_common_data.h	/^        Tensor<double> h0T, h1T, g0T, g1T;  \/\/\/< The separate blocks of twoscale coefficients$/;"	m	class:madness::FunctionCommonData
g0_filtered	src/madness/mra/qmprop.cc	/^        double_complex g0_filtered(double k, double c, double t) {$/;"	f	class:madness::BandlimitedPropagator	file:
g0g1	src/madness/mra/tools/twoscalecoeffs.py	/^def g0g1(k):$/;"	f
g1	src/madness/mra/derivative.h	/^        const functionT g1;  \/\/\/< Function describing the boundary condition on the right side$/;"	m	class:madness::Derivative
g1	src/madness/mra/function_common_data.h	/^        Tensor<double> h0, h1, g0, g1;      \/\/\/< The separate blocks of twoscale coefficients$/;"	m	class:madness::FunctionCommonData
g1	src/madness/mra/test_mra6.cc	/^		GenTensor<double> g1;$/;"	m	class:__anon12::BinaryGenTest	file:
g1	src/madness/mra/twoscale.cc	/^        Tensor<double> g1;$/;"	m	class:madness::twoscale_cache_class	file:
g1	src/madness/tensor/test_gentensor.cc	/^		LowRankTensor<double> g1;$/;"	m	class:__anon43::BinaryGenTest	file:
g10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator10 g10_;$/;"	m	class:testing::internal::CartesianProductHolder10
g10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T10> g10_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g12	src/apps/chem/CCPotentials.h	/^    CCConvolutionOperator g12;$/;"	m	class:madness::CCPotentials
g12	src/apps/chem/TDHF.h	/^	CCConvolutionOperator g12;$/;"	m	class:madness::TDHF
g12	src/madness/mra/function_factory.h	/^    g12(const Function<T, NDIM>& f) {$/;"	f	class:madness::CompositeFactory
g1T	src/madness/mra/function_common_data.h	/^        Tensor<double> h0T, h1T, g0T, g1T;  \/\/\/< The separate blocks of twoscale coefficients$/;"	m	class:madness::FunctionCommonData
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder10
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder2
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder3
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder4
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder5
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder6
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder7
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder8
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder9
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g2	src/madness/mra/derivative.h	/^        const functionT g2;  \/\/\/< Function describing the boundary condition on the left side$/;"	m	class:madness::Derivative
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder10
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder2
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder3
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder4
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder5
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder6
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder7
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder8
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder9
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder10
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder3
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder4
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder5
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder6
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder7
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder8
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder9
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder10
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder4
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder5
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder6
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder7
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder8
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder9
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder10
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder5
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder6
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder7
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder8
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder9
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder10
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder6
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder7
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder8
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder9
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder10
g7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder7
g7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder8
g7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder9
g7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder10
g8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder8
g8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder9
g8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder10
g9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder9
g9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g_argvs	src/madness/external/gtest/src/gtest-port.cc	/^::std::vector<testing::internal::string> g_argvs;$/;"	m	namespace:testing::internal	file:
g_captured_stderr	src/madness/external/gtest/src/gtest-port.cc	/^static CapturedStream* g_captured_stderr = NULL;$/;"	m	namespace:testing::internal	file:
g_captured_stdout	src/madness/external/gtest/src/gtest-port.cc	/^static CapturedStream* g_captured_stdout = NULL;$/;"	m	namespace:testing::internal	file:
g_executable_path	src/madness/external/gtest/src/gtest.cc	/^std::string g_executable_path;$/;"	m	namespace:testing::internal	file:
g_help_flag	src/madness/external/gtest/src/gtest.cc	/^bool g_help_flag = false;$/;"	m	namespace:testing::internal	file:
g_in_fast_death_test_child	src/madness/external/gtest/src/gtest-death-test.cc	/^static bool g_in_fast_death_test_child = false;$/;"	m	namespace:testing::internal	file:
g_init_gtest_count	src/madness/external/gtest/src/gtest.cc	/^GTEST_API_ int g_init_gtest_count = 0;$/;"	m	namespace:testing::internal	file:
g_injected_test_argvs	src/madness/external/gtest/src/gtest-port.cc	/^static const ::std::vector<testing::internal::string>* g_injected_test_argvs =$/;"	m	namespace:testing::internal	file:
g_states	src/apps/adrian/ResponseFunction2.h	/^  unsigned int g_states;  \/\/ Num. of ground states$/;"	m	class:madness::ResponseFunction
g_states	src/apps/bryan/ResponseFunction2.h	/^      unsigned int g_states; \/\/ Num. of ground states$/;"	m	class:madness::ResponseFunction
galahad	src/madness/world/test_world.cc	/^    double galahad(const string& str, int j, double z) {$/;"	f	class:Mary
gamma	src/apps/chem/CCStructures.h	/^		  double gamma=1.0; \/\/\/ f12 exponent$/;"	m	struct:madness::CCConvolutionOperator::Parameters
gamma	src/apps/chem/CCStructures.h	/^    double gamma()const{$/;"	f	struct:madness::CCParameters
gamma	src/apps/chem/PNOParameters.h	/^	double gamma()const { return get<double >("gamma");}$/;"	f	class:madness::F12Parameters
gamma	src/apps/chem/electronic_correlation_factor.h	/^        double gamma;$/;"	m	class:madness::CorrelationFactor2::R_functor
gamma	src/apps/chem/electronic_correlation_factor.h	/^        double gamma;$/;"	m	class:madness::CorrelationFactor2::U1_functor
gamma	src/apps/chem/electronic_correlation_factor.h	/^        double gamma;$/;"	m	class:madness::CorrelationFactor2::U2_functor
gamma	src/apps/chem/electronic_correlation_factor.h	/^        double gamma;$/;"	m	struct:madness::CorrelationFactor::U
gamma	src/apps/chem/electronic_correlation_factor.h	/^        double gamma;$/;"	m	struct:madness::CorrelationFactor::f2_
gamma	src/apps/chem/electronic_correlation_factor.h	/^        double gamma;$/;"	m	struct:madness::CorrelationFactor::f_over_r_
gamma	src/apps/chem/electronic_correlation_factor.h	/^        double gamma;$/;"	m	struct:madness::CorrelationFactor::fg_
gamma	src/apps/chem/electronic_correlation_factor.h	/^        double gamma;$/;"	m	struct:madness::CorrelationFactor::nablaf2_
gamma	src/apps/chem/electronic_correlation_factor.h	/^    double gamma() const {return _gamma;}$/;"	f	class:madness::CorrelationFactor
gamma	src/apps/chem/electronic_correlation_factor.h	/^    double gamma() const {return _gamma;}$/;"	f	class:madness::CorrelationFactor2
gamma	src/apps/nick/mpreal.h	/^inline const mpreal gamma (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
gamma	src/apps/nick/wavef.cc	/^complexd ScatteringWF::gamma(complexd AA) {$/;"	f	class:ScatteringWF
gamma	src/apps/nick/wavef.cc	/^complexd ScatteringWF::gamma(double re, double im) {$/;"	f	class:ScatteringWF
gamma	src/madness/mra/function_factory.h	/^    TwoElectronFactory& gamma(double g) {$/;"	f	class:madness::TwoElectronFactory
gamma	src/madness/mra/operator.h	/^        const double& gamma() const {return mu_;}$/;"	f	class:madness::SeparatedConvolution
gammaBB	src/apps/nick/wavef.h	/^    complexd gammaBB;$/;"	m	class:ScatteringWF
gamma_	src/madness/mra/function_factory.h	/^    double gamma_;$/;"	m	class:madness::TwoElectronFactory
gamma_data	src/apps/chem/gth_pseudopotential.cc	/^    const double ProjRLMFunctor::gamma_data[17] = {1.0, 0.0, 1.0\/2.0, 0.0, 3.0\/4.0, 0.0, 15.0\/8.0, 0.0, 105.0\/16.0, 0.0, $/;"	m	class:madness::ProjRLMFunctor	file:
gamma_data	src/apps/chem/gth_pseudopotential.h	/^    static const double gamma_data[17];$/;"	m	class:madness::ProjRLMFunctor
gamma_data	src/apps/polar/gth_pseudopotential.h	/^    double gamma_data[17];$/;"	m	class:ProjFunctor
gamma_data	src/apps/polar/gth_pseudopotential.h	/^    double gamma_data[17];$/;"	m	class:ProjRLMFunctor
gauss_3d	src/examples/helium_mp2.cc	/^static double gauss_3d(const coord_3d& r) {$/;"	f	file:
gauss_3d	src/madness/mra/test6.cc	/^static double gauss_3d(const coord_3d& r) {$/;"	f	file:
gauss_6d	src/examples/helium_mp2.cc	/^static double gauss_6d(const coord_6d& r) {$/;"	f	file:
gauss_6d	src/madness/mra/test6.cc	/^static double gauss_6d(const coord_6d& r) {$/;"	f	file:
gauss_func1	src/apps/hf/test_xc.cc	/^static double gauss_func1(const coordT& r)$/;"	f	file:
gauss_func3	src/apps/hf/test_xc.cc	/^static double gauss_func3(const coordT& r)$/;"	f	file:
gauss_legendre	src/madness/mra/legendre.cc	/^    bool gauss_legendre(int n, double xlo, double xhi, double *x, double *w) {$/;"	f	namespace:madness
gauss_legendre_numeric	src/madness/mra/legendre.cc	/^    bool gauss_legendre_numeric(int n, double xlo, double xhi, double *x, double *w) {$/;"	f	namespace:madness
gauss_legendre_test	src/madness/mra/legendre.cc	/^    bool gauss_legendre_test(bool print) {$/;"	f	namespace:madness
gauss_norm	src/examples/smooth.h	/^	double gauss_norm(const double &exponent)const{$/;"	f	class:smooth
gauss_plus_one_3d	src/madness/mra/test6.cc	/^static double gauss_plus_one_3d(const coord_3d& r) {$/;"	f	file:
gauss_plus_tight_3d	src/madness/mra/test6.cc	/^static double gauss_plus_tight_3d(const coord_3d& r) {$/;"	f	file:
gaussian	src/examples/derivatives.cc	/^double gaussian(const coord_3d& r) {$/;"	f
gaussian	src/examples/gaussian.cc	/^double gaussian(const coord_3d& r) {$/;"	f
gaussian1	src/examples/derivatives.cc	/^double gaussian1(const coord_3d& r) {$/;"	f
gaussian2	src/examples/derivatives.cc	/^double gaussian2(const coord_3d& r) {$/;"	f
gaussian3	src/examples/derivatives.cc	/^double gaussian3(const coord_3d& r) {$/;"	f
gaussian_energy	src/examples/derivatives.cc	/^double gaussian_energy() {$/;"	f
gaussian_func	src/apps/hf/test_coulomb.cc	/^static double gaussian_func(const Vector<double, NDIM> r)$/;"	f	file:
gaussian_shift_2d	src/apps/chem/test_pointgroupsymmetry.cc	/^double gaussian_shift_2d(const coord_2d& r) {$/;"	f
gaussian_shift_3d	src/apps/chem/test_pointgroupsymmetry.cc	/^double gaussian_shift_3d(const coord_3d& r) {$/;"	f
gaussian_smoothing	src/examples/smooth.h	/^	Function<T,NDIM> gaussian_smoothing(const Function<T,NDIM> &f, const double &eps=0.04,const std::string &name="nooutput")const{$/;"	f	class:smooth
gaussian_spherical_moments	src/madness/mra/gfit.h	/^	static void gaussian_spherical_moments(double alpha, double R, Tensor<double>& q) {$/;"	f	class:madness::GFit
gaussians	src/apps/adrian/NWChem.h	/^  std::vector<std::unique_ptr<GaussianFunction>> gaussians;$/;"	m	class:slymer::NWChem_Interface
gaussians	src/apps/bryan/NWChem.h	/^  std::vector<std::unique_ptr<GaussianFunction>> gaussians;$/;"	m	class:slymer::NWChem_Interface
gaxpy	src/madness/mra/funcimpl.h	/^        void gaxpy(T alpha, const FunctionImpl<L,NDIM>& left,$/;"	f	class:madness::FunctionImpl
gaxpy	src/madness/mra/mra.h	/^        Function<T,NDIM>& gaxpy(const T& alpha,$/;"	f	class:madness::Function
gaxpy	src/madness/mra/vmra.h	/^void gaxpy(World& world, Q alpha, std::vector<Function<T, NDIM>>& a, Q beta,$/;"	f	namespace:madness
gaxpy	src/madness/mra/vmra1.h	/^      void gaxpy(World& world,$/;"	f	namespace:madness
gaxpy	src/madness/tensor/gmres.h	/^            virtual Function<scalar_type, NDIM> & gaxpy($/;"	f	class:madness::FunctionSpace
gaxpy	src/madness/tensor/gmres.h	/^            virtual Vector<Function<scalar_type, FDIM>, VDIM> & gaxpy($/;"	f	class:madness::VectorOfFunctionsSpace
gaxpy	src/madness/tensor/gmres.h	/^            virtual Vector<scalar_type, NDIM> & gaxpy($/;"	f	class:madness::VectorSpace
gaxpy	src/madness/tensor/lowranktensor.h	/^    LowRankTensor& gaxpy(const T alpha, const LowRankTensor& other, const T beta) {$/;"	f	class:madness::LowRankTensor
gaxpy	src/madness/tensor/tensor.h	/^        Tensor<T>& gaxpy(T alpha, const Tensor<T>& t, T beta) {$/;"	f	class:madness::Tensor
gaxpy	src/madness/tensor/tensortrain.h	/^        TensorTrain<T>& gaxpy(T alpha, const TensorTrain<T>& rhs, T beta) {$/;"	f	class:madness::TensorTrain
gaxpy	src/madness/tensor/tensortrain.h	/^        TensorTrain<T>& gaxpy(const std::vector<Slice>& s1,$/;"	f	class:madness::TensorTrain
gaxpy1	src/examples/vnucso.cc	/^void gaxpy1(World& world,$/;"	f
gaxpy_ext	src/madness/mra/funcimpl.h	/^        void gaxpy_ext(const FunctionImpl<L,NDIM>* left, T (*f)(const coordT&), T alpha, T beta, double tol, bool fence) {$/;"	f	class:madness::FunctionImpl
gaxpy_ext	src/madness/mra/mra.h	/^        void gaxpy_ext(const Function<L,NDIM>& left, T (*f)(const coordT&), T alpha, T beta, double tol, bool fence=true) const {$/;"	f	class:madness::Function
gaxpy_ext_node	src/madness/mra/funcimpl.h	/^        tensorT gaxpy_ext_node(keyT key, Tensor<L> lc, T (*f)(const coordT&), T alpha, T beta) const {$/;"	f	class:madness::FunctionImpl
gaxpy_ext_recursive	src/madness/mra/funcimpl.h	/^        void gaxpy_ext_recursive(const keyT& key, const FunctionImpl<L,NDIM>* left,$/;"	f	class:madness::FunctionImpl
gaxpy_inplace	src/madness/mra/funcimpl.h	/^        void gaxpy_inplace(const T& alpha, const FunctionNode<Q,NDIM>& other, const R& beta) {$/;"	f	class:madness::FunctionNode
gaxpy_inplace	src/madness/mra/funcimpl.h	/^        void gaxpy_inplace(const T& alpha,const FunctionImpl<Q,NDIM>& other, const R& beta, bool fence) {$/;"	f	class:madness::FunctionImpl
gaxpy_inplace_reconstructed	src/madness/mra/funcimpl.h	/^        void gaxpy_inplace_reconstructed(const T& alpha, const FunctionImpl<Q,NDIM>& g, const R& beta, const bool fence) {$/;"	f	class:madness::FunctionImpl
gaxpy_oop	src/madness/mra/mra.h	/^        Function<T,NDIM>& gaxpy_oop(T alpha, const Function<L,NDIM>& left,$/;"	f	class:madness::Function
gaxpy_oop	src/madness/mra/vmra.h	/^gaxpy_oop(Q alpha, const std::vector<Function<T, NDIM>>& a, Q beta,$/;"	f	namespace:madness
gaxpy_oop_reconstructed	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::gaxpy_oop_reconstructed(const double alpha, const implT& f,$/;"	f	class:madness::FunctionImpl
gcd_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    int height_, size_, gcd_;$/;"	m	class:elem::Grid
gconvh	src/madness/mra/testgconv.cc	/^double gconvh(const coord_1d& r) {$/;"	f
geev	src/madness/tensor/lapack.cc	/^    void geev(const Tensor<T>& A, Tensor<T>& VR, Tensor<std::complex<T>>& e) {$/;"	f	namespace:madness
gelss	src/madness/tensor/lapack.cc	/^    void gelss(const Tensor<T>& a, const Tensor<T>& b, double rcond,$/;"	f	namespace:madness
gemm	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NN.hpp	/^namespace gemm {$/;"	n	namespace:elem
gemm	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/NT.hpp	/^namespace gemm {$/;"	n	namespace:elem
gemm	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TN.hpp	/^namespace gemm {$/;"	n	namespace:elem
gemm	src/madness/external/elemental/include/elemental/blas-like/level3/Gemm/TT.hpp	/^namespace gemm {$/;"	n	namespace:elem
gemm	src/madness/tensor/cblas.h	/^    inline void gemm(const CBLAS_TRANSPOSE OpA, const CBLAS_TRANSPOSE OpB,$/;"	f	namespace:madness::cblas
gemm_typelist	src/madness/tensor/tempspec.py	/^gemm_typelist = ["double","float","double_complex","float_complex"]$/;"	v
gemv	src/madness/tensor/cblas.h	/^    inline void gemv(const CBLAS_TRANSPOSE OpA, const integer m, const integer n,$/;"	f	namespace:madness::cblas
gen	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def gen(self, f, perm, size, func_name='mtxmq'):$/;"	m	class:MTXMGen
gen	src/madness/world/test_queue.cc	/^    const int gen;$/;"	m	class:Task	file:
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    typedef GeneralBlockDistMatrix<T,CIRC,CIRC> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    typedef GeneralBlockDistMatrix<T,MC,MR> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    typedef GeneralBlockDistMatrix<T,MC,STAR> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    typedef GeneralBlockDistMatrix<T,MD,STAR> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    typedef GeneralBlockDistMatrix<T,MR,MC> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    typedef GeneralBlockDistMatrix<T,MR,STAR> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    typedef GeneralBlockDistMatrix<T,STAR,MC> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    typedef GeneralBlockDistMatrix<T,STAR,MD> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    typedef GeneralBlockDistMatrix<T,STAR,MR> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    typedef GeneralBlockDistMatrix<T,STAR,STAR> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    typedef GeneralBlockDistMatrix<T,STAR,VC> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    typedef GeneralBlockDistMatrix<T,STAR,VR> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    typedef GeneralBlockDistMatrix<T,VC,STAR> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    typedef GeneralBlockDistMatrix<T,VR,STAR> genType;$/;"	t	class:elem::BlockDistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    typedef GeneralDistMatrix<T,CIRC,CIRC> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    typedef GeneralDistMatrix<T,MC,MR> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    typedef GeneralDistMatrix<T,MC,STAR> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    typedef GeneralDistMatrix<T,MD,STAR> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    typedef GeneralDistMatrix<T,MR,MC> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    typedef GeneralDistMatrix<T,MR,STAR> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    typedef GeneralDistMatrix<T,STAR,MC> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    typedef GeneralDistMatrix<T,STAR,MD> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    typedef GeneralDistMatrix<T,STAR,MR> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    typedef GeneralDistMatrix<T,STAR,STAR> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    typedef GeneralDistMatrix<T,STAR,VC> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    typedef GeneralDistMatrix<T,STAR,VR> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    typedef GeneralDistMatrix<T,VC,STAR> genType;$/;"	t	class:elem::DistMatrix
genType	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    typedef GeneralDistMatrix<T,VR,STAR> genType;$/;"	t	class:elem::DistMatrix
gen_ce	src/apps/hf/ewald.cc	/^void gen_ce(double mu, double xlo, double eps, Tensor<double>& c, Tensor<double>& e)$/;"	f
general_transform	src/madness/tensor/gentensor.h	/^        GenTensor<T> general_transform(const Tensor<Q> c[]) const {$/;"	f	class:madness::GenTensor
general_transform	src/madness/tensor/gentensor.h	/^    GenTensor<T> general_transform(const GenTensor<T>& t, const Tensor<T> c[]) {$/;"	f	namespace:madness
general_transform	src/madness/tensor/gentensor.h	/^    GenTensor<TENSOR_RESULT_TYPE(T,Q)> general_transform(const GenTensor<T>& t, const Tensor<Q> c[]) {$/;"	f	namespace:madness
general_transform	src/madness/tensor/lowranktensor.h	/^    LowRankTensor<TENSOR_RESULT_TYPE(T,Q)> general_transform(const Tensor<Q> c[]) const {$/;"	f	class:madness::LowRankTensor
general_transform	src/madness/tensor/lowranktensor.h	/^LowRankTensor<TENSOR_RESULT_TYPE(T,Q)> general_transform(const LowRankTensor<T>& t, const Tensor<Q> c[]) {$/;"	f	namespace:madness
general_transform	src/madness/tensor/srconf.h	/^		SRConf<TENSOR_RESULT_TYPE(T,Q) > general_transform(const Tensor<Q> c[]) const {$/;"	f	class:madness::SRConf
general_transform	src/madness/tensor/tensor.h	/^    Tensor<TENSOR_RESULT_TYPE(T,Q)> general_transform(const Tensor<T>& t, const Tensor<Q> c[]) {$/;"	f	namespace:madness
general_transform	src/madness/tensor/tensortrain.h	/^    TensorTrain<TENSOR_RESULT_TYPE(T,Q)> general_transform(const TensorTrain<T>& t,$/;"	f	namespace:madness
generate	src/madness/misc/ran.cc	/^    void Random::generate() {$/;"	f	class:madness::Random
generate_G_vectors	src/apps/hf/ewald.cc	/^std::vector< Vector<double,3> > generate_G_vectors(World& world, double maxGlen = 15.0)$/;"	f
generate_R_vectors	src/apps/hf/ewald.cc	/^std::vector< Vector<double,3> > generate_R_vectors(World& world, double maxRlen = 50.0)$/;"	f
generate_cxx	src/examples/compiler/mra-driver.hh	/^    void generate_cxx(std::ostream& file) const {$/;"	f	class:Exp
generate_cxx	src/examples/compiler/mra-driver.hh	/^    void generate_cxx(std::ostream& file) {$/;"	f	class:mra_driver
generate_gvectors	src/apps/exciting/wannier.cc	/^  void generate_gvectors()$/;"	f	class:ExcitingApp
generate_lvectors	src/apps/exciting/wannier.cc	/^  void generate_lvectors()$/;"	f	class:ExcitingApp
generate_tex	src/examples/compiler/mra-driver.hh	/^    void generate_tex(std::ostream& file) const {$/;"	f	class:Exp
generate_tex	src/examples/compiler/mra-driver.hh	/^    void generate_tex(std::ostream& file) const {$/;"	f	class:mra_driver
generator	src/madness/external/elemental/src/core/global.cpp	/^std::mt19937 generator;$/;"	m	namespace:__anon33	file:
generator	src/madness/world/thread.h	/^        static TaskAttributes generator() {$/;"	f	class:madness::TaskAttributes
genkmesh	src/apps/hf/solver.h	/^    std::vector<KPoint> genkmesh(unsigned int ngridk0, unsigned ngridk1, unsigned int ngridk2,$/;"	f	class:madness::Solver
geometric_series	src/madness/tensor/gfit.cc	/^Tensor<double> geometric_series(long n, double a, double r) {$/;"	f
geqp3	src/madness/tensor/lapack.cc	/^    void geqp3(Tensor<T>& A, Tensor<T>& tau, Tensor<integer>& jpvt) {$/;"	f	namespace:madness
geqp3_result	src/madness/tensor/lapack.cc	/^    void geqp3_result(Tensor<T>& A, Tensor<T>& tau, Tensor<integer>& jpvt,$/;"	f	namespace:madness
ger	src/madness/tensor/cblas.h	/^    inline void ger(const integer m, const integer n, const complex_real4 alpha,$/;"	f	namespace:madness::cblas
ger	src/madness/tensor/cblas.h	/^    inline void ger(const integer m, const integer n, const complex_real8 alpha,$/;"	f	namespace:madness::cblas
ger	src/madness/tensor/cblas.h	/^    inline void ger(const integer m, const integer n, const double alpha,$/;"	f	namespace:madness::cblas
ger	src/madness/tensor/cblas.h	/^    inline void ger(const integer m, const integer n, const float alpha,$/;"	f	namespace:madness::cblas
gersch	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *gersch;$/;"	m	struct:__anon29
gersch	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double *restrict gersch;$/;"	m	struct:__anon22
gesv	src/madness/tensor/lapack.cc	/^    void gesv(const Tensor<T>& a, const Tensor<T>& b, Tensor<T>& x) {$/;"	f	namespace:madness
gesvp	src/madness/tensor/elem.h	/^    void gesvp(World& world, const Tensor<T>& a, const Tensor<T>& b, Tensor<T>& x) {$/;"	f	namespace:madness
get	src/apps/chem/CCStructures.h	/^    real_function_3d get()const{return function;}$/;"	f	struct:madness::CCFunction
get	src/apps/chem/PNOTensors.h	/^	madness::Tensor<T> get(size_t i, size_t j, size_t k) const {$/;"	f	class:__anon48::Tensor_IJ_IK
get	src/apps/chem/PNOTensors.h	/^	madness::Tensor<T> get(size_t i, size_t j, size_t k) const {$/;"	f	class:__anon48::Tensor_IJ_KJ
get	src/apps/chem/QCCalculationParametersBase.h	/^	T get(const std::string key) const {$/;"	f	class:madness::QCCalculationParametersBase
get	src/examples/testsolver.cc	/^    double get() const {return x;}$/;"	f	class:F
get	src/examples/testspectralprop.cc	/^    double get(int i) const {return v[i];}$/;"	f	class:Fred
get	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  T* get() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
get	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  T* get() const { return ptr_; }$/;"	f	class:testing::internal::scoped_ptr
get	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const T& get() const { return *pointer(); }$/;"	f	class:testing::internal::ThreadLocal
get	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const T& get() const { return value_; }$/;"	f	class:testing::internal::ThreadLocal
get	src/madness/external/muParser/muParserFixes.h	/^	  _Ty *get() const        { return (_Myptr);	}$/;"	f	class:std::_my_auto_ptr
get	src/madness/misc/ran.h	/^        double get() {$/;"	f	class:madness::Random
get	src/madness/mra/convolution1d.h	/^        static std::shared_ptr< GaussianConvolution1D<Q> > get(int k, double expnt, int m, bool periodic) {$/;"	f	struct:madness::GaussianConvolution1DCache
get	src/madness/mra/function_common_data.h	/^        get(int k) {$/;"	f	class:madness::FunctionCommonData
get	src/madness/tensor/distributed_matrix.h	/^        T get(int64_t i, int64_t j) const {$/;"	f	class:madness::DistributedMatrix
get	src/madness/world/dist_cache.h	/^                const madness::Future<valueT>& get() const {$/;"	f	class:madness::detail::DistCache::Cache
get	src/madness/world/future.h	/^        T& get() {$/;"	f	class:madness::FutureImpl
get	src/madness/world/future.h	/^        const T& get() const {$/;"	f	class:madness::FutureImpl
get	src/madness/world/future.h	/^        const vectorT& get() const {$/;"	f	class:madness::Future
get	src/madness/world/future.h	/^        inline T& get() {$/;"	f	class:madness::Future
get	src/madness/world/future.h	/^        inline const T& get() const {$/;"	f	class:madness::Future
get	src/madness/world/future.h	/^        vectorT& get() {$/;"	f	class:madness::Future
get	src/madness/world/test_dc.cc	/^    int get() const {$/;"	f	struct:Node
get	src/madness/world/test_future3.cc	/^    int get() const {$/;"	f	class:Foo
get	src/madness/world/test_tree.cc	/^    double get() const {$/;"	f	struct:Node
get	src/madness/world/test_world.cc	/^    double get() const {$/;"	f	struct:Node
get	src/madness/world/test_world.cc	/^    long get() const {$/;"	f	class:B
get	src/madness/world/test_world.cc	/^    uint64_t get() const {$/;"	f	class:Mary
get	src/madness/world/worldptr.h	/^            pointer get() const {$/;"	f	class:madness::detail::WorldPtr
get	src/madness/world/worldref.h	/^        pointerT get() const {$/;"	f	class:madness::RemoteReference
get0	src/madness/world/test_world.cc	/^    int get0() {$/;"	f	class:Foo
get0c	src/madness/world/test_world.cc	/^    int get0c() const {$/;"	f	class:Foo
get0f	src/madness/world/test_world.cc	/^    Future<int> get0f() {$/;"	f	class:Foo
get1	src/madness/world/test_world.cc	/^    int get1(int a1) {$/;"	f	class:Foo
get1c	src/madness/world/test_world.cc	/^    int get1c(int a1) const {$/;"	f	class:Foo
get2	src/madness/world/test_world.cc	/^    int get2(int a1, char a2) {$/;"	f	class:Foo
get2c	src/madness/world/test_world.cc	/^    int get2c(int a1, char a2) const {$/;"	f	class:Foo
get3	src/madness/world/test_world.cc	/^    int get3(int a1, char a2, short a3) {$/;"	f	class:Foo
get3c	src/madness/world/test_world.cc	/^    int get3c(int a1, char a2, short a3) const {$/;"	f	class:Foo
get4	src/madness/world/test_world.cc	/^    int get4(int a1, char a2, short a3, long a4) {$/;"	f	class:Foo
get4c	src/madness/world/test_world.cc	/^    int get4c(int a1, char a2, short a3, long a4) const {$/;"	f	class:Foo
get5	src/madness/world/test_world.cc	/^    int get5(int a1, char a2, short a3, long a4, short a5) {$/;"	f	class:Foo
get5c	src/madness/world/test_world.cc	/^    int get5c(int a1, char a2, short a3, long a4, short a5) const {$/;"	f	class:Foo
get_ADC2_singles_potential	src/apps/chem/CCPotentials.cc	/^  CCPotentials::get_ADC2_singles_potential(const Pairs<CCPair>& gs_doubles,CC_vecfunction& ex_singles,const Pairs<CCPair>& response_doubles) const {$/;"	f	class:madness::CCPotentials
get_CC2_singles_potential_ex	src/apps/chem/CCPotentials.cc	/^  CCPotentials::get_CC2_singles_potential_ex(const CC_vecfunction& gs_singles,const Pairs<CCPair>& gs_doubles,CC_vecfunction& ex_singles,const Pairs<CCPair>& response_doubles) const {$/;"	f	class:madness::CCPotentials
get_CC2_singles_potential_gs	src/apps/chem/CCPotentials.cc	/^  CCPotentials::get_CC2_singles_potential_gs(const CC_vecfunction& singles,const Pairs<CCPair>& doubles) const {$/;"	f	class:madness::CCPotentials
get_CCS_potential_ex	src/apps/chem/CCPotentials.cc	/^  CCPotentials::get_CCS_potential_ex(CC_vecfunction& x,const bool print) const {$/;"	f	class:madness::CCPotentials
get_CIS_potential	src/apps/chem/CCPotentials.cc	/^  CCPotentials::get_CIS_potential(const CC_vecfunction& x) const {$/;"	f	class:madness::CCPotentials
get_ac	src/apps/chem/nemo.h	/^	AC<3> get_ac() const {return ac;}$/;"	f	class:madness::Nemo
get_active_mo_bra	src/apps/chem/CCPotentials.h	/^    vector_real_function_3d get_active_mo_bra()const{$/;"	f	class:madness::CCPotentials
get_active_mo_bra	src/apps/chem/TDHF.h	/^	const vector_real_function_3d get_active_mo_bra()const{$/;"	f	class:madness::TDHF
get_active_mo_ket	src/apps/chem/CCPotentials.h	/^    vector_real_function_3d get_active_mo_ket()const{$/;"	f	class:madness::CCPotentials
get_active_mo_ket	src/apps/chem/TDHF.h	/^	const vector_real_function_3d get_active_mo_ket()const{$/;"	f	class:madness::TDHF
get_aeps	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_aeps() const {$/;"	f	class:madness::AtomicBasis
get_aeps	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_aeps(const Molecule& molecule, size_t iat) const {$/;"	f	class:madness::AtomicBasisSet
get_all_coords	src/apps/chem/molecule.cc	/^madness::Tensor<double> Molecule::get_all_coords() const$/;"	f	class:madness::Molecule
get_all_coords	src/apps/polar/molecule.cc	/^madness::Tensor<double> Molecule::get_all_coords() const {$/;"	f	class:Molecule
get_all_coords_vec	src/apps/chem/molecule.cc	/^std::vector<madness::Vector<double, 3>> Molecule::get_all_coords_vec() const$/;"	f	class:madness::Molecule
get_all_coords_vec	src/apps/polar/molecule.cc	/^std::vector< madness::Vector<double,3> > Molecule::get_all_coords_vec() const {$/;"	f	class:Molecule
get_all_irreps	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<std::string> get_all_irreps() const {$/;"	f	class:madness::projector_irrep
get_amo	src/apps/chem/SCF.h	/^	const vecfuncT& get_amo() const {return amo;}$/;"	f	class:madness::SCF
get_aocc	src/apps/chem/SCF.h	/^	const tensorT& get_aocc() const {return aocc;}$/;"	f	class:madness::SCF
get_aocc	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_aocc() const {$/;"	f	class:madness::AtomicBasis
get_aoccpsp	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_aoccpsp() const {$/;"	f	class:madness::AtomicBasis
get_apply_randomize	src/madness/mra/funcdefaults.h	/^        static bool get_apply_randomize() {$/;"	f	class:madness::FunctionDefaults
get_atom	src/apps/chem/molecule.cc	/^const Atom &Molecule::get_atom(unsigned int i) const$/;"	f	class:madness::Molecule
get_atom	src/apps/hf/mentity.cc	/^const Atom& MolecularEntity::get_atom(unsigned int i) const {$/;"	f	class:MolecularEntity
get_atom	src/apps/polar/molecule.cc	/^const Atom& Molecule::get_atom(unsigned int i) const {$/;"	f	class:Molecule
get_atom_charge	src/apps/chem/molecule.cc	/^unsigned int Molecule::get_atom_charge(unsigned int i) const$/;"	f	class:madness::Molecule
get_atom_core	src/apps/chem/corepotential.h	/^    AtomCore get_atom_core(unsigned int atn) const {$/;"	f	class:madness::CorePotentialManager
get_atom_core	src/apps/polar/corepotential.h	/^    AtomCore get_atom_core(unsigned int atn) const {$/;"	f	class:CorePotentialManager
get_atom_number	src/apps/chem/molecule.cc	/^unsigned int Molecule::get_atom_number(unsigned int i)$/;"	f	class:madness::Molecule
get_atomic_basis_function	src/apps/chem/molecularbasis.h	/^    AtomicBasisFunction get_atomic_basis_function(const Molecule& molecule, size_t ibf) const {$/;"	f	class:madness::AtomicBasisSet
get_atomic_basis_function	src/apps/hf/molecularbasis.h	/^    AtomicBasisFunction get_atomic_basis_function(const MolecularEntity& mentity, int ibf) const {$/;"	f	class:AtomicBasisSet
get_atomic_basis_function	src/apps/polar/molecularbasis.h	/^    AtomicBasisFunction get_atomic_basis_function(const Molecule& molecule, int ibf) const {$/;"	f	class:AtomicBasisSet
get_atomic_data	src/apps/chem/atomutil.cc	/^const AtomicData& get_atomic_data(unsigned int atomic_number) {$/;"	f	namespace:madness
get_atomic_data	src/apps/hf/mentity.cc	/^const AtomicData& get_atomic_data(unsigned int atomic_number) {$/;"	f
get_atomic_data	src/apps/polar/atomutil.cc	/^const AtomicData& get_atomic_data(unsigned int atomic_number) {$/;"	f
get_atomic_number	src/apps/chem/molecule.h	/^   int get_atomic_number() const {return atomic_number;}$/;"	f	class:madness::Atom
get_atoms	src/apps/chem/molecule.h	/^    const std::vector<Atom> & get_atoms()const{return atoms;}$/;"	f	class:madness::Molecule
get_autorefine	src/madness/mra/funcdefaults.h	/^        static bool get_autorefine() {$/;"	f	class:madness::FunctionDefaults
get_autorefine	src/madness/mra/mraimpl.h	/^    bool FunctionImpl<T,NDIM>::get_autorefine() const {return autorefine;}$/;"	f	class:madness::FunctionImpl
get_avec	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_avec() const {$/;"	f	class:madness::AtomicBasis
get_avec	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_avec(const Molecule& molecule, size_t iat) const {$/;"	f	class:madness::AtomicBasisSet
get_avec	src/apps/hf/molecularbasis.h	/^    const Tensor<double>& get_avec() const {$/;"	f	class:AtomicBasis
get_avec	src/apps/polar/molecularbasis.h	/^    const Tensor<double>& get_avec() const {$/;"	f	class:AtomicBasis
get_average_rank	src/apps/chem/PNO.cpp	/^std::pair<unsigned long int, unsigned long int> PNO::get_average_rank(const std::valarray<vector_real_function_3d>& va) const {$/;"	f	class:madness::PNO
get_bc	src/madness/mra/funcdefaults.h	/^        static const BoundaryConditions<NDIM>& get_bc() {$/;"	f	class:madness::FunctionDefaults
get_bc	src/madness/mra/operator.h	/^        const BoundaryConditions<NDIM>& get_bc() const {return bc;}$/;"	f	class:madness::SeparatedConvolution
get_beps	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_beps() const {$/;"	f	class:madness::AtomicBasis
get_bmo	src/apps/chem/SCF.h	/^	const vecfuncT& get_bmo() const {return bmo;}$/;"	f	class:madness::SCF
get_bocc	src/apps/chem/SCF.h	/^	const tensorT& get_bocc() const {return bocc;}$/;"	f	class:madness::SCF
get_bocc	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_bocc() const {$/;"	f	class:madness::AtomicBasis
get_boccpsp	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_boccpsp() const {$/;"	f	class:madness::AtomicBasis
get_bra_vector	src/apps/chem/projector.h	/^        vecfuncT get_bra_vector() const {return O.get_bra_vector();}$/;"	f	class:madness::QProjector
get_bra_vector	src/apps/chem/projector.h	/^        vecfuncT get_bra_vector() const {return mo_ket_;}$/;"	f	class:madness::Projector
get_bvec	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_bvec() const {$/;"	f	class:madness::AtomicBasis
get_bvec	src/apps/hf/molecularbasis.h	/^    const Tensor<double>& get_bvec() const {$/;"	f	class:AtomicBasis
get_bvec	src/apps/polar/molecularbasis.h	/^    const Tensor<double>& get_bvec() const {$/;"	f	class:AtomicBasis
get_cache_value	src/madness/world/dist_cache.h	/^            static madness::Future<valueT> get_cache_value(const keyT& key) {$/;"	f	class:madness::detail::DistCache
get_cache_value	src/madness/world/dist_cache.h	/^            static void get_cache_value(const keyT& key, madness::Future<valueT>& value) {$/;"	f	class:madness::detail::DistCache
get_calc	src/apps/chem/mp2.h	/^        SCF& get_calc() {return *calc;}$/;"	f	class:madness::HartreeFock
get_calc	src/apps/chem/mp2.h	/^        const SCF& get_calc() const {return *calc;}$/;"	f	class:madness::HartreeFock
get_calc	src/apps/chem/nemo.h	/^	std::shared_ptr<SCF> get_calc() const {return calc;}$/;"	f	class:madness::Nemo
get_canonical_to_irrep_map	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<int> get_canonical_to_irrep_map(std::vector<std::string> sirreps) const {$/;"	f	class:madness::projector_irrep
get_ccc_parameters	src/apps/chem/TDHF.h	/^		typename CCConvolutionOperator::Parameters get_ccc_parameters()const{$/;"	f	struct:madness::TDHF::Parameters
get_cdata	src/madness/mra/mraimpl.h	/^    const FunctionCommonData<T,NDIM>& FunctionImpl<T,NDIM>::get_cdata() const {return cdata;}$/;"	f	class:madness::FunctionImpl
get_cell	src/madness/mra/funcdefaults.h	/^        static const Tensor<double>& get_cell() {$/;"	f	class:madness::FunctionDefaults
get_cell_min_width	src/madness/mra/funcdefaults.h	/^        static double get_cell_min_width() {$/;"	f	class:madness::FunctionDefaults
get_cell_volume	src/madness/mra/funcdefaults.h	/^        static double get_cell_volume() {$/;"	f	class:madness::FunctionDefaults
get_cell_width	src/madness/mra/funcdefaults.h	/^        static const Tensor<double>& get_cell_width() {$/;"	f	class:madness::FunctionDefaults
get_charge_from_file	src/apps/chem/gth_pseudopotential.cc	/^    double get_charge_from_file(const std::string filename, unsigned int atype) {$/;"	f	namespace:madness
get_chunksize	src/madness/world/range.h	/^        unsigned int get_chunksize() const { return chunksize; }$/;"	f	class:madness::Range
get_coeff	src/apps/chem/molecularbasis.h	/^    const std::vector<double>& get_coeff() const {$/;"	f	class:madness::ContractedGaussianShell
get_coeff	src/apps/hf/ewald.cc	/^  Tensor<double> get_coeff() {return coeff;}$/;"	f	class:MolecularNuclearPotentialFunctor2
get_coeff	src/apps/hf/molecularbasis.h	/^    const std::vector<double>& get_coeff() const {$/;"	f	class:ContractedGaussianShell
get_coeff	src/apps/polar/molecularbasis.h	/^    const std::vector<double>& get_coeff() const {$/;"	f	class:ContractedGaussianShell
get_coeffs	src/madness/mra/mraimpl.h	/^    const typename FunctionImpl<T,NDIM>::dcT& FunctionImpl<T,NDIM>::get_coeffs() const {return coeffs;}$/;"	f	class:madness::FunctionImpl
get_coeffs	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::dcT& FunctionImpl<T,NDIM>::get_coeffs() {return coeffs;}$/;"	f	class:madness::FunctionImpl
get_coeffs_pw	src/apps/moldft/testcosine.cc	/^std::vector<coord_3d> get_coeffs_pw(double maxKlen) {$/;"	f
get_coldim	src/apps/ii/systolic.h	/^        int get_coldim() const {return coldim;}$/;"	f	class:madness::SystolicMatrixAlgorithm
get_coldim	src/madness/tensor/systolic.h	/^        int64_t get_coldim() const {return coldim;}$/;"	f	class:madness::SystolicMatrixAlgorithm
get_colrange	src/apps/ii/systolic.h	/^        void get_colrange(int p, int64_t& ilow, int64_t& ihigh) const {$/;"	f	class:madness::DistributedMatrix
get_colrange	src/madness/tensor/distributed_matrix.h	/^        void get_colrange(int p, int64_t& ilow, int64_t& ihigh) const {$/;"	f	class:madness::DistributedMatrixDistribution
get_comment	src/apps/chem/QCCalculationParametersBase.h	/^	std::string get_comment() const {return comment;}$/;"	f	struct:madness::QCParameter
get_configs	src/madness/tensor/gentensor.h	/^        SRConf<T> get_configs(const int& start, const int& end) const {MADNESS_EXCEPTION("no SRConf in complex GenTensor",1);}$/;"	f	class:madness::GenTensor
get_configs	src/madness/tensor/gentensor.h	/^    GenTensor<T> get_configs(const int& start, const int& end) const {$/;"	f	class:madness::GenTensor
get_configs	src/madness/tensor/srconf.h	/^		const SRConf get_configs(const int& start, const int& end) const {$/;"	f	class:madness::SRConf
get_coords	src/apps/chem/diamagneticpotentialfactor.h	/^	std::vector<coord_3d> get_coords() const {return coords;}$/;"	f	class:madness::Diamagnetic_potential_factor
get_coords	src/apps/chem/molecularbasis.h	/^    void get_coords(double& x, double& y, double& z) const {$/;"	f	class:madness::AtomicBasisFunction
get_coords	src/apps/chem/molecule.h	/^    madness::Vector<double,3> get_coords() const {$/;"	f	class:madness::Atom
get_coords	src/apps/hf/molecularbasis.h	/^    void get_coords(double& x, double& y, double& z) const {$/;"	f	class:AtomicBasisFunction
get_coords	src/apps/polar/molecularbasis.h	/^    void get_coords(double& x, double& y, double& z) const {$/;"	f	class:AtomicBasisFunction
get_coords	src/apps/polar/molecule.h	/^    madness::Vector<double,3> get_coords() const {$/;"	f	class:Atom
get_coords_vec	src/apps/chem/molecularbasis.h	/^    madness::Vector<double,3> get_coords_vec() const {$/;"	f	class:madness::AtomicBasisFunction
get_coords_vec	src/apps/polar/molecularbasis.h	/^    madness::Vector<double,3> get_coords_vec() const {$/;"	f	class:AtomicBasisFunction
get_core	src/madness/tensor/tensortrain.h	/^        Tensor<T>& get_core(const int i) {$/;"	f	class:madness::TensorTrain
get_core	src/madness/tensor/tensortrain.h	/^        const Tensor<T>& get_core(const int i) const {$/;"	f	class:madness::TensorTrain
get_core_bc	src/apps/chem/corepotential.h	/^    inline double get_core_bc(unsigned int atn, unsigned int core) const {$/;"	f	class:madness::CorePotentialManager
get_core_bc	src/apps/chem/molecule.h	/^    double get_core_bc(unsigned int atn, unsigned int c) const {$/;"	f	class:madness::Molecule
get_core_bc	src/apps/polar/corepotential.h	/^    inline double get_core_bc(unsigned int atn, unsigned int core) const {$/;"	f	class:CorePotentialManager
get_core_bc	src/apps/polar/molecule.h	/^    double get_core_bc(unsigned int atn, unsigned int c) const {$/;"	f	class:Molecule
get_core_l	src/apps/chem/corepotential.h	/^    inline unsigned int get_core_l(unsigned int atn, unsigned int core) const {$/;"	f	class:madness::CorePotentialManager
get_core_l	src/apps/chem/molecule.h	/^    unsigned int get_core_l(unsigned int atn, unsigned int c) const {$/;"	f	class:madness::Molecule
get_core_l	src/apps/polar/corepotential.h	/^    inline unsigned int get_core_l(unsigned int atn, unsigned int core) const {$/;"	f	class:CorePotentialManager
get_core_l	src/apps/polar/molecule.h	/^    unsigned int get_core_l(unsigned int atn, unsigned int c) const {$/;"	f	class:Molecule
get_coulomb_potential	src/apps/chem/mp2.h	/^        real_function_3d get_coulomb_potential() const {$/;"	f	class:madness::HartreeFock
get_coulomb_potential	src/apps/chem/nemo.cc	/^real_function_3d Nemo::get_coulomb_potential(const vecfuncT& psi) const {$/;"	f	class:madness::Nemo
get_cparam	src/apps/chem/znemo.h	/^	const CalculationParameters& get_cparam() const {return cparam;};$/;"	f	class:madness::Znemo
get_cpu_time_diff	src/apps/chem/CCStructures.h	/^    double get_cpu_time_diff()const{return end_cpu;}$/;"	f	struct:madness::CCTimer
get_data	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^def get_data():$/;"	f
get_data	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^def get_data():$/;"	f
get_debug	src/madness/mra/funcdefaults.h	/^        static bool get_debug() {$/;"	f	class:madness::FunctionDefaults
get_debug	src/madness/world/worldrmi.h	/^        static bool get_debug() { return debugging; }$/;"	f	class:madness::RMI
get_default	src/madness/world/world.h	/^        static World& get_default() {$/;"	f	class:madness::World
get_default_base	src/apps/nick/mpreal.h	/^inline int mpreal::get_default_base()$/;"	f	class:mpfr::mpreal
get_default_prec	src/apps/nick/mpreal.h	/^inline mp_prec_t mpreal::get_default_prec()$/;"	f	class:mpfr::mpreal
get_default_rnd	src/apps/nick/mpreal.h	/^inline mp_rnd_t mpreal::get_default_rnd()$/;"	f	class:mpfr::mpreal
get_deferred_cleanup	src/madness/world/deferred_cleanup.cc	/^        std::shared_ptr<DeferredCleanup> DeferredCleanup::get_deferred_cleanup(const World& w) {$/;"	f	class:madness::detail::DeferredCleanup
get_degree	src/apps/adrian/polynomial.h	/^  unsigned get_degree() const {$/;"	f	class:slymer::PolynomialCoeffs
get_degree	src/apps/bryan/polynomial.h	/^  unsigned get_degree() const {$/;"	f	class:slymer::PolynomialCoeffs
get_density_thresh	src/examples/smooth.h	/^	double get_density_thresh()const{$/;"	f	class:smooth
get_desc	src/apps/chem/molecularbasis.h	/^    const char* get_desc() const {$/;"	f	class:madness::AtomicBasisFunction
get_desc	src/apps/chem/molecularbasis.h	/^    const char* get_desc(int ibf) const {$/;"	f	class:madness::ContractedGaussianShell
get_desc	src/apps/hf/molecularbasis.h	/^    const char* get_desc() const {$/;"	f	class:AtomicBasisFunction
get_desc	src/apps/hf/molecularbasis.h	/^    const char* get_desc(int ibf) const {$/;"	f	class:ContractedGaussianShell
get_desc	src/apps/polar/molecularbasis.h	/^    const char* get_desc() const {$/;"	f	class:AtomicBasisFunction
get_desc	src/apps/polar/molecularbasis.h	/^    const char* get_desc(int ibf) const {$/;"	f	class:ContractedGaussianShell
get_disp	src/madness/mra/displacements.h	/^        const std::vector< Key<NDIM> >& get_disp(Level n, bool isperiodicsum) {$/;"	f	class:madness::Displacements
get_disp	src/madness/mra/operator.h	/^        const std::vector< Key<NDIM> >& get_disp(Level n) const {$/;"	f	class:madness::SeparatedConvolution
get_distance	src/apps/chem/AC.h	/^	double get_distance(Vector<double,NDIM> elec, Vector<double,NDIM> nuc) const{$/;"	f	class:madness::int_factor_functor
get_distance	src/apps/chem/AC.h	/^	double get_distance(Vector<double,NDIM> elec, Vector<double,NDIM> nuc) const{$/;"	f	class:madness::lr_pot_functor
get_distance	src/apps/chem/AC.h	/^	double get_distance(Vector<double,NDIM> elec, Vector<double,NDIM> nuc) const{$/;"	f	struct:madness::atom_information
get_distance	src/examples/ac_corr.cc	/^	double get_distance(Vector<double,NDIM> elec, Vector<double,NDIM> nuc) const{$/;"	f	class:xc_functor	file:
get_dmat	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_dmat() const {$/;"	f	class:madness::AtomicBasis
get_dmat	src/apps/hf/molecularbasis.h	/^    const Tensor<double>& get_dmat() const {$/;"	f	class:AtomicBasis
get_dmat	src/apps/polar/molecularbasis.h	/^    const Tensor<double>& get_dmat() const {$/;"	f	class:AtomicBasis
get_dmatpsp	src/apps/chem/molecularbasis.h	/^    const Tensor<double>& get_dmatpsp() const {$/;"	f	class:madness::AtomicBasis
get_double_bits	src/apps/nick/mpreal.h	/^inline int mpreal::get_double_bits()$/;"	f	class:mpfr::mpreal
get_eig	src/apps/hf/dft.h	/^     double get_eig(int indx)$/;"	f	class:madness::DFT
get_eig	src/apps/hf/eigsolver.h	/^  double get_eig(int indx)$/;"	f	class:madness::EigSolver
get_eig	src/apps/hf/hartreefock.h	/^    double get_eig(int indx)$/;"	f	class:madness::HartreeFock
get_emax	src/apps/nick/mpreal.h	/^inline mp_exp_t mpreal::get_emax (void)$/;"	f	class:mpfr::mpreal
get_emax_max	src/apps/nick/mpreal.h	/^inline mp_exp_t mpreal::get_emax_max (void)$/;"	f	class:mpfr::mpreal
get_emax_min	src/apps/nick/mpreal.h	/^inline mp_exp_t mpreal::get_emax_min (void)$/;"	f	class:mpfr::mpreal
get_emin	src/apps/nick/mpreal.h	/^inline mp_exp_t mpreal::get_emin (void)$/;"	f	class:mpfr::mpreal
get_emin_max	src/apps/nick/mpreal.h	/^inline mp_exp_t mpreal::get_emin_max (void)$/;"	f	class:mpfr::mpreal
get_emin_min	src/apps/nick/mpreal.h	/^inline mp_exp_t mpreal::get_emin_min (void)$/;"	f	class:mpfr::mpreal
get_entry	src/madness/world/worldprofile.cc	/^    WorldProfileEntry& WorldProfile::get_entry(int id) {$/;"	f	class:madness::WorldProfile
get_eprec	src/apps/chem/molecule.h	/^    double get_eprec() const {$/;"	f	class:madness::Molecule
get_eprec	src/apps/polar/molecule.h	/^    double get_eprec() const {$/;"	f	class:Molecule
get_eps	src/apps/chem/MolecularOrbitals.h	/^	Tensor<double> get_eps() const {$/;"	f	class:madness::MolecularOrbitals
get_epsilon	src/apps/chem/CCPotentials.h	/^    double get_epsilon(const size_t i, const size_t j)const{$/;"	f	class:madness::CCPotentials
get_eval	src/apps/ii/testsystolic.cc	/^Tensor<T> SystolicEigensolver<T>::get_eval() const{$/;"	f	class:SystolicEigensolver
get_evec	src/apps/ii/testsystolic.cc	/^DistributedMatrix<T> SystolicEigensolver<T>::get_evec() const{$/;"	f	class:SystolicEigensolver
get_exp	src/apps/nick/mpreal.h	/^inline mp_exp_t mpreal::get_exp ()$/;"	f	class:mpfr::mpreal
get_explicit_B	src/apps/chem/diamagneticpotentialfactor.h	/^	coord_3d get_explicit_B() const {return explicit_B;}$/;"	f	class:madness::Diamagnetic_potential_factor
get_expnt	src/apps/chem/molecularbasis.h	/^    const std::vector<double>& get_expnt() const {$/;"	f	class:madness::ContractedGaussianShell
get_expnt	src/apps/hf/ewald.cc	/^  Tensor<double> get_expnt() {return expnt;}$/;"	f	class:MolecularNuclearPotentialFunctor2
get_expnt	src/apps/hf/molecularbasis.h	/^    const std::vector<double>& get_expnt() const {$/;"	f	class:ContractedGaussianShell
get_expnt	src/apps/polar/molecularbasis.h	/^    const std::vector<double>& get_expnt() const {$/;"	f	class:ContractedGaussianShell
get_fock_matrix	src/apps/chem/mp2.h	/^        Tensor<double> get_fock_matrix() const {$/;"	f	class:madness::MP2
get_fock_transformation	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::get_fock_transformation(World &world,$/;"	f	class:TDHF
get_fock_transformation	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::get_fock_transformation(World & world,$/;"	f	class:TDHF
get_fock_transformation	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::get_fock_transformation(World & world,$/;"	f	class:TDHF
get_fock_transformation	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::get_fock_transformation(World & world,$/;"	f	class:TDHF
get_fock_transformation	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::get_fock_transformation(World & world,$/;"	f	class:TDHF
get_fock_transformation	src/apps/chem/SCF.cc	/^tensorT SCF::get_fock_transformation(World &world, const tensorT &overlap,$/;"	f	class:madness::SCF
get_full_response_transformation	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::get_full_response_transformation(World& world,$/;"	f	class:TDHF
get_full_response_transformation	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::get_full_response_transformation(World& world,$/;"	f	class:TDHF
get_full_response_transformation	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::get_full_response_transformation(World& world,$/;"	f	class:TDHF
get_full_response_transformation	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::get_full_response_transformation(World& world,$/;"	f	class:TDHF
get_func	src/madness/world/taskfn.h	/^        static fT& get_func(fT& f) { return f; }$/;"	f	struct:madness::TaskFn
get_func	src/madness/world/taskfn.h	/^        static memfnT get_func(const detail::MemFuncWrapper<ptrT, memfnT, resT>& wrapper) {$/;"	f	struct:madness::TaskFn
get_func	src/madness/world/worldam.h	/^        am_handlerT get_func() const { return archive::to_abs_fn_ptr<am_handlerT>(func); }$/;"	f	class:madness::AmArg
get_functor	src/madness/mra/function_factory.h	/^    InterfacePtr get_functor() const {$/;"	f	class:madness::TwoElectronFactory
get_functor	src/madness/mra/function_factory.h	/^    std::shared_ptr<FunctionFunctorInterface<T, NDIM> > get_functor() const {$/;"	f	class:madness::CompositeFactory
get_functor	src/madness/mra/function_factory.h	/^    virtual std::shared_ptr<FunctionFunctorInterface<T, NDIM> > get_functor() const {$/;"	f	class:madness::FunctionFactory
get_functor	src/madness/mra/mraimpl.h	/^    std::shared_ptr<FunctionFunctorInterface<T,NDIM> > FunctionImpl<T,NDIM>::get_functor() const {$/;"	f	class:madness::FunctionImpl
get_functor	src/madness/mra/mraimpl.h	/^    std::shared_ptr<FunctionFunctorInterface<T,NDIM> > FunctionImpl<T,NDIM>::get_functor() {$/;"	f	class:madness::FunctionImpl
get_ggatol	src/apps/chem/xcfunctional.h	/^    double get_ggatol() const {return ggatol;}$/;"	f	class:madness::XCfunctional
get_group	src/madness/world/group.cc	/^    Future<Group> Group::get_group(const DistributedID& did) {$/;"	f	class:madness::Group
get_half_of_special_level	src/madness/mra/leafop.h	/^    size_t get_half_of_special_level(const size_t& sl= FunctionDefaults<NDIM>::get_special_level())const{$/;"	f	struct:madness::Specialbox_op
get_hash	src/madness/world/worlddc.h	/^        hashfunT& get_hash() const { return local.get_hash(); }$/;"	f	class:madness::WorldContainerImpl
get_hash	src/madness/world/worlddc.h	/^        hashfunT& get_hash() const {$/;"	f	class:madness::WorldContainer
get_hash	src/madness/world/worldhashmap.h	/^        hashfunT& get_hash() const { return hashfun; }$/;"	f	class:madness::ConcurrentHashMap
get_hessian	src/apps/chem/molopt.h	/^        const Tensor<double>& get_hessian() const {$/;"	f	class:madness::MolOpt
get_hf	src/apps/chem/mp2.h	/^        HartreeFock& get_hf() {return *hf;}$/;"	f	class:madness::MP2
get_id	src/apps/ii/systolic.h	/^        virtual void get_id(std::pair<void*,unsigned short>& id) const {$/;"	f	class:madness::SystolicMatrixAlgorithm
get_id	src/madness/mra/vmra1.h	/^        virtual void get_id(std::pair<void*,unsigned short>& id) const {$/;"	f	struct:madness::MatrixInnerTask
get_id	src/madness/tensor/systolic.h	/^        virtual void get_id(std::pair<void*,unsigned short>& id) const {$/;"	f	class:madness::SystolicMatrixAlgorithm
get_id	src/madness/world/taskfn.h	/^        virtual void get_id(std::pair<void*,unsigned short>& id) const {$/;"	f	struct:madness::TaskFn
get_id	src/madness/world/thread.h	/^        const pthread_t& get_id() const {$/;"	f	class:madness::ThreadBase
get_id	src/madness/world/thread.h	/^        virtual void get_id(std::pair<void*,unsigned short>& id) const {$/;"	f	class:madness::PoolTaskInterface
get_id	src/madness/world/thread.h	/^        virtual void get_id(std::pair<void*,unsigned short>& id) const {$/;"	f	class:madness::PoolTaskNull
get_id	src/madness/world/world_task_queue.h	/^            virtual void get_id(std::pair<void*,unsigned short>& id) const {$/;"	f	class:madness::detail::ForEachRootTask
get_impl	src/madness/mra/funcimpl.h	/^    	const implT* get_impl() const {return impl;}$/;"	f	class:madness::CoeffTracker
get_impl	src/madness/mra/mra.h	/^        const std::shared_ptr< FunctionImpl<T,NDIM> >& get_impl() const {$/;"	f	class:madness::Function
get_index	src/apps/chem/molecularbasis.h	/^    int get_index() const {$/;"	f	class:madness::AtomicBasisFunction
get_index	src/apps/hf/molecularbasis.h	/^    int get_index() const {$/;"	f	class:AtomicBasisFunction
get_index	src/apps/polar/molecularbasis.h	/^    int get_index() const {$/;"	f	class:AtomicBasisFunction
get_initial_level	src/madness/mra/funcdefaults.h	/^        static int get_initial_level() {$/;"	f	class:madness::FunctionDefaults
get_initial_level	src/madness/mra/funcimpl.h	/^        int get_initial_level()const{return initial_level;}$/;"	f	class:madness::FunctionImpl
get_initial_orbitals	src/apps/chem/znemo.cc	/^void Znemo::get_initial_orbitals() {$/;"	f	class:madness::Znemo
get_instance_count	src/madness/tensor/basetensor.h	/^        static inline int get_instance_count() {$/;"	f	class:madness::BaseTensor
get_internal_iterator	src/madness/world/worlddc.h	/^        const internal_iteratorT& get_internal_iterator() const {$/;"	f	class:madness::WorldContainerIterator
get_ir_name	src/apps/moldft/pointgroup.h	/^    const std::string& get_ir_name(int ir) const {$/;"	f	class:PointGroup
get_ir_name	src/apps/polar/pointgroup.h	/^    const std::string& get_ir_name(int ir) const {$/;"	f	class:PointGroup
get_irreps	src/apps/chem/MolecularOrbitals.h	/^	std::vector<std::string> get_irreps() const {$/;"	f	class:madness::MolecularOrbitals
get_issmall	src/madness/mra/convolution1d.h	/^        bool get_issmall(Level n, Translation lx) const {$/;"	f	class:madness::Convolution1D
get_k	src/madness/mra/funcdefaults.h	/^        static int get_k() {$/;"	f	class:madness::FunctionDefaults
get_k	src/madness/mra/function_factory.h	/^    int get_k() const {return _k;};$/;"	f	class:madness::FunctionFactory
get_k	src/madness/mra/mraimpl.h	/^    int FunctionImpl<T,NDIM>::get_k() const {return k;}$/;"	f	class:madness::FunctionImpl
get_k	src/madness/tensor/srconf.h	/^		unsigned int get_k() const {return maxk_;};$/;"	f	class:madness::SRConf
get_kernel	src/apps/chem/CCStructures.h	/^    TwoElectronFactory get_kernel()const{$/;"	f	struct:madness::CCConvolutionOperator
get_ket_vector	src/apps/chem/projector.h	/^        vecfuncT get_ket_vector() const {return O.get_ket_vector();}$/;"	f	class:madness::QProjector
get_ket_vector	src/apps/chem/projector.h	/^        vecfuncT get_ket_vector() const {return mo_bra_;}$/;"	f	class:madness::Projector
get_localize_sets	src/apps/chem/MolecularOrbitals.h	/^	std::vector<int> get_localize_sets() const {$/;"	f	class:madness::MolecularOrbitals
get_m	src/madness/mra/minmax/y.cc	/^    int get_m() const {return m;}$/;"	f	class:matrix
get_m	src/madness/mra/minmax/y1.cc	/^    int get_m() const {return m;}$/;"	f	class:matrix
get_m	src/madness/mra/minmax/y_signed.cc	/^    int get_m() const {return m;}$/;"	f	class:matrix
get_m	src/madness/mra/minmax/y_varx.cc	/^    int get_m() const {return m;}$/;"	f	class:matrix
get_mass_in_au	src/apps/chem/molecule.h	/^    double get_mass_in_au() const {return constants::atomic_mass_in_au * mass;}$/;"	f	class:madness::Atom
get_max_refine_level	src/madness/mra/funcdefaults.h	/^        static int get_max_refine_level() {$/;"	f	class:madness::FunctionDefaults
get_maxsub	src/madness/mra/nonlinsol.h	/^		unsigned int get_maxsub()const{$/;"	f	class:madness::NonlinearSolverND
get_me_twice	src/madness/world/test_world.cc	/^    bool get_me_twice(World* world, const WorldContainer<int,Mary>& d) {$/;"	f	class:Mary
get_mem_func_ptr	src/madness/world/mem_func_wrapper.h	/^            friend memfnT get_mem_func_ptr(const MemFuncWrapper_& wrapper) {$/;"	f	class:madness::detail::MemFuncWrapper
get_mem_func_ptr	src/madness/world/mem_func_wrapper.h	/^        memfnT get_mem_func_ptr(const MemFuncWrapper<ptrT, memfnT, resT>& wrapper) {$/;"	f	namespace:madness::detail
get_mo_bra	src/apps/chem/CCPotentials.h	/^    vector_real_function_3d get_mo_bra(const CC_vecfunction& ket)const{$/;"	f	class:madness::CCPotentials
get_mos	src/apps/chem/MolecularOrbitals.h	/^	std::vector<Function<T,NDIM> > get_mos() const {$/;"	f	class:madness::MolecularOrbitals
get_n	src/madness/mra/minmax/y.cc	/^    int get_n() const {return n;}$/;"	f	class:matrix
get_n	src/madness/mra/minmax/y1.cc	/^    int get_n() const {return n;}$/;"	f	class:matrix
get_n	src/madness/mra/minmax/y_signed.cc	/^    int get_n() const {return n;}$/;"	f	class:matrix
get_n	src/madness/mra/minmax/y_varx.cc	/^    int get_n() const {return n;}$/;"	f	class:matrix
get_name	src/apps/chem/molecularbasis.h	/^    std::string get_name() const {return name;}$/;"	f	class:madness::AtomicBasisSet
get_name	src/apps/moldft/pointgroup.h	/^    const std::string& get_name() const {$/;"	f	class:PointGroup
get_name	src/apps/polar/pointgroup.h	/^    const std::string& get_name() const {$/;"	f	class:PointGroup
get_name	src/madness/world/thread.h	/^            std::string get_name() const {$/;"	f	class:madness::profiling::TaskEvent
get_ncf_ptr	src/apps/chem/nemo.h	/^	std::shared_ptr<NuclearCorrelationFactor> get_ncf_ptr() const {$/;"	f	class:madness::NemoBase
get_nemo	src/apps/chem/CCPotentials.h	/^    const Nemo& get_nemo()const{return nemo_;}$/;"	f	class:madness::CCPotentials
get_next	src/madness/world/test_ar.cc	/^    linked_list* get_next() const {$/;"	f	class:linked_list
get_norm_tree	src/madness/mra/funcimpl.h	/^        double get_norm_tree() const {$/;"	f	class:madness::FunctionNode
get_norm_tree_recursive	src/madness/mra/mraimpl.h	/^    Future<double> FunctionImpl<T,NDIM>::get_norm_tree_recursive(const keyT& key) const {$/;"	f	class:madness::FunctionImpl
get_nthread	src/madness/world/test_atomicint.cc	/^int get_nthread() {$/;"	f
get_nthread	src/madness/world/thread.h	/^        int get_nthread() const {$/;"	f	class:madness::TaskAttributes
get_nuclear_potential	src/apps/chem/mp2.h	/^        real_function_3d get_nuclear_potential() const {$/;"	f	class:madness::HartreeFock
get_obj_id	src/madness/world/uniqueid.h	/^        unsigned long get_obj_id() const {$/;"	f	class:madness::uniqueidT
get_occ	src/apps/chem/MolecularOrbitals.h	/^	Tensor<double> get_occ() const {$/;"	f	class:madness::MolecularOrbitals
get_op_name	src/apps/moldft/pointgroup.h	/^    const std::string& get_op_name(int op) const {$/;"	f	class:PointGroup
get_op_name	src/apps/polar/pointgroup.h	/^    const std::string& get_op_name(int op) const {$/;"	f	class:PointGroup
get_orbital_energies	src/apps/chem/CCPotentials.h	/^    std::vector<double> get_orbital_energies()const{return orbital_energies_;}$/;"	f	class:madness::CCPotentials
get_orbital_energy	src/apps/chem/TDHF.h	/^	double get_orbital_energy(const size_t i)const{$/;"	f	class:madness::TDHF
get_order	src/apps/moldft/pointgroup.h	/^    int get_order() const {$/;"	f	class:PointGroup
get_order	src/apps/polar/pointgroup.h	/^    int get_order() const {$/;"	f	class:PointGroup
get_orthonormalize_irreps	src/apps/chem/pointgroupsymmetry.h	/^	bool get_orthonormalize_irreps() const {return orthonormalize_irreps_;}$/;"	f	class:madness::projector_irrep
get_pair_function	src/apps/chem/CCPotentials.cc	/^  CCPotentials::get_pair_function(const Pairs<CCPair>& pairs,const size_t i,const size_t j) const {$/;"	f	class:madness::CCPotentials
get_papi_measurement	src/madness/world/worldpapi.cc	/^    const long long* get_papi_measurement() {$/;"	f	namespace:madness
get_parameter	src/apps/chem/QCCalculationParametersBase.h	/^	QCParameter& get_parameter(const std::string key) {$/;"	f	class:madness::QCCalculationParametersBase
get_parameter	src/apps/chem/QCCalculationParametersBase.h	/^	const QCParameter& get_parameter(const std::string key) const {$/;"	f	class:madness::QCCalculationParametersBase
get_parameter_range	src/apps/chem/test_qc.cc	/^	std::size_t get_parameter_range(const std::string& key) const {$/;"	f	class:TestCalculationParameters
get_pcm	src/apps/chem/nemo.h	/^	PCM get_pcm()const{return pcm;}$/;"	f	class:madness::Nemo
get_phi	src/apps/hf/dft.h	/^     funcT get_phi(int indx)$/;"	f	class:madness::DFT
get_phi	src/apps/hf/eigsolver.h	/^  funcT get_phi(int indx)$/;"	f	class:madness::EigSolver
get_phi	src/apps/hf/hartreefock.h	/^    funcT get_phi(int indx)$/;"	f	class:madness::HartreeFock
get_physical_B	src/apps/chem/diamagneticpotentialfactor.h	/^	coord_3d get_physical_B() const {return physical_B;}$/;"	f	class:madness::Diamagnetic_potential_factor
get_pmap	src/madness/mra/funcdefaults.h	/^        static std::shared_ptr< WorldDCPmapInterface< Key<NDIM> > >& get_pmap() {$/;"	f	class:madness::FunctionDefaults
get_pmap	src/madness/mra/mra.h	/^        const std::shared_ptr< WorldDCPmapInterface< Key<NDIM> > >& get_pmap() const {$/;"	f	class:madness::Function
get_pmap	src/madness/mra/mraimpl.h	/^    const std::shared_ptr< WorldDCPmapInterface< Key<NDIM> > >& FunctionImpl<T,NDIM>::get_pmap() const {$/;"	f	class:madness::FunctionImpl
get_pmap	src/madness/world/worlddc.h	/^        const std::shared_ptr< WorldDCPmapInterface<keyT> >& get_pmap() const {$/;"	f	class:madness::WorldContainerImpl
get_pmap	src/madness/world/worlddc.h	/^        inline const std::shared_ptr< WorldDCPmapInterface<keyT> >& get_pmap() const {$/;"	f	class:madness::WorldContainer
get_pointgroup	src/apps/chem/pointgroupsymmetry.h	/^	std::string get_pointgroup() const {return table_.schoenflies_;}$/;"	f	class:madness::projector_irrep
get_pool_thread_index	src/madness/world/thread.h	/^        int get_pool_thread_index() const {$/;"	f	class:madness::ThreadBase
get_potential	src/apps/chem/corepotential.h	/^    CorePotential get_potential(unsigned int atn) const {$/;"	f	class:madness::CorePotentialManager
get_potential	src/apps/polar/corepotential.h	/^    CorePotential get_potential(unsigned int atn) const {$/;"	f	class:CorePotentialManager
get_potential_radius	src/apps/chem/diamagneticpotentialfactor.h	/^	double get_potential_radius() const {$/;"	f	class:madness::Diamagnetic_potential_factor
get_potentials	src/apps/chem/CCPotentials.h	/^    mutable CCIntermediatePotentials get_potentials;$/;"	m	class:madness::CCPotentials
get_prec	src/apps/nick/mpreal.h	/^inline mp_prec_t mpreal::get_prec() const$/;"	f	class:mpfr::mpreal
get_print_order	src/apps/chem/QCCalculationParametersBase.h	/^	int get_print_order() const {return print_order;}$/;"	f	struct:madness::QCParameter
get_project_randomize	src/madness/mra/funcdefaults.h	/^        static bool get_project_randomize() {$/;"	f	class:madness::FunctionDefaults
get_pseudo_atom	src/apps/chem/molecule.cc	/^bool Molecule::get_pseudo_atom(unsigned int i) const$/;"	f	class:madness::Molecule
get_pthread_mutex	src/madness/world/worldmutex.h	/^        pthread_mutex_t& get_pthread_mutex() {$/;"	f	class:madness::PthreadConditionVariable
get_range	src/madness/tensor/distributed_matrix.h	/^        void get_range(int p, int64_t& ilow, int64_t& ihigh, int64_t& jlow, int64_t& jhigh) const {$/;"	f	class:madness::DistributedMatrixDistribution
get_rank	src/apps/ii/systolic.h	/^        ProcessID get_rank() const{ return rank; }$/;"	f	class:madness::SystolicMatrixAlgorithm
get_rank	src/madness/tensor/systolic.h	/^        ProcessID get_rank() const {$/;"	f	class:madness::SystolicMatrixAlgorithm
get_rcell_width	src/madness/mra/funcdefaults.h	/^        static const Tensor<double>& get_rcell_width() {$/;"	f	class:madness::FunctionDefaults
get_rcut	src/apps/chem/molecule.h	/^    std::vector<double> get_rcut() const {return rcut;}$/;"	f	class:madness::Molecule
get_refine	src/madness/mra/funcdefaults.h	/^        static bool get_refine() {$/;"	f	class:madness::FunctionDefaults
get_residue	src/apps/chem/mp2.h	/^        real_function_6d get_residue(const real_function_6d& f,$/;"	f	class:madness::MP2
get_result_size	src/apps/chem/oep.h	/^    std::size_t get_result_size() const {$/;"	f	struct:madness::divide_add_interpolate
get_result_size	src/apps/chem/oep.h	/^    std::size_t get_result_size() const {$/;"	f	struct:madness::interpolate_to_longrange_op
get_result_size	src/apps/chem/xcfunctional.h	/^    std::size_t get_result_size() const {$/;"	f	struct:madness::xc_kernel_apply
get_result_size	src/apps/chem/xcfunctional.h	/^    std::size_t get_result_size() const {$/;"	f	struct:madness::xc_potential
get_result_size	src/madness/mra/testvmra.cc	/^    std::size_t get_result_size() const {return result_size;}$/;"	f	struct:many_to_many_op
get_rhotol	src/apps/chem/xcfunctional.h	/^    double get_rhotol() const {return rhotol;}$/;"	f	class:madness::XCfunctional
get_rlist	src/madness/mra/nonlinsol.h	/^	std::vector<T>& get_rlist() {return rlist;}$/;"	f	class:madness::XNonlinearSolver
get_rnlp	src/madness/mra/convolution1d.h	/^        const Tensor<Q>& get_rnlp(Level n, Translation lx) const {$/;"	f	class:madness::Convolution1D
get_roots	src/madness/mra/sdf_shape_3D.h	/^        std::vector<long double> get_roots(const long double c,$/;"	f	class:madness::SDFParaboloid
get_rowdim	src/apps/ii/systolic.h	/^        int get_rowdim() const {return rowdim;}$/;"	f	class:madness::SystolicMatrixAlgorithm
get_rowdim	src/madness/tensor/systolic.h	/^        int64_t get_rowdim() const {return rowdim;}$/;"	f	class:madness::SystolicMatrixAlgorithm
get_rowrange	src/madness/tensor/distributed_matrix.h	/^        void get_rowrange(int p, int64_t& jlow, int64_t& jhigh) const {$/;"	f	class:madness::DistributedMatrixDistribution
get_shared	src/madness/world/worldref.h	/^            const std::shared_ptr<T>& get_shared() const { return pimpl_->get_shared<T>(); }$/;"	f	class:madness::detail::RemoteCounter
get_shared	src/madness/world/worldref.h	/^            const std::shared_ptr<T>& get_shared() const { return pointer_; }$/;"	f	class:madness::detail::RemoteCounterImpl
get_shared	src/madness/world/worldref.h	/^            const std::shared_ptr<T>& get_shared() const {$/;"	f	class:madness::detail::RemoteCounterBase
get_shared	src/madness/world/worldref.h	/^        const std::shared_ptr<T>& get_shared() const {$/;"	f	class:madness::RemoteReference
get_shell	src/apps/chem/molecularbasis.h	/^    const ContractedGaussianShell& get_shell() const {$/;"	f	class:madness::AtomicBasisFunction
get_shell	src/apps/hf/molecularbasis.h	/^    const ContractedGaussianShell& get_shell() const {$/;"	f	class:AtomicBasisFunction
get_shell	src/apps/polar/molecularbasis.h	/^    const ContractedGaussianShell& get_shell() const {$/;"	f	class:AtomicBasisFunction
get_shell_from_basis_function	src/apps/chem/molecularbasis.h	/^    const ContractedGaussianShell& get_shell_from_basis_function(int ibf, int& ibf_in_shell) const {$/;"	f	class:madness::AtomicBasis
get_shell_from_basis_function	src/apps/hf/molecularbasis.h	/^    const ContractedGaussianShell& get_shell_from_basis_function(int ibf, int& ibf_in_shell) const {$/;"	f	class:AtomicBasis
get_shell_from_basis_function	src/apps/polar/molecularbasis.h	/^    const ContractedGaussianShell& get_shell_from_basis_function(int ibf, int& ibf_in_shell) const {$/;"	f	class:AtomicBasis
get_shells	src/apps/chem/molecularbasis.h	/^    const std::vector<ContractedGaussianShell>& get_shells() const {$/;"	f	class:madness::AtomicBasis
get_shells	src/apps/hf/molecularbasis.h	/^    const std::vector<ContractedGaussianShell>& get_shells() const {$/;"	f	class:AtomicBasis
get_shells	src/apps/polar/molecularbasis.h	/^    const std::vector<ContractedGaussianShell>& get_shells() const {$/;"	f	class:AtomicBasis
get_size	src/madness/mra/vmra.h	/^double get_size(World& world, const std::vector<Function<T, NDIM>>& v) {$/;"	f	namespace:madness
get_size	src/madness/mra/vmra.h	/^double get_size(const Function<T, NDIM>& f) {$/;"	f	namespace:madness
get_source_key	src/madness/mra/operator.h	/^        get_source_key(const Key<FDIM> key) const {$/;"	f	class:madness::SeparatedConvolution
get_special_level	src/madness/mra/funcdefaults.h	/^        static int get_special_level() {$/;"	f	class:madness::FunctionDefaults
get_special_level	src/madness/mra/funcimpl.h	/^        int get_special_level()const{return special_level;}$/;"	f	class:madness::FunctionImpl
get_special_points	src/madness/mra/funcimpl.h	/^        const std::vector<Vector<double,NDIM> >& get_special_points()const{return special_points;}$/;"	f	class:madness::FunctionImpl
get_src	src/madness/world/worldam.h	/^        ProcessID get_src() const { return src; }$/;"	f	class:madness::AmArg
get_stats	src/madness/world/dqueue.h	/^        const DQStats& get_stats() const {$/;"	f	class:madness::DQueue
get_stats	src/madness/world/thread.cc	/^    const DQStats& ThreadPool::get_stats() {$/;"	f	class:madness::ThreadPool
get_stats	src/madness/world/worldrmi.h	/^        static const RMIStats& get_stats() { return stats; }$/;"	f	class:madness::RMI
get_symmetry_projector	src/apps/chem/nemo.h	/^    projector_irrep get_symmetry_projector() const {$/;"	f	class:madness::Nemo
get_table	src/apps/chem/pointgroupsymmetry.h	/^	charactertable get_table() const {return table_;}$/;"	f	class:madness::projector_irrep
get_table	src/apps/chem/pointgroupsymmetry.h	/^	const charactertable get_table(std::string pointgroup) {$/;"	f	class:madness::projector_irrep
get_tda_potential	src/apps/chem/TDHF.cc	/^vector_real_function_3d TDHF::get_tda_potential(const CC_vecfunction &x)const{$/;"	f	class:madness::TDHF
get_tensor_args	src/madness/mra/mraimpl.h	/^    TensorArgs FunctionImpl<T,NDIM>::get_tensor_args() const {return targs;}$/;"	f	class:madness::FunctionImpl
get_tensor_type	src/madness/mra/funcdefaults.h	/^        static TensorType get_tensor_type() {$/;"	f	class:madness::FunctionDefaults
get_tensor_type	src/madness/mra/mraimpl.h	/^    TensorType FunctionImpl<T,NDIM>::get_tensor_type() const {return targs.tt;}$/;"	f	class:madness::FunctionImpl
get_this_thread_is_server	src/madness/world/worldrmi.h	/^        static bool get_this_thread_is_server() {return is_server_thread;}$/;"	f	class:madness::RMI
get_threads	src/madness/world/thread.h	/^        static const ThreadPoolThread* get_threads() {$/;"	f	class:madness::ThreadPool
get_thresh	src/madness/mra/funcdefaults.h	/^        static const double& get_thresh() {$/;"	f	class:madness::FunctionDefaults
get_thresh	src/madness/mra/function_factory.h	/^    double get_thresh() const {return _thresh;};$/;"	f	class:madness::FunctionFactory
get_thresh	src/madness/mra/mraimpl.h	/^    double FunctionImpl<T,NDIM>::get_thresh() const {return thresh;}$/;"	f	class:madness::FunctionImpl
get_tls	src/madness/world/test_queue.cc	/^unsigned long* get_tls() {$/;"	f
get_total_cost	src/madness/mra/lbdeux.h	/^        double get_total_cost() const {$/;"	f	class:madness::LBNodeDeux
get_truncate_mode	src/madness/mra/funcdefaults.h	/^        static int get_truncate_mode() {$/;"	f	class:madness::FunctionDefaults
get_truncate_on_project	src/madness/mra/funcdefaults.h	/^        static bool get_truncate_on_project() {$/;"	f	class:madness::FunctionDefaults
get_type	src/apps/chem/QCCalculationParametersBase.h	/^	std::string get_type() const {return type;}$/;"	f	struct:madness::QCParameter
get_type_info	src/madness/world/dist_cache.h	/^                virtual const std::type_info& get_type_info() const {$/;"	f	class:madness::detail::DistCache::CacheData
get_type_name	src/madness/world/archive.h	/^        const char* get_type_name() {$/;"	f	namespace:madness::archive
get_ulist	src/madness/mra/nonlinsol.h	/^	std::vector<T>& get_ulist() {return ulist;}$/;"	f	class:madness::XNonlinearSolver
get_unprojected_cc2_projector_response	src/apps/chem/CCStructures.h	/^    vector_real_function_3d get_unprojected_cc2_projector_response()const{return unprojected_cc2_projector_response_;}$/;"	f	struct:madness::CCIntermediatePotentials
get_user_state	src/madness/world/world.h	/^        void* get_user_state() { return user_state; }$/;"	f	class:madness::World
get_v	src/apps/chem/diamagneticpotentialfactor.h	/^	std::vector<coord_3d> get_v() const {return v;}$/;"	f	class:madness::Diamagnetic_potential_factor
get_value	src/apps/chem/QCCalculationParametersBase.h	/^	std::string get_value() const {return value;}$/;"	f	struct:madness::QCParameter
get_value	src/madness/world/test_ar.cc	/^    int get_value() const {$/;"	f	class:linked_list
get_vecfunction	src/apps/chem/CCStructures.h	/^    vector_real_function_3d get_vecfunction()const{$/;"	f	struct:madness::CC_vecfunction
get_verbosity	src/apps/chem/pointgroupsymmetry.h	/^	int get_verbosity() const {return verbosity_;}$/;"	f	class:madness::projector_irrep
get_wall_time_diff	src/apps/chem/CCStructures.h	/^    double get_wall_time_diff()const{return end_wall;}$/;"	f	struct:madness::CCTimer
get_world	src/apps/ii/systolic.h	/^        World& get_world() const { return A.get_world(); }$/;"	f	class:madness::SystolicMatrixAlgorithm
get_world	src/apps/ii/systolic.h	/^        World& get_world() const {return _world;}$/;"	f	class:madness::DistributedMatrix
get_world	src/madness/mra/function_factory.h	/^    World& get_world() const {return _world;};$/;"	f	class:madness::FunctionFactory
get_world	src/madness/tensor/distributed_matrix.h	/^        World& get_world() const {return *pworld;}$/;"	f	class:madness::DistributedMatrixDistribution
get_world	src/madness/tensor/systolic.h	/^        World& get_world() const {$/;"	f	class:madness::SystolicMatrixAlgorithm
get_world	src/madness/world/group.h	/^            World& get_world() const { return world_; }$/;"	f	class:madness::Group::Impl
get_world	src/madness/world/group.h	/^        World& get_world() const {$/;"	f	class:madness::Group
get_world	src/madness/world/parallel_archive.h	/^            World* get_world() const {$/;"	f	class:madness::archive::BaseParallelArchive
get_world	src/madness/world/taskfn.h	/^        World* get_world() const { return const_cast<World*>(world); }$/;"	f	class:madness::TaskInterface
get_world	src/madness/world/world_object.h	/^        World& get_world() const {$/;"	f	class:madness::WorldObject
get_world	src/madness/world/worldam.h	/^        World* get_world() const { return World::world_from_id(worldid); }$/;"	f	class:madness::AmArg
get_world	src/madness/world/worlddc.h	/^        World& get_world() const {$/;"	f	class:madness::WorldContainer
get_world	src/madness/world/worldptr.h	/^            World& get_world() const {$/;"	f	class:madness::detail::WorldPtr
get_world	src/madness/world/worldref.h	/^            World& get_world() const { return pimpl_.get_world(); }$/;"	f	class:madness::detail::RemoteCounter
get_world	src/madness/world/worldref.h	/^        World& get_world() const { return counter_.get_world(); }$/;"	f	class:madness::RemoteReference
get_world_id	src/madness/world/uniqueid.h	/^        unsigned long get_world_id() const {$/;"	f	class:madness::uniqueidT
get_worldid	src/madness/world/worldam.h	/^        unsigned long get_worldid() const { return worldid; }$/;"	f	class:madness::AmArg
get_worldid	src/madness/world/worldptr.h	/^            worldidT get_worldid() const {$/;"	f	class:madness::detail::WorldPtr
get_worldid	src/madness/world/worldref.h	/^            get_worldid() const { return pimpl_.get_worldid(); }$/;"	f	class:madness::detail::RemoteCounter
getbuf0	src/madness/world/test_world.cc	/^    double getbuf0(const std::vector<double>& buf) {$/;"	f	class:Foo
getbuf0c	src/madness/world/test_world.cc	/^    double getbuf0c(const std::vector<double>& buf) const {$/;"	f	class:Foo
getbytes	src/madness/misc/ran.cc	/^    void Random::getbytes(int n, unsigned char * MADNESS_RESTRICT v) {$/;"	f	class:madness::Random
getfac	src/madness/mra/convolution1d.h	/^        Q getfac() const {$/;"	f	class:madness::ConvolutionND
getk	src/apps/nick/wavef.cc	/^double PhiK::getk() const {$/;"	f	class:PhiK
getk	src/apps/nick/wavef.cc	/^double Phikl::getk() const  { return k_; }$/;"	f	class:Phikl
getmuop	src/madness/mra/operator.h	/^        const SeparatedConvolutionInternal<Q,NDIM> getmuop(int mu, Level n, const Key<NDIM>& disp) const {$/;"	f	class:madness::SeparatedConvolution
getmuop_modified	src/madness/mra/operator.h	/^        getmuop_modified(int mu, Level n, const Key<NDIM>& disp, const Key<NDIM>& source) const {$/;"	f	class:madness::SeparatedConvolution
getop	src/madness/mra/convolution1d.h	/^        std::shared_ptr<Convolution1D<Q> > getop(int dim) const  {$/;"	f	class:madness::ConvolutionND
getop	src/madness/mra/operator.h	/^        const SeparatedConvolutionData<Q,NDIM>* getop(Level n, const Key<NDIM>& d, const Key<NDIM>& source) const {$/;"	f	class:madness::SeparatedConvolution
getop_modified	src/madness/mra/operator.h	/^        const SeparatedConvolutionData<Q,NDIM>* getop_modified(Level n, const Key<NDIM>& disp, const Key<NDIM>& source) const {$/;"	f	class:madness::SeparatedConvolution
getop_ns	src/madness/mra/operator.h	/^        const SeparatedConvolutionData<Q,NDIM>* getop_ns(Level n, const Key<NDIM>& d) const {$/;"	f	class:madness::SeparatedConvolution
getptr	src/madness/mra/simplecache.h	/^        inline const Q* getptr(Level n, Translation l) const {$/;"	f	class:madness::SimpleCache
getptr	src/madness/mra/simplecache.h	/^        inline const Q* getptr(Level n, const Key<NDIM>& disp) const {$/;"	f	class:madness::SimpleCache
getptr	src/madness/mra/simplecache.h	/^        inline const Q* getptr(const Key<NDIM>& key) const {$/;"	f	class:madness::SimpleCache
getstate	src/madness/misc/ran.cc	/^    RandomState Random::getstate() const {$/;"	f	class:madness::Random
getv	src/madness/misc/ran.h	/^        void getv(int n, T * MADNESS_RESTRICT v) {$/;"	f	class:madness::Random
getwa_	src/apps/moldft/fci/crayio.c	/^void getwa_(integer* unit, double* result, integer* addr, integer* count, integer* ierr)$/;"	f
ggatol	src/apps/chem/xcfunctional.h	/^    double ggatol;              \/\/\/< See initialize and munge*$/;"	m	class:madness::XCfunctional
ggev	src/madness/tensor/lapack.cc	/^    void ggev(const Tensor<T>& A, Tensor<T>& B, Tensor<T>& VR,$/;"	f	namespace:madness
ginitial_hessian	src/apps/chem/CalculationParameters.h	/^	bool ginitial_hessian() const {return get<bool>("ginitial_hessian");}$/;"	f	struct:madness::CalculationParameters
git_commit	src/madness/world/info.cc	/^        const char* git_commit() {$/;"	f	namespace:madness::info
give_data	src/apps/chem/GuessFactory.h	/^	std::vector<std::vector<double> > give_data(){return data_;}$/;"	f	class:madness::guessfactory::PolynomialFunctor
globalToLocalMat_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    const DistMatrix<T,MC,MR>* globalToLocalMat_;$/;"	m	class:elem::AxpyInterface
global_size	src/madness/world/worlddc.h	/^        std::size_t global_size(World& world) const {$/;"	f	class:madness::WorldDCPmapInterface
global_test_part_result_reporter_mutex_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::Mutex global_test_part_result_reporter_mutex_;$/;"	m	class:testing::internal::UnitTestImpl
global_test_part_result_repoter_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TestPartResultReporterInterface* global_test_part_result_repoter_;$/;"	m	class:testing::internal::UnitTestImpl
gmaxiter	src/apps/chem/CalculationParameters.h	/^	int gmaxiter() const {return get<int>("gmaxiter");}$/;"	f	struct:madness::CalculationParameters
gmaxiter	src/apps/polar/moldft.cc	/^    int gmaxiter;                      \/\/\/< optimization maxiter$/;"	m	struct:CalculationParameters	file:
gnorm	src/apps/chem/molecular_optimizer.h	/^    double gnorm=1.e10;$/;"	m	class:madness::MolecularOptimizer
gnorm	src/apps/moldft/mcpfit.cc	/^    double gnorm;$/;"	m	class:MySteepestDescent	file:
gnorm	src/apps/polar/mcpfit.cc	/^    double gnorm;$/;"	m	class:MySteepestDescent	file:
gnorm	src/madness/tensor/kain.cc	/^    double gnorm;$/;"	m	class:QuasiNewton	file:
gnorm	src/madness/tensor/kain.cc	/^    double gnorm;$/;"	m	class:SteepestDescent	file:
gnorm	src/madness/tensor/solvers.h	/^        double gnorm;$/;"	m	class:madness::QuasiNewton
gnorm	src/madness/tensor/solvers.h	/^        double gnorm;$/;"	m	class:madness::SteepestDescent
gop	src/madness/world/world.h	/^        WorldGopInterface& gop; \/\/\/< Global operations.$/;"	m	class:madness::World
gopt	src/apps/chem/CalculationParameters.h	/^	bool gopt() const {return get<bool>("gopt");}$/;"	f	struct:madness::CalculationParameters
gopt	src/apps/polar/moldft.cc	/^    bool gopt;                         \/\/\/< geometry optimizer$/;"	m	struct:CalculationParameters	file:
gotkids	src/madness/mra/lbdeux.h	/^        volatile bool gotkids;$/;"	m	class:madness::LBNodeDeux
gotlock	src/madness/world/worldhashmap.h	/^            bool gotlock;$/;"	m	class:madness::Hash_private::HashAccessor
gprec	src/apps/chem/CalculationParameters.h	/^	double gprec() const {return get<double>("gprec");}$/;"	f	struct:madness::CalculationParameters
gprec	src/apps/polar/moldft.cc	/^    double gprec;                      \/\/\/< gradient precision$/;"	m	struct:CalculationParameters	file:
gprime	src/madness/mra/testgconv.cc	/^double gprime(const coord_1d& r) {$/;"	f
gprint	src/apps/polar/moldft.cc	/^    void gprint(World &world) const$/;"	f	struct:CalculationParameters
gprofexit	src/madness/misc/gprofexit.cc	/^    void gprofexit(int id, int nproc) {$/;"	f	namespace:madness
grad	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> grad(const Function<T, NDIM>& f,$/;"	f	namespace:madness
grad_atomic_mask	src/examples/molecularmask.h	/^    madness::coord_3d grad_atomic_mask(const madness::coord_3d& r, unsigned int i) const {$/;"	f	class:MolecularMaskBase
grad_ble_one	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> grad_ble_one(const Function<T, NDIM>& f,$/;"	f	namespace:madness
grad_ble_two	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> grad_ble_two(const Function<T, NDIM>& f,$/;"	f	namespace:madness
grad_bpsline_two	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> grad_bpsline_two(const Function<T, NDIM>& f,$/;"	f	namespace:madness
grad_bspline_one	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> grad_bspline_one(const Function<T, NDIM>& f,$/;"	f	namespace:madness
grad_bspline_three	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> grad_bspline_three(const Function<T, NDIM>& f,$/;"	f	namespace:madness
grad_rho	src/examples/gygi_soltion.cc	/^  realfunc grad_rho(const realfunc& dens) const {$/;"	f	class:GygiPot	file:
grad_sdf	src/examples/molecularmask.h	/^    madness::coord_3d grad_sdf(const madness::coord_3d& r, const madness::coord_3d& center) const {$/;"	f	class:MolecularMaskBase
grad_sdf	src/madness/mra/sdf_shape_2D.h	/^        coord_2d grad_sdf(const coord_2d& pt) const {$/;"	f	class:madness::SDFCircle
grad_sdf	src/madness/mra/sdf_shape_2D.h	/^        coord_2d grad_sdf(const coord_2d& pt) const {$/;"	f	class:madness::SDFRectangle
grad_sdf	src/madness/mra/sdf_shape_3D.h	/^        coord_3d grad_sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFBox
grad_sdf	src/madness/mra/sdf_shape_3D.h	/^        coord_3d grad_sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFCone
grad_sdf	src/madness/mra/sdf_shape_3D.h	/^        coord_3d grad_sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFCylinder
grad_sdf	src/madness/mra/sdf_shape_3D.h	/^        coord_3d grad_sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFEllipsoid
grad_sdf	src/madness/mra/sdf_shape_3D.h	/^        coord_3d grad_sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFParaboloid
grad_sdf	src/madness/mra/sdf_shape_3D.h	/^        coord_3d grad_sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFPlane
grad_sdf	src/madness/mra/sdf_shape_3D.h	/^        coord_3d grad_sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFSphere
gradient	src/apps/chem/SCF.h	/^	madness::Tensor<double> gradient(const Tensor<double>& x) {$/;"	f	class:madness::MolecularEnergy
gradient	src/apps/chem/mp2.h	/^        Tensor<double> gradient(const Tensor<double>& x) {$/;"	f	class:madness::HartreeFock
gradient	src/apps/chem/nemo.cc	/^Tensor<double> Nemo::gradient(const Tensor<double>& x) {$/;"	f	class:madness::Nemo
gradient	src/apps/chem/znemo.cc	/^Tensor<double> Znemo::gradient(const Tensor<double>& x) {$/;"	f	class:madness::Znemo
gradient	src/apps/chem/znemo.h	/^	Tensor<double> gradient() {$/;"	f	class:madness::Znemo
gradient	src/apps/moldft/mcpfit.cc	/^    tensorT gradient(const tensorT& x) {$/;"	f	struct:CoreFittingTarget
gradient	src/apps/polar/mcpfit.cc	/^    tensorT gradient(const tensorT& x) {$/;"	f	struct:CoreFittingTarget
gradient	src/apps/polar/moldft.cc	/^    madness::Tensor<double> gradient(const Tensor<double> &x)$/;"	f	class:MolecularEnergy
gradient	src/examples/molecularmask.h	/^    madness::coord_3d gradient(const madness::coord_3d& r) const {$/;"	f	class:MolecularMaskBase
gradient	src/madness/tensor/gfit.cc	/^    Tensor<double> gradient(const Tensor<double>& expnt) {$/;"	f	class:Fred
gradient	src/madness/tensor/kain.cc	/^    Tensor<double> gradient(const Tensor<double>& x) {$/;"	f	struct:Test
gradient	src/madness/tensor/kain.cc	/^    Tensor<double> gradient(const Tensor<double>& x) {$/;"	f	struct:Test2
gradient	src/madness/tensor/kain.cc	/^    virtual Tensor<double> gradient(const Tensor<double>& x) {$/;"	f	struct:OptimizationTargetInterface
gradient	src/madness/tensor/solvers.h	/^        virtual Tensor<double> gradient(const Tensor<double>& x) {$/;"	f	struct:madness::OptimizationTargetInterface
gradient	src/madness/tensor/test_solvers.cc	/^    Tensor<double> gradient(const Tensor<double>& x) {$/;"	f	struct:Test
gradient	src/madness/tensor/test_solvers.cc	/^    Tensor<double> gradient(const Tensor<double>& x) {$/;"	f	struct:Test2
gradient_norm	src/apps/chem/molecular_optimizer.h	/^    double gradient_norm() const {return gnorm;}$/;"	f	class:madness::MolecularOptimizer
gradient_norm	src/apps/moldft/mcpfit.cc	/^    double gradient_norm() const$/;"	f	class:MySteepestDescent
gradient_norm	src/apps/polar/mcpfit.cc	/^    double gradient_norm() const$/;"	f	class:MySteepestDescent
gradient_norm	src/madness/tensor/kain.cc	/^    double gradient_norm() const {return gnorm;}$/;"	f	class:QuasiNewton
gradient_norm	src/madness/tensor/kain.cc	/^    double gradient_norm() const {return gnorm;}$/;"	f	class:SteepestDescent
gradient_norm	src/madness/tensor/solvers.cc	/^        double QuasiNewton::gradient_norm() const {return gnorm;}$/;"	f	class:madness::QuasiNewton
gradient_norm	src/madness/tensor/solvers.cc	/^    double SteepestDescent::gradient_norm() const {return gnorm;}$/;"	f	class:madness::SteepestDescent
gradient_operator	src/madness/mra/derivative.h	/^    gradient_operator(World& world,$/;"	f	namespace:madness
gradient_precision	src/apps/chem/molecular_optimizer.h	/^	double gradient_precision() const {return get<double>("gradient_precision");}$/;"	f	class:madness::MolecularOptimizationParameters
gradient_precision	src/apps/chem/molopt.h	/^        const double gradient_precision; \/\/< Assumed precision in the gradient$/;"	m	class:madness::MolOpt
gradient_precision	src/apps/polar/mcpfit.cc	/^    const double gradient_precision; \/\/ Numerical precision of each element of residual$/;"	m	class:MySteepestDescent	file:
gradient_precision	src/madness/tensor/kain.cc	/^    const double gradient_precision; \/\/ Numerical precision of each element of residual$/;"	m	class:QuasiNewton	file:
gradient_precision	src/madness/tensor/kain.cc	/^    const double gradient_precision; \/\/ Numerical precision of each element of residual$/;"	m	class:SteepestDescent	file:
gradient_precision	src/madness/tensor/solvers.h	/^        const double gradient_precision; \/\/ Numerical precision of each element of residual$/;"	m	class:madness::QuasiNewton
gradop	src/apps/chem/PNOF12Potentials.h	/^	std::vector< std::shared_ptr< real_derivative_3d > > gradop;			\/\/\/< Gradient Operator$/;"	m	class:madness::F12Potentials
gradop	src/apps/chem/SCF.h	/^	std::vector< std::shared_ptr<real_derivative_3d> > gradop;$/;"	m	class:madness::SCF
gradop	src/apps/chem/SCFOperators.h	/^    Derivative<T,NDIM> gradop;$/;"	m	class:madness::DerivativeOperator
gradop	src/apps/chem/SCFOperators.h	/^    std::vector< std::shared_ptr< Derivative<T,NDIM> > > gradop;$/;"	m	class:madness::Laplacian
gradop	src/apps/chem/SCFOperators.h	/^    std::vector< std::shared_ptr<Derivative<T,NDIM> > > gradop;$/;"	m	class:madness::Kinetic
gradop	src/apps/polar/moldft.cc	/^    std::vector<std::shared_ptr<real_derivative_3d>> gradop;$/;"	m	struct:Calculation	file:
gradop	src/examples/h2dft.cc	/^std::vector< std::shared_ptr<real_derivative_3d> > gradop;$/;"	v
gradop	src/examples/hedft.cc	/^std::vector< std::shared_ptr<real_derivative_3d> > gradop;$/;"	v
gradop	src/examples/hefxc.cc	/^std::vector< std::shared_ptr<real_derivative_3d> > gradop;$/;"	v
gradop	src/examples/newsolver_lda.cc	/^std::vector< std::shared_ptr<real_derivative_3d> > gradop;$/;"	v
gram_schmidt	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::gram_schmidt(World &world, ResponseFunction &f) {$/;"	f	class:TDHF
gram_schmidt	src/apps/adrian/TDDFT.cc	/^void TDHF::gram_schmidt(World &world, ResponseFunction &f,$/;"	f	class:TDHF
gram_schmidt	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::gram_schmidt(World & world,$/;"	f	class:TDHF
gram_schmidt	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::gram_schmidt(World & world,$/;"	f	class:TDHF
gram_schmidt	src/apps/adrian/TDHF2.cc	/^void TDHF::gram_schmidt(World & world,$/;"	f	class:TDHF
gram_schmidt	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::gram_schmidt(World & world,$/;"	f	class:TDHF
gram_schmidt	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::gram_schmidt(World & world,$/;"	f	class:TDHF
gram_schmidt	src/apps/bryan/TDHF2.cc	/^void TDHF::gram_schmidt(World & world,$/;"	f	class:TDHF
gram_schmidt	src/apps/hf/solver.h	/^    void gram_schmidt(vecfuncT& f, KPoint kpoint)$/;"	f	class:madness::Solver
grep	src/madness/tensor/mtxmq_graveyard/new_mtxmq/tests/testDocStrings.py	/^def grep(filename, string):$/;"	f
grid	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    const Grid* grid;$/;"	m	struct:elem::BlockDistData
grid	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	/^    const Grid* grid;$/;"	m	struct:elem::DistData
grid_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    const elem::Grid* grid_;$/;"	m	class:elem::AbstractBlockDistMatrix
grid_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    const elem::Grid* grid_;$/;"	m	class:elem::AbstractDistMatrix
grid_	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^  grid_(A.grid_)$/;"	f	namespace:elem
grid_	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^  grid_(A.grid_)$/;"	f	namespace:elem
ground_orbitals	src/apps/adrian/ResponsePotential.h	/^      std::vector<real_function_3d> ground_orbitals;                   \/\/ Pointer to ground state orbitals$/;"	m	class:madness::ResponsePotential
ground_orbitals	src/apps/bryan/ResponsePotential.h	/^      std::vector<real_function_3d> ground_orbitals;                   \/\/ Pointer to ground state orbitals$/;"	m	class:madness::ResponsePotential
ground_rho	src/apps/adrian/ResponsePotential.h	/^      real_function_3d ground_rho;                                     \/\/ Pointer to ground state density$/;"	m	class:madness::ResponsePotential
ground_rho	src/apps/bryan/ResponsePotential.h	/^      real_function_3d ground_rho;                                     \/\/ Pointer to ground state density$/;"	m	class:madness::ResponsePotential
group	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^    MPI_Group group;$/;"	m	struct:elem::mpi::Group
group	src/madness/world/safempi.h	/^            MPI_Group group;$/;"	m	struct:SafeMPI::Group::Impl
group	src/madness/world/safempi.h	/^        MPI_Group group() const {$/;"	f	class:SafeMPI::Group
group_bcast_handler	src/madness/world/worldgop.h	/^        static void group_bcast_handler(const AmArg& arg) {$/;"	f	class:madness::WorldGopInterface
group_bcast_task	src/madness/world/worldgop.h	/^        void group_bcast_task(const keyT& key, const valueT& value,$/;"	f	class:madness::WorldGopInterface
group_orbital_sets	src/apps/chem/SCF.cc	/^std::vector<int> SCF::group_orbital_sets(World &world, const tensorT &eps,$/;"	f	class:madness::SCF
group_rank_	src/madness/world/group.h	/^            ProcessID group_rank_; \/\/\/< The group rank of this process$/;"	m	class:madness::Group::Impl
group_registry	src/madness/world/group.cc	/^        group_registry_container group_registry;$/;"	m	namespace:madness::__anon9	file:
group_registry_container	src/madness/world/group.cc	/^                group_registry_container;$/;"	t	namespace:madness::__anon9	file:
group_to_world_map_	src/madness/world/group.h	/^            std::vector<ProcessID> group_to_world_map_; \/\/\/< List of nodes in the group$/;"	m	class:madness::Group::Impl
grow	src/madness/world/dqueue.h	/^        void grow() {$/;"	f	class:madness::DQueue
grow_rank	src/apps/chem/PNO.cpp	/^PNOPairs PNO::grow_rank(PNOPairs& pairs, std::string exop)const{$/;"	f	class:madness::PNO
gsfactor	src/apps/hf/ewald.cc	/^  std::vector<double_complex> gsfactor;$/;"	m	class:EwaldNuclearPotentialFunctor	file:
gtest	src/apps/polar/moldft.cc	/^    bool gtest;                        \/\/\/< geometry tolerance$/;"	m	struct:CalculationParameters	file:
gtest_flag_saver_	src/madness/external/gtest/include/gtest/gtest.h	/^  const internal::GTestFlagSaver* const gtest_flag_saver_;$/;"	m	class:testing::Test::internal
gtest_internal	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^namespace gtest_internal {$/;"	n	namespace:std::tr1
gtest_trace_stack	src/madness/external/gtest/src/gtest-internal-inl.h	/^  const std::vector<TraceInfo>& gtest_trace_stack() const {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::vector<TraceInfo>& gtest_trace_stack() {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;$/;"	m	class:testing::internal::UnitTestImpl
gthpseudopotential	src/apps/chem/SCF.h	/^	std::shared_ptr<GTHPseudopotential <double> > gthpseudopotential;$/;"	m	class:madness::SCF
gtol	src/apps/chem/CalculationParameters.h	/^	double gtol() const {return get<double>("gtol");}$/;"	f	struct:madness::CalculationParameters
gtol	src/apps/chem/molopt.h	/^        const double gtol;          \/\/< Convergence test for maximum gradient element$/;"	m	class:madness::MolOpt
gtol	src/apps/polar/moldft.cc	/^    double gtol;                       \/\/\/< geometry tolerance$/;"	m	struct:CalculationParameters	file:
guess	src/apps/chem/znemo.h	/^	std::vector<std::string> guess() const {return get<std::vector<std::string>>("guess");}$/;"	f	class:madness::Nemo_complex_Parameters
guess	src/apps/nick/tdse1.cc	/^static double_complex guess(const coordT& r) {$/;"	f	file:
guess	src/apps/tdse/tdse.confused.cc	/^static double guess(const coordT& r) {$/;"	f	file:
guess	src/apps/tdse/tdse4.cc	/^static double guess(const coordT& r) {$/;"	f	file:
guess	src/examples/3dharmonic.cc	/^double guess(const coord_3d& r) {$/;"	f
guess	src/examples/h2.cc	/^static double guess(const coord_3d& r) {$/;"	f	file:
guess	src/examples/h2dft.cc	/^static double guess(const coord_3d& r) {$/;"	f	file:
guess	src/examples/h2dynamic.cc	/^static double guess(const coord_3d& r) {$/;"	f	file:
guess	src/examples/hatom_1d.cc	/^static double guess(const coord_1d& r) {$/;"	f	file:
guess	src/examples/hedft.cc	/^static double guess(const coord_3d& r) {$/;"	f	file:
guess	src/examples/hefxc.cc	/^static double guess(const coord_3d& r) {$/;"	f	file:
guess	src/examples/hehf.cc	/^static double guess(const coord_3d& r) {$/;"	f	file:
guess	src/examples/helium_mp2.cc	/^static double guess(const coord_3d& r) {$/;"	f	file:
guess	src/examples/newsolver.cc	/^static double guess(const coord_3d& r) {$/;"	f	file:
guess	src/examples/newsolver_lda.cc	/^static double guess(const coord_3d& r) {$/;"	f	file:
guess	src/examples/nonlinschro.cc	/^static double guess(const coord_1d& r) {$/;"	f	file:
guess	src/examples/takeshi_response.cc	/^static double guess(const coord_3d& r){$/;"	f	file:
guess	src/examples/tdse_example.cc	/^static double guess(const coordT& r) {$/;"	f	file:
guess1s	src/apps/tdse/tdse.cc	/^static double guess1s(const coordT& r) {$/;"	f	file:
guess2s	src/apps/tdse/tdse.cc	/^static double guess2s(const coordT& r) {$/;"	f	file:
guess_active_orbitals	src/apps/chem/TDHF.h	/^		std::size_t guess_active_orbitals() const {return get<std::size_t>("guess_active_orbitals");}$/;"	f	struct:madness::TDHF::Parameters
guess_cm	src/apps/chem/TDHF.h	/^		double guess_cm() const {return get<double>("guess_cm");}$/;"	f	struct:madness::TDHF::Parameters
guess_contracted_virtuals_from_file	src/apps/chem/PNOGuessFunctions.h	/^	vector_real_function_3d guess_contracted_virtuals_from_file() const {$/;"	f	class:madness::BasisFunctions
guess_dconv	src/apps/chem/TDHF.h	/^		double guess_dconv() const {return get<double>("guess_dconv");}$/;"	f	struct:madness::TDHF::Parameters
guess_diag	src/apps/chem/TDHF.h	/^		bool guess_diag() const {return get<bool>("guess_diag");}$/;"	f	struct:madness::TDHF::Parameters
guess_econv	src/apps/chem/TDHF.h	/^		double guess_econv() const {return get<double>("guess_econv");}$/;"	f	struct:madness::TDHF::Parameters
guess_excitation_operators	src/apps/chem/TDHF.h	/^		std::string guess_excitation_operators() const {return get<std::string>("guess_excitation_operators");}$/;"	f	struct:madness::TDHF::Parameters
guess_excitation_operators	src/apps/chem/zcis.h	/^	std::string guess_excitation_operators() const {return get<std::string>("guess_excitation_operators");};$/;"	f	class:madness::Complex_CIS_Parameters
guess_excitations	src/apps/chem/TDHF.h	/^		std::size_t guess_excitations() const {return get<std::size_t>("guess_excitations");}$/;"	f	struct:madness::TDHF::Parameters
guess_excitations	src/apps/chem/zcis.h	/^	int guess_excitations() const {return get<int>("guess_excitations");};$/;"	f	class:madness::Complex_CIS_Parameters
guess_file	src/apps/chem/corepotential.h	/^    inline std::string guess_file() const { return guess_filename; }$/;"	f	class:madness::CorePotentialManager
guess_file	src/apps/chem/molecule.h	/^    std::string guess_file() const { return core_pot.guess_file(); };$/;"	f	class:madness::Molecule
guess_file	src/apps/polar/corepotential.h	/^    inline std::string guess_file() const { return guess_filename; }$/;"	f	class:CorePotentialManager
guess_file	src/apps/polar/molecule.h	/^    std::string guess_file() const { return core_pot.guess_file(); };$/;"	f	class:Molecule
guess_filename	src/apps/chem/corepotential.h	/^    std::string guess_filename; \/\/\/< filename of initial guess density data$/;"	m	class:madness::CorePotentialManager
guess_filename	src/apps/polar/corepotential.h	/^    std::string guess_filename; \/\/\/< filename of initial guess density data$/;"	m	class:CorePotentialManager
guess_functions	src/apps/chem/znemo.h	/^	std::vector<std::string> guess_functions() const {return get<std::vector<std::string>>("guess_functions");}$/;"	f	class:madness::Nemo_complex_Parameters
guess_max_iter	src/apps/adrian/ResponseParameters.h	/^      int guess_max_iter;                \/\/\/< Maximum number of iterations for guess functions$/;"	m	struct:madness::ResponseParameters
guess_max_iter	src/apps/bryan/ResponseParameters.h	/^      int guess_max_iter;                \/\/\/< Maximum number of iterations for guess functions$/;"	m	struct:madness::ResponseParameters
guess_maxiter	src/apps/chem/TDHF.h	/^		std::size_t guess_maxiter() const {return get<std::size_t>("guess_maxiter");}$/;"	f	struct:madness::TDHF::Parameters
guess_maxiter	src/apps/chem/zcis.h	/^	int guess_maxiter() const {return get<int>("guess_maxiter");};$/;"	f	class:madness::Complex_CIS_Parameters
guess_mp1_3	src/apps/chem/mp2.cc	/^void MP2::guess_mp1_3(ElectronPair& pair) const {$/;"	f	class:madness::MP2
guess_occ_to_virt	src/apps/chem/TDHF.h	/^		std::size_t guess_occ_to_virt() const {return get<std::size_t>("guess_occ_to_virt");}$/;"	f	struct:madness::TDHF::Parameters
guess_roots	src/apps/chem/TDHF.h	/^	mutable std::vector<CC_vecfunction> guess_roots;$/;"	m	class:madness::TDHF
guess_virtual_gaussian_shell	src/apps/chem/PNOGuessFunctions.cpp	/^ vector_real_function_3d BasisFunctions::guess_virtual_gaussian_shell(const Atom& atom, const int l, const double e) const {$/;"	f	class:madness::BasisFunctions
guess_virtuals	src/apps/chem/PNO.cpp	/^vector_real_function_3d PNO::guess_virtuals(const vector_real_function_3d& f, const GuessType& inpgt) const {$/;"	f	class:madness::PNO
guess_virtuals_from_file	src/apps/chem/PNOGuessFunctions.cpp	/^ vector_real_function_3d BasisFunctions::guess_virtuals_from_file() const {$/;"	f	class:madness::BasisFunctions
guess_virtuals_internal	src/apps/chem/PNOGuessFunctions.cpp	/^ vector_real_function_3d BasisFunctions::guess_virtuals_internal(const std::map<std::string, std::vector<int> > guess_map) const {$/;"	f	class:madness::BasisFunctions
guess_with_exop	src/apps/chem/PNOGuessFunctions.h	/^	vector_real_function_3d guess_with_exop(const vector_real_function_3d& f, const std::string& type="dipole+", const bool trigo=true)const{$/;"	f	class:madness::BasisFunctions
guess_with_psi4	src/apps/chem/PNOGuessFunctions.h	/^	vector_real_function_3d guess_with_psi4(const vector_real_function_3d& mos)const{$/;"	f	class:madness::BasisFunctions
guessfactory	src/apps/chem/GuessFactory.cc	/^namespace guessfactory{$/;"	n	namespace:madness	file:
guessfactory	src/apps/chem/GuessFactory.h	/^namespace guessfactory{$/;"	n	namespace:madness
guesstype	src/apps/chem/PNOParameters.h	/^	GuessType guesstype()const { return assign_from_string<GuessType>(get<std::string >("guesstype"));}$/;"	f	class:madness::PNOParameters
guiDisabled	src/madness/external/elemental/src/core/global.cpp	/^bool guiDisabled;$/;"	m	namespace:__anon33	file:
gval	src/apps/chem/CalculationParameters.h	/^	double gval() const {return get<double>("gval");}$/;"	f	struct:madness::CalculationParameters
gval	src/apps/polar/moldft.cc	/^    double gval;                       \/\/\/< value precision$/;"	m	struct:CalculationParameters	file:
gvecs	src/apps/hf/ewald.cc	/^  std::vector< Vector<double,3> > gvecs;$/;"	m	class:EwaldNuclearPotentialFunctor	file:
gvecs	src/apps/moldft/testcosine.cc	/^   std::vector<coord_3d> gvecs; $/;"	m	class:PWFunctor	file:
gx2my2dz2mr2	src/apps/adrian/gaussian.h	/^  gxzdz2mr2, gx2my2dz2mr2, gxzdx2my2, gx4mx2y2py4, $/;"	m	class:slymer::GaussianType
gx2my2dz2mr2	src/apps/bryan/gaussian.h	/^  gxzdz2mr2, gx2my2dz2mr2, gxzdx2my2, gx4mx2y2py4, $/;"	m	class:slymer::GaussianType
gx4mx2y2py4	src/apps/adrian/gaussian.h	/^  gxzdz2mr2, gx2my2dz2mr2, gxzdx2my2, gx4mx2y2py4, $/;"	m	class:slymer::GaussianType
gx4mx2y2py4	src/apps/bryan/gaussian.h	/^  gxzdz2mr2, gx2my2dz2mr2, gxzdx2my2, gx4mx2y2py4, $/;"	m	class:slymer::GaussianType
gxxxx	src/apps/adrian/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxxx	src/apps/bryan/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxxy	src/apps/adrian/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxxy	src/apps/bryan/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxxz	src/apps/adrian/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxxz	src/apps/bryan/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxyy	src/apps/adrian/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxyy	src/apps/bryan/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxyz	src/apps/adrian/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxyz	src/apps/bryan/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxzz	src/apps/adrian/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxxzz	src/apps/bryan/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxydx2my2	src/apps/adrian/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gxydx2my2	src/apps/bryan/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gxydz2mr2	src/apps/adrian/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gxydz2mr2	src/apps/bryan/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gxyyy	src/apps/adrian/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxyyy	src/apps/bryan/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxyyz	src/apps/adrian/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxyyz	src/apps/bryan/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxyzz	src/apps/adrian/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxyzz	src/apps/bryan/gaussian.h	/^  gxxxx, gxxxy, gxxxz, gxxyy, gxxyz, gxxzz, gxyyy, gxyyz, gxyzz,$/;"	m	class:slymer::GaussianType
gxzdx2my2	src/apps/adrian/gaussian.h	/^  gxzdz2mr2, gx2my2dz2mr2, gxzdx2my2, gx4mx2y2py4, $/;"	m	class:slymer::GaussianType
gxzdx2my2	src/apps/bryan/gaussian.h	/^  gxzdz2mr2, gx2my2dz2mr2, gxzdx2my2, gx4mx2y2py4, $/;"	m	class:slymer::GaussianType
gxzdz2mr2	src/apps/adrian/gaussian.h	/^  gxzdz2mr2, gx2my2dz2mr2, gxzdx2my2, gx4mx2y2py4, $/;"	m	class:slymer::GaussianType
gxzdz2mr2	src/apps/bryan/gaussian.h	/^  gxzdz2mr2, gx2my2dz2mr2, gxzdx2my2, gx4mx2y2py4, $/;"	m	class:slymer::GaussianType
gxzzz	src/apps/adrian/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gxzzz	src/apps/bryan/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gyyyy	src/apps/adrian/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gyyyy	src/apps/bryan/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gyyyz	src/apps/adrian/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gyyyz	src/apps/bryan/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gyyzz	src/apps/adrian/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gyyzz	src/apps/bryan/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gyzdx2my2	src/apps/adrian/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gyzdx2my2	src/apps/bryan/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gyzdz2mr2	src/apps/adrian/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gyzdz2mr2	src/apps/bryan/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gyzzz	src/apps/adrian/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gyzzz	src/apps/bryan/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gzero	src/apps/adrian/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gzero	src/apps/bryan/gaussian.h	/^  gxydx2my2, gyzdx2my2, gxydz2mr2, gyzdz2mr2, gzero,$/;"	m	class:slymer::GaussianType
gzzzz	src/apps/adrian/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
gzzzz	src/apps/bryan/gaussian.h	/^  gxzzz, gyyyy, gyyyz, gyyzz, gyzzz, gzzzz,$/;"	m	class:slymer::GaussianType
h	src/apps/chem/molecular_optimizer.h	/^    Tensor<double> h;$/;"	m	class:madness::MolecularOptimizer
h	src/apps/moldft/fci/fci.F	/^      double precision ecore, h(/;"	v	program:fci
h	src/apps/nick/interp.h	/^    double h;             \/\/< Grid spacing$/;"	m	class:CubicInterpolationTable
h	src/madness/misc/interpolation_1d.h	/^    double h;             \/\/\/< Grid spacing$/;"	m	class:CubicInterpolationTable
h	src/madness/mra/funcimpl.h	/^            implT* h;     \/\/\/< the result function h(1,2) = f(1,2) * g(1)$/;"	m	struct:madness::FunctionImpl::multiply_op
h	src/madness/mra/testgconv.cc	/^double h(const coord_1d& r) {$/;"	f
h	src/madness/tensor/kain.cc	/^    Tensor<double> h;$/;"	m	class:QuasiNewton	file:
h	src/madness/tensor/solvers.h	/^        Tensor<double> h;$/;"	m	class:madness::QuasiNewton
h	src/madness/world/worldhashmap.h	/^            hashT* h;               \/\/ Associated hash table$/;"	m	class:madness::Hash_private::HashIterator
h0	src/madness/mra/function_common_data.h	/^        Tensor<double> h0, h1, g0, g1;      \/\/\/< The separate blocks of twoscale coefficients$/;"	m	class:madness::FunctionCommonData
h0	src/madness/mra/twoscale.cc	/^        Tensor<double> h0;$/;"	m	class:madness::twoscale_cache_class	file:
h0T	src/madness/mra/function_common_data.h	/^        Tensor<double> h0T, h1T, g0T, g1T;  \/\/\/< The separate blocks of twoscale coefficients$/;"	m	class:madness::FunctionCommonData
h0h1	src/madness/mra/tools/twoscalecoeffs.py	/^def h0h1(k):$/;"	f
h1	src/madness/mra/function_common_data.h	/^        Tensor<double> h0, h1, g0, g1;      \/\/\/< The separate blocks of twoscale coefficients$/;"	m	class:madness::FunctionCommonData
h1	src/madness/mra/twoscale.cc	/^        Tensor<double> h1;$/;"	m	class:madness::twoscale_cache_class	file:
h1T	src/madness/mra/function_common_data.h	/^        Tensor<double> h0T, h1T, g0T, g1T;  \/\/\/< The separate blocks of twoscale coefficients$/;"	m	class:madness::FunctionCommonData
h_orbital	src/examples/helium_mp2.cc	/^static double h_orbital(const coord_3d& r) {$/;"	f	file:
half_moments	src/madness/mra/tools/twoscalecoeffs.py	/^def half_moments(maxm,k):$/;"	f
ham_no_diag	src/apps/adrian/TDDFT.h	/^  Tensor<double> ham_no_diag;  \/\/ Ground state ham. without diagonal (Used when$/;"	m	class:TDHF
ham_no_diag	src/apps/adrian/TDHF.h	/^      Tensor<double> ham_no_diag;                     \/\/ Ground state ham. without diagonal (Used when localized orbitals are given)$/;"	m	class:TDHF
ham_no_diag	src/apps/adrian/TDHF2.h	/^      Tensor<double> ham_no_diag;                     \/\/ Ground state ham. without diagonal (Used when localized orbitals are given)$/;"	m	class:TDHF
ham_no_diag	src/apps/bryan/TDHF.h	/^      Tensor<double> ham_no_diag;                     \/\/ Ground state ham. without diagonal (Used when localized orbitals are given)$/;"	m	class:TDHF
ham_no_diag	src/apps/bryan/TDHF2.h	/^      Tensor<double> ham_no_diag;                     \/\/ Ground state ham. without diagonal (Used when localized orbitals are given)$/;"	m	class:TDHF
hami	src/apps/moldft/fci/fci.F	/^      double precision hami(/;"	v	program:fci
hamiltonian	src/apps/adrian/TDDFT.h	/^  Tensor<double> hamiltonian;  \/\/ Ground state hamiltonian tensor$/;"	m	class:TDHF
hamiltonian	src/apps/adrian/TDHF.h	/^      Tensor<double> hamiltonian;                     \/\/ Ground state hamiltonian tensor $/;"	m	class:TDHF
hamiltonian	src/apps/adrian/TDHF2.h	/^      Tensor<double> hamiltonian;                     \/\/ Ground state hamiltonian tensor $/;"	m	class:TDHF
hamiltonian	src/apps/bryan/TDHF.h	/^      Tensor<double> hamiltonian;                     \/\/ Ground state hamiltonian tensor $/;"	m	class:TDHF
hamiltonian	src/apps/bryan/TDHF2.h	/^      Tensor<double> hamiltonian;                     \/\/ Ground state hamiltonian tensor $/;"	m	class:TDHF
hamiltonian_matrix	src/examples/vnucso.cc	/^Tensor<double_complex> hamiltonian_matrix(World& world,$/;"	f
handle_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  HANDLE handle_;$/;"	m	class:testing::internal::AutoHandle
handle_small_cases	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^int handle_small_cases(char *jobz, char *range, int *np, double  *D,$/;"	f	file:
handler	src/madness/world/world_object.h	/^            am_handlerT handler;$/;"	m	struct:madness::detail::PendingMsg
handler	src/madness/world/world_object.h	/^        static void handler(const AmArg& arg) {$/;"	f	class:madness::WorldObject
handler	src/madness/world/worldam.h	/^        static void handler(void *buf, std::size_t nbyte) {$/;"	f	class:madness::WorldAmInterface
harmonic_potential_boxed	src/apps/chem/diamagneticpotentialfactor.cc	/^	harmonic_potential_boxed(const double r, const double deviation=FunctionDefaults<3>::get_thresh()) :$/;"	f	struct:madness::harmonic_potential_boxed
harmonic_potential_boxed	src/apps/chem/diamagneticpotentialfactor.cc	/^struct harmonic_potential_boxed : public FunctionFunctorInterface<double,3> {$/;"	s	namespace:madness	file:
hartree_convolute_leaf_op	src/madness/mra/funcimpl.h	/^        hartree_convolute_leaf_op() {}$/;"	f	struct:madness::hartree_convolute_leaf_op
hartree_convolute_leaf_op	src/madness/mra/funcimpl.h	/^        hartree_convolute_leaf_op(const implT* f, const implL* g, const opT* op)$/;"	f	struct:madness::hartree_convolute_leaf_op
hartree_convolute_leaf_op	src/madness/mra/funcimpl.h	/^    struct hartree_convolute_leaf_op {$/;"	s	namespace:madness
hartree_electron_volt_relationship	src/madness/constants.h	/^        const double hartree_electron_volt_relationship = 27.21138386 ; \/\/        0.00000068          eV$/;"	m	namespace:madness::constants
hartree_fock	src/apps/hf/hartreefock.cc	/^  void HartreeFock<T,NDIM>::hartree_fock(int maxits)$/;"	f	class:madness::HartreeFock
hartree_hertz_relationship	src/madness/constants.h	/^        const double hartree_hertz_relationship = 6.579683920722e15 ; \/\/ 0.000000000044 e15 Hz$/;"	m	namespace:madness::constants
hartree_inverse_meter_relationship	src/madness/constants.h	/^        const double hartree_inverse_meter_relationship = 2.194746313705e7 ; \/\/  0.000000000015 e7  m^-1$/;"	m	namespace:madness::constants
hartree_joule_relationship	src/madness/constants.h	/^        const double hartree_joule_relationship = 4.35974394e-18 ; \/\/    0.00000022e-18     J$/;"	m	namespace:madness::constants
hartree_kelvin_relationship	src/madness/constants.h	/^        const double hartree_kelvin_relationship = 3.1577465e5 ; \/\/        0.0000055 e5         K$/;"	m	namespace:madness::constants
hartree_leaf_op	src/madness/mra/funcimpl.h	/^        hartree_leaf_op() {}$/;"	f	struct:madness::hartree_leaf_op
hartree_leaf_op	src/madness/mra/funcimpl.h	/^        hartree_leaf_op(const implT* f, const long& k) : f(f), k(k) {}$/;"	f	struct:madness::hartree_leaf_op
hartree_leaf_op	src/madness/mra/funcimpl.h	/^    struct hartree_leaf_op {$/;"	s	namespace:madness
hartree_op	src/madness/mra/funcimpl.h	/^            hartree_op() {}$/;"	f	struct:madness::FunctionImpl::hartree_op
hartree_op	src/madness/mra/funcimpl.h	/^            hartree_op(implT* result, const ctL& p11, const ctL& p22, const leaf_opT& leaf_op)$/;"	f	struct:madness::FunctionImpl::hartree_op
hartree_op	src/madness/mra/funcimpl.h	/^        struct hartree_op {$/;"	s	class:madness::FunctionImpl
hartree_product	src/madness/mra/funcimpl.h	/^        void hartree_product(const FunctionImpl<T,LDIM>* p1, const FunctionImpl<T,LDIM>* p2,$/;"	f	class:madness::FunctionImpl
hartree_product	src/madness/mra/mra.h	/^    hartree_product(const Function<T,KDIM>& left2, const Function<T,LDIM>& right2) {$/;"	f	namespace:madness
hartree_product	src/madness/mra/mra.h	/^    hartree_product(const Function<T,KDIM>& left2, const Function<T,LDIM>& right2,$/;"	f	namespace:madness
has_children	src/madness/mra/funcimpl.h	/^        bool has_children() const {return _has_children;}$/;"	f	struct:madness::ShallowNode
has_children	src/madness/mra/funcimpl.h	/^        has_children() const {$/;"	f	class:madness::FunctionNode
has_children	src/madness/mra/lbdeux.h	/^        bool has_children() const {$/;"	f	class:madness::LBNodeDeux
has_coeff	src/madness/mra/funcimpl.h	/^        has_coeff() const {$/;"	f	class:madness::FunctionNode
has_data	src/madness/tensor/gentensor.h	/^        bool has_data() const {return this->size()>0;};$/;"	f	class:madness::GenTensor
has_data	src/madness/tensor/lowranktensor.h	/^    bool has_data() const {return (type != TT_NONE);}$/;"	f	class:madness::LowRankTensor
has_data	src/madness/tensor/srconf.h	/^		bool has_data() const {$/;"	f	class:madness::SRConf
has_data	src/madness/tensor/tensor.h	/^        bool has_data() const {return size()!=0;};$/;"	f	class:madness::Tensor
has_fxc	src/apps/chem/xcfunctional_ldaonly.cc	/^bool XCfunctional::has_fxc() const$/;"	f	class:madness::XCfunctional
has_fxc	src/apps/chem/xcfunctional_libxc.cc	/^bool XCfunctional::has_fxc() const$/;"	f	class:madness::XCfunctional
has_fxc	src/apps/polar/xcfunctional_ldaonly.cc	/^bool XCfunctional::has_fxc() const $/;"	f	class:madness::XCfunctional
has_fxc	src/apps/polar/xcfunctional_libxc.cc	/^bool XCfunctional::has_fxc() const$/;"	f	class:madness::XCfunctional
has_guess_info	src/apps/chem/molecularbasis.h	/^    bool has_guess_info() const {$/;"	f	class:madness::AtomicBasis
has_guess_info	src/apps/hf/molecularbasis.h	/^    bool has_guess_info() const {$/;"	f	class:AtomicBasis
has_guess_info	src/apps/polar/molecularbasis.h	/^    bool has_guess_info() const {$/;"	f	class:AtomicBasis
has_guesspsp_info	src/apps/chem/molecularbasis.h	/^    bool has_guesspsp_info() const {$/;"	f	class:madness::AtomicBasis
has_kxc	src/apps/chem/xcfunctional_ldaonly.cc	/^bool XCfunctional::has_kxc() const$/;"	f	class:madness::XCfunctional
has_kxc	src/apps/chem/xcfunctional_libxc.cc	/^bool XCfunctional::has_kxc() const$/;"	f	class:madness::XCfunctional
has_kxc	src/apps/polar/xcfunctional_ldaonly.cc	/^bool XCfunctional::has_kxc() const$/;"	f	class:madness::XCfunctional
has_kxc	src/apps/polar/xcfunctional_libxc.cc	/^bool XCfunctional::has_kxc() const$/;"	f	class:madness::XCfunctional
has_new_fatal_failure	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  bool has_new_fatal_failure() const { return has_new_fatal_failure_; }$/;"	f	class:testing::internal::HasNewFatalFailureHelper
has_new_fatal_failure_	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  bool has_new_fatal_failure_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
has_no_data	src/madness/tensor/gentensor.h	/^        bool has_no_data() const {return not has_data();};$/;"	f	class:madness::GenTensor
has_no_data	src/madness/tensor/lowranktensor.h	/^    bool has_no_data() const {return (not has_data());}$/;"	f	class:madness::LowRankTensor
has_no_data	src/madness/tensor/srconf.h	/^		bool has_no_data() const {return !has_data();}$/;"	f	class:madness::SRConf
has_owner	src/madness/world/worldptr.h	/^            bool has_owner() const {$/;"	f	class:madness::detail::WorldPtr
has_owner	src/madness/world/worldref.h	/^            bool has_owner() const { return pimpl_.has_owner(); }$/;"	f	class:madness::detail::RemoteCounter
has_owner_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  bool has_owner_;$/;"	m	class:testing::internal::MutexBase
has_same_dimension_and_distribution	src/madness/tensor/distributed_matrix.h	/^        bool has_same_dimension_and_distribution(const DistributedMatrix<R>& A) {$/;"	f	class:madness::DistributedMatrix
has_structure	src/madness/tensor/srconf.h	/^		bool has_structure() const {$/;"	f	class:madness::SRConf
has_zero_rank	src/madness/tensor/gentensor.h	/^    bool has_zero_rank(const GenTensor<T>& g) {$/;"	f	namespace:madness
hash	src/madness/mra/key.h	/^        hash() const {$/;"	f	class:madness::Key
hash	src/madness/world/test_dc.cc	/^    hashT hash() const {$/;"	f	struct:Key
hash	src/madness/world/test_tree.cc	/^    hashT hash() const {$/;"	f	struct:Key
hash	src/madness/world/test_world.cc	/^    hashT hash() const {$/;"	f	struct:Key
hash	src/madness/world/vector.h	/^        hashT hash() const {$/;"	f	class:madness::Vector
hashT	src/madness/world/worldhash.h	/^    typedef std::size_t hashT;$/;"	t	namespace:madness
hashT	src/madness/world/worldhashmap.h	/^        typedef ConcurrentHashMap<keyT,valueT,hashfunT> hashT;$/;"	t	class:madness::ConcurrentHashMap
hash_combine	src/madness/world/worldhash.h	/^    inline void hash_combine(hashT& seed, const T& v) {$/;"	f	namespace:madness
hash_range	src/madness/world/worldhash.h	/^    hash_range(hashT& seed, const T* t, std::size_t n) {$/;"	f	namespace:madness
hash_range	src/madness/world/worldhash.h	/^    inline hashT hash_range(It first, It last) {$/;"	f	namespace:madness
hash_range	src/madness/world/worldhash.h	/^    inline hashT hash_range(const T* t, std::size_t n) {$/;"	f	namespace:madness
hash_range	src/madness/world/worldhash.h	/^    inline void hash_range(hashT& seed, It first, It last) {$/;"	f	namespace:madness
hash_range	src/madness/world/worldhash.h	/^    inline void hash_range(hashT& seed, const T(&t)[n]) {$/;"	f	namespace:madness
hash_to_bin	src/madness/world/worldhashmap.h	/^        unsigned int hash_to_bin(const keyT& key) const {$/;"	f	class:madness::ConcurrentHashMap
hash_value	src/madness/world/array_addons.h	/^    madness::hashT hash_value(const std::array<T,N>& a) {$/;"	f	namespace:madness
hash_value	src/madness/world/distributed_id.h	/^        friend hashT hash_value(const ProcessKey<Key, Tag>& key) {$/;"	f	class:madness::ProcessKey
hash_value	src/madness/world/distributed_id.h	/^        friend hashT hash_value(const TaggedKey<Key, Tag>& key) {$/;"	f	class:madness::TaggedKey
hash_value	src/madness/world/distributed_id.h	/^    inline madness::hashT hash_value(const madness::DistributedID& id) {$/;"	f	namespace:std
hash_value	src/madness/world/test_hashdc.cc	/^hashT hash_value(const Key& key) {$/;"	f
hash_value	src/madness/world/uniqueid.h	/^    inline hashT hash_value(const uniqueidT& id) {$/;"	f	namespace:madness
hash_value	src/madness/world/worldhash.h	/^    hash_value(const T t) {$/;"	f	namespace:madness
hash_value	src/madness/world/worldhash.h	/^    hash_value(const T& t) {$/;"	f	namespace:madness
hash_value	src/madness/world/worldhash.h	/^    inline hashT hash_value(const T* t) {$/;"	f	namespace:madness
hash_value	src/madness/world/worldhash.h	/^    inline hashT hash_value(const std::basic_string<T>& t) {$/;"	f	namespace:madness
hashbig	src/madness/world/lookup3.c	/^uint32_t hashbig( const void *key, size_t length, uint32_t initval)$/;"	f
hashfun	src/madness/world/worlddc.h	/^        hashfunT hashfun;$/;"	m	class:madness::WorldDCDefaultPmap
hashfun	src/madness/world/worldhashmap.h	/^        hashfunT hashfun;$/;"	m	class:madness::ConcurrentHashMap
hashlittle	src/madness/world/lookup3.c	/^uint32_t hashlittle( const void *key, size_t length, uint32_t initval)$/;"	f
hashlittle2	src/madness/world/lookup3.c	/^void hashlittle2( $/;"	f
hashmask	src/madness/world/lookup3.c	71;"	d	file:
hashsize	src/madness/world/lookup3.c	70;"	d	file:
hashuniqueT	src/madness/world/world.h	/^        struct hashuniqueT {$/;"	s	class:madness::World
hashval	src/madness/mra/key.h	/^        hashT hashval;$/;"	m	class:madness::Key
hashval	src/madness/world/test_tree.cc	/^    hashT hashval;$/;"	m	struct:Key	file:
hashval	src/madness/world/test_world.cc	/^    hashT hashval;$/;"	m	struct:Key	file:
hashvoidp	src/madness/world/world.h	/^        struct hashvoidp {$/;"	s	class:madness::World
hashword	src/madness/world/lookup3.c	/^uint32_t hashword($/;"	f
haveEomFrom_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    std::vector<bool> sentEomTo_, haveEomFrom_;$/;"	m	class:elem::AxpyInterface
haveMaxImagWindowVal	src/madness/external/elemental/src/core/global.cpp	/^     haveMinImagWindowVal=false, haveMaxImagWindowVal=false;$/;"	m	namespace:__anon33	file:
haveMaxRealWindowVal	src/madness/external/elemental/src/core/global.cpp	/^bool haveMinRealWindowVal=false, haveMaxRealWindowVal=false,$/;"	m	namespace:__anon33	file:
haveMinImagWindowVal	src/madness/external/elemental/src/core/global.cpp	/^     haveMinImagWindowVal=false, haveMaxImagWindowVal=false;$/;"	m	namespace:__anon33	file:
haveMinRealWindowVal	src/madness/external/elemental/src/core/global.cpp	/^bool haveMinRealWindowVal=false, haveMaxRealWindowVal=false,$/;"	m	namespace:__anon33	file:
haveViewers_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    bool haveViewers_;$/;"	m	class:elem::Grid
have_beta	src/apps/chem/CalculationParameters.h	/^	bool have_beta() const {return (nbeta()>0) and (not spin_restricted());}$/;"	f	struct:madness::CalculationParameters
have_beta	src/apps/chem/znemo.h	/^	bool have_beta() const {$/;"	f	class:madness::Znemo
hcore_guess	src/apps/chem/znemo.cc	/^Znemo::hcore_guess() const {$/;"	f	class:madness::Znemo
he_correlation	src/examples/helium_mp2.cc	/^static double he_correlation(const coord_6d& r) {$/;"	f	file:
he_ldaop	src/apps/hf/test_he.cc	/^static void he_ldaop(const Key<3>& key, Tensor<double>& t) {$/;"	f	file:
he_munge	src/apps/hf/test_he.cc	/^double he_munge(double r) {$/;"	f
he_orbital_3d	src/examples/helium_mp2.cc	/^static double he_orbital_3d(const coord_3d& r) {$/;"	f	file:
he_orbital_McQuarrie	src/examples/helium_mp2.cc	/^static double he_orbital_McQuarrie(const coord_3d& r) {$/;"	f	file:
he_orbitals	src/examples/helium_mp2.cc	/^static double he_orbitals(const coord_6d& r) {$/;"	f	file:
he_plus_orbital	src/examples/helium_mp2.cc	/^static double he_plus_orbital(const coord_3d& r) {$/;"	f	file:
head	src/madness/external/elemental/external/pmrrr/include/queue.h	/^  task_t            *head;$/;"	m	struct:__anon20
head_	src/madness/world/thread.h	/^            TaskEventListBase* head_; \/\/\/< The head of the linked list of data.$/;"	m	class:madness::profiling::TaskProfiler
header	src/madness/world/worldam.h	/^        unsigned char header[RMI::HEADER_LEN]; \/\/ !!!!!!!!!  MUST BE FIRST !!!!!!!!!!$/;"	m	class:madness::AmArg
header	src/madness/world/worldrmi.h	/^            struct header {$/;"	s	class:madness::RMI::RmiTask
height_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    Int height_, width_;$/;"	m	class:elem::AbstractBlockDistMatrix
height_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    Int height_, width_;$/;"	m	class:elem::AbstractDistMatrix
height_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    int height_, size_, gcd_;$/;"	m	class:elem::Grid
height_	src/madness/external/elemental/include/elemental/core/Matrix.hpp	/^    Int height_, width_, ldim_;$/;"	m	class:elem::Matrix
helium_pot	src/examples/helium_mp2.cc	/^static double helium_pot(const coord_6d& r) {$/;"	f	file:
help	src/madness/mra/mraplot.cc	/^std::string help = "\\n\\$/;"	v
helper	src/madness/mra/power.h	/^		struct helper {$/;"	s	namespace:madness::detail
helper	src/madness/mra/power.h	/^		struct helper<T, 0> {$/;"	s	namespace:madness::detail
helper	src/madness/mra/power.h	/^		struct helper<T, 1> {$/;"	s	namespace:madness::detail
herm_eig	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianEig/SDC.hpp	/^namespace herm_eig {$/;"	n	namespace:elem
herm_eig	src/madness/external/elemental/include/elemental/lapack-like/decomp/HermitianTridiagEig/Sort.hpp	/^namespace herm_eig {$/;"	n	namespace:elem
herm_eig	src/madness/external/elemental/src/lapack-like/HermitianEig.cpp	/^namespace herm_eig {$/;"	n	namespace:elem	file:
herm_polar	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^namespace herm_polar {$/;"	n	namespace:elem
herm_tridiag	src/madness/external/elemental/include/elemental/lapack-like/condense/HermitianTridiag/ApplyQ.hpp	/^namespace herm_tridiag {$/;"	n	namespace:elem
herm_tridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag/L.hpp	/^namespace herm_tridiag {$/;"	n	namespace:elem
herm_tridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LPan.hpp	/^namespace herm_tridiag {$/;"	n	namespace:elem
herm_tridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LPanSquare.hpp	/^namespace herm_tridiag {$/;"	n	namespace:elem
herm_tridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag/LSquare.hpp	/^namespace herm_tridiag {$/;"	n	namespace:elem
herm_tridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag/U.hpp	/^namespace herm_tridiag {$/;"	n	namespace:elem
herm_tridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag/UPan.hpp	/^namespace herm_tridiag {$/;"	n	namespace:elem
herm_tridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag/UPanSquare.hpp	/^namespace herm_tridiag {$/;"	n	namespace:elem
herm_tridiag	src/madness/external/elemental/src/lapack-like/HermitianTridiag/USquare.hpp	/^namespace herm_tridiag {$/;"	n	namespace:elem
herm_tridiag_eig	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	/^namespace herm_tridiag_eig {$/;"	n	namespace:elem
herm_tridiag_eig	src/madness/external/elemental/src/core/imports/pmrrr.cpp	/^namespace herm_tridiag_eig {$/;"	n	namespace:elem	file:
hertz_electron_volt_relationship	src/madness/constants.h	/^        const double hertz_electron_volt_relationship = 4.13566733e-15 ; \/\/     0.00000010e-15     eV$/;"	m	namespace:madness::constants
hertz_hartree_relationship	src/madness/constants.h	/^        const double hertz_hartree_relationship = 1.519829846006e-16 ; \/\/ 0.000000000010e-16 E_h$/;"	m	namespace:madness::constants
hertz_joule_relationship	src/madness/constants.h	/^        const double hertz_joule_relationship = 6.62606896e-34 ; \/\/  0.00000033e-34     J$/;"	m	namespace:madness::constants
hertz_kelvin_relationship	src/madness/constants.h	/^        const double hertz_kelvin_relationship = 4.7992374e-11 ; \/\/      0.0000084e-11       K$/;"	m	namespace:madness::constants
hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/ApplyQ.hpp	/^namespace hessenberg {$/;"	n	namespace:elem
hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/L.hpp	/^namespace hessenberg {$/;"	n	namespace:elem
hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/LPan.hpp	/^namespace hessenberg {$/;"	n	namespace:elem
hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/LUnb.hpp	/^namespace hessenberg {$/;"	n	namespace:elem
hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/U.hpp	/^namespace hessenberg {$/;"	n	namespace:elem
hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/UPan.hpp	/^namespace hessenberg {$/;"	n	namespace:elem
hessenberg	src/madness/external/elemental/include/elemental/lapack-like/condense/Hessenberg/UUnb.hpp	/^namespace hessenberg {$/;"	n	namespace:elem
hessian	src/apps/chem/molopt.h	/^        Tensor<double> hessian;$/;"	m	class:madness::MolOpt
hessian	src/apps/chem/nemo.cc	/^Tensor<double> Nemo::hessian(const Tensor<double>& x) {$/;"	f	class:madness::Nemo
hessian	src/apps/chem/nemo.h	/^		bool hessian() const {return get<bool>("hessian");}$/;"	f	struct:madness::Nemo::NemoCalculationParameters
hessian_update_bfgs	src/madness/mra/tools/mathutil.py	/^def hessian_update_bfgs(hp, dx, g, gp): $/;"	f
hessian_update_bfgs	src/madness/tensor/kain.cc	/^    void hessian_update_bfgs(const Tensor<double>& dx,$/;"	f	class:QuasiNewton	file:
hessian_update_bfgs	src/madness/tensor/solvers.cc	/^    void QuasiNewton::hessian_update_bfgs(const Tensor<double>& dx,$/;"	f	class:madness::QuasiNewton
hessian_update_sr1	src/madness/tensor/kain.cc	/^    void hessian_update_sr1(const Tensor<double>& s, const Tensor<double>& y) {$/;"	f	class:QuasiNewton	file:
hessian_update_sr1	src/madness/tensor/solvers.cc	/^    void QuasiNewton::hessian_update_sr1(const Tensor<double>& s,$/;"	f	class:madness::QuasiNewton
hf	src/apps/chem/mp2.h	/^        std::shared_ptr<HartreeFock> hf;        \/\/\/< our reference$/;"	m	class:madness::MP2
hf_coeff	src/apps/chem/xcfunctional.h	/^    double hf_coeff;            \/\/\/< Factor multiplying HF exchange (+1.0 gives HF)$/;"	m	class:madness::XCfunctional
hf_coeff	src/apps/polar/xcfunctional.h	/^    double hf_coeff;            \/\/\/< Factor multiplying HF exchange (+1.0 gives HF)$/;"	m	class:madness::XCfunctional
hf_exchange_coefficient	src/apps/chem/xcfunctional.h	/^    double hf_exchange_coefficient() const$/;"	f	class:madness::XCfunctional
hf_exchange_coefficient	src/apps/polar/xcfunctional.h	/^    double hf_exchange_coefficient() const$/;"	f	class:madness::XCfunctional
hg	src/madness/mra/convolution1d.h	/^        Tensor<double> hgT, hg;$/;"	m	class:madness::Convolution1D
hg	src/madness/mra/function_common_data.h	/^        Tensor<double> hg, hgT; \/\/\/< The full twoscale coeff (2k,2k) and transpose$/;"	m	class:madness::FunctionCommonData
hgT	src/madness/mra/convolution1d.h	/^        Tensor<double> hgT, hg;$/;"	m	class:madness::Convolution1D
hgT	src/madness/mra/function_common_data.h	/^        Tensor<double> hg, hgT; \/\/\/< The full twoscale coeff (2k,2k) and transpose$/;"	m	class:madness::FunctionCommonData
hgT2k	src/madness/mra/convolution1d.h	/^        Tensor<double> hgT2k;$/;"	m	class:madness::Convolution1D
hgsonly	src/madness/mra/function_common_data.h	/^        Tensor<double> hgsonly; \/\/\/< hg[0:k,:]$/;"	m	class:madness::FunctionCommonData
hi	src/apps/nick/interp.h	/^    double hi;            \/\/< Interpolation is in range [lo,hi]$/;"	m	class:CubicInterpolationTable
hi	src/madness/misc/interpolation_1d.h	/^    double hi;            \/\/\/< Interpolation is in range [lo,hi]$/;"	m	class:CubicInterpolationTable
hi	src/madness/mra/funcplot.h	/^    	double hi;$/;"	m	struct:madness::trajectory
hi	src/madness/mra/function_interface.h	/^		double hi;$/;"	m	class:madness::TwoElectronInterface
hipri	src/madness/world/thread.h	/^        static TaskAttributes hipri() {$/;"	f	class:madness::TaskAttributes
hlij	src/apps/chem/gth_pseudopotential.h	/^    std::array<real_tensor,118> hlij;$/;"	m	class:madness::GTHPseudopotential
hlij	src/apps/polar/gth_pseudopotential.h	/^    std::array<real_tensor,118> hlij;$/;"	m	class:GTHPseudopotential
hm1	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hm1	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hm2	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hm2	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hm3	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hm3	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hm4	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hm4	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hm5	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hm5	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
holderT	src/madness/world/taskfn.h	/^            typedef ArgHolder<T> holderT;$/;"	t	struct:madness::detail::task_arg
holderT	src/madness/world/taskfn.h	/^            typedef Future<T> holderT;$/;"	t	struct:madness::detail::task_arg
holderT	src/madness/world/taskfn.h	/^            typedef Future<T>* holderT;$/;"	t	struct:madness::detail::task_arg
holderT	src/madness/world/taskfn.h	/^            typedef const Future<void> holderT;$/;"	t	struct:madness::detail::task_arg
homo_diff	src/apps/chem/oep.h	/^    double homo_diff(const tensorT ev1, const tensorT ev2) const {$/;"	f	class:madness::OEP
homo_ind	src/apps/chem/oep.h	/^    long homo_ind(const tensorT orbens) const {$/;"	f	class:madness::OEP
host_name_	src/madness/external/gtest/src/gtest-internal-inl.h	/^    const string host_name_;$/;"	m	class:testing::internal::StreamingListener::SocketWriter
host_writer	src/apps/chem/pcm.cc	/^void host_writer(const char * message) {$/;"	f	namespace:madness::detail
hp1	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hp1	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hp2	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hp2	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hp3	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hp3	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hp4	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hp4	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hpd_det	src/madness/external/elemental/include/elemental/lapack-like/props/Determinant/Cholesky.hpp	/^namespace hpd_det {$/;"	n	namespace:elem
hpd_inv	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyLVar2.hpp	/^namespace hpd_inv {$/;"	n	namespace:elem
hpd_inv	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/HPD/CholeskyUVar2.hpp	/^namespace hpd_inv {$/;"	n	namespace:elem
hpm_thread_id	src/madness/world/thread.cc	/^    int ThreadBase::hpm_thread_id;$/;"	m	class:madness::ThreadBase	file:
hpm_thread_id	src/madness/world/thread.h	/^        static int hpm_thread_id; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::ThreadBase
hpm_thread_id_all	src/madness/world/thread.h	/^        static const int hpm_thread_id_all = -10; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::ThreadBase
hpm_thread_id_main	src/madness/world/thread.h	/^        static const int hpm_thread_id_main = -2; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::ThreadBase
htons_x	src/madness/mra/funcplot.h	/^        inline unsigned short htons_x(unsigned short a) {$/;"	f	namespace:madness::detail
hueCode	src/madness/mra/funcplot.h	/^    	static double hueCode(const int rank) {$/;"	f	struct:madness::trajectory
huge_msg_handler	src/madness/world/worldrmi.cc	/^    void RMI::RmiTask::huge_msg_handler(void *buf, size_t \/*nbytein*\/) {$/;"	f	class:madness::RMI::RmiTask
hugeq	src/madness/world/worldrmi.h	/^            std::list< std::tuple<int,size_t,int> > hugeq;$/;"	m	class:madness::RMI::RmiTask
hugh	src/madness/world/test_world.cc	/^    double hugh(vector< Future<int> >& a) {$/;"	f	class:TTT
hwthreads	src/madness/world/hardware.h	/^    int     hwthreads;$/;"	m	namespace:madness
hxxxxx	src/apps/adrian/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxxx	src/apps/bryan/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxxy	src/apps/adrian/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxxy	src/apps/bryan/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxxz	src/apps/adrian/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxxz	src/apps/bryan/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxyy	src/apps/adrian/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxyy	src/apps/bryan/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxyz	src/apps/adrian/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxyz	src/apps/bryan/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxzz	src/apps/adrian/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxxzz	src/apps/bryan/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxyyy	src/apps/adrian/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxyyy	src/apps/bryan/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxyyz	src/apps/adrian/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxyyz	src/apps/bryan/gaussian.h	/^  hxxxxx, hxxxxy, hxxxxz, hxxxyy, hxxxyz, hxxxzz, hxxyyy, hxxyyz,$/;"	m	class:slymer::GaussianType
hxxyzz	src/apps/adrian/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxxyzz	src/apps/bryan/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxxzzz	src/apps/adrian/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxxzzz	src/apps/bryan/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxyyyy	src/apps/adrian/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxyyyy	src/apps/bryan/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxyyyz	src/apps/adrian/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxyyyz	src/apps/bryan/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxyyzz	src/apps/adrian/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxyyzz	src/apps/bryan/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxyzzz	src/apps/adrian/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxyzzz	src/apps/bryan/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxzzzz	src/apps/adrian/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hxzzzz	src/apps/bryan/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hylleraas_3term	src/examples/helium_mp2.cc	/^static double hylleraas_3term(const coord_6d& r) {$/;"	f	file:
hyp_reflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Col.hpp	/^namespace hyp_reflector {$/;"	n	namespace:elem
hyp_reflector	src/madness/external/elemental/include/elemental/lapack-like/util/HyperbolicReflector/Row.hpp	/^namespace hyp_reflector {$/;"	n	namespace:elem
hypot	src/apps/nick/mpreal.cc	/^const mpreal hypot (const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
hyyyyy	src/apps/adrian/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hyyyyy	src/apps/bryan/gaussian.h	/^  hxxyzz, hxxzzz, hxyyyy, hxyyyz, hxyyzz, hxyzzz, hxzzzz, hyyyyy,$/;"	m	class:slymer::GaussianType
hyyyyz	src/apps/adrian/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
hyyyyz	src/apps/bryan/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
hyyyzz	src/apps/adrian/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
hyyyzz	src/apps/bryan/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
hyyzzz	src/apps/adrian/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
hyyzzz	src/apps/bryan/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
hyzzzz	src/apps/adrian/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
hyzzzz	src/apps/bryan/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
hzero	src/apps/adrian/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hzero	src/apps/bryan/gaussian.h	/^  hm5, hm4, hm3, hm2, hm1, hzero, hp1, hp2, hp3, hp4, hp5$/;"	m	class:slymer::GaussianType
hzzzzz	src/apps/adrian/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
hzzzzz	src/apps/bryan/gaussian.h	/^  hyyyyz, hyyyzz, hyyzzz, hyzzzz, hzzzzz,$/;"	m	class:slymer::GaussianType
i	src/apps/adrian/TDDFT.h	/^  const int i, j, k;$/;"	m	class:BS_MomentFunctor
i	src/apps/adrian/TDHF.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
i	src/apps/adrian/TDHF2.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
i	src/apps/bryan/TDHF.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
i	src/apps/bryan/TDHF2.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
i	src/apps/chem/CCStructures.h	/^    const size_t i;$/;"	m	class:madness::CCPair
i	src/apps/chem/CCStructures.h	/^    size_t i;$/;"	m	struct:madness::CCFunction
i	src/apps/chem/PNOGuessFunctions.h	/^		int i, j, k;      \/\/\/< cartesian exponents$/;"	m	class:madness::BasisFunctions::CartesianGaussian
i	src/apps/chem/PNOStructures.h	/^	size_t i()const {return i_;}$/;"	f	struct:madness::OrbitalIterator
i	src/apps/chem/PNOStructures.h	/^	size_t i()const{ return i_;}$/;"	f	struct:madness::ElectronPairIterator
i	src/apps/chem/SCF.h	/^	const int i, j, k;$/;"	m	class:madness::MomentFunctor
i	src/apps/chem/gth_pseudopotential.h	/^    int l, m, i; \/\/ i = 1,2,3 and m = 0,1,2,3 and l = 0,1,2,3 (angular momentum)$/;"	m	class:madness::ProjRLMFunctor
i	src/apps/chem/mp2.h	/^        	int i() const {return this->get<std::vector<int> >("pair")[0];}	\/\/\/ convenience function$/;"	f	struct:madness::MP2::Parameters
i	src/apps/chem/mp2.h	/^        int i, j;                       \/\/\/< orbitals i and j$/;"	m	class:madness::ElectronPair
i	src/apps/moldft/fci/fci.F	/^      in/;"	v	program:fci
i	src/apps/moldft/fci/timer.f	/^      in/;"	v
i	src/apps/polar/gth_pseudopotential.h	/^    int l, i; \/\/ i = 1,2,3 and l = 0,1,2,3 (angular momentum)$/;"	m	class:ProjFunctor
i	src/apps/polar/gth_pseudopotential.h	/^    int l, m, i; \/\/ i = 1,2,3 and m = 0,1,2,3 and l = 0,1,2,3 (angular momentum)$/;"	m	class:ProjRLMFunctor
i	src/apps/polar/moldft.cc	/^    const int i, j, k;$/;"	m	class:MomentFunctor	file:
i	src/examples/molecularmask.h	/^    const int i;$/;"	m	class:MolecularVolumeMaskGrad
i	src/madness/mra/indexit.h	/^        std::vector<long> i; \/\/\/< Current index$/;"	m	class:madness::IndexIterator
i	src/madness/mra/tools/twoscalecoeffs.py	/^        i = 0$/;"	v
i	src/madness/tensor/elem.h	/^            int i;$/;"	m	struct:madness::detail::Value
i	src/madness/world/buffer_archive.h	/^            mutable std::size_t i; \/\/\/ Current output location.$/;"	m	class:madness::archive::BufferOutputArchive
i	src/madness/world/buffer_archive.h	/^            mutable std::size_t i; \/\/\/< Current input location.$/;"	m	class:madness::archive::BufferInputArchive
i	src/madness/world/test_ar.cc	/^  int32_t i;$/;"	m	struct:D	file:
i	src/madness/world/test_ar.cc	/^  int32_t i;$/;"	m	struct:F	file:
i	src/madness/world/test_tree.cc	/^    ulong i,j,k;$/;"	m	class:KeyChildIterator	file:
i	src/madness/world/test_tree.cc	/^    ulong n, i, j, k;$/;"	m	struct:Key	file:
i	src/madness/world/test_world.cc	/^    ulong n, i, j, k;$/;"	m	struct:Key	file:
i	src/madness/world/test_worldptr.cc	/^            int i;$/;"	m	class:__anon6::WorldPtrTest::Object	file:
i	src/madness/world/test_worldptr.cc	/^        static const std::shared_ptr<int> i;$/;"	m	class:__anon6::WorldPtrTest	file:
i	src/madness/world/test_worldref.cc	/^        static std::shared_ptr<int> i;$/;"	m	class:__anon1::WorldRefTest	file:
i	src/madness/world/vector_archive.h	/^            mutable std::size_t i; \/\/\/< Current input location.$/;"	m	class:madness::archive::VectorInputArchive
i	src/madness/world/worldrmi.h	/^        int i;               \/\/ buffer index$/;"	m	struct:madness::qmsg
iState	src/apps/nick/extra.h	/^  std::string iState ; \/\/ initial state = "1s" or "2s"$/;"	m	struct:InputParameters
iState	src/apps/tdse/tdse.cc	/^  std::string iState ; \/\/ initial state = "1s" or "2s"$/;"	m	struct:InputParameters	file:
i_	src/apps/chem/PNOStructures.h	/^	size_t i_;$/;"	m	struct:madness::OrbitalIterator
i_	src/apps/chem/PNOStructures.h	/^	size_t i_=0;	\/\/\/< current pair index i$/;"	m	struct:madness::ElectronPairIterator
iabs	src/madness/external/elemental/external/pmrrr/src/lapack/odstmr.c	15;"	d	file:
iaf	src/madness/mra/funcimpl.h	/^            CoeffTracker<T,LDIM> iaf;$/;"	m	struct:madness::FunctionImpl::recursive_apply_op
iaf	src/madness/mra/funcimpl.h	/^            ctT iaf;			\/\/\/ need this for randomization$/;"	m	struct:madness::FunctionImpl::recursive_apply_op2
iag	src/madness/mra/funcimpl.h	/^            CoeffTracker<T,LDIM> iag;$/;"	m	struct:madness::FunctionImpl::recursive_apply_op
iag	src/madness/mra/funcimpl.h	/^            ctL iag;				\/\/\/< the low dim function g$/;"	m	struct:madness::FunctionImpl::project_out_op
iaket	src/madness/mra/funcimpl.h	/^          ctT iaket;				\/\/\/< the ket of a pair function (exclusive with p1, p2)$/;"	m	struct:madness::FunctionImpl::Vphi_op_NS
iap1	src/madness/mra/funcimpl.h	/^          ctL iap1, iap2;			\/\/\/< the particles 1 and 2 (exclusive with ket)$/;"	m	struct:madness::FunctionImpl::Vphi_op_NS
iap2	src/madness/mra/funcimpl.h	/^          ctL iap1, iap2;			\/\/\/< the particles 1 and 2 (exclusive with ket)$/;"	m	struct:madness::FunctionImpl::Vphi_op_NS
iatom	src/apps/chem/SCF.h	/^	const int iatom;$/;"	m	class:madness::AtomicAttractionFunctor
iatom	src/apps/chem/SCFOperators.h	/^    int iatom;  \/\/\/< index of the atom which is displaced$/;"	m	class:madness::DNuclear
iatom	src/apps/chem/correlationfactor.h	/^        const int iatom;$/;"	m	class:madness::NuclearCorrelationFactor::U2X_functor
iatom	src/apps/chem/correlationfactor.h	/^        const size_t iatom;$/;"	m	class:madness::NuclearCorrelationFactor::U1_atomic_functor
iatom	src/apps/chem/correlationfactor.h	/^        const size_t iatom;$/;"	m	class:madness::NuclearCorrelationFactor::U2_atomic_functor
iatom	src/apps/chem/correlationfactor.h	/^        const size_t iatom;$/;"	m	class:madness::NuclearCorrelationFactor::U3X_functor
iatom	src/apps/chem/correlationfactor.h	/^        const size_t iatom;$/;"	m	class:madness::NuclearCorrelationFactor::U3_atomic_functor
iatom	src/apps/chem/correlationfactor.h	/^        const size_t iatom;$/;"	m	class:madness::NuclearCorrelationFactor::square_times_V_derivative_functor
iatom	src/apps/chem/correlationfactor.h	/^        const size_t iatom;$/;"	m	class:madness::NuclearCorrelationFactor::square_times_V_functor
iatom	src/apps/chem/nemo.cc	/^    const size_t iatom;$/;"	m	class:madness::atomic_attraction	file:
iav1	src/madness/mra/funcimpl.h	/^          ctL iav1, iav2;			\/\/\/< potentials for particles 1 and 2$/;"	m	struct:madness::FunctionImpl::Vphi_op_NS
iav2	src/madness/mra/funcimpl.h	/^          ctL iav1, iav2;			\/\/\/< potentials for particles 1 and 2$/;"	m	struct:madness::FunctionImpl::Vphi_op_NS
iaxis	src/apps/chem/SCF.h	/^	const int iaxis, jaxis;$/;"	m	class:madness::MolecularSecondDerivativeFunctor
iaxis	src/apps/chem/SCFOperators.h	/^    int iaxis;  \/\/\/< x,y,z component of the atom$/;"	m	class:madness::DNuclear
ibf	src/apps/chem/molecularbasis.h	/^    const int ibf; \/\/ Index of basis function in the shell (0, 1, ...)$/;"	m	class:madness::AtomicBasisFunction
ibf	src/apps/hf/molecularbasis.h	/^    const int ibf; \/\/ Index of basis function in the shell (0, 1, ...)$/;"	m	class:AtomicBasisFunction
ibf	src/apps/polar/molecularbasis.h	/^    const int ibf; \/\/ Index of basis function in the shell (0, 1, ...)$/;"	m	class:AtomicBasisFunction
iblock	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    *iblock;$/;"	m	struct:__anon29
iblock	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    *restrict iblock;$/;"	m	struct:__anon22
iceil	src/madness/external/elemental/external/pmrrr/include/global.h	93;"	d
icoeff	src/examples/tdse1d.cc	/^double icoeff(const int np, const int j, const double t) {$/;"	f
icpu	src/madness/world/worldprofile.h	/^        ProfileStat<double> icpu; \/\/\/< inclusive cpu call (i.e., including calls)$/;"	m	struct:madness::WorldProfileEntry
id	src/apps/polar/xcfunctional_libxc.cc	/^    const int id;$/;"	m	struct:madness::xc_name_map	file:
id	src/madness/external/elemental/include/elemental/lapack-like/factor/ID.hpp	/^namespace id {$/;"	n	namespace:elem
id	src/madness/tensor/basetensor.h	/^        long id() const {return _id;}$/;"	f	class:madness::BaseTensor
id	src/madness/world/group.h	/^            const DistributedID& id() const { return did_; }$/;"	f	class:madness::Group::Impl
id	src/madness/world/group.h	/^        const DistributedID& id() const {$/;"	f	class:madness::Group
id	src/madness/world/thread.h	/^        int id() const {$/;"	f	class:madness::TaskThreadEnv
id	src/madness/world/thread.h	/^        pthread_t id; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::ThreadBase
id	src/madness/world/world.h	/^        unsigned long id() const { return _id; }$/;"	f	class:madness::World
id	src/madness/world/world_object.h	/^            uniqueidT id;$/;"	m	struct:madness::detail::PendingMsg
id	src/madness/world/world_object.h	/^        const uniqueidT& id() const {$/;"	f	class:madness::WorldObject
id	src/madness/world/worlddc.h	/^        const uniqueidT& id() const {$/;"	f	class:madness::WorldContainer
id	src/madness/world/worldprofile.h	/^        const int id;                \/\/\/< My entry in the world profiler$/;"	m	class:madness::WorldProfileObj
idMatrix	src/apps/ii/systolic.h	/^    DistributedMatrix<T> idMatrix(const DistributedMatrix<T>& A){$/;"	f	namespace:madness
id_	src/madness/world/thread.h	/^            std::pair<void*, unsigned short> id_; \/\/\/< Task identification information.$/;"	m	class:madness::profiling::TaskEvent
id_	src/madness/world/thread.h	/^        std::pair<void*, unsigned short> id_; \/\/\/< \\todo Description needed.$/;"	m	class:madness::PoolTaskInterface
id_from_ptr	src/madness/world/world.h	/^        const uniqueidT& id_from_ptr(T* ptr) const {$/;"	f	class:madness::World
id_from_ptr	src/madness/world/world.h	/^        const uniqueidT& id_from_ptr(std::shared_ptr<T>& ptr) const {$/;"	f	class:madness::World
idamax	src/apps/moldft/fci/idamax.F	/^      integer function idamax(/;"	f
idbase	src/madness/world/world.cc	/^    unsigned long World::idbase = 0; \/\/\/< \\todo Verify: Base unique ID for objects in the runtime.$/;"	m	class:madness::World	file:
idbase	src/madness/world/world.h	/^        static unsigned long idbase; \/\/\/< Base for unique world ID range for this process.$/;"	m	class:madness::World
identfun_type	src/madness/external/muParser/muParserDef.h	/^  typedef int (*identfun_type)(const char_type *sExpr, int *nPos, value_type *fVal);$/;"	t	namespace:mu
identify_point_group	src/apps/chem/molecule.cc	/^void Molecule::identify_point_group()$/;"	f	class:madness::Molecule
identify_point_group	src/apps/polar/molecule.cc	/^void Molecule::identify_point_group() {$/;"	f	class:Molecule
identity	src/examples/helium_mp2.cc	/^    Tensor<double> identity;$/;"	m	class:YetAnotherWrapperClass	file:
idij	src/madness/tensor/distributed_matrix.h	/^        static T idij(const int64_t i, const int64_t j) {return (i==j) ?  T(1) : T(0);}$/;"	f	class:madness::DistributedMatrix
idim	src/apps/ii/systolic.h	/^        const int64_t idim,jdim;        \/\/< Dimension of data on this processor$/;"	m	class:madness::DistributedMatrix
idim	src/madness/tensor/distributed_matrix.h	/^        int64_t idim,jdim;        \/\/\/< Dimension of data on this processor$/;"	m	class:madness::DistributedMatrixDistribution
ieor_	src/apps/moldft/fci/ieor.c	/^int ieor_(int *i, int *j)$/;"	f
ifill	src/apps/moldft/fci/fci_ifill.F	/^      subroutine ifill(/;"	s
ihi	src/apps/ii/systolic.h	/^        const int64_t ilo,ihi;          \/\/< Range of column indices on this processor$/;"	m	class:madness::DistributedMatrix
ihi	src/madness/tensor/distributed_matrix.h	/^        int64_t ilo,ihi;          \/\/\/< Range of column indices on this processor$/;"	m	class:madness::DistributedMatrixDistribution
ij	src/apps/chem/PNOStructures.h	/^	size_t ij()const{return ij_;}$/;"	f	struct:madness::ElectronPairIterator
ij	src/madness/tensor/test_distributed_matrix.cc	/^double ij(int64_t i, int64_t j) {return ((i<<24) | j);}$/;"	f
ij	src/madness/tensor/test_elemental.cc	/^double ij(int64_t i, int64_t j) {return ((i<<24) | j);}$/;"	f
ij_	src/apps/chem/PNOStructures.h	/^	size_t ij_=0;	\/\/\/< pair number starting from 00 => 0$/;"	m	struct:madness::ElectronPairIterator
ij_gQf_ij	src/apps/chem/mp2.h	/^        double ij_gQf_ij;         	  	\/\/\/< <ij | g12 Q12 f12 | ij>$/;"	m	class:madness::ElectronPair
ijk	src/apps/adrian/TDDFT.h	/^  std::vector<int> ijk;  \/\/\/< cartesian exponents$/;"	m	class:GaussianGuess
ijk	src/apps/adrian/TDHF.h	/^    std::vector<int> ijk;   \/\/\/< cartesian exponents$/;"	m	class:GaussianGuess
ijk	src/apps/adrian/TDHF2.h	/^    std::vector<int> ijk;   \/\/\/< cartesian exponents$/;"	m	class:GaussianGuess
ijk	src/apps/adrian/test_ResponseFunction.cc	/^    std::vector<int> ijk;   \/\/\/< cartesian exponents$/;"	m	class:GaussianGuess	file:
ijk	src/apps/bryan/TDHF.h	/^    std::vector<int> ijk;   \/\/\/< cartesian exponents$/;"	m	class:GaussianGuess
ijk	src/apps/bryan/TDHF2.h	/^    std::vector<int> ijk;   \/\/\/< cartesian exponents$/;"	m	class:GaussianGuess
ijk	src/apps/bryan/test_ResponseFunction.cc	/^    std::vector<int> ijk;   \/\/\/< cartesian exponents$/;"	m	class:GaussianGuess	file:
ijk	src/apps/chem/PNOTensors.h	/^	std::tuple<size_t,bool> ijk(size_t i, size_t j, size_t k) const {$/;"	f	class:__anon48::Tensor_IJ_IK
ijk	src/apps/chem/PNOTensors.h	/^	std::tuple<size_t,bool> ijk(size_t i, size_t j, size_t k) const {$/;"	f	class:__anon48::Tensor_IJ_KJ
ijk	src/apps/chem/test_SCFOperators.cc	/^    std::vector<int> ijk;   \/\/\/< cartesian exponents$/;"	m	class:GaussianGuess	file:
il	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int              *il;$/;"	m	struct:__anon22
il	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    il;$/;"	m	struct:__anon29
ilo	src/apps/ii/systolic.h	/^        const int64_t ilo,ihi;          \/\/< Range of column indices on this processor$/;"	m	class:madness::DistributedMatrix
ilo	src/madness/tensor/distributed_matrix.h	/^        int64_t ilo,ihi;          \/\/\/< Range of column indices on this processor$/;"	m	class:madness::DistributedMatrixDistribution
imH	src/apps/chem/CCStructures.h	/^    intermediateT imH;$/;"	m	struct:madness::CCConvolutionOperator
imP	src/apps/chem/CCStructures.h	/^    intermediateT imP;$/;"	m	struct:madness::CCConvolutionOperator
imR	src/apps/chem/CCStructures.h	/^    intermediateT imR;$/;"	m	struct:madness::CCConvolutionOperator
imag	src/apps/hf/complexfun.h	/^Function<typename TensorTypeData<Q>::scalar_type,NDIM> imag(const Function<Q,NDIM>& func)$/;"	f	namespace:madness
imag	src/apps/hf/complexfun.h	/^double imag(double x) {return 0.0;}$/;"	f	namespace:madness
imag	src/madness/mra/vmra.h	/^std::vector<Function<typename Tensor<T>::scalar_type, NDIM>> imag($/;"	f	namespace:madness
imag	src/madness/tensor/gmres.h	/^    static inline double imag(double x) { return 0.0; }$/;"	f	namespace:madness
imag	src/madness/tensor/tensor.h	/^    Tensor< typename Tensor<T>::scalar_type > imag(const Tensor<T>& t) {$/;"	f	namespace:madness
imagDisplay_	src/madness/external/elemental/include/elemental/io/ComplexDisplayWindow-premoc.hpp	/^    DisplayWidget<Complex<double>> *realDisplay_, *imagDisplay_;$/;"	m	class:elem::ComplexDisplayWindow
imagScroll_	src/madness/external/elemental/include/elemental/io/ComplexDisplayWindow-premoc.hpp	/^    QScrollArea *realScroll_, *imagScroll_;$/;"	m	class:elem::ComplexDisplayWindow
imagSize	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    Int realSize, imagSize;$/;"	m	struct:elem::SnapshotCtrl
imag_op	src/apps/hf/complexfun.h	/^struct imag_op$/;"	s	namespace:madness
imax	src/madness/external/elemental/external/pmrrr/include/global.h	91;"	d
imax	src/madness/external/elemental/external/pmrrr/src/lapack/odebz.c	10;"	d	file:
imax	src/madness/external/elemental/external/pmrrr/src/lapack/odneg.c	10;"	d	file:
imax	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	10;"	d	file:
imax	src/madness/external/elemental/external/pmrrr/src/lapack/odrrv.c	10;"	d	file:
imax	src/madness/external/elemental/external/pmrrr/src/lapack/odruv.c	10;"	d	file:
imgBase	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    std::string imgBase, numBase;$/;"	m	struct:elem::SnapshotCtrl
imgDispCount	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    Int imgSaveCount, numSaveCount, imgDispCount;$/;"	m	struct:elem::SnapshotCtrl
imgDispFreq	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    Int imgSaveFreq, numSaveFreq, imgDispFreq;$/;"	m	struct:elem::SnapshotCtrl
imgFormat	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    FileFormat imgFormat, numFormat;$/;"	m	struct:elem::SnapshotCtrl
imgSaveCount	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    Int imgSaveCount, numSaveCount, imgDispCount;$/;"	m	struct:elem::SnapshotCtrl
imgSaveFreq	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    Int imgSaveFreq, numSaveFreq, imgDispFreq;$/;"	m	struct:elem::SnapshotCtrl
imin	src/madness/external/elemental/external/pmrrr/include/global.h	92;"	d
imin	src/madness/external/elemental/external/pmrrr/src/lapack/odebz.c	11;"	d	file:
imin	src/madness/external/elemental/external/pmrrr/src/lapack/odneg.c	11;"	d	file:
imin	src/madness/external/elemental/external/pmrrr/src/lapack/odrnv.c	10;"	d	file:
imin	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	11;"	d	file:
imin	src/madness/external/elemental/external/pmrrr/src/lapack/odrrv.c	11;"	d	file:
imin	src/madness/external/elemental/external/pmrrr/src/lapack/odruv.c	11;"	d	file:
imin	src/madness/external/elemental/external/pmrrr/src/lapack/odset.c	11;"	d	file:
impl	src/madness/external/gtest/include/gtest/gtest.h	/^  const internal::UnitTestImpl* impl() const { return impl_; }$/;"	f	class:testing::UnitTest
impl	src/madness/external/gtest/include/gtest/gtest.h	/^  internal::UnitTestImpl* impl() { return impl_; }$/;"	f	class:testing::UnitTest
impl	src/madness/mra/funcimpl.h	/^    	const implT* impl;$/;"	m	class:madness::CoeffTracker
impl	src/madness/mra/funcimpl.h	/^    	implT* impl;$/;"	m	struct:madness::insert_op
impl	src/madness/mra/funcimpl.h	/^            const implT * impl;$/;"	m	struct:madness::FunctionImpl::do_inner_ext_local_ffi
impl	src/madness/mra/funcimpl.h	/^            const implT* impl;$/;"	m	class:madness::FunctionImpl::do_err_box
impl	src/madness/mra/funcimpl.h	/^            implT* impl;$/;"	m	struct:madness::FunctionImpl::do_keep_sum_coeffs
impl	src/madness/mra/funcimpl.h	/^            implT* impl;$/;"	m	struct:madness::FunctionImpl::do_standard
impl	src/madness/mra/funcimpl.h	/^            implT* impl;$/;"	m	struct:madness::FunctionImpl::do_unary_op_value_inplace
impl	src/madness/mra/mra.h	/^        std::shared_ptr< FunctionImpl<T,NDIM> > impl;$/;"	m	class:madness::Function
impl	src/madness/tensor/lowranktensor.h	/^    implT impl;$/;"	m	class:madness::LowRankTensor
impl	src/madness/world/worlddc.h	/^	  implT * impl;$/;"	m	struct:madness::WorldContainerImpl::P2Op
implL	src/madness/mra/funcimpl.h	/^        typedef FunctionImpl<T,LDIM> implL;$/;"	t	struct:madness::hartree_convolute_leaf_op
implL	src/madness/mra/function_interface.h	/^		typedef FunctionImpl<T,MDIM> implL;$/;"	t	class:madness::CompositeFunctorInterface
implL1	src/madness/mra/funcimpl.h	/^            typedef FunctionImpl<T,NDIM-LDIM> implL1;$/;"	t	struct:madness::FunctionImpl::project_out_op
implT	src/madness/mra/derivative.h	/^        typedef FunctionImpl<T,NDIM>    implT    ;$/;"	t	class:madness::Derivative
implT	src/madness/mra/derivative.h	/^        typedef FunctionImpl<T,NDIM>    implT    ;$/;"	t	class:madness::DerivativeBase
implT	src/madness/mra/funcimpl.h	/^    	typedef FunctionImpl<T,NDIM> implT;$/;"	t	class:madness::CoeffTracker
implT	src/madness/mra/funcimpl.h	/^    	typedef FunctionImpl<T,NDIM> implT;$/;"	t	struct:madness::insert_op
implT	src/madness/mra/funcimpl.h	/^        typedef FunctionImpl<T,NDIM> implT; \/\/\/< Type of this class (implementation)$/;"	t	class:madness::FunctionImpl
implT	src/madness/mra/funcimpl.h	/^        typedef FunctionImpl<T,NDIM> implT;$/;"	t	struct:madness::hartree_convolute_leaf_op
implT	src/madness/mra/funcimpl.h	/^        typedef FunctionImpl<T,NDIM> implT;$/;"	t	struct:madness::hartree_leaf_op
implT	src/madness/mra/funcimpl.h	/^        typedef FunctionImpl<T,NDIM> implT;$/;"	t	struct:madness::op_leaf_op
implT	src/madness/mra/function_interface.h	/^		typedef FunctionImpl<T,NDIM> implT;$/;"	t	class:madness::CompositeFunctorInterface
implT	src/madness/mra/mra.h	/^        typedef FunctionImpl<T,NDIM> implT;$/;"	t	class:madness::Function
implT	src/madness/tensor/lowranktensor.h	/^        implT() : full(), tt(), svd() {}$/;"	f	struct:madness::LowRankTensor::implT
implT	src/madness/tensor/lowranktensor.h	/^      struct implT {$/;"	s	class:madness::LowRankTensor
implT	src/madness/world/worlddc.h	/^        typedef WorldContainerImpl<keyT,valueT,hashfunT> implT;$/;"	t	class:madness::WorldContainer
implT	src/madness/world/worlddc.h	/^        typedef WorldContainerImpl<keyT,valueT,hashfunT> implT;$/;"	t	class:madness::WorldContainerImpl
implT	src/madness/world/worldref.h	/^            typedef RemoteCounterBase implT;$/;"	t	class:madness::detail::RemoteCounter
impl_	src/madness/external/gtest/include/gtest/gtest.h	/^  internal::UnitTestImpl* impl_;$/;"	m	class:testing::UnitTest
impl_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  linked_ptr<const ParamGeneratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamGenerator
impl_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  scoped_ptr<ParamIteratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamIterator
impl_eri	src/madness/mra/function_interface.h	/^		std::shared_ptr<implT> impl_eri;	\/\/\/< supposedly 1\/r12$/;"	m	class:madness::CompositeFunctorInterface
impl_func	src/madness/mra/funcimpl.h	/^            const FunctionImpl<Q,NDIM>* impl_func;$/;"	m	struct:madness::FunctionImpl::coeff_value_adaptor
impl_initialized	src/madness/mra/mra.h	/^        bool impl_initialized()const{$/;"	f	class:madness::Function
impl_ket	src/madness/mra/function_interface.h	/^		std::shared_ptr<implT> impl_ket;	\/\/\/< supposedly the pair function$/;"	m	class:madness::CompositeFunctorInterface
impl_m1	src/madness/mra/function_interface.h	/^		std::shared_ptr<implL> impl_m1;	\/\/\/< supposedly 1\/r1$/;"	m	class:madness::CompositeFunctorInterface
impl_m2	src/madness/mra/function_interface.h	/^		std::shared_ptr<implL> impl_m2;	\/\/\/< supposedly 1\/r2$/;"	m	class:madness::CompositeFunctorInterface
impl_p1	src/madness/mra/function_interface.h	/^		std::shared_ptr<implL> impl_p1;	\/\/\/< supposedly orbital 1$/;"	m	class:madness::CompositeFunctorInterface
impl_p2	src/madness/mra/function_interface.h	/^		std::shared_ptr<implL> impl_p2;	\/\/\/< supposedly orbital 2$/;"	m	class:madness::CompositeFunctorInterface
impl_type	src/madness/external/muParser/muParserStack.h	/^      typedef std::stack<TValueType, std::vector<TValueType> > impl_type;$/;"	t	class:mu::ParserStack
impossible	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final_fail_compile.cxx	/^class impossible : public sub { };$/;"	c	file:
in	src/madness/world/thread.h	/^            T in; \/\/\/< \\todo Description needed.$/;"	m	union:madness::PoolTaskInterface::FunctionPointerGrabber
inFile	src/apps/adrian/GroundParameters.h	/^      std::string inFile;                      \/\/\/< Name of input archive to read in ground state$/;"	m	struct:madness::GroundParameters
inFile	src/apps/bryan/GroundParameters.h	/^      std::string inFile;                      \/\/\/< Name of input archive to read in ground state$/;"	m	struct:madness::GroundParameters
in_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} in_t;$/;"	t	typeref:struct:__anon21
inbyt_recv	src/madness/world/worldprofile.h	/^        ProfileStat<unsigned long> inbyt_recv; \/\/\/< No. of bytes recv ... inclusive$/;"	m	struct:madness::WorldProfileEntry
inbyt_sent	src/madness/world/worldprofile.h	/^        ProfileStat<unsigned long> inbyt_sent; \/\/\/< No. of bytes sent ... inclusive$/;"	m	struct:madness::WorldProfileEntry
inc	src/madness/tensor/tensor.h	/^            void inc() {if (p) (*cnt)++;}$/;"	f	class:madness::detail::SharedAlignedArray
inc	src/madness/world/dependency_interface.h	/^        void inc() {$/;"	f	class:madness::DependencyInterface
inc	src/madness/world/test_world.cc	/^    void inc() const {$/;"	f	class:Mary
inc_debug	src/madness/world/dependency_interface.h	/^        void inc_debug(const char* caller) {$/;"	f	class:madness::DependencyInterface
include_coulomb	src/apps/hf/hartreefock.h	/^    bool include_coulomb()$/;"	f	class:madness::HartreeFock
include_exchange	src/apps/hf/hartreefock.h	/^    bool include_exchange()$/;"	f	class:madness::HartreeFock
inclusivebytcmp	src/madness/world/worldprofile.cc	/^    bool WorldProfileEntry::inclusivebytcmp(const WorldProfileEntry&a, const WorldProfileEntry& b) {$/;"	f	class:madness::WorldProfileEntry
inclusivecmp	src/madness/world/worldprofile.cc	/^    bool WorldProfileEntry::inclusivecmp(const WorldProfileEntry&a, const WorldProfileEntry& b) {$/;"	f	class:madness::WorldProfileEntry
increment	src/apps/chem/mp2.cc	/^void MP2::increment(ElectronPair& pair, real_convolution_6d& green) {$/;"	f	class:madness::MP2
increment_death_test_count	src/madness/external/gtest/include/gtest/gtest.h	/^  int increment_death_test_count() { return ++death_test_count_; }$/;"	f	class:testing::TestResult
increment_death_test_count	src/madness/external/gtest/include/gtest/gtest.h	/^  int increment_death_test_count() {$/;"	f	class:testing::TestInfo
ind	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    ind;$/;"	m	struct:__anon28
ind	src/madness/tensor/tensoriter.h	/^        long ind[TENSOR_MAXDIM];$/;"	m	class:madness::TensorIterator
ind	src/madness/world/worldrmi.h	/^            std::unique_ptr<int[]> ind;$/;"	m	class:madness::RMI::RmiTask
indent	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING indent;$/;"	m	class:TiXmlPrinter
index	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Int index;$/;"	m	struct:elem::ValueInt
index	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  int index() const { return index_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
index	src/madness/mra/lbdeux.h	/^        int index(const keyT& key) {$/;"	f	class:madness::LBNodeDeux
index	src/madness/mra/test_mra6.cc	/^    enum TensorFill {null, index, random};$/;"	e	enum:__anon12::TensorFill	file:
index	src/madness/tensor/test_gentensor.cc	/^    enum TensorFill {null, index, random};$/;"	e	enum:__anon43::TensorFill	file:
index_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  int index_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
index_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    int index_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
indices	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Int indices[2];$/;"	m	struct:elem::ValueIntPair
infer_thresholds	src/apps/chem/SCFProtocol.h	/^    void infer_thresholds(const double prec) {$/;"	f	class:madness::SCFProtocol
info	src/apps/chem/CCStructures.cc	/^  CCFunction::info(World& world,const std::string& msg) const {$/;"	f	class:madness::CCFunction
info	src/apps/chem/CCStructures.cc	/^  CCPair::info() const {$/;"	f	class:madness::CCPair
info	src/apps/chem/CCStructures.cc	/^  CCTimer::info(const bool debug,const double norm) {$/;"	f	class:madness::CCTimer
info	src/apps/chem/CCStructures.cc	/^  size_t CCConvolutionOperator::info()const{$/;"	f	class:madness::CCConvolutionOperator
info	src/apps/chem/CCStructures.h	/^    void info()const{$/;"	f	struct:madness::CCPairFunction
info	src/apps/chem/mp2.h	/^    	void info(World &world)const{$/;"	f	class:madness::ElectronPair
info	src/madness.h	/^    namespace info {$/;"	n	namespace:madness
info	src/madness/misc/gitinfo.cc	/^    namespace info {$/;"	n	namespace:madness	file:
info	src/madness/misc/gitinfo.h	/^    namespace info {$/;"	n	namespace:madness
info	src/madness/world/info.cc	/^    namespace info {$/;"	n	namespace:madness	file:
info	src/madness/world/info.h	/^    namespace info {$/;"	n	namespace:madness
info	src/madness/world/world_object.h	/^            info() : info_base<memfunT>() {}$/;"	f	struct:madness::detail::info
info	src/madness/world/world_object.h	/^            info(const AmArg& arg) :$/;"	f	struct:madness::detail::info
info	src/madness/world/world_object.h	/^            info(const uniqueidT& id, ProcessID requestor, memfunT memfun,$/;"	f	struct:madness::detail::info
info	src/madness/world/world_object.h	/^        struct info : public info_base<memfunT> {$/;"	s	namespace:madness::detail
info_arch	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_base	src/madness/world/world_object.h	/^            info_base() {}$/;"	f	struct:madness::detail::info_base
info_base	src/madness/world/world_object.h	/^            info_base(const uniqueidT& id, ProcessID requestor, memfunT memfun,$/;"	f	struct:madness::detail::info_base
info_base	src/madness/world/world_object.h	/^        struct info_base {$/;"	s	namespace:madness::detail
info_compiler	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_size	build/CMakeFiles/CheckTypeSize/HAVE_INT64_T.c	/^char info_size[] =  {'I', 'N', 'F', 'O', ':', 's','i','z','e','[',$/;"	v
info_size	build/CMakeFiles/CheckTypeSize/HAVE_LONG_DOUBLE.c	/^char info_size[] =  {'I', 'N', 'F', 'O', ':', 's','i','z','e','[',$/;"	v
info_size	build/CMakeFiles/CheckTypeSize/HAVE_LONG_LONG.c	/^char info_size[] =  {'I', 'N', 'F', 'O', ':', 's','i','z','e','[',$/;"	v
info_version	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
information	src/apps/chem/CCStructures.cc	/^  void CCParameters::information(World &world)const{$/;"	f	class:madness::CCParameters
init	src/apps/hf/solver.h	/^    void init(const std::string& filename)$/;"	f	class:madness::Solver
init	src/madness/external/tinyxml/tinystr.h	/^	void init(size_type sz) { init(sz, sz); }$/;"	f	class:TiXmlString
init	src/madness/external/tinyxml/tinystr.h	/^	void init(size_type sz, size_type cap)$/;"	f	class:TiXmlString
init	src/madness/world/mem_func_wrapper.h	/^            static T init() {$/;"	f	struct:madness::detail::DefaultInitPtr
init	src/madness/world/mem_func_wrapper.h	/^            static std::shared_ptr<T> init() {$/;"	f	struct:madness::detail::DefaultInitPtr
initCoefficients	src/madness/mra/derivative.h	/^        void initCoefficients()  {$/;"	f	class:madness::Derivative
init_comm_world	src/madness/world/safempi.h	/^        inline void init_comm_world() {$/;"	f	namespace:SafeMPI::detail
init_debug	src/apps/hf/outputwriter.h	/^  void init_debug(char* filename)$/;"	f	class:OutputWriter
init_eigv	src/apps/hf/outputwriter.h	/^  void init_eigv(char* filename)$/;"	f	class:OutputWriter
init_exec_context	src/madness/world/thread.h	/^            void init_exec_context(void)$/;"	f	class:madness::PoolTaskInterface
init_lev	src/madness/mra/testdiff1D.cc	/^static const int init_lev = 2;$/;"	v	file:
init_lev	src/madness/mra/testdiff1Db.cc	/^static const int init_lev = 4;$/;"	v	file:
init_lev	src/madness/mra/testdiff2D.cc	/^static const int init_lev = 2;$/;"	v	file:
init_lev	src/madness/mra/testdiff3D.cc	/^static const int init_lev = 2;$/;"	v	file:
init_log	src/apps/hf/outputwriter.h	/^  void init_log(char* filename)$/;"	f	class:OutputWriter
init_op	src/apps/chem/CCStructures.cc	/^  SeparatedConvolution<double,3>* CCConvolutionOperator::init_op(const OpType &type,const Parameters &parameters)const{$/;"	f	class:madness::CCConvolutionOperator
init_orbital_energies	src/apps/chem/CCPotentials.cc	/^  CCPotentials::init_orbital_energies(const Nemo& nemo) const {$/;"	f	class:madness::CCPotentials
init_par_stats	src/madness/world/worldprofile.cc	/^    void WorldProfileEntry::init_par_stats(ProcessID me) {$/;"	f	class:madness::WorldProfileEntry
init_par_stats	src/madness/world/worldprofile.h	/^        void init_par_stats(ProcessID me) {$/;"	f	struct:madness::ProfileStat
init_tensor_lapack	src/madness/tensor/lapack.cc	/^    void init_tensor_lapack() {$/;"	f	namespace:madness
init_thread_key	src/madness/world/thread.h	/^        static void init_thread_key() {$/;"	f	class:madness::ThreadBase
init_tls	src/madness/world/test_queue.cc	/^void init_tls(const unsigned long nthreads) {$/;"	f
init_workQ	src/madness/external/elemental/external/pmrrr/src/plarrv.c	/^int init_workQ(proc_t *procinfo, in_t *Dstruct, val_t *Wstruct,$/;"	f	file:
init_zero	src/examples/navstokes_cosines.cc	/^static double init_zero(const coordT3d& r) {$/;"	f	file:
initial_guess	src/apps/chem/SCF.cc	/^void SCF::initial_guess(World &world)$/;"	f	class:madness::SCF
initial_guess	src/apps/hf/solver.h	/^    void initial_guess()$/;"	f	class:madness::Solver
initial_guess	src/apps/moldft/testperiodic.cc	/^vector_complex_function_3d initial_guess(World& world, const real_function_3d& vnuc, real_function_3d& rho, const std::vector<Vector<double,3> >& kpoints, int nst) {$/;"	f
initial_guess	src/apps/polar/moldft.cc	/^    void initial_guess(World &world)$/;"	f	struct:Calculation
initial_guess_mp	src/apps/polar/moldft.cc	/^    void initial_guess_mp(World &world)$/;"	f	struct:Calculation
initial_guess_response	src/apps/polar/moldft.cc	/^vecfuncT initial_guess_response(World &world, vecfuncT &dipolemo,$/;"	f	struct:Calculation
initial_level	src/apps/interior_bc/test_problems.h	/^        int initial_level;$/;"	m	class:EmbeddedDirichlet
initial_level	src/madness/mra/funcdefaults.h	/^        static int initial_level;      \/\/\/< Initial level for fine scale projection$/;"	m	class:madness::FunctionDefaults
initial_level	src/madness/mra/funcimpl.h	/^        int initial_level; \/\/\/< Initial level for refinement$/;"	m	class:madness::FunctionImpl
initial_level	src/madness/mra/function_factory.h	/^    initial_level(int initial_level) {$/;"	f	class:madness::FunctionFactory
initial_level	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> int FunctionDefaults<NDIM>::initial_level;$/;"	m	class:madness::FunctionDefaults
initial_load_bal	src/apps/chem/SCF.cc	/^void SCF::initial_load_bal(World &world)$/;"	f	class:madness::SCF
initial_load_bal	src/apps/polar/moldft.cc	/^    void initial_load_bal(World &world)$/;"	f	struct:Calculation
initial_loadbal	src/apps/tdse/tdse4.cc	/^void initial_loadbal(World& world,$/;"	f
initialize	src/apps/chem/AC.h	/^	bool initialize(Molecule molecule, std::string ac_data, double dft_coeff, double tot_charge){$/;"	f	struct:madness::ACParameters
initialize	src/apps/chem/PNOStructures.cpp	/^void PNOPairs::initialize(const std::size_t& nocc) {$/;"	f	class:madness::PNOPairs
initialize	src/apps/chem/QCCalculationParametersBase.h	/^	void initialize(const std::string& key, const T& value, const std::string comment="",$/;"	f	class:madness::QCCalculationParametersBase
initialize	src/apps/chem/SCFProtocol.h	/^    void initialize() {$/;"	f	class:madness::SCFProtocol
initialize	src/apps/chem/TDHF.cc	/^void TDHF::initialize(std::vector<CC_vecfunction> &start)const{$/;"	f	class:madness::TDHF
initialize	src/apps/chem/correlationfactor.h	/^	void initialize(const double vtol1) {$/;"	f	class:madness::NuclearCorrelationFactor
initialize	src/apps/chem/xcfunctional_ldaonly.cc	/^void XCfunctional::initialize(const std::string& input_line, bool polarized,$/;"	f	class:madness::XCfunctional
initialize	src/apps/chem/xcfunctional_libxc.cc	/^void XCfunctional::initialize(const std::string& input_line, bool polarized,$/;"	f	class:madness::XCfunctional
initialize	src/apps/polar/xcfunctional_ldaonly.cc	/^void XCfunctional::initialize(const std::string& input_line, bool polarized, World& world) $/;"	f	class:madness::XCfunctional
initialize	src/apps/polar/xcfunctional_libxc.cc	/^void XCfunctional::initialize(const std::string& input_line, bool polarized, World& world)$/;"	f	class:madness::XCfunctional
initialize	src/madness/mra/function_interface.h	/^		void initialize(const double eps) {$/;"	f	class:madness::TwoElectronInterface
initialize	src/madness/world/world.cc	/^    World& initialize(int& argc, char**& argv, bool quiet) {$/;"	f	namespace:madness
initialize	src/madness/world/world.cc	/^    World& initialize(int& argc, char**& argv, const MPI_Comm& comm, bool quiet) {$/;"	f	namespace:madness
initialize	src/madness/world/world.cc	/^    World& initialize(int& argc, char**& argv, const SafeMPI::Intracomm& comm, bool quiet) {$/;"	f	namespace:madness
initialize	src/madness/world/worldmpi.h	/^            static void initialize(int& argc, char**& argv, int requested) {$/;"	f	class:madness::detail::WorldMpi
initialize_active_mos	src/apps/chem/PNOF12Potentials.h	/^	vector_real_function_3d initialize_active_mos(const madness::Nemo& nemo)const{$/;"	f	class:madness::F12Potentials
initialize_all	src/apps/chem/TDHF.h	/^		void initialize_all() {$/;"	f	struct:madness::TDHF::Parameters
initialize_f12_parameters	src/apps/chem/PNOParameters.h	/^	void initialize_f12_parameters() {$/;"	f	class:madness::F12Parameters
initialize_hessian	src/apps/chem/molopt.h	/^        void initialize_hessian(const Molecule& molecule) {$/;"	f	class:madness::MolOpt
initialize_legendre_stuff	src/madness/mra/legendre.cc	/^    void initialize_legendre_stuff() {$/;"	f	namespace:madness
initialize_nemo_parameters	src/apps/chem/nemo.h	/^		void initialize_nemo_parameters() {$/;"	f	struct:madness::Nemo::NemoCalculationParameters
initialize_pairs	src/apps/chem/CC2.cc	/^  CC2::initialize_pairs(Pairs<CCPair> &pairs,const CCState ftype, const CalcType ctype, const CC_vecfunction &tau, const CC_vecfunction &x, const size_t excitation)const{$/;"	f	class:madness::CC2
initialize_pairs	src/apps/chem/PNO.cpp	/^PNOPairs PNO::initialize_pairs(PNOPairs& pairs, const GuessType& inpgt) const {$/;"	f	class:madness::PNO
initialize_papi	src/madness/world/worldpapi.cc	/^    void initialize_papi() {$/;"	f	namespace:madness
initialize_pno_parameters	src/apps/chem/PNOParameters.h	/^	void initialize_pno_parameters() {$/;"	f	class:madness::PNOParameters
initialize_singles	src/apps/chem/CC2.cc	/^  CC2::initialize_singles(CC_vecfunction &singles,const FuncType type,const int ex) const {$/;"	f	class:madness::CC2
initialize_singles	src/apps/chem/TDHF.cc	/^bool TDHF::initialize_singles(CC_vecfunction &singles,const FuncType type,const int ex) const {$/;"	f	class:madness::TDHF
initialized	src/apps/chem/AC.h	/^    bool initialized()const{return initialized_;}$/;"	f	class:madness::AC
initialized	src/apps/chem/PNOStructures.h	/^	bool initialized()const{return (number>=0 and omega>0.0 and x.size()>0);}$/;"	f	struct:madness::CISData
initialized	src/madness/world/world.cc	/^    bool initialized() {$/;"	f	namespace:madness
initialized_	src/apps/chem/AC.h	/^	bool initialized_=false;$/;"	m	class:madness::AC
inline	src/madness/external/elemental/external/pmrrr/include/global.h	56;"	d
inline	src/madness/external/elemental/external/pmrrr/include/global.h	69;"	d
inmsg_recv	src/madness/world/worldprofile.h	/^        ProfileStat<unsigned long> inmsg_recv; \/\/\/< No. of active messages recv ... inclusive$/;"	m	struct:madness::WorldProfileEntry
inmsg_sent	src/madness/world/worldprofile.h	/^        ProfileStat<unsigned long> inmsg_sent; \/\/\/< No. of active messages sent ... inclusive$/;"	m	struct:madness::WorldProfileEntry
inner	src/apps/adrian/ResponseFunction2.h	/^inline double inner(ResponseFunction& a, ResponseFunction& b) {$/;"	f	namespace:madness
inner	src/apps/adrian/TDHF_Basic_Operators.h	/^double inner(std::vector<std::vector<real_function_3d>> a,$/;"	f
inner	src/apps/bryan/ResponseFunction2.h	/^inline double inner(ResponseFunction& a,$/;"	f	namespace:madness
inner	src/apps/bryan/TDHF_Basic_Operators.h	/^double inner(std::vector<std::vector<real_function_3d>> a,$/;"	f
inner	src/apps/chem/CCStructures.h	/^    double inner(const CCFunction &f)const{$/;"	f	struct:madness::CCFunction
inner	src/apps/chem/CCStructures.h	/^    double inner(const real_function_3d &f)const{$/;"	f	struct:madness::CCFunction
inner	src/apps/chem/PNOF12Potentials.h	/^	double inner(const Tensor<double>&A, const Tensor<double>&B)const{$/;"	f	class:madness::F12Potentials
inner	src/apps/chem/PNOStructures.cpp	/^double inner(const std::valarray<double>& bra, const std::valarray<double>& ket) {$/;"	f	namespace:madness
inner	src/apps/chem/zcis.h	/^	    double_complex inner(const root& f, const root& g){$/;"	f	struct:madness::Zcis::root
inner	src/apps/ii/eigen_solver.cc	/^    inline T inner(const T* a, const T* b ) const{$/;"	f	class:SystolicEigensolver	file:
inner	src/apps/ii/systolic.h	/^    inline T LocalizeBoys<T>::inner(const T a[], const T b[] ) const$/;"	f	class:madness::LocalizeBoys
inner	src/apps/ii/testsystolic.cc	/^    inline T inner(const T* a, const T* b ) const{$/;"	f	class:SystolicEigensolver	file:
inner	src/examples/newsolver.cc	/^double inner(const F& a, const F& b) {$/;"	f
inner	src/examples/testsolver.cc	/^double inner(const F& a, const F& b) {$/;"	f
inner	src/madness/mra/mra.h	/^        TENSOR_RESULT_TYPE(T,R) inner(const Function<R,NDIM>& g) const {$/;"	f	class:madness::Function
inner	src/madness/mra/vmra.h	/^Tensor<TENSOR_RESULT_TYPE(T, R)> inner($/;"	f	namespace:madness
inner	src/madness/mra/vmra.h	/^inner(const std::vector<Function<T, NDIM>>& f,$/;"	f	namespace:madness
inner	src/madness/mra/vmra1.h	/^      Tensor< TENSOR_RESULT_TYPE(T,R) > inner(World& world,$/;"	f	namespace:madness
inner	src/madness/tensor/gmres.h	/^            virtual scalar_type inner($/;"	f	class:madness::VectorOfFunctionsSpace
inner	src/madness/tensor/gmres.h	/^            virtual scalar_type inner(const Function<scalar_type, NDIM> &l,$/;"	f	class:madness::FunctionSpace
inner	src/madness/tensor/gmres.h	/^            virtual scalar_type inner(const Vector<scalar_type, NDIM> &l,$/;"	f	class:madness::VectorSpace
inner	src/madness/tensor/tensor.h	/^    Tensor<TENSOR_RESULT_TYPE(T,Q)> inner(const Tensor<T>& left, const Tensor<Q>& right,$/;"	f	namespace:madness
inner	src/madness/world/vector.h	/^    T inner(const Vector<T,N>& l, const Vector<T,N>& r) {$/;"	f	namespace:madness
inner_adaptive	src/madness/mra/mra.h	/^        T inner_adaptive(const std::shared_ptr< FunctionFunctorInterface<T,NDIM> > f,$/;"	f	class:madness::Function
inner_adaptive_local	src/madness/mra/funcimpl.h	/^        T inner_adaptive_local(const std::shared_ptr< FunctionFunctorInterface<T,NDIM> > f, const bool leaf_refine) const {$/;"	f	class:madness::FunctionImpl
inner_adaptive_recursive	src/madness/mra/funcimpl.h	/^        T inner_adaptive_recursive(keyT key, const tensorT& c,$/;"	f	class:madness::FunctionImpl
inner_ext	src/madness/mra/mra.h	/^        T inner_ext(const std::shared_ptr< FunctionFunctorInterface<T,NDIM> > f, const bool leaf_refine=true, const bool keep_redundant=false) const {$/;"	f	class:madness::Function
inner_ext_local	src/madness/mra/funcimpl.h	/^        T inner_ext_local(const std::shared_ptr< FunctionFunctorInterface<T,NDIM> > f, const bool leaf_refine) const {$/;"	f	class:madness::FunctionImpl
inner_ext_local	src/madness/mra/mra.h	/^        T inner_ext_local(const std::shared_ptr< FunctionFunctorInterface<T,NDIM> > f, const bool leaf_refine=true, const bool keep_redundant=false) const {$/;"	f	class:madness::Function
inner_ext_node	src/madness/mra/funcimpl.h	/^        T inner_ext_node(keyT key, tensorT c, const std::shared_ptr< FunctionFunctorInterface<T,NDIM> > f) const {$/;"	f	class:madness::FunctionImpl
inner_ext_recursive	src/madness/mra/funcimpl.h	/^        T inner_ext_recursive(keyT key, tensorT c, const std::shared_ptr< FunctionFunctorInterface<T,NDIM> > f, const bool leaf_refine, T old_inner=T(0)) const {$/;"	f	class:madness::FunctionImpl
inner_local	src/madness/mra/funcimpl.h	/^        TENSOR_RESULT_TYPE(T,R) inner_local(const FunctionImpl<R,NDIM>& g) const {$/;"	f	class:madness::FunctionImpl
inner_local	src/madness/mra/funcimpl.h	/^        inner_local(const std::vector<const FunctionImpl<T,NDIM>*>& left,$/;"	f	class:madness::FunctionImpl
inner_local	src/madness/mra/mra.h	/^        TENSOR_RESULT_TYPE(T,R) inner_local(const Function<R,NDIM>& g) const {$/;"	f	class:madness::Function
inner_on_demand	src/madness/mra/mra.h	/^        TENSOR_RESULT_TYPE(T,R) inner_on_demand(const Function<R,NDIM>& g) const {$/;"	f	class:madness::Function
inner_result	src/madness/tensor/tensor.h	/^    void inner_result(const Tensor<T>& left, const Tensor<Q>& right,$/;"	f	namespace:madness
inplace_add	src/madness/tensor/srconf.h	/^		void inplace_add(const SRConf<T>& rhs2, std::vector<Slice> lhs_s,$/;"	f	class:madness::SRConf
input2File	src/apps/nick/extract.py	/^    input2File = thisDIR + '\/input2'$/;"	v
inputFile	src/apps/nick/extract.py	/^    inputFile = thisDIR  + '\/input'$/;"	v
inputFile	src/apps/nick/extract.py	/^inputFile = sys.argv[1]$/;"	v
input_filename	src/madness/mra/mraplot.cc	/^    std::string input_filename;      \/\/ filename for function on disk$/;"	m	class:Plotter	file:
input_string_	src/apps/chem/GuessFactory.h	/^	const std::string input_string_;$/;"	m	class:madness::guessfactory::PolynomialFunctor
inputfile	src/apps/chem/test_QCCalculationParametersBase.cc	/^	inputfile(const std::string filename, const std::string lines) {$/;"	f	struct:inputfile
inputfile	src/apps/chem/test_QCCalculationParametersBase.cc	/^struct inputfile {$/;"	s	file:
insert	src/apps/chem/CCStructures.cc	/^  CCIntermediatePotentials::insert(const vector_real_function_3d& potential,const CC_vecfunction& f,const PotentialType& type) {$/;"	f	class:madness::CCIntermediatePotentials
insert	src/apps/chem/CCStructures.h	/^    void insert(const size_t &i, const CCFunction &f) {$/;"	f	struct:madness::CC_vecfunction
insert	src/apps/chem/CCStructures.h	/^    void insert(int i, int j, const T& pair) {$/;"	f	struct:madness::Pairs
insert	src/apps/chem/mp2.h	/^            void insert(int i, int j, T pair) {$/;"	f	struct:madness::MP2::Pairs
insert	src/madness/world/binsorter.h	/^        void insert(ProcessID p, const T& value) {$/;"	f	class:madness::BinSorter
insert	src/madness/world/thread.h	/^            void insert(TaskEventListBase* list) {$/;"	f	class:madness::profiling::TaskEventListBase
insert	src/madness/world/worlddc.h	/^        bool insert(accessor& acc, const keyT& key) {$/;"	f	class:madness::WorldContainer
insert	src/madness/world/worlddc.h	/^        bool insert(const_accessor& acc, const keyT& key) {$/;"	f	class:madness::WorldContainer
insert	src/madness/world/worlddc.h	/^        void insert(const pairT& datum) {$/;"	f	class:madness::WorldContainerImpl
insert	src/madness/world/worldhashmap.h	/^            std::pair<entryT*,bool> insert(const datumT& datum, int lockmode) {$/;"	f	class:madness::Hash_private::bin
insert	src/madness/world/worldhashmap.h	/^        bool insert(accessor& result, const datumT& datum) {$/;"	f	class:madness::ConcurrentHashMap
insert	src/madness/world/worldhashmap.h	/^        bool insert(const_accessor& result, const datumT& datum) {$/;"	f	class:madness::ConcurrentHashMap
insert	src/madness/world/worldhashmap.h	/^        inline bool insert(accessor& result, const keyT& key) {$/;"	f	class:madness::ConcurrentHashMap
insert	src/madness/world/worldhashmap.h	/^        inline bool insert(const_accessor& result, const keyT& key) {$/;"	f	class:madness::ConcurrentHashMap
insert	src/madness/world/worldhashmap.h	/^        std::pair<iterator,bool> insert(const datumT& datum) {$/;"	f	class:madness::ConcurrentHashMap
insert_acc	src/madness/world/worlddc.h	/^        bool insert_acc(accessor& acc, const keyT& key) {$/;"	f	class:madness::WorldContainerImpl
insert_after	src/examples/compiler/mra-driver.hh	/^    void insert_after(Exp* e) {$/;"	f	class:mra_driver
insert_before	src/examples/compiler/mra-driver.hh	/^    void insert_before(Exp* e) {$/;"	f	class:mra_driver
insert_const_acc	src/madness/world/worlddc.h	/^        bool insert_const_acc(const_accessor& acc, const keyT& key) {$/;"	f	class:madness::WorldContainerImpl
insert_op	src/madness/mra/funcimpl.h	/^    	insert_op() : impl() {}$/;"	f	struct:madness::insert_op
insert_op	src/madness/mra/funcimpl.h	/^    	insert_op(const insert_op& other) : impl(other.impl) {}$/;"	f	struct:madness::insert_op
insert_op	src/madness/mra/funcimpl.h	/^    	insert_op(implT* f) : impl(f) {}$/;"	f	struct:madness::insert_op
insert_op	src/madness/mra/funcimpl.h	/^    struct insert_op {$/;"	s	namespace:madness
insert_sym	src/examples/compiler/mra-driver.hh	/^    void insert_sym(const std::string& how, const Exp* e) {$/;"	f	class:mra_driver
insert_sym	src/examples/compiler/mra-driver.hh	/^    void insert_sym(const std::string& how, const std::string& s, Exp::Type t) {$/;"	f	class:mra_driver
insert_zero_down_to_initial_level	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::insert_zero_down_to_initial_level(const keyT& key) {$/;"	f	class:madness::FunctionImpl
inserter	src/madness/world/binsorter.h	/^        inserterT inserter;$/;"	m	class:madness::BinSorter
inserter	src/madness/world/test_binsorter.cc	/^void inserter(const std::pair<int,double>& t) {$/;"	f
instance	src/apps/hf/outputwriter.h	/^  static OutputWriter* instance()$/;"	f	class:OutputWriter
instance	src/madness/world/thread.h	/^        static ThreadPool* instance() {$/;"	f	class:madness::ThreadPool
instance_count	src/madness/tensor/basetensor.cc	/^  madness::AtomicInt BaseTensor::instance_count;$/;"	m	class:madness::BaseTensor	file:
instance_count	src/madness/tensor/basetensor.h	/^        static madness::AtomicInt instance_count; \/\/\/< For debug, count total# instances$/;"	m	class:madness::BaseTensor
instance_ptr	src/madness/world/thread.cc	/^    ThreadPool* ThreadPool::instance_ptr = 0;$/;"	m	class:madness::ThreadPool	file:
instance_ptr	src/madness/world/thread.h	/^        static ThreadPool* instance_ptr; \/\/\/< Singleton pointer.$/;"	m	class:madness::ThreadPool
instantiations_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  InstantiationContainer instantiations_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
int_factor	src/apps/chem/AC.h	/^	double int_factor(const Vector<double, NDIM> &r, std::vector<atom_information<NDIM> > between) const{$/;"	f	class:madness::int_factor_functor
int_factor	src/apps/chem/AC.h	/^	double int_factor(const Vector<double, NDIM> &r, std::vector<atom_information<NDIM> > between) const{$/;"	f	class:madness::lr_pot_functor
int_factor_functor	src/apps/chem/AC.h	/^	int_factor_functor(){}$/;"	f	class:madness::int_factor_functor
int_factor_functor	src/apps/chem/AC.h	/^	int_factor_functor(const ACParameters<NDIM>& ac_param) : ac_param_(ac_param) {}$/;"	f	class:madness::int_factor_functor
int_factor_functor	src/apps/chem/AC.h	/^class int_factor_functor : public FunctionFunctorInterface<double,NDIM>{$/;"	c	namespace:madness
integer	src/apps/hf/lda.h	/^typedef MADNESS_FORINT integer;$/;"	t
integer	src/apps/moldft/fci/crayio.c	/^typedef int integer;$/;"	t	file:
integer	src/madness/fortran_ctypes.h	/^typedef integer4 integer;$/;"	t
integer	src/madness/fortran_ctypes.h	/^typedef integer8 integer;$/;"	t
integer4	src/madness/fortran_ctypes.h	/^typedef int32_t integer4;$/;"	t
integer8	src/madness/fortran_ctypes.h	/^typedef int64_t integer8;$/;"	t
integrate	src/madness/mra/tools/quadrature.py	/^    def integrate(self, function=None, values=None):$/;"	m	class:Quadrature
inter_atomic_distance	src/apps/chem/molecule.cc	/^double Molecule::inter_atomic_distance(unsigned int i, unsigned int j) const$/;"	f	class:madness::Molecule
inter_atomic_distance	src/apps/hf/mentity.cc	/^double MolecularEntity::inter_atomic_distance(unsigned int i,unsigned int j) const {$/;"	f	class:MolecularEntity
inter_atomic_distance	src/apps/polar/molecule.cc	/^double Molecule::inter_atomic_distance(unsigned int i,unsigned int j) const {$/;"	f	class:Molecule
intercept_mode_	src/madness/external/gtest/include/gtest/gtest-spi.h	/^  const InterceptMode intercept_mode_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter
interface_	src/madness/mra/function_factory.h	/^    InterfacePtr interface_;$/;"	m	class:madness::TwoElectronFactory
interleave_rows	src/apps/ii/systolic.h	/^    DistributedMatrix<T> interleave_rows(const DistributedMatrix<T>& a, const DistributedMatrix<T>& b) {$/;"	f	namespace:madness
interleave_rows	src/madness/tensor/distributed_matrix.h	/^    DistributedMatrix<T> interleave_rows(const DistributedMatrix<T>& a, const DistributedMatrix<T>& b) {$/;"	f	namespace:madness
intermediateT	src/apps/chem/CCStructures.h	/^  typedef Pairs<real_function_3d> intermediateT;$/;"	t	namespace:madness
internal	src/madness/external/elemental/include/elemental/blas-like/decl.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv/N.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/Gemv/T.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/LT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/QuasiTrsv/UT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/L.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/Symv/U.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/LN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/LT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/UN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level2/Trsv/UT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LL.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/LU.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RL.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Symm/RU.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/LN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/LT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/UN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Syr2k/UT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/LN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/LT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/UN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Syrk/UT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/LVar1.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/UVar1.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Trdtrmm/Unblocked.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Trstrm/LLN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/LVar1.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/UVar1.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/Trtrmm/Unblocked.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar1.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar2.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar4.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/LVar5.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar1.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar2.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar4.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrmm/UVar5.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar1.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar2.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar3.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar4.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/LVar5.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar1.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar2.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar3.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar4.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/include/elemental/blas-like/level3/TwoSidedTrsm/UVar5.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/NNNN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/NNNT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/NNTN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/NNTT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/NTNN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/NTNT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/NTTN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/NTTT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/TNNN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/TNNT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/TNTN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/TNTT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/TTNN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/TTNT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/TTTN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trr2k/TTTT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trrk.cpp	/^namespace internal {$/;"	n	namespace:elem	file:
internal	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trrk/NN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trrk/NT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trrk/TN.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/elemental/src/blas-like/Trrk/TT.hpp	/^namespace internal {$/;"	n	namespace:elem
internal	src/madness/external/gtest/include/gtest/gtest-death-test.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/gtest-message.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/gtest-printers.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/gtest-spi.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/gtest.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/internal/gtest-string.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/src/gtest-death-test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/madness/external/gtest/src/gtest-filepath.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/madness/external/gtest/src/gtest-internal-inl.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/madness/external/gtest/src/gtest-port.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/madness/external/gtest/src/gtest-printers.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/madness/external/gtest/src/gtest-test-part.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/madness/external/gtest/src/gtest-typed-test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/madness/external/gtest/src/gtest.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal2	src/madness/external/gtest/include/gtest/gtest-printers.h	/^namespace internal2 {$/;"	n	namespace:testing
internal2	src/madness/external/gtest/src/gtest-printers.cc	/^namespace internal2 {$/;"	n	namespace:testing	file:
internal_const_iteratorT	src/madness/world/worlddc.h	/^        typedef typename internal_containerT::const_iterator internal_const_iteratorT;$/;"	t	class:madness::WorldContainerImpl
internal_containerT	src/madness/world/worlddc.h	/^        typedef ConcurrentHashMap< keyT,valueT,hashfunT > internal_containerT;$/;"	t	class:madness::WorldContainerImpl
internal_iteratorT	src/madness/world/worlddc.h	/^        typedef typename internal_containerT::iterator internal_iteratorT;$/;"	t	class:madness::WorldContainerImpl
internal_run_death_test_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::string internal_run_death_test_;$/;"	m	class:testing::internal::GTestFlagSaver
internal_run_death_test_flag	src/madness/external/gtest/src/gtest-internal-inl.h	/^  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {$/;"	f	class:testing::internal::UnitTestImpl
internal_run_death_test_flag_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::scoped_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_;$/;"	m	class:testing::internal::UnitTestImpl
interpolate_to_longrange	src/apps/chem/oep.h	/^    real_function_3d interpolate_to_longrange(const real_function_3d refdensity,$/;"	f	class:madness::OEP
interpolate_to_longrange_op	src/apps/chem/oep.h	/^	interpolate_to_longrange_op(double hi, double lo) : thresh_high(hi), thresh_low(lo),$/;"	f	struct:madness::interpolate_to_longrange_op
interpolate_to_longrange_op	src/apps/chem/oep.h	/^struct interpolate_to_longrange_op {$/;"	s	namespace:madness
interpolation_scheme_	src/apps/chem/AC.h	/^	std::string interpolation_scheme_; \/\/\/ scheme for interpolation between xc-functional and 1\/r-potential$/;"	m	struct:madness::ACParameters
interpolators	src/madness/mra/tools/longfloat.py	/^class interpolators:$/;"	c
interptable	src/madness/mra/tools/longfloat.py	/^class interptable:$/;"	c
inv_mask_	src/examples/smooth.h	/^	Function<T,NDIM> inv_mask_;$/;"	m	class:smooth
inv_mask_functor	src/examples/smooth.h	/^		inv_mask_functor(const double &factor, const double &cutoff): factor_(factor), cutoff_radius_(cutoff), shift_(0.0){}$/;"	f	struct:smooth::inv_mask_functor
inv_mask_functor	src/examples/smooth.h	/^		inv_mask_functor(const double &factor, const double &cutoff, const Vector<double,NDIM> shift): factor_(factor), cutoff_radius_(cutoff), shift_(shift){}$/;"	f	struct:smooth::inv_mask_functor
inv_mask_functor	src/examples/smooth.h	/^	struct inv_mask_functor{$/;"	s	class:smooth
invalid	src/madness/mra/key.h	/^        static Key<NDIM>  invalid() {$/;"	f	class:madness::Key
invalidate_all	src/apps/chem/MolecularOrbitals.h	/^	void invalidate_all() {$/;"	f	class:madness::MolecularOrbitals
invalidate_eps	src/apps/chem/MolecularOrbitals.h	/^	void invalidate_eps() {$/;"	f	class:madness::MolecularOrbitals
invalidate_factors_and_potentials	src/apps/chem/znemo.cc	/^void Znemo::invalidate_factors_and_potentials() {$/;"	f	class:madness::Znemo
invalidate_irreps	src/apps/chem/MolecularOrbitals.h	/^	void invalidate_irreps() {$/;"	f	class:madness::MolecularOrbitals
invalidate_localize_sets	src/apps/chem/MolecularOrbitals.h	/^	void invalidate_localize_sets() {$/;"	f	class:madness::MolecularOrbitals
invalidate_mos	src/apps/chem/MolecularOrbitals.h	/^	void invalidate_mos() {$/;"	f	class:madness::MolecularOrbitals
invalidate_occ	src/apps/chem/MolecularOrbitals.h	/^	void invalidate_occ() {$/;"	f	class:madness::MolecularOrbitals
inverse	src/apps/chem/correlationfactor.h	/^	virtual real_function_3d inverse() const {$/;"	f	class:madness::NuclearCorrelationFactor
inverse	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d inverse() const {$/;"	f	class:madness::CorrelationFactor2
inverse	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/General/LUPartialPiv.hpp	/^namespace inverse {$/;"	n	namespace:elem
inverse	src/madness/tensor/lapack.cc	/^    Tensor<T> inverse(const Tensor<T>& a_in) {$/;"	f	namespace:madness
invert	src/examples/test_gmres.cc	/^inline static void invert(const Key<3> &key, Tensor<T> &t) {$/;"	f	file:
invert	src/madness/mra/tools/longfloat.py	/^    def invert(self, y, gdg, x):$/;"	m	class:interpolators
invert_sign	src/apps/chem/CCStructures.cc	/^  CCPairFunction::invert_sign() {$/;"	f	class:madness::CCPairFunction
invokehandler	src/madness/world/world_object.h	/^            void invokehandler() {$/;"	f	struct:madness::detail::PendingMsg
invscale_eigenvalues	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^void invscale_eigenvalues(val_t *Wstruct, double scale,$/;"	f	file:
io_node	src/madness/world/parallel_archive.h	/^            ProcessID io_node(ProcessID rank) const {$/;"	f	class:madness::archive::BaseParallelArchive
iobuf	src/madness/world/binary_fstream_archive.h	/^            std::shared_ptr<char> iobuf; \/\/\/< Buffer.$/;"	m	class:madness::archive::BinaryFstreamInputArchive
iobuf	src/madness/world/binary_fstream_archive.h	/^            std::shared_ptr<char> iobuf; \/\/\/< Buffer.$/;"	m	class:madness::archive::BinaryFstreamOutputArchive
ionFile	src/apps/nick/extract.py	/^    ionFile  = open("ion.dat", 'w')$/;"	v
ionization_energy_	src/examples/smooth.h	/^	const double ionization_energy_;$/;"	m	struct:asymptotic_density
ipot	src/examples/smooth.h	/^	const double ipot;$/;"	m	struct:apply_kernel_helper
ipot	src/examples/smooth.h	/^	const double ipot;$/;"	m	struct:asymptotic_slater
iproc	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    *restrict iproc;$/;"	m	struct:__anon22
iptr	src/apps/ii/systolic.h	/^        std::vector<T*> iptr, jptr;     \/\/< Indirection for implementing cyclic buffer !! SHOULD BE VOLATILE ?????$/;"	m	class:madness::SystolicMatrixAlgorithm
iptr	src/madness/tensor/systolic.h	/^        std::vector<T*> iptr, jptr;     \/\/\/< Indirection for implementing cyclic buffer !! SHOULD BE VOLATILE ?????$/;"	m	class:madness::SystolicMatrixAlgorithm
ircell	src/apps/moldft/pointgroup.h	/^    coordT ircell() const {$/;"	f	class:PointGroup
ircell	src/apps/polar/pointgroup.h	/^    coordT ircell() const {$/;"	f	class:PointGroup
irmul	src/apps/moldft/pointgroup.h	/^    int irmul(int ir1, int ir2) const {$/;"	f	class:PointGroup
irmul	src/apps/polar/pointgroup.h	/^    int irmul(int ir1, int ir2) const {$/;"	f	class:PointGroup
iroot	src/apps/moldft/fci/fci.F	/^      integer lenwrk, iwork, iv, lwork, iroot,/;"	v	program:fci
irrep	src/apps/chem/CCStructures.h	/^    std::string irrep="null";	\/\/\/ excitation irrep (direct product of x function and corresponding orbital)$/;"	m	struct:madness::CC_vecfunction
irrep	src/apps/chem/TDHF.h	/^		std::string irrep() const {return get<std::string>("irrep");}$/;"	f	struct:madness::TDHF::Parameters
irrep_	src/apps/chem/pointgroupsymmetry.h	/^	std::string irrep_="all";$/;"	m	class:madness::projector_irrep
irreps	src/apps/chem/MolecularOrbitals.h	/^	std::vector<std::string> irreps;$/;"	m	class:madness::MolecularOrbitals
irreps_	src/apps/chem/pointgroupsymmetry.h	/^	std::map<std::string,characterlineT> irreps_;$/;"	m	struct:madness::charactertable
irs	src/apps/moldft/pointgroup.h	/^    std::string irs[8];         \/\/\/< Names of the irreps$/;"	m	class:PointGroup
irs	src/apps/polar/pointgroup.h	/^    std::string irs[8];         \/\/< Names of the irreps$/;"	m	class:PointGroup
is	src/madness/world/binary_fstream_archive.h	/^            mutable std::ifstream is; \/\/\/< The filestream.$/;"	m	class:madness::archive::BinaryFstreamInputArchive
is	src/madness/world/text_fstream_archive.h	/^            mutable std::ifstream is; \/\/\/< The filestream.$/;"	m	class:madness::archive::TextFstreamInputArchive
isHomogeneous	src/apps/interior_bc/test_problems.h	/^        bool isHomogeneous() const { return false; }$/;"	f	class:InhomoConstantSphere
isHomogeneous	src/apps/interior_bc/test_problems.h	/^        bool isHomogeneous() const { return true; }$/;"	f	class:ConstantSphere
isHomogeneous	src/apps/interior_bc/test_problems.h	/^        bool isHomogeneous() const { return true; }$/;"	f	class:CosineSphere
isHomogeneous	src/apps/interior_bc/test_problems.h	/^        bool isHomogeneous() const { return true; }$/;"	f	class:Y20Sphere
is_abelian	src/apps/chem/pointgroupsymmetry.h	/^	bool is_abelian=true;						\/\/\/< currently always true$/;"	m	struct:madness::charactertable
is_always_serializable	src/madness/world/type_traits.h	/^    template <typename T> constexpr bool is_always_serializable =$/;"	m	namespace:madness
is_any_function_pointer	src/madness/world/type_traits.h	/^    template <typename T, typename Enabler = void> struct is_any_function_pointer : public std::false_type {};$/;"	s	namespace:madness
is_any_function_pointer	src/madness/world/type_traits.h	/^    template <typename T> struct is_any_function_pointer<T, std::enable_if_t<std::is_member_function_pointer<T>::value || is_function_pointer_v<T>>> : public std::true_type {};$/;"	s	namespace:madness
is_any_function_pointer_v	src/madness/world/type_traits.h	/^    template <typename T> constexpr bool is_any_function_pointer_v = is_any_function_pointer<T>::value;$/;"	m	namespace:madness
is_archive	src/madness/world/archive.h	/^            static const bool is_archive = true; \/\/\/< Flag to determine if this object is an archive.$/;"	m	class:madness::archive::BaseArchive
is_archive	src/madness/world/archive.h	/^        struct is_archive : public std::is_base_of<BaseArchive, T>{};$/;"	s	namespace:madness::archive
is_arg_holder	src/madness/world/taskfn.h	/^        struct is_arg_holder : public std::false_type {};$/;"	s	namespace:madness::detail
is_arg_holder	src/madness/world/taskfn.h	/^        struct is_arg_holder<ArgHolder<T>> : public std::true_type {};$/;"	s	namespace:madness::detail
is_cached	src/madness/world/worlddc.h	/^        bool is_cached() const {$/;"	f	class:madness::WorldContainerIterator
is_cereal_archive	src/madness/world/cereal_archive.h	/^struct is_cereal_archive<archive::CerealInputArchive<Muesli>> : std::true_type {};$/;"	s	namespace:madness
is_cereal_archive	src/madness/world/cereal_archive.h	/^struct is_cereal_archive<archive::CerealOutputArchive<Muesli>> : std::true_type {};$/;"	s	namespace:madness
is_cereal_archive	src/madness/world/cereal_archive.h	/^template <typename Archive> struct is_cereal_archive : std::false_type {};$/;"	s	namespace:madness
is_child_of	src/madness/mra/key.h	/^        is_child_of(const Key& key) const {$/;"	f	class:madness::Key
is_column_distributed	src/apps/ii/systolic.h	/^        bool is_column_distributed() const {return process_rowdim()==1;}$/;"	f	class:madness::DistributedMatrix
is_column_distributed	src/madness/tensor/distributed_matrix.h	/^        bool is_column_distributed() const {return process_rowdim()==1;}$/;"	f	class:madness::DistributedMatrixDistribution
is_complex	src/examples/compiler/mra-driver.hh	/^    static bool is_complex(Type t) {$/;"	f	class:Exp
is_compressed	src/madness/mra/mra.h	/^        bool is_compressed() const {$/;"	f	class:madness::Function
is_compressed	src/madness/mra/mraimpl.h	/^    bool FunctionImpl<T,NDIM>::is_compressed() const {$/;"	f	class:madness::FunctionImpl
is_consistent	src/apps/chem/PNOStructures.cpp	/^bool PNOPairs::is_consistent(std::string& errm) const {$/;"	f	class:madness::PNOPairs
is_dcep	src/apps/chem/oep.h	/^	bool is_dcep() const {return (get<std::string>("model")=="dcep");}$/;"	f	class:madness::OEP_Parameters
is_default	src/madness/world/world.h	/^        static bool is_default(const SafeMPI::Intracomm& comm) {$/;"	f	class:madness::World
is_default_initialized	src/madness/world/future.h	/^        bool is_default_initialized() const {$/;"	f	class:madness::Future
is_defined	src/apps/chem/corepotential.h	/^    inline bool is_defined(const unsigned int atn) const {$/;"	f	class:madness::CorePotentialManager
is_defined	src/apps/polar/corepotential.h	/^    inline bool is_defined(const unsigned int atn) const {$/;"	f	class:CorePotentialManager
is_dft	src/apps/adrian/ResponsePotential.h	/^      const bool is_dft;                                               \/\/ Flag for calc. dft potential   (default = false)$/;"	m	class:madness::ResponsePotential
is_dft	src/apps/bryan/ResponsePotential.h	/^      const bool is_dft;                                               \/\/ Flag for calc. dft potential   (default = false)$/;"	m	class:madness::ResponsePotential
is_dft	src/apps/chem/nemo.h	/^	bool is_dft() const {return calc->xc.is_dft();}$/;"	f	class:madness::Nemo
is_dft	src/apps/chem/xcfunctional_ldaonly.cc	/^bool XCfunctional::is_dft() const {$/;"	f	class:madness::XCfunctional
is_dft	src/apps/chem/xcfunctional_libxc.cc	/^bool XCfunctional::is_dft() const {$/;"	f	class:madness::XCfunctional
is_dft	src/apps/polar/xcfunctional_ldaonly.cc	/^bool XCfunctional::is_dft() const {$/;"	f	class:madness::XCfunctional
is_dft	src/apps/polar/xcfunctional_libxc.cc	/^bool XCfunctional::is_dft() const {$/;"	f	class:madness::XCfunctional
is_disabled_	src/madness/external/gtest/include/gtest/gtest.h	/^  bool is_disabled_;                \/\/ True iff this test is disabled$/;"	m	class:testing::TestInfo
is_divisible	src/madness/world/range.h	/^        bool is_divisible() const { return n > chunksize; }$/;"	f	class:madness::Range
is_equal	src/apps/hf/esolver.h	/^  bool is_equal(double val1, double val2, double eps)$/;"	f
is_even	src/madness/world/test_world.cc	/^inline bool is_even(int i) {$/;"	f
is_farther_out_than	src/madness/mra/key.h	/^        bool is_farther_out_than(const Key<NDIM>& other) const {$/;"	f	class:madness::Key
is_flat	src/madness/tensor/srconf.h	/^		bool is_flat() const {$/;"	f	class:madness::SRConf
is_function_pointer	src/madness/world/type_traits.h	/^    template <typename T, typename Enabler = void> struct is_function_pointer : public std::false_type {};$/;"	s	namespace:madness
is_function_pointer	src/madness/world/type_traits.h	/^    template <typename T> struct is_function_pointer<T, std::enable_if_t<std::is_function<typename std::remove_pointer<T>::type>::value>> : public std::true_type {};$/;"	s	namespace:madness
is_function_pointer_v	src/madness/world/type_traits.h	/^    template <typename T> constexpr bool is_function_pointer_v = is_function_pointer<T>::value;$/;"	m	namespace:madness
is_functor	src/madness/world/function_traits.h	/^        struct is_functor {$/;"	s	namespace:madness::detail
is_functor	src/madness/world/function_traits.h	/^        struct is_functor<fnT, typename std::enable_if<is_type<typename fnT::result_type>::value >::type> :$/;"	s	namespace:madness::detail
is_future	src/madness/world/future.h	/^    struct is_future : public std::false_type { };$/;"	s	namespace:madness
is_future	src/madness/world/future.h	/^    struct is_future< Future<T> > : public std::true_type { };$/;"	s	namespace:madness
is_generator	src/madness/world/thread.h	/^        bool is_generator() const {$/;"	f	class:madness::TaskAttributes
is_gga	src/apps/chem/xcfunctional_ldaonly.cc	/^bool XCfunctional::is_gga() const {$/;"	f	class:madness::XCfunctional
is_gga	src/apps/chem/xcfunctional_libxc.cc	/^bool XCfunctional::is_gga() const {$/;"	f	class:madness::XCfunctional
is_gga	src/apps/polar/xcfunctional_ldaonly.cc	/^bool XCfunctional::is_gga() const {$/;"	f	class:madness::XCfunctional
is_gga	src/apps/polar/xcfunctional_libxc.cc	/^bool XCfunctional::is_gga() const {$/;"	f	class:madness::XCfunctional
is_guess_from_scratch	src/apps/chem/PNO.h	/^	bool is_guess_from_scratch(const PairType& ct)const{$/;"	f	class:madness::PNO
is_high_priority	src/madness/world/thread.h	/^        bool is_high_priority() const {$/;"	f	class:madness::TaskAttributes
is_initialized	src/apps/chem/PNOTensors.h	/^	bool is_initialized(size_t i, size_t j, size_t k) const {$/;"	f	class:__anon48::Tensor_IJ_IK
is_initialized	src/apps/chem/PNOTensors.h	/^	bool is_initialized(size_t i, size_t j, size_t k) const {$/;"	f	class:__anon48::Tensor_IJ_KJ
is_initialized	src/apps/chem/SCFOperators.h	/^    bool is_initialized() const {$/;"	f	class:madness::XCOperator
is_initialized	src/madness/mra/mra.h	/^        bool is_initialized() const {$/;"	f	class:madness::Function
is_input_archive	src/madness/world/archive.h	/^            static const bool is_input_archive = false; \/\/\/< Flag to determine if this object is an input archive.$/;"	m	class:madness::archive::BaseArchive
is_input_archive	src/madness/world/archive.h	/^            static const bool is_input_archive = true; \/\/\/< Flag to determine if this object is an input archive.$/;"	m	class:madness::archive::BaseInputArchive
is_input_archive	src/madness/world/archive.h	/^        struct is_input_archive : public std::is_base_of<BaseInputArchive, T> {};$/;"	s	namespace:madness::archive
is_integer	src/examples/compiler/mra-driver.hh	/^    static bool is_integer(Type t) {$/;"	f	class:Exp
is_invalid	src/madness/mra/funcimpl.h	/^        is_invalid() const {$/;"	f	class:madness::FunctionNode
is_invalid	src/madness/mra/key.h	/^        bool is_invalid() const {$/;"	f	class:madness::Key
is_io_node	src/madness/world/parallel_archive.h	/^            bool is_io_node() const {$/;"	f	class:madness::archive::BaseParallelArchive
is_iostreammable_v	src/madness/world/type_traits.h	/^    template <typename T> constexpr bool is_iostreammable_v = is_istreammable_v<T> && is_ostreammable_v<T>;$/;"	m	namespace:madness
is_istreammable_v	src/madness/world/type_traits.h	/^    template <typename T> constexpr bool is_istreammable_v = is_istreammable<T>::value;$/;"	m	namespace:madness
is_large	src/madness/mra/test6.cc	/^bool is_large(const double& val, const double& eps) {$/;"	f
is_large	src/madness/tensor/testseprep.cc	/^bool is_large(const double& val, const double& eps) {$/;"	f
is_lda	src/apps/chem/xcfunctional_ldaonly.cc	/^bool XCfunctional::is_lda() const {$/;"	f	class:madness::XCfunctional
is_lda	src/apps/chem/xcfunctional_libxc.cc	/^bool XCfunctional::is_lda() const {$/;"	f	class:madness::XCfunctional
is_lda	src/apps/polar/xcfunctional_ldaonly.cc	/^bool XCfunctional::is_lda() const {$/;"	f	class:madness::XCfunctional
is_lda	src/apps/polar/xcfunctional_libxc.cc	/^bool XCfunctional::is_lda() const {$/;"	f	class:madness::XCfunctional
is_leaf	src/madness/mra/funcimpl.h	/^    	const LeafStatus& is_leaf() const {return is_leaf_;}$/;"	f	class:madness::CoeffTracker
is_leaf	src/madness/mra/funcimpl.h	/^        bool is_leaf() const {return not _has_children;}$/;"	f	struct:madness::ShallowNode
is_leaf	src/madness/mra/funcimpl.h	/^        is_leaf() const {$/;"	f	class:madness::FunctionNode
is_leaf	src/madness/world/test_tree.cc	/^    bool is_leaf() const {$/;"	f	struct:Node
is_leaf	src/madness/world/test_world.cc	/^    bool is_leaf() const {$/;"	f	struct:Node
is_leaf_	src/madness/mra/funcimpl.h	/^    	LeafStatus is_leaf_;$/;"	m	class:madness::CoeffTracker
is_like	src/madness/mra/testgaxpyext.cc	/^bool is_like(double a, double b, double tol) {$/;"	f
is_like	src/madness/mra/testinnerext.cc	/^bool is_like(double a, double b, double tol) {$/;"	f
is_local	src/madness/world/future.h	/^        bool is_local() const {$/;"	f	class:madness::FutureImpl
is_local	src/madness/world/future.h	/^        inline bool is_local() const {$/;"	f	class:madness::Future
is_local	src/madness/world/worlddc.h	/^        bool is_local(const keyT& key) const {$/;"	f	class:madness::WorldContainer
is_local	src/madness/world/worlddc.h	/^        bool is_local(const keyT& key) const {$/;"	f	class:madness::WorldContainerImpl
is_local	src/madness/world/worldptr.h	/^            bool is_local() const {$/;"	f	class:madness::detail::WorldPtr
is_local	src/madness/world/worldref.h	/^            bool is_local() const { return pimpl_.is_local(); }$/;"	f	class:madness::detail::RemoteCounter
is_local	src/madness/world/worldref.h	/^        inline bool is_local() const { return counter_.is_local(); }$/;"	f	class:madness::RemoteReference
is_meta	src/apps/chem/xcfunctional_ldaonly.cc	/^bool XCfunctional::is_meta() const {$/;"	f	class:madness::XCfunctional
is_meta	src/apps/chem/xcfunctional_libxc.cc	/^bool XCfunctional::is_meta() const {$/;"	f	class:madness::XCfunctional
is_meta	src/apps/polar/xcfunctional_ldaonly.cc	/^bool XCfunctional::is_meta() const {$/;"	f	class:madness::XCfunctional
is_meta	src/apps/polar/xcfunctional_libxc.cc	/^bool XCfunctional::is_meta() const {$/;"	f	class:madness::XCfunctional
is_mrafun	src/examples/compiler/mra-driver.hh	/^    static bool is_mrafun(Type t) {$/;"	f	class:Exp
is_mrks	src/apps/chem/oep.h	/^	bool is_mrks() const {return (get<std::string>("model")=="mrks");}$/;"	f	class:madness::OEP_Parameters
is_nan	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  bool is_nan() const {$/;"	f	class:testing::internal::FloatingPoint
is_neighbor_of	src/madness/mra/key.h	/^        is_neighbor_of(const Key& key, const std::vector<bool>& bperiodic) const {$/;"	f	class:madness::Key
is_nonstandard	src/madness/mra/mraimpl.h	/^    bool FunctionImpl<T,NDIM>::is_nonstandard() const {return nonstandard;}$/;"	f	class:madness::FunctionImpl
is_number	src/examples/compiler/mra-driver.hh	/^    static bool is_number(Type t) {$/;"	f	class:Exp
is_oaep	src/apps/chem/oep.h	/^	bool is_oaep() const {return (get<std::string>("model")=="oaep");}$/;"	f	class:madness::OEP_Parameters
is_ocep	src/apps/chem/oep.h	/^	bool is_ocep() const {return (get<std::string>("model")=="ocep");}$/;"	f	class:madness::OEP_Parameters
is_od	src/apps/hf/dft.h	/^    virtual bool is_od() {return false;}$/;"	f	class:madness::DFTCoulombOp
is_od	src/apps/hf/dft.h	/^    virtual bool is_od() {return false;}$/;"	f	class:madness::DFTCoulombPeriodicOp
is_od	src/apps/hf/dft.h	/^    virtual bool is_od() {return false;}$/;"	f	class:madness::DFTNuclearChargeDensityOp
is_od	src/apps/hf/dft.h	/^    virtual bool is_od() {return false;}$/;"	f	class:madness::DFTNuclearPotentialOp
is_od	src/apps/hf/dft.h	/^    virtual bool is_od() {return false;}$/;"	f	class:madness::XCFunctionalLDA
is_od	src/apps/hf/hartreefock.h	/^    virtual bool is_od() {return false;}$/;"	f	class:madness::HartreeFockCoulombOp
is_od	src/apps/hf/hartreefock.h	/^    virtual bool is_od() {return false;}$/;"	f	class:madness::HartreeFockNuclearPotentialOp
is_od	src/apps/hf/hartreefock.h	/^    virtual bool is_od() {return true;}$/;"	f	class:madness::HartreeFockExchangeOp
is_od	src/apps/hf/test_hydro.cc	/^    virtual bool is_od() {return false;}$/;"	f	class:NuclearChargeDensityOp
is_odd	src/madness/world/test_world.cc	/^inline bool is_odd(int i) {$/;"	f
is_on_demand	src/madness/mra/function_factory.h	/^    is_on_demand() {$/;"	f	class:madness::FunctionFactory
is_on_demand	src/madness/mra/mra.h	/^        bool is_on_demand() const {return this->impl->is_on_demand();}$/;"	f	class:madness::Function
is_on_demand	src/madness/mra/mraimpl.h	/^    bool& FunctionImpl<T,NDIM>::is_on_demand() {return on_demand;};$/;"	f	class:madness::FunctionImpl
is_on_demand	src/madness/mra/mraimpl.h	/^    const bool& FunctionImpl<T,NDIM>::is_on_demand() const {return on_demand;};$/;"	f	class:madness::FunctionImpl
is_operator	src/madness/tensor/tensortrain.h	/^        bool is_operator() const {$/;"	f	class:madness::TensorTrain
is_orb_in_kpoint	src/apps/hf/esolver.h	/^  bool is_orb_in_kpoint(unsigned int idx)$/;"	f	struct:KPoint
is_ordered	src/madness/world/worldrmi.h	/^            static inline bool is_ordered(attrT attr) { return attr & ATTR_ORDERED; }$/;"	f	class:madness::RMI::RmiTask
is_ostreammable	src/madness/world/type_traits.h	/^    struct is_ostreammable : std::false_type {};$/;"	s	namespace:madness
is_ostreammable	src/madness/world/type_traits.h	/^    struct is_ostreammable<T, meta::void_t<decltype(std::declval<std::ostream&>() << std::declval<const T&>())>> : std::true_type {};$/;"	s	namespace:madness
is_output_archive	src/madness/world/archive.h	/^            static const bool is_output_archive = false; \/\/\/< Flag to determine if this object is an output archive.$/;"	m	class:madness::archive::BaseArchive
is_output_archive	src/madness/world/archive.h	/^            static const bool is_output_archive = true; \/\/\/< Flag to determine if this object is an output archive.$/;"	m	class:madness::archive::BaseOutputArchive
is_output_archive	src/madness/world/archive.h	/^        struct is_output_archive : public std::is_base_of<BaseOutputArchive, T> {};$/;"	s	namespace:madness::archive
is_parallel_archive	src/madness/world/archive.h	/^            static const bool is_parallel_archive = false; \/\/\/< Flag to determine if this object is a parallel archive.$/;"	m	class:madness::archive::BaseArchive
is_parallel_archive	src/madness/world/parallel_archive.h	/^            static const bool is_parallel_archive = true; \/\/\/< Mark this class as a parallel archive.$/;"	m	class:madness::archive::BaseParallelArchive
is_parent_of	src/madness/mra/key.h	/^        is_parent_of(const Key& key) const {$/;"	f	class:madness::Key
is_pending	src/madness/world/worldam.h	/^        bool is_pending() const { return flags & 0x1ul; }$/;"	f	class:madness::AmArg
is_periodic	src/madness/mra/funcdefaults.h	/^        std::vector<bool> is_periodic() const {$/;"	f	class:madness::BoundaryConditions
is_pod	src/examples/compiler/mra-driver.hh	/^    static bool is_pod(Type t) {$/;"	f	class:Exp
is_pointer	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^struct is_pointer : public false_type {};$/;"	s	namespace:testing::internal
is_pointer	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^struct is_pointer<T*> : public true_type {};$/;"	s	namespace:testing::internal
is_potential_defined	src/apps/chem/molecule.h	/^    bool is_potential_defined(unsigned int atn) const { return core_pot.is_defined(atn); };$/;"	f	class:madness::Molecule
is_potential_defined	src/apps/polar/molecule.h	/^    bool is_potential_defined(unsigned int atn) const { return core_pot.is_defined(atn); };$/;"	f	class:Molecule
is_potential_defined_atom	src/apps/chem/molecule.h	/^    bool is_potential_defined_atom(int i) const { return core_pot.is_defined(atoms[i].atomic_number); };$/;"	f	class:madness::Molecule
is_potential_defined_atom	src/apps/polar/molecule.h	/^    bool is_potential_defined_atom(int i) const { return core_pot.is_defined(atoms[i].atomic_number); };$/;"	f	class:Molecule
is_rd	src/apps/hf/dft.h	/^    virtual bool is_rd() {return true;}$/;"	f	class:madness::DFTCoulombOp
is_rd	src/apps/hf/dft.h	/^    virtual bool is_rd() {return true;}$/;"	f	class:madness::DFTCoulombPeriodicOp
is_rd	src/apps/hf/dft.h	/^    virtual bool is_rd() {return true;}$/;"	f	class:madness::DFTNuclearChargeDensityOp
is_rd	src/apps/hf/dft.h	/^    virtual bool is_rd() {return true;}$/;"	f	class:madness::DFTNuclearPotentialOp
is_rd	src/apps/hf/dft.h	/^    virtual bool is_rd() {return true;}$/;"	f	class:madness::XCFunctionalLDA
is_rd	src/apps/hf/hartreefock.h	/^    virtual bool is_rd() {return false;}$/;"	f	class:madness::HartreeFockExchangeOp
is_rd	src/apps/hf/hartreefock.h	/^    virtual bool is_rd() {return true;}$/;"	f	class:madness::HartreeFockCoulombOp
is_rd	src/apps/hf/hartreefock.h	/^    virtual bool is_rd() {return true;}$/;"	f	class:madness::HartreeFockNuclearPotentialOp
is_rd	src/apps/hf/test_hydro.cc	/^    virtual bool is_rd() {return true;}$/;"	f	class:NuclearChargeDensityOp
is_ready	src/madness/world/world_object.h	/^        static bool is_ready(const uniqueidT& id, objT*& obj, const AmArg& arg, am_handlerT ptr) {$/;"	f	class:madness::WorldObject
is_real	src/examples/compiler/mra-driver.hh	/^    static bool is_real(Type t) {$/;"	f	class:Exp
is_redundant	src/madness/mra/mraimpl.h	/^    bool FunctionImpl<T,NDIM>::is_redundant() const {$/;"	f	class:madness::FunctionImpl
is_remote	src/madness/world/future.h	/^        inline bool is_remote() const {$/;"	f	class:madness::Future
is_reportable	src/madness/external/gtest/include/gtest/gtest.h	/^  bool is_reportable() const {$/;"	f	class:testing::TestInfo
is_row_distributed	src/apps/ii/systolic.h	/^        bool is_row_distributed() const {return process_coldim()==1;}$/;"	f	class:madness::DistributedMatrix
is_row_distributed	src/madness/tensor/distributed_matrix.h	/^        bool is_row_distributed() const {return process_coldim()==1;}$/;"	f	class:madness::DistributedMatrixDistribution
is_second	src/madness/mra/derivative.h	/^        bool is_second;$/;"	m	class:madness::Derivative
is_serializable	src/madness/world/cereal_archive.h	/^struct is_serializable<$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable : std::false_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::BinaryFstreamInputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::BinaryFstreamOutputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::BufferInputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::BufferOutputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::MPIInputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::MPIOutputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::MPIRawInputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::MPIRawOutputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::TextFstreamInputArchive, T, std::enable_if_t<is_iostreammable_v<T>>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::TextFstreamOutputArchive, T, std::enable_if_t<is_iostreammable_v<T>>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::VectorInputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_serializable	src/madness/world/type_traits.h	/^    struct is_serializable<archive::VectorOutputArchive, T, std::enable_if_t<is_trivially_serializable<T>::value>> : std::true_type {};$/;"	s	namespace:madness
is_server_thread	src/madness/world/worldrmi.cc	/^    thread_local bool RMI::is_server_thread = false;$/;"	m	class:madness::RMI	file:
is_server_thread	src/madness/world/worldrmi.h	/^        static thread_local bool is_server_thread; \/\/< if true this thread is the server thread$/;"	m	class:madness::RMI
is_slaterf12	src/madness/mra/operator.h	/^        bool is_slaterf12;$/;"	m	class:madness::SeparatedConvolution
is_small	src/madness/mra/test6.cc	/^bool is_small(const double& val, const double& eps) {$/;"	f
is_small	src/madness/tensor/testseprep.cc	/^bool is_small(const double& val, const double& eps) {$/;"	f
is_small	src/madness/world/stack.h	/^        bool is_small() const { return data_ == static_cast<const void*>(buffer_); }$/;"	f	class:madness::Stack
is_spin_polarized	src/apps/chem/xcfunctional.h	/^    bool is_spin_polarized() const$/;"	f	class:madness::XCfunctional
is_spin_polarized	src/apps/polar/xcfunctional.h	/^    bool is_spin_polarized() const$/;"	f	class:madness::XCfunctional
is_spin_restricted	src/apps/chem/SCF.h	/^	bool is_spin_restricted() const {return param.get<bool>("spin_restricted");}$/;"	f	class:madness::SCF
is_stealable	src/madness/world/thread.h	/^        bool is_stealable() const {$/;"	f	class:madness::TaskAttributes
is_string	src/examples/compiler/mra-driver.hh	/^    static bool is_string(Type t) {$/;"	f	class:Exp
is_supported	src/apps/chem/molecularbasis.h	/^    bool is_supported(int atomic_number) const {$/;"	f	class:madness::AtomicBasisSet
is_supported	src/apps/hf/molecularbasis.h	/^    bool is_supported(int atomic_number) const {$/;"	f	class:AtomicBasisSet
is_supported	src/apps/polar/molecularbasis.h	/^    bool is_supported(int atomic_number) const {$/;"	f	class:AtomicBasisSet
is_tensor	src/examples/compiler/mra-driver.hh	/^    static bool is_tensor(Type t) {$/;"	f	class:Exp
is_tensor	src/madness/tensor/tensortrain.h	/^        bool is_tensor() const {$/;"	f	class:madness::TensorTrain
is_text_archive	src/madness/world/cereal_archive.h	/^struct is_text_archive<$/;"	s	namespace:madness
is_text_archive	src/madness/world/type_traits.h	/^    struct is_text_archive : std::false_type {};$/;"	s	namespace:madness
is_text_archive	src/madness/world/type_traits.h	/^    struct is_text_archive<archive::TextFstreamInputArchive> : std::true_type {};$/;"	s	namespace:madness
is_text_archive	src/madness/world/type_traits.h	/^    struct is_text_archive<archive::TextFstreamOutputArchive> : std::true_type {};$/;"	s	namespace:madness
is_text_archive_v	src/madness/world/type_traits.h	/^    constexpr const bool is_text_archive_v = is_text_archive<Archive>::value;$/;"	m	namespace:madness
is_third	src/madness/mra/derivative.h	/^        bool is_third;$/;"	m	class:madness::Derivative
is_trivially_serializable	src/madness/world/type_traits.h	/^    struct is_trivially_serializable {$/;"	s	namespace:madness
is_type	src/madness/world/function_traits.h	/^        template<typename> struct is_type : public std::true_type { };$/;"	s	namespace:madness::detail
is_unique	src/apps/chem/PNOTensors.h	/^	bool is_unique(size_t i, size_t j, size_t k) const {$/;"	f	class:__anon48::Tensor_IJ_IK
is_unique	src/apps/chem/PNOTensors.h	/^	bool is_unique(size_t i, size_t j, size_t k) const {$/;"	f	class:__anon48::Tensor_IJ_KJ
is_unknown	src/examples/compiler/mra-driver.hh	/^    static bool is_unknown(Type t) {$/;"	f	class:Exp
is_valid	src/madness/mra/key.h	/^        bool is_valid() const {$/;"	f	class:madness::Key
is_valid_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  bool is_valid_;$/;"	m	class:testing::internal::RE
is_zero_rank	src/madness/tensor/tensortrain.h	/^		bool is_zero_rank() const {return zero_rank;}$/;"	f	class:madness::TensorTrain
iscontiguous	src/madness/tensor/basetensor.h	/^        bool iscontiguous() const {$/;"	f	class:madness::BaseTensor
iscplx	src/madness/tensor/gmres.h	/^            static const bool iscplx = TensorTypeData<T>::iscomplex;$/;"	m	class:madness::VectorSpace
isend	src/madness/world/worldrmi.cc	/^    RMI::RmiTask::RmiTask::isend(const void* buf, size_t nbyte, ProcessID dest, rmi_handlerT func, attrT attr) {$/;"	f	class:madness::RMI::RmiTask::RmiTask
isend	src/madness/world/worldrmi.h	/^        isend(const void* buf, size_t nbyte, ProcessID dest, rmi_handlerT func, unsigned int attr=ATTR_UNORDERED) {$/;"	f	class:madness::RMI
isleaf	src/madness/world/test_tree.cc	/^    bool isleaf;$/;"	m	struct:Node	file:
isleaf	src/madness/world/test_world.cc	/^    bool isleaf;$/;"	m	struct:Node	file:
isnan	src/madness/mra/mraimpl.h	/^    bool isnan(const std::complex<T>& v) {$/;"	f	namespace:std
isnan_x	src/apps/chem/xcfunctional_libxc.cc	/^    inline int isnan_x(double x) {$/;"	f	namespace:__anon50
isnan_x	src/apps/polar/xcfunctional_libxc.cc	/^    inline int isnan_x(double x) {$/;"	f	namespace:__anon46
isotope_number	src/apps/chem/atomutil.h	/^    const int isotope_number;$/;"	m	struct:madness::AtomicData
isotope_number	src/apps/hf/mentity.h	/^    const int isotope_number;$/;"	m	struct:AtomicData
isotope_number	src/apps/polar/atomutil.h	/^    const int isotope_number;$/;"	m	struct:AtomicData
isperiodicsum	src/madness/mra/operator.h	/^        bool isperiodicsum;\/\/\/< If true the operator 1D kernels have been summed over lattice translations$/;"	m	class:madness::SeparatedConvolution
ispin	src/apps/chem/SCFOperators.h	/^    mutable int ispin;$/;"	m	class:madness::XCOperator
ispin	src/apps/chem/xcfunctional.h	/^    const int ispin;$/;"	m	struct:madness::xc_kernel_apply
ispin	src/apps/chem/xcfunctional.h	/^    const int ispin;$/;"	m	struct:madness::xc_potential
ispin	src/apps/polar/xcfunctional.h	/^    const int ispin;$/;"	m	struct:madness::xc_functional
ispin	src/apps/polar/xcfunctional.h	/^    const int ispin;$/;"	m	struct:madness::xc_kernel
ispin	src/apps/polar/xcfunctional.h	/^    const int ispin;$/;"	m	struct:madness::xc_potential
isplit	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    *isplit;$/;"	m	struct:__anon29
isplit	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    *restrict isplit ;$/;"	m	struct:__anon21
ispotential	src/apps/hf/electronicstructureparams.h	/^  bool ispotential;$/;"	m	struct:madness::ElectronicStructureParams
issmall	src/madness/mra/convolution1d.h	/^        bool issmall(Level n, Translation lx) const {$/;"	f	class:madness::GaussianConvolution1D
issmall	src/madness/mra/convolution1d.h	/^        bool issmall(Level n, Translation lx) const {$/;"	f	class:madness::GenericConvolution1D
it	src/madness/world/worlddc.h	/^        internal_iteratorT  it;       \/\/\/< Iterator from local container$/;"	m	class:madness::WorldContainerIterator
itCounts	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    bool itCounts;$/;"	m	struct:elem::SnapshotCtrl
itemfun	src/madness/world/worlddc.h	/^        itemfun(const keyT& key, memfunT memfun) {$/;"	f	class:madness::WorldContainerImpl
itemfun	src/madness/world/worlddc.h	/^        itemfun(const keyT& key, memfunT memfun, const arg1T& arg1) {$/;"	f	class:madness::WorldContainerImpl
itemfun	src/madness/world/worlddc.h	/^        itemfun(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2) {$/;"	f	class:madness::WorldContainerImpl
itemfun	src/madness/world/worlddc.h	/^        itemfun(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3) {$/;"	f	class:madness::WorldContainerImpl
itemfun	src/madness/world/worlddc.h	/^        itemfun(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4) {$/;"	f	class:madness::WorldContainerImpl
itemfun	src/madness/world/worlddc.h	/^        itemfun(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5) {$/;"	f	class:madness::WorldContainerImpl
itemfun	src/madness/world/worlddc.h	/^        itemfun(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5, const arg6T& arg6) {$/;"	f	class:madness::WorldContainerImpl
itemfun	src/madness/world/worlddc.h	/^        itemfun(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3,$/;"	f	class:madness::WorldContainerImpl
items	src/madness/world/worldprofile.cc	/^    volatile std::vector<WorldProfileEntry> WorldProfile::items;$/;"	m	class:madness::WorldProfile	file:
items	src/madness/world/worldprofile.h	/^        volatile static std::vector<WorldProfileEntry> items;$/;"	m	class:madness::WorldProfile
iter	src/apps/chem/distpm.cc	/^    int iter;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
iter	src/apps/polar/distpm.cc	/^    int iter;    $/;"	m	class:SystolicPMOrbitalLocalize	file:
iter_max	src/apps/chem/CCStructures.h	/^    size_t iter_max=10;$/;"	m	struct:madness::CCParameters
iter_max_3D	src/apps/chem/CCStructures.h	/^    size_t iter_max_3D=10;$/;"	m	struct:madness::CCParameters
iter_max_6D	src/apps/chem/CCStructures.h	/^    size_t iter_max_6D=10;$/;"	m	struct:madness::CCParameters
iterate	src/apps/adrian/TDHF.cc	/^void TDHF::iterate(World & world)$/;"	f	class:TDHF
iterate	src/apps/adrian/TDHF2.cc	/^void TDHF::iterate(World & world)$/;"	f	class:TDHF
iterate	src/apps/bryan/TDHF.cc	/^void TDHF::iterate(World & world)$/;"	f	class:TDHF
iterate	src/apps/bryan/TDHF2.cc	/^void TDHF::iterate(World & world)$/;"	f	class:TDHF
iterate	src/apps/chem/mp2.h	/^        real_function_6d iterate(const real_function_6d &f)const{$/;"	f	class:madness::MP2
iterate	src/apps/chem/zcis.cc	/^void Zcis::iterate(std::vector<root>& roots) const {$/;"	f	class:madness::Zcis
iterate	src/apps/chem/znemo.cc	/^void Znemo::iterate() {$/;"	f	class:madness::Znemo
iterate	src/examples/h2.cc	/^void iterate(World& world, real_function_3d& V, real_function_3d& psi, double& eps) {$/;"	f
iterate	src/examples/hatom_1d.cc	/^void iterate(World& world, real_function_1d& V, real_function_1d& psi, double& eps) {$/;"	f
iterate	src/examples/hehf.cc	/^void iterate(World& world, real_function_3d& V, real_function_3d& psi, double& eps) {$/;"	f
iterate	src/examples/helium_mp2.cc	/^void iterate(World& world, const real_function_3d& V, real_function_3d& psi, double& eps) {$/;"	f
iterate	src/examples/helium_mp2.cc	/^void iterate(World& world, real_function_6d& Vpsi, real_function_6d& psi, double& eps) {$/;"	f
iterate	src/examples/nonlinschro.cc	/^void iterate(World& world, real_function_1d& psi) {$/;"	f
iterateOutput	src/apps/hf/dft.cc	/^  void DFT<T,NDIM>::iterateOutput(const std::vector<funcT>& phis,$/;"	f	class:madness::DFT
iterateOutput	src/apps/hf/hartreefock.cc	/^  void HartreeFock<T,NDIM>::iterateOutput(const std::vector<funcT>& phis,$/;"	f	class:madness::HartreeFock
iterate_adc2_pairs	src/apps/chem/CC2.cc	/^  CC2::iterate_adc2_pairs(Pairs<CCPair> &cispd,const CC_vecfunction & ccs) {$/;"	f	class:madness::CC2
iterate_adc2_singles	src/apps/chem/CC2.h	/^    iterate_adc2_singles(Pairs<CCPair> &mp2, CC_vecfunction &singles,Pairs<CCPair> &x){$/;"	f	class:madness::CC2
iterate_cc2_singles	src/apps/chem/CC2.h	/^    iterate_cc2_singles(CC_vecfunction &singles,Pairs<CCPair> &doubles) {$/;"	f	class:madness::CC2
iterate_ccs_singles	src/apps/chem/CC2.h	/^    iterate_ccs_singles(CC_vecfunction &x){$/;"	f	class:madness::CC2
iterate_cis_final_vectors	src/apps/chem/TDHF.cc	/^bool TDHF::iterate_cis_final_vectors(std::vector<CC_vecfunction> &x)const{$/;"	f	class:madness::TDHF
iterate_cis_guess_vectors	src/apps/chem/TDHF.cc	/^bool TDHF::iterate_cis_guess_vectors(std::vector<CC_vecfunction> &x)const{$/;"	f	class:madness::TDHF
iterate_excite	src/examples/h2dynamic.cc	/^double iterate_excite(World& world, NonlinearSolver& solver, real_function_3d& V, real_function_3d& psi, real_function_3d& dpsi, double& eps, real_function_3d& ri) {$/;"	f
iterate_excite	src/examples/newsolver.cc	/^double iterate_excite(World& world, NonlinearSolver& solver, $/;"	f
iterate_excite	src/examples/newsolver_lda.cc	/^double iterate_excite(World& world, NonlinearSolver& solver, $/;"	f
iterate_ground	src/examples/h2dft.cc	/^double iterate_ground(World& world, NonlinearSolver& solver,$/;"	f
iterate_ground	src/examples/h2dynamic.cc	/^double iterate_ground(World& world, NonlinearSolver& solver, real_function_3d& V, real_function_3d& psi, double& eps) {$/;"	f
iterate_ground	src/examples/hedft.cc	/^double iterate_ground(World& world, NonlinearSolver& solver,$/;"	f
iterate_ground	src/examples/newsolver.cc	/^double iterate_ground(World& world, NonlinearSolver& solver, $/;"	f
iterate_ground	src/examples/newsolver_lda.cc	/^double iterate_ground(World& world, NonlinearSolver& solver, $/;"	f
iterate_ground	src/examples/takeshi_response.cc	/^double iterate_ground(World& world, NonlinearSolver& solver, real_function_3d V, real_function_3d psi, double& eps){$/;"	f
iterate_guess	src/apps/adrian/TDDFT.cc	/^void TDHF::iterate_guess(World &world, ResponseFunction &guesses) {$/;"	f	class:TDHF
iterate_guess	src/apps/adrian/TDHF2.cc	/^void TDHF::iterate_guess(World & world,$/;"	f	class:TDHF
iterate_guess	src/apps/bryan/TDHF2.cc	/^void TDHF::iterate_guess(World & world,$/;"	f	class:TDHF
iterate_lrcc2_pairs	src/apps/chem/CC2.cc	/^  CC2::iterate_lrcc2_pairs(const CC_vecfunction & cc2_s,const Pairs<CCPair>& cc2_d,const CC_vecfunction lrcc2_s,Pairs<CCPair> &lrcc2_d) {$/;"	f	class:madness::CC2
iterate_lrcc2_singles	src/apps/chem/CC2.h	/^    iterate_lrcc2_singles(CC_vecfunction &cc2_s, Pairs<CCPair> & cc2_d, CC_vecfunction &lrcc2_s, Pairs<CCPair> lrcc2_d){$/;"	f	class:madness::CC2
iterate_pair	src/apps/chem/CC2.cc	/^  bool CC2::iterate_pair(CCPair &pair,const CC_vecfunction &singles) const {$/;"	f	class:madness::CC2
iterate_pairs	src/apps/chem/PNO.cpp	/^PNOPairs PNO::iterate_pairs(PNOPairs & pairs) const {$/;"	f	class:madness::PNO
iterate_pairs_internal	src/apps/chem/PNO.cpp	/^PNOPairs PNO::iterate_pairs_internal(PNOPairs& pairs, const int maxiter, const double econv) const {$/;"	f	class:madness::PNO
iterate_polarizability	src/apps/adrian/TDDFT.cc	/^void TDHF::iterate_polarizability(World &world, ResponseFunction &dipoles) {$/;"	f	class:TDHF
iterate_polarizability	src/apps/adrian/TDHF2.cc	/^void TDHF::iterate_polarizability(World & world,$/;"	f	class:TDHF
iterate_polarizability	src/apps/bryan/TDHF2.cc	/^void TDHF::iterate_polarizability(World & world,$/;"	f	class:TDHF
iterate_singles	src/apps/chem/CC2.h	/^    iterate_singles(CC_vecfunction &singles,const CC_vecfunction singles2,Pairs<CCPair> &gs_doubles, Pairs<CCPair> &ex_doubles,const CalcType ctype,const std::size_t maxiter) {$/;"	f	class:madness::CC2
iterate_trotter	src/apps/chem/SCF.cc	/^void SCF::iterate_trotter(World &world, Convolution1D<double_complex> *G,$/;"	f	class:madness::SCF
iterate_trotter	src/apps/polar/moldft.cc	/^    void iterate_trotter(World &world,$/;"	f	struct:Calculation
iterate_vectors	src/apps/chem/TDHF.cc	/^bool TDHF::iterate_vectors(std::vector<CC_vecfunction> &x,const std::vector<CC_vecfunction> &y,$/;"	f	class:madness::TDHF
iterate_xy	src/examples/h2dynamic.cc	/^double iterate_xy(World& world, real_function_3d& V, real_function_3d& psi, real_function_3d& dpsi, double& eps, real_function_3d& ri, real_function_3d& x, real_function_3d& y, double omega) {$/;"	f
iterate_xy	src/examples/newsolver.cc	/^double iterate_xy(World& world, solverT& solver, const real_function_3d& V,$/;"	f
iterating_excitations	src/apps/chem/TDHF.h	/^		std::size_t iterating_excitations() const {return get<std::size_t>("iterating_excitations");}$/;"	f	struct:madness::TDHF::Parameters
iteration	src/apps/chem/mp2.h	/^        int iteration;					\/\/\/< current iteration for restart$/;"	m	class:madness::ElectronPair
iteration	src/apps/ii/systolic.h	/^        void iteration(const TaskThreadEnv& env) {$/;"	f	class:madness::SystolicMatrixAlgorithm
iteration	src/madness/tensor/systolic.h	/^        void iteration(const TaskThreadEnv& env) {$/;"	f	class:madness::SystolicMatrixAlgorithm
iteration	src/madness/tensor/systolic.h	/^        void iteration(const int nthread) {$/;"	f	class:madness::SystolicMatrixAlgorithm
iterator	src/examples/compiler/mra-driver.hh	/^    typedef std::vector<Exp*>::iterator iterator;$/;"	t	class:Exp
iterator	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  typedef Element* iterator;$/;"	t	class:testing::internal::NativeArray
iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef ParamIterator<T> iterator;$/;"	t	class:testing::internal::ParamGenerator
iterator	src/madness/mra/convolution1d.h	/^        typedef typename ConcurrentHashMap<hashT, std::shared_ptr< GaussianConvolution1D<Q> > >::iterator iterator;$/;"	t	struct:madness::GaussianConvolution1DCache
iterator	src/madness/world/worlddc.h	/^        typedef WorldContainerIterator<internal_iteratorT> iterator;$/;"	t	class:madness::WorldContainerImpl
iterator	src/madness/world/worlddc.h	/^        typedef typename implT::iterator iterator;$/;"	t	class:madness::WorldContainer
iterator	src/madness/world/worldhashmap.h	/^        typedef Hash_private::HashIterator<hashT> iterator;$/;"	t	class:madness::ConcurrentHashMap
iteratorT	src/madness/mra/lbdeux.h	/^        typedef typename mapT::const_iterator iteratorT;$/;"	t	class:madness::LBDeuxPmap
iteratorT	src/madness/mra/lbdeux.h	/^        typedef typename treeT::iterator iteratorT;$/;"	t	class:madness::LoadBalanceDeux
iteratorT	src/madness/world/worlddc.h	/^        typedef WorldContainerIterator<internal_iteratorT> iteratorT;$/;"	t	class:madness::WorldContainerImpl
iterator_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    typename ContainerType::const_iterator iterator_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
iterator_category	src/madness/world/worlddc.h	/^      typedef typename std::iterator_traits<internal_iteratorT>::iterator_category iterator_category;$/;"	t	class:madness::WorldContainerIterator
iterator_category	src/madness/world/worldhashmap.h	/^            typedef std::forward_iterator_tag iterator_category;$/;"	t	class:madness::Hash_private::HashIterator
itmp	src/apps/chem/gth_pseudopotential.h	/^    int itmp, itmp2;$/;"	m	class:madness::ProjRLMFunctor
itmp	src/apps/polar/gth_pseudopotential.h	/^    int itmp, itmp2;$/;"	m	class:ProjFunctor
itmp	src/apps/polar/gth_pseudopotential.h	/^    int itmp, itmp2;$/;"	m	class:ProjRLMFunctor
itmp2	src/apps/chem/gth_pseudopotential.h	/^    int itmp, itmp2;$/;"	m	class:madness::ProjRLMFunctor
itmp2	src/apps/polar/gth_pseudopotential.h	/^    int itmp, itmp2;$/;"	m	class:ProjFunctor
itmp2	src/apps/polar/gth_pseudopotential.h	/^    int itmp, itmp2;$/;"	m	class:ProjRLMFunctor
itotal	src/madness/mra/function_common_data.h	/^        static const int itotal=-10;$/;"	m	class:madness::Timer
iu	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int              *iu;$/;"	m	struct:__anon22
iu	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    iu;$/;"	m	struct:__anon29
iv	src/apps/moldft/fci/fci.F	/^      integer lenwrk, iwork, iv,/;"	v	program:fci
iwork	src/apps/moldft/fci/fci.F	/^      integer lenwrk, iwork,/;"	v	program:fci
j	src/apps/adrian/TDDFT.h	/^  const int i, j, k;$/;"	m	class:BS_MomentFunctor
j	src/apps/adrian/TDHF.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
j	src/apps/adrian/TDHF2.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
j	src/apps/bryan/TDHF.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
j	src/apps/bryan/TDHF2.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
j	src/apps/chem/CCStructures.h	/^    const size_t j;$/;"	m	class:madness::CCPair
j	src/apps/chem/PNOGuessFunctions.h	/^		int i, j, k;      \/\/\/< cartesian exponents$/;"	m	class:madness::BasisFunctions::CartesianGaussian
j	src/apps/chem/PNOStructures.h	/^	size_t j()const{ return j_;}$/;"	f	struct:madness::ElectronPairIterator
j	src/apps/chem/SCF.h	/^	const int i, j, k;$/;"	m	class:madness::MomentFunctor
j	src/apps/chem/mp2.h	/^        	int j() const {return this->get<std::vector<int> >("pair")[1];}	\/\/\/ convenience function$/;"	f	struct:madness::MP2::Parameters
j	src/apps/chem/mp2.h	/^        int i, j;                       \/\/\/< orbitals i and j$/;"	m	class:madness::ElectronPair
j	src/apps/moldft/fci/timer.f	/^      integer i, j,/;"	v
j	src/apps/polar/moldft.cc	/^    const int i, j, k;$/;"	m	class:MomentFunctor	file:
j	src/madness/mra/tools/twoscalecoeffs.py	/^        j = 0$/;"	v
j	src/madness/tensor/elem.h	/^            int j;$/;"	m	struct:madness::detail::Value
j	src/madness/world/test_tree.cc	/^    ulong i,j,k;$/;"	m	class:KeyChildIterator	file:
j	src/madness/world/test_tree.cc	/^    ulong n, i, j, k;$/;"	m	struct:Key	file:
j	src/madness/world/test_world.cc	/^    ulong n, i, j, k;$/;"	m	struct:Key	file:
j_	src/apps/chem/PNOStructures.h	/^	size_t j_=0;	\/\/\/< current pair index j$/;"	m	struct:madness::ElectronPairIterator
jacobi	src/madness/mra/minmax/y.cc	/^void jacobi(int n, matrix<FLOAT>& a, vector<FLOAT>& e, matrix<FLOAT>& v) {$/;"	f
jacobi	src/madness/mra/minmax/y1.cc	/^void jacobi(int n, matrix<FLOAT>& a, vector<FLOAT>& e, matrix<FLOAT>& v) {$/;"	f
jacobi	src/madness/mra/minmax/y_signed.cc	/^void jacobi(int n, matrix<FLOAT>& a, vector<FLOAT>& e, matrix<FLOAT>& v) {$/;"	f
jacobi	src/madness/mra/minmax/y_varx.cc	/^void jacobi(int n, matrix<FLOAT>& a, vector<FLOAT>& e, matrix<FLOAT>& v) {$/;"	f
jacobi	src/madness/mra/tools/mathutil.py	/^def jacobi(a): $/;"	f
jacobian	src/madness/tensor/kain.cc	/^    virtual Tensor<double> jacobian(const Tensor<double>& x) {$/;"	f	struct:SolverTargetInterface
jacobian	src/madness/tensor/solvers.h	/^        virtual Tensor<double> jacobian(const Tensor<double>& x) {$/;"	f	struct:madness::SolverTargetInterface
jaxis	src/apps/chem/SCF.h	/^	const int iaxis, jaxis;$/;"	m	class:madness::MolecularSecondDerivativeFunctor
jdim	src/apps/ii/systolic.h	/^        const int64_t idim,jdim;        \/\/< Dimension of data on this processor$/;"	m	class:madness::DistributedMatrix
jdim	src/madness/tensor/distributed_matrix.h	/^        int64_t idim,jdim;        \/\/\/< Dimension of data on this processor$/;"	m	class:madness::DistributedMatrixDistribution
jhi	src/apps/ii/systolic.h	/^        const int64_t jlo,jhi;          \/\/< Range of row indices on this processor$/;"	m	class:madness::DistributedMatrix
jhi	src/madness/tensor/distributed_matrix.h	/^        int64_t jlo,jhi;          \/\/\/< Range of row indices on this processor$/;"	m	class:madness::DistributedMatrixDistribution
ji_gQf_ij	src/apps/chem/mp2.h	/^        double ji_gQf_ij;          		\/\/\/< <ji | g12 Q12 f12 | ij>$/;"	m	class:madness::ElectronPair
jlo	src/apps/ii/systolic.h	/^        const int64_t jlo,jhi;          \/\/< Range of row indices on this processor$/;"	m	class:madness::DistributedMatrix
jlo	src/madness/tensor/distributed_matrix.h	/^        int64_t jlo,jhi;          \/\/\/< Range of row indices on this processor$/;"	m	class:madness::DistributedMatrixDistribution
jody	src/madness/world/test_world.cc	/^    double jody(double a, double b, double c) {$/;"	f	class:TTT
join_new	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  void join_new() {$/;"	f	class:testing::internal::linked_ptr_internal
jptr	src/apps/ii/systolic.h	/^        std::vector<T*> iptr, jptr;     \/\/< Indirection for implementing cyclic buffer !! SHOULD BE VOLATILE ?????$/;"	m	class:madness::SystolicMatrixAlgorithm
jptr	src/madness/tensor/systolic.h	/^        std::vector<T*> iptr, jptr;     \/\/\/< Indirection for implementing cyclic buffer !! SHOULD BE VOLATILE ?????$/;"	m	class:madness::SystolicMatrixAlgorithm
jtop	src/madness/mra/vmra1.h	/^        long jtop;$/;"	m	struct:madness::MatrixInnerTask
junk	src/madness/world/threadbind	/^                junk = subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True)$/;"	v
k	src/apps/adrian/GroundParameters.h	/^      int k;                                   \/\/\/< Order of polynomial used in ground state$/;"	m	struct:madness::GroundParameters
k	src/apps/adrian/ResponseParameters.h	/^      int k;                             \/\/\/< Polynomial order to use in calculation$/;"	m	struct:madness::ResponseParameters
k	src/apps/adrian/TDDFT.h	/^  const int i, j, k;$/;"	m	class:BS_MomentFunctor
k	src/apps/adrian/TDHF.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
k	src/apps/adrian/TDHF2.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
k	src/apps/bryan/GroundParameters.h	/^      int k;                                   \/\/\/< Order of polynomial used in ground state$/;"	m	struct:madness::GroundParameters
k	src/apps/bryan/ResponseParameters.h	/^      int k;                             \/\/\/< Polynomial order to use in calculation$/;"	m	struct:madness::ResponseParameters
k	src/apps/bryan/TDHF.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
k	src/apps/bryan/TDHF2.h	/^    const int i, j, k;$/;"	m	class:BS_MomentFunctor
k	src/apps/chem/CalculationParameters.h	/^	int k() const {return get<int>("k");}$/;"	f	struct:madness::CalculationParameters
k	src/apps/chem/PNOGuessFunctions.h	/^		int i, j, k;      \/\/\/< cartesian exponents$/;"	m	class:madness::BasisFunctions::CartesianGaussian
k	src/apps/chem/SCF.h	/^	const int i, j, k;$/;"	m	class:madness::MomentFunctor
k	src/apps/hf/esolver.h	/^  coordT k;$/;"	m	struct:KPoint
k	src/apps/interior_bc/test_problems.h	/^        int k;$/;"	m	class:EmbeddedDirichlet
k	src/apps/nick/extra.h	/^  int k;              \/\/ wavelet order$/;"	m	struct:InputParameters
k	src/apps/nick/tdse1.cc	/^    int k;              \/\/ wavelet order$/;"	m	struct:InputParameters	file:
k	src/apps/nick/wavef.h	/^    double k;$/;"	m	class:Expikr
k	src/apps/polar/moldft.cc	/^    const int i, j, k;$/;"	m	class:MomentFunctor	file:
k	src/apps/tdse/tdse.cc	/^  int k;              \/\/ wavelet order$/;"	m	struct:InputParameters	file:
k	src/apps/tdse/tdse.confused.cc	/^  int k;              \/\/ wavelet order$/;"	m	struct:InputParameters	file:
k	src/apps/tdse/tdse4.cc	/^  int k;              \/\/ wavelet order$/;"	m	struct:InputParameters	file:
k	src/examples/binaryop.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/csqrt.cc	/^static const long k = 5;        \/\/ wavelet order$/;"	v	file:
k	src/examples/dielectric.cc	/^const int k = 6; \/\/ wavelet order$/;"	v
k	src/examples/dielectric_external_field.cc	/^const int k = 6; \/\/ wavelet order$/;"	v
k	src/examples/gygi_soltion.cc	/^const int k= 8;$/;"	v
k	src/examples/h2.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/h2dft.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/h2dynamic.cc	/^static const long k = 6;        \/\/ wavelet order$/;"	v	file:
k	src/examples/hatom_1d.cc	/^static const long k = 6;        \/\/ wavelet order$/;"	v	file:
k	src/examples/he.cc	/^static const long k = 6;        \/\/ wavelet order$/;"	v	file:
k	src/examples/heat.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/heat2.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/hedft.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/hefxc.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/hehf.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/helium_mp2.cc	/^    const long k;$/;"	m	class:YetAnotherWrapperClass	file:
k	src/examples/navstokes_cosines.cc	/^const int k = 10; \/\/ Wavelet order (usually precision + 2)$/;"	v
k	src/examples/newsolver.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/newsolver_lda.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/nonlinschro.cc	/^static const long k = 10;                \/\/ wavelet order$/;"	v	file:
k	src/examples/svpe.cc	/^const int k = 8; \/\/ wavelet order$/;"	v
k	src/examples/takeshi_response.cc	/^static const long k = 8;    \/\/wavelet order$/;"	v	file:
k	src/examples/tdse1d.cc	/^static const long k = 20;        \/\/ wavelet order$/;"	v	file:
k	src/examples/tdse_example.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/examples/testspectralprop.cc	/^static const long k = 12;        \/\/ wavelet order$/;"	v	file:
k	src/madness/mra/convolution1d.h	/^        int k;          \/\/\/< Wavelet order$/;"	m	class:madness::Convolution1D
k	src/madness/mra/derivative.h	/^        const int k         ;  \/\/\/< Number of wavelets of the function$/;"	m	class:madness::DerivativeBase
k	src/madness/mra/funcdefaults.h	/^        static int k;                 \/\/\/< Wavelet order$/;"	m	class:madness::FunctionDefaults
k	src/madness/mra/funcimpl.h	/^        int k; \/\/\/< Wavelet order$/;"	m	class:madness::FunctionImpl
k	src/madness/mra/funcimpl.h	/^        long k;$/;"	m	struct:madness::hartree_leaf_op
k	src/madness/mra/function_common_data.h	/^        int k; \/\/\/< order of the wavelet$/;"	m	class:madness::FunctionCommonData
k	src/madness/mra/function_factory.h	/^    virtual FunctionFactory& k(int k) {$/;"	f	class:madness::FunctionFactory
k	src/madness/mra/function_interface.h	/^		int k;$/;"	m	class:madness::TwoElectronInterface
k	src/madness/mra/mra.h	/^        int k() const {$/;"	f	class:madness::Function
k	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> int FunctionDefaults<NDIM>::k;$/;"	m	class:madness::FunctionDefaults
k	src/madness/mra/operator.h	/^        const int k;$/;"	m	class:madness::SeparatedConvolution
k	src/madness/mra/testdiff1D.cc	/^static const int k = 9 ; \/\/ Wavelet order (usually precision + 2)$/;"	v	file:
k	src/madness/mra/testdiff1Db.cc	/^static const int k = 9 ; \/\/ Wavelet order (usually precision + 2)$/;"	v	file:
k	src/madness/mra/testdiff2D.cc	/^static const int k = 9 ; \/\/ Wavelet order (usually precision + 2)$/;"	v	file:
k	src/madness/mra/testdiff3D.cc	/^static const int k = 9 ; \/\/ Wavelet order (usually precision + 2)$/;"	v	file:
k	src/madness/mra/testgaxpyext.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/madness/mra/testgconv.cc	/^static const int k = 10;$/;"	v	file:
k	src/madness/mra/testinnerext.cc	/^static const long k = 8;        \/\/ wavelet order$/;"	v	file:
k	src/madness/mra/tools/mathutil.py	/^    k = 11$/;"	v
k	src/madness/world/test_dc.cc	/^    int k;$/;"	m	struct:Key	file:
k	src/madness/world/test_dc.cc	/^    int k;$/;"	m	struct:Node	file:
k	src/madness/world/test_hashdc.cc	/^    int k;$/;"	m	struct:Key	file:
k	src/madness/world/test_tree.cc	/^    ulong i,j,k;$/;"	m	class:KeyChildIterator	file:
k	src/madness/world/test_tree.cc	/^    ulong n, i, j, k;$/;"	m	struct:Key	file:
k	src/madness/world/test_world.cc	/^    ulong n, i, j, k;$/;"	m	struct:Key	file:
k0	src/madness/mra/testperiodic.cc	/^double k0 = 1.0;$/;"	v
k1	src/madness/mra/testperiodic.cc	/^double k1 = 1.0;$/;"	v
k2	src/madness/mra/testperiodic.cc	/^double k2 = 0.0;$/;"	v
kAlsoRunDisabledTestsFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kAlsoRunDisabledTestsFlag[] = "also_run_disabled_tests";$/;"	m	namespace:testing::internal
kAlternatePathSeparator	src/madness/external/gtest/src/gtest-filepath.cc	/^const char kAlternatePathSeparator = '\/';$/;"	m	namespace:testing::internal	file:
kAlternatePathSeparatorString	src/madness/external/gtest/src/gtest-filepath.cc	/^const char kAlternatePathSeparatorString[] = "\/";$/;"	m	namespace:testing::internal	file:
kAsIs	src/madness/external/gtest/src/gtest-printers.cc	/^  kAsIs,$/;"	e	enum:testing::internal::CharFormat	file:
kBitCount	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const size_t kBitCount = 8*sizeof(RawType);$/;"	m	class:testing::internal::FloatingPoint
kBreakOnFailureFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kBreakOnFailureFlag[] = "break_on_failure";$/;"	m	namespace:testing::internal
kCatchExceptionsFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kCatchExceptionsFlag[] = "catch_exceptions";$/;"	m	namespace:testing::internal
kColorEncodedHelpMessage	src/madness/external/gtest/src/gtest.cc	/^static const char kColorEncodedHelpMessage[] =$/;"	m	namespace:testing::internal	file:
kColorFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kColorFlag[] = "color";$/;"	m	namespace:testing::internal
kConvertibleToInteger	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  kConvertibleToInteger,  \/\/ a type implicitly convertible to BiggestInt$/;"	e	enum:testing::internal2::TypeKind
kCopy	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  kCopy        \/\/ The NativeArray makes a copy of the native array and$/;"	e	enum:testing::internal::RelationToSource
kCurrentDirectoryString	src/madness/external/gtest/src/gtest-filepath.cc	/^const char kCurrentDirectoryString[] = ".\\\\";$/;"	m	namespace:testing::internal	file:
kCurrentDirectoryString	src/madness/external/gtest/src/gtest-filepath.cc	/^const char kCurrentDirectoryString[] = "\\\\";$/;"	m	namespace:testing::internal	file:
kDeathTestCaseFilter	src/madness/external/gtest/src/gtest.cc	/^static const char kDeathTestCaseFilter[] = "*DeathTest:*DeathTest\/*";$/;"	m	namespace:testing	file:
kDeathTestInternalError	src/madness/external/gtest/src/gtest-death-test.cc	/^static const char kDeathTestInternalError = 'I';$/;"	m	namespace:testing::internal	file:
kDeathTestLived	src/madness/external/gtest/src/gtest-death-test.cc	/^static const char kDeathTestLived = 'L';$/;"	m	namespace:testing::internal	file:
kDeathTestReturned	src/madness/external/gtest/src/gtest-death-test.cc	/^static const char kDeathTestReturned = 'R';$/;"	m	namespace:testing::internal	file:
kDeathTestStyleFlag	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^const char kDeathTestStyleFlag[] = "death_test_style";$/;"	m	namespace:testing::internal
kDeathTestThrew	src/madness/external/gtest/src/gtest-death-test.cc	/^static const char kDeathTestThrew = 'T';$/;"	m	namespace:testing::internal	file:
kDeathTestUseFork	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^const char kDeathTestUseFork[] = "death_test_use_fork";$/;"	m	namespace:testing::internal
kDefaultDeathTestStyle	src/madness/external/gtest/src/gtest-death-test.cc	/^static const char kDefaultDeathTestStyle[] = "fast";$/;"	m	namespace:testing	file:
kDefaultOutputFile	src/madness/external/gtest/src/gtest.cc	/^static const char kDefaultOutputFile[] = "test_detail.xml";$/;"	m	namespace:testing	file:
kDisableTestFilter	src/madness/external/gtest/src/gtest.cc	/^static const char kDisableTestFilter[] = "DISABLED_*:*\/DISABLED_*";$/;"	m	namespace:testing	file:
kElidedFramesMarker	src/madness/external/gtest/src/gtest-internal-inl.h	/^  static const char* const kElidedFramesMarker;$/;"	m	class:testing::internal::OsStackTraceGetter
kElidedFramesMarker	src/madness/external/gtest/src/gtest.cc	/^OsStackTraceGetter::kElidedFramesMarker =$/;"	m	class:testing::internal::OsStackTraceGetter	file:
kExponentBitCount	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;$/;"	m	class:testing::internal::FloatingPoint
kExponentBitMask	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);$/;"	m	class:testing::internal::FloatingPoint
kFatalFailure	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^    kFatalFailure      \/\/ Failed and the test should be terminated.$/;"	e	enum:testing::TestPartResult::Type
kFilterFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kFilterFlag[] = "filter";$/;"	m	namespace:testing::internal
kFractionBitCount	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const size_t kFractionBitCount =$/;"	m	class:testing::internal::FloatingPoint
kFractionBitMask	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const Bits kFractionBitMask =$/;"	m	class:testing::internal::FloatingPoint
kHexEscape	src/madness/external/gtest/src/gtest-printers.cc	/^  kHexEscape,$/;"	e	enum:testing::internal::CharFormat	file:
kInternalRunDeathTestFlag	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^const char kInternalRunDeathTestFlag[] = "internal_run_death_test";$/;"	m	namespace:testing::internal
kInvalidFileAttributes	src/madness/external/gtest/src/gtest-filepath.cc	/^const DWORD kInvalidFileAttributes = 0xffffffff;$/;"	m	namespace:testing::internal	file:
kList	src/apps/nick/extract.py	/^    kList    = unboundFile.readlines()$/;"	v
kListTestsFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kListTestsFlag[] = "list_tests";$/;"	m	namespace:testing::internal
kMAX	src/apps/nick/spawnK.py	/^  kMAX = float(sys.argv[3])$/;"	v
kMIN	src/apps/nick/spawnK.py	/^  kMIN = float(sys.argv[1])$/;"	v
kMaxBiggestInt	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^const BiggestInt kMaxBiggestInt =$/;"	m	namespace:testing::internal
kMaxCodePoint1	src/madness/external/gtest/src/gtest.cc	/^const UInt32 kMaxCodePoint1 = (static_cast<UInt32>(1) <<  7) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint2	src/madness/external/gtest/src/gtest.cc	/^const UInt32 kMaxCodePoint2 = (static_cast<UInt32>(1) << (5 + 6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint3	src/madness/external/gtest/src/gtest.cc	/^const UInt32 kMaxCodePoint3 = (static_cast<UInt32>(1) << (4 + 2*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint4	src/madness/external/gtest/src/gtest.cc	/^const UInt32 kMaxCodePoint4 = (static_cast<UInt32>(1) << (3 + 3*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxRandomSeed	src/madness/external/gtest/src/gtest-internal-inl.h	/^const int kMaxRandomSeed = 99999;$/;"	m	namespace:testing::internal
kMaxRange	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const UInt32 kMaxRange = 1u << 31;$/;"	m	class:testing::internal::Random
kMaxStackTraceDepth	src/madness/external/gtest/include/gtest/gtest.h	/^const int kMaxStackTraceDepth = 100;$/;"	m	namespace:testing
kMaxUlps	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const size_t kMaxUlps = 4;$/;"	m	class:testing::internal::FloatingPoint
kNonFatalFailure	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^    kNonFatalFailure,  \/\/ Failed but the test can continue.$/;"	e	enum:testing::TestPartResult::Type
kOtherType	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  kOtherType              \/\/ anything else$/;"	e	enum:testing::internal2::TypeKind
kOutputFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kOutputFlag[] = "output";$/;"	m	namespace:testing::internal
kPathSeparator	src/madness/external/gtest/src/gtest-filepath.cc	/^const char kPathSeparator = '\\\\';$/;"	m	namespace:testing::internal	file:
kPathSeparatorString	src/madness/external/gtest/src/gtest-filepath.cc	/^const char kPathSeparatorString[] = "\\\\";$/;"	m	namespace:testing::internal	file:
kPrintTimeFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kPrintTimeFlag[] = "print_time";$/;"	m	namespace:testing::internal
kProtobuf	src/madness/external/gtest/include/gtest/gtest-printers.h	/^  kProtobuf,              \/\/ a protobuf type$/;"	e	enum:testing::internal2::TypeKind
kProtobufOneLinerMaxLength	src/madness/external/gtest/include/gtest/gtest-printers.h	/^const size_t kProtobufOneLinerMaxLength = 50;$/;"	m	namespace:testing::internal2
kRandomSeedFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kRandomSeedFlag[] = "random_seed";$/;"	m	namespace:testing::internal
kReference	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  kReference,  \/\/ The NativeArray references the native array.$/;"	e	enum:testing::internal::RelationToSource
kRepeatFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kRepeatFlag[] = "repeat";$/;"	m	namespace:testing::internal
kReservedTestCaseAttributes	src/madness/external/gtest/src/gtest.cc	/^static const char* const kReservedTestCaseAttributes[] = {$/;"	m	namespace:testing	file:
kReservedTestSuiteAttributes	src/madness/external/gtest/src/gtest.cc	/^static const char* const kReservedTestSuiteAttributes[] = {$/;"	m	namespace:testing	file:
kReservedTestSuitesAttributes	src/madness/external/gtest/src/gtest.cc	/^static const char* const kReservedTestSuitesAttributes[] = {$/;"	m	namespace:testing	file:
kShuffleFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kShuffleFlag[] = "shuffle";$/;"	m	namespace:testing::internal
kSignBitMask	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);$/;"	m	class:testing::internal::FloatingPoint
kSpecialEscape	src/madness/external/gtest/src/gtest-printers.cc	/^  kSpecialEscape$/;"	e	enum:testing::internal::CharFormat	file:
kStackTraceDepthFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kStackTraceDepthFlag[] = "stack_trace_depth";$/;"	m	namespace:testing::internal
kStackTraceMarker	src/madness/external/gtest/src/gtest.cc	/^const char kStackTraceMarker[] = "\\nStack trace:\\n";$/;"	m	namespace:testing::internal	file:
kState	src/apps/nick/extract.py	/^        kState = re.match( "^0", line)$/;"	v
kState	src/apps/nick/extract.py	/^    kState  = re.match( "^0", line)$/;"	v
kStdErrFileno	src/madness/external/gtest/src/gtest-port.cc	/^const int kStdErrFileno = 2;$/;"	m	namespace:testing::internal	file:
kStdOutFileno	src/madness/external/gtest/src/gtest-port.cc	/^const int kStdOutFileno = 1;$/;"	m	namespace:testing::internal	file:
kStreamResultToFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kStreamResultToFlag[] = "stream_result_to";$/;"	m	namespace:testing::internal
kSuccess	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^    kSuccess,          \/\/ Succeeded.$/;"	e	enum:testing::TestPartResult::Type
kTestShardIndex	src/madness/external/gtest/src/gtest.cc	/^static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";$/;"	m	namespace:testing	file:
kTestShardStatusFile	src/madness/external/gtest/src/gtest.cc	/^static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";$/;"	m	namespace:testing	file:
kTestTotalShards	src/madness/external/gtest/src/gtest.cc	/^static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";$/;"	m	namespace:testing	file:
kTestTypeIdInGoogleTest	src/madness/external/gtest/src/gtest.cc	/^extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();$/;"	m	namespace:testing::internal	file:
kThrowOnFailureFlag	src/madness/external/gtest/src/gtest-internal-inl.h	/^const char kThrowOnFailureFlag[] = "throw_on_failure";$/;"	m	namespace:testing::internal
kTypeParamLabel	src/madness/external/gtest/src/gtest.cc	/^static const char kTypeParamLabel[] = "TypeParam";$/;"	m	namespace:testing::internal	file:
kUniversalFilter	src/madness/external/gtest/src/gtest.cc	/^static const char kUniversalFilter[] = "*";$/;"	m	namespace:testing	file:
kUnknownFile	src/madness/external/gtest/src/gtest-port.cc	/^const char kUnknownFile[] = "unknown file";$/;"	m	namespace:testing::internal	file:
kValueParamLabel	src/madness/external/gtest/src/gtest.cc	/^static const char kValueParamLabel[] = "GetParam()";$/;"	m	namespace:testing::internal	file:
kVec	src/apps/nick/wavef.h	/^    vector3D kVec;$/;"	m	class:Expikr
kVec	src/madness/tensor/srconf.h	/^		long kVec() const {$/;"	f	class:madness::SRConf
kVec_	src/apps/nick/wavef.h	/^    const vector3D kVec_;$/;"	m	class:PhiK
k_	src/apps/nick/wavef.h	/^    double   k_;$/;"	m	class:ScatteringWF
kain	src/apps/adrian/ResponseParameters.h	/^      bool kain;                         \/\/\/< Flag to use KAIN solver$/;"	m	struct:madness::ResponseParameters
kain	src/apps/bryan/ResponseParameters.h	/^      bool kain;                         \/\/\/< Flag to use KAIN solver$/;"	m	struct:madness::ResponseParameters
kain	src/apps/chem/CCStructures.h	/^    bool kain=true;$/;"	m	struct:madness::CCParameters
kain	src/apps/chem/PNOParameters.h	/^	bool kain()const { return get<bool >("kain");}$/;"	f	class:madness::PNOParameters
kain_param	src/apps/chem/oep.h	/^	std::vector<double> kain_param() const {return get<std::vector<double> >("kain_param");}$/;"	f	class:madness::OEP_Parameters
kain_subspace	src/apps/chem/CCStructures.h	/^    size_t kain_subspace=5;$/;"	m	struct:madness::CCParameters
kain_subspace	src/apps/chem/PNOParameters.h	/^	std::size_t kain_subspace()const { return get<std::size_t >("kain_subspace");}$/;"	f	class:madness::PNOParameters
kain_subspace	src/apps/chem/TDHF.h	/^		std::size_t kain_subspace() const {return get<std::size_t>("kain_subspace");}$/;"	f	struct:madness::TDHF::Parameters
kappa	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Base<F> kappa;$/;"	m	struct:elem::SafeProduct
kate	src/madness/world/test_world.cc	/^    static string kate(World* world, const string& msg, double d) {$/;"	f	class:TTT
kcur	src/madness/mra/twoscale.cc	/^    static int kcur = -1; \/\/ current value of k in for data in _c$/;"	m	namespace:madness	file:
keep_ordering_	src/apps/chem/pointgroupsymmetry.h	/^	bool keep_ordering_=true;$/;"	m	class:madness::projector_irrep
kernel	src/apps/chem/distpm.cc	/^    void kernel(int i, int j, double * MADNESS_RESTRICT Ui, double * MADNESS_RESTRICT Uj) {$/;"	f	class:madness::SystolicFixOrbitalOrders
kernel	src/apps/chem/distpm.cc	/^    void kernel(int i, int j, double * MADNESS_RESTRICT rowi, double * MADNESS_RESTRICT rowj) {$/;"	f	class:madness::SystolicPMOrbitalLocalize
kernel	src/apps/ii/eigen_solver.cc	/^void SystolicEigensolver<T>::kernel(int i, int j, T* rowi, T* rowj) {$/;"	f	class:SystolicEigensolver
kernel	src/apps/ii/systolic.h	/^    void LocalizeBoys<T>::kernel(int i, int j, T rowi[], T rowj[])$/;"	f	class:madness::LocalizeBoys
kernel	src/apps/ii/testsystolic.cc	/^    void kernel(int i, int j, T* rowi, T* rowj) {$/;"	f	class:SystolicEigensolver
kernel	src/apps/polar/distpm.cc	/^    void kernel(int i, int j, double * MADNESS_RESTRICT Ui, double * MADNESS_RESTRICT Uj) {$/;"	f	class:SystolicFixOrbitalOrders
kernel	src/apps/polar/distpm.cc	/^    void kernel(int i, int j, double * MADNESS_RESTRICT rowi, double * MADNESS_RESTRICT rowj) {$/;"	f	class:SystolicPMOrbitalLocalize
kernel	src/madness/tensor/test_systolic.cc	/^    void kernel(int i, int j, T* rowi, T* rowj) {$/;"	f	class:TestSystolicMatrixAlgorithm
ket	src/madness/mra/function_factory.h	/^    ket(const Function<T, NDIM>& f) {$/;"	f	class:madness::CompositeFactory
ket1	src/apps/chem/projector.h	/^    	vecfuncT ket1() const {return ket1_;}$/;"	f	class:madness::StrongOrthogonalityProjector
ket1_	src/apps/chem/projector.h	/^        std::vector<Function<T,NDIM> > ket1_, bra1_, ket2_, bra2_;$/;"	m	class:madness::StrongOrthogonalityProjector
ket2	src/apps/chem/projector.h	/^    	vecfuncT ket2() const {return ket2_;}$/;"	f	class:madness::StrongOrthogonalityProjector
ket2_	src/apps/chem/projector.h	/^        std::vector<Function<T,NDIM> > ket1_, bra1_, ket2_, bra2_;$/;"	m	class:madness::StrongOrthogonalityProjector
key	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* key() const {$/;"	f	class:testing::TestProperty
key	src/madness/mra/funcimpl.h	/^    	const keyT& key() const {return key_;}$/;"	f	class:madness::CoeffTracker
key	src/madness/mra/funcimpl.h	/^            Key<OPDIM> key,d;$/;"	m	struct:madness::FunctionImpl::do_op_args
key	src/madness/mra/key.h	/^        key() const {$/;"	f	class:madness::KeyChildIterator
key	src/madness/world/distributed_id.h	/^        const Key& key() const { return key_; }$/;"	f	class:madness::ProcessKey
key	src/madness/world/distributed_id.h	/^        const Key& key() const { return key_; }$/;"	f	class:madness::TaggedKey
key	src/madness/world/test_tree.cc	/^    const Key& key() {$/;"	f	class:KeyChildIterator
key	src/madness/world/test_world.cc	/^    Key key;$/;"	m	struct:Node	file:
key	src/madness/world/worldref.h	/^            virtual void* key() const { return static_cast<void*>(pointer_.get()); }$/;"	f	class:madness::detail::RemoteCounterImpl
key0	src/madness/mra/function_common_data.h	/^        Key<NDIM> key0; \/\/\/< Key for root node$/;"	m	class:madness::FunctionCommonData
key0	src/madness/mra/mraimpl.h	/^    const typename FunctionImpl<T,NDIM>::keyT& FunctionImpl<T,NDIM>::key0() const {$/;"	f	class:madness::FunctionImpl
keyT	src/madness/mra/derivative.h	/^        typedef Key<NDIM>               keyT     ;$/;"	t	class:madness::Derivative
keyT	src/madness/mra/derivative.h	/^        typedef Key<NDIM>               keyT     ;$/;"	t	class:madness::DerivativeBase
keyT	src/madness/mra/funcimpl.h	/^    	typedef Key<NDIM> keyT;$/;"	t	class:madness::CoeffTracker
keyT	src/madness/mra/funcimpl.h	/^    	typedef Key<NDIM> keyT;$/;"	t	struct:madness::insert_op
keyT	src/madness/mra/funcimpl.h	/^        typedef Key<NDIM> keyT; \/\/\/< Type of key$/;"	t	class:madness::FunctionImpl
keyT	src/madness/mra/function_interface.h	/^	    typedef Key<NDIM> keyT;$/;"	t	class:madness::FunctionFunctorInterface
keyT	src/madness/mra/lbdeux.h	/^        typedef Key<NDIM> keyT;$/;"	t	class:madness::LBDeuxPmap
keyT	src/madness/mra/lbdeux.h	/^        typedef Key<NDIM> keyT;$/;"	t	class:madness::LBNodeDeux
keyT	src/madness/mra/lbdeux.h	/^        typedef Key<NDIM> keyT;$/;"	t	class:madness::LoadBalanceDeux
keyT	src/madness/mra/operator.h	/^        typedef Key<NDIM> keyT;$/;"	t	class:madness::SeparatedConvolution
key_	src/madness/external/gtest/include/gtest/gtest.h	/^  std::string key_;$/;"	m	class:testing::TestProperty
key_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const pthread_key_t key_;$/;"	m	class:testing::internal::ThreadLocal
key_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::string key_;$/;"	m	class:testing::internal::TestPropertyKeyIs
key_	src/madness/mra/funcimpl.h	/^    	keyT key_;$/;"	m	class:madness::CoeffTracker
key_	src/madness/world/distributed_id.h	/^        Key key_; \/\/\/< The base key type.$/;"	m	class:madness::ProcessKey
key_	src/madness/world/distributed_id.h	/^        Key key_; \/\/\/< The base key type.$/;"	m	class:madness::TaggedKey
key_	src/madness/world/worldgop.h	/^            const keyT key_; \/\/\/< The distributed id associated with \\c value_$/;"	m	class:madness::WorldGopInterface::DelayedSend
kinetic_energy_dir_matrix	src/apps/polar/preal.cc	/^real_tensor kinetic_energy_dir_matrix(World & world, int axis, const vector_real_function_3d& v)$/;"	f
kinetic_energy_matrix	src/apps/chem/SCF.cc	/^distmatT SCF::kinetic_energy_matrix(World &world, const vecfuncT &v) const$/;"	f	class:madness::SCF
kinetic_energy_matrix	src/apps/chem/SCF.cc	/^distmatT SCF::kinetic_energy_matrix(World &world, const vecfuncT &vbra, const vecfuncT &vket) const$/;"	f	class:madness::SCF
kinetic_energy_matrix	src/apps/chem/SCFOperators.cc	/^DistributedMatrix<T> Kinetic<T, NDIM>::kinetic_energy_matrix($/;"	f	class:madness::Kinetic
kinetic_energy_matrix	src/apps/hf/esolver.h	/^  ctensorT kinetic_energy_matrix(World& world,$/;"	f
kinetic_energy_matrix	src/apps/moldft/preal.cc	/^    real_tensor kinetic_energy_matrix(World& world, const vector_real_function_3d& v)$/;"	f	class:MiniDFT
kinetic_energy_matrix	src/apps/polar/moldft.cc	/^    tensorT kinetic_energy_matrix(World &world, const vecfuncT &v)$/;"	f	struct:Calculation
kinetic_energy_matrix	src/apps/polar/preal.cc	/^real_tensor kinetic_energy_matrix(World& world, const vector_real_function_3d& v)$/;"	f
kinetic_energy_matrix2	src/apps/hf/esolver.h	/^  ctensorT kinetic_energy_matrix2(World& world,$/;"	f
kinetic_energy_matrix_slow	src/apps/hf/esolver.h	/^  ctensorT kinetic_energy_matrix_slow(World& world,$/;"	f
kinetic_energy_potential	src/apps/chem/nemo.cc	/^real_function_3d Nemo::kinetic_energy_potential(const vecfuncT& nemo) const {$/;"	f	class:madness::Nemo
klij	src/apps/chem/gth_pseudopotential.h	/^    std::array<real_tensor,118> klij;$/;"	m	class:madness::GTHPseudopotential
klij	src/apps/polar/gth_pseudopotential.h	/^    std::array<real_tensor,118> klij;$/;"	m	class:GTHPseudopotential
kmax	src/apps/hf/test_lattice.cc	/^  int kmax;$/;"	m	class:wstFunctor	file:
kmax	src/madness/mra/twoscale.cc	/^    static const int kmax = 60;$/;"	m	namespace:madness	file:
kmax_autoc	src/madness/mra/twoscale.cc	/^    static const int kmax_autoc = 30;$/;"	m	namespace:madness	file:
koffset0	src/apps/hf/electronicstructureparams.h	/^  double koffset0, koffset1, koffset2;$/;"	m	struct:madness::ElectronicStructureParams
koffset1	src/apps/hf/electronicstructureparams.h	/^  double koffset0, koffset1, koffset2;$/;"	m	struct:madness::ElectronicStructureParams
koffset2	src/apps/hf/electronicstructureparams.h	/^  double koffset0, koffset1, koffset2;$/;"	m	struct:madness::ElectronicStructureParams
kpoints	src/apps/hf/electronicstructureparams.h	/^  bool kpoints;$/;"	m	struct:madness::ElectronicStructureParams
kpt	src/apps/hf/electronicstructureapp.h	/^  const KPoint kpt;$/;"	m	class:AtomicBasisFunctor
kread	src/madness/mra/twoscale.cc	/^    static int kread = -1;  \/\/ value of k for data read from disk into _cread$/;"	m	namespace:madness	file:
kronecker	src/apps/adrian/TDDFT.cc	/^static double kronecker(int l, int n) {$/;"	f	file:
kronecker	src/apps/adrian/TDHF2.cc	/^static double kronecker(int l, int n)$/;"	f	file:
kronecker	src/apps/bryan/TDHF2.cc	/^static double kronecker(int l, int n)$/;"	f	file:
kvecT	src/apps/hf/dft.h	/^    typedef Vector<double,NDIM> kvecT;$/;"	t	class:madness::DFT
kvecT	src/apps/hf/eigsolver.h	/^  typedef Vector<double,NDIM> kvecT;$/;"	t	class:madness::EigSolver
kvecT	src/apps/hf/solver.h	/^    typedef Vector<double,NDIM> kvecT;$/;"	t	class:madness::Solver
kwavelet	src/apps/moldft/testcosine.cc	/^static const double kwavelet = 4;$/;"	v	file:
kwavelet	src/apps/moldft/testperiodic.cc	/^static const double kwavelet = 20;$/;"	v	file:
kwavelet	src/apps/polar/preal.cc	/^static double kwavelet = 8;$/;"	v	file:
kwavelet	src/apps/polar/testperiodic.cc	/^static const double kwavelet = 6;$/;"	v	file:
kx	src/apps/hf/eigsolver.h	/^  double kx() {return _kx;}$/;"	f	class:madness::KPoint
kx	src/apps/hf/solver.h	/^      double kx, ky, kz;$/;"	m	class:madness::WSTAtomicBasisFunctor
kx	src/apps/moldft/testcosine.cc	/^static const double kx=0.5*twopi\/L, ky=0.5*twopi\/L, kz=0.5*twopi\/L;$/;"	v	file:
kx	src/apps/moldft/testperiodic.cc	/^    double kx, ky, kz;$/;"	m	class:AtomicBasisFunctor	file:
kx	src/apps/moldft/testperiodic.cc	/^    double kx, ky, kz;$/;"	m	class:KPeriodicBSHOperator	file:
kx	src/apps/polar/testperiodic.cc	/^static const double kx=0.5*twopi\/L, ky=0.5*twopi\/L, kz=0.5*twopi\/L;$/;"	v	file:
ky	src/apps/hf/eigsolver.h	/^  double ky() {return _ky;}$/;"	f	class:madness::KPoint
ky	src/apps/hf/solver.h	/^      double kx, ky, kz;$/;"	m	class:madness::WSTAtomicBasisFunctor
ky	src/apps/moldft/testcosine.cc	/^static const double kx=0.5*twopi\/L, ky=0.5*twopi\/L, kz=0.5*twopi\/L;$/;"	v	file:
ky	src/apps/moldft/testperiodic.cc	/^    double kx, ky, kz;$/;"	m	class:AtomicBasisFunctor	file:
ky	src/apps/moldft/testperiodic.cc	/^    double kx, ky, kz;$/;"	m	class:KPeriodicBSHOperator	file:
ky	src/apps/polar/testperiodic.cc	/^static const double kx=0.5*twopi\/L, ky=0.5*twopi\/L, kz=0.5*twopi\/L;$/;"	v	file:
kz	src/apps/hf/eigsolver.h	/^  double kz() {return _kz;}$/;"	f	class:madness::KPoint
kz	src/apps/hf/solver.h	/^      double kx, ky, kz;$/;"	m	class:madness::WSTAtomicBasisFunctor
kz	src/apps/moldft/testcosine.cc	/^static const double kx=0.5*twopi\/L, ky=0.5*twopi\/L, kz=0.5*twopi\/L;$/;"	v	file:
kz	src/apps/moldft/testperiodic.cc	/^    double kx, ky, kz;$/;"	m	class:AtomicBasisFunctor	file:
kz	src/apps/moldft/testperiodic.cc	/^    double kx, ky, kz;$/;"	m	class:KPeriodicBSHOperator	file:
kz	src/apps/polar/testperiodic.cc	/^static const double kx=0.5*twopi\/L, ky=0.5*twopi\/L, kz=0.5*twopi\/L;$/;"	v	file:
l	src/apps/chem/PNOGuessFunctions.h	/^		int l, m;         \/\/\/< (real) solid harmonic quanta$/;"	m	class:madness::BasisFunctions::SolidHarmonicGaussian
l	src/apps/chem/corepotential.h	/^    std::vector<int> l; \/\/\/< Angular momentum = 0, 1, 2, ...$/;"	m	struct:madness::CorePotential
l	src/apps/chem/gth_pseudopotential.h	/^    int l, m, i; \/\/ i = 1,2,3 and m = 0,1,2,3 and l = 0,1,2,3 (angular momentum)$/;"	m	class:madness::ProjRLMFunctor
l	src/apps/chem/test_SCFOperators.cc	/^    int l=0;				\/\/\/< magnetic quantum number (if T=double_complex)$/;"	m	class:GaussianGuess	file:
l	src/apps/chem/znemo.h	/^		double l=0.0;		\/\/\/< radius Eq. (29)$/;"	m	struct:madness::Znemo::landau_wave_function
l	src/apps/nick/extract.py	/^            l  =  Yl.group(1)$/;"	v
l	src/apps/nick/wavef.h	/^    int l;$/;"	m	class:BoundWF
l	src/apps/polar/corepotential.h	/^    std::vector<int> l; \/\/\/< Angular momentum = 0, 1, 2, ...$/;"	m	struct:CorePotential
l	src/apps/polar/gth_pseudopotential.h	/^    int l, i; \/\/ i = 1,2,3 and l = 0,1,2,3 (angular momentum)$/;"	m	class:ProjFunctor
l	src/apps/polar/gth_pseudopotential.h	/^    int l, m, i; \/\/ i = 1,2,3 and m = 0,1,2,3 and l = 0,1,2,3 (angular momentum)$/;"	m	class:ProjRLMFunctor
l	src/apps/polar/gth_pseudopotential.h	/^    int l, m;$/;"	m	class:RlmFunctor
l	src/apps/polar/gth_pseudopotential.h	/^    int l, m;$/;"	m	class:YlmFunctor
l	src/madness/mra/key.h	/^        Vector<Translation, NDIM> l;$/;"	m	class:madness::Key
l	src/madness/world/test_ar.cc	/^  int64_t l;$/;"	m	struct:D	file:
l	src/madness/world/test_ar.cc	/^  int64_t l;$/;"	m	struct:F	file:
l_	src/apps/nick/wavef.h	/^    const int l_;$/;"	m	class:Phikl
l_	src/apps/nick/wavef.h	/^    int l_;$/;"	m	class:Yl0
lambda	src/examples/vnucso.cc	/^static double lambda = lambda_correct;$/;"	v	file:
lambda	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double lambda;$/;"	m	struct:__anon28
lambda_correct	src/examples/vnucso.cc	/^const double lambda_correct = 0.0026608048208104861\/reduced; \/\/ SO potential parameter$/;"	v
landau_wave_function	src/apps/chem/znemo.h	/^		landau_wave_function(const int m, const double B,$/;"	f	struct:madness::Znemo::landau_wave_function
landau_wave_function	src/apps/chem/znemo.h	/^	struct landau_wave_function {$/;"	s	class:madness::Znemo
lap	src/examples/navstokes_cosines.cc	/^inline functionT lap(const functionT& uint) {$/;"	f
lapack	src/madness/external/elemental/include/elemental/core/imports/lapack.hpp	/^namespace lapack {$/;"	n	namespace:elem
lapack	src/madness/external/elemental/src/core/imports/lapack.cpp	/^namespace lapack {$/;"	n	namespace:elem	file:
lapack_complex_double	src/madness/tensor/lapacke_types.h	50;"	d
lapack_complex_double	src/madness/tensor/lapacke_types.h	62;"	d
lapack_complex_double	src/madness/tensor/lapacke_types.h	71;"	d
lapack_complex_float	src/madness/tensor/lapacke_types.h	45;"	d
lapack_complex_float	src/madness/tensor/lapacke_types.h	59;"	d
lapack_complex_float	src/madness/tensor/lapacke_types.h	68;"	d
lapacke	src/madness/tensor/lapacke_types.h	/^namespace lapacke {$/;"	n	namespace:madness
laplacian	src/apps/hf/test_lattice.cc	/^Q laplacian(const Q& f, bool periodic = false)$/;"	f
large	src/madness/mra/funcimpl.h	/^        AtomicInt large;$/;"	m	class:madness::FunctionImpl
larger_subspace	src/apps/adrian/ResponseParameters.h	/^      int larger_subspace;               \/\/\/< Number of iterations to diagonalize in a subspace consisting of old and new vectors$/;"	m	struct:madness::ResponseParameters
larger_subspace	src/apps/bryan/ResponseParameters.h	/^      int larger_subspace;               \/\/\/< Number of iterations to diagonalize in a subspace consisting of old and new vectors$/;"	m	struct:madness::ResponseParameters
laser	src/apps/nick/tdse1.cc	/^double laser(double t) {$/;"	f
laser	src/apps/tdse/tdse.cc	/^double laser(double t) {$/;"	f
laser	src/apps/tdse/tdse.confused.cc	/^double laser(double t) {$/;"	f
laser	src/apps/tdse/tdse4.cc	/^double laser(double t) {$/;"	f
laser	src/examples/tdse_example.cc	/^double laser(double t) {$/;"	f
lastChild	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode*		lastChild;$/;"	m	class:TiXmlNode
lastPartialTime_	src/madness/external/elemental/include/elemental/core/Timer/decl.hpp	/^    double totalTime_=0, lastPartialTime_=0;$/;"	m	class:elem::Timer
lastStep	src/apps/nick/extract.py	/^    lastStep = step$/;"	v
lastStep	src/apps/nick/extract.py	/^lastStep  = 0$/;"	v
lastTime	src/apps/nick/extract.py	/^    lastTime = wTime$/;"	v
lastTime	src/apps/nick/extract.py	/^lastTime  = 0$/;"	v
lastTime_	src/madness/external/elemental/include/elemental/core/Timer/decl.hpp	/^    high_resolution_clock::time_point lastTime_;$/;"	m	class:elem::Timer
lastTime_	src/madness/external/elemental/include/elemental/core/Timer/decl.hpp	/^    steady_clock::time_point lastTime_;$/;"	m	class:elem::Timer
last_death_test_case_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  int last_death_test_case_;$/;"	m	class:testing::internal::UnitTestImpl
last_death_test_message_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  static std::string last_death_test_message_;$/;"	m	class:testing::internal::DeathTest
last_death_test_message_	src/madness/external/gtest/src/gtest-death-test.cc	/^std::string DeathTest::last_death_test_message_;$/;"	m	class:testing::internal::DeathTest	file:
last_type	src/madness/world/meta.h	/^struct last_type {};$/;"	s	namespace:madness::meta
last_type	src/madness/world/meta.h	/^struct last_type<T0, T1, Ts...> : last_type<T1, Ts...> {};$/;"	s	namespace:madness::meta
last_type	src/madness/world/meta.h	/^struct last_type<T0> {$/;"	s	namespace:madness::meta
lastx	src/apps/moldft/mcpfit.cc	/^    mutable tensorT lastx;$/;"	m	struct:CoreFittingTarget	file:
lastx	src/apps/polar/mcpfit.cc	/^    mutable tensorT lastx;$/;"	m	struct:CoreFittingTarget	file:
lazy_sync	src/madness/world/worldgop.h	/^        void lazy_sync(const keyT& key, const opT& op) const {$/;"	f	class:madness::WorldGopInterface
lazy_sync	src/madness/world/worldgop.h	/^        void lazy_sync(const keyT& key, const opT& op, const Group& group) const {$/;"	f	class:madness::WorldGopInterface
lazy_sync_children	src/madness/world/worldgop.h	/^        void lazy_sync_children(const ProcessID child0, const ProcessID child1,$/;"	f	class:madness::WorldGopInterface
lazy_sync_internal	src/madness/world/worldgop.h	/^        void lazy_sync_internal(const ProcessID parent, const ProcessID child0,$/;"	f	class:madness::WorldGopInterface
lazy_sync_parent	src/madness/world/worldgop.h	/^        void lazy_sync_parent(const ProcessID parent, const keyT& key,$/;"	f	class:madness::WorldGopInterface
lb	src/madness/mra/lbdeux.h	/^            LoadBalanceDeux* lb;$/;"	m	struct:madness::LoadBalanceDeux::add_op
lbcost	src/apps/adrian/TDDFT.cc	/^  lbcost(double leaf_value = 1.0, double parent_value = 0.0)$/;"	f	struct:lbcost
lbcost	src/apps/adrian/TDDFT.cc	/^struct lbcost {$/;"	s	file:
lbcost	src/apps/adrian/TDHF.cc	/^    lbcost(double leaf_value=1.0, double parent_value=0.0) : leaf_value(leaf_value), parent_value(parent_value) {}$/;"	f	struct:lbcost
lbcost	src/apps/adrian/TDHF.cc	/^struct lbcost {$/;"	s	file:
lbcost	src/apps/adrian/TDHF2.cc	/^    lbcost(double leaf_value=1.0, double parent_value=0.0) : leaf_value(leaf_value), parent_value(parent_value) {}$/;"	f	struct:lbcost
lbcost	src/apps/adrian/TDHF2.cc	/^struct lbcost {$/;"	s	file:
lbcost	src/apps/bryan/TDHF.cc	/^    lbcost(double leaf_value=1.0, double parent_value=0.0) : leaf_value(leaf_value), parent_value(parent_value) {}$/;"	f	struct:lbcost
lbcost	src/apps/bryan/TDHF.cc	/^struct lbcost {$/;"	s	file:
lbcost	src/apps/bryan/TDHF2.cc	/^    lbcost(double leaf_value=1.0, double parent_value=0.0) : leaf_value(leaf_value), parent_value(parent_value) {}$/;"	f	struct:lbcost
lbcost	src/apps/bryan/TDHF2.cc	/^struct lbcost {$/;"	s	file:
lbcost	src/apps/chem/SCF.h	/^	lbcost(double leaf_value=1.0, double parent_value=0.0) : leaf_value(leaf_value), parent_value(parent_value) {}$/;"	f	struct:madness::lbcost
lbcost	src/apps/chem/SCF.h	/^struct lbcost {$/;"	s	namespace:madness
lbcost	src/apps/polar/moldft.cc	/^    lbcost(double leaf_value = 1.0, double parent_value = 0.0) : leaf_value(leaf_value), parent_value(parent_value) {}$/;"	f	struct:lbcost
lbcost	src/apps/polar/moldft.cc	/^struct lbcost$/;"	s	file:
lbcost	src/apps/tdse/tdse.cc	/^    lbcost(double leaf_value=1.0, double parent_value=1.0) : leaf_value(leaf_value), parent_value(parent_value) {}$/;"	f	struct:lbcost
lbcost	src/apps/tdse/tdse.cc	/^struct lbcost {$/;"	s	file:
lbcost	src/apps/tdse/tdse.confused.cc	/^    lbcost(double leaf_value=1.0, double parent_value=1.0) : leaf_value(leaf_value), parent_value(parent_value) {}$/;"	f	struct:lbcost
lbcost	src/apps/tdse/tdse.confused.cc	/^struct lbcost {$/;"	s	file:
lbcost	src/apps/tdse/tdse4.cc	/^    lbcost(double leaf_value=1.0, double parent_value=1.0) : leaf_value(leaf_value), parent_value(parent_value) {}$/;"	f	struct:lbcost
lbcost	src/apps/tdse/tdse4.cc	/^struct lbcost {$/;"	s	file:
lbcost	src/examples/tdse_example.cc	/^double lbcost(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) {$/;"	f
lbcost	src/madness/mra/mraplot.cc	/^struct lbcost {$/;"	s	file:
lbcost	src/madness/mra/testsuite.cc	/^struct lbcost {$/;"	s	file:
ldaeop	src/apps/hf/libxc.h	/^inline static void ldaeop(const Key<3>& key, Tensor<T>& t) {$/;"	f
ldaop	src/apps/hf/libxc.h	/^inline static void ldaop(const Key<3>& key, Tensor<T>& t) {$/;"	f
ldexp	src/apps/nick/mpreal.h	/^inline const mpreal ldexp(const mpreal& v, mp_exp_t exp)$/;"	f	namespace:mpfr
ldim_	src/madness/external/elemental/include/elemental/core/Matrix.hpp	/^    Int height_, width_, ldim_;$/;"	m	class:elem::Matrix
ldl	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Inertia.hpp	/^namespace ldl {$/;"	n	namespace:elem
ldl	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/MultiplyAfter.hpp	/^namespace ldl {$/;"	n	namespace:elem
ldl	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^namespace ldl {$/;"	n	namespace:elem
ldl	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/SolveAfter.hpp	/^namespace ldl {$/;"	n	namespace:elem
ldl	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Var3.hpp	/^namespace ldl {$/;"	n	namespace:elem
ldz	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int              ldz;$/;"	m	struct:__anon23
leaf_op	src/madness/mra/funcimpl.h	/^            leaf_opT leaf_op;   \/\/\/< determine if a given node will be a leaf node$/;"	m	struct:madness::FunctionImpl::hartree_op
leaf_op	src/madness/mra/funcimpl.h	/^          opT leaf_op;    	    \/\/\/< deciding if a given FunctionNode will be a leaf node$/;"	m	struct:madness::FunctionImpl::Vphi_op_NS
leaf_refine	src/madness/mra/funcimpl.h	/^            const bool leaf_refine;$/;"	m	struct:madness::FunctionImpl::do_inner_ext_local_ffi
leaf_value	src/apps/adrian/TDDFT.cc	/^  double leaf_value;$/;"	m	struct:lbcost	file:
leaf_value	src/apps/adrian/TDHF.cc	/^    double leaf_value;$/;"	m	struct:lbcost	file:
leaf_value	src/apps/adrian/TDHF2.cc	/^    double leaf_value;$/;"	m	struct:lbcost	file:
leaf_value	src/apps/bryan/TDHF.cc	/^    double leaf_value;$/;"	m	struct:lbcost	file:
leaf_value	src/apps/bryan/TDHF2.cc	/^    double leaf_value;$/;"	m	struct:lbcost	file:
leaf_value	src/apps/chem/SCF.h	/^	double leaf_value;$/;"	m	struct:madness::lbcost
leaf_value	src/apps/chem/mp2.h	/^        double leaf_value;$/;"	m	struct:madness::LBCost
leaf_value	src/apps/interior_bc/test_problems.h	/^    double leaf_value;$/;"	m	struct:DirichletLBCost
leaf_value	src/apps/nick/projPsi.cc	/^    double leaf_value;$/;"	m	struct:LBCost	file:
leaf_value	src/apps/polar/moldft.cc	/^    double leaf_value;$/;"	m	struct:lbcost	file:
leaf_value	src/apps/tdse/tdse.cc	/^    double leaf_value;$/;"	m	struct:lbcost	file:
leaf_value	src/apps/tdse/tdse.confused.cc	/^    double leaf_value;$/;"	m	struct:lbcost	file:
leaf_value	src/apps/tdse/tdse4.cc	/^    double leaf_value;$/;"	m	struct:lbcost	file:
leaf_value	src/examples/dataloadbal.cc	/^    double leaf_value;$/;"	m	struct:LBCost	file:
leaf_value	src/examples/he.cc	/^    double leaf_value;$/;"	m	struct:LBCost	file:
leaf_value	src/examples/helium_mp2.cc	/^    double leaf_value;$/;"	m	struct:LBCost	file:
leaves_only	src/madness/mra/funcimpl.h	/^            bool leaves_only;$/;"	m	struct:madness::FunctionImpl::do_inner_local
left	src/madness/mra/mra.h	/^    gaxpy_oop(TENSOR_RESULT_TYPE(L,R) alpha, const Function<L,NDIM>& left,$/;"	m	namespace:madness
left	src/madness/mra/testsuite.cc	/^    functorL left;$/;"	m	class:BinaryOp	file:
left_dirichlet	src/madness/mra/testdiff1D.cc	/^static double left_dirichlet(const coordT &pt) {$/;"	f	file:
left_dirichlet	src/madness/mra/testdiff1Db.cc	/^static double left_dirichlet(const coordT &pt) {$/;"	f	file:
left_neumann	src/madness/mra/testdiff1D.cc	/^static double left_neumann  (const coordT &pt) {$/;"	f	file:
left_neumann	src/madness/mra/testdiff1Db.cc	/^static double left_neumann  (const coordT &pt) {$/;"	f	file:
left_pid	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        left_pid;$/;"	m	struct:__anon16
left_r0	src/madness/mra/derivative.h	/^        Tensor<double> left_rm, left_r0  ; \/\/\/< Blocks of the derivative for the left boundary$/;"	m	class:madness::Derivative
left_r0t	src/madness/mra/derivative.h	/^        Tensor<double> left_rmt, left_r0t  ; \/\/\/< Blocks of the derivative for the left boundary$/;"	m	class:madness::Derivative
left_rm	src/madness/mra/derivative.h	/^        Tensor<double> left_rm, left_r0  ; \/\/\/< Blocks of the derivative for the left boundary$/;"	m	class:madness::Derivative
left_rmt	src/madness/mra/derivative.h	/^        Tensor<double> left_rmt, left_r0t  ; \/\/\/< Blocks of the derivative for the left boundary$/;"	m	class:madness::Derivative
legacyTime	src/apps/nick/extract.py	/^legacyTime = 0$/;"	v
legendre_polynomials	src/madness/mra/legendre.cc	/^    void legendre_polynomials(double x, long order, double *p) {$/;"	f	namespace:madness
legendre_scaling_functions	src/madness/mra/legendre.cc	/^    void legendre_scaling_functions(double x, long k, double *p) {$/;"	f	namespace:madness
len	src/madness/world/worldrmi.h	/^        size_t len;$/;"	m	struct:madness::qmsg
length	src/apps/moldft/fci/crayio.c	/^  off_t length;              \/* file length in bytes *\/$/;"	m	struct:w_file	file:
length	src/examples/hedft.cc	/^static const double length = 50.0; \/\/ box size$/;"	v	file:
length	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-initializer_list.cxx	/^int seq::length() const$/;"	f	class:seq
length	src/madness/external/tinyxml/tinystr.h	/^	size_type length () const { return rep_->size; }$/;"	f	class:TiXmlString
lengths	src/madness/mra/sdf_shape_2D.h	/^        const coord_2d lengths;  \/\/\/< Half the length of each side$/;"	m	class:madness::SDFRectangle
lengths	src/madness/mra/sdf_shape_3D.h	/^        const coord_3d lengths;  \/\/\/< Half the length of each side of the box$/;"	m	class:madness::SDFBox
lenwrk	src/apps/moldft/fci/fci.F	/^      integer lenwrk,/;"	v	program:fci
level	src/madness/mra/key.h	/^        level() const {$/;"	f	class:madness::Key
lgamma	src/apps/nick/mpreal.h	/^inline const mpreal lgamma (const mpreal& v, int *signp, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
lgap	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  double     lgap;$/;"	m	struct:__anon15
lgap	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  double     lgap;$/;"	m	struct:__anon16
li2	src/apps/nick/mpreal.h	/^inline const mpreal li2(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
limit	src/madness/mra/funcimpl.h	/^            double limit;$/;"	m	struct:madness::FunctionImpl::do_convert_to_color
lindep_	src/apps/chem/pointgroupsymmetry.h	/^	double lindep_=1.e-3;$/;"	m	class:madness::projector_irrep
line	src/apps/moldft/moldx.py	/^                line = f.readline().split()$/;"	v
line	src/apps/moldft/moldx.py	/^        line = f.readline().split()$/;"	v
line	src/apps/moldft/nwtoxml.py	/^                line = sys.stdin.readline().split()$/;"	v
line	src/apps/moldft/nwtoxml.py	/^        line = sys.stdin.readline().split()$/;"	v
line	src/apps/moldft/nwtoxml.py	/^    line = sys.stdin.readline()$/;"	v
line	src/apps/nick/extract.py	/^        line = lines.pop(0)$/;"	v
line	src/apps/nick/parse.py	/^                line = lines.pop(0)$/;"	v
line	src/apps/polar/moldx.py	/^                line = f.readline().split()$/;"	v
line	src/apps/polar/moldx.py	/^        line = f.readline().split()$/;"	v
line	src/apps/polar/nwtoxml.py	/^                line = sys.stdin.readline().split()$/;"	v
line	src/apps/polar/nwtoxml.py	/^        line = sys.stdin.readline().split()$/;"	v
line	src/apps/polar/nwtoxml.py	/^    line = sys.stdin.readline()$/;"	v
line	src/madness/external/gtest/include/gtest/gtest.h	/^    int const line;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
line	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
line	src/madness/external/gtest/src/gtest-internal-inl.h	/^  int line;$/;"	m	struct:testing::internal::TraceInfo
line	src/madness/tensor/tensorexcept.h	/^        int line;$/;"	m	class:madness::TensorException
line	src/madness/world/madness_exception.h	/^        const int line; \/\/\/< Line number where the exception occurred.$/;"	m	class:madness::MadnessException
line2	src/madness/mra/funcplot.h	/^        static trajectory line2(const coordT start, const coordT end, const long npt) {$/;"	f	struct:madness::trajectory
lineBreak	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter
line_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  int line_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
line_	src/madness/external/gtest/src/gtest-death-test.cc	/^  const int line_;$/;"	m	class:testing::internal::ExecDeathTest	file:
line_	src/madness/external/gtest/src/gtest-death-test.cc	/^  const int line_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
line_internal	src/madness/mra/funcplot.h	/^        static Vector<double, NDIM> line_internal(const coordT& lo, const coordT& hi, double radius, coord_3d el2, long npt, long ipt) {$/;"	f	struct:madness::trajectory
line_number	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  int line_number() const { return line_number_; }$/;"	f	class:testing::TestPartResult
line_number_	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  int line_number_;$/;"	m	class:testing::TestPartResult
line_plot	src/apps/nick/lineplot.cc	/^void line_plot(World& world, int step, complex_functionT& psi) {$/;"	f
line_plot	src/apps/nick/tdse1.cc	/^void line_plot(World& world, int step, complex_functionT& psi) {$/;"	f
line_plot	src/apps/tdse/tdse.cc	/^void line_plot(World& world, int step, complex_functionT& psi) {$/;"	f
line_plot	src/apps/tdse/tdse.confused.cc	/^void line_plot(World& world, int step, complex_functionT& psi) {$/;"	f
line_search	src/apps/chem/molopt.h	/^        double line_search(Molecule& molecule, targetT& target, const Tensor<double>& dx,$/;"	f	class:madness::MolOpt
line_search	src/madness/tensor/kain.cc	/^    double line_search(double a1, double f0, double dxgrad, const Tensor<double>& x, const Tensor<double>& dx) {$/;"	f	class:QuasiNewton	file:
line_search	src/madness/tensor/solvers.cc	/^    double QuasiNewton::line_search(double a1, double f0, double dxgrad,$/;"	f	class:madness::QuasiNewton
line_xyz	src/madness/mra/funcplot.h	/^        static trajectory line_xyz(const int xyz, const long npt) {$/;"	f	struct:madness::trajectory
lineardeps	src/apps/adrian/ESInterface.h	/^  const unsigned int &lineardeps; \/\/\/< Publically accessible number of linear dependencies$/;"	m	class:slymer::ES_Interface
lineardeps	src/apps/bryan/ESInterface.h	/^  const unsigned int &lineardeps; \/\/\/< Publically accessible number of linear dependencies$/;"	m	class:slymer::ES_Interface
linearize	src/examples/smooth.h	/^	Function<T,NDIM> linearize(const Function<T,NDIM> &ln_rho)const{$/;"	f	class:smooth
lines	src/apps/nick/extract.py	/^            lines = f.readlines()$/;"	v
lines	src/apps/nick/extract.py	/^        lines = f.readlines()$/;"	v
lines	src/apps/nick/extract.py	/^lines = f.readlines()$/;"	v
lines	src/apps/nick/parse.py	/^        lines = f.readlines()$/;"	v
linesearch	src/madness/mra/tools/mathutil.py	/^def linesearch(func, x0, s, lsgrad, eps, prnt=1): $/;"	f
link_	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  linked_ptr_internal link_;$/;"	m	class:testing::internal::linked_ptr
linked_list	src/madness/world/test_ar.cc	/^    linked_list(int value = 0) : value(value), next(0) {};$/;"	f	class:linked_list
linked_list	src/madness/world/test_ar.cc	/^class linked_list {$/;"	c	file:
linked_ptr	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  explicit linked_ptr(T* ptr = NULL) { capture(ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  linked_ptr(linked_ptr const& ptr) {  \/\/ NOLINT$/;"	f	class:testing::internal::linked_ptr
linked_ptr	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  template <typename U> linked_ptr(linked_ptr<U> const& ptr) { copy(&ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^class linked_ptr {$/;"	c	namespace:testing::internal
linked_ptr_internal	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^class linked_ptr_internal {$/;"	c	namespace:testing::internal
linux_cputime	src/apps/moldft/fci/timer.f	/^      double precision linux_cputime,/;"	v
linux_cputime_	src/apps/moldft/fci/linux_cputime.c	/^double linux_cputime_(void)$/;"	f
list_tests_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool list_tests_;$/;"	m	class:testing::internal::GTestFlagSaver
listeners	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TestEventListeners* listeners() { return &listeners_; }$/;"	f	class:testing::internal::UnitTestImpl
listeners	src/madness/external/gtest/src/gtest.cc	/^TestEventListeners& UnitTest::listeners() {$/;"	f	class:testing::UnitTest
listeners_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TestEventListeners listeners_;$/;"	m	class:testing::internal::UnitTestImpl
listeners_	src/madness/external/gtest/src/gtest.cc	/^  std::vector<TestEventListener*> listeners_;$/;"	m	class:testing::internal::TestEventRepeater	file:
lmax	src/apps/chem/PNOGuessFunctions.h	/^	const size_t lmax;$/;"	m	class:madness::BasisFunctions
lngamma	src/apps/nick/mpreal.h	/^inline const mpreal lngamma (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
lo	src/apps/chem/CCStructures.h	/^		  double lo=1.e-6;$/;"	m	struct:madness::CCConvolutionOperator::Parameters
lo	src/apps/chem/CCStructures.h	/^    double lo = 1.e-7;$/;"	m	struct:madness::CCParameters
lo	src/apps/chem/CalculationParameters.h	/^	double lo() const {return get<double>("lo");}$/;"	f	struct:madness::CalculationParameters
lo	src/apps/chem/TDHF.h	/^		double lo() const {return get<double>("lo");}$/;"	f	struct:madness::TDHF::Parameters
lo	src/apps/chem/electronic_correlation_factor.h	/^    double lo;          \/\/\/< smallest length scale to be resolved$/;"	m	class:madness::CorrelationFactor
lo	src/apps/chem/electronic_correlation_factor.h	/^    double lo;          \/\/\/< smallest length scale to be resolved$/;"	m	class:madness::CorrelationFactor2
lo	src/apps/chem/mp2.cc	/^static const double lo =  1.e-6;$/;"	v	file:
lo	src/apps/hf/electronicstructureparams.h	/^  double lo;$/;"	m	struct:madness::ElectronicStructureParams
lo	src/apps/moldft/mcpfit.cc	/^    double lo;      \/\/\/< smallest length scale we need to resolve$/;"	m	struct:CalculationParameters	file:
lo	src/apps/nick/interp.h	/^    double lo;            \/\/< Interpolation is in range [lo,hi]$/;"	m	class:CubicInterpolationTable
lo	src/apps/polar/mcpfit.cc	/^    double lo;      \/\/\/< smallest length scale we need to resolve$/;"	m	struct:CalculationParameters	file:
lo	src/apps/polar/moldft.cc	/^    double lo;                         \/\/\/< Smallest length scale we need to resolve$/;"	m	struct:CalculationParameters	file:
lo	src/examples/helium_exact.cc	/^static double lo = 1.e-8;$/;"	v	file:
lo	src/madness/misc/interpolation_1d.h	/^    double lo;            \/\/\/< Interpolation is in range [lo,hi]$/;"	m	class:CubicInterpolationTable
lo	src/madness/mra/funcplot.h	/^    	double lo;$/;"	m	struct:madness::trajectory
lo	src/madness/mra/function_interface.h	/^		double lo;$/;"	m	class:madness::TwoElectronInterface
load	src/apps/adrian/TDDFT.cc	/^void TDHF::load(World &world, std::string name) {$/;"	f	class:TDHF
load	src/apps/adrian/TDHF2.cc	/^void TDHF::load(World& world,$/;"	f	class:TDHF
load	src/apps/bryan/TDHF2.cc	/^void TDHF::load(World& world,$/;"	f	class:TDHF
load	src/examples/helium_exact.cc	/^void load(World& world, real_function_6d& f, std::string filename) {$/;"	f
load	src/madness/mra/derivative.h	/^            static void load(const Archive& ar, const DerivativeBase<T,NDIM>*& ptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/mra/funcimpl.h	/^            static void load(const Archive& ar, FunctionImpl<T,NDIM>*& ptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/mra/funcimpl.h	/^            static void load(const Archive& ar, const FunctionImpl<T,NDIM>*& ptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/mra/funcimpl.h	/^            static void load(const Archive& ar, std::shared_ptr<FunctionImpl<T,NDIM> >& ptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/mra/funcimpl.h	/^            static void load(const Archive& ar, std::shared_ptr<const FunctionImpl<T,NDIM> >& ptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/mra/funcimpl.h	/^        void load(Archive& ar) {$/;"	f	class:madness::FunctionImpl
load	src/madness/mra/key.h	/^            static void load(const Archive& ar, Key<NDIM>& t) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/mra/key.h	/^            static void load(const BinaryFstreamInputArchive& ar, Key<NDIM>& t) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/mra/mra.h	/^        void load(World& world, Archive& ar) {$/;"	f	class:madness::Function
load	src/madness/mra/operator.h	/^            static inline void load(const Archive& ar, const SeparatedConvolution<T,NDIM>*& ptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/tensor/gentensor.h	/^		static void load(const Archive& s, GenTensor<T>& t) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/tensor/gentensor.h	/^    static void load(const Archive& ar, GenTensor<T>& t) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/tensor/lowranktensor.h	/^        static void load(const Archive& ar, LowRankTensor<T>& t) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/tensor/tensor.h	/^            static void load(const Archive& s, Tensor<T>& t) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/archive.h	/^            static inline void load(const Archive& ar, const T& t) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/archive.h	/^            static inline void load(const Archive& ar, std::complex<T>& c) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/archive.h	/^            static void load(const Archive& ar, std::array<U, N>& v) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/archive.h	/^            static void load(const Archive& ar, std::array<U, N>& v, std::enable_if_t<!is_serializable<Archive,U>::value>* = nullptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/archive.h	/^            static void load(const Archive& ar, std::map<T,Q,Compare,Alloc>& t) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/archive.h	/^            static void load(const Archive& ar, std::string& v) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/archive.h	/^            static void load(const Archive& ar, std::vector<U, Alloc>& v) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/archive.h	/^            static void load(const Archive& ar, std::vector<U, Alloc>& v, std::enable_if_t<!is_serializable<Archive,U>::value>* = nullptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/archive.h	/^            static void load(const Archive& ar, std::vector<bool, Alloc>& v) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/binary_fstream_archive.h	/^            load(T* t, long n) const {$/;"	f	class:madness::archive::BinaryFstreamInputArchive
load	src/madness/world/buffer_archive.h	/^            load(T* t, long n) const {$/;"	f	class:madness::archive::BufferInputArchive
load	src/madness/world/cereal_archive.h	/^  load(T *t, long n) const {$/;"	f	class:madness::archive::CerealInputArchive
load	src/madness/world/future.h	/^            static inline void load(const Archive& ar, Future<T>& f) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/future.h	/^            static inline void load(const Archive& ar, const Future<void>& f)$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/future.h	/^            static inline void load(const Archive& ar, std::vector<Future<T> >& v) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/mpi_archive.h	/^            load(T* t, long n) const {$/;"	f	class:madness::archive::MPIInputArchive
load	src/madness/world/mpi_archive.h	/^            load(T* t, long n) const {$/;"	f	class:madness::archive::MPIRawInputArchive
load	src/madness/world/test_ar.cc	/^            static inline void load(const Archive& ar, C& c) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/test_ar.cc	/^            static void load(const Archive& ar, linked_list& c) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/text_fstream_archive.cc	/^        void TextFstreamInputArchive::load(char* t, long n) const {$/;"	f	class:madness::archive::TextFstreamInputArchive
load	src/madness/world/text_fstream_archive.cc	/^        void TextFstreamInputArchive::load(unsigned char* t, long n) const {$/;"	f	class:madness::archive::TextFstreamInputArchive
load	src/madness/world/text_fstream_archive.h	/^            load(T* t, long n) const {$/;"	f	class:madness::archive::TextFstreamInputArchive
load	src/madness/world/vector_archive.h	/^            load(T* t, long n) const {$/;"	f	class:madness::archive::VectorInputArchive
load	src/madness/world/world.h	/^            static inline void load(const Archive& ar, World*& wptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/world_object.h	/^            static inline void load(const BufferInputArchive& ar, WorldObject<Derived>*& ptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/world_object.h	/^            static inline void load(const BufferInputArchive& ar, const WorldObject<Derived>*& ptr) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/worlddc.h	/^            static void load(const ParallelInputArchive& ar, WorldContainer<keyT,valueT>& t) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/worldptr.h	/^            static inline void load(const Archive& ar, detail::WorldPtr<T>& p) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
load	src/madness/world/worldref.h	/^            static inline void load(const Archive& ar, detail::RemoteCounter& c) {$/;"	f	struct:madness::archive::ArchiveLoadImpl
loadDefaultBasis	src/apps/nick/extra.cc	/^void loadDefaultBasis(World& world, std::vector<WF>& boundList, double Z) {$/;"	f
loadList	src/apps/nick/extra.cc	/^void loadList(World& world, std::vector<std::string>& boundList, std::vector<std::string>& unboundList) {$/;"	f
loadParameters	src/apps/nick/projPsi.cc	/^void loadParameters(World& world, double& thresh, int& kMAD, double& L, double &Z, int& nPhoton, double& cutoff) {$/;"	f
loadParameters	src/apps/nick/test.cc	/^void loadParameters(World& world, double& thresh, int& kMAD, double& L, double &Z, int& nPhoton, double& cutoff) {$/;"	f
loadParameters	src/apps/nick/wfSlice.cc	/^void loadParameters(World& world, double& thresh, int& kMAD, double& L, double &Z, int&$/;"	f
loadParameters2	src/apps/nick/projPsi.cc	/^void loadParameters2(World& world, int &nGrid, double& th, double& phi, int& wf, double& kMomentum, int& lMAX, int& nPhoton) {$/;"	f
loadParameters2	src/apps/nick/test.cc	/^void loadParameters2(World& world, int &nGrid, double& th, double& phi, int& wf, double& kMomentum, int& lMAX, int& nPhoton) {$/;"	f
loadParameters2	src/apps/nick/wfSlice.cc	/^void loadParameters2(World& world, int &nGrid, double& th, double& phi, int& wf, double& kMomentum, int& lMAX, int& nPhoton) {$/;"	f
load_	src/madness/world/worldref.h	/^            void load_(const Archive& ar) {$/;"	f	class:madness::detail::RemoteCounter
load_balance	src/apps/chem/mp2.cc	/^void load_balance(const real_function_6d& f, const bool leaf) {$/;"	f	namespace:madness
load_balance	src/apps/interior_bc/test_problems.h	/^        void load_balance(World &world, const Function<double, 3> &f)$/;"	f	class:EmbeddedDirichlet
load_balance	src/examples/tdse_example.cc	/^void load_balance(World& world, const madness::Function<T,NDIM>& psi) {$/;"	f
load_balance	src/madness/mra/lbdeux.h	/^        std::shared_ptr< WorldDCPmapInterface<keyT> > load_balance(double fac = 1.0, bool printstuff=false) {$/;"	f	class:madness::LoadBalanceDeux
load_coeffs	src/madness/mra/twoscale.cc	/^    void load_coeffs(World& world, const char* dir) {$/;"	f	namespace:madness
load_function	src/apps/chem/CCPotentials.h	/^    bool load_function(Function<T, NDIM>& f, const std::string name) const{$/;"	f	class:madness::CCPotentials
load_function	src/apps/chem/TDHF.h	/^	bool load_function(Function<T, NDIM>& f, const std::string name) const {$/;"	f	class:madness::TDHF
load_function	src/apps/chem/mp2.cc	/^void MP2::load_function(Function<T, NDIM>& f, const std::string name) const {$/;"	f	class:madness::MP2
load_function	src/apps/chem/nemo.h	/^void Nemo::load_function(std::vector<Function<T,NDIM> >& f, const std::string name) const {$/;"	f	class:madness::Nemo
load_function	src/examples/helium_mp2.cc	/^void load_function(World& world, Function<double,NDIM>& pair, const std::string name) {$/;"	f
load_function	src/examples/tiny.cc	/^void load_function(World& world, Function<double,NDIM>& pair, const std::string name) {$/;"	f
load_function	src/madness/mra/test6.cc	/^void load_function(World& world, Function<double,NDIM>& pair, const std::string name) {$/;"	f
load_function	src/madness/mra/vmra.h	/^void load_function(World& world, std::vector<Function<T, NDIM>>& f,$/;"	f	namespace:madness
load_internal_	src/madness/world/worldptr.h	/^            inline void load_internal_(const Archive& ar) {$/;"	f	class:madness::detail::WorldPtr
load_mos	src/apps/chem/MolecularOrbitals.h	/^	void load_mos(archive::ParallelInputArchive& ar, const Molecule& molecule, const std::size_t nmo_from_input) {$/;"	f	class:madness::MolecularOrbitals
load_mos	src/apps/chem/SCF.cc	/^void SCF::load_mos(World &world)$/;"	f	class:madness::SCF
load_mos	src/apps/moldft/mcpfit.cc	/^    void load_mos (World& world, std::string atom)$/;"	f	struct:Calculation
load_mos	src/apps/polar/mcpfit.cc	/^    void load_mos (World& world, std::string atom)$/;"	f	struct:Calculation
load_mos	src/apps/polar/moldft.cc	/^    void load_mos(World &world)$/;"	f	struct:Calculation
load_orbitals	src/apps/hf/solver.h	/^    void load_orbitals()$/;"	f	class:madness::Solver
load_pair	src/apps/chem/mp2.h	/^        bool load_pair(World& world) {$/;"	f	class:madness::ElectronPair
load_pnos	src/apps/chem/PNO.cpp	/^PNOPairs PNO::load_pnos(PNOPairs& pairs) const {$/;"	f	class:madness::PNO
load_pseudo_from_file	src/apps/chem/gth_pseudopotential.h	/^    void load_pseudo_from_file(World& world, const std::string filename) {$/;"	f	class:madness::GTHPseudopotential
load_pseudo_from_file	src/apps/polar/gth_pseudopotential.h	/^    void load_pseudo_from_file(const std::string filename) {$/;"	f	class:GTHPseudopotential
load_quadrature	src/madness/mra/legendre.cc	/^    void load_quadrature(World& world, const char* dir) {$/;"	f	namespace:madness
load_tests	src/madness/tensor/mtxmq_graveyard/new_mtxmq/tests/testDocStrings.py	/^def load_tests(loader, tests, ignore):$/;"	f
load_tixml_matrix	src/apps/chem/molecularbasis.h	/^    Tensor<T> load_tixml_matrix(TiXmlElement* node, int n, int m, const char* name) {$/;"	f	class:madness::AtomicBasisSet
load_tixml_matrix	src/apps/hf/molecularbasis.h	/^    Tensor<T> load_tixml_matrix(TiXmlElement* node, int n, int m, const char* name) {$/;"	f	class:AtomicBasisSet
load_tixml_matrix	src/apps/polar/molecularbasis.h	/^    Tensor<T> load_tixml_matrix(TiXmlElement* node, int n, int m, const char* name) {$/;"	f	class:AtomicBasisSet
load_tixml_vector	src/apps/chem/molecularbasis.h	/^    std::vector<T> load_tixml_vector(TiXmlElement* node, int n, const char* name) {$/;"	f	class:madness::AtomicBasisSet
load_tixml_vector	src/apps/hf/molecularbasis.h	/^    std::vector<T> load_tixml_vector(TiXmlElement* node, int n, const char* name) {$/;"	f	class:AtomicBasisSet
load_tixml_vector	src/apps/polar/molecularbasis.h	/^    std::vector<T> load_tixml_vector(TiXmlElement* node, int n, const char* name) {$/;"	f	class:AtomicBasisSet
loadbal	src/apps/chem/SCF.cc	/^void SCF::loadbal(World &world, functionT &arho, functionT &brho,$/;"	f	class:madness::SCF
loadbal	src/apps/polar/moldft.cc	/^    void loadbal(World &world, functionT &arho, functionT &brho, functionT &arho_old, functionT &brho_old, subspaceT &subspace)$/;"	f	struct:Calculation
loadbal	src/apps/tdse/tdse.cc	/^void loadbal(World& world,$/;"	f
loadbal	src/apps/tdse/tdse.confused.cc	/^void loadbal(World& world,$/;"	f
loadbal	src/apps/tdse/tdse4.cc	/^void loadbal(World& world,$/;"	f
loadbalparts	src/apps/chem/CalculationParameters.h	/^	int loadbalparts() const {return get<int>("loadbalparts");}$/;"	f	struct:madness::CalculationParameters
loaded	src/madness/mra/twoscale.cc	/^    static bool loaded = 0;$/;"	m	namespace:madness	file:
local	src/apps/chem/test_QCCalculationParametersBase.cc	/^	std::string local() const {return get<std::string>("local");}$/;"	f	class:Parameters
local	src/madness/world/worlddc.h	/^        internal_containerT local;               \/\/\/< Locally owned data$/;"	m	class:madness::WorldContainerImpl
localSymvComplexDoubleBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localSymvComplexDoubleBlocksize = 64;$/;"	m	namespace:__anon33	file:
localSymvComplexFloatBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localSymvComplexFloatBlocksize = 64;$/;"	m	namespace:__anon33	file:
localSymvDoubleBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localSymvDoubleBlocksize = 64;$/;"	m	namespace:__anon33	file:
localSymvFloatBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localSymvFloatBlocksize = 64;$/;"	m	namespace:__anon33	file:
localToGlobalMat_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    DistMatrix<T,MC,MR>* localToGlobalMat_;$/;"	m	class:elem::AxpyInterface
localTrr2kComplexDoubleBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localTrr2kComplexDoubleBlocksize = 64;$/;"	m	namespace:__anon33	file:
localTrr2kComplexFloatBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localTrr2kComplexFloatBlocksize = 64;$/;"	m	namespace:__anon33	file:
localTrr2kDoubleBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localTrr2kDoubleBlocksize = 64;$/;"	m	namespace:__anon33	file:
localTrr2kFloatBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localTrr2kFloatBlocksize = 64;$/;"	m	namespace:__anon33	file:
localTrrkComplexDoubleBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localTrrkComplexDoubleBlocksize = 64;$/;"	m	namespace:__anon33	file:
localTrrkComplexFloatBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localTrrkComplexFloatBlocksize = 64;$/;"	m	namespace:__anon33	file:
localTrrkDoubleBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localTrrkDoubleBlocksize = 64;$/;"	m	namespace:__anon33	file:
localTrrkFloatBlocksize	src/madness/external/elemental/src/core/global.cpp	/^Int localTrrkFloatBlocksize = 64;$/;"	m	namespace:__anon33	file:
local_archive	src/madness/world/parallel_archive.h	/^            Archive& local_archive() const {$/;"	f	class:madness::archive::BaseParallelArchive
local_coldim	src/apps/ii/systolic.h	/^        int64_t local_coldim() const {return idim;}$/;"	f	class:madness::DistributedMatrix
local_coldim	src/madness/tensor/distributed_matrix.h	/^        int64_t local_coldim() const {return idim;}$/;"	f	class:madness::DistributedMatrixDistribution
local_colrange	src/apps/ii/systolic.h	/^        void local_colrange(int64_t& ilow, int64_t& ihigh) const {$/;"	f	class:madness::DistributedMatrix
local_colrange	src/madness/tensor/distributed_matrix.h	/^        void local_colrange(int64_t& ilow, int64_t& ihigh) const {$/;"	f	class:madness::DistributedMatrixDistribution
local_count_	src/madness/world/group.h	/^            mutable AtomicInt local_count_; \/\/\/< Local use count$/;"	m	class:madness::Group::Impl
local_ihigh	src/madness/tensor/distributed_matrix.h	/^        int64_t local_ihigh() const {$/;"	f	class:madness::DistributedMatrixDistribution
local_ilow	src/madness/tensor/distributed_matrix.h	/^        int64_t local_ilow() const {$/;"	f	class:madness::DistributedMatrixDistribution
local_ind	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    local_ind;$/;"	m	struct:__anon28
local_jhigh	src/madness/tensor/distributed_matrix.h	/^        int64_t local_jhigh() const  {$/;"	f	class:madness::DistributedMatrixDistribution
local_jlow	src/madness/tensor/distributed_matrix.h	/^        int64_t local_jlow() const  {$/;"	f	class:madness::DistributedMatrixDistribution
local_leaf_keys	src/madness/mra/mraimpl.h	/^    std::vector<typename FunctionImpl<T,NDIM>::keyT>  FunctionImpl<T,NDIM>::local_leaf_keys() const {$/;"	f	class:madness::FunctionImpl
local_rank	src/madness/world/worldptr.h	/^            ProcessID local_rank() const {$/;"	f	class:madness::detail::WorldPtr
local_rowdim	src/apps/ii/systolic.h	/^        int64_t local_rowdim() const {return jdim;}$/;"	f	class:madness::DistributedMatrix
local_rowdim	src/madness/tensor/distributed_matrix.h	/^        int64_t local_rowdim() const {return jdim;}$/;"	f	class:madness::DistributedMatrixDistribution
local_rowrange	src/apps/ii/systolic.h	/^        void local_rowrange(int64_t& jlow, int64_t& jhigh) const {$/;"	f	class:madness::DistributedMatrix
local_rowrange	src/madness/tensor/distributed_matrix.h	/^        void local_rowrange(int64_t& jlow, int64_t& jhigh) const {$/;"	f	class:madness::DistributedMatrixDistribution
local_size	src/apps/ii/systolic.h	/^        int64_t local_size() const {return idim*jdim;}$/;"	f	class:madness::DistributedMatrix
local_size	src/madness/tensor/distributed_matrix.h	/^        int64_t local_size() const {return idim*jdim;}$/;"	f	class:madness::DistributedMatrixDistribution
local_size	src/madness/world/worlddc.h	/^        std::size_t local_size() const {$/;"	f	class:madness::WorldDCPmapInterface
local_sorted_sum	src/madness/world/test_binsorter.cc	/^double local_sorted_sum;$/;"	v
local_update	src/madness/world/group.h	/^            void local_update() const { local_count_++; }$/;"	f	class:madness::Group::Impl
local_update	src/madness/world/group.h	/^        void local_update() const {$/;"	f	class:madness::Group
localize	src/apps/chem/nemo.cc	/^vecfuncT Nemo::localize(const vecfuncT& nemo, const double dconv, const bool randomize) const {$/;"	f	class:madness::Nemo
localize	src/apps/chem/test_QCCalculationParametersBase.cc	/^	bool localize() const {return get<bool>("localize");}$/;"	f	class:Parameters
localize	src/apps/polar/moldft.cc	/^    bool localize;         \/\/\/< If true solve for localized orbitals$/;"	m	struct:CalculationParameters	file:
localize_PM	src/apps/chem/SCF.cc	/^distmatT SCF::localize_PM(World &world, const vecfuncT &mo,$/;"	f	class:madness::SCF
localize_PM	src/apps/polar/moldft.cc	/^    tensorT localize_PM(World &world, const vecfuncT &mo, const std::vector<int> &set, const double thresh = 1e-9, const double thetamax = 0.5, const bool randomize = true, const bool doprint = false)$/;"	f	struct:Calculation
localize_PM_ij	src/apps/chem/distpm.cc	/^    void localize_PM_ij(const int seti, const int setj,$/;"	f	class:madness::SystolicPMOrbitalLocalize	file:
localize_PM_ij	src/apps/polar/distpm.cc	/^    void localize_PM_ij(const int seti, const int setj, $/;"	f	class:SystolicPMOrbitalLocalize	file:
localize_PM_ij	src/apps/polar/moldft.cc	/^    void localize_PM_ij(const int seti, const int setj,$/;"	f	struct:Calculation
localize_PM_task_kernel	src/apps/polar/moldft.cc	/^    void localize_PM_task_kernel(tensorT &Q, std::vector<tensorT> &Svec, tensorT &C,$/;"	f	struct:Calculation
localize_boys	src/apps/chem/SCF.cc	/^distmatT SCF::localize_boys(World &world, const vecfuncT &mo,$/;"	f	class:madness::SCF
localize_boys	src/apps/polar/moldft.cc	/^    tensorT localize_boys(World &world, const vecfuncT &mo, const std::vector<int> &set, const double thresh = 1e-9, const double thetamax = 0.5, const bool randomize = true)$/;"	f	struct:Calculation
localize_method	src/apps/chem/CalculationParameters.h	/^	std::string localize_method() const {return get<std::string>("localize");}$/;"	f	struct:madness::CalculationParameters
localize_new	src/apps/chem/SCF.cc	/^distmatT SCF::localize_new(World &world, const vecfuncT &mo,$/;"	f	class:madness::SCF
localize_pm	src/apps/chem/CalculationParameters.h	/^	bool localize_pm() const {return (localize_method()=="pm");}$/;"	f	struct:madness::CalculationParameters
localize_pm	src/apps/polar/moldft.cc	/^    bool localize_pm;      \/\/\/< If true use PM for localization$/;"	m	struct:CalculationParameters	file:
localize_sets	src/apps/chem/MolecularOrbitals.h	/^	std::vector<int> localize_sets;$/;"	m	class:madness::MolecularOrbitals
localp	src/apps/chem/gth_pseudopotential.h	/^    std::array<real_tensor,118> localp;$/;"	m	class:madness::GTHPseudopotential
localp	src/apps/polar/gth_pseudopotential.h	/^    std::array<real_tensor,118> localp;$/;"	m	class:GTHPseudopotential
location	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:TiXmlBase
lock	src/madness/external/elemental/external/pmrrr/include/counter.h	/^  pthread_mutex_t    lock;$/;"	m	struct:__anon18
lock	src/madness/external/elemental/external/pmrrr/include/counter.h	/^  pthread_spinlock_t lock;$/;"	m	struct:__anon18
lock	src/madness/external/elemental/external/pmrrr/include/queue.h	/^  pthread_mutex_t    lock;$/;"	m	struct:__anon20
lock	src/madness/external/elemental/external/pmrrr/include/queue.h	/^  pthread_spinlock_t lock;$/;"	m	struct:__anon20
lock	src/madness/world/worldmutex.h	/^        void lock() const {$/;"	f	class:madness::Mutex
lock	src/madness/world/worldmutex.h	/^        void lock() const {$/;"	f	class:madness::MutexFair
lock	src/madness/world/worldmutex.h	/^        void lock() const {$/;"	f	class:madness::PthreadConditionVariable
lock	src/madness/world/worldmutex.h	/^        void lock() const {$/;"	f	class:madness::RecursiveMutex
lock	src/madness/world/worldmutex.h	/^        void lock() const {$/;"	f	class:madness::Spinlock
lock	src/madness/world/worldmutex.h	/^        void lock(int lockmode) const {$/;"	f	class:madness::MutexReaderWriter
lockT	src/madness/world/worldmutex.h	/^        enum lockT {NOLOCK, READLOCK, WRITELOCK};$/;"	g	class:madness::MutexReaderWriter
log	src/apps/nick/mpreal.h	/^inline const mpreal log  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
log	src/madness/mra/funcimpl.h	/^            bool log;$/;"	m	struct:madness::FunctionImpl::do_convert_to_color
log	src/madness/mra/tools/longfloat.py	/^    def log(self):$/;"	m	class:longfloat
log	src/madness/mra/tools/longfloat.py	/^    def log(self, x):$/;"	m	class:interpolators
log10	src/apps/nick/mpreal.h	/^inline const mpreal log10(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
log1p	src/apps/nick/mpreal.h	/^inline const mpreal log1p  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
log2	src/apps/nick/mpreal.h	/^inline const mpreal log2(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
log_high	src/apps/chem/oep.h	/^	double log_high, log_low;$/;"	m	struct:madness::divide_add_interpolate
log_high	src/apps/chem/oep.h	/^	double log_high, log_low;$/;"	m	struct:madness::interpolate_to_longrange_op
log_low	src/apps/chem/oep.h	/^	double log_high, log_low;$/;"	m	struct:madness::divide_add_interpolate
log_low	src/apps/chem/oep.h	/^	double log_high, log_low;$/;"	m	struct:madness::interpolate_to_longrange_op
log_stream	src/apps/hf/outputwriter.h	/^  std::ofstream* log_stream()$/;"	f	class:OutputWriter
logdlog	src/madness/mra/tools/longfloat.py	/^    def logdlog(self, x):$/;"	m	class:interpolators
logger	src/apps/chem/test_utilities.h	/^	std::stringstream logger;$/;"	m	struct:madness::test_output
logger	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^logger = logging.getLogger(__name__)$/;"	v
logging	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^import logging$/;"	i
logging	src/madness/tensor/mtxmq_graveyard/new_mtxmq/main.py	/^import logging$/;"	i
logic_and	src/madness/world/worldgop.h	/^        inline void logic_and(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
logic_or	src/madness/world/worldgop.h	/^        inline void logic_or(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
logical	src/apps/hf/lda.h	/^typedef int logical;$/;"	t
logme	src/apps/chem/SCFOperators.h	/^    struct logme{$/;"	s	class:madness::XCOperator
logme1	src/apps/chem/SCFOperators.h	/^        struct logme1 {$/;"	s	struct:madness::XCOperator::logme
longfloat	src/madness/mra/tools/longfloat.py	/^class longfloat:$/;"	c
longfloat	src/madness/mra/tools/quadrature.py	/^from longfloat import longfloat$/;"	i
longfloat	src/madness/mra/tools/twoscalecoeffs.py	/^from longfloat import longfloat$/;"	i
lookup_func	src/apps/chem/xcfunctional_libxc.cc	/^static xc_func_type* lookup_func(const std::string& name, bool polarized) {$/;"	f	namespace:madness
lookup_func	src/apps/polar/xcfunctional_libxc.cc	/^static xc_func_type* lookup_func(const std::string& name, bool polarized) {$/;"	f	namespace:madness
lookup_id	src/apps/chem/xcfunctional_libxc.cc	/^static std::string lookup_id(const int id) {$/;"	f	namespace:madness
lookup_name	src/apps/chem/xcfunctional_libxc.cc	/^static int lookup_name(const std::string& name) {$/;"	f	namespace:madness
lookup_name	src/apps/polar/xcfunctional_libxc.cc	/^static int lookup_name(const std::string& name) {$/;"	f	namespace:madness
lookup_type	src/examples/compiler/mra-driver.hh	/^    Exp::Type lookup_type(const Exp* e) {$/;"	f	class:mra_driver
lookup_type	src/examples/compiler/mra-driver.hh	/^    Exp::Type lookup_type(const std::string& s) {$/;"	f	class:mra_driver
loop	src/apps/moldft/fci/timer.f	/^      integer i, j, n, nloop,/;"	v
lostr	src/apps/hf/outputwriter.h	/^  std::ofstream* lostr;$/;"	m	class:OutputWriter
lower	src/madness/mra/funcimpl.h	/^            static double lower() {return 1.e-10;};$/;"	f	struct:madness::FunctionImpl::do_convert_to_color
lowercase	src/madness/misc/position_stream.cc	/^    std::string lowercase(const std::string& s) {$/;"	f	namespace:madness
lq	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/ApplyQ.hpp	/^namespace lq {$/;"	n	namespace:elem
lq	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Explicit.hpp	/^namespace lq {$/;"	n	namespace:elem
lq	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/Householder.hpp	/^namespace lq {$/;"	n	namespace:elem
lq	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/PanelHouseholder.hpp	/^namespace lq {$/;"	n	namespace:elem
lq	src/madness/external/elemental/include/elemental/lapack-like/factor/LQ/SolveAfter.hpp	/^namespace lq {$/;"	n	namespace:elem
lq	src/madness/tensor/lapack.cc	/^    void lq(Tensor<T>& A, Tensor<T>& R) {$/;"	f	namespace:madness
lq_result	src/madness/tensor/lapack.cc	/^    void lq_result(Tensor<T>& A, Tensor<T>& R, Tensor<T>& tau, Tensor<T>& work,$/;"	f	namespace:madness
lqtoint	src/apps/chem/PNOGuessFunctions.cpp	/^ size_t BasisFunctions::lqtoint(const std::string& l) const {$/;"	f	class:madness::BasisFunctions
lr_pot_functor	src/apps/chem/AC.h	/^	lr_pot_functor(){}$/;"	f	class:madness::lr_pot_functor
lr_pot_functor	src/apps/chem/AC.h	/^	lr_pot_functor(const ACParameters<NDIM> & ac_param): ac_param_(ac_param){}$/;"	f	class:madness::lr_pot_functor
lr_pot_functor	src/apps/chem/AC.h	/^class lr_pot_functor : public FunctionFunctorInterface<double,NDIM>{$/;"	c	namespace:madness
lrt	src/madness/tensor/lowranktensor.h	/^    LowRankTensor<T> lrt;$/;"	m	class:madness::SliceLowRankTensor
lu	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Full.hpp	/^namespace lu {$/;"	n	namespace:elem
lu	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Local.hpp	/^namespace lu {$/;"	n	namespace:elem
lu	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/Panel.hpp	/^namespace lu {$/;"	n	namespace:elem
lu	src/madness/external/elemental/include/elemental/lapack-like/factor/LU/SolveAfter.hpp	/^namespace lu {$/;"	n	namespace:elem
lwork	src/apps/moldft/fci/fci.F	/^      integer lenwrk, iwork, iv, lwork,/;"	v	program:fci
lx	src/madness/mra/convolution1d.h	/^            Translation lx;$/;"	m	struct:madness::GenericConvolution1D::Shmoo
lz_commutator	src/apps/chem/znemo.h	/^		std::vector<complex_function_3d> lz_commutator;$/;"	m	struct:madness::Znemo::potentials
lz_mo	src/apps/chem/znemo.h	/^		std::vector<complex_function_3d> lz_mo;$/;"	m	struct:madness::Znemo::potentials
m	src/apps/chem/PNOGuessFunctions.h	/^		int l, m;         \/\/\/< (real) solid harmonic quanta$/;"	m	class:madness::BasisFunctions::SolidHarmonicGaussian
m	src/apps/chem/gth_pseudopotential.h	/^    int l, m, i; \/\/ i = 1,2,3 and m = 0,1,2,3 and l = 0,1,2,3 (angular momentum)$/;"	m	class:madness::ProjRLMFunctor
m	src/apps/chem/potentialmanager.h	/^    const int m;$/;"	m	class:madness::CoreOrbitalDerivativeFunctor
m	src/apps/chem/potentialmanager.h	/^    const int m;$/;"	m	class:madness::CoreOrbitalFunctor
m	src/apps/chem/znemo.h	/^		int m=0;$/;"	m	struct:madness::Znemo::landau_wave_function
m	src/apps/chem/znemo.h	/^		long m=0;$/;"	m	struct:madness::Znemo::p_orbital
m	src/apps/ii/systolic.h	/^        const int64_t m;                \/\/< Row dimension of A(n,m)$/;"	m	class:madness::DistributedMatrix
m	src/apps/moldft/mcpfit.cc	/^    int m;$/;"	m	class:CoreOrbitalFunctor	file:
m	src/apps/nick/parse.py	/^                m = re.match( "\\s*step",line)$/;"	v
m	src/apps/nick/wavef.h	/^    int m;$/;"	m	class:BoundWF
m	src/apps/polar/gth_pseudopotential.h	/^    int l, m, i; \/\/ i = 1,2,3 and m = 0,1,2,3 and l = 0,1,2,3 (angular momentum)$/;"	m	class:ProjRLMFunctor
m	src/apps/polar/gth_pseudopotential.h	/^    int l, m;$/;"	m	class:RlmFunctor
m	src/apps/polar/gth_pseudopotential.h	/^    int l, m;$/;"	m	class:YlmFunctor
m	src/apps/polar/mcpfit.cc	/^    int m;$/;"	m	class:CoreOrbitalFunctor	file:
m	src/apps/polar/potentialmanager.h	/^    const int m;$/;"	m	class:CoreOrbitalDerivativeFunctor
m	src/apps/polar/potentialmanager.h	/^    const int m;$/;"	m	class:CoreOrbitalFunctor
m	src/madness/external/elemental/examples/lapack-like/SimpleSVD.cpp	/^const Int m=300, n=300;  \/\/ run SVD on m x n matrix$/;"	v
m	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-deleted_functions_fail_compile.cxx	/^    int m;$/;"	m	struct:A	file:
m	src/madness/mra/convolution1d.h	/^        const int m;            \/\/\/< Order of derivative (0, 1, or 2 only)$/;"	m	class:madness::GaussianConvolution1D
m	src/madness/mra/convolution1d.h	/^        int m;$/;"	m	class:madness::GaussianGenericFunctor
m	src/madness/mra/minmax/y.cc	/^    int n, m;$/;"	m	class:matrix	file:
m	src/madness/mra/minmax/y1.cc	/^    int n, m;$/;"	m	class:matrix	file:
m	src/madness/mra/minmax/y_signed.cc	/^    int n, m;$/;"	m	class:matrix	file:
m	src/madness/mra/minmax/y_varx.cc	/^    int n, m;$/;"	m	class:matrix	file:
m	src/madness/mra/testopdir.cc	/^    int m[3];$/;"	m	class:OpFExact	file:
m	src/madness/mra/tools/mathutil.py	/^    m = 17$/;"	v
m	src/madness/tensor/distributed_matrix.h	/^        int64_t m;                \/\/\/< Row dimension of A(n,m)$/;"	m	class:madness::DistributedMatrixDistribution
m	src/madness/tensor/gfit.cc	/^const double m = 1;$/;"	v
mAA	src/apps/nick/wavef.h	/^    complexd mAA;$/;"	m	class:ScatteringWF
mTxm	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_Zmtxmq.cc	/^void mTxm(long dimi, long dimj, long dimk,$/;"	f
mTxm	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_mtxmq.cc	/^void mTxm(long dimi, long dimj, long dimk,$/;"	f
mTxm	src/madness/tensor/mxm.h	/^    inline void mTxm(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxm	src/madness/tensor/mxm.h	/^    void mTxm(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxm	src/madness/tensor/test_Zmtxmq.cc	/^void mTxm(long dimi, long dimj, long dimk,$/;"	f
mTxm	src/madness/tensor/test_mtxmq.cc	/^void mTxm(long dimi, long dimj, long dimk,$/;"	f
mTxmSCOTT	src/madness/tensor/mtxmq_graveyard/test_scott.cc	/^void mTxmSCOTT(long dimi, long dimj, long dimk,$/;"	f
mTxmT	src/madness/tensor/mxm.h	/^    inline void mTxmT(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmT	src/madness/tensor/mxm.h	/^    static inline void mTxmT(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmT	src/madness/tensor/mxm.h	/^    void mTxmT(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmT_reference	src/madness/tensor/mxm.h	/^    static inline void mTxmT_reference(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxm_dgemm	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_mtxmq.cc	/^void mTxm_dgemm(long ni, long nj, long nk, double* c, const double* a, const double*b ) {$/;"	f
mTxm_dgemm	src/madness/tensor/test_Zmtxmq.cc	/^void mTxm_dgemm(long ni, long nj, long nk, double_complex* c, const double_complex* a, const double_complex*b ) {$/;"	f
mTxm_dgemm	src/madness/tensor/test_mtxmq.cc	/^void mTxm_dgemm(long ni, long nj, long nk, double* c, const double* a, const double*b ) {$/;"	f
mTxm_reference	src/madness/tensor/mxm.h	/^    void mTxm_reference(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxm_tune	src/madness/tensor/mtxmq_graveyard/bgp_tuning/mTxm_tune.cc	/^void mTxm_tune(long dimi, long dimj, long dimk, double* c, const double* a, const double* b) {$/;"	f
mTxm_tune	src/madness/tensor/mtxmq_graveyard/bgp_tuning/mTxm_tune.cc	/^void mTxm_tune(long dimi, long dimj, long dimk, double_complex* c, const double_complex* a, const double_complex* b) {$/;"	f
mTxm_zgemm	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_Zmtxmq.cc	/^void mTxm_zgemm(long ni, long nj, long nk, double_complex* c, const double_complex* a, const double_complex*b ) {$/;"	f
mTxmq	src/madness/tensor/mtxmq_graveyard/bgp_tuning/mtxmq.cc	/^void mTxmq(long dimi, long dimj, long dimk, double* c, const double* a, const double* b) {$/;"	f
mTxmq	src/madness/tensor/mtxmq_graveyard/bgp_tuning/mtxmq.cc	/^void mTxmq(long dimi, long dimj, long dimk, double_complex* c, const double_complex* a, const double* b) {$/;"	f
mTxmq	src/madness/tensor/mtxmq_graveyard/bgp_tuning/mtxmq.cc	/^void mTxmq(long dimi, long dimj, long dimk, double_complex* c, const double_complex* a, const double_complex* b) {$/;"	f
mTxmq	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	/^    void mTxmq(const long dimi, const long dimj, const long dimk,$/;"	f	namespace:madness
mTxmq	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	/^void mTxmq(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmq	src/madness/tensor/mtxmq_graveyard/mtxmq.h	/^    inline void mTxmq(long ni, long nj, long nk, double* MADNESS_RESTRICT c, const double* a, const double* b) {$/;"	f	namespace:madness
mTxmq	src/madness/tensor/mtxmq_graveyard/mtxmq.h	/^    inline void mTxmq(long ni, long nj, long nk, double_complex* MADNESS_RESTRICT c, const double_complex* a, const double_complex* b) {$/;"	f	namespace:madness
mTxmq	src/madness/tensor/mtxmq_graveyard/mtxmq.h	/^    void mTxmq(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmq	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	/^    void mTxmq(const long dimi, const long dimj, const long dimk,$/;"	f	namespace:madness
mTxmq	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	/^void mTxmq(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmq	src/madness/tensor/mxm.h	/^    inline void mTxmq(long ni, long nj, long nk, double* MADNESS_RESTRICT c, const double* a, const double* b) {$/;"	f	namespace:madness
mTxmq	src/madness/tensor/mxm.h	/^    inline void mTxmq(long ni, long nj, long nk, double_complex* MADNESS_RESTRICT c, const double_complex* a, const double_complex* b) {$/;"	f	namespace:madness
mTxmq	src/madness/tensor/mxm.h	/^    void mTxmq(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmq_core	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	/^void mTxmq_core(bool is_trans, long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmq_core	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	/^void mTxmq_core(bool is_trans, long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmq_padding	src/madness/tensor/mtxmq_graveyard/mtxmq.h	/^        inline void mTxmq_padding(long ni, long nj, long nk, long ej, $/;"	f	namespace:madness
mTxmq_padding	src/madness/tensor/mtxmq_graveyard/mtxmq.h	/^    void mTxmq_padding(long dimi, long dimj, long dimk, long ext_b,$/;"	f	namespace:madness
mTxmq_padding	src/madness/tensor/mxm.h	/^        inline void mTxmq_padding(long ni, long nj, long nk, long ej, $/;"	f	namespace:madness
mTxmq_padding	src/madness/tensor/mxm.h	/^    void mTxmq_padding(long dimi, long dimj, long dimk, long ext_b,$/;"	f	namespace:madness
mTxmq_reference	src/madness/tensor/mxm.h	/^    void mTxmq_reference(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mTxmqdjflkjsalkf	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	/^    void mTxmqdjflkjsalkf(const long dimi, const long dimj, const long dimk,$/;"	f	namespace:madness
mTxmqdjflkjsalkf	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	/^    void mTxmqdjflkjsalkf(const long dimi, const long dimj, const long dimk,$/;"	f	namespace:madness
m_ConstDef	src/madness/external/muParser/muParserBase.h	/^    valmap_type  m_ConstDef;      \/\/\/< user constants.$/;"	m	class:mu::ParserBase
m_ErrMsg	src/madness/external/muParser/muParserError.h	/^    const ParserErrorMsg &m_ErrMsg;$/;"	m	class:mu::ParserError
m_FunDef	src/madness/external/muParser/muParserBase.h	/^    funmap_type  m_FunDef;        \/\/\/< Map of function names and pointers.$/;"	m	class:mu::ParserBase
m_InfixOprtDef	src/madness/external/muParser/muParserBase.h	/^    funmap_type  m_InfixOprtDef;  \/\/\/< unary infix operator.$/;"	m	class:mu::ParserBase
m_Instance	src/madness/external/muParser/muParserError.cpp	/^  const ParserErrorMsg ParserErrorMsg::m_Instance;$/;"	m	class:mu::ParserErrorMsg	file:
m_Instance	src/madness/external/muParser/muParserError.h	/^    static const self_type m_Instance;    \/\/\/< The instance pointer$/;"	m	class:mu::ParserErrorMsg
m_OprtDef	src/madness/external/muParser/muParserBase.h	/^    funmap_type  m_OprtDef;       \/\/\/< Binary operator callbacks$/;"	m	class:mu::ParserBase
m_PostOprtDef	src/madness/external/muParser/muParserBase.h	/^    funmap_type  m_PostOprtDef;   \/\/\/< Postfix operator callbacks$/;"	m	class:mu::ParserBase
m_Stack	src/madness/external/muParser/muParserStack.h	/^      impl_type m_Stack;  \/\/\/< This is the actual stack.$/;"	m	class:mu::ParserStack
m_StrVarDef	src/madness/external/muParser/muParserBase.h	/^    strmap_type  m_StrVarDef;     \/\/\/< user defined string constants$/;"	m	class:mu::ParserBase
m_UsedVar	src/madness/external/muParser/muParserTokenReader.h	/^      varmap_type m_UsedVar;$/;"	m	class:mu::ParserTokenReader
m_VarDef	src/madness/external/muParser/muParserBase.h	/^    varmap_type  m_VarDef;        \/\/\/< user defind variables.$/;"	m	class:mu::ParserBase
m_bAllowOpti	src/madness/external/muParser/muParserCallback.h	/^    bool  m_bAllowOpti; \/\/\/< Flag indication optimizeability $/;"	m	class:mu::ParserCallback
m_bBuiltInOp	src/madness/external/muParser/muParserBase.h	/^    bool m_bBuiltInOp;            \/\/\/< Flag that can be used for switching built in operators on and off$/;"	m	class:mu::ParserBase
m_bIgnoreUndefVar	src/madness/external/muParser/muParserTokenReader.h	/^      bool m_bIgnoreUndefVar;$/;"	m	class:mu::ParserTokenReader
m_bOptimize	src/madness/external/muParser/muParserBase.h	/^    bool m_bOptimize;             \/\/\/< Flag that indicates if the optimizer is on or off.$/;"	m	class:mu::ParserBase
m_bUseByteCode	src/madness/external/muParser/muParserBase.h	/^    bool m_bUseByteCode;          \/\/\/< Flag that indicates if bytecode parsing is on or off.$/;"	m	class:mu::ParserBase
m_cArgSep	src/madness/external/muParser/muParserTokenReader.h	/^      char_type m_cArgSep;     \/\/\/< The character used for separating function arguments$/;"	m	class:mu::ParserTokenReader
m_cDecPoint	src/madness/external/muParser/muParser.h	/^      char_type m_cDecPoint;  $/;"	m	class:mu::Parser::change_dec_sep
m_cThousandsSep	src/madness/external/muParser/muParser.h	/^      char_type m_cThousandsSep;$/;"	m	class:mu::Parser::change_dec_sep
m_fVal	src/madness/external/muParser/muParserToken.h	/^      value_type m_fVal;$/;"	m	class:mu::ParserToken
m_fZero	src/madness/external/muParser/muParserTokenReader.h	/^      value_type m_fZero;      \/\/\/< Dummy value of zero, referenced by undefined variables$/;"	m	class:mu::ParserTokenReader
m_iArgc	src/madness/external/muParser/muParserCallback.h	/^    int   m_iArgc;      $/;"	m	class:mu::ParserCallback
m_iBrackets	src/madness/external/muParser/muParserTokenReader.h	/^      int m_iBrackets;$/;"	m	class:mu::ParserTokenReader
m_iCode	src/madness/external/muParser/muParserCallback.h	/^    ECmdCode  m_iCode;$/;"	m	class:mu::ParserCallback
m_iCode	src/madness/external/muParser/muParserToken.h	/^      ECmdCode  m_iCode;  \/\/\/< Type of the token; The token type is a constant of type #ECmdCode.$/;"	m	class:mu::ParserToken
m_iErrc	src/madness/external/muParser/muParserError.h	/^    EErrorCodes m_iErrc;      \/\/\/< Error code$/;"	m	class:mu::ParserError
m_iFlags	src/madness/external/muParser/muParserToken.h	/^  	  int  m_iFlags;      \/\/\/< Additional flags for the token.$/;"	m	class:mu::ParserToken
m_iIdx	src/madness/external/muParser/muParserToken.h	/^      int  m_iIdx;        \/\/\/< An otional index to an external buffer storing the token data$/;"	m	class:mu::ParserToken
m_iPos	src/madness/external/muParser/muParserError.h	/^    int m_iPos;               \/\/\/< Formula position related to the error $/;"	m	class:mu::ParserError
m_iPos	src/madness/external/muParser/muParserTokenReader.h	/^      int  m_iPos;$/;"	m	class:mu::ParserTokenReader
m_iPri	src/madness/external/muParser/muParserCallback.h	/^    int   m_iPri;       \/\/\/< Valid only for binary and infix operators; Operator precedence.$/;"	m	class:mu::ParserCallback
m_iStackPos	src/madness/external/muParser/muParserBytecode.h	/^    unsigned m_iStackPos;$/;"	m	class:mu::ParserByteCode
m_iSynFlags	src/madness/external/muParser/muParserTokenReader.h	/^      int  m_iSynFlags;$/;"	m	class:mu::ParserTokenReader
m_iType	src/madness/external/muParser/muParserCallback.h	/^    ETypeCode m_iType;$/;"	m	class:mu::ParserCallback
m_iType	src/madness/external/muParser/muParserToken.h	/^      ETypeCode m_iType;$/;"	m	class:mu::ParserToken
m_k	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-delegating_constructors.cxx	/^    int m_k;$/;"	m	class:del	file:
m_lastTok	src/madness/external/muParser/muParserTokenReader.h	/^      token_type m_lastTok;$/;"	m	class:mu::ParserTokenReader
m_nGroup	src/madness/external/muParser/muParser.h	/^      int m_nGroup;$/;"	m	class:mu::Parser::change_dec_sep
m_pCallback	src/madness/external/muParser/muParserToken.h	/^      std::unique_ptr<ParserCallback> m_pCallback;$/;"	m	class:mu::ParserToken
m_pCmdCode	src/madness/external/muParser/muParserBase.h	/^    mutable const ParserByteCode::map_type *m_pCmdCode; \/\/\/< Formula converted to bytecode, points to the data of the bytecode class.$/;"	m	class:mu::ParserBase
m_pConstDef	src/madness/external/muParser/muParserTokenReader.h	/^      const valmap_type *m_pConstDef;$/;"	m	class:mu::ParserTokenReader
m_pFactory	src/madness/external/muParser/muParserTokenReader.h	/^      facfun_type m_pFactory;$/;"	m	class:mu::ParserTokenReader
m_pFactoryData	src/madness/external/muParser/muParserTokenReader.h	/^      void *m_pFactoryData;$/;"	m	class:mu::ParserTokenReader
m_pFun	src/madness/external/muParser/muParserCallback.h	/^    void *m_pFun;       \/\/\/< Pointer to the callback function, casted to void$/;"	m	class:mu::ParserCallback
m_pFunDef	src/madness/external/muParser/muParserTokenReader.h	/^      const funmap_type *m_pFunDef;$/;"	m	class:mu::ParserTokenReader
m_pInfixOprtDef	src/madness/external/muParser/muParserTokenReader.h	/^      const funmap_type *m_pInfixOprtDef;$/;"	m	class:mu::ParserTokenReader
m_pOprtDef	src/madness/external/muParser/muParserTokenReader.h	/^      const funmap_type *m_pOprtDef;$/;"	m	class:mu::ParserTokenReader
m_pParseFormula	src/madness/external/muParser/muParserBase.h	/^    mutable ParseFunction  m_pParseFormula;$/;"	m	class:mu::ParserBase
m_pParser	src/madness/external/muParser/muParserTokenReader.h	/^      ParserBase *m_pParser;$/;"	m	class:mu::ParserTokenReader
m_pPostOprtDef	src/madness/external/muParser/muParserTokenReader.h	/^      const funmap_type *m_pPostOprtDef;$/;"	m	class:mu::ParserTokenReader
m_pStrVarDef	src/madness/external/muParser/muParserTokenReader.h	/^      const strmap_type *m_pStrVarDef;$/;"	m	class:mu::ParserTokenReader
m_pTok	src/madness/external/muParser/muParserToken.h	/^      void  *m_pTok;      \/\/\/< Stores Token pointer; not applicable for all tokens$/;"	m	class:mu::ParserToken
m_pTokenReader	src/madness/external/muParser/muParserBase.h	/^    std::unique_ptr<token_reader_type> m_pTokenReader; \/\/\/< Managed pointer to the token reader object.$/;"	m	class:mu::ParserBase
m_pVarDef	src/madness/external/muParser/muParserTokenReader.h	/^      varmap_type *m_pVarDef;  \/\/\/< The only non const pointer to parser internals$/;"	m	class:mu::ParserTokenReader
m_sInfixOprtChars	src/madness/external/muParser/muParserBase.h	/^    string_type m_sInfixOprtChars; \/\/\/< Charset for infix operator tokens$/;"	m	class:mu::ParserBase
m_sNameChars	src/madness/external/muParser/muParserBase.h	/^    string_type m_sNameChars;      \/\/\/< Charset for names$/;"	m	class:mu::ParserBase
m_sOprtChars	src/madness/external/muParser/muParserBase.h	/^    string_type m_sOprtChars;      \/\/\/< Charset for postfix\/ binary operator tokens$/;"	m	class:mu::ParserBase
m_strFormula	src/madness/external/muParser/muParserError.h	/^    string_type m_strFormula; \/\/\/< Formula string$/;"	m	class:mu::ParserError
m_strFormula	src/madness/external/muParser/muParserTokenReader.h	/^      string_type m_strFormula;$/;"	m	class:mu::ParserTokenReader
m_strMsg	src/madness/external/muParser/muParserError.h	/^    string_type m_strMsg;     \/\/\/< The message string$/;"	m	class:mu::ParserError
m_strTok	src/madness/external/muParser/muParserError.h	/^    string_type m_strTok;     \/\/\/< Token related with the error$/;"	m	class:mu::ParserError
m_strTok	src/madness/external/muParser/muParserToken.h	/^      TString m_strTok;   \/\/\/< Token string$/;"	m	class:mu::ParserToken
m_strVal	src/madness/external/muParser/muParserToken.h	/^      TString m_strVal;   \/\/\/< Value for string variables$/;"	m	class:mu::ParserToken
m_v	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-initializer_list.cxx	/^    std::vector<int> m_v;$/;"	m	class:seq	file:
m_vBase	src/madness/external/muParser/muParserBytecode.h	/^    storage_type m_vBase;$/;"	m	class:mu::ParserByteCode
m_vByteCode	src/madness/external/muParser/muParserBase.h	/^    mutable ParserByteCode m_vByteCode;   \/\/\/< The Bytecode class.$/;"	m	class:mu::ParserBase
m_vErrMsg	src/madness/external/muParser/muParserError.h	/^    std::vector<string_type>  m_vErrMsg;  \/\/\/< A vector with the predefined error messages$/;"	m	class:mu::ParserErrorMsg
m_vIdentFun	src/madness/external/muParser/muParserTokenReader.h	/^      std::vector<identfun_type> m_vIdentFun; \/\/\/< Value token identification function$/;"	m	class:mu::ParserTokenReader
m_vStringBuf	src/madness/external/muParser/muParserBase.h	/^    mutable stringbuf_type  m_vStringBuf; \/\/\/< String buffer, used for storing string function arguments$/;"	m	class:mu::ParserBase
m_vStringVarBuf	src/madness/external/muParser/muParserBase.h	/^    stringbuf_type  m_vStringVarBuf;$/;"	m	class:mu::ParserBase
m_vTestFun	src/madness/external/muParser/muParserTest.h	/^        std::vector<testfun_type> m_vTestFun;$/;"	m	class:mu::Test::ParserTester
mad_git_commit	src/madness/misc/gitinfo.cc	/^        const char* mad_git_commit() {$/;"	f	namespace:madness::info
mad_root_dir	src/madness/mra/derivative.h	/^    static const std::string mad_root_dir = MAD_ROOT_DIR;$/;"	m	namespace:madness
mad_signal_handler	src/madness/world/test_world.cc	/^void mad_signal_handler( int signum ) {$/;"	f
madness	src/apps/adrian/GroundParameters.h	/^namespace madness $/;"	n
madness	src/apps/adrian/ResponseFunction2.h	/^namespace madness {$/;"	n
madness	src/apps/adrian/ResponseParameters.h	/^namespace madness $/;"	n
madness	src/apps/adrian/ResponsePotential.h	/^namespace madness {$/;"	n
madness	src/apps/bryan/GroundParameters.h	/^namespace madness $/;"	n
madness	src/apps/bryan/ResponseFunction2.h	/^namespace madness {$/;"	n
madness	src/apps/bryan/ResponseParameters.h	/^namespace madness $/;"	n
madness	src/apps/bryan/ResponsePotential.h	/^namespace madness {$/;"	n
madness	src/apps/chem/AC.cc	/^namespace madness{$/;"	n	file:
madness	src/apps/chem/AC.h	/^namespace madness {$/;"	n
madness	src/apps/chem/CC2.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/CC2.h	/^namespace madness {$/;"	n
madness	src/apps/chem/CCPotentials.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/CCPotentials.h	/^namespace madness {$/;"	n
madness	src/apps/chem/CCStructures.cc	/^namespace madness{$/;"	n	file:
madness	src/apps/chem/CCStructures.h	/^namespace madness{$/;"	n
madness	src/apps/chem/CalculationParameters.h	/^namespace madness {$/;"	n
madness	src/apps/chem/GuessFactory.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/GuessFactory.h	/^namespace madness {$/;"	n
madness	src/apps/chem/MolecularOrbitals.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/MolecularOrbitals.h	/^namespace madness {$/;"	n
madness	src/apps/chem/PNO.cpp	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/PNO.h	/^namespace madness {$/;"	n
madness	src/apps/chem/PNOF12Potentials.cpp	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/PNOF12Potentials.h	/^namespace madness {$/;"	n
madness	src/apps/chem/PNOGuessFunctions.cpp	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/PNOGuessFunctions.h	/^namespace madness {$/;"	n
madness	src/apps/chem/PNOParameters.cpp	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/PNOParameters.h	/^namespace madness {$/;"	n
madness	src/apps/chem/PNOStructures.cpp	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/PNOStructures.h	/^namespace madness {$/;"	n
madness	src/apps/chem/QCCalculationParametersBase.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/QCCalculationParametersBase.h	/^namespace madness {$/;"	n
madness	src/apps/chem/SCF.cc	/^namespace madness$/;"	n	file:
madness	src/apps/chem/SCF.h	/^namespace madness {$/;"	n
madness	src/apps/chem/SCFOperators.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/SCFOperators.h	/^namespace madness {$/;"	n
madness	src/apps/chem/SCFProtocol.h	/^namespace madness {$/;"	n
madness	src/apps/chem/TDHF.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/TDHF.h	/^namespace madness {$/;"	n
madness	src/apps/chem/atomutil.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/atomutil.h	/^namespace madness {$/;"	n
madness	src/apps/chem/corepotential.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/corepotential.h	/^namespace madness {$/;"	n
madness	src/apps/chem/correlationfactor.cc	/^namespace madness{$/;"	n	file:
madness	src/apps/chem/correlationfactor.h	/^namespace madness {$/;"	n
madness	src/apps/chem/diamagneticpotentialfactor.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/diamagneticpotentialfactor.h	/^namespace madness {$/;"	n
madness	src/apps/chem/distpm.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/electronic_correlation_factor.h	/^namespace madness {$/;"	n
madness	src/apps/chem/gth_pseudopotential.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/gth_pseudopotential.h	/^namespace madness {$/;"	n
madness	src/apps/chem/lda.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/masks_and_boxes.h	/^namespace madness {$/;"	n
madness	src/apps/chem/molecular_optimizer.h	/^namespace madness {$/;"	n
madness	src/apps/chem/molecularbasis.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/molecularbasis.h	/^namespace madness {$/;"	n
madness	src/apps/chem/molecule.cc	/^namespace madness$/;"	n	file:
madness	src/apps/chem/molecule.h	/^namespace madness {$/;"	n
madness	src/apps/chem/molopt.h	/^namespace madness {$/;"	n
madness	src/apps/chem/mp2.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/mp2.h	/^namespace madness {$/;"	n
madness	src/apps/chem/nemo.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/nemo.h	/^namespace madness {$/;"	n
madness	src/apps/chem/oep.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/oep.h	/^namespace madness {$/;"	n
madness	src/apps/chem/pcm.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/pcm.h	/^namespace madness {$/;"	n
madness	src/apps/chem/pointgroupoperator.h	/^namespace madness {$/;"	n
madness	src/apps/chem/pointgroupsymmetry.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/pointgroupsymmetry.h	/^namespace madness {$/;"	n
madness	src/apps/chem/potentialmanager.h	/^namespace madness {$/;"	n
madness	src/apps/chem/projector.h	/^namespace madness {$/;"	n
madness	src/apps/chem/test_pointgroupsymmetry.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/test_utilities.h	/^namespace madness {$/;"	n
madness	src/apps/chem/xcfunctional.h	/^namespace madness {$/;"	n
madness	src/apps/chem/xcfunctional_ldaonly.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/xcfunctional_libxc.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/zcis.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/zcis.h	/^namespace madness {$/;"	n
madness	src/apps/chem/znemo.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/chem/znemo.h	/^namespace madness {$/;"	n
madness	src/apps/hf/complexfun.h	/^namespace madness {$/;"	n
madness	src/apps/hf/dft.cc	/^namespace madness$/;"	n	file:
madness	src/apps/hf/dft.h	/^namespace madness$/;"	n
madness	src/apps/hf/eigsolver.cc	/^namespace madness$/;"	n	file:
madness	src/apps/hf/eigsolver.h	/^namespace madness$/;"	n
madness	src/apps/hf/electronicstructureparams.h	/^namespace madness {$/;"	n
madness	src/apps/hf/hartreefock.cc	/^namespace madness$/;"	n	file:
madness	src/apps/hf/hartreefock.h	/^namespace madness$/;"	n
madness	src/apps/hf/poperator.h	/^namespace madness$/;"	n
madness	src/apps/hf/solver.h	/^namespace madness$/;"	n
madness	src/apps/hf/util.h	/^namespace madness {$/;"	n
madness	src/apps/ii/systolic.h	/^namespace madness {$/;"	n
madness	src/apps/polar/diago.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/polar/lda.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/polar/xcfunctional.h	/^namespace madness {$/;"	n
madness	src/apps/polar/xcfunctional_ldaonly.cc	/^namespace madness {$/;"	n	file:
madness	src/apps/polar/xcfunctional_libxc.cc	/^namespace madness {$/;"	n	file:
madness	src/examples/spectralprop.h	/^namespace madness {$/;"	n
madness	src/examples/testspectralprop.cc	/^namespace madness {$/;"	n	file:
madness	src/examples/tiny.cc	/^namespace madness{$/;"	n	file:
madness	src/madness.h	/^namespace madness {$/;"	n
madness	src/madness/constants.h	/^namespace madness {$/;"	n
madness	src/madness/misc/checksum_file.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/misc/gitinfo.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/misc/gitinfo.h	/^namespace madness {$/;"	n
madness	src/madness/misc/gprofexit.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/misc/misc.h	/^namespace madness {$/;"	n
madness	src/madness/misc/position_stream.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/misc/ran.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/misc/ran.h	/^namespace madness {$/;"	n
madness	src/madness/mra/adquad.h	/^namespace madness {$/;"	n
madness	src/madness/mra/convolution1d.h	/^namespace madness {$/;"	n
madness	src/madness/mra/derivative.h	/^namespace madness {$/;"	n
madness	src/madness/mra/displacements.h	/^namespace madness {$/;"	n
madness	src/madness/mra/funcdefaults.h	/^namespace madness {$/;"	n
madness	src/madness/mra/funcimpl.h	/^namespace madness {$/;"	n
madness	src/madness/mra/funcplot.h	/^namespace madness {$/;"	n
madness	src/madness/mra/function_common_data.h	/^namespace madness {$/;"	n
madness	src/madness/mra/function_factory.h	/^namespace madness {$/;"	n
madness	src/madness/mra/function_interface.h	/^namespace madness {$/;"	n
madness	src/madness/mra/functypedefs.h	/^namespace madness {$/;"	n
madness	src/madness/mra/gfit.h	/^namespace madness {$/;"	n
madness	src/madness/mra/indexit.h	/^namespace madness {$/;"	n
madness	src/madness/mra/key.h	/^namespace madness {$/;"	n
madness	src/madness/mra/lbdeux.h	/^namespace madness {$/;"	n
madness	src/madness/mra/leafop.h	/^namespace madness {$/;"	n
madness	src/madness/mra/legendre.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/legendre.h	/^namespace madness {$/;"	n
madness	src/madness/mra/mra.h	/^namespace madness {$/;"	n
madness	src/madness/mra/mra1.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/mra2.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/mra3.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/mra4.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/mra5.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/mra6.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/mraimpl.h	/^namespace madness {$/;"	n
madness	src/madness/mra/mypmap.h	/^namespace madness {$/;"	n
madness	src/madness/mra/nonlinsol.h	/^namespace madness {$/;"	n
madness	src/madness/mra/operator.h	/^namespace madness {$/;"	n
madness	src/madness/mra/power.h	/^namespace madness {$/;"	n
madness	src/madness/mra/qmprop.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/qmprop.h	/^namespace madness {$/;"	n
madness	src/madness/mra/sdf_domainmask.h	/^namespace madness {$/;"	n
madness	src/madness/mra/sdf_shape_2D.h	/^namespace madness {$/;"	n
madness	src/madness/mra/sdf_shape_3D.h	/^namespace madness {$/;"	n
madness	src/madness/mra/simplecache.h	/^namespace madness {$/;"	n
madness	src/madness/mra/startup.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/test_sepop.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/testsuite.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/twoscale.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/mra/twoscale.h	/^namespace madness {$/;"	n
madness	src/madness/mra/vmra.h	/^namespace madness {$/;"	n
madness	src/madness/mra/vmra1.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/aligned.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/basetensor.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/basetensor.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/cblas.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/cblas_types.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/distributed_matrix.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/elem.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/elem.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/gentensor.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/gmres.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/lapack.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/lapacke_types.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/lowranktensor.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/mtxmq_bg/bgp_cc.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/mtxmq_bg/bgp_cr.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/mtxmq_bg/bgp_rc.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/mtxmq_bg/bgp_rr.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/mtxmq_bg/bgq_mtxm.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/mtxmq_graveyard/mtxmq.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/mxm.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/slice.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/solvers.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/solvers.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/srconf.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/systolic.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/tensor.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/tensor.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/tensor_lapack.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/tensorexcept.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/tensoriter.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/tensoriter.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/tensortrain.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/test_elemental.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/tensor/type_data.h	/^namespace madness {$/;"	n
madness	src/madness/tensor/vector_factory.h	/^namespace madness {$/;"	n
madness	src/madness/world/archive.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/archive.h	/^namespace madness {$/;"	n
madness	src/madness/world/archive_type_names.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/array_addons.h	/^namespace madness {$/;"	n
madness	src/madness/world/atomicint.h	/^namespace madness {$/;"	n
madness	src/madness/world/binary_fstream_archive.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/binary_fstream_archive.h	/^namespace madness {$/;"	n
madness	src/madness/world/binsorter.h	/^namespace madness {$/;"	n
madness	src/madness/world/buffer_archive.h	/^namespace madness {$/;"	n
madness	src/madness/world/cereal_archive.h	/^namespace madness {$/;"	n
madness	src/madness/world/debug.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/deferred_cleanup.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/deferred_cleanup.h	/^namespace madness {$/;"	n
madness	src/madness/world/dependency_interface.h	/^namespace madness {$/;"	n
madness	src/madness/world/dist_cache.h	/^namespace madness {$/;"	n
madness	src/madness/world/distributed_id.h	/^namespace madness {$/;"	n
madness	src/madness/world/dqueue.h	/^namespace madness {$/;"	n
madness	src/madness/world/function_traits.h	/^namespace madness {$/;"	n
madness	src/madness/world/future.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/future.h	/^namespace madness {$/;"	n
madness	src/madness/world/group.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/group.h	/^namespace madness {$/;"	n
madness	src/madness/world/hardware.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/hardware.h	/^namespace madness {$/;"	n
madness	src/madness/world/info.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/info.h	/^namespace madness {$/;"	n
madness	src/madness/world/madness_exception.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/madness_exception.h	/^namespace madness {$/;"	n
madness	src/madness/world/mem_func_wrapper.h	/^namespace madness {$/;"	n
madness	src/madness/world/meta.h	/^namespace madness {$/;"	n
madness	src/madness/world/mpi_archive.h	/^namespace madness {$/;"	n
madness	src/madness/world/parallel_archive.h	/^namespace madness {$/;"	n
madness	src/madness/world/parsec.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/parsec.h	/^namespace madness{$/;"	n
madness	src/madness/world/print.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/print.h	/^namespace madness {$/;"	n
madness	src/madness/world/print_seq.h	/^namespace madness {$/;"	n
madness	src/madness/world/range.h	/^namespace madness {$/;"	n
madness	src/madness/world/redirectio.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/stack.h	/^namespace madness {$/;"	n
madness	src/madness/world/taskfn.h	/^namespace madness {$/;"	n
madness	src/madness/world/test_ar.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/test_hashdc.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/text_fstream_archive.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/text_fstream_archive.h	/^namespace madness {$/;"	n
madness	src/madness/world/thread.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/thread.h	/^namespace madness {$/;"	n
madness	src/madness/world/timers.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/timers.h	/^namespace madness {$/;"	n
madness	src/madness/world/type_traits.h	/^namespace madness {$/;"	n
madness	src/madness/world/uniqueid.h	/^namespace madness {$/;"	n
madness	src/madness/world/vector.h	/^namespace madness {$/;"	n
madness	src/madness/world/vector_archive.h	/^namespace madness {$/;"	n
madness	src/madness/world/world.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/world.h	/^namespace madness {$/;"	n
madness	src/madness/world/world_object.h	/^namespace madness {$/;"	n
madness	src/madness/world/world_task_queue.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/world_task_queue.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldam.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/worldam.h	/^namespace madness {$/;"	n
madness	src/madness/world/worlddc.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldgop.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/worldgop.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldhash.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldhashmap.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldinit.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldmem.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/worldmem.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldmpi.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/worldmpi.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldmutex.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/worldmutex.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldpapi.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/worldpapi.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldprofile.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/worldprofile.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldptr.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldref.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/worldref.h	/^namespace madness {$/;"	n
madness	src/madness/world/worldrmi.cc	/^namespace madness {$/;"	n	file:
madness	src/madness/world/worldrmi.h	/^namespace madness {$/;"	n
madness_function	src/madness/world/parsec.cc	/^        const dague_function_t madness_function = {$/;"	v
madness_function_array	src/madness/world/parsec.cc	/^        const dague_function_t* madness_function_array[]= {&(madness::madness_function), NULL};$/;"	v
madness_handle	src/madness/world/parsec.cc	/^        dague_handle_t madness_handle = {$/;"	v
madness_initialized_	src/madness/world/world.cc	/^        bool madness_initialized_ = false;  \/\/\/< Tracks if MADNESS has been initialized.$/;"	m	namespace:madness::__anon11	file:
madness_quiet_	src/madness/world/world.cc	/^        bool madness_quiet_ = false;  \/\/\/< Tracks if madness::initialize() requested quiet operation$/;"	m	namespace:madness::__anon11	file:
madness_signal_action	src/madness/world/test_sig.cc	/^void madness_signal_action(int signum, siginfo_t *info, void *context) {$/;"	f
magfunc	src/examples/test_gmres.cc	/^static double magfunc(const Vector<double, 3> &pt) {$/;"	f	file:
main	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/CheckTypeSize/HAVE_INT64_T.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/CheckTypeSize/HAVE_LONG_DOUBLE.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/CheckTypeSize/HAVE_LONG_LONG.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	src/apps/adrian/adrianXY.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/adrian/driver4.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/adrian/driver5.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/adrian/test_Gamma.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/adrian/test_ResponseFunction.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/adrian/test_ops.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/bryan/driver4.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/bryan/driver5.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/bryan/test_Gamma.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/bryan/test_ResponseFunction.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/bryan/test_ops.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/chem/plotxc.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/chem/test_MolecularOrbitals.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/chem/test_QCCalculationParametersBase.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/chem/test_SCFOperators.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/chem/test_dft.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/chem/test_masks_and_boxes.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/chem/test_pointgroupsymmetry.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/chem/test_qc.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/chem/testlda.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/chem/testxc.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/cis/cis.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/exciting/scott.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/exciting/wannier.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/hf/ewald.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/hf/solver_driver.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/hf/test_be.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/hf/test_comm.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/hf/test_coulomb.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/hf/test_he.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/hf/test_hf.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/hf/test_hydro.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/hf/test_lattice.cc	/^int main(int argc, char**argv)$/;"	f
main	src/apps/hf/test_xc.cc	/^int main(int argc, char** argv)$/;"	f
main	src/apps/hf/testconv.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/ii/eigen_solver.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/ii/hatom_energy.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/apps/ii/hello.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/apps/ii/localize_boys.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/ii/testsystolic.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/interior_bc/embedded_dirichlet.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/apps/moldft/mcpfit.cc	/^int main (int argc, char **argv) {$/;"	f
main	src/apps/moldft/moldft.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/moldft/preal.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/moldft/testcosine.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/moldft/testmolbas.cc	/^int main() {$/;"	f
main	src/apps/moldft/testperiodic.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/moldft/testpg.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/nick/hello.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/apps/nick/lineplot.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/nick/projPsi.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/apps/nick/tdse1.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/nick/test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/nick/wfSlice.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/pno/pno.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/polar/diago.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	src/apps/polar/mcpfit.cc	/^int main (int argc, char **argv) {$/;"	f
main	src/apps/polar/moldft.cc	/^int main(int argc, char **argv)$/;"	f
main	src/apps/polar/preal.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/polar/testmolbas.cc	/^int main() {$/;"	f
main	src/apps/polar/testperiodic.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/polar/testpg.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/polar/testxc.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/tdse/tdse.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/tdse/tdse.confused.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/apps/tdse/tdse4.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/3dharmonic.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/ac_corr.cc	/^int main(int argc, char** argv){$/;"	f
main	src/examples/array_worldobject.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/binaryop.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/cc2.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/colloid.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/examples/compiler/mra.cc	/^main (int argc, char *argv[])$/;"	f
main	src/examples/csqrt.cc	/^int main(int argc, char** argv)$/;"	f
main	src/examples/dataloadbal.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/density_smoothing.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/derivatives.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/dielectric.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/examples/dielectric_external_field.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/examples/functionio.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/gaussian.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/gygi_soltion.cc	/^int main(int argc, char **argv){$/;"	f
main	src/examples/h2.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/h2dft.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/h2dynamic.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/hatom_1d.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/hatom_energy.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/examples/he.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/heat.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/heat2.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/hedft.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/hefxc.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/hehf.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/helium_exact.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/helium_mp2.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/hello.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/madinfo.cc	/^int main() {$/;"	f
main	src/examples/molecularsurface.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/examples/mp2.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/navstokes_cosines.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/examples/nemo.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/newsolver.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/newsolver_lda.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/nonlinschro.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/oep.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/ploterr.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/sdf_shape_tester.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/examples/siam_example.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/examples/sininteg.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/svpe.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/examples/tdse1d.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/tdse_example.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/test_derivative.cc	/^int main(int argc,char** argv)$/;"	f
main	src/examples/test_gmres.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/examples/testsolver.cc	/^int main() {$/;"	f
main	src/examples/testspectralprop.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/tiny.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/vnucso.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/zcis.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/znemo.cc	/^int main() {$/;"	f
main	src/examples/znemo.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/external/elemental/examples/blas-like/Cannon.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/blas-like/Gemm.cpp	/^int main( int argc, char *argv[] ) $/;"	f
main	src/madness/external/elemental/examples/blas-like/Gemv.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/convex/BasisPursuit.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/convex/LinearProgram.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/convex/LogDetDiv.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/convex/QuadraticProgram.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/convex/RPCA.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/convex/SparseInvCov.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/core/Arbitrary.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/core/Constructors.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/core/LogicError.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/io/Read.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/io/Write.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/BunchKaufman.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/BusingerGolub.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/ChunkedPseudospectrum.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/ChunkedTriangularPseudospectrum.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/ComplexHermitianFunction.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/GLM.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/GaussianElimination.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/HPDInverse.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/HPSDCholesky.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/HPSDSquareRoot.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/HermitianEig.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/HermitianEigFromSequential.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/HermitianPseudoinverse.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/HermitianQDWH.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/HermitianSDC.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/HermitianSVD.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/ID.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/KyFanAndSchatten.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/LDL.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/LDLInverse.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/LSE.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/LeastSquares.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/Polar.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/Pseudoinverse.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/Pseudospectrum.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/QDWH.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/QR.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/RealHermitianFunction.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/RealSchur.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/RealSymmetricFunction.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/SVD.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/Schur.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/SequentialBunchKaufman.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/SequentialQR.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/SequentialSVD.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/Sign.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/SimpleSVD.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/Skeleton.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/SkewHermitianEig.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/lapack-like/TriangularPseudospectrum.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Cauchy.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/CauchyLike.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Circulant.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Diagonal.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Fourier.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Hankel.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Helmholtz1D.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Helmholtz2D.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Helmholtz3D.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/HermitianUniformSpectrum.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Hilbert.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Identity.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Kahan.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Legendre.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/LehmerParterRis.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/NormalUniformSpectrum.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/OneTwoOne.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Ones.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/PSFW.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/RiemannRedhefferGCD.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Toeplitz.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Uniform.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Walsh.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Wilkinson.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/examples/matrices/Zeros.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/experimental/g3d/G3DGemm.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-auto.cxx	/^int main()$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-auto_fail_compile.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-class_override_final_fail_compile.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-constexpr.cxx	/^int main()$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-cstdint_header.cxx	/^int main()$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-decltype.cxx	/^int main()$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-defaulted_functions.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-delegating_constructors.cxx	/^int main()$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-deleted_functions.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-deleted_functions_fail_compile.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-func_identifier.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-initializer_list.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-lambda.cxx	/^int main()$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-long_long.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-nullptr.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-nullptr_fail_compile.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-rvalue_references.cxx	/^int main()$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-sizeof_member.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-static_assert.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-static_assert_fail_compile.cxx	/^int main(void)$/;"	f
main	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-variadic_templates.cxx	/^int main()$/;"	f
main	src/madness/external/elemental/tests/blas-like/Gemm.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Hemm.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Her2k.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Herk.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/MultiShiftQuasiTrsm.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/QuasiTrsm.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Symm.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Symv.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Syr2k.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Syrk.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Trmm.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Trsm.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/Trsv.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/TwoSidedTrmm.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/blas-like/TwoSidedTrsm.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/convex/TSSVT.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/core/AxpyInterface.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/core/BasicBlockDistMatrix.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/core/BlockDistMatrix.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/core/Constants.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/core/DifferentGrids.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/core/DistMatrix.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/core/Matrix.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/core/Version.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/ApplyPackedReflectors.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/Bidiag.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/Cholesky.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/CholeskyMod.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/CholeskyQR.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/HermitianEig.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/HermitianGenDefiniteEig.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/HermitianTridiag.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/Hessenberg.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/LDL.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/LQ.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/LU.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/LUMod.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/MultiShiftHessSolve.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/QR.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/RQ.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/SequentialBidiag.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/SequentialCholeskyMod.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/SequentialHessenberg.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/SequentialLU.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/SequentialMultiShiftHessSolve.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/TSQR.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/elemental/tests/lapack-like/TriangularInverse.cpp	/^main( int argc, char* argv[] )$/;"	f
main	src/madness/external/gtest/src/gtest_main.cc	/^GTEST_API_ int main(int argc, char **argv) {$/;"	f
main	src/madness/misc/interp3.cc	/^int main() {$/;"	f
main	src/madness/mra/minmax/y.cc	/^int main() {$/;"	f
main	src/madness/mra/minmax/y1.cc	/^int main() {$/;"	f
main	src/madness/mra/minmax/y_signed.cc	/^int main() {$/;"	f
main	src/madness/mra/minmax/y_varx.cc	/^int main() {$/;"	f
main	src/madness/mra/mraplot.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/test6.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/test_mra6.cc	/^int main() {$/;"	f
main	src/madness/mra/test_mra6.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/mra/testbc.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testbsh.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testdiff1D.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/mra/testdiff1Db.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/mra/testdiff2D.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/mra/testdiff3D.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/mra/testgaxpyext.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/mra/testgconv.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testinnerext.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/mra/testopdir.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testpdiff.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/mra/testper.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testperiodic.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testproj.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testqm.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testsuite.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testunaryop.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/mra/testvmra.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/tensor/dummy_main.c	/^int main() {$/;"	f
main	src/madness/tensor/fred.cc	/^int main() {$/;"	f
main	src/madness/tensor/gfit.cc	/^int main() {$/;"	f
main	src/madness/tensor/jimkernel.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/tensor/kain.cc	/^int main() {$/;"	f
main	src/madness/tensor/miketest.cc	/^int main() {$/;"	f
main	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_Zmtxmq.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_mtxmq.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/madness/tensor/mtxmq_graveyard/new_mtxmq/__main__.py	/^import main$/;"	i
main	src/madness/tensor/mtxmq_graveyard/new_mtxmq/main.py	/^def main():$/;"	f
main	src/madness/tensor/mtxmq_graveyard/test_scott.cc	/^int main() {$/;"	f
main	src/madness/tensor/mtxmq_graveyard/test_scott.cc	/^int main(int argc, char** argv)$/;"	f
main	src/madness/tensor/oldtest.cc	/^int main() {$/;"	f
main	src/madness/tensor/test_Zmtxmq.cc	/^int main() {std::cout << "x86 only\\n"; return 0;}$/;"	f
main	src/madness/tensor/test_Zmtxmq.cc	/^int main(int argc, char * argv[]) {$/;"	f
main	src/madness/tensor/test_distributed_matrix.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/tensor/test_elemental.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/tensor/test_gentensor.cc	/^int main() {$/;"	f
main	src/madness/tensor/test_gentensor.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/tensor/test_linalg.cc	/^main(int argc, char* argv[]) {$/;"	f
main	src/madness/tensor/test_mtxmq.cc	/^int main() {std::cout << "x86 only\\n"; return 0;}$/;"	f
main	src/madness/tensor/test_mtxmq.cc	/^int main(int argc, char * argv[]) {$/;"	f
main	src/madness/tensor/test_solvers.cc	/^int main() {$/;"	f
main	src/madness/tensor/test_systolic.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/tensor/test_tensor.cc	/^int main() {$/;"	f
main	src/madness/tensor/test_tensor.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/tensor/testseprep.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/tensor/testseprep.cc	/^int main(int argc, char**argv) {$/;"	f
main	src/madness/world/lookup3.c	/^int main()$/;"	f
main	src/madness/world/test_ar.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	src/madness/world/test_atomicint.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_binsorter.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_dc.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_future.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_future2.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_future3.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_googletest.cc	/^int main() {$/;"	f
main	src/madness/world/test_googletest.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/madness/world/test_hashdc.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_hashthreaded.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_hello.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_list.cc	/^int main() {$/;"	f
main	src/madness/world/test_mpihang.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_papi.cc	/^int main() {$/;"	f
main	src/madness/world/test_prof.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_queue.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_sig.cc	/^int main() {$/;"	f
main	src/madness/world/test_stack.cc	/^int main() {$/;"	f
main	src/madness/world/test_stack.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/madness/world/test_sysctl.c	/^int main(int argc, char * argv[])$/;"	f
main	src/madness/world/test_tree.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_vec.cc	/^int main() {$/;"	f
main	src/madness/world/test_vector.cc	/^int main() {$/;"	f
main	src/madness/world/test_vector.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/madness/world/test_world.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_worldprofile.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/madness/world/test_worldptr.cc	/^int main() {$/;"	f
main	src/madness/world/test_worldptr.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/madness/world/test_worldref.cc	/^int main() {$/;"	f
main	src/madness/world/test_worldref.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/madness/world/thread.cc	/^    void* ThreadBase::main(void* self) {$/;"	f	class:madness::ThreadBase
main_hpmctx	src/madness/world/thread.cc	/^    unsigned int ThreadPool::main_hpmctx;$/;"	m	class:madness::ThreadPool	file:
main_hpmctx	src/madness/world/thread.h	/^        static unsigned int main_hpmctx; \/\/\/< HPM context for main thread.$/;"	m	class:madness::ThreadPool
main_instrumented	src/madness/world/thread.cc	/^    bool ThreadBase::main_instrumented;$/;"	m	class:madness::ThreadBase	file:
main_instrumented	src/madness/world/thread.h	/^        static bool main_instrumented; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::ThreadBase
main_thread	src/madness/world/thread.h	/^        ThreadPoolThread main_thread; \/\/\/< Placeholder for main thread tls.$/;"	m	class:madness::ThreadPool
make	src/madness/world/test_stack.cc	/^        static int* make(int i) {$/;"	f	struct:__anon3::StackTestBase
make	src/madness/world/test_stack.cc	/^        static std::shared_ptr<int> make(int i)$/;"	f	struct:__anon3::StackTestBase
make	src/madness/world/test_stack.cc	/^      static C make(int i) { return C(i); }$/;"	f	struct:__anon3::StackTestBase
make	src/madness/world/test_stack.cc	/^      static T make(int i) { return i; }$/;"	f	struct:__anon3::StackTestBase
make_6D_pair	src/apps/chem/CCPotentials.cc	/^  real_function_6d CCPotentials::make_6D_pair(const CCPair &pair)const{$/;"	f	class:madness::CCPotentials
make_BSHOperatorPtr	src/apps/chem/SCF.cc	/^void SCF::make_BSHOperatorPtr(World &world, tensorT &ak, tensorT &bk,$/;"	f	class:madness::SCF
make_BSHOperatorPtr	src/apps/polar/moldft.cc	/^void make_BSHOperatorPtr(World &world, tensorT &ak, tensorT &bk,$/;"	f	struct:Calculation
make_CIS_matrix	src/apps/chem/zcis.cc	/^Tensor<double_complex> Zcis::make_CIS_matrix(const Tensor<double>& veps, const Tensor<double>& act) const {$/;"	f	class:madness::Zcis
make_KffKphi0	src/apps/chem/mp2.cc	/^real_function_6d MP2::make_KffKphi0(const ElectronPair& pair) const {$/;"	f	class:madness::MP2
make_Rpsi	src/apps/chem/mp2.cc	/^real_function_6d MP2::make_Rpsi(const ElectronPair& pair) const {$/;"	f	class:madness::MP2
make_Uphi0	src/apps/chem/mp2.cc	/^real_function_6d MP2::make_Uphi0(ElectronPair& pair) const {$/;"	f	class:madness::MP2
make_Upsi	src/apps/moldft/mcpfit.cc	/^    vecfuncT make_Upsi (World & world, CorePotential & cp, vecfuncT & mo)$/;"	f	struct:Calculation
make_Upsi	src/apps/polar/mcpfit.cc	/^    vecfuncT make_Upsi (World & world, CorePotential & cp, vecfuncT & mo)$/;"	f	struct:Calculation
make_Vphi	src/madness/mra/funcimpl.h	/^        void make_Vphi(const opT& leaf_op, const bool fence=true) {$/;"	f	class:madness::FunctionImpl
make_all_parameter_doubles	src/apps/chem/test_qc.cc	/^	std::vector<CalculationParameters> make_all_parameter_doubles() const {$/;"	f	class:TestCalculationParameters
make_all_parameter_singles	src/apps/chem/test_qc.cc	/^	std::vector<CalculationParameters> make_all_parameter_singles() const {$/;"	f	class:TestCalculationParameters
make_all_parameters_for_one_key	src/apps/chem/test_qc.cc	/^	std::vector<CalculationParameters> make_all_parameters_for_one_key(const std::string& key) const {$/;"	f	class:TestCalculationParameters
make_all_parameters_for_two_keys	src/apps/chem/test_qc.cc	/^	std::vector<CalculationParameters> make_all_parameters_for_two_keys(const std::string& key1, const std::string& key2) const {$/;"	f	class:TestCalculationParameters
make_approx	src/madness/mra/convolution1d.h	/^        void make_approx(const Tensor<Q>& R,$/;"	f	struct:madness::ConvolutionData1D
make_atom_vec	src/apps/chem/AC.cc	/^std::vector<atom_information<3> > make_atom_vec(const std::string& input) {$/;"	f	namespace:madness
make_atom_vec	src/apps/chem/AC.cc	/^std::vector<atom_information<3> >make_atom_vec(const Molecule& molecule, double R1_, double R2_) {$/;"	f	namespace:madness
make_auto_polynom_strings	src/apps/chem/GuessFactory.cc	/^std::vector<std::string> make_auto_polynom_strings(const size_t order){$/;"	f	namespace:madness::guessfactory
make_basis	src/apps/moldft/testcosine.cc	/^vector_complex_function_3d make_basis(World& world, double maxKlen) {$/;"	f
make_bonds	src/apps/moldft/moldx.py	/^def make_bonds(coords, z, radii):$/;"	f
make_bonds	src/apps/polar/moldx.py	/^def make_bonds(coords, z, radii):$/;"	f
make_bra	src/apps/chem/CCPotentials.h	/^    vector_real_function_3d make_bra(const CC_vecfunction& t)const{$/;"	f	class:madness::CCPotentials
make_bra	src/apps/chem/CCPotentials.h	/^    vector_real_function_3d make_bra(const vector_real_function_3d &t)const{$/;"	f	class:madness::CCPotentials
make_bra	src/apps/chem/TDHF.h	/^	real_function_3d make_bra(const real_function_3d &ket)const{$/;"	f	class:madness::TDHF
make_bra	src/apps/chem/TDHF.h	/^	vector_real_function_3d make_bra(const CC_vecfunction &ket)const{$/;"	f	class:madness::TDHF
make_bra	src/apps/chem/TDHF.h	/^	vector_real_function_3d make_bra(const vector_real_function_3d &ket)const{$/;"	f	class:madness::TDHF
make_bra	src/apps/chem/znemo.cc	/^std::vector<complex_function_3d> Znemo::make_bra(const std::vector<complex_function_3d>& rhs) const {$/;"	f	class:madness::Znemo
make_bsh_operators	src/apps/chem/PNO.cpp	/^std::vector<PNO::poperatorT> PNO::make_bsh_operators(World& world, const tensorT& evals) const$/;"	f	class:madness::PNO
make_bsh_operators	src/apps/chem/SCF.cc	/^std::vector<poperatorT> SCF::make_bsh_operators(World &world, const tensorT &evals) const$/;"	f	class:madness::SCF
make_bsh_operators	src/apps/hf/eigsolver.cc	/^  void EigSolver<T,NDIM>::make_bsh_operators()$/;"	f	class:madness::EigSolver
make_bsh_operators	src/apps/hf/solver.h	/^    std::vector<poperatorT> make_bsh_operators(const std::vector<T>& eigs)$/;"	f	class:madness::Solver
make_bsh_operators	src/apps/moldft/preal.cc	/^    vector<poperatorT> make_bsh_operators(World& world, const real_tensor& evals, double shift)$/;"	f	class:MiniDFT
make_bsh_operators	src/apps/moldft/testperiodic.cc	/^vector<poperatorT> make_bsh_operators(World & world, const tensor_real& evals, double shift)$/;"	f
make_bsh_operators	src/apps/polar/moldft.cc	/^    std::vector<poperatorT> make_bsh_operators(World &world, const tensorT &evals)$/;"	f	struct:Calculation
make_bsh_operators	src/apps/polar/preal.cc	/^vector<poperatorT> make_bsh_operators(World & world, const real_tensor& evals, double shift)$/;"	f
make_bsh_operators	src/apps/polar/testperiodic.cc	/^vector<poperatorT> make_bsh_operators(World & world, const tensor_real& evals, double shift)$/;"	f
make_bsh_operators	src/examples/vnucso.cc	/^std::vector<poperatorT> make_bsh_operators(World& world, const Tensor<double>& evals, double tol)$/;"	f
make_c1_table	src/apps/chem/pointgroupsymmetry.cc	/^charactertable projector_irrep::make_c1_table() const {$/;"	f	class:madness::projector_irrep
make_c2_table	src/apps/chem/pointgroupsymmetry.cc	/^charactertable projector_irrep::make_c2_table() const {$/;"	f	class:madness::projector_irrep
make_c2h_table	src/apps/chem/pointgroupsymmetry.cc	/^charactertable projector_irrep::make_c2h_table() const {$/;"	f	class:madness::projector_irrep
make_c2v_table	src/apps/chem/pointgroupsymmetry.cc	/^charactertable projector_irrep::make_c2v_table() const {$/;"	f	class:madness::projector_irrep
make_cartesian_guess	src/apps/chem/PNOGuessFunctions.h	/^	std::vector<CartesianGaussian> make_cartesian_guess(const Atom& atom, int l,$/;"	f	class:madness::BasisFunctions
make_chi	src/apps/chem/mp2.cc	/^std::vector<real_function_3d> MP2::make_chi(const real_function_3d& phi,$/;"	f	class:madness::MP2
make_child	src/madness/mra/funcimpl.h	/^    	CoeffTracker make_child(const keyT& child) const {$/;"	f	class:madness::CoeffTracker
make_child	src/madness/mra/funcimpl.h	/^            this_type make_child(const keyT& child) const {$/;"	f	struct:madness::FunctionImpl::add_op
make_child	src/madness/mra/funcimpl.h	/^            this_type make_child(const keyT& child) const {$/;"	f	struct:madness::FunctionImpl::hartree_op
make_child	src/madness/mra/funcimpl.h	/^            this_type make_child(const keyT& child) const {$/;"	f	struct:madness::FunctionImpl::multiply_op
make_child	src/madness/mra/funcimpl.h	/^            this_type make_child(const keyT& child) const {$/;"	f	struct:madness::FunctionImpl::project_out_op
make_child	src/madness/mra/funcimpl.h	/^            this_type make_child(const keyT& child) const {$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
make_child	src/madness/mra/funcimpl.h	/^            this_type make_child(const keyT& child) const {$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
make_child	src/madness/mra/funcimpl.h	/^          this_type make_child(const keyT& child) const {$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
make_childrens_sum_coeffs	src/madness/mra/funcimpl.h	/^          tensorT make_childrens_sum_coeffs(const keyT& key) const {$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
make_ci_table	src/apps/chem/pointgroupsymmetry.cc	/^charactertable projector_irrep::make_ci_table() const {$/;"	f	class:madness::projector_irrep
make_cis_matrix	src/apps/chem/TDHF.cc	/^Tensor<double> TDHF::make_cis_matrix(const vector_real_function_3d virtuals,$/;"	f	class:madness::TDHF
make_coeff	src/madness/mra/function_interface.h	/^		Tensor<double> make_coeff(const Key<6>& key) const {$/;"	f	class:madness::TwoElectronInterface
make_constant_part_cc2_Qt_ex	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_constant_part_cc2_Qt_ex(const CCPair& u,const CC_vecfunction& tau,const CC_vecfunction& x,const real_convolution_6d* Gscreen) {$/;"	f	class:madness::CCPotentials
make_constant_part_cc2_Qt_gs	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_constant_part_cc2_Qt_gs(const CCPair& u,const CC_vecfunction& tau,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
make_constant_part_cc2_ex	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_constant_part_cc2_ex(const CCPair& u,const CC_vecfunction& tau,const CC_vecfunction& x,const real_convolution_6d* Gscreen) {$/;"	f	class:madness::CCPotentials
make_constant_part_cc2_gs	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_constant_part_cc2_gs(const CCPair& u,const CC_vecfunction& tau,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
make_constant_part_cispd	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_constant_part_cispd(const CCPair& u,const CC_vecfunction& x,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
make_constant_part_cispd_Qt	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_constant_part_cispd_Qt(const CCPair& u,const CC_vecfunction& x,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
make_constant_part_mp2	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_constant_part_mp2(const CCFunction& ti,const CCFunction& tj,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
make_coulomb_potential	src/apps/chem/SCF.h	/^	functionT make_coulomb_potential(const functionT& rho) const {$/;"	f	class:madness::SCF
make_coulomb_potential	src/apps/moldft/preal.cc	/^    real_function_3d make_coulomb_potential(World& world, const real_function_3d& rho)$/;"	f	class:MiniDFT
make_coulomb_potential	src/apps/moldft/testperiodic.cc	/^real_function_3d make_coulomb_potential(World& world, const real_function_3d& rho)$/;"	f
make_coulomb_potential	src/apps/polar/preal.cc	/^real_function_3d make_coulomb_potential(World& world, const real_function_3d& rho)$/;"	f
make_coulomb_potential	src/apps/polar/testperiodic.cc	/^real_function_3d make_coulomb_potential(World& world, const real_function_3d& rho)$/;"	f
make_cphf_constant_term	src/apps/chem/nemo.cc	/^vecfuncT Nemo::make_cphf_constant_term(const size_t iatom, const int iaxis,$/;"	f	class:madness::Nemo
make_cs_table	src/apps/chem/pointgroupsymmetry.cc	/^charactertable projector_irrep::make_cs_table() const {$/;"	f	class:madness::projector_irrep
make_d2_table	src/apps/chem/pointgroupsymmetry.cc	/^charactertable projector_irrep::make_d2_table() const {$/;"	f	class:madness::projector_irrep
make_d2h_table	src/apps/chem/pointgroupsymmetry.cc	/^charactertable projector_irrep::make_d2h_table() const {$/;"	f	class:madness::projector_irrep
make_ddensity	src/apps/chem/nemo.cc	/^real_function_3d Nemo::make_ddensity(const real_function_3d& rhonemo,$/;"	f	class:madness::Nemo
make_density	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_density(const CC_vecfunction& x) const {$/;"	f	class:madness::CCPotentials
make_density	src/apps/chem/SCF.cc	/^functionT SCF::make_density(World &world, const tensorT &occ,$/;"	f	class:madness::SCF
make_density	src/apps/chem/nemo.cc	/^real_function_3d Nemo::make_density(const Tensor<double>& occ,$/;"	f	class:madness::Nemo
make_density	src/apps/chem/nemo.cc	/^real_function_3d Nemo::make_density(const tensorT & occ,$/;"	f	class:madness::Nemo
make_density	src/apps/moldft/preal.cc	/^    real_function_3d make_density(World& world, const vector_real_function_3d& v) {$/;"	f	class:MiniDFT
make_density	src/apps/moldft/testperiodic.cc	/^real_function_3d make_density(World& world, const vector_complex_function_3d& v, double weight) {$/;"	f
make_density	src/apps/moldft/xmlguess.py	/^def make_density(n, aocc, amo, bocc, bmo):$/;"	f
make_density	src/apps/polar/moldft.cc	/^    functionT make_density(World &world, const tensorT &occ, const cvecfuncT &v)$/;"	f	struct:Calculation
make_density	src/apps/polar/moldft.cc	/^    functionT make_density(World &world, const tensorT &occ, const vecfuncT &v)$/;"	f	struct:Calculation
make_density	src/apps/polar/preal.cc	/^real_function_3d make_density(World& world, const vector_real_function_3d& v) {$/;"	f
make_density	src/apps/polar/testperiodic.cc	/^real_function_3d make_density(World& world, const vector_complex_function_3d& v) {$/;"	f
make_density	src/apps/polar/xmlguess.py	/^def make_density(n, aocc, amo, bocc, bmo):$/;"	f
make_density_ground	src/apps/chem/SCF.cc	/^functionT SCF::make_density_ground(World &world, functionT &arho, functionT &brho)$/;"	f	class:madness::SCF
make_density_ground	src/apps/polar/moldft.cc	/^functionT make_density_ground(World &world, functionT &arho, functionT &brho)$/;"	f	struct:Calculation
make_density_mask	src/examples/smooth.h	/^	Function<T,NDIM> make_density_mask(const Function<T,NDIM> &density)const{$/;"	f	class:smooth
make_derivative_density	src/apps/chem/SCF.cc	/^functionT SCF::make_derivative_density(World &world, const vecfuncT &mo,$/;"	f	class:madness::SCF
make_derivative_density	src/apps/polar/moldft.cc	/^functionT make_derivative_density(World &world, vecfuncT &x, vecfuncT &y,$/;"	f	struct:Calculation
make_dft_energy	src/apps/chem/SCF.h	/^	double make_dft_energy(World & world, const vecfuncT& vf, int ispin)$/;"	f	class:madness::SCF
make_dft_energy	src/apps/moldft/wst_functional.h	/^  double make_dft_energy(World& world, const XCfunctional& xc, const vector_real_function_3d& vf, int ispin)$/;"	f	class:WSTFunctional
make_dft_energy	src/apps/polar/moldft.cc	/^    double make_dft_energy(World &world, const vecfuncT &vf, int ispin)$/;"	f	struct:Calculation
make_dft_energy	src/examples/newsolver_lda.cc	/^double make_dft_energy(World & world, const vecfuncT& vf, int ispin)$/;"	f
make_dft_kernel	src/examples/newsolver_lda.cc	/^functionT make_dft_kernel(World & world, const vecfuncT& vf, int ispin, int what)$/;"	f
make_dft_potential	src/apps/moldft/wst_functional.h	/^  real_function_3d make_dft_potential(World& world, const XCfunctional& xc, const vector_real_function_3d& vf, int ispin, int what)$/;"	f	class:WSTFunctional
make_dft_potential	src/apps/polar/moldft.cc	/^    functionT make_dft_potential(World &world, const vecfuncT &vf, int ispin, int what)$/;"	f	struct:Calculation
make_dft_potential	src/examples/newsolver_lda.cc	/^functionT make_dft_potential(World & world, const vecfuncT& vf, int ispin, int what)$/;"	f
make_disp	src/madness/mra/displacements.h	/^        static void make_disp(int bmax) {$/;"	f	class:madness::Displacements
make_disp_periodicsum	src/madness/mra/displacements.h	/^        static void make_disp_periodicsum(int bmax, Level n) {$/;"	f	class:madness::Displacements
make_exp	src/apps/chem/SCF.cc	/^static Function<double_complex, 3> make_exp(double t, const Function<double, 3> &v)$/;"	f	namespace:madness
make_exp	src/apps/nick/tdse1.cc	/^complex_functionT make_exp(double t, const functionT& v) {$/;"	f
make_exp	src/apps/polar/moldft.cc	/^Function<double_complex, 3> make_exp(double t, const Function<double, 3> &v)$/;"	f
make_exp	src/apps/tdse/tdse.cc	/^complex_functionT make_exp(double t, const functionT& v) {$/;"	f
make_exp	src/apps/tdse/tdse.confused.cc	/^complex_functionT make_exp(double t, const functionT& v) {$/;"	f
make_exp	src/apps/tdse/tdse4.cc	/^complex_functionT make_exp(double t, const functionT& v) {$/;"	f
make_exp	src/examples/smooth.h	/^double make_exp(double x){$/;"	f
make_exp	src/madness/mra/testqm.cc	/^complex_function_1d make_exp(double t, const complex_function_1d& v) {$/;"	f
make_explog	src/examples/smooth.h	/^	Function<T,NDIM> make_explog(const Function<T,NDIM> &f, const std::string & msg="function")const{$/;"	f	class:smooth
make_fKphi0	src/apps/chem/mp2.cc	/^real_function_6d MP2::make_fKphi0(const int i, const int j) const {$/;"	f	class:madness::MP2
make_f_xy	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_f_xy(const CCFunction& x,const CCFunction& y,const real_convolution_6d* Gscreen) const {$/;"	f	class:madness::CCPotentials
make_fake_orbitals	src/apps/chem/diamagneticpotentialfactor.cc	/^std::vector<complex_function_3d> Diamagnetic_potential_factor::make_fake_orbitals(const int n,$/;"	f	class:madness::Diamagnetic_potential_factor
make_fock_matrix	src/apps/chem/SCF.cc	/^tensorT SCF::make_fock_matrix(World &world, const vecfuncT &psi,$/;"	f	class:madness::SCF
make_fock_matrix	src/apps/polar/moldft.cc	/^    tensorT make_fock_matrix(World &world, const vecfuncT &psi, const vecfuncT &Vpsi, const tensorT &occ, double &ekinetic)$/;"	f	struct:Calculation
make_full_t_intermediate	src/apps/chem/CCPotentials.cc	/^  CC_vecfunction CCPotentials::make_full_t_intermediate(const CC_vecfunction &tau)const{$/;"	f	class:madness::CCPotentials
make_func	src/apps/chem/xcfunctional_libxc.cc	/^static xc_func_type* make_func(int id, bool polarized) {$/;"	f	namespace:madness
make_func	src/apps/polar/xcfunctional_libxc.cc	/^static xc_func_type* make_func(int id, bool polarized) {$/;"	f	namespace:madness
make_g	src/madness/tensor/gfit.cc	/^    Tensor<double> make_g(const Tensor<double>& expnt) {$/;"	f	class:Fred	file:
make_gradbsh_operators	src/apps/chem/SCF.cc	/^std::vector<poperatorT> SCF::make_gradbsh_operators(World &world,$/;"	f	class:madness::SCF
make_guess	src/apps/chem/zcis.cc	/^std::vector<Zcis::root> Zcis::make_guess() const {$/;"	f	class:madness::Zcis
make_guess_from_initial_diagonalization	src/apps/chem/TDHF.cc	/^vector<CC_vecfunction> TDHF::make_guess_from_initial_diagonalization() const {$/;"	f	class:madness::TDHF
make_id	src/madness/world/thread.h	/^        make_id(std::pair<void*,unsigned short>& id, const fnobjT&) {$/;"	f	class:madness::PoolTaskInterface
make_id	src/madness/world/thread.h	/^        make_id(std::pair<void*,unsigned short>& id, fnT fn) {$/;"	f	class:madness::PoolTaskInterface
make_incomplete_hessian	src/apps/chem/nemo.cc	/^Tensor<double> Nemo::make_incomplete_hessian() const {$/;"	f	class:madness::Nemo
make_incomplete_hessian_response_part	src/apps/chem/nemo.cc	/^Tensor<double> Nemo::make_incomplete_hessian_response_part($/;"	f	class:madness::Nemo
make_input_arch	src/madness/world/worldam.h	/^        archive::BufferInputArchive make_input_arch() const {$/;"	f	class:madness::AmArg
make_interpolation	src/madness/misc/interpolation_1d.h	/^    void make_interpolation(const std::vector<double> &x, const std::vector<T> &p) {$/;"	f	class:CubicInterpolationTable
make_inv_mask	src/examples/smooth.h	/^	Function<T,NDIM> make_inv_mask(const Function<T,NDIM> &mask)const{$/;"	f	class:smooth
make_key_vec_map	src/madness/mra/funcimpl.h	/^        make_key_vec_map(const std::vector<const FunctionImpl<T,NDIM>*>& v) {$/;"	f	class:madness::FunctionImpl
make_kinetic_matrix	src/apps/hf/solver.h	/^    tensor_complex make_kinetic_matrix(World& world, const vector_complex_function_3d& v, const KPoint& k) {$/;"	f	class:madness::Solver
make_kinetic_matrix	src/apps/moldft/testcosine.cc	/^tensor_complex make_kinetic_matrix(World& world, const vector_complex_function_3d& v) {$/;"	f
make_kinetic_matrix	src/apps/moldft/testperiodic.cc	/^tensor_complex make_kinetic_matrix(World& world, const vector_complex_function_3d& v, const Vector<double,3>& kpt) {$/;"	f
make_kinetic_matrix	src/apps/polar/testperiodic.cc	/^tensor_complex make_kinetic_matrix(World& world, const vector_complex_function_3d& v) {$/;"	f
make_laplacian_density	src/apps/chem/nemo.cc	/^real_function_3d Nemo::make_laplacian_density(const real_function_3d& rhonemo) const {$/;"	f	class:madness::Nemo
make_lda_potential	src/apps/chem/SCF.cc	/^functionT SCF::make_lda_potential(World &world, const functionT &arho)$/;"	f	class:madness::SCF
make_lda_potential	src/apps/hf/solver.h	/^    make_lda_potential(World& world,$/;"	f	class:madness::Solver
make_lda_potential	src/apps/moldft/preal.cc	/^    real_function_3d make_lda_potential(World& world, const real_function_3d &rho)$/;"	f	class:MiniDFT
make_lda_potential	src/apps/moldft/testperiodic.cc	/^real_function_3d make_lda_potential(World& world, const real_function_3d &rho)$/;"	f
make_lda_potential	src/apps/polar/moldft.cc	/^    functionT make_lda_potential(World &world, const functionT &arho)$/;"	f	struct:Calculation
make_lda_potential	src/apps/polar/preal.cc	/^real_function_3d make_lda_potential(World& world, const real_function_3d &rho)$/;"	f
make_lda_potential	src/apps/polar/testperiodic.cc	/^real_function_3d make_lda_potential(World& world, const real_function_3d &rho)$/;"	f
make_libxc_args	src/apps/chem/xcfunctional_ldaonly.cc	/^void XCfunctional::make_libxc_args(const std::vector< madness::Tensor<double> >& t,$/;"	f	class:madness::XCfunctional
make_libxc_args	src/apps/chem/xcfunctional_libxc.cc	/^void XCfunctional::make_libxc_args(const std::vector< madness::Tensor<double> >& xc_args,$/;"	f	class:madness::XCfunctional
make_libxc_args	src/apps/polar/xcfunctional_libxc.cc	/^void XCfunctional::make_libxc_args(const std::vector< madness::Tensor<double> >& t,$/;"	f	class:madness::XCfunctional
make_linked_ptr	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^linked_ptr<T> make_linked_ptr(T* ptr) {$/;"	f	namespace:testing::internal
make_log	src/examples/smooth.h	/^double make_log(double x){$/;"	f
make_mask	src/examples/smooth.h	/^	Function<T,NDIM> make_mask(const Function<T,NDIM> &samplef, const double &thresh)const{$/;"	f	class:smooth
make_mo_bra	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_mo_bra(const Nemo& nemo) const {$/;"	f	class:madness::CCPotentials
make_mo_bra	src/apps/chem/TDHF.h	/^	CC_vecfunction make_mo_bra(const Nemo &nemo) const {$/;"	f	class:madness::TDHF
make_mo_ket	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_mo_ket(const Nemo& nemo) const {$/;"	f	class:madness::CCPotentials
make_mo_ket	src/apps/chem/TDHF.h	/^	CC_vecfunction make_mo_ket(const Nemo&nemo) const {$/;"	f	class:madness::TDHF
make_nuclear_charge_density	src/apps/hf/ewald.cc	/^rfunctionT make_nuclear_charge_density(World& world,$/;"	f
make_nuclear_charge_density_impl	src/apps/hf/solver.h	/^    void make_nuclear_charge_density_impl()$/;"	f	class:madness::Solver
make_nuclear_charge_density_individual	src/apps/hf/ewald.cc	/^rvecfuncT make_nuclear_charge_density_individual(World& world,$/;"	f
make_nuclear_potential	src/apps/chem/SCF.cc	/^void SCF::make_nuclear_potential(World &world)$/;"	f	class:madness::SCF
make_nuclear_potential	src/apps/chem/potentialmanager.h	/^    void make_nuclear_potential(World& world) {$/;"	f	class:madness::PotentialManager
make_nuclear_potential	src/apps/hf/solver.h	/^    void make_nuclear_potential()$/;"	f	class:madness::Solver
make_nuclear_potential	src/apps/polar/moldft.cc	/^    void make_nuclear_potential(World &world)$/;"	f	struct:Calculation
make_nuclear_potential	src/apps/polar/potentialmanager.h	/^    void make_nuclear_potential(World& world) {$/;"	f	class:PotentialManager
make_nuclear_potential_impl	src/apps/hf/solver.h	/^    void make_nuclear_potential_impl()$/;"	f	class:madness::Solver
make_old_guess	src/apps/chem/TDHF.cc	/^std::vector<CC_vecfunction> TDHF::make_old_guess(const vector_real_function_3d& f)const{$/;"	f	class:madness::TDHF
make_operator	src/madness/tensor/tensortrain.h	/^        TensorTrain<T>& make_operator() {$/;"	f	class:madness::TensorTrain
make_output_arch	src/madness/world/worldam.h	/^        archive::BufferOutputArchive make_output_arch() const {$/;"	f	class:madness::AmArg
make_overlap_matrix	src/apps/chem/TDHF.cc	/^Tensor<double> TDHF::make_overlap_matrix(const std::vector<CC_vecfunction> &x)const{$/;"	f	class:madness::TDHF
make_pair	src/apps/chem/mp2.cc	/^ElectronPair MP2::make_pair(const int i, const int j) const {$/;"	f	class:madness::MP2
make_pair_ex	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_pair_ex(const real_function_6d& u,const CC_vecfunction& tau,const CC_vecfunction& x,const size_t i,const size_t j,const CalcType ctype) const {$/;"	f	class:madness::CCPotentials
make_pair_gs	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_pair_gs(const real_function_6d& u,const CC_vecfunction& tau,const size_t i,const size_t j) const {$/;"	f	class:madness::CCPotentials
make_perturbed_fock_matrix	src/apps/chem/TDHF.cc	/^Tensor<double> TDHF::make_perturbed_fock_matrix(const std::vector<CC_vecfunction> &x, const std::vector<vector_real_function_3d> &V)const{$/;"	f	class:madness::TDHF
make_plots	src/apps/chem/nemo.h	/^    void make_plots(const real_function_3d &f,const std::string &name="function")const{$/;"	f	class:madness::Nemo
make_plots	src/examples/smooth.h	/^	void make_plots(const Function<T,NDIM> &f,const std::string &name="function")const{$/;"	f	class:smooth
make_potential	src/examples/nonlinschro.cc	/^real_function_1d make_potential(World& world, const real_function_1d& rho) {$/;"	f
make_potentials	src/apps/chem/TDHF.cc	/^std::vector<vector_real_function_3d> TDHF::make_potentials(const std::vector<CC_vecfunction> &x)const{$/;"	f	class:madness::TDHF
make_predefined_exop_strings	src/apps/chem/GuessFactory.cc	/^std::vector<std::string>make_predefined_exop_strings(const std::string what){$/;"	f	namespace:madness::guessfactory
make_projector	src/apps/chem/molopt.h	/^        Tensor<double> make_projector(const Molecule& molecule) {$/;"	f	class:madness::MolOpt
make_pseudo_potential	src/apps/chem/gth_pseudopotential.h	/^    void make_pseudo_potential(World& world) {$/;"	f	class:madness::GTHPseudopotential
make_pts	src/examples/derivatives.cc	/^std::vector<coord_3d> make_pts(size_t n, double lo, double hi) {$/;"	f
make_pw_matrix	src/apps/moldft/testcosine.cc	/^real_tensor make_pw_matrix(const std::vector<coord_3d>& gvecs) {$/;"	f
make_radius	src/examples/smooth.h	/^static double make_radius(const Vector<double,NDIM> &x){$/;"	f
make_redundant	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::make_redundant(const bool fence) {$/;"	f	class:madness::FunctionImpl
make_redundant_op	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::coeffT FunctionImpl<T,NDIM>::make_redundant_op(const keyT& key, const std::vector< Future<coeffT > >& v) {$/;"	f	class:madness::FunctionImpl
make_reference	src/apps/moldft/mcpfit.cc	/^    vecfuncT make_reference (World & world, vecfuncT & mo, tensorT & occ)$/;"	f	struct:Calculation
make_reference	src/apps/polar/mcpfit.cc	/^    vecfuncT make_reference (World & world, vecfuncT & mo, tensorT & occ)$/;"	f	struct:Calculation
make_sigma	src/apps/chem/nemo.cc	/^real_function_3d Nemo::make_sigma(const real_function_3d& rho1,$/;"	f	class:madness::Nemo
make_sigma	src/examples/smooth.h	/^	Function<T,NDIM> make_sigma(const Function<T,NDIM> &density)const{$/;"	f	class:smooth
make_slices	src/madness/tensor/srconf.h	/^		void make_slices() {$/;"	f	class:madness::SRConf
make_solidharmonic_guess	src/apps/chem/PNOGuessFunctions.h	/^	std::vector<SolidHarmonicGaussian> make_solidharmonic_guess(const Atom& atom, int l,$/;"	f	class:madness::BasisFunctions
make_structure	src/madness/tensor/srconf.h	/^		void make_structure(bool force=false) {$/;"	f	class:madness::SRConf
make_sum_coeffs	src/madness/mra/funcimpl.h	/^          coeffT make_sum_coeffs(const keyT& key) const {$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
make_surface_charge	src/examples/svpe.cc	/^    real_function_3d make_surface_charge(const real_function_3d& u) const {$/;"	f	class:SVPESolver
make_surfcharge	src/examples/colloid.cc	/^    realfunc make_surfcharge(const realfunc& u,const realfunc& surface,const realfunc& volume) const {$/;"	f	class:SurfaceMoleculeInteraction
make_surfcharge	src/examples/gygi_soltion.cc	/^  realfunc make_surfcharge(const realfunc& u) const {$/;"	f	class:GygiPot
make_t_intermediate	src/apps/chem/CCPotentials.cc	/^  CCFunction CCPotentials::make_t_intermediate(const CCFunction &tau)const{$/;"	f	class:madness::CCPotentials
make_t_intermediate	src/apps/chem/CCPotentials.cc	/^  CC_vecfunction CCPotentials::make_t_intermediate(const CC_vecfunction &tau, const double factor)const{$/;"	f	class:madness::CCPotentials
make_task_fn	src/madness/world/world_object.h	/^            static wrapperT make_task_fn(WorldObject<objT>* obj, memfnT memfn) {$/;"	f	struct:madness::detail::WorldObjectTaskHelper
make_task_fn	src/madness/world/world_object.h	/^            static wrapperT make_task_fn(const WorldObject<objT>* obj, memfnT memfn) {$/;"	f	struct:madness::detail::WorldObjectTaskHelper
make_task_fn	src/madness/world/world_object.h	/^            static wrapperT make_task_fn(const objT* obj, memfnT memfn) {$/;"	f	struct:madness::detail::WorldObjectTaskHelper
make_task_fn	src/madness/world/world_object.h	/^            static wrapperT make_task_fn(objT* obj, memfnT memfn) {$/;"	f	struct:madness::detail::WorldObjectTaskHelper
make_tdhf_potentials	src/apps/chem/TDHF.cc	/^std::vector<vector_real_function_3d> TDHF::make_tdhf_potentials(std::vector<CC_vecfunction> &x,const std::vector<CC_vecfunction> &y)const{$/;"	f	class:madness::TDHF
make_tensor	src/madness/tensor/tensortrain.h	/^        TensorTrain<T>& make_tensor() {$/;"	f	class:madness::TensorTrain
make_test	src/apps/chem/test_correlation_factor.h	/^	void make_test(){$/;"	f	struct:test_correlation_factor
make_tree	src/madness/world/group.h	/^            void make_tree(const ProcessID group_root, ProcessID& parent,$/;"	f	class:madness::Group::Impl
make_tree	src/madness/world/group.h	/^        void make_tree(const ProcessID group_root, ProcessID& parent,$/;"	f	class:madness::Group
make_tt_representation	src/madness/mra/operator.h	/^        TensorTrain<double> make_tt_representation(const Key<NDIM>& source,$/;"	f	class:madness::SeparatedConvolution
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_10_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_1_TUPLE_(T) make_tuple(const T0& f0) {$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_2_TUPLE_(T) make_tuple(const T0& f0, const T1& f1) {$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_3_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2) {$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_4_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_5_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_6_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_7_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_8_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline GTEST_9_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^inline tuple<> make_tuple() { return tuple<>(); }$/;"	f	namespace:std::tr1
make_virtuals	src/apps/chem/TDHF.cc	/^vector_real_function_3d TDHF::make_virtuals() const {$/;"	f	class:madness::TDHF
make_void	src/madness/world/type_traits.h	/^struct make_void {$/;"	s	namespace:madness::meta
make_xc_potential	src/apps/chem/SCFOperators.cc	/^real_function_3d XCOperator::make_xc_potential() const {$/;"	f	class:madness::XCOperator
make_xi	src/apps/chem/mp2.cc	/^std::vector<real_function_3d> MP2::make_xi(const real_function_3d& phi_i,$/;"	f	class:madness::MP2
make_xy_ff_ab	src/apps/chem/CCPotentials.h	/^    double make_xy_ff_ab(const CCFunction &x, const CCFunction &y, const CCFunction &a, const CCFunction &b)const{$/;"	f	class:madness::CCPotentials
make_xy_gf_ab	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_xy_gf_ab(const CCFunction& x,const CCFunction& y,const CCFunction& a,const CCFunction& b) const {$/;"	f	class:madness::CCPotentials
make_xy_op_ab	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_xy_op_ab(const CCFunction& x,const CCFunction& y,const CCConvolutionOperator& op,const CCFunction& a,const CCFunction& b) const {$/;"	f	class:madness::CCPotentials
make_xy_op_u	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_xy_op_u(const CCFunction& x,const CCFunction& y,const CCConvolutionOperator& op,const CCPairFunction& u) const {$/;"	f	class:madness::CCPotentials
make_xy_op_u	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_xy_op_u(const CCFunction& x,const CCFunction& y,const CCConvolutionOperator& op,const std::vector<CCPairFunction>& u) const {$/;"	f	class:madness::CCPotentials
make_xy_u	src/apps/chem/CCPotentials.cc	/^  CCPotentials::make_xy_u(const CCFunction& x,const CCFunction& y,const std::vector<CCPairFunction>& u) const {$/;"	f	class:madness::CCPotentials
make_xy_u	src/apps/chem/CCStructures.cc	/^  CCPairFunction::make_xy_u(const CCFunction& xx,const CCFunction& yy) const {$/;"	f	class:madness::CCPairFunction
makeao	src/apps/moldft/preal.cc	/^    vector_real_function_3d makeao(World& world, const Molecule& molecule) {$/;"	f	class:MiniDFT
makeao	src/apps/moldft/testperiodic.cc	/^vector_complex_function_3d makeao(World& world, const std::vector<Vector<double,3> >& kpts, double R) {$/;"	f
makeao	src/apps/polar/preal.cc	/^vector_real_function_3d makeao(World& world) {$/;"	f
makeao	src/apps/polar/testperiodic.cc	/^vector_complex_function_3d makeao(World& world) {$/;"	f
makeao_real	src/apps/polar/preal.cc	/^vector_real_function_3d makeao_real(World& world) {$/;"	f
makeao_slow	src/apps/moldft/testperiodic.cc	/^vector_complex_function_3d makeao_slow(World& world, const std::vector<Vector<double,3> >& kpoints) {$/;"	f
makedata	src/madness/mra/minmax/y.cc	/^void makedata(const vector<FLOAT>& x, const vector<FLOAT>& f, const vector<FLOAT>& p, $/;"	f
makedata	src/madness/mra/minmax/y1.cc	/^void makedata(const vector<FLOAT>& x, const vector<FLOAT>& f, const vector<FLOAT>& p, $/;"	f
makedata	src/madness/mra/minmax/y_signed.cc	/^void makedata(const vector<FLOAT>& x, const vector<FLOAT>& f, const vector<FLOAT>& p, $/;"	f
makedata	src/madness/mra/minmax/y_varx.cc	/^void makedata(const vector<FLOAT>& x, const vector<FLOAT>& f, const vector<FLOAT>& p, $/;"	f
many_to_many_op	src/madness/mra/testvmra.cc	/^    many_to_many_op() : result_size(2) {}$/;"	f	struct:many_to_many_op
many_to_many_op	src/madness/mra/testvmra.cc	/^struct many_to_many_op {$/;"	s	file:
map	src/apps/ii/systolic.h	/^        std::vector<int64_t> map;       \/\/< Used to keep track of actual row indices$/;"	m	class:madness::SystolicMatrixAlgorithm
map	src/apps/polar/xcfunctional_libxc.cc	/^static xc_name_map map[] = {$/;"	m	namespace:madness	file:
map	src/madness/mra/convolution1d.h	/^        static ConcurrentHashMap<hashT, std::shared_ptr< GaussianConvolution1D<Q> > > map;$/;"	m	struct:madness::GaussianConvolution1DCache
map	src/madness/mra/funcimpl.h	/^            std::vector<long> map,mirror;$/;"	m	struct:madness::FunctionImpl::do_map_and_mirror
map	src/madness/mra/funcimpl.h	/^            std::vector<long> map;$/;"	m	struct:madness::FunctionImpl::do_mapdim
map	src/madness/mra/function_common_data.h	/^        typedef ConcurrentHashMap<int,double> map;$/;"	t	class:madness::Timer
map	src/madness/mra/lbdeux.h	/^        mapT map;$/;"	m	class:madness::LBDeuxPmap
map	src/madness/mra/mra1.cc	/^    GaussianConvolution1DCache<double>::map = ConcurrentHashMap< hashT, std::shared_ptr< GaussianConvolution1D<double> > >();$/;"	m	class:madness::GaussianConvolution1DCache	file:
map	src/madness/mra/mra1.cc	/^    GaussianConvolution1DCache<double_complex>::map = ConcurrentHashMap< hashT, std::shared_ptr< GaussianConvolution1D<double_complex> > >();$/;"	m	class:madness::GaussianConvolution1DCache	file:
map	src/madness/mra/tools/longfloat.py	/^    def map(self,x):$/;"	m	class:interptable
map	src/madness/tensor/systolic.h	/^        std::vector<int64_t> map;       \/\/\/< Used to keep track of actual row indices$/;"	m	class:madness::SystolicMatrixAlgorithm
mapT	src/madness/mra/funcimpl.h	/^        typedef ConcurrentHashMap< keyT, mapvecT > mapT;$/;"	t	class:madness::FunctionImpl
mapT	src/madness/mra/lbdeux.h	/^        typedef std::map<keyT,ProcessID> mapT;$/;"	t	class:madness::LBDeuxPmap
mapT	src/madness/mra/simplecache.h	/^        typedef ConcurrentHashMap< Key<NDIM>, Q > mapT;$/;"	t	class:madness::SimpleCache
map_and_mirror	src/madness/mra/mra.h	/^        Function<T,NDIM>& map_and_mirror(const Function<T,NDIM>& f,$/;"	f	class:madness::Function
map_and_mirror	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::map_and_mirror(const implT& f, const std::vector<long>& map,$/;"	f	class:madness::FunctionImpl
map_coeff	src/madness/mra/function_interface.h	/^		Tensor<double> map_coeff(const Tensor<double>& c) const {$/;"	f	class:madness::TwoElectronInterface
map_id_to_ptr	src/madness/world/world.h	/^        map_id_to_ptrT map_id_to_ptr; \/\/\/< \\todo Verify: Map from the hash ID to a pointer.$/;"	m	class:madness::World
map_id_to_ptrT	src/madness/world/world.h	/^        typedef madness::ConcurrentHashMap<uniqueidT, void *, hashuniqueT> map_id_to_ptrT;$/;"	t	class:madness::World
map_ptr_to_id	src/madness/world/world.h	/^        map_ptr_to_idT map_ptr_to_id; \/\/\/< \\todo Verify: Map from a pointer to its unique hash ID.$/;"	m	class:madness::World
map_ptr_to_idT	src/madness/world/world.h	/^        typedef madness::ConcurrentHashMap<void *, uniqueidT, hashvoidp> map_ptr_to_idT;$/;"	t	class:madness::World
map_short_complex_double	src/madness/world/test_ar.cc	/^        typedef std::map< short,std::complex<double> > map_short_complex_double;$/;"	t	namespace:madness::archive	file:
map_tensor	src/madness/tensor/gfit.cc	/^Tensor<double> map_tensor(double (*f)(double), const Tensor<double>& x) {$/;"	f
map_to_comm_world	src/madness/world/worldam.h	/^        std::vector<int> map_to_comm_world; \/\/\/< Maps rank in current MPI communicator to SafeMPI::COMM_WORLD$/;"	m	class:madness::WorldAmInterface
map_type	src/madness/external/muParser/muParserBytecode.h	/^    typedef bytecode_type map_type;$/;"	t	class:mu::ParserByteCode
map_type	src/madness/mra/mypmap.h	/^        unsigned int map_type; \/\/ 0 = simple map, 1 = gaussian distributed map, 2 = treecoords list$/;"	m	class:madness::MyPmap
mapdim	src/madness/mra/mra.h	/^        Function<T,NDIM>& mapdim(const Function<T,NDIM>& f, const std::vector<long>& map, bool fence) {$/;"	f	class:madness::Function
mapdim	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::mapdim(const implT& f, const std::vector<long>& map, bool fence) {$/;"	f	class:madness::FunctionImpl
mapdim	src/madness/tensor/tensor.h	/^        Tensor<T> mapdim(const std::vector<long>& map) {$/;"	f	class:madness::Tensor
mapdim	src/madness/tensor/tensor.h	/^        const Tensor<T> mapdim(const std::vector<long>& map) const {$/;"	f	class:madness::Tensor
mapdim_	src/apps/chem/pointgroupoperator.h	/^    std::vector<long> mapdim_;$/;"	m	class:madness::pg_operator
mapdim_inplace	src/madness/tensor/basetensor.cc	/^    void BaseTensor::mapdim_inplace(const std::vector<long>& map) {$/;"	f	class:madness::BaseTensor
mapvecT	src/madness/mra/funcimpl.h	/^        typedef std::vector< std::pair<int,const coeffT*> > mapvecT;$/;"	t	class:madness::FunctionImpl
mary	src/madness/world/test_world.cc	/^    static int mary() {$/;"	f	class:TTT
mask	src/apps/adrian/TDDFT.h	/^  real_function_3d mask;$/;"	m	class:TDHF
mask	src/apps/adrian/TDHF.h	/^      real_function_3d mask;$/;"	m	class:TDHF
mask	src/apps/adrian/TDHF2.h	/^      real_function_3d mask;$/;"	m	class:TDHF
mask	src/apps/bryan/TDHF.h	/^      real_function_3d mask;$/;"	m	class:TDHF
mask	src/apps/bryan/TDHF2.h	/^      real_function_3d mask;$/;"	m	class:TDHF
mask	src/apps/chem/SCF.h	/^	functionT mask;$/;"	m	class:madness::SCF
mask	src/apps/moldft/mcpfit.cc	/^    functionT mask;$/;"	m	struct:Calculation	file:
mask	src/apps/polar/mcpfit.cc	/^    functionT mask;$/;"	m	struct:Calculation	file:
mask	src/apps/polar/moldft.cc	/^    functionT mask;$/;"	m	struct:Calculation	file:
mask	src/examples/molecularmask.h	/^    double mask(double s) const {$/;"	f	class:MolecularMaskBase
mask	src/madness/mra/sdf_domainmask.h	/^        double mask(double d) const {$/;"	f	class:madness::GaussianDomainMask
mask	src/madness/mra/sdf_domainmask.h	/^        double mask(double d) const {$/;"	f	class:madness::LLRVDomainMask
mask	src/madness/mra/sdf_domainmask.h	/^        std::shared_ptr<DomainMaskInterface> mask;$/;"	m	class:madness::DomainMaskSDFFunctor
mask	src/madness/mra/testqm.cc	/^double mask(const coord_1d& r) {$/;"	f
mask1	src/apps/adrian/TDDFT.cc	/^inline double mask1(double x) {$/;"	f
mask1	src/apps/adrian/TDHF.cc	/^inline double mask1(double x) {$/;"	f
mask1	src/apps/adrian/TDHF2.cc	/^inline double mask1(double x) {$/;"	f
mask1	src/apps/bryan/TDHF.cc	/^inline double mask1(double x) {$/;"	f
mask1	src/apps/bryan/TDHF2.cc	/^inline double mask1(double x) {$/;"	f
mask1	src/apps/chem/SCF.h	/^inline double mask1(double x) {$/;"	f	namespace:madness
mask1	src/apps/moldft/mcpfit.cc	/^inline double mask1(double x) {$/;"	f
mask1	src/apps/polar/mcpfit.cc	/^inline double mask1(double x) {$/;"	f
mask1	src/apps/polar/moldft.cc	/^inline double mask1(double x)$/;"	f
mask3	src/apps/adrian/TDDFT.cc	/^static double mask3(const coord_3d &ruser) {$/;"	f	file:
mask3	src/apps/adrian/TDHF.cc	/^static double mask3(const coord_3d& ruser) {$/;"	f	file:
mask3	src/apps/adrian/TDHF2.cc	/^static double mask3(const coord_3d& ruser) {$/;"	f	file:
mask3	src/apps/bryan/TDHF.cc	/^static double mask3(const coord_3d& ruser) {$/;"	f	file:
mask3	src/apps/bryan/TDHF2.cc	/^static double mask3(const coord_3d& ruser) {$/;"	f	file:
mask3	src/apps/chem/SCF.h	/^static double mask3(const coordT& ruser) {$/;"	f	namespace:madness
mask3	src/apps/moldft/mcpfit.cc	/^double mask3(const coordT& ruser) {$/;"	f
mask3	src/apps/polar/mcpfit.cc	/^double mask3(const coordT& ruser) {$/;"	f
mask3	src/apps/polar/moldft.cc	/^double mask3(const coordT &ruser)$/;"	f
mask_	src/examples/smooth.h	/^	Function<T,NDIM> mask_;$/;"	m	class:smooth
mask_factor	src/examples/smooth.h	/^static double mask_factor = 5.0;$/;"	v
mask_functor	src/examples/smooth.h	/^		mask_functor(const double &factor, const double &cutoff): factor_(factor), cutoff_radius_(cutoff), shift_(0.0){}$/;"	f	struct:smooth::mask_functor
mask_functor	src/examples/smooth.h	/^		mask_functor(const double &factor, const double &cutoff, const Vector<double,NDIM> shift): factor_(factor), cutoff_radius_(cutoff), shift_(shift){std::cout << "shift is " << shift_ << std::endl;}$/;"	f	struct:smooth::mask_functor
mask_functor	src/examples/smooth.h	/^	struct mask_functor{$/;"	s	class:smooth
mask_functor_box	src/examples/smooth.h	/^static double mask_functor_box(const coord_3d &x){$/;"	f
mask_info	src/madness/tensor/lapack.cc	/^    static void mask_info(integer& info) {$/;"	f	namespace:madness
mask_munging	src/examples/smooth.h	/^static double mask_munging(const double x){$/;"	f
mass	src/apps/chem/atomutil.h	/^    const double mass;              \/\/\/< the atomic mass$/;"	m	struct:madness::AtomicData
mass	src/apps/chem/molecule.h	/^    double mass;                \/\/\/< Mass$/;"	m	class:madness::Atom
massweights	src/apps/chem/molecule.h	/^    Tensor<double> massweights() const {$/;"	f	class:madness::Molecule
match	src/madness/world/worldhashmap.h	/^            entryT* match(const keyT& key) const {$/;"	f	class:madness::Hash_private::bin
match_sub_tree	src/examples/compiler/mra-driver.hh	/^    bool match_sub_tree(const Exp* t) const {$/;"	f	class:Exp
matches_filter_	src/madness/external/gtest/include/gtest/gtest.h	/^  bool matches_filter_;             \/\/ True if this test matches the$/;"	m	class:testing::TestInfo
math	src/apps/moldft/moldx.py	/^import math, sys$/;"	i
math	src/apps/nick/spawnK.py	/^import sys, math$/;"	i
math	src/apps/polar/moldx.py	/^import math, sys$/;"	i
math	src/madness/mra/tools/twoscalecoeffs.py	/^import math$/;"	i
mathutil	src/madness/mra/tools/twoscalecoeffs.py	/^import mathutil$/;"	i
matrix	src/apps/moldft/xmlguess.py	/^def matrix(n,m):$/;"	f
matrix	src/apps/polar/xmlguess.py	/^def matrix(n,m):$/;"	f
matrix	src/madness/mra/minmax/y.cc	/^    matrix() : v(), n(0), m(0) {}$/;"	f	class:matrix
matrix	src/madness/mra/minmax/y.cc	/^    matrix(int n, int m, const FLOAT& value=0) : v(n*m), n(n), m(m) $/;"	f	class:matrix
matrix	src/madness/mra/minmax/y.cc	/^class matrix {$/;"	c	file:
matrix	src/madness/mra/minmax/y1.cc	/^    matrix() : v(), n(0), m(0) {}$/;"	f	class:matrix
matrix	src/madness/mra/minmax/y1.cc	/^    matrix(int n, int m, const FLOAT& value=0) : v(n*m), n(n), m(m) $/;"	f	class:matrix
matrix	src/madness/mra/minmax/y1.cc	/^class matrix {$/;"	c	file:
matrix	src/madness/mra/minmax/y_signed.cc	/^    matrix() : v(), n(0), m(0) {}$/;"	f	class:matrix
matrix	src/madness/mra/minmax/y_signed.cc	/^    matrix(int n, int m, const FLOAT& value=0) : v(n*m), n(n), m(m) $/;"	f	class:matrix
matrix	src/madness/mra/minmax/y_signed.cc	/^class matrix {$/;"	c	file:
matrix	src/madness/mra/minmax/y_varx.cc	/^    matrix() : v(), n(0), m(0) {}$/;"	f	class:matrix
matrix	src/madness/mra/minmax/y_varx.cc	/^    matrix(int n, int m, const FLOAT& value=0) : v(n*m), n(n), m(m) $/;"	f	class:matrix
matrix	src/madness/mra/minmax/y_varx.cc	/^class matrix {$/;"	c	file:
matrix	src/madness/mra/tools/dump2.py	/^def matrix(n,m): $/;"	f
matrixColComm_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^              matrixColComm_, matrixRowComm_,$/;"	m	class:elem::Grid
matrixDiagComm_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^              matrixDiagComm_, matrixDiagPerpComm_,$/;"	m	class:elem::Grid
matrixDiagPerpComm_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^              matrixDiagComm_, matrixDiagPerpComm_,$/;"	m	class:elem::Grid
matrixRowComm_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^              matrixColComm_, matrixRowComm_,$/;"	m	class:elem::Grid
matrix_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    elem::Matrix<T> matrix_;$/;"	m	class:elem::AbstractBlockDistMatrix
matrix_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    elem::Matrix<T> matrix_;$/;"	m	class:elem::AbstractDistMatrix
matrix_	src/madness/external/elemental/include/elemental/io/ComplexDisplayWindow-premoc.hpp	/^    const Matrix<Complex<double>> *matrix_;$/;"	m	class:elem::ComplexDisplayWindow
matrix_	src/madness/external/elemental/include/elemental/io/DisplayWindow-premoc.hpp	/^    const Matrix<double> *matrix_;$/;"	m	class:elem::DisplayWindow
matrix_	src/madness/external/elemental/include/elemental/io/SpyWindow/decl.hpp	/^    const Matrix<Int> *matrix_;$/;"	m	class:elem::SpyWindow
matrix_element	src/apps/hf/dft.h	/^     T matrix_element(const funcT& phii, const funcT& phij)$/;"	f	class:madness::DFT
matrix_element	src/apps/hf/eigsolver.cc	/^  T EigSolver<T,NDIM>::matrix_element(const funcT& phii, const funcT& phij)$/;"	f	class:madness::EigSolver
matrix_element	src/apps/hf/hartreefock.h	/^    T matrix_element(const funcT& phii, const funcT& phij)$/;"	f	class:madness::HartreeFock
matrix_exponential	src/apps/adrian/TDDFT.cc	/^Tensor<double> TDHF::matrix_exponential(const Tensor<double> &A) {$/;"	f	class:TDHF
matrix_exponential	src/apps/adrian/TDHF.cc	/^Tensor<double> TDHF::matrix_exponential(const Tensor<double> & A)$/;"	f	class:TDHF
matrix_exponential	src/apps/adrian/TDHF2.cc	/^Tensor<double> TDHF::matrix_exponential(const Tensor<double> & A)$/;"	f	class:TDHF
matrix_exponential	src/apps/bryan/TDHF.cc	/^Tensor<double> TDHF::matrix_exponential(const Tensor<double> & A)$/;"	f	class:TDHF
matrix_exponential	src/apps/bryan/TDHF2.cc	/^Tensor<double> TDHF::matrix_exponential(const Tensor<double> & A)$/;"	f	class:TDHF
matrix_exponential	src/apps/chem/SCF.cc	/^tensorT SCF::matrix_exponential(const tensorT &A) const$/;"	f	class:madness::SCF
matrix_exponential	src/apps/hf/solver.h	/^    ctensorT matrix_exponential(const ctensorT& A) {$/;"	f	class:madness::Solver
matrix_exponential	src/apps/moldft/testperiodic.cc	/^tensor_complex matrix_exponential(const tensor_complex& A) {$/;"	f
matrix_exponential	src/apps/polar/moldft.cc	/^    tensorT matrix_exponential(const tensorT &A)$/;"	f	struct:Calculation
matrix_inner	src/apps/chem/distpm.cc	/^void matrix_inner(DistributedMatrix<T>& A,$/;"	f	namespace:madness
matrix_inner	src/apps/polar/distpm.cc	/^void matrix_inner(DistributedMatrix<T>& A,$/;"	f
matrix_inner	src/madness/mra/vmra.h	/^DistributedMatrix<T> matrix_inner(const DistributedMatrixDistribution& d,$/;"	f	namespace:madness
matrix_inner	src/madness/mra/vmra.h	/^Tensor<TENSOR_RESULT_TYPE(T, R)> matrix_inner($/;"	f	namespace:madness
matrix_inner	src/madness/mra/vmra1.h	/^      Tensor< TENSOR_RESULT_TYPE(T,R) > matrix_inner(World& world,$/;"	f	namespace:madness
matrix_inner_old	src/madness/mra/vmra.h	/^Tensor<TENSOR_RESULT_TYPE(T, R)> matrix_inner_old($/;"	f	namespace:madness
max	src/apps/hf/lda.h	52;"	d
max	src/apps/nick/mpreal.h	/^inline const mpreal max(const mpreal& x, const mpreal& y)$/;"	f	namespace:mpfr
max	src/madness/external/muParser/muParserFixes.h	/^  T max(T a, T b)$/;"	f	namespace:std
max	src/madness/external/muParser/muParserFixes.h	84;"	d
max	src/madness/tensor/tensor.cc	/^    template<> double_complex Tensor<double_complex>::max(long* ind) const {$/;"	f	class:madness::Tensor
max	src/madness/tensor/tensor.cc	/^    template<> float_complex Tensor<float_complex>::max(long* ind) const {$/;"	f	class:madness::Tensor
max	src/madness/tensor/tensor.h	/^        T max(long* ind=0) const {$/;"	f	class:madness::Tensor
max	src/madness/world/worldgop.h	/^        inline void max(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
max	src/madness/world/worldgop.h	/^        void max(T& a) {$/;"	f	class:madness::WorldGopInterface
max	src/madness/world/worldprofile.h	/^        T value, max, min, sum;  \/\/ local value, parallel max, min, sum$/;"	m	struct:madness::ProfileStat
maxImagWindowVal	src/madness/external/elemental/src/core/global.cpp	/^       minImagWindowVal, maxImagWindowVal;$/;"	m	namespace:__anon33	file:
maxInnerIts	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^    Int maxInnerIts;$/;"	m	struct:elem::SdcCtrl
maxInnerIts	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    Int maxInnerIts;$/;"	m	struct:elem::HermitianSdcCtrl
maxIts	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^    Int maxIts;$/;"	m	struct:elem::SignCtrl
maxIts	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^    Int maxIts;$/;"	m	struct:elem::SquareRootCtrl
maxIts	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    Int maxIts;$/;"	m	struct:elem::PseudospecCtrl
maxL	src/apps/chem/gth_pseudopotential.h	/^    int maxL;$/;"	m	class:madness::ProjRLMStore
maxL	src/apps/polar/gth_pseudopotential.h	/^    int maxL;$/;"	m	class:ProjStore
maxL	src/apps/polar/gth_pseudopotential.h	/^    int maxL;$/;"	m	class:RlmStore
maxL	src/apps/polar/gth_pseudopotential.h	/^    int maxL;$/;"	m	class:YlmStore
maxLocDoubleOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op maxLocDoubleOp;$/;"	m	namespace:__anon34	file:
maxLocFloatOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op maxLocFloatOp;$/;"	m	namespace:__anon34	file:
maxLocIntOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op maxLocIntOp;$/;"	m	namespace:__anon34	file:
maxLocPairDoubleOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op maxLocPairDoubleOp;$/;"	m	namespace:__anon34	file:
maxLocPairFloatOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op maxLocPairFloatOp;$/;"	m	namespace:__anon34	file:
maxLocPairIntOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op maxLocPairIntOp;$/;"	m	namespace:__anon34	file:
maxOuterIts	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^    Int maxOuterIts;$/;"	m	struct:elem::SdcCtrl
maxOuterIts	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    Int maxOuterIts;$/;"	m	struct:elem::HermitianSdcCtrl
maxR	src/apps/moldft/testperiodic.cc	/^    const int maxR = 1;$/;"	m	class:NuclearDensityFunctor	file:
maxR	src/apps/moldft/testperiodic.cc	/^    const int maxR = 2;$/;"	m	class:MolecularGuessDensityFunctor	file:
maxR	src/apps/moldft/testperiodic.cc	/^static const int maxR = 3; \/\/ periodic sums from -R to +R inclusive$/;"	v	file:
maxR	src/madness/mra/convolution1d.h	/^        int maxR;       \/\/\/< Number of lattice translations for sum$/;"	m	class:madness::Convolution1D
maxR	src/madness/mra/convolution1d.h	/^        static int maxR(bool periodic, double expnt) {$/;"	f	class:madness::GaussianConvolution1D
maxRealWindowVal	src/madness/external/elemental/src/core/global.cpp	/^double minRealWindowVal, maxRealWindowVal,$/;"	m	namespace:__anon33	file:
max_depth	src/madness/mra/mra.h	/^        std::size_t max_depth() const {$/;"	f	class:madness::Function
max_depth	src/madness/mra/mraimpl.h	/^    std::size_t FunctionImpl<T,NDIM>::max_depth() const {$/;"	f	class:madness::FunctionImpl
max_file	src/apps/moldft/fci/crayio.c	31;"	d	file:
max_iter	src/apps/adrian/ResponseParameters.h	/^      int max_iter;                      \/\/\/< Maximum number of iterations$/;"	m	struct:madness::ResponseParameters
max_iter	src/apps/bryan/ResponseParameters.h	/^      int max_iter;                      \/\/\/< Maximum number of iterations$/;"	m	struct:madness::ResponseParameters
max_local_depth	src/madness/mra/mra.h	/^        std::size_t max_local_depth() const {$/;"	f	class:madness::Function
max_local_depth	src/madness/mra/mraimpl.h	/^    std::size_t FunctionImpl<T,NDIM>::max_local_depth() const {$/;"	f	class:madness::FunctionImpl
max_mem_limit	src/madness/world/worldmem.h	/^        unsigned long max_mem_limit;   \/\/\/< if size+cur_num_bytes>max_mem_limit new will throw MadnessException$/;"	m	class:madness::WorldMemInfo
max_msg_len	src/madness/world/worldrmi.h	/^        static std::size_t max_msg_len() {$/;"	f	class:madness::RMI
max_msg_len_	src/madness/world/worldrmi.h	/^            std::size_t max_msg_len_;$/;"	m	class:madness::RMI::RmiTask
max_ndepend	src/madness/world/dependency_interface.h	/^        volatile int max_ndepend; \/\/\/< max value of \\c ndepend$/;"	m	class:madness::DependencyInterface
max_nodes	src/madness/mra/mra.h	/^        std::size_t max_nodes() const {$/;"	f	class:madness::Function
max_nodes	src/madness/mra/mraimpl.h	/^    std::size_t FunctionImpl<T,NDIM>::max_nodes() const {$/;"	f	class:madness::FunctionImpl
max_npt	src/madness/mra/legendre.cc	/^    static const int max_npt = 64;$/;"	m	namespace:madness	file:
max_num_bytes	src/madness/world/worldmem.h	/^        unsigned long max_num_bytes;   \/\/\/< Lifetime maximum number of allocated bytes$/;"	m	class:madness::WorldMemInfo
max_num_frags	src/madness/world/worldmem.h	/^        unsigned long max_num_frags;   \/\/\/< Lifetime maximum number of allocated fragments$/;"	m	class:madness::WorldMemInfo
max_of_x_1_smooth	src/apps/chem/masks_and_boxes.h	/^struct max_of_x_1_smooth {$/;"	s	namespace:madness
max_refine_level	src/madness/mra/funcdefaults.h	/^        static int max_refine_level;   \/\/\/< Level at which to stop refinement$/;"	m	class:madness::FunctionDefaults
max_refine_level	src/madness/mra/funcimpl.h	/^        int max_refine_level; \/\/\/< Do not refine below this level$/;"	m	class:madness::FunctionImpl
max_refine_level	src/madness/mra/function_factory.h	/^    max_refine_level(int max_refine_level) {$/;"	f	class:madness::FunctionFactory
max_refine_level	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> int FunctionDefaults<NDIM>::max_refine_level;$/;"	m	class:madness::FunctionDefaults
max_serv_send_q	src/madness/world/worldrmi.h	/^        uint64_t max_serv_send_q;$/;"	m	struct:madness::RMIStats
max_sigma	src/madness/tensor/srconf.h	/^    	static int max_sigma(const double& thresh, const int& rank, const Tensor<double>& w) {$/;"	f	class:madness::SRConf
max_size	src/madness/world/vector.h	/^        size_type max_size() const { return data_.max_size(); }$/;"	f	class:madness::Vector
maxact	src/apps/moldft/fci/fci.F	/^      integer maxact,/;"	v	program:fci
maxd	src/apps/ii/eigen_solver.cc	/^    T maxd; \/\/\/ maximum value of diagonal element$/;"	m	class:SystolicEigensolver	file:
maxd	src/apps/ii/testsystolic.cc	/^    T tol, maxd, maxdaij;$/;"	m	class:SystolicEigensolver	file:
maxdaij	src/apps/ii/eigen_solver.cc	/^    T maxdaij; \/\/\/ maximum value of off diagonal element$/;"	m	class:SystolicEigensolver	file:
maxdaij	src/apps/ii/testsystolic.cc	/^    T tol, maxd, maxdaij;$/;"	m	class:SystolicEigensolver	file:
maxhami	src/apps/moldft/fci/fci.F	/^      integer maxact, maxtri, maxroot, maxhami$/;"	v	program:fci
maxiter	src/apps/chem/CalculationParameters.h	/^	int maxiter() const {return get<int>("maxiter");}$/;"	f	struct:madness::CalculationParameters
maxiter	src/apps/chem/PNOParameters.h	/^	int maxiter()const { return maxiter_micro();}$/;"	f	class:madness::PNOParameters
maxiter	src/apps/chem/TDHF.h	/^		std::size_t maxiter() const {return get<std::size_t>("maxiter");}$/;"	f	struct:madness::TDHF::Parameters
maxiter	src/apps/chem/molecular_optimizer.h	/^	int maxiter() const {return get<int>("maxiter");}$/;"	f	class:madness::MolecularOptimizationParameters
maxiter	src/apps/chem/molopt.h	/^        const int maxiter;          \/\/< Maximum number of iterations$/;"	m	class:madness::MolOpt
maxiter	src/apps/chem/mp2.h	/^        	int maxiter() const {return this->get<int>("maxiter");}	\/\/\/ convenience function$/;"	f	struct:madness::MP2::Parameters
maxiter	src/apps/chem/oep.h	/^	unsigned int maxiter() const {return get<unsigned int>("maxiter");}$/;"	f	class:madness::OEP_Parameters
maxiter	src/apps/chem/test_QCCalculationParametersBase.cc	/^	int maxiter() const {return get<int>("maxiter");}$/;"	f	class:Parameters
maxiter	src/apps/chem/zcis.h	/^	int maxiter() const {return get<int>("maxiter");};$/;"	f	class:madness::Complex_CIS_Parameters
maxiter	src/apps/moldft/mcpfit.cc	/^    int maxiter;    \/\/\/< max number of iteration$/;"	m	struct:CalculationParameters	file:
maxiter	src/apps/polar/mcpfit.cc	/^    int maxiter;    \/\/\/< max number of iteration$/;"	m	struct:CalculationParameters	file:
maxiter	src/apps/polar/moldft.cc	/^    int maxiter;           \/\/\/< Maximum number of iterations$/;"	m	struct:CalculationParameters	file:
maxiter	src/examples/colloid.cc	/^    const int& maxiter;$/;"	m	class:SurfaceMoleculeInteraction	file:
maxiter	src/examples/gygi_soltion.cc	/^  const int& maxiter;  \/\/ maximum iterations in the solver$/;"	m	class:GygiPot	file:
maxiter	src/examples/gygi_soltion.cc	/^const int maxiter = 20;$/;"	v
maxiter	src/examples/newsolver_lda.cc	/^static const int maxiter=10;$/;"	v	file:
maxiter	src/examples/tdse1d.cc	/^const int maxiter = 20;$/;"	v
maxiter	src/madness/tensor/solvers.h	/^        const int maxiter;$/;"	m	class:madness::QuasiNewton
maxiter_macro	src/apps/chem/PNOParameters.h	/^	int maxiter_macro()const { return get<int >("maxiter_macro");}$/;"	f	class:madness::PNOParameters
maxiter_micro	src/apps/chem/PNOParameters.h	/^	int maxiter_micro()const { return get<int >("maxiter_micro");}$/;"	f	class:madness::PNOParameters
maxiter_t	src/apps/chem/PNOParameters.h	/^	int maxiter_t()const { return get<int >("maxiter_t");}$/;"	f	class:madness::PNOParameters
maxiterp	src/examples/newsolver_lda.cc	/^static const int maxiterp=10;$/;"	v	file:
maxits	src/apps/hf/electronicstructureparams.h	/^  int maxits;$/;"	m	struct:madness::ElectronicStructureParams
maxk_	src/madness/tensor/srconf.h	/^		unsigned int maxk_;$/;"	m	class:madness::SRConf
maxl	src/madness/mra/convolution1d.h	/^        long maxl;    \/\/\/< At natural level is l beyond which operator is zero$/;"	m	class:madness::GenericConvolution1D
maxn	src/apps/moldft/fci/timer.f	/^      integer maxn$/;"	v
maxocc	src/apps/hf/electronicstructureparams.h	/^  double maxocc;$/;"	m	struct:madness::ElectronicStructureParams
maxq	src/madness/world/worldrmi.h	/^        static std::size_t maxq() {$/;"	f	class:madness::RMI
maxq_	src/madness/world/worldrmi.h	/^            std::size_t maxq_;$/;"	m	class:madness::RMI::RmiTask
maxrank	src/apps/chem/PNOParameters.h	/^	int maxrank()const { return get<int >("maxrank");}$/;"	f	class:madness::PNOParameters
maxranks_ij	src/apps/chem/PNOStructures.h	/^	std::valarray<int> maxranks_ij;					\/\/\/< maxranks for all pairs, negative->unlimited$/;"	m	struct:madness::PNOPairs
maxroot	src/apps/moldft/fci/fci.F	/^      integer maxact, maxtri, maxroot,/;"	v	program:fci
maxrotn	src/apps/chem/CalculationParameters.h	/^	double maxrotn() const {return get<double>("maxrotn");}$/;"	f	struct:madness::CalculationParameters
maxrotn	src/apps/hf/electronicstructureparams.h	/^  double maxrotn;$/;"	m	struct:madness::ElectronicStructureParams
maxrotn	src/apps/polar/moldft.cc	/^    double maxrotn;        \/\/\/< Step restriction used in autoshift algorithm$/;"	m	struct:CalculationParameters	file:
maxstep	src/apps/chem/molopt.h	/^        const double maxstep;       \/\/< Maximum step in any one coordinate (currently Cartesian in a.u.)$/;"	m	class:madness::MolOpt
maxsub	src/apps/adrian/ResponseParameters.h	/^      int maxsub;                        \/\/\/< How many previous iterations KAIN will store $/;"	m	struct:madness::ResponseParameters
maxsub	src/apps/bryan/ResponseParameters.h	/^      int maxsub;                        \/\/\/< How many previous iterations KAIN will store $/;"	m	struct:madness::ResponseParameters
maxsub	src/apps/chem/CalculationParameters.h	/^	int maxsub() const {return get<int>("maxsub");}$/;"	f	struct:madness::CalculationParameters
maxsub	src/apps/chem/mp2.h	/^        	int maxsub() const {return this->get<int>("maxsub");}	\/\/\/ convenience function$/;"	f	struct:madness::MP2::Parameters
maxsub	src/apps/hf/electronicstructureparams.h	/^  unsigned int maxsub;$/;"	m	struct:madness::ElectronicStructureParams
maxsub	src/apps/polar/moldft.cc	/^    unsigned int maxsub;   \/\/\/< Size of iterative subspace ... set to 0 or 1 to disable$/;"	m	struct:CalculationParameters	file:
maxsub	src/madness/mra/nonlinsol.h	/^		unsigned int maxsub; \/\/\/< Maximum size of subspace dimension$/;"	m	class:madness::NonlinearSolverND
maxsub	src/madness/mra/nonlinsol.h	/^        unsigned int maxsub; \/\/\/< Maximum size of subspace dimension$/;"	m	class:madness::XNonlinearSolver
maxtheta	src/apps/ii/systolic.h	/^        volatile double maxtheta; \/\/ max rotation angle$/;"	m	class:madness::LocalizeBoys
maxthresh	src/apps/hf/electronicstructureparams.h	/^  double maxthresh;$/;"	m	struct:madness::ElectronicStructureParams
maxtri	src/apps/moldft/fci/fci.F	/^      integer maxact, maxtri,/;"	v	program:fci
maxwaveorder	src/apps/hf/electronicstructureparams.h	/^  int maxwaveorder;$/;"	m	struct:madness::ElectronicStructureParams
mc2	src/madness/tensor/gfit.cc	/^const double mc2 = m*c*c;$/;"	v
mc_iSizePtr	src/madness/external/muParser/muParserBytecode.h	/^    const int mc_iSizePtr;$/;"	m	class:mu::ParserByteCode
mc_iSizeVal	src/madness/external/muParser/muParserBytecode.h	/^    const int mc_iSizeVal;$/;"	m	class:mu::ParserByteCode
mc_iSizeValEntry	src/madness/external/muParser/muParserBytecode.h	/^    const int mc_iSizeValEntry;$/;"	m	class:mu::ParserByteCode
me	src/madness/mra/funcimpl.h	/^        const ProcessID me;$/;"	m	class:madness::SimplePmap
me	src/madness/world/safempi.h	/^            int me;$/;"	m	struct:SafeMPI::Intracomm::Impl
me	src/madness/world/test_binsorter.cc	/^int me;$/;"	v
me	src/madness/world/world_object.h	/^        ProcessID me; \/\/\/< Rank of self.$/;"	m	class:madness::WorldObject
me	src/madness/world/world_task_queue.h	/^        const ProcessID me; \/\/\/< This process.$/;"	m	class:madness::WorldTaskQueue
me	src/madness/world/worlddc.h	/^        const ProcessID me;                      \/\/\/< My MPI rank$/;"	m	class:madness::WorldContainerImpl
member	src/madness/world/test_prof.cc	/^    void member() {$/;"	f	class:A
memfn_	src/madness/world/mem_func_wrapper.h	/^            memfnT memfn_; \/\/\/< Member function of the object's type.$/;"	m	class:madness::detail::MemFuncWrapper
memfn_	src/madness/world/mem_func_wrapper.h	/^            memfnT memfn_; \/\/\/< Pointer to the desired member function.$/;"	m	class:madness::detail::MemFuncWrapper
memfn_type	src/madness/world/mem_func_wrapper.h	/^            typedef memfnT memfn_type;$/;"	t	class:madness::detail::MemFuncWrapper
memfun	src/madness/world/world_object.h	/^            memfunT memfun() const {$/;"	f	struct:madness::detail::info_base
memfun_rel_ptr	src/madness/world/world_object.h	/^            memfunT_rel_ptr memfun_rel_ptr; \/\/\/< \\todo Description needed.$/;"	m	struct:madness::detail::info_base
memfunc_enabler	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler :$/;"	s	namespace:madness::detail
memfunc_enabler	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler<const objT* const, memfnT> :$/;"	s	namespace:madness::detail
memfunc_enabler	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler<const objT*, memfnT> :$/;"	s	namespace:madness::detail
memfunc_enabler	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler<const std::shared_ptr<objT>&, memfnT> :$/;"	s	namespace:madness::detail
memfunc_enabler	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler<const std::shared_ptr<objT>, memfnT> :$/;"	s	namespace:madness::detail
memfunc_enabler	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler<objT* const, memfnT> :$/;"	s	namespace:madness::detail
memfunc_enabler	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler<objT*, memfnT> :$/;"	s	namespace:madness::detail
memfunc_enabler	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler<std::shared_ptr<objT>&, memfnT> :$/;"	s	namespace:madness::detail
memfunc_enabler	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler<std::shared_ptr<objT>, memfnT> :$/;"	s	namespace:madness::detail
memfunc_enabler_base	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler_base$/;"	s	namespace:madness::detail
memfunc_enabler_base	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler_base<objT, resT (baseT::*)(paramT...) const,$/;"	s	namespace:madness::detail
memfunc_enabler_base	src/madness/world/world_task_queue.h	/^        struct memfunc_enabler_base<objT, resT (baseT::*)(paramT...),$/;"	s	namespace:madness::detail
memfunc_traits	src/madness/world/function_traits.h	/^        struct memfunc_traits : public std::false_type { };$/;"	s	namespace:madness::detail
memfunc_traits	src/madness/world/function_traits.h	/^        struct memfunc_traits<returnT(objT::*)(argTs...) const> {$/;"	s	namespace:madness::detail
memfunc_traits	src/madness/world/function_traits.h	/^        struct memfunc_traits<returnT(objT::*)(argTs...)> {$/;"	s	namespace:madness::detail
meminfo	src/apps/chem/PNOStructures.h	/^	mutable MemInfo meminfo;						\/\/\/< information about the used memory$/;"	m	struct:madness::PNOPairs
memory_	src/madness/external/elemental/include/elemental/core/Matrix.hpp	/^    Memory<T> memory_;$/;"	m	class:elem::Matrix
memorysize	src/madness/world/hardware.h	/^    int64_t memorysize;$/;"	m	namespace:madness
mentity	src/apps/hf/ewald.cc	/^  MolecularEntity mentity;$/;"	m	class:MolecularNuclearPotentialFunctor2	file:
mentity	src/apps/hf/ewald.cc	/^  MolecularEntity* mentity;$/;"	m	class:EwaldNuclearPotentialFunctor	file:
mentity	src/apps/hf/solver.h	/^        const MolecularEntity& mentity;$/;"	m	struct:madness::Solver::GuessDensity
mep_lbl	src/apps/chem/pcm.h	/^    std::string mep_lbl;$/;"	m	class:madness::PCM
merge_functions	src/examples/smooth.h	/^	Function<T,NDIM> merge_functions(const Function<T,NDIM> &f, const Function<T,NDIM> &sf,const Function<T,NDIM> &mask,const std::string &name="f")const{$/;"	f	class:smooth
merge_functions	src/examples/smooth.h	/^	Function<T,NDIM> merge_functions(const Function<T,NDIM>&f, const Function<T,NDIM>&sf, const double &thresh)const{$/;"	f	class:smooth
merge_trees	src/madness/mra/funcimpl.h	/^        void merge_trees(const T alpha, const FunctionImpl<Q,NDIM>& other, const R beta, const bool fence=true) {$/;"	f	class:madness::FunctionImpl
merge_with	src/madness/mra/key.h	/^        Key<NDIM+LDIM> merge_with(const Key<LDIM>& rhs) const {$/;"	f	class:madness::Key
merging_operator	src/examples/smooth.h	/^    merging_operator(const double c): cutoff(c){}$/;"	f	struct:merging_operator
merging_operator	src/examples/smooth.h	/^struct merging_operator{$/;"	s
message	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  const char* message() const { return message_.c_str(); }$/;"	f	class:testing::TestPartResult
message	src/madness/external/gtest/include/gtest/gtest.h	/^    std::string const message;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::std
message	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* message() const {$/;"	f	class:testing::AssertionResult
message	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::string message;$/;"	m	struct:testing::internal::TraceInfo
messageME	src/apps/hf/eigsolver.h	/^  void messageME(std::string messageME)$/;"	f	class:madness::EigSolverOp
message_	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  std::string message_;  \/\/ The test failure message.$/;"	m	class:testing::TestPartResult
message_	src/madness/external/gtest/include/gtest/gtest.h	/^  internal::scoped_ptr< ::std::string> message_;$/;"	m	class:testing::AssertionResult
messages	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  comm_t     *messages;$/;"	m	struct:__anon16
messsageME	src/apps/hf/eigsolver.h	/^  std::string messsageME()$/;"	f	class:madness::EigSolverOp
meta	src/madness/world/meta.h	/^namespace meta {  \/\/ to make it easier importing another MP library$/;"	n	namespace:madness
meta	src/madness/world/type_traits.h	/^namespace meta {$/;"	n	namespace:madness
meta	src/madness/world/world_task_queue.h	/^    namespace meta {$/;"	n	namespace:madness
method1	src/madness/tensor/lowranktensor.h	/^    void method1() {$/;"	f	class:madness::LowRankTensor
min	src/apps/nick/mpreal.h	/^inline const mpreal min(const mpreal& x, const mpreal& y)$/;"	f	namespace:mpfr
min	src/madness/external/muParser/muParserFixes.h	/^  T min(T a, T b)$/;"	f	namespace:std
min	src/madness/external/muParser/muParserFixes.h	83;"	d
min	src/madness/tensor/tensor.cc	/^    template<> double_complex Tensor<double_complex>::min(long* ind) const {$/;"	f	class:madness::Tensor
min	src/madness/tensor/tensor.cc	/^    template<> float_complex Tensor<float_complex>::min(long* ind) const {$/;"	f	class:madness::Tensor
min	src/madness/tensor/tensor.h	/^        T min(long* ind=0) const {$/;"	f	class:madness::Tensor
min	src/madness/world/worldgop.h	/^        inline void min(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
min	src/madness/world/worldgop.h	/^        void min(T& a) {$/;"	f	class:madness::WorldGopInterface
min	src/madness/world/worldprofile.h	/^        T value, max, min, sum;  \/\/ local value, parallel max, min, sum$/;"	m	struct:madness::ProfileStat
minImagWindowVal	src/madness/external/elemental/src/core/global.cpp	/^       minImagWindowVal, maxImagWindowVal;$/;"	m	namespace:__anon33	file:
minLocDoubleOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op minLocDoubleOp;$/;"	m	namespace:__anon34	file:
minLocFloatOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op minLocFloatOp;$/;"	m	namespace:__anon34	file:
minLocIntOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op minLocIntOp;$/;"	m	namespace:__anon34	file:
minLocPairDoubleOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op minLocPairDoubleOp;$/;"	m	namespace:__anon34	file:
minLocPairFloatOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op minLocPairFloatOp;$/;"	m	namespace:__anon34	file:
minLocPairIntOp	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Op minLocPairIntOp;$/;"	m	namespace:__anon34	file:
minRealWindowVal	src/madness/external/elemental/src/core/global.cpp	/^double minRealWindowVal, maxRealWindowVal,$/;"	m	namespace:__anon33	file:
min_nodes	src/madness/mra/mra.h	/^        std::size_t min_nodes() const {$/;"	f	class:madness::Function
min_nodes	src/madness/mra/mraimpl.h	/^    std::size_t FunctionImpl<T,NDIM>::min_nodes() const {$/;"	f	class:madness::FunctionImpl
minlen	src/examples/svpe.cc	/^    const double minlen;$/;"	m	class:SVPESolver	file:
mirror	src/madness/mra/funcimpl.h	/^            std::vector<long> map,mirror;$/;"	m	struct:madness::FunctionImpl::do_map_and_mirror
mirror	src/madness/mra/funcimpl.h	/^            std::vector<long> mirror;$/;"	m	struct:madness::FunctionImpl::do_mirror
mirror	src/madness/mra/mra.h	/^        Function<T,NDIM>& mirror(const Function<T,NDIM>& f, const std::vector<long>& mirrormap, bool fence) {$/;"	f	class:madness::Function
mirror	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::mirror(const implT& f, const std::vector<long>& mirrormap, bool fence) {$/;"	f	class:madness::FunctionImpl
mirrormap	src/apps/chem/pointgroupoperator.h	/^	std::vector<long> mirrormap;$/;"	m	class:madness::pg_operator
mix	src/madness/world/lookup3.c	118;"	d	file:
mo	src/apps/chem/MolecularOrbitals.h	/^	std::vector<Function<T,NDIM> > mo;$/;"	m	class:madness::MolecularOrbitals
mo_bra	src/apps/chem/CCPotentials.h	/^    CCFunction mo_bra(const size_t &i) const {$/;"	f	class:madness::CCPotentials
mo_bra	src/apps/chem/CCPotentials.h	/^    CC_vecfunction mo_bra() const {$/;"	f	class:madness::CCPotentials
mo_bra	src/apps/chem/SCFOperators.h	/^    vecfuncT mo_bra, mo_ket;    \/\/\/< MOs for bra and ket$/;"	m	class:madness::Exchange
mo_bra_	src/apps/chem/CCPotentials.h	/^    CC_vecfunction mo_bra_;$/;"	m	class:madness::CCPotentials
mo_bra_	src/apps/chem/TDHF.h	/^	const CC_vecfunction mo_bra_;$/;"	m	class:madness::TDHF
mo_bra_	src/apps/chem/projector.h	/^        std::vector<Function<T,NDIM> > mo_bra_;$/;"	m	class:madness::Projector
mo_ket	src/apps/chem/CCPotentials.h	/^    CCFunction mo_ket(const size_t &i) const {$/;"	f	class:madness::CCPotentials
mo_ket	src/apps/chem/CCPotentials.h	/^    CC_vecfunction mo_ket() const {$/;"	f	class:madness::CCPotentials
mo_ket	src/apps/chem/SCFOperators.h	/^    vecfuncT mo_bra, mo_ket;    \/\/\/< MOs for bra and ket$/;"	m	class:madness::Exchange
mo_ket_	src/apps/chem/CCPotentials.h	/^    CC_vecfunction mo_ket_;$/;"	m	class:madness::CCPotentials
mo_ket_	src/apps/chem/TDHF.h	/^	const CC_vecfunction mo_ket_;$/;"	m	class:madness::TDHF
mo_ket_	src/apps/chem/projector.h	/^        std::vector<Function<T,NDIM> > mo_ket_;$/;"	m	class:madness::Projector
mod	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LMod.hpp	/^namespace mod {$/;"	n	namespace:elem::cholesky
mod	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/UMod.hpp	/^namespace mod {$/;"	n	namespace:elem::cholesky
mod_data	src/madness/mra/operator.h	/^        mutable SimpleCache< SeparatedConvolutionData<Q,NDIM>, 2*NDIM > mod_data; \/\/\/< cache for all terms, dims and displacements$/;"	m	class:madness::SeparatedConvolution
mod_nonstandard	src/madness/mra/convolution1d.h	/^        const ConvolutionData1D<Q>* mod_nonstandard(const Key<2>& op_key) const {$/;"	f	class:madness::Convolution1D
mod_ns_cache	src/madness/mra/convolution1d.h	/^        mutable SimpleCache<ConvolutionData1D<Q>, 2> mod_ns_cache;$/;"	m	class:madness::Convolution1D
model	src/apps/chem/oep.h	/^	std::string model() const {return get<std::string>("model");}$/;"	f	class:madness::OEP_Parameters
modf	src/apps/nick/mpreal.h	/^inline const mpreal modf(const mpreal& v, mpreal& n)$/;"	f	namespace:mpfr
modified	src/madness/mra/operator.h	/^        bool& modified() {return modified_;}$/;"	f	class:madness::SeparatedConvolution
modified	src/madness/mra/operator.h	/^        const bool& modified() const {return modified_;}$/;"	f	class:madness::SeparatedConvolution
modified_	src/madness/mra/operator.h	/^        bool modified_;     \/\/\/< use modified NS form$/;"	m	class:madness::SeparatedConvolution
modify_dmat_psp	src/apps/chem/molecularbasis.cc	/^void AtomicBasisSet::modify_dmat_psp(int atn, double zeff){$/;"	f	class:madness::AtomicBasisSet
mol	src/apps/chem/znemo.h	/^	Molecule mol;$/;"	m	class:madness::Znemo
mol_mask	src/apps/polar/moldft.cc	/^    functionT mol_mask;$/;"	m	struct:Calculation	file:
mol_nuclear_charge_density	src/apps/chem/molecule.cc	/^double Molecule::mol_nuclear_charge_density(double x, double y, double z) const$/;"	f	class:madness::Molecule
mol_nuclear_charge_density	src/apps/polar/molecule.cc	/^double Molecule::mol_nuclear_charge_density(double x, double y, double z) const {$/;"	f	class:Molecule
moldx	src/apps/moldft/moldx.py	/^def moldx(coords,z,bonds=None,units="angstrom",fname="mol.dx",$/;"	f
moldx	src/apps/polar/moldx.py	/^def moldx(coords,z,bonds=None,units="angstrom",fname="mol.dx",$/;"	f
molecular_core_potential	src/apps/chem/molecule.cc	/^double Molecule::molecular_core_potential(double x, double y, double z) const$/;"	f	class:madness::Molecule
molecular_core_potential	src/apps/polar/molecule.cc	/^double Molecule::molecular_core_potential(double x, double y, double z) const {$/;"	f	class:Molecule
molecule	src/apps/adrian/GroundParameters.h	/^      Molecule molecule;                       \/\/\/< The molecule used in ground state calculation$/;"	m	struct:madness::GroundParameters
molecule	src/apps/bryan/GroundParameters.h	/^      Molecule molecule;                       \/\/\/< The molecule used in ground state calculation$/;"	m	struct:madness::GroundParameters
molecule	src/apps/chem/PNOGuessFunctions.h	/^	const Molecule& molecule;$/;"	m	class:madness::BasisFunctions
molecule	src/apps/chem/SCF.h	/^	Molecule molecule;$/;"	m	class:madness::SCF
molecule	src/apps/chem/SCF.h	/^	const Molecule& molecule;$/;"	m	class:madness::AtomicAttractionFunctor
molecule	src/apps/chem/SCF.h	/^	const Molecule& molecule;$/;"	m	class:madness::CorePotentialDerivativeFunctor
molecule	src/apps/chem/SCF.h	/^	const Molecule& molecule;$/;"	m	class:madness::MolecularDerivativeFunctor
molecule	src/apps/chem/SCF.h	/^	const Molecule& molecule;$/;"	m	class:madness::MolecularGuessDensityFunctor
molecule	src/apps/chem/SCF.h	/^	const Molecule& molecule;$/;"	m	class:madness::MolecularSecondDerivativeFunctor
molecule	src/apps/chem/correlationfactor.h	/^	const Molecule& molecule;$/;"	m	class:madness::NuclearCorrelationFactor
molecule	src/apps/chem/correlationfactor.h	/^        const Molecule& molecule;$/;"	m	class:madness::NuclearCorrelationFactor::square_times_V_derivative_functor
molecule	src/apps/chem/correlationfactor.h	/^        const Molecule& molecule;$/;"	m	class:madness::NuclearCorrelationFactor::square_times_V_functor
molecule	src/apps/chem/gth_pseudopotential.h	/^    Molecule molecule;$/;"	m	class:madness::GTHPseudopotential
molecule	src/apps/chem/molecular_optimizer.h	/^    virtual Molecule& molecule() {$/;"	f	struct:madness::MolecularOptimizationTargetInterface
molecule	src/apps/chem/nemo.cc	/^    const Molecule& molecule;$/;"	m	class:madness::atomic_attraction	file:
molecule	src/apps/chem/nemo.h	/^	Molecule& molecule() {return calc->molecule;}$/;"	f	class:madness::Nemo
molecule	src/apps/chem/nemo.h	/^    Molecule& molecule() const {$/;"	f	class:madness::Nemo
molecule	src/apps/chem/potentialmanager.h	/^    const Molecule molecule;$/;"	m	class:madness::CoreOrbitalDerivativeFunctor
molecule	src/apps/chem/potentialmanager.h	/^    const Molecule molecule;$/;"	m	class:madness::CoreOrbitalFunctor
molecule	src/apps/chem/potentialmanager.h	/^    const Molecule& molecule;$/;"	m	class:madness::MolecularCorePotentialFunctor
molecule	src/apps/chem/potentialmanager.h	/^    const Molecule& molecule;$/;"	m	class:madness::MolecularPotentialFunctor
molecule	src/apps/chem/potentialmanager.h	/^Molecule molecule;$/;"	m	class:madness::PotentialManager
molecule	src/apps/chem/znemo.h	/^	Molecule& molecule() {return mol;};$/;"	f	class:madness::Znemo
molecule	src/apps/chem/znemo.h	/^	const Molecule& molecule() const {return mol;};$/;"	f	class:madness::Znemo
molecule	src/apps/moldft/preal.cc	/^    Molecule molecule;$/;"	m	class:MiniDFT	file:
molecule	src/apps/moldft/preal.cc	/^    const Molecule& molecule;$/;"	m	class:MolecularGuessDensityFunctor	file:
molecule	src/apps/moldft/preal.cc	/^    const Molecule& molecule;$/;"	m	class:MolecularPotentialFunctor	file:
molecule	src/apps/moldft/preal.cc	/^  Molecule molecule;$/;"	m	class:NuclearDensityFunctor	file:
molecule	src/apps/moldft/testperiodic.cc	/^    const Molecule& molecule;$/;"	m	class:MolecularGuessDensityFunctor	file:
molecule	src/apps/moldft/testperiodic.cc	/^    const Molecule& molecule;$/;"	m	class:NuclearDensityFunctor	file:
molecule	src/apps/moldft/testperiodic.cc	/^static Molecule molecule;$/;"	v	file:
molecule	src/apps/polar/gth_pseudopotential.h	/^    Molecule molecule;$/;"	m	class:GTHPseudopotential
molecule	src/apps/polar/moldft.cc	/^    Molecule molecule;$/;"	m	struct:Calculation	file:
molecule	src/apps/polar/moldft.cc	/^    const Molecule &molecule;$/;"	m	class:CorePotentialDerivativeFunctor	file:
molecule	src/apps/polar/moldft.cc	/^    const Molecule &molecule;$/;"	m	class:MolecularDerivativeFunctor	file:
molecule	src/apps/polar/moldft.cc	/^    const Molecule &molecule;$/;"	m	class:MolecularGuessDensityFunctor	file:
molecule	src/apps/polar/potentialmanager.h	/^    const Molecule molecule;$/;"	m	class:CoreOrbitalDerivativeFunctor
molecule	src/apps/polar/potentialmanager.h	/^    const Molecule molecule;$/;"	m	class:CoreOrbitalFunctor
molecule	src/apps/polar/potentialmanager.h	/^    const Molecule& molecule;$/;"	m	class:MolecularCorePotentialFunctor
molecule	src/apps/polar/potentialmanager.h	/^    const Molecule& molecule;$/;"	m	class:MolecularPotentialFunctor
molecule	src/apps/polar/potentialmanager.h	/^Molecule molecule;$/;"	m	class:PotentialManager
molecule	src/apps/polar/preal.cc	/^    const Molecule& molecule;$/;"	m	class:MolecularGuessDensityFunctor	file:
molecule	src/apps/polar/preal.cc	/^    const Molecule& molecule;$/;"	m	class:MolecularPotentialFunctor	file:
molecule	src/apps/polar/preal.cc	/^  Molecule molecule;$/;"	m	class:NuclearDensityFunctor	file:
molecule	src/apps/polar/preal.cc	/^static Molecule molecule;$/;"	v	file:
molecule	src/apps/polar/testperiodic.cc	/^    const Molecule& molecule;$/;"	m	class:MolecularGuessDensityFunctor	file:
molecule	src/apps/polar/testperiodic.cc	/^    const Molecule& molecule;$/;"	m	class:NuclearDensityFunctor	file:
molecule	src/apps/polar/testperiodic.cc	/^static Molecule molecule;$/;"	v	file:
moment_of_inertia	src/apps/chem/molecule.cc	/^Tensor<double> Molecule::moment_of_inertia() const$/;"	f	class:madness::Molecule
moments	src/examples/vnucso.cc	/^void moments(World& world, const std::vector<complex_functionT>& u, const std::vector<complex_functionT>& v) {$/;"	f
mos	src/apps/chem/PNOF12Potentials.h	/^	vector_real_function_3d mos;											\/\/\/< all molecular orbitals (needed for Q projection parts)$/;"	m	class:madness::F12Potentials
move	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^: AbstractBlockDistMatrix<T>(std::move(A))$/;"	f	namespace:elem
move	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^BDM::BlockDistMatrix( BDM&& A ) ELEM_NOEXCEPT : GBDM(std::move(A)) { } $/;"	f	namespace:elem
move	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^: AbstractDistMatrix<T>(std::move(A))$/;"	f	namespace:elem
move	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^DM::DistMatrix( DM&& A ) ELEM_NOEXCEPT : GDM(std::move(A)) { }$/;"	f	namespace:elem
move	src/madness/external/elemental/src/core/Matrix.cpp	/^  data_(nullptr), memory_(std::move(A.memory_))$/;"	f	namespace:elem
move	src/madness/world/stack.h	/^        void move(Stack<T,N>& other) {$/;"	f	class:madness::Stack
move_list	src/madness/world/worlddc.h	/^        std::vector<keyT>* move_list;            \/\/\/< Tempoary used to record data that needs redistributing$/;"	m	class:madness::WorldContainerImpl
move_test_ptr	src/madness/tensor/test_tensor.cc	/^        static T* move_test_ptr;$/;"	m	class:__anon44::TensorTest	file:
move_test_ptr	src/madness/tensor/test_tensor.cc	/^    template <typename T> T* TensorTest<T>::move_test_ptr;$/;"	m	class:__anon44::TensorTest	file:
mp	src/apps/nick/mpreal.h	/^	mpfr_t mp;$/;"	m	class:mpfr::mpreal
mp2	doc/Latex/apps/nemo_mp2/manual.tex	/^\\subsection{mp2}$/;"	b
mpfr	src/apps/nick/mpreal.cc	/^namespace mpfr{$/;"	n	file:
mpfr	src/apps/nick/mpreal.h	/^namespace mpfr {$/;"	n
mpi	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^namespace mpi {$/;"	n	namespace:elem
mpi	src/madness/external/elemental/src/core/imports/mpi.cpp	/^namespace mpi {$/;"	n	namespace:elem	file:
mpi	src/madness/external/elemental/src/core/mpi_register.cpp	/^namespace mpi {$/;"	n	namespace:elem	file:
mpi	src/madness/world/world.h	/^        WorldMpiInterface& mpi; \/\/\/< MPI interface.$/;"	m	class:madness::World
mpi_ack_buffer	src/madness/world/worldmpi.cc	/^        char* WorldMpi::mpi_ack_buffer[MADNESS_ACK_BUFF_SIZE];$/;"	m	class:madness::detail::WorldMpi	file:
mpi_ack_buffer	src/madness/world/worldmpi.h	/^            static char* mpi_ack_buffer[MADNESS_ACK_BUFF_SIZE];$/;"	m	class:madness::detail::WorldMpi
mpi_error_string_	src/madness/world/safempi.h	/^        char mpi_error_string_[MPI_MAX_ERROR_STRING];$/;"	m	class:SafeMPI::Exception
mpi_statuses_error_string_	src/madness/world/safempi.h	/^        std::string mpi_statuses_error_string_;$/;"	m	class:SafeMPI::Exception
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal() $/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const char* s, mp_prec_t prec, int base, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const double u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const int u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const long double u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const long int u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const mpf_t u)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const mpfr_t u)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const mpq_t u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const mpreal& u) $/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const mpz_t u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const unsigned int u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.cc	/^mpreal::mpreal(const unsigned long int u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	src/apps/nick/mpreal.h	/^class mpreal {$/;"	c	namespace:mpfr
mra_driver	src/examples/compiler/mra-driver.cc	/^mra_driver::mra_driver ()$/;"	f	class:mra_driver
mra_driver	src/examples/compiler/mra-driver.hh	/^class mra_driver {$/;"	c
msg	src/apps/chem/PNO.h	/^	CCMessenger msg;$/;"	m	class:madness::PNO
msg	src/apps/chem/TDHF.h	/^	CCMessenger msg;$/;"	m	class:madness::TDHF
msg	src/madness/tensor/tensorexcept.h	/^        const char* msg;$/;"	m	class:madness::TensorException
msg	src/madness/world/madness_exception.h	/^        const char* msg; \/\/\/< The error message.$/;"	m	class:madness::MadnessException
msg_	src/apps/chem/PNOStructures.h	/^	mutable std::string msg_;$/;"	m	struct:madness::MyTimer
mshs	src/madness/external/elemental/include/elemental/lapack-like/solve/MultiShiftHessSolve.hpp	/^namespace mshs {$/;"	n	namespace:elem
msquasitrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLN.hpp	/^namespace msquasitrsm {$/;"	n	namespace:elem
msquasitrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LLT.hpp	/^namespace msquasitrsm {$/;"	n	namespace:elem
msquasitrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUN.hpp	/^namespace msquasitrsm {$/;"	n	namespace:elem
msquasitrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftQuasiTrsm/LUT.hpp	/^namespace msquasitrsm {$/;"	n	namespace:elem
mstrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUN.hpp	/^namespace mstrsm {$/;"	n	namespace:elem
mstrsm	src/madness/external/elemental/include/elemental/blas-like/level3/MultiShiftTrsm/LUT.hpp	/^namespace mstrsm {$/;"	n	namespace:elem
mswitch	src/madness/mra/sdf_domainmask.h	/^        int mswitch; \/\/\/< Which masking function to use (mask, surface, etc.)$/;"	m	class:madness::DomainMaskSDFFunctor
mtxmGooberSaysHey	src/madness/tensor/mtxmq_graveyard/test_scott.cc	/^void mtxmGooberSaysHey(long dimi, long dimj, long dimk,$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/avx2_cc.cc	/^void mtxmq(long dimi, long dimj, long dimk, double complex * __restrict__ c_x, const double complex * __restrict__ a_x, const double complex * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/avx2_cr.cc	/^void mtxmq(long dimi, long dimj, long dimk, double complex * __restrict__ c_x, const double complex * __restrict__ a_x, const double  * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/avx2_rc.cc	/^void mtxmq(long dimi, long dimj, long dimk, double complex * __restrict__ c_x, const double  * __restrict__ a_x, const double complex * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/avx2_rr.cc	/^void mtxmq(long dimi, long dimj, long dimk, double  * __restrict__ c_x, const double  * __restrict__ a_x, const double  * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/avx_cc.cc	/^void mtxmq(long dimi, long dimj, long dimk, double complex * __restrict__ c_x, const double complex * __restrict__ a_x, const double complex * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/avx_cr.cc	/^void mtxmq(long dimi, long dimj, long dimk, double complex * __restrict__ c_x, const double complex * __restrict__ a_x, const double  * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/avx_rc.cc	/^void mtxmq(long dimi, long dimj, long dimk, double complex * __restrict__ c_x, const double  * __restrict__ a_x, const double complex * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/avx_rr.cc	/^void mtxmq(long dimi, long dimj, long dimk, double  * __restrict__ c_x, const double  * __restrict__ a_x, const double  * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/sse_cc.cc	/^void mtxmq(long dimi, long dimj, long dimk, double complex * __restrict__ c_x, const double complex * __restrict__ a_x, const double complex * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/sse_cr.cc	/^void mtxmq(long dimi, long dimj, long dimk, double complex * __restrict__ c_x, const double complex * __restrict__ a_x, const double  * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/sse_rc.cc	/^void mtxmq(long dimi, long dimj, long dimk, double complex * __restrict__ c_x, const double  * __restrict__ a_x, const double complex * __restrict__ b_x) {$/;"	f
mtxmq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bests/sse_rr.cc	/^void mtxmq(long dimi, long dimj, long dimk, double  * __restrict__ c_x, const double  * __restrict__ a_x, const double  * __restrict__ b_x) {$/;"	f
mu	src/examples/navstokes_cosines.cc	/^const double mu = 1; \/\/ Effective Viscosity$/;"	v
mu	src/madness/external/muParser/muParser.cpp	/^namespace mu$/;"	n	file:
mu	src/madness/external/muParser/muParser.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserBase.cpp	/^namespace mu$/;"	n	file:
mu	src/madness/external/muParser/muParserBase.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserBytecode.cpp	/^namespace mu$/;"	n	file:
mu	src/madness/external/muParser/muParserBytecode.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserCallback.cpp	/^namespace mu$/;"	n	file:
mu	src/madness/external/muParser/muParserCallback.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserComplex.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserDef.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserError.cpp	/^namespace mu$/;"	n	file:
mu	src/madness/external/muParser/muParserError.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserInt.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserStack.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserTest.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserToken.h	/^namespace mu$/;"	n
mu	src/madness/external/muParser/muParserTokenReader.cpp	/^namespace mu$/;"	n	file:
mu	src/madness/external/muParser/muParserTokenReader.h	/^namespace mu$/;"	n
mu	src/madness/mra/function_interface.h	/^		double mu;$/;"	m	class:madness::BSHFunctionInterface
mu	src/madness/mra/function_interface.h	/^		double mu;$/;"	m	class:madness::SlaterF12Interface
mu	src/madness/mra/function_interface.h	/^		double mu;$/;"	m	class:madness::SlaterFunctionInterface
mu	src/madness/mra/operator.h	/^        const double& mu() const {return mu_;}$/;"	f	class:madness::SeparatedConvolution
mu	src/madness/mra/testperiodic.cc	/^double mu;$/;"	v
mu	src/madness/tensor/gfit.cc	/^    const double mu;$/;"	m	class:Fred	file:
muBool_t	src/madness/external/muParser/muParserDLL.h	/^typedef int    muBool_t;            \/\/ boolean type$/;"	t
muChar_t	src/madness/external/muParser/muParserDLL.h	/^typedef char   muChar_t;            \/\/ character type$/;"	t
muErrorHandler_t	src/madness/external/muParser/muParserDLL.h	/^typedef void (*muErrorHandler_t)(muParserHandle_t a_hParser);           \/\/ [optional] callback to an error handler$/;"	t
muFacFun_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t* (*muFacFun_t)(const muChar_t*, void*);               \/\/ [optional] callback for creating new variables$/;"	t
muFloat_t	src/madness/external/muParser/muParserDLL.h	/^typedef double muFloat_t;           \/\/ floating point type$/;"	t
muFun0_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muFun0_t)(); $/;"	t
muFun1_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muFun1_t)(muFloat_t); $/;"	t
muFun2_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muFun2_t)(muFloat_t, muFloat_t); $/;"	t
muFun3_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muFun3_t)(muFloat_t, muFloat_t, muFloat_t); $/;"	t
muFun4_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muFun4_t)(muFloat_t, muFloat_t, muFloat_t, muFloat_t); $/;"	t
muFun5_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muFun5_t)(muFloat_t, muFloat_t, muFloat_t, muFloat_t, muFloat_t); $/;"	t
muIdentFun_t	src/madness/external/muParser/muParserDLL.h	/^typedef muInt_t (*muIdentFun_t)(const muChar_t*, muInt_t*, muFloat_t*); \/\/ [optional] value identification callbacks$/;"	t
muInt_t	src/madness/external/muParser/muParserDLL.h	/^typedef int    muInt_t;             \/\/ integer type $/;"	t
muMultFun_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muMultFun_t)(const muFloat_t*, muInt_t);$/;"	t
muParserHandle_t	src/madness/external/muParser/muParserDLL.h	/^typedef void*  muParserHandle_t;    \/\/ parser handle$/;"	t
muStrFun1_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muStrFun1_t)(const muChar_t*);$/;"	t
muStrFun2_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muStrFun2_t)(const muChar_t*, muFloat_t);$/;"	t
muStrFun3_t	src/madness/external/muParser/muParserDLL.h	/^typedef muFloat_t (*muStrFun3_t)(const muChar_t*, muFloat_t, muFloat_t);$/;"	t
mu_	src/madness/mra/operator.h	/^        double mu_;$/;"	m	class:madness::SeparatedConvolution
muesli	src/madness/world/cereal_archive.h	/^      muesli; \/\/\/< The cereal archive being wrapped, deleter determines whether this is an owning ptr$/;"	m	class:madness::archive::CerealOutputArchive
muesli	src/madness/world/cereal_archive.h	/^  std::shared_ptr<Muesli> muesli; \/\/\/< The cereal archive being wrapped, deleter determines whether this is an owning ptr$/;"	m	class:madness::archive::CerealInputArchive
mul	src/madness/mra/funcimpl.h	/^        Tensor<TENSOR_RESULT_TYPE(T,R)> mul(const Tensor<T>& c1, const Tensor<R>& c2,$/;"	f	class:madness::FunctionImpl
mul	src/madness/mra/mra.h	/^    mul(const Function<L,NDIM>& left, const Function<R,NDIM>& right, bool fence=true) {$/;"	f	namespace:madness
mul	src/madness/mra/mra.h	/^    mul(const Function<T,NDIM>& f, const Q alpha, bool fence=true) {$/;"	f	namespace:madness
mul	src/madness/mra/mra.h	/^    mul(const Q alpha, const Function<T,NDIM>& f, bool fence=true) {$/;"	f	namespace:madness
mul	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(T, R), NDIM>> mul($/;"	f	namespace:madness
mul	src/madness/mra/vmra1.h	/^      mul(World& world,$/;"	f	namespace:madness
mulXX	src/madness/mra/funcimpl.h	/^        void mulXX(const FunctionImpl<L,NDIM>* left, const FunctionImpl<R,NDIM>* right, double tol, bool fence) {$/;"	f	class:madness::FunctionImpl
mulXXa	src/madness/mra/funcimpl.h	/^        void mulXXa(const keyT& key,$/;"	f	class:madness::FunctionImpl
mulXXvec	src/madness/mra/funcimpl.h	/^        void mulXXvec(const FunctionImpl<L,NDIM>* left,$/;"	f	class:madness::FunctionImpl
mulXXveca	src/madness/mra/funcimpl.h	/^        void mulXXveca(const keyT& key,$/;"	f	class:madness::FunctionImpl
mul_2si	src/apps/nick/mpreal.h	/^inline const mpreal mul_2si(const mpreal& v, long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
mul_2ui	src/apps/nick/mpreal.h	/^inline const mpreal mul_2ui(const mpreal& v, unsigned long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
mul_on_demand	src/madness/mra/mra.h	/^        void mul_on_demand(const Function<L,NDIM>& f, const Function<R,NDIM>& g, bool fence=true) {$/;"	f	class:madness::Function
mul_sparse	src/madness/mra/mra.h	/^    mul_sparse(const Function<L,NDIM>& left, const Function<R,NDIM>& right, double tol, bool fence=true) {$/;"	f	namespace:madness
mul_sparse	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(T, R), NDIM>> mul_sparse($/;"	f	namespace:madness
mul_sparse	src/madness/mra/vmra1.h	/^      mul_sparse(World& world,$/;"	f	namespace:madness
mullikan_	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<std::string> mullikan_;			\/\/\/< Mullikan symbols of the irreps$/;"	m	struct:madness::charactertable
multfun_type	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*multfun_type)(const value_type*, int);$/;"	t	namespace:mu
multi	src/apps/moldft/fci/fci.F	/^      integer nactiv, nelec, multi$/;"	v	program:fci
multi_op_o	src/apps/hf/eigsolver.h	/^  virtual std::vector<funcT> multi_op_o(const std::vector<funcT>& phis)$/;"	f	class:madness::EigSolverOp
multi_op_r	src/apps/hf/eigsolver.h	/^  virtual std::vector<funcT> multi_op_r(const funcT& rho, const std::vector<funcT>& phis)$/;"	f	class:madness::EigSolverOp
multi_solve	src/apps/hf/eigsolver.cc	/^  void EigSolver<T,NDIM>::multi_solve(int maxits)$/;"	f	class:madness::EigSolver
multi_threaded	src/madness/world/thread.h	/^        static TaskAttributes multi_threaded(int nthread) {$/;"	f	class:madness::TaskAttributes
multi_to_multi_op_values	src/madness/mra/funcimpl.h	/^        void multi_to_multi_op_values(const opT& op, const std::vector<implT*>& vin,$/;"	f	class:madness::FunctionImpl
multi_to_multi_op_values	src/madness/mra/mra.h	/^        void multi_to_multi_op_values(const opT& op,$/;"	f	class:madness::Function
multi_to_multi_op_values	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> multi_to_multi_op_values($/;"	f	namespace:madness
multi_to_multi_op_values_doit	src/madness/mra/funcimpl.h	/^        void multi_to_multi_op_values_doit(const keyT& key, const opT& op,$/;"	f	class:madness::FunctionImpl
multiop_values	src/madness/mra/funcimpl.h	/^        void multiop_values(const opT& op, const std::vector<implT*>& v) {$/;"	f	class:madness::FunctionImpl
multiop_values	src/madness/mra/mra.h	/^        Function<T,NDIM>& multiop_values(const opT& op, const std::vector< Function<T,NDIM> >& vf) {$/;"	f	class:madness::Function
multiop_values	src/madness/mra/mra.h	/^    Function<T,NDIM> multiop_values(const opT& op, const std::vector< Function<T,NDIM> >& vf) {$/;"	f	namespace:madness
multiop_values_doit	src/madness/mra/funcimpl.h	/^        void multiop_values_doit(const keyT& key, const opT& op, const std::vector<implT*>& v) {$/;"	f	class:madness::FunctionImpl
multiply	src/apps/adrian/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> multiply(std::vector<std::vector<real_function_3d>> a,$/;"	f
multiply	src/apps/bryan/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> multiply(std::vector<std::vector<real_function_3d>> a,$/;"	f
multiply	src/madness/mra/funcimpl.h	/^        void multiply(const implT* f, const FunctionImpl<T,LDIM>* g, const int particle) {$/;"	f	class:madness::FunctionImpl
multiply	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::coeffT FunctionImpl<T,NDIM>::multiply(const coeffT& val_ket,$/;"	f	class:madness::FunctionImpl
multiply_by_V	src/examples/he.cc	/^real_function_6d multiply_by_V(const real_function_6d& psi) {$/;"	f
multiply_by_V	src/examples/helium_mp2.cc	/^real_function_6d multiply_by_V(const real_function_6d& psi) {$/;"	f
multiply_op	src/apps/hf/test_he.cc	/^void multiply_op(const Key<3>& key, Tensor<double> tcube,$/;"	f
multiply_op	src/apps/hf/test_xc.cc	/^void multiply_op(const Key<3>& key, Tensor<double> tcube,$/;"	f
multiply_op	src/madness/mra/funcimpl.h	/^            multiply_op() : particle(1) {}$/;"	f	struct:madness::FunctionImpl::multiply_op
multiply_op	src/madness/mra/funcimpl.h	/^            multiply_op(implT* h, const ctT& f, const ctL& g, const int particle)$/;"	f	struct:madness::FunctionImpl::multiply_op
multiply_op	src/madness/mra/funcimpl.h	/^        struct multiply_op {$/;"	s	class:madness::FunctionImpl
multiply_with_0th_order_Hamiltonian	src/apps/chem/mp2.cc	/^real_function_6d MP2::multiply_with_0th_order_Hamiltonian($/;"	f	class:madness::MP2
munge	src/apps/chem/xcfunctional.h	/^    double munge(double rho) const {$/;"	f	class:madness::XCfunctional
munge	src/apps/hf/libxc.h	/^static double munge(double r) {$/;"	f
munge	src/apps/polar/xcfunctional.h	/^    double munge(double rho) const {$/;"	f	class:madness::XCfunctional
munge	src/examples/nonlinschro.cc	/^double munge(double x, double xmin, double xmax) {$/;"	f
munge	src/examples/smooth.h	/^static double munge(const double x){$/;"	f
munge2	src/apps/polar/xcfunctional.h	/^    void munge2(double& rho, double& sigma) const {$/;"	f	class:madness::XCfunctional
munge5	src/apps/polar/xcfunctional.h	/^    void munge5(double& rhoa, double& rhob, double& saa, double& sab, double& sbb) const {$/;"	f	class:madness::XCfunctional
munge_density	src/examples/smooth.h	/^	Function<T,NDIM> munge_density(const Function<T,NDIM> &density)const{$/;"	f	class:smooth
munge_old	src/apps/chem/xcfunctional.h	/^    static double munge_old(double rho) {$/;"	f	class:madness::XCfunctional
munge_old	src/apps/polar/xcfunctional.h	/^    static double munge_old(double rho) {$/;"	f	class:madness::XCfunctional
munging_operator	src/examples/smooth.h	/^	munging_operator() : thresh_(FunctionDefaults<3>::get_thresh()) {}$/;"	f	struct:munging_operator
munging_operator	src/examples/smooth.h	/^	munging_operator(const double thresh) : thresh_(thresh) {}$/;"	f	struct:munging_operator
munging_operator	src/examples/smooth.h	/^struct munging_operator {$/;"	s
munorm2	src/madness/mra/operator.h	/^        double munorm2(Level n, const ConvolutionData1D<Q>* ops[]) const {$/;"	f	class:madness::SeparatedConvolution
munorm2_modified	src/madness/mra/operator.h	/^        double munorm2_modified(Level n, const ConvolutionData1D<Q>* ops_1d[]) const {$/;"	f	class:madness::SeparatedConvolution
munorm2_ns	src/madness/mra/operator.h	/^        double munorm2_ns(Level n, const ConvolutionData1D<Q>* ops[]) const {$/;"	f	class:madness::SeparatedConvolution
muops	src/madness/mra/operator.h	/^        std::vector< SeparatedConvolutionInternal<Q,NDIM> > muops;$/;"	m	struct:madness::SeparatedConvolutionData
muopxv_fast	src/madness/mra/operator.h	/^        void muopxv_fast(ApplyTerms at,$/;"	f	class:madness::SeparatedConvolution
muopxv_fast2	src/madness/mra/operator.h	/^        void muopxv_fast2(Level n,$/;"	f	class:madness::SeparatedConvolution
mutex	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  pthread_mutex_t mutex;$/;"	m	struct:__anon19
mutex	src/madness/world/worldmutex.h	/^        const mutexT* mutex;$/;"	m	class:madness::ScopedMutex
mutex	src/madness/world/worldmutex.h	/^        mutable pthread_mutex_t mutex;$/;"	m	class:madness::Mutex
mutex	src/madness/world/worldmutex.h	/^        mutable pthread_mutex_t mutex;$/;"	m	class:madness::PthreadConditionVariable
mutex	src/madness/world/worldmutex.h	/^        mutable pthread_mutex_t mutex;$/;"	m	class:madness::RecursiveMutex
mutex	src/madness/world/worldprofile.cc	/^    Spinlock WorldProfile::mutex;$/;"	m	class:madness::WorldProfile	file:
mutex	src/madness/world/worldprofile.h	/^        static Spinlock mutex;$/;"	m	class:madness::WorldProfile
mutex_	src/madness/external/gtest/include/gtest/gtest.h	/^  mutable internal::Mutex mutex_;$/;"	m	class:testing::UnitTest
mutex_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  MutexBase* const mutex_;$/;"	m	class:testing::internal::GTestMutexLock
mutex_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  pthread_mutex_t mutex_;  \/\/ The underlying pthread mutex.$/;"	m	class:testing::internal::MutexBase
mutex_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  pthread_mutex_t mutex_;$/;"	m	class:testing::internal::Notification
mutex_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  Mutex mutex_;  \/\/ protects all internal state$/;"	m	class:testing::internal::OsStackTraceGetter
mutex_	src/madness/world/deferred_cleanup.h	/^            RecursiveMutex mutex_;      \/\/\/< Worldwide mutex$/;"	m	class:madness::detail::DeferredCleanup
mx_	src/madness/world/dependency_interface.h	/^        std::mutex mx_;$/;"	m	class:madness::CallbackInterface
mxm	src/madness/mra/tools/mathutil.py	/^def mxm(a,b): $/;"	f
mxm	src/madness/tensor/mxm.h	/^    inline void mxm(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mxm	src/madness/tensor/mxm.h	/^    static inline void mxm(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mxm	src/madness/tensor/mxm.h	/^    void mxm(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mxmT	src/madness/tensor/mxm.h	/^    inline void mxmT(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mxmT	src/madness/tensor/mxm.h	/^    static inline void mxmT(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mxmT	src/madness/tensor/mxm.h	/^    void mxmT(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mxmT_reference	src/madness/tensor/mxm.h	/^    static inline void mxmT_reference (long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mxm_reference	src/madness/tensor/mxm.h	/^    static inline void mxm_reference(long dimi, long dimj, long dimk,$/;"	f	namespace:madness
mxv	src/madness/mra/tools/mathutil.py	/^def mxv(a,b): $/;"	f
my_MOs	src/apps/adrian/ESInterface.h	/^  madness::Tensor<double> my_MOs; \/\/\/< Alpha molecular orbital expansions coefficients. Column is the MO, row is the basis function.$/;"	m	class:slymer::ES_Interface
my_MOs	src/apps/bryan/ESInterface.h	/^  madness::Tensor<double> my_MOs; \/\/\/< Alpha molecular orbital expansions coefficients. Column is the MO, row is the basis function.$/;"	m	class:slymer::ES_Interface
my_atoms	src/apps/adrian/ESInterface.h	/^  Atoms my_atoms; \/\/\/< The atoms (symbols and positions, in angstroms).$/;"	m	class:slymer::ES_Interface
my_atoms	src/apps/bryan/ESInterface.h	/^  Atoms my_atoms; \/\/\/< The atoms (symbols and positions, in angstroms).$/;"	m	class:slymer::ES_Interface
my_basis_set	src/apps/adrian/ESInterface.h	/^  BasisSet my_basis_set; \/\/\/< The basis set.$/;"	m	class:slymer::ES_Interface
my_basis_set	src/apps/bryan/ESInterface.h	/^  BasisSet my_basis_set; \/\/\/< The basis set.$/;"	m	class:slymer::ES_Interface
my_beta_MOs	src/apps/adrian/ESInterface.h	/^  madness::Tensor<double> my_beta_MOs; \/\/\/< Beta molecular orbital expansions coefficients. Column is the MO, row is the basis function.$/;"	m	class:slymer::ES_Interface
my_beta_MOs	src/apps/bryan/ESInterface.h	/^  madness::Tensor<double> my_beta_MOs; \/\/\/< Beta molecular orbital expansions coefficients. Column is the MO, row is the basis function.$/;"	m	class:slymer::ES_Interface
my_beta_energies	src/apps/adrian/ESInterface.h	/^  madness::Tensor<double> my_beta_energies; \/\/\/< Beta molecular orbital energies $/;"	m	class:slymer::ES_Interface
my_beta_energies	src/apps/bryan/ESInterface.h	/^  madness::Tensor<double> my_beta_energies; \/\/\/< Beta molecular orbital energies $/;"	m	class:slymer::ES_Interface
my_beta_occupancies	src/apps/adrian/ESInterface.h	/^  madness::Tensor<double> my_beta_occupancies; \/\/\/< Beta molecular orbital occupancies.$/;"	m	class:slymer::ES_Interface
my_beta_occupancies	src/apps/bryan/ESInterface.h	/^  madness::Tensor<double> my_beta_occupancies; \/\/\/< Beta molecular orbital occupancies.$/;"	m	class:slymer::ES_Interface
my_conj_transpose	src/madness/tensor/lapack.cc	/^    STATIC Tensor<double> my_conj_transpose(Tensor<double> a) {$/;"	f	namespace:madness
my_conj_transpose	src/madness/tensor/lapack.cc	/^    STATIC Tensor<double_complex> my_conj_transpose(Tensor<double_complex> a) {$/;"	f	namespace:madness
my_conj_transpose	src/madness/tensor/lapack.cc	/^    STATIC Tensor<float> my_conj_transpose(Tensor<float> a) {$/;"	f	namespace:madness
my_conj_transpose	src/madness/tensor/lapack.cc	/^    STATIC Tensor<float_complex> my_conj_transpose(Tensor<float_complex> a) {$/;"	f	namespace:madness
my_conj_transpose	src/madness/tensor/test_elemental.cc	/^    STATIC Tensor<double> my_conj_transpose(Tensor<double> a) {$/;"	f	namespace:madness
my_cost	src/madness/mra/lbdeux.h	/^        volatile double my_cost;$/;"	m	class:madness::LBNodeDeux
my_energies	src/apps/adrian/ESInterface.h	/^  madness::Tensor<double> my_energies; \/\/\/< Alpha molecular orbital energies $/;"	m	class:slymer::ES_Interface
my_energies	src/apps/bryan/ESInterface.h	/^  madness::Tensor<double> my_energies; \/\/\/< Alpha molecular orbital energies $/;"	m	class:slymer::ES_Interface
my_fname	src/apps/adrian/NWChem.h	/^  std::string my_fname;$/;"	m	class:slymer::NWChem_Interface
my_fname	src/apps/bryan/NWChem.h	/^  std::string my_fname;$/;"	m	class:slymer::NWChem_Interface
my_il	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    my_il;$/;"	m	struct:__anon29
my_io_node	src/madness/world/parallel_archive.h	/^            ProcessID my_io_node() const {$/;"	f	class:madness::archive::BaseParallelArchive
my_iu	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    my_iu;$/;"	m	struct:__anon29
my_lineardeps	src/apps/adrian/ESInterface.h	/^  unsigned int my_lineardeps; \/\/\/< Number of linear dependencies in the basis$/;"	m	class:slymer::ES_Interface
my_lineardeps	src/apps/bryan/ESInterface.h	/^  unsigned int my_lineardeps; \/\/\/< Number of linear dependencies in the basis$/;"	m	class:slymer::ES_Interface
my_occupancies	src/apps/adrian/ESInterface.h	/^  madness::Tensor<double> my_occupancies; \/\/\/< Alpha molecular orbital occupancies.$/;"	m	class:slymer::ES_Interface
my_occupancies	src/apps/bryan/ESInterface.h	/^  madness::Tensor<double> my_occupancies; \/\/\/< Alpha molecular orbital occupancies.$/;"	m	class:slymer::ES_Interface
my_properties	src/apps/adrian/ESInterface.h	/^  Properties::Properties my_properties; \/\/\/< The properties that have been read.$/;"	m	class:slymer::ES_Interface
my_properties	src/apps/bryan/ESInterface.h	/^  Properties::Properties my_properties; \/\/\/< The properties that have been read.$/;"	m	class:slymer::ES_Interface
my_zero	src/apps/adrian/test_ops.cc	/^double my_zero(const coord_3d & r)$/;"	f
my_zero	src/apps/bryan/test_ops.cc	/^double my_zero(const coord_3d & r)$/;"	f
myexp	src/madness/tensor/gfit.cc	/^double myexp(double x) {$/;"	f
myf	src/examples/ploterr.cc	/^double myf(const coord_1d& r) {$/;"	f
myf	src/examples/sininteg.cc	/^double myf(const coord_1d& r) {$/;"	f
myfun	src/examples/navstokes_cosines.cc	213;"	d	file:
mynorm	src/madness/tensor/oldtest.cc	/^template <> double mynorm<double_complex>(double_complex x) {$/;"	f
mynorm	src/madness/tensor/oldtest.cc	/^template <> double mynorm<float_complex>(float_complex x) {$/;"	f
mynorm	src/madness/tensor/oldtest.cc	/^template <typename T> double mynorm(T x) {$/;"	f
mynorm	src/madness/tensor/tensor.h	/^        template <typename T> T mynorm(T t) {$/;"	f	namespace:madness::detail
mynorm	src/madness/tensor/tensor.h	/^        template <typename T> T mynorm(std::complex<T> t) {$/;"	f	namespace:madness::detail
mynorm	src/madness/tensor/test_tensor.cc	/^    template <typename T> double mynorm(T x) {$/;"	f	namespace:__anon44
myp	src/examples/tdse1d.cc	/^template<typename T> T myp(const std::vector<T>& ps, const double t) {$/;"	f
myrand_next	src/madness/world/world.h	/^        unsigned int myrand_next; \/\/\/< State of crude internal random number generator.$/;"	m	class:madness::World
myreal	src/apps/nick/extra.cc	/^double myreal(const double_complex& t) {return real(t);}$/;"	f
myreal	src/apps/nick/extra.cc	/^double myreal(double t) {return t;}$/;"	f
myreal	src/apps/nick/interp.h	/^    double myreal(const std::complex<double>& z) const {return z.real();}$/;"	f	class:CubicInterpolationTable
myreal	src/apps/nick/interp.h	/^    double myreal(double x) {return x;}$/;"	f	class:CubicInterpolationTable
myreal	src/apps/nick/tdse1.cc	/^double myreal(const double_complex& t) {return real(t);}$/;"	f
myreal	src/apps/nick/tdse1.cc	/^double myreal(double t) {return t;}$/;"	f
myreal	src/apps/tdse/tdse.cc	/^double myreal(const double_complex& t) {return real(t);}$/;"	f
myreal	src/apps/tdse/tdse.cc	/^double myreal(double t) {return t;}$/;"	f
myreal	src/apps/tdse/tdse.confused.cc	/^double myreal(const double_complex& t) {return real(t);}$/;"	f
myreal	src/apps/tdse/tdse.confused.cc	/^double myreal(double t) {return t;}$/;"	f
myreal	src/apps/tdse/tdse4.cc	/^double myreal(const double_complex& t) {return real(t);}$/;"	f
myreal	src/apps/tdse/tdse4.cc	/^double myreal(double t) {return t;}$/;"	f
mythreadid	src/madness/world/worldprofile.cc	/^    thread_local int WorldProfileObj::mythreadid = -1; \/\/ means not initialized$/;"	m	class:madness::WorldProfileObj	file:
mythreadid	src/madness/world/worldprofile.h	/^        static thread_local int mythreadid; \/\/\/< My unique thread id$/;"	m	class:madness::WorldProfileObj
mytime	src/examples/navstokes_cosines.cc	/^double mytime = 0.0; \/\/ Global variable for the current time$/;"	v
myunaryop	src/madness/mra/testsuite.cc	/^struct myunaryop {$/;"	s	file:
myunaryop_square	src/apps/hf/test_he.cc	/^struct myunaryop_square$/;"	s	file:
myunaryop_square	src/madness/mra/testsuite.cc	/^struct myunaryop_square {$/;"	s	file:
myusleep	src/madness/world/timers.h	/^    static inline void myusleep(unsigned int us) {$/;"	f	namespace:madness
n	src/apps/chem/GuessFactory.h	/^    const std::vector<double> n;$/;"	m	class:madness::guessfactory::PlaneWaveFunctor
n	src/apps/chem/corepotential.h	/^    std::vector<int> n;$/;"	m	struct:madness::CorePotential
n	src/apps/chem/nemo.h	/^	const int n;$/;"	m	struct:madness::allocator
n	src/apps/exciting/wannier.cc	/^    int n;$/;"	m	struct:ExcitingApp::wannierf	file:
n	src/apps/ii/systolic.h	/^        const int64_t n;                \/\/< Column dimension of A(n,m)$/;"	m	class:madness::DistributedMatrix
n	src/apps/moldft/fci/timer.f	/^      int/;"	v
n	src/apps/moldft/mcpfit.cc	/^    int n;$/;"	m	class:PotentialBasisFunctor	file:
n	src/apps/nick/extract.py	/^                        n = int(word[1])$/;"	v
n	src/apps/nick/wavef.h	/^    int      n;$/;"	m	class:ScatteringWF
n	src/apps/nick/wavef.h	/^    int n;$/;"	m	class:BoundWF
n	src/apps/polar/corepotential.h	/^    std::vector<int> n;$/;"	m	struct:CorePotential
n	src/apps/polar/mcpfit.cc	/^    int n;$/;"	m	class:PotentialBasisFunctor	file:
n	src/examples/test_derivative.cc	/^      const int n;$/;"	m	class:F	file:
n	src/examples/test_derivative.cc	/^      const int n;$/;"	m	class:G	file:
n	src/madness/external/elemental/examples/lapack-like/SimpleSVD.cpp	/^const Int m=300, n=300;  \/\/ run SVD on m x n matrix$/;"	v
n	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int              n;$/;"	m	struct:__anon21
n	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int              n;$/;"	m	struct:__anon22
n	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    n;$/;"	m	struct:__anon29
n	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Int n;$/;"	m	struct:elem::SafeProduct
n	src/madness/mra/convolution1d.h	/^            Level n;$/;"	m	struct:madness::GenericConvolution1D::Shmoo
n	src/madness/mra/indexit.h	/^        std::vector<long> n; \/\/\/< User specified upper limits for each dimension$/;"	m	class:madness::IndexIterator
n	src/madness/mra/key.h	/^        Level n;$/;"	m	class:madness::Key
n	src/madness/mra/minmax/y.cc	/^    int n, m;$/;"	m	class:matrix	file:
n	src/madness/mra/minmax/y1.cc	/^    int n, m;$/;"	m	class:matrix	file:
n	src/madness/mra/minmax/y_signed.cc	/^    int n, m;$/;"	m	class:matrix	file:
n	src/madness/mra/minmax/y_varx.cc	/^    int n, m;$/;"	m	class:matrix	file:
n	src/madness/mra/mypmap.h	/^        const int n;$/;"	m	class:madness::MyPmap
n	src/madness/mra/tools/mathutil.py	/^    n = 13$/;"	v
n	src/madness/mra/tools/mathutil.py	/^    n = 25$/;"	v
n	src/madness/mra/tools/mathutil.py	/^    n = 5$/;"	v
n	src/madness/mra/tools/mathutil.py	/^    n = 8$/;"	v
n	src/madness/tensor/distributed_matrix.h	/^        int64_t n;                \/\/\/< Column dimension of A(n,m)$/;"	m	class:madness::DistributedMatrixDistribution
n	src/madness/tensor/kain.cc	/^    int n;$/;"	m	class:QuasiNewton	file:
n	src/madness/tensor/solvers.h	/^        int n;$/;"	m	class:madness::QuasiNewton
n	src/madness/world/archive.h	/^            unsigned int n; \/\/\/< The number of objects in the array.$/;"	m	class:madness::archive::archive_array
n	src/madness/world/dqueue.h	/^        volatile size_t n __attribute__((aligned(64)));        \/\/\/< Number of elements in the buffer$/;"	m	class:madness::DQueue
n	src/madness/world/range.h	/^        long n; \/\/\/< Number of items to iterator over. \\todo Could this be replaced by size_t?$/;"	m	class:madness::Range
n	src/madness/world/test_tree.cc	/^    ulong n, i, j, k;$/;"	m	struct:Key	file:
n	src/madness/world/test_world.cc	/^    ulong n, i, j, k;$/;"	m	struct:Key	file:
n	src/madness/world/worldmutex.h	/^        mutable volatile int n;$/;"	m	class:madness::MutexFair
nCoeff	src/madness/tensor/srconf.h	/^		unsigned int nCoeff() const {$/;"	f	class:madness::SRConf
nIOProcessors	src/apps/nick/wavef.h	/^const int nIOProcessors =1;$/;"	v
nMAX	src/apps/nick/spawnNLM.py	/^nMAX = sys.argv[1]$/;"	v
n_	src/apps/chem/PNOTensors.h	/^	int n_;$/;"	m	class:__anon48::Tensor_IJ_IK
n_	src/apps/chem/PNOTensors.h	/^	int n_;$/;"	m	class:__anon48::Tensor_IJ_KJ
n_	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^    Int n_;$/;"	m	class:FourierPhase	file:
n_	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^    Int n_;$/;"	m	class:Phase	file:
n_	src/madness/world/thread.h	/^            unsigned int n_; \/\/\/< The number of events recorded.$/;"	m	class:madness::profiling::TaskEventList
n_core_orb	src/apps/chem/corepotential.h	/^    inline unsigned int n_core_orb(const unsigned int atn) const {$/;"	f	class:madness::CorePotentialManager
n_core_orb	src/apps/chem/molecule.h	/^    unsigned int n_core_orb(unsigned int atn) const {$/;"	f	class:madness::Molecule
n_core_orb	src/apps/polar/corepotential.h	/^    inline unsigned int n_core_orb(const unsigned int atn) const {$/;"	f	class:CorePotentialManager
n_core_orb	src/apps/polar/molecule.h	/^    unsigned int n_core_orb(unsigned int atn) const {$/;"	f	class:Molecule
n_core_orb_all	src/apps/chem/molecule.cc	/^unsigned int Molecule::n_core_orb_all() const$/;"	f	class:madness::Molecule
n_core_orb_all	src/apps/polar/molecule.cc	/^unsigned int Molecule::n_core_orb_all() const {$/;"	f	class:Molecule
n_core_orb_base	src/apps/chem/corepotential.h	/^    inline unsigned int n_core_orb_base(const unsigned int atn) const {$/;"	f	class:madness::CorePotentialManager
n_core_orb_base	src/apps/polar/corepotential.h	/^    inline unsigned int n_core_orb_base(const unsigned int atn) const {$/;"	f	class:CorePotentialManager
n_in_q	src/madness/world/worldrmi.h	/^            int n_in_q;$/;"	m	class:madness::RMI::RmiTask
n_orbital	src/apps/chem/corepotential.h	/^    inline unsigned int n_orbital() const { return ncore; };$/;"	f	struct:madness::AtomCore
n_orbital	src/apps/polar/corepotential.h	/^    inline unsigned int n_orbital() const { return ncore; };$/;"	f	struct:AtomCore
n_read	src/apps/moldft/fci/crayio.c	/^  int n_read;                \/* no. of read requests *\/$/;"	m	struct:w_file	file:
n_write	src/apps/moldft/fci/crayio.c	/^  int n_write;               \/* no. of write reqeusts *\/$/;"	m	struct:w_file	file:
nablaf2	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d nablaf2() const {$/;"	f	class:madness::CorrelationFactor
nablaf2_	src/apps/chem/electronic_correlation_factor.h	/^        nablaf2_(double gamma) : gamma(gamma) {$/;"	f	struct:madness::CorrelationFactor::nablaf2_
nablaf2_	src/apps/chem/electronic_correlation_factor.h	/^    struct nablaf2_ : FunctionFunctorInterface<double,6>  {$/;"	s	class:madness::CorrelationFactor
nact	src/apps/chem/PNO.h	/^	size_t nact()const{return nemo.get_calc()->amo.size()-param.freeze();}$/;"	f	class:madness::PNO
nactiv	src/apps/moldft/fci/fci.F	/^      integer nactiv,/;"	v	program:fci
nalpha	src/apps/chem/CalculationParameters.h	/^	int nalpha() const {return get<int>("nalpha");}$/;"	f	struct:madness::CalculationParameters
nalpha	src/apps/moldft/mcpfit.cc	/^    unsigned int nalpha, nbeta;     \/\/\/< number of valence orbitals alpha\/beta$/;"	m	struct:Calculation	file:
nalpha	src/apps/polar/mcpfit.cc	/^    unsigned int nalpha, nbeta;     \/\/\/< number of valence orbitals alpha\/beta$/;"	m	struct:Calculation	file:
nalpha	src/apps/polar/moldft.cc	/^    int nalpha;                        \/\/\/< Number of alpha spin electrons$/;"	m	struct:CalculationParameters	file:
name	src/apps/chem/CCStructures.cc	/^  CCFunction::name() const {$/;"	f	class:madness::CCFunction
name	src/apps/chem/CCStructures.cc	/^  CC_vecfunction::name() const {$/;"	f	class:madness::CC_vecfunction
name	src/apps/chem/CCStructures.h	/^    std::string name()const{$/;"	f	class:madness::CCPair
name	src/apps/chem/CCStructures.h	/^    std::string name()const{$/;"	f	struct:madness::CCPairFunction
name	src/apps/chem/CCStructures.h	/^    std::string name()const{return assign_name(operator_type);}$/;"	f	struct:madness::CCConvolutionOperator
name	src/apps/chem/GuessFactory.cc	/^std::string PlaneWaveFunctor::name(const bool& compact) const {$/;"	f	class:madness::guessfactory::PlaneWaveFunctor
name	src/apps/chem/PNOStructures.cpp	/^std::string PNOPairs::name($/;"	f	class:madness::PNOPairs
name	src/apps/chem/PNOStructures.h	/^	std::string name()const {return std::to_string(i_+start_);}$/;"	f	struct:madness::OrbitalIterator
name	src/apps/chem/PNOStructures.h	/^	std::string name()const{$/;"	f	struct:madness::ElectronPairIterator
name	src/apps/chem/molecularbasis.h	/^    std::string name;$/;"	m	class:madness::AtomicBasisSet
name	src/apps/chem/pointgroupoperator.h	/^    std::string name() const {return name_;}$/;"	f	class:madness::pg_operator
name	src/apps/hf/molecularbasis.h	/^    std::string name;$/;"	m	class:AtomicBasisSet
name	src/apps/moldft/pointgroup.h	/^    std::string name;           \/\/\/< group name$/;"	m	class:PointGroup
name	src/apps/polar/molecularbasis.h	/^    std::string name;$/;"	m	class:AtomicBasisSet
name	src/apps/polar/pointgroup.h	/^    std::string name;           \/\/< group name$/;"	m	class:PointGroup
name	src/apps/polar/xcfunctional_libxc.cc	/^    const std::string name;$/;"	m	struct:madness::xc_name_map	file:
name	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::Args::OptionalArg
name	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        std::string name, desc, typeInfo, usedVal; $/;"	m	struct:elem::choice::Args::RequiredArg
name	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::MpiArgs::OptionalArg
name	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        std::string name, desc, typeInfo, usedVal; $/;"	m	struct:elem::choice::MpiArgs::RequiredArg
name	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestCase
name	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestInfo
name	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING name;$/;"	m	class:TiXmlAttribute
name	src/madness/mra/leafop.h	/^    name() const {$/;"	f	class:madness::Leaf_op
name	src/madness/mra/leafop.h	/^    name() const {$/;"	f	class:madness::Leaf_op_other
name	src/madness/mra/leafop.h	/^    std::string name()const{return "Cuspybox_op for nuclear cusps";}$/;"	f	struct:madness::NuclearCuspyBox_op
name	src/madness/mra/leafop.h	/^    std::string name()const{return "Cuspybox_op";}$/;"	f	struct:madness::ElectronCuspyBox_op
name	src/madness/mra/leafop.h	/^    virtual std::string name()const{return "default special box which only checks for the special points";}$/;"	f	struct:madness::Specialbox_op
name	src/madness/tensor/mtxmq_graveyard/mtxmq_asm.S	/^name: \\$/;"	l
name	src/madness/world/worldprofile.h	/^        std::string name;          \/\/\/< name of the entry$/;"	m	struct:madness::WorldProfileEntry
name_	src/apps/chem/pointgroupoperator.h	/^	std::string name_;$/;"	m	class:madness::pg_operator
name_	src/madness/external/elemental/include/elemental/core/Timer/decl.hpp	/^    std::string name_ = "[blank]";$/;"	m	class:elem::Timer
name_	src/madness/external/gtest/include/gtest/gtest.h	/^  const std::string name_;               \/\/ Test name$/;"	m	class:testing::TestInfo
name_	src/madness/external/gtest/include/gtest/gtest.h	/^  std::string name_;$/;"	m	class:testing::TestCase
name_	src/madness/external/gtest/src/gtest.cc	/^  std::string name_;$/;"	m	class:testing::__anon38::TestNameIs	file:
name_	src/madness/external/gtest/src/gtest.cc	/^  std::string name_;$/;"	m	class:testing::internal::TestCaseNameIs	file:
nao	src/apps/chem/distpm.cc	/^    const int nao;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
nao	src/apps/polar/distpm.cc	/^    const int nao;$/;"	m	class:SystolicPMOrbitalLocalize	file:
natlev	src/madness/mra/convolution1d.h	/^        Level natlev;$/;"	m	class:madness::GaussianGenericFunctor
natlev	src/madness/mra/convolution1d.h	/^        const Level natlev;     \/\/\/< Level to evaluate$/;"	m	class:madness::GaussianConvolution1D
natom	src/apps/chem/distpm.cc	/^    const int natom;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
natom	src/apps/chem/molecule.h	/^    size_t natom() const {$/;"	f	class:madness::Molecule
natom	src/apps/hf/mentity.h	/^    int natom() const {return atoms.size();};$/;"	f	class:MolecularEntity
natom	src/apps/nick/extra.h	/^  int natom;          \/\/ Number of atoms$/;"	m	struct:InputParameters
natom	src/apps/nick/tdse1.cc	/^    int natom;          \/\/ Number of atoms$/;"	m	struct:InputParameters	file:
natom	src/apps/polar/distpm.cc	/^    const int natom;$/;"	m	class:SystolicPMOrbitalLocalize	file:
natom	src/apps/polar/molecule.h	/^    int natom() const {$/;"	f	class:Molecule
natom	src/apps/tdse/tdse.cc	/^  int natom;          \/\/ Number of atoms$/;"	m	struct:InputParameters	file:
natom	src/apps/tdse/tdse.confused.cc	/^  int natom;          \/\/ Number of atoms$/;"	m	struct:InputParameters	file:
natom	src/examples/molecularmask.h	/^    const int natom;$/;"	m	class:MolecularMaskBase
natural_level	src/madness/mra/convolution1d.h	/^        Level natural_level() const {return natlev;}$/;"	f	class:madness::GaussianGenericFunctor
natural_level	src/madness/mra/convolution1d.h	/^        virtual Level natural_level() const {$/;"	f	class:madness::GaussianConvolution1D
natural_level	src/madness/mra/convolution1d.h	/^        virtual Level natural_level() const {return 13;}$/;"	f	class:madness::Convolution1D
natural_level	src/madness/mra/convolution1d.h	/^        virtual Level natural_level() const {return op.natural_level();}$/;"	f	class:madness::GenericConvolution1D
natural_level	src/madness/mra/qmprop.cc	/^        Level natural_level() const {return 13;}$/;"	f	class:madness::BandlimitedPropagator
nb	src/madness/external/elemental/include/elemental/lapack-like/factor/decl.hpp	/^    Int nb;$/;"	m	struct:elem::LDLPivot
nbands	src/apps/hf/electronicstructureparams.h	/^  int nbands;$/;"	m	struct:madness::ElectronicStructureParams
nbeta	src/apps/chem/CalculationParameters.h	/^	int nbeta() const {return get<int>("nbeta");}$/;"	f	struct:madness::CalculationParameters
nbeta	src/apps/chem/SCFOperators.h	/^    int nbeta;$/;"	m	class:madness::XCOperator
nbeta	src/apps/moldft/mcpfit.cc	/^    unsigned int nalpha, nbeta;     \/\/\/< number of valence orbitals alpha\/beta$/;"	m	struct:Calculation	file:
nbeta	src/apps/polar/mcpfit.cc	/^    unsigned int nalpha, nbeta;     \/\/\/< number of valence orbitals alpha\/beta$/;"	m	struct:Calculation	file:
nbeta	src/apps/polar/moldft.cc	/^    int nbeta;                         \/\/\/< Number of beta  spin electrons$/;"	m	struct:CalculationParameters	file:
nbf	src/apps/chem/molecularbasis.h	/^    const int nbf; \/\/ Number of functions in the shell$/;"	m	class:madness::AtomicBasisFunction
nbf	src/apps/chem/molecularbasis.h	/^    int nbf() const {$/;"	f	class:madness::AtomicBasis
nbf	src/apps/chem/molecularbasis.h	/^    int nbf() const {$/;"	f	class:madness::ContractedGaussianShell
nbf	src/apps/chem/molecularbasis.h	/^    int nbf(const Molecule& molecule) const {$/;"	f	class:madness::AtomicBasisSet
nbf	src/apps/hf/molecularbasis.h	/^    const int nbf; \/\/ Number of functions in the shell$/;"	m	class:AtomicBasisFunction
nbf	src/apps/hf/molecularbasis.h	/^    int nbf() const {$/;"	f	class:AtomicBasis
nbf	src/apps/hf/molecularbasis.h	/^    int nbf() const {$/;"	f	class:ContractedGaussianShell
nbf	src/apps/hf/molecularbasis.h	/^    int nbf(const MolecularEntity& mentity) const {$/;"	f	class:AtomicBasisSet
nbf	src/apps/polar/molecularbasis.h	/^    const int nbf; \/\/ Number of functions in the shell$/;"	m	class:AtomicBasisFunction
nbf	src/apps/polar/molecularbasis.h	/^    int nbf() const {$/;"	f	class:AtomicBasis
nbf	src/apps/polar/molecularbasis.h	/^    int nbf() const {$/;"	f	class:ContractedGaussianShell
nbf	src/apps/polar/molecularbasis.h	/^    int nbf(const Molecule& molecule) const {$/;"	f	class:AtomicBasisSet
nbins	src/madness/world/worldhashmap.h	/^        const size_t nbins;         \/\/ Number of bins$/;"	m	class:madness::ConcurrentHashMap
nbins_prime	src/madness/world/worldhashmap.h	/^        static int nbins_prime(int n) {$/;"	f	class:madness::ConcurrentHashMap
nbits	src/madness/mra/tools/longfloat.py	/^    def nbits(eps):$/;"	f	function:__mp_do_test
nbits	src/madness/mra/tools/longfloat.py	/^    nbits   = 208$/;"	v	class:longfloat
nbyte	src/madness/world/buffer_archive.h	/^            const std::size_t nbyte; \/\/\/< Buffer size.$/;"	m	class:madness::archive::BufferInputArchive
nbyte	src/madness/world/buffer_archive.h	/^            const std::size_t nbyte; \/\/\/< Buffer size.$/;"	m	class:madness::archive::BufferOutputArchive
nbyte	src/madness/world/worldam.h	/^        std::size_t nbyte;      \/\/ Size of user payload$/;"	m	class:madness::AmArg
nbyte_avail	src/madness/world/buffer_archive.h	/^            std::size_t nbyte_avail() const {$/;"	f	class:madness::archive::BufferInputArchive
nbyte_avail	src/madness/world/vector_archive.h	/^            std::size_t nbyte_avail() const {$/;"	f	class:madness::archive::VectorInputArchive
nbyte_recv	src/madness/world/worldrmi.h	/^        uint64_t nbyte_recv;$/;"	m	struct:madness::RMIStats
nbyte_sent	src/madness/world/worldrmi.h	/^        uint64_t nbyte_sent;$/;"	m	struct:madness::RMIStats
ncf	src/apps/chem/SCFOperators.h	/^    std::shared_ptr<NuclearCorrelationFactor> ncf;$/;"	m	class:madness::DNuclear
ncf	src/apps/chem/SCFOperators.h	/^    std::shared_ptr<NuclearCorrelationFactor> ncf;$/;"	m	class:madness::Nuclear
ncf	src/apps/chem/SCFOperators.h	/^    std::shared_ptr<NuclearCorrelationFactor> ncf;$/;"	m	class:madness::XCOperator
ncf	src/apps/chem/correlationfactor.h	/^		const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::R_functor
ncf	src/apps/chem/correlationfactor.h	/^		const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U1_functor
ncf	src/apps/chem/correlationfactor.h	/^		const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U2_functor
ncf	src/apps/chem/correlationfactor.h	/^		const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U3_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::RX_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U1X_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U1_atomic_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U1_dot_U1_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U2X_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U2_atomic_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U3X_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::U3_atomic_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::square_times_V_derivative_functor
ncf	src/apps/chem/correlationfactor.h	/^        const NuclearCorrelationFactor* ncf;$/;"	m	class:madness::NuclearCorrelationFactor::square_times_V_functor
ncf	src/apps/chem/nemo.h	/^		std::pair<std::string,double> ncf() const {return get<std::pair<std::string,double> >("ncf");}$/;"	f	struct:madness::Nemo::NemoCalculationParameters
ncf	src/apps/chem/nemo.h	/^	std::shared_ptr<NuclearCorrelationFactor> ncf;$/;"	m	class:madness::NemoBase
ncf	src/apps/chem/test_QCCalculationParametersBase.cc	/^	std::pair<std::string,double> ncf() const {return get<std::pair<std::string,double> >("ncf");}$/;"	f	class:Parameters
ncf_ptr	src/examples/helium_exact.cc	/^typedef std::shared_ptr<NuclearCorrelationFactor> ncf_ptr;$/;"	t	file:
ncharge	src/apps/hf/electronicstructureparams.h	/^  double ncharge;$/;"	m	struct:madness::ElectronicStructureParams
nchild	src/madness/mra/lbdeux.h	/^        static const int nchild = (1<<NDIM);$/;"	m	class:madness::LBNodeDeux
nclient	src/madness/world/parallel_archive.h	/^            int nclient; \/\/\/< Number of clients of this node, including self. Zero if not I\/O node.$/;"	m	class:madness::archive::BaseParallelArchive
ncore	src/apps/chem/corepotential.h	/^    unsigned int ncore;$/;"	m	struct:madness::AtomCore
ncore	src/apps/moldft/mcpfit.cc	/^    unsigned int ncore;             \/\/\/< number of core orbitals$/;"	m	struct:Calculation	file:
ncore	src/apps/polar/corepotential.h	/^    unsigned int ncore;$/;"	m	struct:AtomCore
ncore	src/apps/polar/mcpfit.cc	/^    unsigned int ncore;             \/\/\/< number of core orbitals$/;"	m	struct:Calculation	file:
ncores	src/madness/world/threadbind	/^ncores = len(cores)$/;"	v
ncsf	src/apps/moldft/fci/fci.F	/^      integer nwalko, ndets, ncsf,/;"	v	program:fci
ncycle	src/apps/nick/extra.h	/^  double ncycle;      \/\/ Number of laser cycles in envelope$/;"	m	struct:InputParameters
ncycle	src/apps/nick/tdse1.cc	/^    double ncycle;      \/\/ Number of laser cycles in envelope$/;"	m	struct:InputParameters	file:
ncycle	src/apps/tdse/tdse.cc	/^  double ncycle;      \/\/ Number of laser cycles in envelope$/;"	m	struct:InputParameters	file:
ncycle	src/apps/tdse/tdse.confused.cc	/^  double ncycle;      \/\/ Number of laser cycles in envelope$/;"	m	struct:InputParameters	file:
ncycle	src/apps/tdse/tdse4.cc	/^  double ncycle;      \/\/ Number of laser cycles in envelope$/;"	m	struct:InputParameters	file:
ndep	src/madness/world/dependency_interface.h	/^        int ndep() const {$/;"	f	class:madness::DependencyInterface
ndep_debug	src/madness/world/dependency_interface.h	/^        int ndep_debug() const {$/;"	f	class:madness::DependencyInterface
ndepend	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  int             ndepend;$/;"	m	struct:__anon19
ndepend	src/madness/world/dependency_interface.h	/^        std::atomic<int> ndepend; \/\/\/< Counts dependencies. For a valid object \\c ndepend >= 0, after the final callback is executed ndepend is set to a negative value and the object becomes invalid.$/;"	m	class:madness::DependencyInterface
nderiv	src/apps/chem/xcfunctional.h	/^    int nderiv;$/;"	m	class:madness::XCfunctional
nderiv	src/apps/polar/xcfunctional.h	/^    int nderiv;$/;"	m	class:madness::XCfunctional
ndets	src/apps/moldft/fci/fci.F	/^      integer nwalko, ndets,/;"	v	program:fci
ndim	src/madness/mra/mraplot.cc	/^    int ndim;                   \/\/ no. of dimensions$/;"	m	class:Plotter	file:
ndim	src/madness/tensor/basetensor.h	/^        long ndim() const {return _ndim;}$/;"	f	class:madness::BaseTensor
ndim	src/madness/tensor/lowranktensor.h	/^    long ndim() const {$/;"	f	class:madness::LowRankTensor
ndim	src/madness/tensor/tensoriter.h	/^        long ndim;$/;"	m	class:madness::TensorIterator
ndim	src/madness/tensor/tensortrain.h	/^		long ndim() const {return core.size();}$/;"	f	class:madness::TensorTrain
ndone	src/apps/ii/systolic.h	/^        long nmo, niter, ndone, ndone_iter; \/\/ number of molecule, number of iteration, number of rotation, number of rotation in 1 iteration$/;"	m	class:madness::LocalizeBoys
ndone	src/madness/world/test_atomicint.cc	/^AtomicInt ndone;$/;"	v
ndone	src/madness/world/test_hashthreaded.cc	/^madness::AtomicInt ndone;$/;"	v
ndone_iter	src/apps/chem/distpm.cc	/^    AtomicInt ndone_iter;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
ndone_iter	src/apps/ii/systolic.h	/^        long nmo, niter, ndone, ndone_iter; \/\/ number of molecule, number of iteration, number of rotation, number of rotation in 1 iteration$/;"	m	class:madness::LocalizeBoys
ndone_iter	src/apps/polar/distpm.cc	/^    AtomicInt ndone_iter;$/;"	m	class:SystolicPMOrbitalLocalize	file:
ndump	src/apps/nick/extra.h	/^  int ndump;          \/\/ dump wave function to disk every ndump steps$/;"	m	struct:InputParameters
ndump	src/apps/nick/tdse1.cc	/^    int ndump;          \/\/ dump wave function to disk every ndump steps$/;"	m	struct:InputParameters	file:
ndump	src/apps/tdse/tdse.cc	/^  int ndump;          \/\/ dump wave function to disk every ndump steps$/;"	m	struct:InputParameters	file:
ndump	src/apps/tdse/tdse.confused.cc	/^  int ndump;          \/\/ dump wave function to disk every ndump steps$/;"	m	struct:InputParameters	file:
ndump	src/apps/tdse/tdse4.cc	/^  int ndump;          \/\/ dump wave function to disk every ndump steps$/;"	m	struct:InputParameters	file:
need_recompute_factors_and_potentials	src/apps/chem/znemo.cc	/^bool Znemo::need_recompute_factors_and_potentials(const double thresh) const {$/;"	f	class:madness::Znemo
neighbor	src/madness/mra/derivative.h	/^        Key<NDIM> neighbor(const keyT& key, int step) const {$/;"	f	class:madness::DerivativeBase
neighbor	src/madness/mra/key.h	/^        Key neighbor(const Key<NDIM>& disp) const {$/;"	f	class:madness::Key
neighbor	src/madness/mra/mraimpl.h	/^    Key<NDIM> FunctionImpl<T,NDIM>::neighbor(const keyT& key, const Key<NDIM>& disp, const std::vector<bool>& is_periodic) const {$/;"	f	class:madness::FunctionImpl
nelec	src/apps/hf/electronicstructureparams.h	/^  int nelec;$/;"	m	struct:madness::ElectronicStructureParams
nelec	src/apps/moldft/fci/fci.F	/^      integer nactiv, nelec,/;"	v	program:fci
nemo	doc/Latex/apps/nemo_mp2/manual.tex	/^\\subsection{nemo}$/;"	b
nemo	src/apps/chem/CC2.h	/^    const Nemo &nemo;$/;"	m	class:madness::CC2
nemo	src/apps/chem/PNO.h	/^	Nemo nemo;$/;"	m	class:madness::PNO
nemo	src/apps/chem/PNOF12Potentials.h	/^	const Nemo& nemo;														\/\/\/< all SCF data$/;"	m	class:madness::F12Potentials
nemo	src/apps/chem/PNOStructures.h	/^	const Nemo& nemo;$/;"	m	class:madness::ParametrizedExchange
nemo	src/apps/chem/TDHF.h	/^	const Nemo& nemo;$/;"	m	class:madness::TDHF
nemo	src/apps/chem/mp2.h	/^        real_function_3d nemo(const int i) const {$/;"	f	class:madness::HartreeFock
nemo	src/apps/chem/zcis.h	/^	std::shared_ptr<Znemo> nemo;$/;"	m	class:madness::Zcis
nemo0_on_demand	src/apps/chem/mp2.cc	/^real_function_6d MP2::nemo0_on_demand(const int i, const int j) const {$/;"	f	class:madness::MP2
nemo_	src/apps/chem/CCPotentials.h	/^    const Nemo& nemo_;$/;"	m	class:madness::CCPotentials
nemo_calc	src/apps/chem/mp2.h	/^        Nemo nemo_calc;$/;"	m	class:madness::HartreeFock
nemos	src/apps/chem/mp2.h	/^        std::vector<real_function_3d> nemos() const {$/;"	f	class:madness::HartreeFock
nempty	src/apps/hf/electronicstructureparams.h	/^  int nempty;$/;"	m	struct:madness::ElectronicStructureParams
new_am_arg	src/madness/world/worldam.h	/^    inline AmArg* new_am_arg(const argT&... args) {$/;"	f	namespace:madness
new_list	src/madness/world/thread.h	/^            TaskEventList* new_list(const std::size_t nmax) {$/;"	f	class:madness::profiling::TaskProfiler
new_search_direction	src/apps/chem/molopt.h	/^        Tensor<double> new_search_direction(const Tensor<double>& g, const Tensor<double>& h) const {$/;"	f	class:madness::MolOpt
new_search_direction	src/madness/tensor/kain.cc	/^    Tensor<double> new_search_direction(const Tensor<double>& g) {$/;"	f	class:QuasiNewton	file:
new_search_direction	src/madness/tensor/solvers.cc	/^    Tensor<double> QuasiNewton::new_search_direction(const Tensor<double>& g) const {$/;"	f	class:madness::QuasiNewton
new_search_direction2	src/apps/chem/molecular_optimizer.h	/^    Tensor<double> new_search_direction2(const Tensor<double>& g,$/;"	f	class:madness::MolecularOptimizer
next	src/madness/external/elemental/external/pmrrr/include/queue.h	/^  task_t     *next;       \/* ptr to next  task; NULL if non-existing; *\/$/;"	m	struct:task_aux
next	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute*	next;$/;"	m	class:TiXmlAttribute
next	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode*		next;$/;"	m	class:TiXmlNode
next	src/madness/world/test_ar.cc	/^    linked_list *next;$/;"	m	class:linked_list	file:
next	src/madness/world/thread.h	/^            TaskEventListBase* next() const {$/;"	f	class:madness::profiling::TaskEventListBase
next	src/madness/world/worldhashmap.h	/^            class entry<keyT,valueT> * volatile next;$/;"	m	class:madness::Hash_private::entry
next_	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  mutable linked_ptr_internal const* next_;$/;"	m	class:testing::internal::linked_ptr_internal
next_	src/madness/world/thread.h	/^            TaskEventListBase* next_; \/\/\/< The next task event in the list.$/;"	m	class:madness::profiling::TaskEventListBase
next_non_null_entry	src/madness/world/worldhashmap.h	/^            void next_non_null_entry() {$/;"	f	class:madness::Hash_private::HashIterator
nextabove	src/apps/nick/mpreal.h	/^inline const mpreal nextabove  (const mpreal& x)$/;"	f	namespace:mpfr
nextbelow	src/apps/nick/mpreal.h	/^inline const mpreal nextbelow  (const mpreal& x)$/;"	f	namespace:mpfr
nexttoward	src/apps/nick/mpreal.h	/^inline const mpreal nexttoward (const mpreal& x, const mpreal& y)$/;"	f	namespace:mpfr
nfinished	src/madness/world/thread.h	/^        AtomicInt nfinished; \/\/\/< Thread pool exit counter.$/;"	m	class:madness::ThreadPool
ngridk0	src/apps/hf/electronicstructureparams.h	/^  int ngridk0, ngridk1, ngridk2;$/;"	m	struct:madness::ElectronicStructureParams
ngridk1	src/apps/hf/electronicstructureparams.h	/^  int ngridk0, ngridk1, ngridk2;$/;"	m	struct:madness::ElectronicStructureParams
ngridk2	src/apps/hf/electronicstructureparams.h	/^  int ngridk0, ngridk1, ngridk2;$/;"	m	struct:madness::ElectronicStructureParams
ngrow	src/madness/world/dqueue.h	/^        uint64_t ngrow;         \/\/\/< #calls to grow$/;"	m	struct:madness::DQStats
ninbin	src/madness/world/worldhashmap.h	/^            int volatile ninbin;$/;"	m	class:madness::Hash_private::bin
nio	src/apps/hf/electronicstructureparams.h	/^  int nio;$/;"	m	struct:madness::ElectronicStructureParams
nio	src/apps/moldft/mcpfit.cc	/^    int nio;        \/\/\/< number of I\/O node$/;"	m	struct:CalculationParameters	file:
nio	src/apps/nick/extra.h	/^  int nio;            \/\/ Number of IO nodes $/;"	m	struct:InputParameters
nio	src/apps/nick/tdse1.cc	/^    int nio;            \/\/ Number of IO nodes$/;"	m	struct:InputParameters	file:
nio	src/apps/polar/mcpfit.cc	/^    int nio;        \/\/\/< number of I\/O node$/;"	m	struct:CalculationParameters	file:
nio	src/apps/polar/moldft.cc	/^    int nio;               \/\/\/< No. of io servers to use$/;"	m	struct:CalculationParameters	file:
nio	src/apps/tdse/tdse.cc	/^  int nio;            \/\/ Number of IO nodes$/;"	m	struct:InputParameters	file:
nio	src/apps/tdse/tdse.confused.cc	/^  int nio;            \/\/ Number of IO nodes$/;"	m	struct:InputParameters	file:
nio	src/apps/tdse/tdse4.cc	/^  int nio;            \/\/ Number of IO nodes$/;"	m	struct:InputParameters	file:
nio	src/madness/world/parallel_archive.h	/^            int nio; \/\/\/< Number of I\/O nodes (always includes node zero).$/;"	m	class:madness::archive::BaseParallelArchive
niter	src/apps/ii/eigen_solver.cc	/^    int niter; \/\/\/ number of iteration$/;"	m	class:SystolicEigensolver	file:
niter	src/apps/ii/systolic.h	/^        long nmo, niter, ndone, ndone_iter; \/\/ number of molecule, number of iteration, number of rotation, number of rotation in 1 iteration$/;"	m	class:madness::LocalizeBoys
niter	src/apps/ii/testsystolic.cc	/^    volatile int niter;$/;"	m	class:SystolicEigensolver	file:
niter	src/madness/tensor/test_systolic.cc	/^    volatile int niter;$/;"	m	class:TestSystolicMatrixAlgorithm	file:
nlmproj	src/apps/chem/gth_pseudopotential.h	/^    real_function_3d nlmproj(World& world, int l, int m, int i) {$/;"	f	class:madness::ProjRLMStore
nlmproj_functor	src/apps/chem/gth_pseudopotential.h	/^    ProjRLMFunctor nlmproj_functor(World& world, int l, int m, int i) {$/;"	f	class:madness::ProjRLMStore
nloadbal	src/apps/nick/extra.h	/^  int nloadbal;       \/\/ load balance every nloadbal steps$/;"	m	struct:InputParameters
nloadbal	src/apps/tdse/tdse.cc	/^  int nloadbal;       \/\/ load balance every nloadbal steps$/;"	m	struct:InputParameters	file:
nloadbal	src/apps/tdse/tdse.confused.cc	/^  int nloadbal;       \/\/ load balance every nloadbal steps$/;"	m	struct:InputParameters	file:
nloadbal	src/apps/tdse/tdse4.cc	/^  int nloadbal;       \/\/ load balance every nloadbal steps$/;"	m	struct:InputParameters	file:
nlocal	src/apps/ii/systolic.h	/^        int64_t nlocal;                 \/\/< No. of local pairs$/;"	m	class:madness::SystolicMatrixAlgorithm
nlocal	src/madness/tensor/systolic.h	/^        const int64_t nlocal;           \/\/\/< No. of local pairs$/;"	m	class:madness::SystolicMatrixAlgorithm
nloop	src/apps/moldft/fci/timer.f	/^      integer i, j, n, nloop,/;"	v
nlproj	src/apps/polar/gth_pseudopotential.h	/^    real_function_3d nlproj( int l, int i) {$/;"	f	class:ProjStore
nmax	src/madness/world/dqueue.h	/^        uint64_t nmax;          \/\/\/< Lifetime max. entries in the queue$/;"	m	struct:madness::DQStats
nmax	src/madness/world/thread.h	/^        static const int nmax = 128; \/\/\/< Number of task a worker thread will pop from the task queue$/;"	m	class:madness::ThreadPool
nmo	src/apps/chem/distpm.cc	/^    const int nmo;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
nmo	src/apps/ii/systolic.h	/^        long nmo, niter, ndone, ndone_iter; \/\/ number of molecule, number of iteration, number of rotation, number of rotation in 1 iteration$/;"	m	class:madness::LocalizeBoys
nmo	src/apps/polar/distpm.cc	/^    const int nmo;$/;"	m	class:SystolicPMOrbitalLocalize	file:
nmo_alpha	src/apps/chem/CalculationParameters.h	/^	int nmo_alpha() const {return get<int>("nmo_alpha");}$/;"	f	struct:madness::CalculationParameters
nmo_alpha	src/apps/polar/moldft.cc	/^    int nmo_alpha;                     \/\/\/< Number of alpha spin molecular orbitals$/;"	m	struct:CalculationParameters	file:
nmo_beta	src/apps/chem/CalculationParameters.h	/^	int nmo_beta() const {return get<int>("nmo_beta");}$/;"	f	struct:madness::CalculationParameters
nmo_beta	src/apps/polar/moldft.cc	/^    int nmo_beta;                      \/\/\/< Number of beta  spin molecular orbitals$/;"	m	struct:CalculationParameters	file:
nmsg_recv	src/madness/world/worldrmi.h	/^        uint64_t nmsg_recv;$/;"	m	struct:madness::RMIStats
nmsg_sent	src/madness/world/worldrmi.h	/^        uint64_t nmsg_sent;$/;"	m	struct:madness::RMIStats
nn1	src/madness/mra/legendre.cc	/^    static double nn1[100]; \/\/ nn1[n] = n\/(n+1)$/;"	m	namespace:madness	file:
no	src/madness/mra/funcimpl.h	/^        enum LeafStatus {no, yes, unknown};$/;"	e	enum:madness::CoeffTracker::LeafStatus
no	src/madness/world/function_traits.h	/^            typedef char (& no)[2];$/;"	t	struct:madness::detail::is_functor
noANY	src/madness/external/muParser/muParserTokenReader.h	/^        noANY     = ~0       \/\/\/< All of he above flags set$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noARG_SEP	src/madness/external/muParser/muParserTokenReader.h	/^        noARG_SEP = 1 << 4,  \/\/\/< to avoid i.e. ",," or "+," ...$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noASSIGN	src/madness/external/muParser/muParserTokenReader.h	/^        noASSIGN  = 1 << 11, \/\/\/< to block assignement to constant i.e. "4=7"$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noBC	src/madness/external/muParser/muParserTokenReader.h	/^        noBC      = 1 << 1,  \/\/\/< to avoid i.e. "sin)" or "()"$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noBO	src/madness/external/muParser/muParserTokenReader.h	/^        noBO      = 1 << 0,  \/\/\/< to avoid i.e. "cos(7)(" $/;"	e	enum:mu::ParserTokenReader::ESynCodes
noEND	src/madness/external/muParser/muParserTokenReader.h	/^        noEND     = 1 << 9,  \/\/\/< to avoid unexpected end of formula$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noFUN	src/madness/external/muParser/muParserTokenReader.h	/^        noFUN     = 1 << 5,  \/\/\/< to avoid i.e. "sqrt cos" or "(1)sin"	$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noINFIXOP	src/madness/external/muParser/muParserTokenReader.h	/^	      noINFIXOP = 1 << 8,  \/\/\/< to avoid i.e. "++4" "!!4"$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noOPT	src/madness/external/muParser/muParserTokenReader.h	/^        noOPT     = 1 << 6,  \/\/\/< to avoid i.e. "(+)"$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noPOSTOP	src/madness/external/muParser/muParserTokenReader.h	/^        noPOSTOP  = 1 << 7,  \/\/\/< to avoid i.e. "(5!!)" "sin!"$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noSTR	src/madness/external/muParser/muParserTokenReader.h	/^        noSTR     = 1 << 10, \/\/\/< to block numeric arguments on string functions$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noVAL	src/madness/external/muParser/muParserTokenReader.h	/^        noVAL     = 1 << 2,  \/\/\/< to avoid i.e. "tan 2" or "sin(8)3.14"$/;"	e	enum:mu::ParserTokenReader::ESynCodes
noVAR	src/madness/external/muParser/muParserTokenReader.h	/^        noVAR     = 1 << 3,  \/\/\/< to avoid i.e. "sin a" or "sin(8)a"$/;"	e	enum:mu::ParserTokenReader::ESynCodes
no_compute	src/apps/chem/CCStructures.h	/^    bool no_compute=false;$/;"	m	struct:madness::CCParameters
no_compute	src/apps/chem/CalculationParameters.h	/^	bool no_compute() const {return get<bool>("no_compute");}$/;"	f	struct:madness::CalculationParameters
no_compute	src/apps/chem/PNOParameters.h	/^	PairType no_compute()const { return assign_from_string<PairType>(get<std::string >("no_compute"));}$/;"	f	class:madness::PNOParameters
no_compute	src/apps/chem/TDHF.h	/^		bool no_compute() const {return get<bool>("no_compute");}$/;"	f	struct:madness::TDHF::Parameters
no_compute_cc2	src/apps/chem/CCStructures.h	/^    bool no_compute_cc2=false;$/;"	m	struct:madness::CCParameters
no_compute_cispd	src/apps/chem/CCStructures.h	/^    bool no_compute_cispd=false;$/;"	m	struct:madness::CCParameters
no_compute_gs	src/apps/chem/CCStructures.h	/^    bool no_compute_gs=false;$/;"	m	struct:madness::CCParameters
no_compute_lrcc2	src/apps/chem/CCStructures.h	/^    bool no_compute_lrcc2=false;$/;"	m	struct:madness::CCParameters
no_compute_mp2	src/apps/chem/CCStructures.h	/^    bool no_compute_mp2=false;$/;"	m	struct:madness::CCParameters
no_compute_response	src/apps/chem/CCStructures.h	/^    bool no_compute_response=false;$/;"	m	struct:madness::CCParameters
no_functor	src/madness/mra/function_factory.h	/^    no_functor() {$/;"	f	class:madness::FunctionFactory
no_guess	src/apps/chem/PNOParameters.h	/^	PairType no_guess()const { return assign_from_string<PairType>(get<std::string >("no_guess"));}$/;"	f	class:madness::PNOParameters
no_opt	src/apps/chem/PNOParameters.h	/^	PairType no_opt()const { return assign_from_string<PairType>(get<std::string >("no_opt"));}$/;"	f	class:madness::PNOParameters
no_opt_in_first_iteration	src/apps/chem/PNOParameters.h	/^	bool no_opt_in_first_iteration()const { return get<bool >("no_opt_in_first_iteration");}$/;"	f	class:madness::PNOParameters
no_orient	src/apps/chem/CalculationParameters.h	/^	bool no_orient() const {return get<bool>("no_orient");}$/;"	f	struct:madness::CalculationParameters
noautorefine	src/madness/mra/function_factory.h	/^    noautorefine() {$/;"	f	class:madness::FunctionFactory
noautorefine	src/madness/mra/mraimpl.h	/^    bool FunctionImpl<T,NDIM>::noautorefine(const keyT& key, const tensorT& t) const {$/;"	f	class:madness::FunctionImpl
nocc	src/apps/chem/PNO.h	/^	size_t nocc()const{return nemo.get_calc()->amo.size();}$/;"	f	class:madness::PNO
nocc	src/apps/chem/PNOStructures.h	/^	const size_t nocc;								\/\/\/< number of active occupied orbitals$/;"	m	struct:madness::PNOPairs
nocc	src/apps/chem/PNOStructures.h	/^	size_t nocc()const{$/;"	f	struct:madness::ElectronPairIterator
nocc	src/apps/chem/mp2.h	/^        int nocc() const {$/;"	f	class:madness::HartreeFock
noct	src/apps/chem/TDHF.cc	/^	const int noct;$/;"	m	struct:madness::TDHF_allocator	file:
noct	src/apps/chem/zcis.h	/^	Tensor<double> noct(const Tensor<double>& eps) const {$/;"	f	class:madness::Zcis
node	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:TiXmlHandle
nodeT	src/madness/mra/derivative.h	/^        typedef FunctionNode<T,NDIM> nodeT;$/;"	t	class:madness::Derivative
nodeT	src/madness/mra/derivative.h	/^        typedef FunctionNode<T,NDIM> nodeT;$/;"	t	class:madness::DerivativeBase
nodeT	src/madness/mra/funcimpl.h	/^    	typedef FunctionNode<T,NDIM> nodeT;$/;"	t	struct:madness::insert_op
nodeT	src/madness/mra/funcimpl.h	/^        typedef FunctionNode<T,NDIM> nodeT; \/\/\/< Type of node$/;"	t	class:madness::FunctionImpl
nodeT	src/madness/mra/lbdeux.h	/^        typedef LBNodeDeux<NDIM> nodeT;$/;"	t	class:madness::LBNodeDeux
nodeT	src/madness/mra/lbdeux.h	/^        typedef LBNodeDeux<NDIM> nodeT;$/;"	t	class:madness::LoadBalanceDeux
nodeT	src/madness/mra/mra.h	/^        typedef FunctionNode<T,NDIM> nodeT;$/;"	t	class:madness::Function
nofence	src/madness/mra/function_factory.h	/^    nofence() {$/;"	f	class:madness::FunctionFactory
nonfatally_failed	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  bool nonfatally_failed() const { return type_ == kNonFatalFailure; }$/;"	f	class:testing::TestPartResult
nonlinear	src/apps/moldft/mcpfit.cc	/^    bool nonlinear; \/\/\/< if true do non linear optimization$/;"	m	struct:CalculationParameters	file:
nonlinear	src/apps/polar/mcpfit.cc	/^    bool nonlinear; \/\/\/< if true do non linear optimization$/;"	m	struct:CalculationParameters	file:
nonrotate	src/apps/polar/moldft.cc	/^    bool nonrotate;       \/\/\/< If true do not molcule orient$/;"	m	struct:CalculationParameters	file:
nonstandard	src/madness/mra/convolution1d.h	/^        const ConvolutionData1D<Q>* nonstandard(Level n, Translation lx) const {$/;"	f	class:madness::Convolution1D
nonstandard	src/madness/mra/funcimpl.h	/^        bool nonstandard; \/\/\/< If true, compress keeps scaling coeff$/;"	m	class:madness::FunctionImpl
nonstandard	src/madness/mra/mra.h	/^        void nonstandard(bool keepleaves, bool fence=true) {$/;"	f	class:madness::Function
nonstandard	src/madness/mra/vmra.h	/^void nonstandard(World& world, std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
nonstandard	src/madness/mra/vmra1.h	/^      void nonstandard(World& world,$/;"	f	namespace:madness
noop	src/madness/mra/funcimpl.h	/^    struct noop {$/;"	s	namespace:madness
noop	src/madness/mra/mraimpl.h	/^        struct noop {$/;"	s	namespace:madness::detail
nopen	src/apps/chem/CalculationParameters.h	/^	int nopen() const {return get<int>("nopen");}$/;"	f	struct:madness::CalculationParameters
nopen	src/apps/polar/moldft.cc	/^    int nopen;             \/\/\/< Number of unpaired electrons = napha-nbeta$/;"	m	struct:CalculationParameters	file:
norefine	src/madness/mra/function_factory.h	/^    norefine(bool norefine = true) {$/;"	f	class:madness::FunctionFactory
norm	src/apps/nick/parse.py	/^norm    = []$/;"	v
norm	src/madness/mra/adquad.h	/^        double norm(const T& t) {$/;"	f	namespace:madness::detail
norm	src/madness/mra/adquad.h	/^        double norm(const Tensor<T>& t) {$/;"	f	namespace:madness::detail
norm	src/madness/mra/operator.h	/^        double norm(Level n, const Key<NDIM>& d, const Key<NDIM>& source_key) const {$/;"	f	class:madness::SeparatedConvolution
norm	src/madness/mra/operator.h	/^        double norm;$/;"	m	struct:madness::SeparatedConvolutionData
norm	src/madness/mra/operator.h	/^        double norm;$/;"	m	struct:madness::SeparatedConvolutionInternal
norm	src/madness/mra/testbc.cc	/^    const double norm;$/;"	m	class:DSphere	file:
norm	src/madness/mra/testbc.cc	/^    const double norm;$/;"	m	class:Sphere	file:
norm	src/madness/tensor/gmres.h	/^            virtual real_type norm($/;"	f	class:madness::VectorOfFunctionsSpace
norm	src/madness/tensor/gmres.h	/^            virtual real_type norm(const Function<scalar_type, NDIM> &vec)$/;"	f	class:madness::FunctionSpace
norm	src/madness/tensor/gmres.h	/^            virtual real_type norm(const Vector<scalar_type, NDIM> &vec)$/;"	f	class:madness::VectorSpace
norm2	src/apps/adrian/ResponseFunction2.h	/^  Tensor<double> norm2() {$/;"	f	class:madness::ResponseFunction
norm2	src/apps/bryan/ResponseFunction2.h	/^      Tensor<double> norm2() { $/;"	f	class:madness::ResponseFunction
norm2	src/madness/mra/mra.h	/^        double norm2() const {$/;"	f	class:madness::Function
norm2	src/madness/mra/vmra.h	/^double norm2(World& world, const std::vector<Function<T, NDIM>>& v) {$/;"	f	namespace:madness
norm2	src/madness/mra/vmra1.h	/^      double norm2(World& world,$/;"	f	namespace:madness
norm2s	src/madness/mra/vmra.h	/^std::vector<double> norm2s(World& world,$/;"	f	namespace:madness
norm2s	src/madness/mra/vmra1.h	/^      std::vector<double> norm2s(World& world,$/;"	f	namespace:madness
norm2sq_local	src/madness/mra/mra.h	/^        double norm2sq_local() const {$/;"	f	class:madness::Function
norm2sq_local	src/madness/mra/mraimpl.h	/^    double FunctionImpl<T,NDIM>::norm2sq_local() const {$/;"	f	class:madness::FunctionImpl
normFile	src/apps/nick/parse.py	/^normFile   = open("norm.dat",      'w')$/;"	v
norm_tree	src/madness/mra/mra.h	/^        void norm_tree(bool fence = true) const {$/;"	f	class:madness::Function
norm_tree	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::norm_tree(bool fence) {$/;"	f	class:madness::FunctionImpl
norm_tree	src/madness/mra/vmra.h	/^void norm_tree(World& world, const std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
norm_tree	src/madness/mra/vmra1.h	/^      void norm_tree(World& world,$/;"	f	namespace:madness
norm_tree_op	src/madness/mra/mraimpl.h	/^    double FunctionImpl<T,NDIM>::norm_tree_op(const keyT& key, const std::vector< Future<double> >& v) {$/;"	f	class:madness::FunctionImpl
norm_tree_spawn	src/madness/mra/mraimpl.h	/^    Future<double> FunctionImpl<T,NDIM>::norm_tree_spawn(const keyT& key) {$/;"	f	class:madness::FunctionImpl
normal	src/madness/mra/sdf_shape_3D.h	/^        const coord_3d normal; \/\/\/< The normal vector pointing OUTSIDE the surface$/;"	m	class:madness::SDFPlane
normalize	src/apps/adrian/TDDFT.cc	/^void TDHF::normalize(World &world, ResponseFunction &f) {$/;"	f	class:TDHF
normalize	src/apps/adrian/TDDFT.cc	/^void TDHF::normalize(World &world, ResponseFunction &f, ResponseFunction &g) {$/;"	f	class:TDHF
normalize	src/apps/adrian/TDHF.cc	/^void TDHF::normalize(World & world,$/;"	f	class:TDHF
normalize	src/apps/adrian/TDHF2.cc	/^void TDHF::normalize(World & world,$/;"	f	class:TDHF
normalize	src/apps/bryan/TDHF.cc	/^void TDHF::normalize(World & world,$/;"	f	class:TDHF
normalize	src/apps/bryan/TDHF2.cc	/^void TDHF::normalize(World & world,$/;"	f	class:TDHF
normalize	src/apps/chem/molecularbasis.h	/^    void normalize() {$/;"	f	class:madness::ContractedGaussianShell
normalize	src/apps/chem/nemo.h	/^	void normalize(std::vector<Function<T,NDIM> >& nemo,$/;"	f	class:madness::NemoBase
normalize	src/apps/chem/zcis.cc	/^void Zcis::normalize(std::vector<root>& roots) const {$/;"	f	class:madness::Zcis
normalize	src/apps/chem/znemo.cc	/^std::vector<complex_function_3d> Znemo::normalize(const std::vector<complex_function_3d>& mo) const {$/;"	f	class:madness::Znemo
normalize	src/apps/hf/molecularbasis.h	/^    void normalize() {$/;"	f	class:ContractedGaussianShell
normalize	src/apps/polar/molecularbasis.h	/^    void normalize() {$/;"	f	class:ContractedGaussianShell
normalize	src/madness/mra/vmra.h	/^void normalize(World& world, std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
normalize	src/madness/mra/vmra1.h	/^      void normalize(World& world,$/;"	f	namespace:madness
normalize	src/madness/tensor/gentensor.h	/^        void normalize() {return;}$/;"	f	class:madness::GenTensor
normalize	src/madness/tensor/lowranktensor.h	/^    void normalize() {$/;"	f	class:madness::LowRankTensor
normalize	src/madness/tensor/srconf.h	/^		void normalize() {$/;"	f	class:madness::SRConf
normalize2	src/examples/vnucso.cc	/^void normalize2(World& world, std::vector<complex_functionT>& u, std::vector<complex_functionT>& v) {$/;"	f
normf	src/madness/tensor/lowranktensor.h	/^    float_scalar_type normf() const {$/;"	f	class:madness::LowRankTensor
normf	src/madness/tensor/srconf.h	/^		typename TensorTypeData<T>::float_scalar_type normf() const {$/;"	f	class:madness::SRConf
normf	src/madness/tensor/tensor.h	/^        float_scalar_type normf() const {$/;"	f	class:madness::Tensor
normf	src/madness/tensor/tensortrain.h	/^        float_scalar_type normf() const {$/;"	f	class:madness::TensorTrain
normf	src/madness/world/vector.h	/^        T normf() const {$/;"	f	class:madness::Vector
not_allowed_errmsg	src/apps/chem/QCCalculationParametersBase.h	/^	std::string not_allowed_errmsg() const {$/;"	f	struct:madness::QCParameter
not_so_simple_hash	src/madness/mra/mypmap.h	/^        ProcessID not_so_simple_hash(const KeyD& key) const {$/;"	f	class:madness::MyPmap
notified_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  bool notified_;$/;"	m	class:testing::internal::Notification
notify	src/madness/world/dependency_interface.h	/^        void notify() {$/;"	f	class:madness::DependencyInterface
notify	src/madness/world/taskfn.h	/^            void notify() {$/;"	f	struct:madness::TaskInterface::Submit
notify	src/madness/world/world_task_queue.h	/^        void notify() {$/;"	f	class:madness::WorldTaskQueue
notify	src/madness/world/worldgop.h	/^            virtual void notify() {$/;"	f	class:madness::WorldGopInterface::DelayedSend
notify_debug	src/madness/world/dependency_interface.h	/^        virtual void notify_debug(const char* caller) {$/;"	f	class:madness::CallbackInterface
notify_debug	src/madness/world/dependency_interface.h	/^        void notify_debug(const char* caller) {$/;"	f	class:madness::DependencyInterface
notify_debug_impl	src/madness/world/dependency_interface.h	/^      virtual void notify_debug_impl(const char* caller) {$/;"	f	class:madness::CallbackInterface
notruncate_on_project	src/madness/mra/function_factory.h	/^    notruncate_on_project() {$/;"	f	class:madness::FunctionFactory
np	src/examples/tdse1d.cc	/^int np; \/\/ number of quadrature pts$/;"	v
npairs	src/apps/chem/PNOF12Potentials.h	/^	size_t npairs()const{$/;"	f	class:madness::F12Potentials
npairs	src/apps/chem/PNOStructures.h	/^	const size_t npairs;							\/\/\/< number of Pairs$/;"	m	struct:madness::PNOPairs
npairs	src/apps/chem/PNOStructures.h	/^	size_t npairs()const{$/;"	f	struct:madness::ElectronPairIterator
nplot	src/apps/nick/extra.h	/^  int nplot;          \/\/ dump opendx plot to disk every nplot steps$/;"	m	struct:InputParameters
nplot	src/apps/nick/tdse1.cc	/^    int nplot;          \/\/ dump opendx plot to disk every nplot steps$/;"	m	struct:InputParameters	file:
nplot	src/apps/tdse/tdse.cc	/^  int nplot;          \/\/ dump opendx plot to disk every nplot steps$/;"	m	struct:InputParameters	file:
nplot	src/apps/tdse/tdse.confused.cc	/^  int nplot;          \/\/ dump opendx plot to disk every nplot steps$/;"	m	struct:InputParameters	file:
npop_front	src/madness/world/dqueue.h	/^        uint64_t npop_front;    \/\/\/< #calls to pop_front$/;"	m	struct:madness::DQStats
npos	src/madness/external/tinyxml/tinystr.cc	/^const TiXmlString::size_type TiXmlString::npos = static_cast< TiXmlString::size_type >(-1);$/;"	m	class:TiXmlString	file:
npos	src/madness/external/tinyxml/tinystr.h	/^	static const size_type npos; \/\/ = -1;$/;"	m	class:TiXmlString
nprim	src/apps/chem/molecularbasis.h	/^    int nprim() const {$/;"	f	class:madness::ContractedGaussianShell
nprim	src/apps/hf/molecularbasis.h	/^    int nprim() const {$/;"	f	class:ContractedGaussianShell
nprim	src/apps/moldft/nwtoxml.py	/^            nprim = len(expnt)$/;"	v
nprim	src/apps/polar/molecularbasis.h	/^    int nprim() const {$/;"	f	class:ContractedGaussianShell
nprim	src/apps/polar/nwtoxml.py	/^            nprim = len(expnt)$/;"	v
nprint	src/apps/nick/extra.h	/^  int nprint;         \/\/ print stats every nprint steps$/;"	m	struct:InputParameters
nprint	src/apps/tdse/tdse.cc	/^  int nprint;         \/\/ print stats every nprint steps$/;"	m	struct:InputParameters	file:
nprint	src/apps/tdse/tdse.confused.cc	/^  int nprint;         \/\/ print stats every nprint steps$/;"	m	struct:InputParameters	file:
nprint	src/apps/tdse/tdse4.cc	/^  int nprint;         \/\/ print stats every nprint steps$/;"	m	struct:InputParameters	file:
nproc	src/apps/hf/electronicstructureapp.h	/^    const int nproc;$/;"	m	class:LevelPmap
nproc	src/apps/ii/systolic.h	/^        int64_t nproc;                  \/\/< No. of processes with rows of the matrix (not size of world)$/;"	m	class:madness::SystolicMatrixAlgorithm
nproc	src/apps/nick/extra.h	/^    const int nproc;$/;"	m	class:LevelPmap
nproc	src/apps/nick/tdse1.cc	/^    const int nproc;$/;"	m	class:LevelPmap	file:
nproc	src/apps/tdse/tdse.confused.cc	/^    const int nproc;$/;"	m	class:LevelPmap	file:
nproc	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int      nproc;$/;"	m	struct:__anon24
nproc	src/madness/mra/funcimpl.h	/^        const int nproc;$/;"	m	class:madness::LevelPmap
nproc	src/madness/mra/funcimpl.h	/^        const int nproc;$/;"	m	class:madness::SimplePmap
nproc	src/madness/mra/mypmap.h	/^        const int nproc;$/;"	m	class:madness::MyPmap
nproc	src/madness/tensor/systolic.h	/^        const int64_t nproc;            \/\/\/< No. of processes with rows of the matrix (not size of world)$/;"	m	class:madness::SystolicMatrixAlgorithm
nproc	src/madness/world/test_dc.cc	/^    const int nproc;$/;"	m	class:TestPmap	file:
nproc	src/madness/world/world.h	/^        ProcessID nproc() const { return mpi.nproc(); }$/;"	f	class:madness::World
nproc	src/madness/world/worldam.h	/^        const int nproc;$/;"	m	class:madness::WorldAmInterface
nproc	src/madness/world/worlddc.h	/^        const int nproc;$/;"	m	class:madness::WorldDCDefaultPmap
nproc	src/madness/world/worldmpi.h	/^        int nproc() const { return SafeMPI::Intracomm::Get_size(); }$/;"	f	class:madness::WorldMpiInterface
nproc	src/madness/world/worldrmi.h	/^            const int nproc;            \/\/ No. of processes in comm world$/;"	m	class:madness::RMI::RmiTask
npt	src/apps/nick/interp.h	/^    int npt;              \/\/< No. of grid points$/;"	m	class:CubicInterpolationTable
npt	src/madness/misc/interpolation_1d.h	/^    int npt;              \/\/\/< No. of grid points$/;"	m	class:CubicInterpolationTable
npt	src/madness/mra/convolution1d.h	/^        int npt;        \/\/\/< Number of quadrature points (is this used?)$/;"	m	class:madness::Convolution1D
npt	src/madness/mra/funcimpl.h	/^            int npt;$/;"	m	class:madness::FunctionImpl::do_err_box
npt	src/madness/mra/funcplot.h	/^    	long npt;$/;"	m	struct:madness::trajectory
npt	src/madness/mra/function_common_data.h	/^        int npt; \/\/\/< no. of quadrature points$/;"	m	class:madness::FunctionCommonData
npt	src/madness/mra/mraplot.cc	/^    std::vector<long> npt;           \/\/ no. points in each dimension$/;"	m	class:Plotter	file:
npt_plot	src/apps/polar/moldft.cc	/^    int npt_plot;          \/\/\/< No. of points to use in each dim for plots$/;"	m	struct:CalculationParameters	file:
npush_back	src/madness/world/dqueue.h	/^        uint64_t npush_back;    \/\/\/< #calls to push_back$/;"	m	struct:madness::DQStats
npush_front	src/madness/world/dqueue.h	/^        uint64_t npush_front;   \/\/\/< #calls to push_front$/;"	m	struct:madness::DQStats
nreader	src/madness/world/worldmutex.h	/^        mutable AtomicInt nreader;$/;"	m	class:madness::MutexReaderWriter
nreader	src/madness/world/worldmutex.h	/^        volatile mutable int nreader;$/;"	m	class:madness::MutexReaderWriter
nrecv	src/madness/world/worldam.h	/^        volatile unsigned long nrecv;       \/\/\/< Counts no. of AM received for purpose of termination detection$/;"	m	class:madness::WorldAmInterface
nrecv	src/madness/world/worldrmi.h	/^        static std::size_t nrecv() {$/;"	f	class:madness::RMI
nrecv_	src/madness/world/worldrmi.h	/^            std::size_t nrecv_;$/;"	m	class:madness::RMI::RmiTask
nregistered	src/madness/world/world_task_queue.h	/^        AtomicInt nregistered; \/\/\/< Count of pending tasks.$/;"	m	class:madness::WorldTaskQueue
nroot	src/apps/moldft/fci/fci.F	/^      integer nwalko, ndets, ncsf, nroot$/;"	v	program:fci
nrot	src/apps/ii/eigen_solver.cc	/^    int nrot; \/\/\/ number of rotation in one iteration$/;"	m	class:SystolicEigensolver	file:
nrot	src/apps/ii/systolic.h	/^        volatile int64_t nrot; \/\/ number of rotation in 1 iteration$/;"	m	class:madness::LocalizeBoys
nrot	src/apps/ii/testsystolic.cc	/^    int nrot, nrotsum, size;$/;"	m	class:SystolicEigensolver	file:
nrotsum	src/apps/ii/eigen_solver.cc	/^    int nrotsum; \/\/\/ sum of rotarion for all iteration$/;"	m	class:SystolicEigensolver	file:
nrotsum	src/apps/ii/testsystolic.cc	/^    int nrot, nrotsum, size;$/;"	m	class:SystolicEigensolver	file:
ns_cache	src/madness/mra/convolution1d.h	/^        mutable SimpleCache<ConvolutionData1D<Q>, 1> ns_cache;$/;"	m	class:madness::Convolution1D
nsend	src/madness/world/worldam.h	/^        int nsend;                          \/\/\/< Max no. of pending sends$/;"	m	class:madness::WorldAmInterface
nsent	src/madness/world/worldam.h	/^        volatile unsigned long nsent;       \/\/\/< Counts no. of AM sent for purpose of termination detection$/;"	m	class:madness::WorldAmInterface
nshell	src/apps/chem/molecularbasis.h	/^    int nshell() const {$/;"	f	class:madness::AtomicBasis
nshell	src/apps/hf/molecularbasis.h	/^    int nshell() const {$/;"	f	class:AtomicBasis
nshell	src/apps/polar/molecularbasis.h	/^    int nshell() const {$/;"	f	class:AtomicBasis
nsplit	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int              nsplit;$/;"	m	struct:__anon21
nsplit	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int    nsplit;$/;"	m	struct:__anon29
nssend_	src/madness/world/worldrmi.h	/^            long nssend_;$/;"	m	class:madness::RMI::RmiTask
nsummed	src/madness/mra/lbdeux.h	/^        AtomicInt nsummed;$/;"	m	class:madness::LBNodeDeux
nswitched	src/apps/chem/distpm.cc	/^    AtomicInt nswitched;$/;"	m	class:madness::SystolicFixOrbitalOrders	file:
nswitched	src/apps/polar/distpm.cc	/^    AtomicInt nswitched;$/;"	m	class:SystolicFixOrbitalOrders	file:
nt	src/apps/moldft/parsemad.py	/^            nt = nt - 1$/;"	v
nt	src/apps/moldft/parsemad.py	/^        nt = nt - 1$/;"	v
nt	src/apps/moldft/parsemad.py	/^        nt = results[filename]['threads']$/;"	v
nt	src/apps/moldft/parsemad.py	/^    nt = results[filename]['threads']$/;"	v
nthread	src/madness/world/thread.h	/^        int nthread() const {$/;"	f	class:madness::TaskThreadEnv
nthread	src/madness/world/worldmutex.h	/^        const int nthread;$/;"	m	class:madness::Barrier
nthreads	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int      nthreads;$/;"	m	struct:__anon24
nthreads	src/madness/world/thread.h	/^        int nthreads; \/\/\/< Number of threads.$/;"	m	class:madness::ThreadPool
ntol	src/examples/nonlinschro.cc	/^static const double ntol = thresh*10.0; \/\/ Cutoff for numerically small density$/;"	v	file:
ntri	src/apps/chem/PNOTensors.h	/^size_t ntri(Int n) {$/;"	f	namespace:__anon48
nuc_func	src/examples/gygi_soltion.cc	/^double nuc_func(const coord_3d& r) {$/;"	f
nuclear_anchor_test	src/apps/chem/test_SCFOperators.cc	/^int nuclear_anchor_test(World& world) {$/;"	f
nuclear_attraction_potential	src/apps/chem/molecule.cc	/^double Molecule::nuclear_attraction_potential(double x, double y, double z) const$/;"	f	class:madness::Molecule
nuclear_attraction_potential	src/apps/hf/mentity.cc	/^double MolecularEntity::nuclear_attraction_potential(double x, double y, double z) const {$/;"	f	class:MolecularEntity
nuclear_attraction_potential	src/apps/polar/molecule.cc	/^double Molecule::nuclear_attraction_potential(double x, double y, double z) const {$/;"	f	class:Molecule
nuclear_attraction_potential_derivative	src/apps/chem/molecule.cc	/^double Molecule::nuclear_attraction_potential_derivative(int atom, int axis, double x, double y, double z) const$/;"	f	class:madness::Molecule
nuclear_attraction_potential_derivative	src/apps/polar/molecule.cc	/^double Molecule::nuclear_attraction_potential_derivative(int atom, int axis, double x, double y, double z) const {$/;"	f	class:Molecule
nuclear_attraction_potential_second_derivative	src/apps/chem/molecule.cc	/^double Molecule::nuclear_attraction_potential_second_derivative(int atom,$/;"	f	class:madness::Molecule
nuclear_charge_density	src/apps/chem/molecule.cc	/^double Molecule::nuclear_charge_density(double x, double y, double z) const$/;"	f	class:madness::Molecule
nuclear_charge_density	src/apps/hf/mentity.cc	/^double MolecularEntity::nuclear_charge_density(double x, double y, double z) const {$/;"	f	class:MolecularEntity
nuclear_charge_density	src/apps/polar/molecule.cc	/^double Molecule::nuclear_charge_density(double x, double y, double z) const {$/;"	f	class:Molecule
nuclear_charge_function	src/examples/colloid.cc	/^double nuclear_charge_function(const coord_3d& r) {$/;"	f
nuclear_charge_function	src/examples/svpe.cc	/^double nuclear_charge_function(const coord_3d& r) {$/;"	f
nuclear_corrfac	src/apps/chem/mp2.h	/^        std::shared_ptr<NuclearCorrelationFactor> nuclear_corrfac;$/;"	m	class:madness::MP2
nuclear_dipole	src/apps/chem/molecule.cc	/^double Molecule::nuclear_dipole(int axis) const$/;"	f	class:madness::Molecule
nuclear_dipole	src/apps/polar/molecule.cc	/^double Molecule::nuclear_dipole(int axis) const {$/;"	f	class:Molecule
nuclear_dipole_derivative	src/apps/chem/molecule.cc	/^Tensor<double> Molecule::nuclear_dipole_derivative(const int atom, const int axis) const$/;"	f	class:madness::Molecule
nuclear_gaussian_exponent	src/apps/chem/atomutil.h	/^    const double nuclear_gaussian_exponent; \/\/\/< Exponential parameter in the Gaussian Model (in atomic units).$/;"	m	struct:madness::AtomicData
nuclear_gaussian_exponent	src/apps/hf/mentity.h	/^    const double nuclear_gaussian_exponent; \/\/\/< Exponential parameter in the Gaussian Model (in atomic units).$/;"	m	struct:AtomicData
nuclear_gaussian_exponent	src/apps/polar/atomutil.h	/^    const double nuclear_gaussian_exponent; \/\/\/< Exponential parameter in the Gaussian Model (in atomic units).$/;"	m	struct:AtomicData
nuclear_half_charge_radius	src/apps/chem/atomutil.h	/^    const double nuclear_half_charge_radius; \/\/\/< Half charge radius in the Fermi Model (in atomic units).$/;"	m	struct:madness::AtomicData
nuclear_half_charge_radius	src/apps/hf/mentity.h	/^    const double nuclear_half_charge_radius; \/\/\/< Half charge radius in the Fermi Model (in atomic units).$/;"	m	struct:AtomicData
nuclear_half_charge_radius	src/apps/polar/atomutil.h	/^    const double nuclear_half_charge_radius; \/\/\/< Half charge radius in the Fermi Model (in atomic units).$/;"	m	struct:AtomicData
nuclear_magneton	src/madness/constants.h	/^        const double nuclear_magneton = 5.05078324e-27 ; \/\/     0.00000013e-27     J T^-1$/;"	m	namespace:madness::constants
nuclear_magneton_in_eV_per_T	src/madness/constants.h	/^        const double nuclear_magneton_in_eV_per_T = 3.1524512326e-8 ; \/\/   0.0000000045e-8    eV T^-1$/;"	m	namespace:madness::constants
nuclear_mep	src/apps/chem/pcm.cc	/^Tensor<double> PCM::nuclear_mep(int nr_nuclei, const Tensor<double>& charges,$/;"	f	class:madness::PCM
nuclear_potential	src/apps/hf/ewald.cc	/^double nuclear_potential(const Tensor<double>& c, const Tensor<double>& e, double r)$/;"	f
nuclear_radius	src/apps/chem/atomutil.h	/^    const double nuclear_radius;     \/\/\/< Radius of the nucleus for the finite nucleus models (in atomic units).$/;"	m	struct:madness::AtomicData
nuclear_radius	src/apps/hf/mentity.h	/^    const double nuclear_radius;     \/\/\/< Radius of the nucleus for the finite nucleus models (in atomic units).$/;"	m	struct:AtomicData
nuclear_radius	src/apps/polar/atomutil.h	/^    const double nuclear_radius;     \/\/\/< Radius of the nucleus for the finite nucleus models (in atomic units).$/;"	m	struct:AtomicData
nuclear_repulsion_derivative	src/apps/chem/molecule.cc	/^double Molecule::nuclear_repulsion_derivative(size_t i, int axis) const$/;"	f	class:madness::Molecule
nuclear_repulsion_derivative	src/apps/polar/molecule.cc	/^double Molecule::nuclear_repulsion_derivative(int i, int axis) const {$/;"	f	class:Molecule
nuclear_repulsion_energy	src/apps/chem/molecule.cc	/^double Molecule::nuclear_repulsion_energy() const$/;"	f	class:madness::Molecule
nuclear_repulsion_energy	src/apps/hf/mentity.cc	/^double MolecularEntity::nuclear_repulsion_energy() const {$/;"	f	class:MolecularEntity
nuclear_repulsion_energy	src/apps/polar/molecule.cc	/^double Molecule::nuclear_repulsion_energy() const {$/;"	f	class:Molecule
nuclear_repulsion_hessian	src/apps/chem/molecule.cc	/^Tensor<double> Molecule::nuclear_repulsion_hessian() const$/;"	f	class:madness::Molecule
nuclear_repulsion_second_derivative	src/apps/chem/molecule.cc	/^double Molecule::nuclear_repulsion_second_derivative(int iatom, int jatom,$/;"	f	class:madness::Molecule
null	src/apps/chem/QCCalculationParametersBase.h	/^	std::string null="";$/;"	m	struct:madness::QCParameter
null	src/madness/mra/test_mra6.cc	/^    enum TensorFill {null, index, random};$/;"	e	enum:__anon12::TensorFill	file:
null	src/madness/tensor/test_gentensor.cc	/^    enum TensorFill {null, index, random};$/;"	e	enum:__anon43::TensorFill	file:
null_func	src/madness/world/test_world.cc	/^void null_func() { }$/;"	f
nullrep_	src/madness/external/tinyxml/tinystr.cc	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:TiXmlString	file:
nullrep_	src/madness/external/tinyxml/tinystr.h	/^	static Rep nullrep_;$/;"	m	class:TiXmlString
numBase	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    std::string imgBase, numBase;$/;"	m	struct:elem::SnapshotCtrl
numDiscreteColors	src/madness/external/elemental/src/core/global.cpp	/^Int numDiscreteColors = 15;$/;"	m	namespace:__anon33	file:
numFormat	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    FileFormat imgFormat, numFormat;$/;"	m	struct:elem::SnapshotCtrl
numGlobalEigenvalues	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	/^    int numGlobalEigenvalues;$/;"	m	struct:elem::herm_tridiag_eig::Estimate
numGlobalEigenvalues	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	/^    int numGlobalEigenvalues;$/;"	m	struct:elem::herm_tridiag_eig::Info
numLocalEigenvalues	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	/^    int numLocalEigenvalues;$/;"	m	struct:elem::herm_tridiag_eig::Estimate
numLocalEigenvalues	src/madness/external/elemental/include/elemental/core/imports/pmrrr.hpp	/^    int numLocalEigenvalues;$/;"	m	struct:elem::herm_tridiag_eig::Info
numNegative	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Int numPositive, numNegative, numZero;$/;"	m	struct:elem::InertiaType
numPositive	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Int numPositive, numNegative, numZero;$/;"	m	struct:elem::InertiaType
numSaveCount	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    Int imgSaveCount, numSaveCount, imgDispCount;$/;"	m	struct:elem::SnapshotCtrl
numSaveFreq	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    Int imgSaveFreq, numSaveFreq, imgDispFreq;$/;"	m	struct:elem::SnapshotCtrl
numZero	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Int numPositive, numNegative, numZero;$/;"	m	struct:elem::InertiaType
num_del_calls	src/madness/world/worldmem.h	/^        unsigned long num_del_calls;   \/\/\/< Counts calls to delete$/;"	m	class:madness::WorldMemInfo
num_elec_	src/apps/chem/AC.h	/^	int num_elec_; \/\/\/ number of electrons$/;"	m	struct:madness::ACParameters
num_hw_processors	src/madness/world/thread.cc	/^    int ThreadBase::num_hw_processors() {$/;"	f	class:madness::ThreadBase
num_io_clients	src/madness/world/parallel_archive.h	/^            int num_io_clients() const {$/;"	f	class:madness::archive::BaseParallelArchive
num_left	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  counter_t    *num_left;$/;"	m	struct:__anon31
num_messages	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int         num_messages;$/;"	m	struct:__anon26
num_new_calls	src/madness/world/worldmem.h	/^        unsigned long num_new_calls;   \/\/\/< Counts calls to new$/;"	m	class:madness::WorldMemInfo
num_occ	src/apps/adrian/TDDFT.cc	/^  const int num_occ;$/;"	m	struct:TDHF_allocator	file:
num_occ	src/apps/adrian/TDHF.cc	/^   const int num_occ;$/;"	m	struct:TDHF_allocator	file:
num_occ	src/apps/adrian/TDHF2.cc	/^   const int num_occ;$/;"	m	struct:TDHF_allocator	file:
num_occ	src/apps/bryan/TDHF.cc	/^   const int num_occ;$/;"	m	struct:TDHF_allocator	file:
num_occ	src/apps/bryan/TDHF2.cc	/^   const int num_occ;$/;"	m	struct:TDHF_allocator	file:
num_orbitals	src/apps/adrian/GroundParameters.h	/^      unsigned int num_orbitals;               \/\/\/< Number of orbitals in ground state$/;"	m	struct:madness::GroundParameters
num_orbitals	src/apps/bryan/GroundParameters.h	/^      unsigned int num_orbitals;               \/\/\/< Number of orbitals in ground state$/;"	m	struct:madness::GroundParameters
num_tasks	src/madness/external/elemental/external/pmrrr/include/queue.h	/^  int                num_tasks;$/;"	m	struct:__anon20
num_vir	src/apps/adrian/TDDFT.cc	/^  const int num_vir;$/;"	m	struct:TDHF_allocator	file:
num_vir	src/apps/adrian/TDHF.cc	/^   const int num_vir;$/;"	m	struct:TDHF_allocator	file:
num_vir	src/apps/adrian/TDHF2.cc	/^   const int num_vir;$/;"	m	struct:TDHF_allocator	file:
num_vir	src/apps/bryan/TDHF.cc	/^   const int num_vir;$/;"	m	struct:TDHF_allocator	file:
num_vir	src/apps/bryan/TDHF2.cc	/^   const int num_vir;$/;"	m	struct:TDHF_allocator	file:
number	src/apps/chem/PNOStructures.h	/^	int number=-1;$/;"	m	struct:madness::CISData
number	src/apps/nick/parse.py	/^number  = []$/;"	v
number_xc_args	src/apps/chem/xcfunctional.h	/^    const static int number_xc_args=28;     \/\/\/< max number of intermediates$/;"	m	class:madness::XCfunctional
numbf	src/apps/chem/molecularbasis.h	/^    int numbf;  \/\/\/< Number of basis functions in shell (type+1)*(type+2)\/2$/;"	m	class:madness::ContractedGaussianShell
numbf	src/apps/chem/molecularbasis.h	/^    int numbf;$/;"	m	class:madness::AtomicBasis
numbf	src/apps/hf/molecularbasis.h	/^    int numbf;  \/\/\/< Number of basis functions in shell (type+1)*(type+2)\/2$/;"	m	class:ContractedGaussianShell
numbf	src/apps/hf/molecularbasis.h	/^    int numbf;$/;"	m	class:AtomicBasis
numbf	src/apps/polar/molecularbasis.h	/^    int numbf;  \/\/\/< Number of basis functions in shell (type+1)*(type+2)\/2$/;"	m	class:ContractedGaussianShell
numbf	src/apps/polar/molecularbasis.h	/^    int numbf;$/;"	m	class:AtomicBasis
numderiv	src/madness/mra/tools/mathutil.py	/^def numderiv(func,x,step,eps): $/;"	f
numproc	src/madness/world/safempi.h	/^            int numproc;$/;"	m	struct:SafeMPI::Intracomm::Impl
nv_factor	src/apps/chem/CalculationParameters.h	/^	int nv_factor() const {return get<int>("nv_factor");}$/;"	f	struct:madness::CalculationParameters
nvalpha	src/apps/chem/CalculationParameters.h	/^	int nvalpha() const {return get<int>("nvalpha");}$/;"	f	struct:madness::CalculationParameters
nvalpha	src/apps/polar/moldft.cc	/^    int nvalpha;           \/\/\/< Number of alpha virtuals to compute$/;"	m	struct:CalculationParameters	file:
nvbeta	src/apps/chem/CalculationParameters.h	/^	int nvbeta() const {return get<int>("nvbeta");}$/;"	f	struct:madness::CalculationParameters
nvbeta	src/apps/polar/moldft.cc	/^    int nvbeta;            \/\/\/< Number of beta virtuals to compute$/;"	m	struct:CalculationParameters	file:
nvitems	src/madness/world/worldprofile.cc	/^    std::vector<WorldProfileEntry>& WorldProfile::nvitems() {$/;"	f	class:madness::WorldProfile
nwalko	src/apps/moldft/fci/fci.F	/^      integer nwalko,/;"	v	program:fci
nwalkosym	src/apps/moldft/fci/fci.F	/^     $     symstate, nwalkosym$/;"	v	program:fci
nwave	src/madness/mra/testperiodic.cc	/^const int nwave = 2;$/;"	v
nwchem	src/apps/adrian/ResponseParameters.h	/^      std::string nwchem;                \/\/\/< Root name of nwchem files for intelligent starting guess$/;"	m	struct:madness::ResponseParameters
nwchem	src/apps/bryan/ResponseParameters.h	/^      std::string nwchem;                \/\/\/< Root name of nwchem files for intelligent starting guess$/;"	m	struct:madness::ResponseParameters
nworking	src/madness/world/worldmutex.h	/^        AtomicInt nworking;$/;"	m	class:madness::Barrier
nx	src/examples/vnucso.cc	/^    const int nx, ny, nz;  \/\/ powers of x, y, z ... only 0 or 1 supported!$/;"	m	struct:Guess	file:
nx	src/madness/tensor/gfit.cc	/^    const long nx;$/;"	m	class:Fred	file:
ny	src/examples/vnucso.cc	/^    const int nx, ny, nz;  \/\/ powers of x, y, z ... only 0 or 1 supported!$/;"	m	struct:Guess	file:
nz	src/examples/vnucso.cc	/^    const int nx, ny, nz;  \/\/ powers of x, y, z ... only 0 or 1 supported!$/;"	m	struct:Guess	file:
nz	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int              nz;$/;"	m	struct:__anon23
obj	src/apps/nick/wavef.h	/^        ScatteringWF* obj;$/;"	m	struct:ScatteringWF::MemberFuncPtr
objT	src/madness/world/world_object.h	/^        typedef WorldObject<Derived> objT;$/;"	t	class:madness::WorldObject
obj_id	src/madness/world/world.h	/^        unsigned long obj_id; \/\/\/< Counter for generating unique IDs within this world.$/;"	m	class:madness::World
obj_type	src/madness/world/function_traits.h	/^            typedef objT obj_type;$/;"	t	struct:madness::detail::memfunc_traits
objid	src/madness/world/uniqueid.h	/^        unsigned long objid; \/\/\/< ID of the object.$/;"	m	class:madness::uniqueidT
objid	src/madness/world/world_object.h	/^        uniqueidT objid; \/\/\/< Sense of self.$/;"	m	class:madness::WorldObject
occ	src/apps/adrian/GroundParameters.h	/^      Tensor<double> occ;                      \/\/\/< Occupancy of ground state orbitals$/;"	m	struct:madness::GroundParameters
occ	src/apps/bryan/GroundParameters.h	/^      Tensor<double> occ;                      \/\/\/< Occupancy of ground state orbitals$/;"	m	struct:madness::GroundParameters
occ	src/apps/chem/MolecularOrbitals.h	/^	Tensor<double> occ;$/;"	m	class:madness::MolecularOrbitals
occ	src/apps/chem/SCFOperators.h	/^    Tensor<double> occ;$/;"	m	class:madness::Exchange
occupancies	src/apps/adrian/ESInterface.h	/^  const madness::Tensor<double> &occupancies; \/\/\/< Publically accessible list of alpha MO occupancies (in eV).$/;"	m	class:slymer::ES_Interface
occupancies	src/apps/bryan/ESInterface.h	/^  const madness::Tensor<double> &occupancies; \/\/\/< Publically accessible list of alpha MO occupancies (in eV).$/;"	m	class:slymer::ES_Interface
odcpy	src/madness/external/elemental/external/pmrrr/src/blas/odcpy.c	/^int odcpy(int *n, double *dx, int *incx, double *dy, int *incy)$/;"	f
ode2	src/madness/external/elemental/external/pmrrr/src/lapack/ode2.c	/^int ode2(double *a, double *b, double *c__, double *rt1, double *rt2)$/;"	f
odebz	src/madness/external/elemental/external/pmrrr/src/lapack/odebz.c	/^int odebz(int *ijob, int *nitmax, int *n, $/;"	f
odev2	src/madness/external/elemental/external/pmrrr/src/lapack/odev2.c	/^int odev2(double *a, double *b, double *c__, $/;"	f
odnan	src/madness/external/elemental/external/pmrrr/src/lapack/odnan.c	/^int odnan(double *din)$/;"	f
odneg	src/madness/external/elemental/external/pmrrr/src/lapack/odneg.c	/^int odneg(int *n, double *d__, double *lld, double *$/;"	f
odnst	src/madness/external/elemental/external/pmrrr/src/lapack/odnst.c	/^double odnst(char *norm, int *n, double *d__, double *e)$/;"	f
odr1v	src/madness/external/elemental/external/pmrrr/src/lapack/odr1v.c	/^int odr1v(int *n, int *b1, int *bn, double $/;"	f
odrnv	src/madness/external/elemental/external/pmrrr/src/lapack/odrnv.c	/^int odrnv(int *idist, int *iseed, int *n, double *x)$/;"	f
odrra	src/madness/external/elemental/external/pmrrr/src/lapack/odrra.c	/^int odrra(int *n, double *d__, double *e, $/;"	f
odrrb	src/madness/external/elemental/external/pmrrr/src/lapack/odrrb.c	/^int odrrb(int *n, double *d__, double *lld, $/;"	f
odrrc	src/madness/external/elemental/external/pmrrr/src/lapack/odrrc.c	/^int odrrc(char *jobt, int *n, double *vl, $/;"	f
odrrd	src/madness/external/elemental/external/pmrrr/src/lapack/odrrd.c	/^int odrrd(char *range, char *order, int *n, double *vl,  $/;"	f
odrre	src/madness/external/elemental/external/pmrrr/src/lapack/odrre.c	/^int odrre(char *range, int *n, double *vl, $/;"	f
odrrf	src/madness/external/elemental/external/pmrrr/src/lapack/odrrf.c	/^int odrrf(int *n, double *d__, double *l, $/;"	f
odrrj	src/madness/external/elemental/external/pmrrr/src/lapack/odrrj.c	/^int odrrj(int *n, double *d__, double *e2, $/;"	f
odrrk	src/madness/external/elemental/external/pmrrr/src/lapack/odrrk.c	/^int odrrk(int *n, int *iw, double *gl, $/;"	f
odrrr	src/madness/external/elemental/external/pmrrr/src/lapack/odrrr.c	/^int odrrr(int *n, double *d__, double *e, int *info)$/;"	f
odrrv	src/madness/external/elemental/external/pmrrr/src/lapack/odrrv.c	/^\/* Subroutine *\/ int odrrv(int *n, double *vl, double *vu, $/;"	f
odruv	src/madness/external/elemental/external/pmrrr/src/lapack/odruv.c	/^int odruv(int *iseed, int *n, double *x)$/;"	f
odscal	src/madness/external/elemental/external/pmrrr/src/blas/odscal.c	/^int odscal(int *n, double *da, double *dx, int *incx)$/;"	f
odset	src/madness/external/elemental/external/pmrrr/src/lapack/odset.c	/^\/* Subroutine *\/ int odset(char *uplo, int *m, int *n, double *alpha, $/;"	f
odsnan	src/madness/external/elemental/external/pmrrr/src/lapack/odsnan.c	/^int odsnan(double *din1, double *din2)$/;"	f
odsq2	src/madness/external/elemental/external/pmrrr/src/lapack/odsq2.c	/^int odsq2(int *n, double *z__, int *info)$/;"	f
odsq3	src/madness/external/elemental/external/pmrrr/src/lapack/odsq3.c	/^\/* Subroutine *\/ int odsq3(int *i0, int *n0, double *z__, $/;"	f
odsq4	src/madness/external/elemental/external/pmrrr/src/lapack/odsq4.c	/^int odsq4(int *i0, int *n0, double *z__, $/;"	f
odsq5	src/madness/external/elemental/external/pmrrr/src/lapack/odsq5.c	/^int odsq5(int *i0, int *n0, double *z__, $/;"	f
odsq6	src/madness/external/elemental/external/pmrrr/src/lapack/odsq6.c	/^int odsq6(int *i0, int *n0, double *z__, $/;"	f
odsrt	src/madness/external/elemental/external/pmrrr/src/lapack/odsrt.c	/^int odsrt(char *id, int *n, double *d__, int *info)$/;"	f
odssq	src/madness/external/elemental/external/pmrrr/src/lapack/odssq.c	/^int odssq(int *n, double *x, int *incx, double *scale, double *sumsq)$/;"	f
odstmr	src/madness/external/elemental/external/pmrrr/src/lapack/odstmr.c	/^int odstmr(char *jobz, char *range, int *n, double *d__, $/;"	f
odswap	src/madness/external/elemental/external/pmrrr/src/blas/odswap.c	/^int odswap(int *n, double *dx, int *incx, double *dy, int *incy)$/;"	f
oep_param	src/apps/chem/oep.h	/^	OEP_Parameters oep_param;$/;"	m	class:madness::OEP
oerbla	src/madness/external/elemental/external/pmrrr/src/lapack/oerbla.c	/^int oerbla(char *srname, int *info)$/;"	f
offset	src/apps/chem/masks_and_boxes.h	/^	const coordT offset=coordT(0.0);$/;"	m	struct:madness::spherical_box
offx	src/apps/moldft/testperiodic.cc	/^    int offx, offy, offz;$/;"	m	class:AtomicOrbitalFunctor	file:
offy	src/apps/moldft/testperiodic.cc	/^    int offx, offy, offz;$/;"	m	class:AtomicOrbitalFunctor	file:
offz	src/apps/moldft/testperiodic.cc	/^    int offx, offy, offz;$/;"	m	class:AtomicOrbitalFunctor	file:
oi	src/examples/he.cc	/^static const long oi = 0;        \/\/ orbital (mcquarrie, hylleraas-3term)$/;"	v	file:
oit	src/apps/chem/PNO.h	/^	OrbitalIterator oit()const{return OrbitalIterator(nemo.get_calc()->amo.size(),param.freeze());}$/;"	f	class:madness::PNO
ok	src/madness/mra/test6.cc	/^std::string ok(const bool b) {if (b) return "ok   "; return "fail ";};$/;"	f
ok	src/madness/tensor/testseprep.cc	/^std::string ok(const bool b) {if (b) return "ok   "; return "fail ";};$/;"	f
old	src/apps/adrian/ResponseParameters.h	/^bool old;$/;"	m	struct:madness::ResponseParameters
old	src/apps/bryan/ResponseParameters.h	/^bool old;$/;"	m	struct:madness::ResponseParameters
old_reporter_	src/madness/external/gtest/include/gtest/gtest-spi.h	/^  TestPartResultReporterInterface* old_reporter_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter
olsame	src/madness/external/elemental/external/pmrrr/src/lapack/olsame.c	/^int olsame(char *ca, char *cb)$/;"	f
omega	src/apps/adrian/ResponseParameters.h	/^      double omega;                      \/\/\/< Incident energy for polarizability$/;"	m	struct:madness::ResponseParameters
omega	src/apps/adrian/TDDFT.h	/^  Tensor<double> omega;        \/\/ Energies of response functions$/;"	m	class:TDHF
omega	src/apps/adrian/TDHF2.h	/^      Tensor<double> omega;        \/\/ Energies of response functions$/;"	m	class:TDHF
omega	src/apps/bryan/ResponseParameters.h	/^      double omega;                      \/\/\/< Incident energy for polarizability$/;"	m	struct:madness::ResponseParameters
omega	src/apps/bryan/TDHF2.h	/^      Tensor<double> omega;        \/\/ Energies of response functions$/;"	m	class:TDHF
omega	src/apps/chem/CCStructures.h	/^    double omega; \/\/\/ excitation energy$/;"	m	struct:madness::CC_vecfunction
omega	src/apps/chem/PNOStructures.h	/^	double omega=0.0;$/;"	m	struct:madness::CISData
omega	src/apps/chem/zcis.h	/^		double omega=0.0;$/;"	m	struct:madness::Zcis::root
omega	src/apps/chem/zcis.h	/^	double omega() const {return get<double>("omega");};$/;"	f	class:madness::Complex_CIS_Parameters
omega	src/apps/nick/extra.h	/^  double omega;       \/\/ Laser frequency$/;"	m	struct:InputParameters
omega	src/apps/nick/tdse1.cc	/^    double omega;       \/\/ Laser frequency$/;"	m	struct:InputParameters	file:
omega	src/apps/tdse/tdse.cc	/^  double omega;       \/\/ Laser frequency$/;"	m	struct:InputParameters	file:
omega	src/apps/tdse/tdse.confused.cc	/^  double omega;       \/\/ Laser frequency$/;"	m	struct:InputParameters	file:
omega	src/apps/tdse/tdse4.cc	/^  double omega;       \/\/ Laser frequency$/;"	m	struct:InputParameters	file:
omega	src/examples/tdse_example.cc	/^static const double omega = 1.0; \/\/ Laser frequency$/;"	v	file:
on_demand	src/madness/mra/funcimpl.h	/^        bool on_demand; \/\/\/< does this function have an additional functor?$/;"	m	class:madness::FunctionImpl
one	src/apps/nick/wavef.h	/^    complexd one;$/;"	m	class:ScatteringWF
one1	src/apps/chem/test_pointgroupsymmetry.cc	/^double one1(const coord_3d& r) {$/;"	f
one_3d	src/madness/mra/test6.cc	/^static double one_3d(const coord_3d& r) {$/;"	f	file:
one_6d	src/madness/mra/test6.cc	/^static double one_6d(const coord_6d& r) {$/;"	f	file:
onepdm	src/apps/moldft/fci/fci.F	/^      double precision onepdm(/;"	v	program:fci
only_pair	src/apps/chem/CCStructures.h	/^    std::pair<int,int> only_pair =std::make_pair(-1,-1);$/;"	m	struct:madness::CCParameters
op	src/apps/adrian/ResponsePotential.h	/^      real_convolution_3d op;                                          \/\/ Coulomb operator$/;"	m	class:madness::ResponsePotential
op	src/apps/bryan/ResponsePotential.h	/^      real_convolution_3d op;                                          \/\/ Coulomb operator$/;"	m	class:madness::ResponsePotential
op	src/apps/chem/CCStructures.h	/^    const CCConvolutionOperator* op;$/;"	m	struct:madness::CCPairFunction
op	src/apps/chem/CCStructures.h	/^    const std::shared_ptr<real_convolution_3d> op;$/;"	m	struct:madness::CCConvolutionOperator
op	src/examples/svpe.cc	/^    real_convolution_3d op;             \/\/< Coulomb operator (1\/r ... no 4pi)$/;"	m	class:SVPESolver	file:
op	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^    MPI_Op op;$/;"	m	struct:elem::mpi::Op
op	src/madness/mra/convolution1d.h	/^        opT op;$/;"	m	class:madness::GenericConvolution1D
op	src/madness/mra/funcimpl.h	/^            opT op;$/;"	m	struct:madness::FunctionImpl::coeff_value_adaptor
op	src/madness/mra/funcimpl.h	/^            opT op;$/;"	m	struct:madness::FunctionImpl::do_unary_op_value_inplace
op	src/madness/mra/funcimpl.h	/^        const opT* op;    \/\/\/< the convolution operator$/;"	m	struct:madness::op_leaf_op
op	src/madness/mra/funcimpl.h	/^        const opT* op;$/;"	m	struct:madness::hartree_convolute_leaf_op
op	src/madness/mra/function_interface.h	/^        const opT op;$/;"	m	class:madness::FunctionInterface
op	src/madness/mra/function_interface.h	/^        opT op;$/;"	m	class:madness::FunctorInterface
op	src/madness/mra/leafop.h	/^    const opT * op;$/;"	m	class:madness::Leaf_op
op	src/madness/mra/testsuite.cc	/^    opT op;$/;"	m	class:BinaryOp	file:
op	src/madness/tensor/kain.cc	/^Tensor<double> op(const Tensor<double>& x) {$/;"	f
op	src/madness/tensor/tensor.h	/^        static Q op(const Q& coeff) {$/;"	f	struct:madness::conditional_conj_struct
op	src/madness/tensor/test_solvers.cc	/^Tensor<double> op(const Tensor<double>& x) {$/;"	f
opT	src/madness/mra/convolution1d.h	/^        typedef Q opT;  \/\/\/< The apply function uses this to infer resultT=opT*inputT$/;"	t	class:madness::Convolution1D
opT	src/madness/mra/derivative.h	/^        typedef T opT;$/;"	t	class:madness::Derivative
opT	src/madness/mra/operator.h	/^        typedef Q opT;  \/\/\/< The apply function uses this to infer resultT=opT*inputT$/;"	t	class:madness::SeparatedConvolution
op_	src/madness/world/world_task_queue.h	/^            opT op_; \/\/\/< The foreach function.$/;"	m	class:madness::detail::ForEachRootTask
op_leaf_op	src/madness/mra/funcimpl.h	/^        op_leaf_op() {}$/;"	f	struct:madness::op_leaf_op
op_leaf_op	src/madness/mra/funcimpl.h	/^        op_leaf_op(const opT* op, const implT* f) : op(op), f(f) {}$/;"	f	struct:madness::op_leaf_op
op_leaf_op	src/madness/mra/funcimpl.h	/^    struct op_leaf_op {$/;"	s	namespace:madness
op_o	src/apps/hf/eigsolver.h	/^  virtual funcT op_o(const std::vector<funcT>& phis, const funcT& psi)$/;"	f	class:madness::EigSolverOp
op_o	src/apps/hf/hartreefock.cc	/^  Function<T,NDIM> HartreeFockExchangeOp<T,NDIM>::op_o(const std::vector<funcT>& phis, const funcT& rhon, const funcT& psi)$/;"	f	class:madness::HartreeFockExchangeOp
op_r	src/apps/hf/dft.cc	/^  Function<T,NDIM> DFTCoulombOp<T,NDIM>::op_r(const funcT& rho, const funcT& psi)$/;"	f	class:madness::DFTCoulombOp
op_r	src/apps/hf/dft.cc	/^  Function<T,NDIM> DFTCoulombPeriodicOp<T,NDIM>::op_r(const funcT& rho, const funcT& psi)$/;"	f	class:madness::DFTCoulombPeriodicOp
op_r	src/apps/hf/dft.cc	/^  Function<T,NDIM> DFTNuclearChargeDensityOp<T,NDIM>::op_r(const funcT& rho, const funcT& psi)$/;"	f	class:madness::DFTNuclearChargeDensityOp
op_r	src/apps/hf/dft.cc	/^  Function<T,NDIM> DFTNuclearPotentialOp<T,NDIM>::op_r(const funcT& rho, const funcT& psi)$/;"	f	class:madness::DFTNuclearPotentialOp
op_r	src/apps/hf/dft.cc	/^  Function<T,NDIM> XCFunctionalLDA<T,NDIM>::op_r(const funcT& rho, const funcT& psi)$/;"	f	class:madness::XCFunctionalLDA
op_r	src/apps/hf/eigsolver.h	/^  virtual funcT op_r(const funcT& rho, const funcT& psi)$/;"	f	class:madness::EigSolverOp
op_r	src/apps/hf/hartreefock.cc	/^  Function<T,NDIM> HartreeFockCoulombOp<T,NDIM>::op_r(const funcT& rho, const funcT& rhon, const funcT& psi)$/;"	f	class:madness::HartreeFockCoulombOp
op_r	src/apps/hf/hartreefock.cc	/^  Function<T,NDIM> HartreeFockNuclearPotentialOp<T,NDIM>::op_r(const funcT& rho, const funcT& rhon, const funcT& psi)$/;"	f	class:madness::HartreeFockNuclearPotentialOp
op_r	src/apps/hf/test_hydro.cc	/^    virtual funcT op_r(const funcT& rho, const funcT& psi)$/;"	f	class:NuclearChargeDensityOp
op_thresh	src/apps/chem/PNOParameters.h	/^	double op_thresh()const { return get<double >("op_thresh");}$/;"	f	class:madness::PNOParameters
opdim	src/madness/mra/operator.h	/^        const static size_t opdim=NDIM;$/;"	m	class:madness::SeparatedConvolution
open	src/madness/world/binary_fstream_archive.cc	/^        void BinaryFstreamInputArchive::open(const char* filename,  std::ios_base::openmode mode) {$/;"	f	class:madness::archive::BinaryFstreamInputArchive
open	src/madness/world/binary_fstream_archive.cc	/^        void BinaryFstreamOutputArchive::open(const char* filename, std::ios_base::openmode mode) {$/;"	f	class:madness::archive::BinaryFstreamOutputArchive
open	src/madness/world/buffer_archive.h	/^            void open() {};$/;"	f	class:madness::archive::BufferInputArchive
open	src/madness/world/buffer_archive.h	/^            void open(std::size_t \/*hint*\/) {}$/;"	f	class:madness::archive::BufferOutputArchive
open	src/madness/world/cereal_archive.h	/^  void open(std::size_t hint) {}$/;"	f	class:madness::archive::CerealInputArchive
open	src/madness/world/cereal_archive.h	/^  void open(std::size_t hint) {}$/;"	f	class:madness::archive::CerealOutputArchive
open	src/madness/world/parallel_archive.h	/^            void open(World& world, const char* filename, int nwriter=1) {$/;"	f	class:madness::archive::BaseParallelArchive
open	src/madness/world/text_fstream_archive.cc	/^        void TextFstreamInputArchive::open(const char* filename, std::ios_base::openmode mode) {$/;"	f	class:madness::archive::TextFstreamInputArchive
open	src/madness/world/text_fstream_archive.cc	/^        void TextFstreamOutputArchive::open(const char* filename,$/;"	f	class:madness::archive::TextFstreamOutputArchive
open	src/madness/world/vector_archive.h	/^            void open() {};$/;"	f	class:madness::archive::VectorInputArchive
open	src/madness/world/vector_archive.h	/^            void open(std::size_t hint=262144) {$/;"	f	class:madness::archive::VectorOutputArchive
operation	src/apps/chem/CCStructures.h	/^    std::string operation;$/;"	m	struct:madness::CCTimer
operator !	src/madness/external/gtest/src/gtest.cc	/^AssertionResult AssertionResult::operator!() const {$/;"	f	class:testing::AssertionResult
operator !	src/madness/world/worldptr.h	/^            bool operator ! () const {$/;"	f	class:madness::detail::WorldPtr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator !=  (const unsigned long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator !=	src/apps/nick/mpreal.h	/^inline bool operator != (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator !=	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline bool operator!=( const Grid& A, const Grid& B ) { return &A != &B; }$/;"	f	namespace:elem
operator !=	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^inline bool operator!=( const Comm& a, const Comm& b )$/;"	f	namespace:elem::mpi
operator !=	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^inline bool operator!=( const Group& a, const Group& b )$/;"	f	namespace:elem::mpi
operator !=	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^inline bool operator!=( const Op& a, const Op& b )$/;"	f	namespace:elem::mpi
operator !=	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  bool operator!=(T* p) const { return value_ != p; }$/;"	f	class:testing::internal::linked_ptr
operator !=	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  bool operator!=(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator !=	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^bool operator!=(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator !=	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  bool operator!=(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator !=	src/madness/external/tinyxml/tinystr.h	/^inline bool operator != (const TiXmlString & a, const TiXmlString & b) { return !(a == b); }$/;"	f
operator !=	src/madness/external/tinyxml/tinystr.h	/^inline bool operator != (const TiXmlString & a, const char* b) { return !(a == b); }$/;"	f
operator !=	src/madness/external/tinyxml/tinystr.h	/^inline bool operator != (const char* a, const TiXmlString & b) { return !(b == a); }$/;"	f
operator !=	src/madness/mra/key.h	/^        bool operator!=(const Key& other) const {$/;"	f	class:madness::Key
operator !=	src/madness/tensor/tensoriter.h	/^        inline bool operator != (const TensorIterator<T,Q,R>& a) const {$/;"	f	class:madness::TensorIterator
operator !=	src/madness/world/distributed_id.h	/^        bool operator!=(const ProcessKey<Key, Tag>& other) const {$/;"	f	class:madness::ProcessKey
operator !=	src/madness/world/distributed_id.h	/^        bool operator!=(const TaggedKey<Key, Tag>& other) const {$/;"	f	class:madness::TaggedKey
operator !=	src/madness/world/distributed_id.h	/^    inline bool operator!=(const DistributedID& left, const DistributedID& right) {$/;"	f	namespace:madness
operator !=	src/madness/world/safempi.h	/^        bool operator!=(const Request &other) { return (request_ != other.request_); }$/;"	f	class:SafeMPI::Request
operator !=	src/madness/world/vector.h	/^        friend bool operator!=(const Vector<T, N>& l, const Vector<T, N>& r) {$/;"	f	class:madness::Vector
operator !=	src/madness/world/worlddc.h	/^        bool operator!=(const WorldContainerIterator& other) const {$/;"	f	class:madness::WorldContainerIterator
operator !=	src/madness/world/worldhashmap.h	/^            bool operator!=(const HashIterator& a) const {$/;"	f	class:madness::Hash_private::HashIterator
operator !=	src/madness/world/worldptr.h	/^            bool operator!=(const WorldPtr<U>& other) const {$/;"	f	class:madness::detail::WorldPtr
operator &	src/madness/world/archive.h	/^        operator&(const Archive& ar, const T& t) {$/;"	f	namespace:madness::archive
operator &	src/madness/world/worldam.h	/^        archive::BufferInputArchive operator&(T& t) const {$/;"	f	class:madness::AmArg
operator &	src/madness/world/worldam.h	/^        archive::BufferOutputArchive operator&(const T& t) const {$/;"	f	class:madness::AmArg
operator ()	src/apps/adrian/TDDFT.cc	/^  ResponseFunction operator()() {$/;"	f	struct:TDHF_allocator
operator ()	src/apps/adrian/TDDFT.cc	/^  double operator()(const Key<NDIM> &key,$/;"	f	struct:lbcost
operator ()	src/apps/adrian/TDDFT.h	/^  double operator()(const Vector<double, 3> &r) const {$/;"	f	class:BS_MomentFunctor
operator ()	src/apps/adrian/TDDFT.h	/^  double operator()(const coordT &xyz) const {$/;"	f	class:GaussianGuess
operator ()	src/apps/adrian/TDHF.cc	/^    double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:lbcost
operator ()	src/apps/adrian/TDHF.cc	/^   std::vector<std::vector<real_function_3d>> operator()()$/;"	f	struct:TDHF_allocator
operator ()	src/apps/adrian/TDHF.h	/^    double operator()(const Vector<double,3>& r) const {$/;"	f	class:BS_MomentFunctor
operator ()	src/apps/adrian/TDHF.h	/^    double operator()(const coordT& xyz) const {$/;"	f	class:GaussianGuess
operator ()	src/apps/adrian/TDHF2.cc	/^    double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:lbcost
operator ()	src/apps/adrian/TDHF2.cc	/^   ResponseFunction operator()()$/;"	f	struct:TDHF_allocator
operator ()	src/apps/adrian/TDHF2.h	/^    double operator()(const Vector<double,3>& r) const {$/;"	f	class:BS_MomentFunctor
operator ()	src/apps/adrian/TDHF2.h	/^    double operator()(const coordT& xyz) const {$/;"	f	class:GaussianGuess
operator ()	src/apps/adrian/gaussian.cc	/^double GaussianFunction::operator() (const std::array<double, 3> &x) const {$/;"	f	class:slymer::GaussianFunction
operator ()	src/apps/adrian/gaussian.cc	/^double PrimitiveGaussian::operator() (const std::array<double, 3> &x) const {$/;"	f	class:slymer::PrimitiveGaussian
operator ()	src/apps/adrian/gaussian.h	/^    double operator()(const madness::coord_3d& r) const {$/;"	f	class:slymer::Gaussian_Functor
operator ()	src/apps/adrian/gaussian.h	/^  double operator() (const madness::coord_3d& r) const {$/;"	f	class:slymer::GaussianFunction
operator ()	src/apps/adrian/polynomial.cc	/^double PolynomialCoeffs::operator() (const std::array<double, 3> &pt) const {$/;"	f	class:slymer::PolynomialCoeffs
operator ()	src/apps/adrian/test_ResponseFunction.cc	/^    double operator()(const coordT& xyz) const {$/;"	f	class:GaussianGuess
operator ()	src/apps/bryan/TDHF.cc	/^    double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:lbcost
operator ()	src/apps/bryan/TDHF.cc	/^   std::vector<std::vector<real_function_3d>> operator()()$/;"	f	struct:TDHF_allocator
operator ()	src/apps/bryan/TDHF.h	/^    double operator()(const Vector<double,3>& r) const {$/;"	f	class:BS_MomentFunctor
operator ()	src/apps/bryan/TDHF.h	/^    double operator()(const coordT& xyz) const {$/;"	f	class:GaussianGuess
operator ()	src/apps/bryan/TDHF2.cc	/^    double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:lbcost
operator ()	src/apps/bryan/TDHF2.cc	/^   ResponseFunction operator()()$/;"	f	struct:TDHF_allocator
operator ()	src/apps/bryan/TDHF2.h	/^    double operator()(const Vector<double,3>& r) const {$/;"	f	class:BS_MomentFunctor
operator ()	src/apps/bryan/TDHF2.h	/^    double operator()(const coordT& xyz) const {$/;"	f	class:GaussianGuess
operator ()	src/apps/bryan/gaussian.cc	/^double GaussianFunction::operator() (const std::array<double, 3> &x) const {$/;"	f	class:slymer::GaussianFunction
operator ()	src/apps/bryan/gaussian.cc	/^double PrimitiveGaussian::operator() (const std::array<double, 3> &x) const {$/;"	f	class:slymer::PrimitiveGaussian
operator ()	src/apps/bryan/gaussian.h	/^    double operator()(const madness::coord_3d& r) const {$/;"	f	class:slymer::Gaussian_Functor
operator ()	src/apps/bryan/gaussian.h	/^  double operator() (const madness::coord_3d& r) const {$/;"	f	class:slymer::GaussianFunction
operator ()	src/apps/bryan/polynomial.cc	/^double PolynomialCoeffs::operator() (const std::array<double, 3> &pt) const {$/;"	f	class:slymer::PolynomialCoeffs
operator ()	src/apps/bryan/test_ResponseFunction.cc	/^    double operator()(const coordT& xyz) const {$/;"	f	class:GaussianGuess
operator ()	src/apps/chem/AC.h	/^	double operator ()(const Vector<double, NDIM> &r)const{$/;"	f	class:madness::int_factor_functor
operator ()	src/apps/chem/AC.h	/^	double operator ()(const Vector<double, NDIM> &r)const{$/;"	f	class:madness::lr_pot_functor
operator ()	src/apps/chem/AC.h	/^    void operator()(const Key<NDIM>& key, Tensor<double>& result, const Tensor<double>& vxc, const Tensor<double>& vhartree) const {$/;"	f	struct:madness::BinaryOpStructure
operator ()	src/apps/chem/AC.h	/^    void operator()(const Key<NDIM>& key, Tensor<double>& t) const {$/;"	f	struct:madness::UnaryOpStructure
operator ()	src/apps/chem/CCStructures.cc	/^  CCIntermediatePotentials::operator ()(const CCFunction& f,const PotentialType& type) const {$/;"	f	class:madness::CCIntermediatePotentials
operator ()	src/apps/chem/CCStructures.cc	/^  CCIntermediatePotentials::operator ()(const CC_vecfunction& f,const PotentialType& type) const {$/;"	f	class:madness::CCIntermediatePotentials
operator ()	src/apps/chem/CCStructures.cc	/^  real_function_3d CCConvolutionOperator::operator()(const CCFunction &bra, const CCFunction &ket, const bool use_im)const{$/;"	f	class:madness::CCConvolutionOperator
operator ()	src/apps/chem/CCStructures.cc	/^  real_function_3d CCConvolutionOperator::operator()(const CCFunction &bra,const real_function_6d &u, const size_t particle)const{$/;"	f	class:madness::CCConvolutionOperator
operator ()	src/apps/chem/CCStructures.cc	/^  real_function_6d CCConvolutionOperator::operator()(const real_function_6d &u, const size_t particle)const{$/;"	f	class:madness::CCConvolutionOperator
operator ()	src/apps/chem/CCStructures.h	/^    CCFunction& operator()(const CCFunction &i) {$/;"	f	struct:madness::CC_vecfunction
operator ()	src/apps/chem/CCStructures.h	/^    CCFunction& operator()(const size_t &i) {$/;"	f	struct:madness::CC_vecfunction
operator ()	src/apps/chem/CCStructures.h	/^    T& operator()(int i, int j) {$/;"	f	struct:madness::Pairs
operator ()	src/apps/chem/CCStructures.h	/^    const CCFunction& operator()(const CCFunction &i) const {$/;"	f	struct:madness::CC_vecfunction
operator ()	src/apps/chem/CCStructures.h	/^    const CCFunction& operator()(const size_t &i) const {$/;"	f	struct:madness::CC_vecfunction
operator ()	src/apps/chem/CCStructures.h	/^    const T & operator()(int i,int j)const{$/;"	f	struct:madness::Pairs
operator ()	src/apps/chem/CCStructures.h	/^    real_function_3d operator()(const real_function_3d &f)const {return ((*op)(f)).truncate();}$/;"	f	struct:madness::CCConvolutionOperator
operator ()	src/apps/chem/CCStructures.h	/^    vector_real_function_3d operator()(const CC_vecfunction & bra, const CCFunction &ket)const{$/;"	f	struct:madness::CCConvolutionOperator
operator ()	src/apps/chem/CCStructures.h	/^    vector_real_function_3d operator()(const vector_real_function_3d &f)const{$/;"	f	struct:madness::CCConvolutionOperator
operator ()	src/apps/chem/CCStructures.h	/^    void operator()(const std::string &msg)const{output(msg);}$/;"	f	struct:madness::CCMessenger
operator ()	src/apps/chem/GuessFactory.cc	/^double GaussFunctor::operator ()(const coord_3d& rr) const {$/;"	f	class:madness::guessfactory::GaussFunctor
operator ()	src/apps/chem/GuessFactory.cc	/^double PlaneWaveFunctor::operator ()(const coord_3d& r) const {$/;"	f	class:madness::guessfactory::PlaneWaveFunctor
operator ()	src/apps/chem/GuessFactory.cc	/^double PlaneWaveFunctor::operator ()(const double& x, const int& dim) const {$/;"	f	class:madness::guessfactory::PlaneWaveFunctor
operator ()	src/apps/chem/GuessFactory.cc	/^double PolynomialFunctor::operator ()(const coord_3d& rr) const {$/;"	f	class:madness::guessfactory::PolynomialFunctor
operator ()	src/apps/chem/GuessFactory.cc	/^void ExopUnaryOpStructure::operator ()(const Key<3>& key, Tensor<double>& t) const {$/;"	f	class:madness::guessfactory::ExopUnaryOpStructure
operator ()	src/apps/chem/GuessFactory.cc	/^void ExopUnaryOpStructure::operator ()(const Key<3>& key, Tensor<double_complex>& t) const {$/;"	f	class:madness::guessfactory::ExopUnaryOpStructure
operator ()	src/apps/chem/GuessFactory.h	/^    double operator()(const coord_1d & x, const int& dim)const{$/;"	f	class:madness::guessfactory::PlaneWaveFunctor
operator ()	src/apps/chem/PNOGuessFunctions.cpp	/^ double BasisFunctions::SolidHarmonicGaussian::operator ()(const coord_3d& xyz) const {$/;"	f	class:madness::BasisFunctions::SolidHarmonicGaussian
operator ()	src/apps/chem/PNOGuessFunctions.h	/^		double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::BasisFunctions::CartesianGaussian
operator ()	src/apps/chem/PNOStructures.cpp	/^vecfuncT ParametrizedExchange::operator ()(const vecfuncT& vket,$/;"	f	class:madness::ParametrizedExchange
operator ()	src/apps/chem/PNOStructures.h	/^	std::valarray<double> operator()(){$/;"	f	struct:madness::valarray_allocator
operator ()	src/apps/chem/PNOStructures.h	/^    real_function_3d operator()(const real_function_3d& ket) const {$/;"	f	class:madness::ParametrizedExchange
operator ()	src/apps/chem/SCF.cc	/^	void operator()(const Key<NDIM> &key, Tensor<double_complex> &t) const$/;"	f	struct:madness::unaryexp
operator ()	src/apps/chem/SCF.h	/^	Function<T,3> operator()(const double t) const {$/;"	f	class:madness::VextCosFunctor
operator ()	src/apps/chem/SCF.h	/^	double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:madness::lbcost
operator ()	src/apps/chem/SCF.h	/^	double operator()(const coordT& r) const {$/;"	f	class:madness::CorePotentialDerivativeFunctor
operator ()	src/apps/chem/SCF.h	/^	double operator()(const coordT& r) const {$/;"	f	class:madness::MomentFunctor
operator ()	src/apps/chem/SCF.h	/^	double operator()(const coordT& x) const {$/;"	f	class:madness::AtomicAttractionFunctor
operator ()	src/apps/chem/SCF.h	/^	double operator()(const coordT& x) const {$/;"	f	class:madness::AtomicBasisFunctor
operator ()	src/apps/chem/SCF.h	/^	double operator()(const coordT& x) const {$/;"	f	class:madness::DipoleFunctor
operator ()	src/apps/chem/SCF.h	/^	double operator()(const coordT& x) const {$/;"	f	class:madness::MolecularDerivativeFunctor
operator ()	src/apps/chem/SCF.h	/^	double operator()(const coordT& x) const {$/;"	f	class:madness::MolecularGuessDensityFunctor
operator ()	src/apps/chem/SCF.h	/^	double operator()(const coordT& x) const {$/;"	f	class:madness::MolecularSecondDerivativeFunctor
operator ()	src/apps/chem/SCFOperators.cc	/^std::vector<Function<T, 3> > XCOperator::operator()($/;"	f	class:madness::XCOperator
operator ()	src/apps/chem/SCFOperators.cc	/^std::vector<Function<T, NDIM> > Exchange<T, NDIM>::operator()($/;"	f	class:madness::Exchange
operator ()	src/apps/chem/SCFOperators.cc	/^std::vector<Function<T, NDIM> > Laplacian<T, NDIM>::operator()($/;"	f	class:madness::Laplacian
operator ()	src/apps/chem/SCFOperators.cc	/^std::vector<Function<T, NDIM> > Nuclear::operator()($/;"	f	class:madness::Nuclear
operator ()	src/apps/chem/SCFOperators.cc	/^vecfuncT DNuclear::operator()(const vecfuncT& vket) const {$/;"	f	class:madness::DNuclear
operator ()	src/apps/chem/SCFOperators.h	/^            double operator()(const double& val) {return exp(val-14.0);}$/;"	f	struct:madness::XCOperator::expme::expme1
operator ()	src/apps/chem/SCFOperators.h	/^            double operator()(const double& val) {return log(std::max(1.e-14,val))+14.0;}$/;"	f	struct:madness::XCOperator::logme::logme1
operator ()	src/apps/chem/SCFOperators.h	/^        Tensor<double> operator()(const Key<3>& key, const Tensor<double>& val) const {$/;"	f	struct:madness::XCOperator::expme
operator ()	src/apps/chem/SCFOperators.h	/^        Tensor<double> operator()(const Key<3>& key, const Tensor<double>& val) const {$/;"	f	struct:madness::XCOperator::logme
operator ()	src/apps/chem/SCFOperators.h	/^    Function<T,3> operator()(const Function<T,3>& ket) const {$/;"	f	class:madness::XCOperator
operator ()	src/apps/chem/SCFOperators.h	/^    Function<T,NDIM> operator()(const Function<T,NDIM>& ket) const {$/;"	f	class:madness::Coulomb
operator ()	src/apps/chem/SCFOperators.h	/^    Function<T,NDIM> operator()(const Function<T,NDIM>& ket) const {$/;"	f	class:madness::Exchange
operator ()	src/apps/chem/SCFOperators.h	/^    Function<T,NDIM> operator()(const Function<T,NDIM>& ket) const {$/;"	f	class:madness::Nuclear
operator ()	src/apps/chem/SCFOperators.h	/^    T operator()(const Function<T,NDIM>& bra, const Function<T,NDIM>& ket) const {$/;"	f	class:madness::Coulomb
operator ()	src/apps/chem/SCFOperators.h	/^    T operator()(const Function<T,NDIM>& bra, const Function<T,NDIM>& ket) const {$/;"	f	class:madness::Exchange
operator ()	src/apps/chem/SCFOperators.h	/^    T operator()(const Function<T,NDIM>& bra, const Function<T,NDIM>& ket) const {$/;"	f	class:madness::Nuclear
operator ()	src/apps/chem/SCFOperators.h	/^    T operator()(const functionT& bra, const functionT ket) const {$/;"	f	class:madness::Laplacian
operator ()	src/apps/chem/SCFOperators.h	/^    T operator()(const functionT& bra, const functionT& ket) const {$/;"	f	class:madness::DerivativeOperator
operator ()	src/apps/chem/SCFOperators.h	/^    T operator()(const functionT& bra, const functionT& ket) const {$/;"	f	class:madness::Kinetic
operator ()	src/apps/chem/SCFOperators.h	/^    Tensor<T> operator()(const  std::vector<Function<T,NDIM> >& vbra,$/;"	f	class:madness::Nuclear
operator ()	src/apps/chem/SCFOperators.h	/^    Tensor<T> operator()(const std::vector<Function<T,NDIM> >& vbra,$/;"	f	class:madness::Coulomb
operator ()	src/apps/chem/SCFOperators.h	/^    Tensor<T> operator()(const vecfuncT& vbra, const vecfuncT& vket) const {$/;"	f	class:madness::Exchange
operator ()	src/apps/chem/SCFOperators.h	/^    Tensor<double> operator()(const vecfuncT& vbra, const vecfuncT& vket) const {$/;"	f	class:madness::DNuclear
operator ()	src/apps/chem/SCFOperators.h	/^    Tensor<double> operator()(const vecfuncT& vbra, const vecfuncT& vket) const {$/;"	f	class:madness::Fock
operator ()	src/apps/chem/SCFOperators.h	/^    Tensor<double_complex> operator()(const std::vector<Function<T,NDIM> >& vbra,$/;"	f	class:madness::Lz
operator ()	src/apps/chem/SCFOperators.h	/^    complex_function_3d operator()(const Function<T,NDIM> ket) const {$/;"	f	class:madness::Lz
operator ()	src/apps/chem/SCFOperators.h	/^    double operator()(const real_function_3d& bra, const real_function_3d& ket) const {$/;"	f	class:madness::DNuclear
operator ()	src/apps/chem/SCFOperators.h	/^    double operator()(const real_function_3d& bra, const real_function_3d& ket) const {$/;"	f	class:madness::Fock
operator ()	src/apps/chem/SCFOperators.h	/^    double_complex operator()(const Function<T,NDIM>& bra, const Function<T,NDIM>& ket) const {$/;"	f	class:madness::Lz
operator ()	src/apps/chem/SCFOperators.h	/^    functionT operator()(const functionT& ket) const {$/;"	f	class:madness::DerivativeOperator
operator ()	src/apps/chem/SCFOperators.h	/^    functionT operator()(const functionT& ket) const {$/;"	f	class:madness::Kinetic
operator ()	src/apps/chem/SCFOperators.h	/^    functionT operator()(const functionT& ket) const {$/;"	f	class:madness::Laplacian
operator ()	src/apps/chem/SCFOperators.h	/^    real_function_3d operator()(const real_function_3d& ket) const {$/;"	f	class:madness::DNuclear
operator ()	src/apps/chem/SCFOperators.h	/^    real_function_3d operator()(const real_function_3d& ket) const {$/;"	f	class:madness::Fock
operator ()	src/apps/chem/SCFOperators.h	/^    std::vector<Function<T,NDIM> > operator()(const std::vector<Function<T,NDIM> >& vket) const {$/;"	f	class:madness::Coulomb
operator ()	src/apps/chem/SCFOperators.h	/^    std::vector<complex_function_3d> operator()(const std::vector<Function<T,NDIM> >& vket) const {$/;"	f	class:madness::Lz
operator ()	src/apps/chem/SCFOperators.h	/^    tensorT operator()(const vecfuncT& vbra, const vecfuncT& vket) const {$/;"	f	class:madness::DerivativeOperator
operator ()	src/apps/chem/SCFOperators.h	/^    tensorT operator()(const vecfuncT& vbra, const vecfuncT& vket) const {$/;"	f	class:madness::Kinetic
operator ()	src/apps/chem/SCFOperators.h	/^    tensorT operator()(const vecfuncT& vbra, const vecfuncT& vket) const {$/;"	f	class:madness::Laplacian
operator ()	src/apps/chem/SCFOperators.h	/^    vecfuncT operator()(const vecfuncT& vket) const {$/;"	f	class:madness::DerivativeOperator
operator ()	src/apps/chem/SCFOperators.h	/^    vecfuncT operator()(const vecfuncT& vket) const {$/;"	f	class:madness::Kinetic
operator ()	src/apps/chem/TDHF.cc	/^	vector_real_function_3d operator()(){$/;"	f	struct:madness::TDHF_allocator
operator ()	src/apps/chem/correlationfactor.h	/^		double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::R_functor
operator ()	src/apps/chem/correlationfactor.h	/^		double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U1_functor
operator ()	src/apps/chem/correlationfactor.h	/^		double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U2_functor
operator ()	src/apps/chem/correlationfactor.h	/^		double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U3_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::RX_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U1X_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U1_atomic_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U1_dot_U1_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U2X_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U2_atomic_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U3X_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::U3_atomic_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::square_times_V_derivative_functor
operator ()	src/apps/chem/correlationfactor.h	/^        double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::NuclearCorrelationFactor::square_times_V_functor
operator ()	src/apps/chem/diamagneticpotentialfactor.cc	/^	double operator()(const coord_3d& r) const {$/;"	f	struct:madness::R_times_arg_div_R
operator ()	src/apps/chem/diamagneticpotentialfactor.cc	/^	double operator()(const coord_3d& xyz) const {$/;"	f	struct:madness::harmonic_potential_boxed
operator ()	src/apps/chem/electronic_correlation_factor.h	/^        double operator()(const coord_6d& r) const {$/;"	f	class:madness::CorrelationFactor2::R_functor
operator ()	src/apps/chem/electronic_correlation_factor.h	/^        double operator()(const coord_6d& r) const {$/;"	f	class:madness::CorrelationFactor2::U1_functor
operator ()	src/apps/chem/electronic_correlation_factor.h	/^        double operator()(const coord_6d& r) const {$/;"	f	class:madness::CorrelationFactor2::U2_functor
operator ()	src/apps/chem/electronic_correlation_factor.h	/^        double operator()(const coord_6d& r) const {$/;"	f	struct:madness::CorrelationFactor::U
operator ()	src/apps/chem/electronic_correlation_factor.h	/^        double operator()(const coord_6d& r) const {$/;"	f	struct:madness::CorrelationFactor::f2_
operator ()	src/apps/chem/electronic_correlation_factor.h	/^        double operator()(const coord_6d& r) const {$/;"	f	struct:madness::CorrelationFactor::f_over_r_
operator ()	src/apps/chem/electronic_correlation_factor.h	/^        double operator()(const coord_6d& r) const {$/;"	f	struct:madness::CorrelationFactor::fg_
operator ()	src/apps/chem/electronic_correlation_factor.h	/^        double operator()(const coord_6d& r) const {$/;"	f	struct:madness::CorrelationFactor::nablaf2_
operator ()	src/apps/chem/electronic_correlation_factor.h	/^    double operator()(const coord_6d& r) const {$/;"	f	class:madness::CorrelationFactor
operator ()	src/apps/chem/gth_pseudopotential.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:madness::ProjRLMFunctor
operator ()	src/apps/chem/gth_pseudopotential.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:madness::VLocalFunctor
operator ()	src/apps/chem/gth_pseudopotential.h	/^    virtual void operator()(const Vector<double*,3>& xvals, double* MADNESS_RESTRICT fvals, int npts) const {$/;"	f	class:madness::ProjRLMFunctor
operator ()	src/apps/chem/masks_and_boxes.h	/^	double operator()(const coordT& xyz) const {$/;"	f	struct:madness::spherical_box
operator ()	src/apps/chem/molecularbasis.h	/^        bool operator()(long i, long j) const {$/;"	f	class:madness::AtomicBasisSet::AnalysisSorter
operator ()	src/apps/chem/molecularbasis.h	/^    double operator()(double x, double y, double z) const {$/;"	f	class:madness::AtomicBasisFunction
operator ()	src/apps/chem/mp2.h	/^            T& operator()(int i, int j) {$/;"	f	struct:madness::MP2::Pairs
operator ()	src/apps/chem/mp2.h	/^            const T& operator()(int i, int j) const {$/;"	f	struct:madness::MP2::Pairs
operator ()	src/apps/chem/mp2.h	/^        double operator()(const Key<6>& key, const FunctionNode<double,6>& node) const {$/;"	f	struct:madness::LBCost
operator ()	src/apps/chem/nemo.cc	/^    double operator()(const coord_3d& xyz) const {$/;"	f	class:madness::atomic_attraction
operator ()	src/apps/chem/nemo.cc	/^    void operator()(const Key<3>& key, Tensor<double>& U, const Tensor<double>& t,$/;"	f	struct:madness::dens_inv
operator ()	src/apps/chem/nemo.h	/^	std::vector<Function<T, NDIM> > operator()() {$/;"	f	struct:madness::allocator
operator ()	src/apps/chem/oep.h	/^	std::vector<Tensor<double> > operator()(const Key<3> & key,$/;"	f	struct:madness::divide_add_interpolate
operator ()	src/apps/chem/oep.h	/^	std::vector<Tensor<double> > operator()(const Key<3> & key,$/;"	f	struct:madness::interpolate_to_longrange_op
operator ()	src/apps/chem/oep.h	/^    void operator()(const Key<3>& key, Tensor<double>& U, const Tensor<double>& t,$/;"	f	struct:madness::dens_inv1
operator ()	src/apps/chem/pcm.cc	/^    double operator()(const coord_3d& r) const {$/;"	f	struct:madness::detail::asc_potential
operator ()	src/apps/chem/pointgroupoperator.h	/^	Function<T,NDIM> operator()(const Function<T,NDIM>& f, bool fence=true) const {$/;"	f	class:madness::pg_operator
operator ()	src/apps/chem/pointgroupoperator.h	/^	std::vector<Function<T,NDIM> > operator()(const std::vector<Function<T,NDIM> >& vf, bool fence=true) const {$/;"	f	class:madness::pg_operator
operator ()	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<Function<T,NDIM> > operator()($/;"	f	class:madness::projector_irrep
operator ()	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<Function<T,NDIM> > operator()(const Function<T,NDIM>& rhs) const {$/;"	f	class:madness::projector_irrep
operator ()	src/apps/chem/potentialmanager.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:madness::CoreOrbitalDerivativeFunctor
operator ()	src/apps/chem/potentialmanager.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:madness::CoreOrbitalFunctor
operator ()	src/apps/chem/potentialmanager.h	/^    double operator()(const coord_3d& x) const {$/;"	f	class:madness::MolecularCorePotentialFunctor
operator ()	src/apps/chem/potentialmanager.h	/^    double operator()(const coord_3d& x) const {$/;"	f	class:madness::MolecularPotentialFunctor
operator ()	src/apps/chem/projector.h	/^        Function<T,2*NDIM> operator()(const Function<T,2*NDIM>& f) const {$/;"	f	class:madness::StrongOrthogonalityProjector
operator ()	src/apps/chem/projector.h	/^        Function<T,NDIM> operator()(const Function<T,NDIM>& rhs) const {$/;"	f	class:madness::QProjector
operator ()	src/apps/chem/projector.h	/^        funcT operator()(const funcT& f) const {$/;"	f	class:madness::Projector
operator ()	src/apps/chem/projector.h	/^        real_function_6d operator()(const real_function_6d&f, const size_t particle)const{$/;"	f	class:madness::Projector
operator ()	src/apps/chem/projector.h	/^        vecfuncT operator()(const vecfuncT& f) const {$/;"	f	class:madness::Projector
operator ()	src/apps/chem/projector.h	/^        vecfuncT operator()(const vecfuncT& rhs) const {$/;"	f	class:madness::QProjector
operator ()	src/apps/chem/test_SCFOperators.cc	/^    T operator()(const coordT& xyz) const {$/;"	f	class:GaussianGuess
operator ()	src/apps/chem/test_SCFOperators.cc	/^    double operator()(const coord_3d& xyz) const {$/;"	f	struct:refpotfunctor
operator ()	src/apps/chem/xcfunctional.h	/^    madness::Tensor<double> operator()(const madness::Key<3> & key,$/;"	f	struct:madness::xc_functional
operator ()	src/apps/chem/xcfunctional.h	/^    std::vector<madness::Tensor<double> > operator()(const madness::Key<3> & key,$/;"	f	struct:madness::xc_kernel_apply
operator ()	src/apps/chem/xcfunctional.h	/^    std::vector<madness::Tensor<double> > operator()(const madness::Key<3> & key,$/;"	f	struct:madness::xc_potential
operator ()	src/apps/chem/xcfunctional.h	/^    void operator()(const Key<3> & key, Tensor<double>& t) const$/;"	f	struct:madness::xc_lda_potential
operator ()	src/apps/chem/znemo.h	/^		double_complex operator()(const coord_3d& xyz1) const {$/;"	f	struct:madness::Znemo::landau_wave_function
operator ()	src/apps/chem/znemo.h	/^		double_complex operator()(const coord_3d& xyz1) const {$/;"	f	struct:madness::Znemo::p_orbital
operator ()	src/apps/chem/znemo.h	/^		double_complex operator()(const coord_3d& xyz1) const {$/;"	f	struct:madness::Znemo::s_orbital
operator ()	src/apps/exciting/wannier.cc	/^      bool operator()( vec3dT lhs, vec3dT rhs)$/;"	f	struct:ExcitingApp::vectorLengthFunctor
operator ()	src/apps/exciting/wannier.cc	/^  T operator()(const coordT& x) const$/;"	f	class:Wannier
operator ()	src/apps/exciting/wannier.cc	/^  Tensor<resultT> operator()(const Key<NDIM>& key, const Tensor<Q>& t) const$/;"	f	struct:abs_square_op
operator ()	src/apps/exciting/wannier.cc	/^  std::complex<double> operator()(const coordT& r) const$/;"	f	class:ComplexExpFunction
operator ()	src/apps/hf/complexfun.h	/^  Tensor<resultT> operator()(const Key<NDIM>& key, const Tensor<Q>& t) const$/;"	f	struct:madness::abs_op
operator ()	src/apps/hf/complexfun.h	/^  Tensor<resultT> operator()(const Key<NDIM>& key, const Tensor<Q>& t) const$/;"	f	struct:madness::abs_square_op
operator ()	src/apps/hf/complexfun.h	/^  Tensor<resultT> operator()(const Key<NDIM>& key, const Tensor<Q>& t) const$/;"	f	struct:madness::conj_op
operator ()	src/apps/hf/complexfun.h	/^  Tensor<resultT> operator()(const Key<NDIM>& key, const Tensor<Q>& t) const$/;"	f	struct:madness::function_real2complex_op
operator ()	src/apps/hf/complexfun.h	/^  Tensor<resultT> operator()(const Key<NDIM>& key, const Tensor<Q>& t) const$/;"	f	struct:madness::imag_op
operator ()	src/apps/hf/complexfun.h	/^  Tensor<resultT> operator()(const Key<NDIM>& key, const Tensor<Q>& t) const$/;"	f	struct:madness::real_op
operator ()	src/apps/hf/electronicstructureapp.h	/^    double operator()(const coordT& x) const$/;"	f	class:MolecularNuclearChargeDensityFunctor
operator ()	src/apps/hf/electronicstructureapp.h	/^    double operator()(const coordT& x) const$/;"	f	class:MolecularPotentialFunctor
operator ()	src/apps/hf/electronicstructureapp.h	/^  std::complex<double> operator()(const coordT& x) const$/;"	f	class:AtomicBasisFunctor
operator ()	src/apps/hf/ewald.cc	/^    bool operator()( Vector<double,3> lhs, Vector<double,3> rhs)$/;"	f	struct:vectorLengthFunctor
operator ()	src/apps/hf/ewald.cc	/^    double operator()(const coordT& x) const$/;"	f	class:MolecularNuclearChargeDensityFunctor
operator ()	src/apps/hf/ewald.cc	/^    double operator()(const coord_3d& r) const {$/;"	f	class:GaussianFunctor
operator ()	src/apps/hf/ewald.cc	/^  double operator()(const coordT& r) const$/;"	f	class:EwaldNuclearPotentialFunctor
operator ()	src/apps/hf/ewald.cc	/^  double operator()(const coordT& r) const$/;"	f	class:MolecularNuclearPotentialFunctor2
operator ()	src/apps/hf/ewald.cc	/^  virtual double operator()(const coordT& r) const$/;"	f	class:OnesFunctor
operator ()	src/apps/hf/molecularbasis.h	/^        bool operator()(long i, long j) const {$/;"	f	class:AtomicBasisSet::AnalysisSorter
operator ()	src/apps/hf/molecularbasis.h	/^    double operator()(double x, double y, double z) const {$/;"	f	class:AtomicBasisFunction
operator ()	src/apps/hf/solver.h	/^        double operator()(const coordT& x) const$/;"	f	struct:madness::Solver::GuessDensity
operator ()	src/apps/hf/solver.h	/^      double operator()(const coordT& x) const {$/;"	f	class:madness::DipoleFunctor
operator ()	src/apps/hf/solver.h	/^      double_complex operator()(const coordT& x) const {$/;"	f	class:madness::ComplexExp
operator ()	src/apps/hf/solver.h	/^      double_complex operator()(const coord_3d& x) const {$/;"	f	class:madness::WSTAtomicBasisFunctor
operator ()	src/apps/hf/test_he.cc	/^    T operator()(const coordT& rr) const$/;"	f	class:HeElectronicChargeDensityIGuess
operator ()	src/apps/hf/test_he.cc	/^    T operator()(const coordT& rr) const$/;"	f	class:HeNuclearChargeDensityIGuess
operator ()	src/apps/hf/test_he.cc	/^  Tensor<T> operator()(const Key<NDIM>& key, const Tensor<T>& t) const$/;"	f	struct:myunaryop_square
operator ()	src/apps/hf/test_hf.cc	/^  double operator()(const coordT& x) const$/;"	f	class:H2Potential
operator ()	src/apps/hf/test_lattice.cc	/^  Q operator()(double x) const$/;"	f	class:wstFunctor
operator ()	src/apps/ii/localize_boys.cc	/^    double operator()(const Vector<double,3>& x) const {$/;"	f	class:DipoleFunctor
operator ()	src/apps/interior_bc/test_problems.h	/^        double operator() (const Vector<double, 3> &x) const {$/;"	f	class:EmbeddedDirichlet
operator ()	src/apps/interior_bc/test_problems.h	/^    double operator() (const Key<NDIM> &key,$/;"	f	struct:DirichletLBCost
operator ()	src/apps/moldft/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:CoreOrbitalFunctor
operator ()	src/apps/moldft/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:GaussianFunctor
operator ()	src/apps/moldft/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:NcOverR
operator ()	src/apps/moldft/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:PotentialBasisFunctor
operator ()	src/apps/moldft/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:RadiusFunctor
operator ()	src/apps/moldft/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:RadiusSquareFunctor
operator ()	src/apps/moldft/mcpfit.cc	/^    double operator()(const coordT& x) const {$/;"	f	class:CorePotentialFunctor
operator ()	src/apps/moldft/preal.cc	/^    Q operator()(const coord_3d& x) const {$/;"	f	class:AtomicBasisFunctor
operator ()	src/apps/moldft/preal.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:DipoleFunctor
operator ()	src/apps/moldft/preal.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:MolecularGuessDensityFunctor
operator ()	src/apps/moldft/preal.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:MolecularPotentialFunctor
operator ()	src/apps/moldft/preal.cc	/^    real_tensor operator ()(World& world, $/;"	f	struct:BoysLocalization
operator ()	src/apps/moldft/preal.cc	/^  double operator()(const Vector<double,3>& r) const {$/;"	f	class:NuclearDensityFunctor
operator ()	src/apps/moldft/testcosine.cc	/^    Q operator()(const coord_3d& x) const {$/;"	f	class:ExpFunctor
operator ()	src/apps/moldft/testcosine.cc	/^    Q operator()(const coord_3d& x) const {$/;"	f	class:ExpFunctor3d
operator ()	src/apps/moldft/testcosine.cc	/^    double_complex operator()(const coord_3d& x) const {$/;"	f	class:PWFunctor
operator ()	src/apps/moldft/testcosine.cc	/^  double operator()(const coord_3d& x) const {$/;"	f	class:CosPotentialFunctor
operator ()	src/apps/moldft/testperiodic.cc	/^    Q operator()(const coord_3d& x) const {$/;"	f	class:ExpFunctor
operator ()	src/apps/moldft/testperiodic.cc	/^    Q operator()(const coord_3d& x) const {$/;"	f	class:ExpFunctor3d
operator ()	src/apps/moldft/testperiodic.cc	/^    double operator()(const coord_3d& r) const {$/;"	f	class:SplitterFunctor
operator ()	src/apps/moldft/testperiodic.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:AtomicOrbitalFunctor
operator ()	src/apps/moldft/testperiodic.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:MolecularGuessDensityFunctor
operator ()	src/apps/moldft/testperiodic.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:NuclearDensityFunctor
operator ()	src/apps/moldft/testperiodic.cc	/^    double_complex operator()(const coord_3d& x) const {$/;"	f	class:AtomicBasisFunctor
operator ()	src/apps/nick/interp.h	/^    T operator()(double y) const {$/;"	f	class:CubicInterpolationTable
operator ()	src/apps/nick/projPsi.cc	/^    double operator()(const Key<3>& key, const FunctionNode<double_complex,3>& node) const {$/;"	f	struct:LBCost
operator ()	src/apps/nick/projPsi.cc	/^    std::complex<double> operator()(const vector3D& x) const {$/;"	f	struct:PhiKAdaptor
operator ()	src/apps/nick/tdse1.cc	/^    void operator()(const Key<NDIM>& key, Tensor<T>& t) const {$/;"	f	struct:unaryexp
operator ()	src/apps/nick/test.cc	/^    std::complex<double> operator()(const vector3D& x) {$/;"	f	struct:PhiKAdaptor
operator ()	src/apps/nick/wavef.cc	/^complexd BoundWF::operator()(const vector3D& rVec) const {$/;"	f	class:BoundWF
operator ()	src/apps/nick/wavef.cc	/^complexd Expikr::operator()(const vector3D& rVec) const {$/;"	f	class:Expikr
operator ()	src/apps/nick/wavef.cc	/^complexd Gaussian::operator()(const vector3D& rVec) const {$/;"	f	class:Gaussian
operator ()	src/apps/nick/wavef.cc	/^complexd PhiK::operator()(const vector3D& rVec) const {$/;"	f	class:PhiK
operator ()	src/apps/nick/wavef.cc	/^complexd Phikl::operator()(const vector3D& rVec) const {$/;"	f	class:Phikl
operator ()	src/apps/nick/wavef.cc	/^double Yl0::operator()(const vector3D& r) const {$/;"	f	class:Yl0
operator ()	src/apps/nick/wavef.h	/^        complexd operator()(double x) {return obj->f11(x);}$/;"	f	struct:ScatteringWF::MemberFuncPtr
operator ()	src/apps/nick/wfSlice.cc	/^    std::complex<double> operator()(const vector3D& x) {$/;"	f	struct:PhiKAdaptor
operator ()	src/apps/polar/gth_pseudopotential.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:ProjFunctor
operator ()	src/apps/polar/gth_pseudopotential.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:ProjRLMFunctor
operator ()	src/apps/polar/gth_pseudopotential.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:RlmFunctor
operator ()	src/apps/polar/gth_pseudopotential.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:VLocalFunctor
operator ()	src/apps/polar/gth_pseudopotential.h	/^    double_complex operator()(const coord_3d& r) const {$/;"	f	class:YlmFunctor
operator ()	src/apps/polar/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:CoreOrbitalFunctor
operator ()	src/apps/polar/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:GaussianFunctor
operator ()	src/apps/polar/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:NcOverR
operator ()	src/apps/polar/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:PotentialBasisFunctor
operator ()	src/apps/polar/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:RadiusFunctor
operator ()	src/apps/polar/mcpfit.cc	/^    double operator() (const coordT& x) const {$/;"	f	class:RadiusSquareFunctor
operator ()	src/apps/polar/mcpfit.cc	/^    double operator()(const coordT& x) const {$/;"	f	class:CorePotentialFunctor
operator ()	src/apps/polar/moldft.cc	/^    Function<T, 3> operator()(const double t) const$/;"	f	class:VextCosFunctor
operator ()	src/apps/polar/moldft.cc	/^    double operator()(const Key<NDIM> &key, const FunctionNode<T, NDIM> &node) const$/;"	f	struct:lbcost
operator ()	src/apps/polar/moldft.cc	/^    double operator()(const coordT &r) const$/;"	f	class:CorePotentialDerivativeFunctor
operator ()	src/apps/polar/moldft.cc	/^    double operator()(const coordT &r) const$/;"	f	class:MomentFunctor
operator ()	src/apps/polar/moldft.cc	/^    double operator()(const coordT &x) const$/;"	f	class:AtomicBasisFunctor
operator ()	src/apps/polar/moldft.cc	/^    double operator()(const coordT &x) const$/;"	f	class:DipoleFunctor
operator ()	src/apps/polar/moldft.cc	/^    double operator()(const coordT &x) const$/;"	f	class:MolecularDerivativeFunctor
operator ()	src/apps/polar/moldft.cc	/^    double operator()(const coordT &x) const$/;"	f	class:MolecularGuessDensityFunctor
operator ()	src/apps/polar/moldft.cc	/^    operator()(const Function<T, FDIM> &f) const$/;"	f	class:Projector
operator ()	src/apps/polar/moldft.cc	/^    void operator()(const Key<NDIM> &key, Tensor<double_complex> &t) const$/;"	f	struct:unaryexp
operator ()	src/apps/polar/molecularbasis.h	/^        bool operator()(long i, long j) const {$/;"	f	class:AtomicBasisSet::AnalysisSorter
operator ()	src/apps/polar/molecularbasis.h	/^    double operator()(double x, double y, double z) const {$/;"	f	class:AtomicBasisFunction
operator ()	src/apps/polar/potentialmanager.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:CoreOrbitalDerivativeFunctor
operator ()	src/apps/polar/potentialmanager.h	/^    double operator()(const coord_3d& r) const {$/;"	f	class:CoreOrbitalFunctor
operator ()	src/apps/polar/potentialmanager.h	/^    double operator()(const coord_3d& x) const {$/;"	f	class:MolecularCorePotentialFunctor
operator ()	src/apps/polar/potentialmanager.h	/^    double operator()(const coord_3d& x) const {$/;"	f	class:MolecularPotentialFunctor
operator ()	src/apps/polar/preal.cc	/^    Q operator()(const coord_3d& x) const {$/;"	f	class:AtomicBasisFunctor
operator ()	src/apps/polar/preal.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:MolecularGuessDensityFunctor
operator ()	src/apps/polar/preal.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:MolecularPotentialFunctor
operator ()	src/apps/polar/preal.cc	/^  Tensor<resultT> operator()(const Key<NDIM>& key, const Tensor<Q>& t) const$/;"	f	struct:function_real2complex_op
operator ()	src/apps/polar/preal.cc	/^  double operator()(const Vector<double,3>& r) const {$/;"	f	class:NuclearDensityFunctor
operator ()	src/apps/polar/testperiodic.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:MolecularGuessDensityFunctor
operator ()	src/apps/polar/testperiodic.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:NuclearDensityFunctor
operator ()	src/apps/polar/testperiodic.cc	/^    double_complex operator()(const coord_3d& x) const {$/;"	f	class:AtomicBasisFunctor
operator ()	src/apps/polar/xcfunctional.h	/^    madness::Tensor<double> operator()(const madness::Key<3> & key, const std::vector< madness::Tensor<double> >& t) const$/;"	f	struct:madness::xc_functional
operator ()	src/apps/polar/xcfunctional.h	/^    madness::Tensor<double> operator()(const madness::Key<3> & key, const std::vector< madness::Tensor<double> >& t) const$/;"	f	struct:madness::xc_kernel
operator ()	src/apps/polar/xcfunctional.h	/^    madness::Tensor<double> operator()(const madness::Key<3> & key, const std::vector< madness::Tensor<double> >& t) const$/;"	f	struct:madness::xc_potential
operator ()	src/apps/polar/xcfunctional.h	/^    void operator()(const Key<3> & key, Tensor<double>& t) const$/;"	f	struct:madness::xc_lda_potential
operator ()	src/apps/tdse/tdse.cc	/^        bool operator()(FunctionImpl<double_complex,3>* impl, const Key<3>& key, const Tensor<double_complex>& t) const {$/;"	f	struct:refop
operator ()	src/apps/tdse/tdse.cc	/^    double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:lbcost
operator ()	src/apps/tdse/tdse.cc	/^    void operator()(const Key<NDIM>& key, Tensor<double_complex>& t) const {$/;"	f	struct:unaryexp
operator ()	src/apps/tdse/tdse.confused.cc	/^    double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:lbcost
operator ()	src/apps/tdse/tdse.confused.cc	/^    void operator()(const Key<NDIM>& key, Tensor<double_complex>& t) const {$/;"	f	struct:unaryexp
operator ()	src/apps/tdse/tdse4.cc	/^    double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:lbcost
operator ()	src/apps/tdse/tdse4.cc	/^    void operator()(const Key<NDIM>& key, Tensor<double_complex>& t) const {$/;"	f	struct:unaryexp
operator ()	src/examples/ac_corr.cc	/^	double operator ()(const Vector<double, NDIM> &r)const{$/;"	f	class:xc_functor
operator ()	src/examples/binaryop.cc	/^    void operator()(const Key<3>& key,$/;"	f	struct:Uop
operator ()	src/examples/colloid.cc	/^        void operator()(const Key<3>& key,$/;"	f	struct:SurfaceMoleculeInteraction::Bop
operator ()	src/examples/colloid.cc	/^        void operator()(const Key<NDIM>& key, Tensor<T>& t) const {$/;"	f	struct:SurfaceMoleculeInteraction::Reciprocal
operator ()	src/examples/dataloadbal.cc	/^    double operator()(const Key<3>& key, const FunctionNode<double,3>& node) const {$/;"	f	struct:LBCost
operator ()	src/examples/dataloadbal.cc	/^    double operator()(const coord_3d& x) const {$/;"	f	class:Gaussian
operator ()	src/examples/derivatives.cc	/^    double operator()(const coord_3d& r) const {return f(r);}$/;"	f	class:F
operator ()	src/examples/gygi_soltion.cc	/^    void operator()(const Key<DIM>& key, Tensor<T>& t) const {$/;"	f	struct:GygiPot::Reciprocal
operator ()	src/examples/gygi_soltion.cc	/^    void operator()(const Key<DIM>& key,Tensor<T>& t) const {$/;"	f	struct:GygiPot::Pow
operator ()	src/examples/gygi_soltion.cc	/^    void operator()(const Key<DIM>& key,Tensor<T>& t) const {$/;"	f	struct:GygiPot::Pow_beta_one
operator ()	src/examples/he.cc	/^    bool operator()(FunctionImpl<double,6>* impl, const Key<6>& key, const FunctionNode<double,6>& t) const {$/;"	f	struct:true_op
operator ()	src/examples/he.cc	/^    double operator()(const Key<6>& key, const FunctionNode<double,6>& node) const {$/;"	f	struct:LBCost
operator ()	src/examples/he.cc	/^    void operator()(const Key<6>& key, Tensor<double>& t) const {$/;"	f	class:YetAnotherWrapperClass
operator ()	src/examples/heat.cc	/^    double operator()(const coordT& r) const {$/;"	f	class:uexact
operator ()	src/examples/heat2.cc	/^    double operator()(const coord_3d& r) const {$/;"	f	class:uexact
operator ()	src/examples/heat2.cc	/^    void operator()(const Key<NDIM>& key, Tensor<T>& t) const {$/;"	f	struct:unaryexp
operator ()	src/examples/helium_mp2.cc	/^    bool operator()(FunctionImpl<double,6>* impl, const Key<6>& key, const FunctionNode<double,6>& t) const {$/;"	f	struct:true_if_n_gt_op
operator ()	src/examples/helium_mp2.cc	/^    bool operator()(FunctionImpl<double,6>* impl, const Key<6>& key, const FunctionNode<double,6>& t) const {$/;"	f	struct:true_op
operator ()	src/examples/helium_mp2.cc	/^    double operator()(const Key<6>& key, const FunctionNode<double,6>& node) const {$/;"	f	struct:LBCost
operator ()	src/examples/helium_mp2.cc	/^    void operator()(const Key<6>& key, Tensor<double>& t) const {$/;"	f	class:YetAnotherWrapperClass
operator ()	src/examples/molecularmask.h	/^    virtual double operator()(const madness::coord_3d& r) const {$/;"	f	class:MolecularSurface
operator ()	src/examples/molecularmask.h	/^    virtual double operator()(const madness::coord_3d& r) const {$/;"	f	class:MolecularVolumeComplementMask
operator ()	src/examples/molecularmask.h	/^    virtual double operator()(const madness::coord_3d& r) const {$/;"	f	class:MolecularVolumeExponentialSwitch
operator ()	src/examples/molecularmask.h	/^    virtual double operator()(const madness::coord_3d& r) const {$/;"	f	class:MolecularVolumeExponentialSwitchLogGrad
operator ()	src/examples/molecularmask.h	/^    virtual double operator()(const madness::coord_3d& r) const {$/;"	f	class:MolecularVolumeExponentialSwitchReciprocal
operator ()	src/examples/molecularmask.h	/^    virtual double operator()(const madness::coord_3d& r) const {$/;"	f	class:MolecularVolumeMask
operator ()	src/examples/molecularmask.h	/^    virtual double operator()(const madness::coord_3d& r) const {$/;"	f	class:MolecularVolumeMaskGrad
operator ()	src/examples/navstokes_cosines.cc	/^    double operator()(const coordT& x) const {return f(x);}$/;"	f	struct:FunctorInterfaceWrapper
operator ()	src/examples/newsolver.cc	/^    F operator()() {$/;"	f	struct:allocator
operator ()	src/examples/siam_example.cc	/^  double operator()(const coord_3d &r) const {$/;"	f	class:DSphere
operator ()	src/examples/smooth.h	/^		double operator ()(const coord_3d &x1)const{$/;"	f	struct:asymptotic_density
operator ()	src/examples/smooth.h	/^		double operator()(const Vector<double,NDIM> &x)const{$/;"	f	struct:smooth::inv_mask_functor
operator ()	src/examples/smooth.h	/^		double operator()(const Vector<double,NDIM> &x)const{$/;"	f	struct:smooth::mask_functor
operator ()	src/examples/smooth.h	/^		double operator()(const double & rho)const{$/;"	f	struct:apply_kernel_helper::slater_kernel
operator ()	src/examples/smooth.h	/^	double operator()(const coord_3d &x)const{$/;"	f	struct:asymptotic_slater
operator ()	src/examples/smooth.h	/^	double operator()(const coord_3d &x)const{$/;"	f	struct:asymptotic_slater_kernel
operator ()	src/examples/smooth.h	/^    madness::Tensor<double> operator()(const madness::Key<3> & key,$/;"	f	struct:density_mask_operator
operator ()	src/examples/smooth.h	/^    madness::Tensor<double> operator()(const madness::Key<3> & key,$/;"	f	struct:merging_operator
operator ()	src/examples/smooth.h	/^    madness::Tensor<double> operator()(const madness::Key<3> & key,$/;"	f	struct:slater_kernel_apply
operator ()	src/examples/smooth.h	/^    void operator()(const Key<3>& key,$/;"	f	struct:munging_operator
operator ()	src/examples/smooth.h	/^    void operator()(const Key<3>& key,$/;"	f	struct:slater_kernel
operator ()	src/examples/tdse1d.cc	/^    bool operator()(FunctionImpl<double_complex,1>* impl, const Key<1>& key, const Tensor<double_complex>& t) const {$/;"	f	struct:refop
operator ()	src/examples/tdse1d.cc	/^    void operator()(const Key<NDIM>& key, Tensor<T>& t) const {$/;"	f	struct:unaryexp
operator ()	src/examples/tdse_example.cc	/^    void operator()(const Key<NDIM>& key, Tensor<T>& t) const {$/;"	f	struct:unaryexp
operator ()	src/examples/test_derivative.cc	/^      double operator()(const coord_1d& x) const $/;"	f	class:F
operator ()	src/examples/test_derivative.cc	/^      double operator()(const coord_1d& x) const $/;"	f	class:G
operator ()	src/examples/testspectralprop.cc	/^    double operator()(const coord_1d& r) const {$/;"	f	class:Vnuclear
operator ()	src/examples/testspectralprop.cc	/^    double_complex operator()(const coord_1d& r) const {$/;"	f	class:PsiExact
operator ()	src/examples/vnucso.cc	/^    double_complex operator()(const coordT& r) const {$/;"	f	struct:Guess
operator ()	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^    Real operator()( Int i, Int j ) const $/;"	f	class:Phase
operator ()	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^    Real operator()( Int i, Int j ) const { return (-2*pi_*i*j)\/n_; }$/;"	f	class:FourierPhase
operator ()	src/madness/external/gtest/src/gtest-death-test.cc	/^bool ExitedWithCode::operator()(int exit_status) const {$/;"	f	class:testing::ExitedWithCode
operator ()	src/madness/external/gtest/src/gtest-death-test.cc	/^bool KilledBySignal::operator()(int exit_status) const {$/;"	f	class:testing::KilledBySignal
operator ()	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool operator()(const TestProperty& test_property) const {$/;"	f	class:testing::internal::TestPropertyKeyIs
operator ()	src/madness/external/gtest/src/gtest.cc	/^  bool operator()(const TestCase* test_case) const {$/;"	f	class:testing::internal::TestCaseNameIs
operator ()	src/madness/external/gtest/src/gtest.cc	/^  bool operator()(const TestInfo * test_info) const {$/;"	f	class:testing::__anon38::TestNameIs
operator ()	src/madness/misc/interpolation_1d.h	/^    T operator()(double y) const {$/;"	f	class:CubicInterpolationTable
operator ()	src/madness/misc/phandler.h	/^    virtual T operator() (const coordT &vals_in) const {$/;"	f	class:ParserHandler
operator ()	src/madness/mra/adquad.h	/^            double operator()(double x) const {$/;"	f	struct:madness::detail::adqtest
operator ()	src/madness/mra/convolution1d.h	/^            returnT operator()(double x) const {$/;"	f	struct:madness::GenericConvolution1D::Shmoo
operator ()	src/madness/mra/convolution1d.h	/^        Q operator()(double x) const {$/;"	f	class:madness::GaussianGenericFunctor
operator ()	src/madness/mra/derivative.h	/^        operator()(const functionT& f, bool fence=true) const {$/;"	f	class:madness::DerivativeBase
operator ()	src/madness/mra/funcdefaults.h	/^        BCType operator()(std::size_t d, int i) const {$/;"	f	class:madness::BoundaryConditions
operator ()	src/madness/mra/funcdefaults.h	/^        BCType& operator()(std::size_t d, int i) {$/;"	f	class:madness::BoundaryConditions
operator ()	src/madness/mra/funcimpl.h	/^    	void operator()(const Key<NDIM>& key, const GenTensor<T>& coeff, const bool& is_leaf) const {}$/;"	f	struct:madness::noop
operator ()	src/madness/mra/funcimpl.h	/^    	void operator()(const keyT& key, const coeffT& coeff, const bool& is_leaf) const {$/;"	f	struct:madness::insert_op
operator ()	src/madness/mra/funcimpl.h	/^            Future<argT> operator()(const Key<NDIM>& key) const {$/;"	f	struct:madness::FunctionImpl::project_out_op
operator ()	src/madness/mra/funcimpl.h	/^            T operator()(T a, T b) const {$/;"	f	struct:madness::FunctionImpl::do_inner_ext_local_ffi
operator ()	src/madness/mra/funcimpl.h	/^            T operator()(typename dcT::const_iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_inner_ext_local_ffi
operator ()	src/madness/mra/funcimpl.h	/^            Tensor<resultT> operator()(const Key<NDIM>& key, const Tensor<Q>& t) const {$/;"	f	struct:madness::FunctionImpl::coeff_value_adaptor
operator ()	src/madness/mra/funcimpl.h	/^            argT operator()(const Key<NDIM>& key) const {$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(const implT* f, const keyT& key, const nodeT& t) const {$/;"	f	struct:madness::FunctionImpl::true_refine_test
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_average
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_change_tensor_type
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_consolidate_buffer
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_gaxpy_inplace
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_keep_sum_coeffs
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_map_and_mirror
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_mapdim
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_merge_trees
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_mirror
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_reduce_rank
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_standard
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_truncate_NS_leafs
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_unary_op_value_inplace
operator ()	src/madness/mra/funcimpl.h	/^            bool operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::remove_internal_coeffs
operator ()	src/madness/mra/funcimpl.h	/^            double operator()(double a, double b) const {$/;"	f	class:madness::FunctionImpl::do_err_box
operator ()	src/madness/mra/funcimpl.h	/^            double operator()(double a, double b) const {$/;"	f	struct:madness::FunctionImpl::do_check_symmetry_local
operator ()	src/madness/mra/funcimpl.h	/^            double operator()(double a, double b) const {$/;"	f	struct:madness::FunctionImpl::do_norm2sq_local
operator ()	src/madness/mra/funcimpl.h	/^            double operator()(double val) const {$/;"	f	struct:madness::FunctionImpl::do_convert_to_color
operator ()	src/madness/mra/funcimpl.h	/^            double operator()(typename dcT::const_iterator& it) const {$/;"	f	class:madness::FunctionImpl::do_err_box
operator ()	src/madness/mra/funcimpl.h	/^            double operator()(typename dcT::const_iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_norm2sq_local
operator ()	src/madness/mra/funcimpl.h	/^            double operator()(typename rangeT::iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_check_symmetry_local
operator ()	src/madness/mra/funcimpl.h	/^            resultT operator()(resultT a, resultT b) const {$/;"	f	struct:madness::FunctionImpl::do_inner_local
operator ()	src/madness/mra/funcimpl.h	/^            resultT operator()(typename dcT::const_iterator& it) const {$/;"	f	struct:madness::FunctionImpl::do_inner_local
operator ()	src/madness/mra/funcimpl.h	/^            std::pair<bool,coeffT> operator()(const Key<NDIM>& key) const {$/;"	f	struct:madness::FunctionImpl::hartree_op
operator ()	src/madness/mra/funcimpl.h	/^            std::pair<bool,coeffT> operator()(const Key<NDIM>& key) const {$/;"	f	struct:madness::FunctionImpl::multiply_op
operator ()	src/madness/mra/funcimpl.h	/^            std::pair<bool,coeffT> operator()(const Key<NDIM>& key) const {$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
operator ()	src/madness/mra/funcimpl.h	/^            std::pair<bool,coeffT> operator()(const keyT& key) const {$/;"	f	struct:madness::FunctionImpl::add_op
operator ()	src/madness/mra/funcimpl.h	/^          std::pair<bool,coeffT> operator()(const Key<NDIM>& key) const {$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key) const {return false;}$/;"	f	struct:madness::hartree_leaf_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key) const {return true;}$/;"	f	struct:madness::hartree_convolute_leaf_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key) const {return true;}$/;"	f	struct:madness::op_leaf_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key, const GenTensor<T>& coeff) const {$/;"	f	struct:madness::hartree_convolute_leaf_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key, const GenTensor<T>& coeff) const {$/;"	f	struct:madness::hartree_leaf_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key, const GenTensor<T>& coeff) const {$/;"	f	struct:madness::op_leaf_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key, const GenTensor<T>& fcoeff, const GenTensor<T>& gcoeff) const {$/;"	f	struct:madness::noop
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key, const T& t) const {return true;}$/;"	f	struct:madness::true_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key, const T& t, const R& r) const {return true;}$/;"	f	struct:madness::true_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key, const Tensor<T>& fcoeff, const Tensor<T>& gcoeff) const {$/;"	f	struct:madness::hartree_convolute_leaf_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key, const Tensor<T>& fcoeff, const Tensor<T>& gcoeff) const {$/;"	f	struct:madness::hartree_leaf_op
operator ()	src/madness/mra/funcimpl.h	/^        bool operator()(const Key<NDIM>& key, const double& cnorm) const {$/;"	f	struct:madness::op_leaf_op
operator ()	src/madness/mra/funcplot.h	/^        Vector<double,NDIM> operator()(int ipt) {$/;"	f	struct:madness::trajectory
operator ()	src/madness/mra/function_interface.h	/^		T operator()(const Vector<double, NDIM>& x) const {$/;"	f	class:madness::TwoElectronInterface
operator ()	src/madness/mra/function_interface.h	/^		T operator()(const coordT& x) const {$/;"	f	class:madness::CompositeFunctorInterface
operator ()	src/madness/mra/function_interface.h	/^		T operator()(const coordT& x) const {return f(x);}$/;"	f	class:madness::ElementaryInterface
operator ()	src/madness/mra/function_interface.h	/^	    virtual void operator()(const Vector<double*,1>& xvals, T* fvals, int npts) const {$/;"	f	class:madness::FunctionFunctorInterface
operator ()	src/madness/mra/function_interface.h	/^	    virtual void operator()(const Vector<double*,2>& xvals, T* fvals, int npts) const {$/;"	f	class:madness::FunctionFunctorInterface
operator ()	src/madness/mra/function_interface.h	/^	    virtual void operator()(const Vector<double*,3>& xvals, T* fvals, int npts) const {$/;"	f	class:madness::FunctionFunctorInterface
operator ()	src/madness/mra/function_interface.h	/^	    virtual void operator()(const Vector<double*,4>& xvals, T* fvals, int npts) const {$/;"	f	class:madness::FunctionFunctorInterface
operator ()	src/madness/mra/function_interface.h	/^	    virtual void operator()(const Vector<double*,5>& xvals, T* fvals, int npts) const {$/;"	f	class:madness::FunctionFunctorInterface
operator ()	src/madness/mra/function_interface.h	/^	    virtual void operator()(const Vector<double*,6>& xvals, T* fvals, int npts) const {$/;"	f	class:madness::FunctionFunctorInterface
operator ()	src/madness/mra/function_interface.h	/^        T operator()(const coordT& coord) const {return op(coord);}$/;"	f	class:madness::FunctionInterface
operator ()	src/madness/mra/function_interface.h	/^        T operator()(const coordT& x) const {return op(x);}$/;"	f	class:madness::FunctorInterface
operator ()	src/madness/mra/lbdeux.h	/^            void operator()(const keyT& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:madness::LoadBalanceDeux::add_op
operator ()	src/madness/mra/leafop.h	/^    bool operator()(const Key<NDIM> &key, const FunctionImpl<T,NDIM>*const f) const{$/;"	f	struct:madness::ElectronCuspyBox_op
operator ()	src/madness/mra/leafop.h	/^    bool operator()(const Key<NDIM> &key, const FunctionImpl<T,NDIM>*const f) const{$/;"	f	struct:madness::NuclearCuspyBox_op
operator ()	src/madness/mra/leafop.h	/^    virtual bool operator()(const Key<NDIM> &key,const FunctionImpl<T,NDIM>*const f=NULL )const{return false;}$/;"	f	struct:madness::Specialbox_op
operator ()	src/madness/mra/minmax/y.cc	/^    FLOAT operator()(const FLOAT& s) const {$/;"	f	class:Func
operator ()	src/madness/mra/minmax/y.cc	/^    FLOAT& operator()(int i, int j) {$/;"	f	class:matrix
operator ()	src/madness/mra/minmax/y.cc	/^    const FLOAT& operator()(int i, int j) const {$/;"	f	class:matrix
operator ()	src/madness/mra/minmax/y1.cc	/^    FLOAT operator()(const FLOAT& s) const {$/;"	f	class:Func
operator ()	src/madness/mra/minmax/y1.cc	/^    FLOAT& operator()(int i, int j) {$/;"	f	class:matrix
operator ()	src/madness/mra/minmax/y1.cc	/^    const FLOAT& operator()(int i, int j) const {$/;"	f	class:matrix
operator ()	src/madness/mra/minmax/y_signed.cc	/^    FLOAT operator()(const FLOAT& s) const {$/;"	f	class:Func
operator ()	src/madness/mra/minmax/y_signed.cc	/^    FLOAT& operator()(int i, int j) {$/;"	f	class:matrix
operator ()	src/madness/mra/minmax/y_signed.cc	/^    const FLOAT& operator()(int i, int j) const {$/;"	f	class:matrix
operator ()	src/madness/mra/minmax/y_varx.cc	/^    FLOAT operator()(const FLOAT& s) const {$/;"	f	class:Func
operator ()	src/madness/mra/minmax/y_varx.cc	/^    FLOAT& operator()(int i, int j) {$/;"	f	class:matrix
operator ()	src/madness/mra/minmax/y_varx.cc	/^    const FLOAT& operator()(int i, int j) const {$/;"	f	class:matrix
operator ()	src/madness/mra/mra.h	/^            bool operator()(implT* impl, const Key<NDIM>& key, const nodeT& t) const {$/;"	f	struct:madness::Function::autorefine_square_op
operator ()	src/madness/mra/mra.h	/^            void operator()(const Key<NDIM>& key, Tensor<T>& t) const {$/;"	f	struct:madness::Function::SimpleUnaryOpWrapper
operator ()	src/madness/mra/mra.h	/^        T operator()(const coordT& xuser) const {$/;"	f	class:madness::Function
operator ()	src/madness/mra/mra.h	/^        T operator()(double x, double y=0, double z=0, double xx=0, double yy=0, double zz=0) const {$/;"	f	class:madness::Function
operator ()	src/madness/mra/mraimpl.h	/^            void operator()(const A& a, const B& b) const {};$/;"	f	struct:madness::detail::noop
operator ()	src/madness/mra/mraimpl.h	/^            void operator()(const Key<NDIM>& key, FunctionNode<T,NDIM>& node) const {$/;"	f	struct:madness::detail::scaleinplace
operator ()	src/madness/mra/mraimpl.h	/^            void operator()(const Key<NDIM>& key, Tensor<T>& t) const {$/;"	f	struct:madness::detail::scaleinplace
operator ()	src/madness/mra/mraimpl.h	/^            void operator()(const Key<NDIM>& key, Tensor<T>& t) const {$/;"	f	struct:madness::detail::squareinplace
operator ()	src/madness/mra/mraimpl.h	/^            void operator()(const Key<NDIM>& key, Tensor<T>& t) const {abs(t.emul(t));}$/;"	f	struct:madness::detail::abssquareinplace
operator ()	src/madness/mra/mraimpl.h	/^            void operator()(const Key<NDIM>& key, Tensor<T>& t) const {t=abs(t);}$/;"	f	struct:madness::detail::absinplace
operator ()	src/madness/mra/mraplot.cc	/^    double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:lbcost
operator ()	src/madness/mra/nonlinsol.h	/^        T operator()() {return T();}$/;"	f	struct:madness::default_allocator
operator ()	src/madness/mra/operator.h	/^        Function<TENSOR_RESULT_TYPE(T,Q),FDIM> operator()(const Function<T,FDIM>& f) const {$/;"	f	class:madness::SeparatedConvolution
operator ()	src/madness/mra/operator.h	/^        operator()(const Function<T,LDIM>& f1, const Function<Q,LDIM>& f2) const {$/;"	f	class:madness::SeparatedConvolution
operator ()	src/madness/mra/qmprop.cc	/^        std::complex<double> operator()(double x) const {$/;"	f	class:madness::BandlimitedPropagator
operator ()	src/madness/mra/sdf_domainmask.h	/^        double operator()(const Vector<double,NDIM>& x) const {$/;"	f	class:madness::DomainMaskSDFFunctor
operator ()	src/madness/mra/testbc.cc	/^    double operator()(const coordT& x) const {$/;"	f	class:DSphere
operator ()	src/madness/mra/testbc.cc	/^    double operator()(const coordT& x) const {$/;"	f	class:Sphere
operator ()	src/madness/mra/testbsh.cc	/^    T operator()(const coordT& x) const {$/;"	f	class:Gaussian
operator ()	src/madness/mra/testbsh.cc	/^    double operator()(const Vector<double,3>& x) const {$/;"	f	struct:Qfunc
operator ()	src/madness/mra/testinnerext.cc	/^    virtual double operator()(const coord_3d& r) const {$/;"	f	class:alpha_functor
operator ()	src/madness/mra/testinnerext.cc	/^    virtual double operator()(const coord_3d& r) const {$/;"	f	class:beta_functor
operator ()	src/madness/mra/testopdir.cc	/^    T operator()(const coordT& x) const {$/;"	f	class:Gaussian
operator ()	src/madness/mra/testopdir.cc	/^    double operator()(const coord_3d& r) const {$/;"	f	class:Charge
operator ()	src/madness/mra/testopdir.cc	/^    double operator()(const coord_3d& r) const {$/;"	f	class:DPot
operator ()	src/madness/mra/testopdir.cc	/^    double operator()(const coord_3d& r) const {$/;"	f	class:OpFExact
operator ()	src/madness/mra/testpdiff.cc	/^    double operator()(const coordT& x) const {return f(x);}$/;"	f	struct:FunctorInterfaceWrapper
operator ()	src/madness/mra/testproj.cc	/^    T operator()(const coordT& x) const {$/;"	f	class:Gaussian
operator ()	src/madness/mra/testqm.cc	/^    void operator()(const Key<NDIM>& key, Tensor<T>& t) const {$/;"	f	struct:unaryexp
operator ()	src/madness/mra/testsuite.cc	/^        bool operator()(FunctionImpl<double_complex,1>* impl, const Key<1>& key, const Tensor<double_complex>& t) const {$/;"	f	struct:refop
operator ()	src/madness/mra/testsuite.cc	/^    T operator()(const coordT& x) const {$/;"	f	class:DerivativeGaussian
operator ()	src/madness/mra/testsuite.cc	/^    T operator()(const coordT& x) const {$/;"	f	class:Gaussian
operator ()	src/madness/mra/testsuite.cc	/^    Tensor<T> operator()(const Key<NDIM>& key, const Tensor<T>& t) const {$/;"	f	struct:myunaryop
operator ()	src/madness/mra/testsuite.cc	/^    Tensor<T> operator()(const Key<NDIM>& key, const Tensor<T>& t) const {$/;"	f	struct:myunaryop_square
operator ()	src/madness/mra/testsuite.cc	/^    Tensor<T> operator()(const Key<NDIM>& key, const std::vector< Tensor<T> >& c) const {$/;"	f	struct:test_multiop
operator ()	src/madness/mra/testsuite.cc	/^    double operator()(const Key<NDIM>& key, const FunctionNode<T,NDIM>& node) const {$/;"	f	struct:lbcost
operator ()	src/madness/mra/testsuite.cc	/^    double operator()(const coordT& x) const {$/;"	f	class:GaussianPotential
operator ()	src/madness/mra/testsuite.cc	/^    double_complex operator()(const coordT& coords) const {$/;"	f	class:QMtest
operator ()	src/madness/mra/testsuite.cc	/^    resultT operator()(const coordT& x) const {$/;"	f	class:BinaryOp
operator ()	src/madness/mra/testunaryop.cc	/^    T operator()(const coordT& x) const {$/;"	f	class:Gaussian
operator ()	src/madness/mra/testvmra.cc	/^    T operator()(const coordT& x) const {$/;"	f	class:Gaussian
operator ()	src/madness/mra/testvmra.cc	/^    std::vector<madness::Tensor<double> > operator()(const madness::Key<NDIM> & key,$/;"	f	struct:many_to_many_op
operator ()	src/madness/tensor/elem.h	/^            void operator()(const Value<T>& v) {$/;"	f	class:madness::detail::ElemToMadDistCopy
operator ()	src/madness/tensor/elem.h	/^            void operator()(const Value<T>& v) {$/;"	f	class:madness::detail::MadToElemDistCopy
operator ()	src/madness/tensor/gentensor.h	/^    SliceGenTensor<T> operator()(const std::vector<Slice>& s) {$/;"	f	class:madness::GenTensor
operator ()	src/madness/tensor/gentensor.h	/^    const SliceGenTensor<T> operator()(const std::vector<Slice>& s) const {$/;"	f	class:madness::GenTensor
operator ()	src/madness/tensor/lowranktensor.h	/^    SliceLowRankTensor<T> operator()(const std::vector<Slice>& s) {$/;"	f	class:madness::LowRankTensor
operator ()	src/madness/tensor/lowranktensor.h	/^    const SliceLowRankTensor<T> operator()(const std::vector<Slice>& s) const {$/;"	f	class:madness::LowRankTensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(const Slice& s0) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(const Slice& s0, const Slice& s1) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(const Slice& s0, const Slice& s1, const Slice& s2) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(const Slice& s0, const Slice& s1, const Slice& s2,$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(const Slice& s0, const Slice& s1, long k) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(const Slice& s0, long j) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(const Slice& s0, long j, const Slice& s2) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(const Slice& s0, long j, long k) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(const std::vector<Slice>& s) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(long i, const Slice& s1) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(long i, const Slice& s1, const Slice& s2) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(long i, const Slice& s1, long k) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        SliceTensor<T> operator()(long i, long j, const Slice& s2) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        T& operator()(const long ind[]) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        T& operator()(const std::vector<long> ind) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        T& operator()(long i) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        T& operator()(long i, long j) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        T& operator()(long i, long j, long k) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        T& operator()(long i, long j, long k, long l) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        T& operator()(long i, long j, long k, long l, long m) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        T& operator()(long i, long j, long k, long l, long m, long n) {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const T& operator()(const long ind[]) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const T& operator()(const std::vector<long> ind) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const T& operator()(long i) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const T& operator()(long i, long j) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const T& operator()(long i, long j, long k) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const T& operator()(long i, long j, long k, long l) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const T& operator()(long i, long j, long k, long l, long m) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const T& operator()(long i, long j, long k, long l, long m, long n) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(const Slice& s0) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(const Slice& s0, const Slice& s1) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(const Slice& s0, const Slice& s1, const Slice& s2) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(const Slice& s0, const Slice& s1, const Slice& s2,$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(const Slice& s0, const Slice& s1, long k) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(const Slice& s0, long j) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(const Slice& s0, long j, const Slice& s2) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(const Slice& s0, long j, long k) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(const std::vector<Slice>& s) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(long i, const Slice& s1) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(long i, const Slice& s1, const Slice& s2) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(long i, const Slice& s1, long k) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/tensor/tensor.h	/^        const Tensor<T> operator()(long i, long j, const Slice& s2) const {$/;"	f	class:madness::Tensor
operator ()	src/madness/world/mem_func_wrapper.h	/^            result_type operator()(argTs&&... args) const {$/;"	f	class:madness::detail::MemFuncWrapper
operator ()	src/madness/world/mem_func_wrapper.h	/^            void operator()(argTs&&... args) const {$/;"	f	class:madness::detail::MemFuncWrapper
operator ()	src/madness/world/test_ar.cc	/^  void operator()(Archive&& ar, const POD& pod) {$/;"	f	struct:pod_deserialize_dispatch
operator ()	src/madness/world/test_ar.cc	/^  void operator()(Archive&& ar, const POD& pod) {$/;"	f	struct:pod_serialize_dispatch
operator ()	src/madness/world/test_world.cc	/^        void operator()(const Key& key) const {$/;"	f	struct:Node::do_random_insert
operator ()	src/madness/world/test_world.cc	/^    void operator()(const Key& key) const {$/;"	f	struct:Walker1
operator ()	src/madness/world/world.h	/^            bool operator()() const {$/;"	f	struct:madness::World::MpiRequestTester
operator ()	src/madness/world/world.h	/^            inline std::size_t operator()(const uniqueidT& id) const {$/;"	f	struct:madness::World::hashuniqueT
operator ()	src/madness/world/world.h	/^            inline std::size_t operator()(const void* p) const {$/;"	f	struct:madness::World::hashvoidp
operator ()	src/madness/world/world_task_queue.h	/^            bool operator()() const {$/;"	f	struct:madness::WorldTaskQueue::ProbeAllDone
operator ()	src/madness/world/worlddc.h	/^	  bool operator()(typename rangeT::iterator& iterator) const {$/;"	f	struct:madness::WorldContainerImpl::P2Op
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldAbsMaxOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldAbsMinOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldBitAndOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldBitOrOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldBitXorOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldLogicAndOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldLogicOrOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldMaxOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldMinOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldMultOp
operator ()	src/madness/world/worldgop.h	/^        inline T operator()(const T& a, const T& b) const {$/;"	f	struct:madness::WorldSumOp
operator ()	src/madness/world/worldhash.h	/^        hashT operator()(const T& t) const {$/;"	f	struct:madness::Hash
operator *	src/apps/adrian/ResponseFunction2.h	/^  ResponseFunction operator*(const Function<double, 3>& f) {$/;"	f	class:madness::ResponseFunction
operator *	src/apps/adrian/ResponseFunction2.h	/^  ResponseFunction operator*(double a) const {$/;"	f	class:madness::ResponseFunction
operator *	src/apps/adrian/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> operator*(std::vector<std::vector<real_function_3d>> & a,$/;"	f
operator *	src/apps/adrian/gaussian.cc	/^GaussianFunction GaussianFunction::operator*(const GaussianFunction &rhs) const {$/;"	f	class:slymer::GaussianFunction
operator *	src/apps/adrian/gaussian.cc	/^PrimitiveGaussian PrimitiveGaussian::operator*(const PrimitiveGaussian &rhs) const {$/;"	f	class:slymer::PrimitiveGaussian
operator *	src/apps/adrian/gaussian.h	/^  GaussianFunction operator*(const double rhs) const {$/;"	f	class:slymer::GaussianFunction
operator *	src/apps/adrian/gaussian.h	/^inline GaussianFunction operator*(const double lhs, const GaussianFunction &rhs) {$/;"	f	namespace:slymer
operator *	src/apps/adrian/polynomial.cc	/^PolynomialCoeffs PolynomialCoeffs::operator* (const PolynomialCoeffs &rhs) const$/;"	f	class:slymer::PolynomialCoeffs
operator *	src/apps/adrian/polynomial.cc	/^PolynomialCoeffs PolynomialCoeffs::operator* (const double c) const {$/;"	f	class:slymer::PolynomialCoeffs
operator *	src/apps/adrian/polynomial.h	/^inline PolynomialCoeffs operator* (const double c, const PolynomialCoeffs &poly) {$/;"	f	namespace:slymer
operator *	src/apps/bryan/ResponseFunction2.h	/^      ResponseFunction operator*(const Function<double,3>& f) {$/;"	f	class:madness::ResponseFunction
operator *	src/apps/bryan/ResponseFunction2.h	/^      ResponseFunction operator*(double a) const {$/;"	f	class:madness::ResponseFunction
operator *	src/apps/bryan/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> operator*(std::vector<std::vector<real_function_3d>> & a,$/;"	f
operator *	src/apps/bryan/gaussian.cc	/^GaussianFunction GaussianFunction::operator*(const GaussianFunction &rhs) const {$/;"	f	class:slymer::GaussianFunction
operator *	src/apps/bryan/gaussian.cc	/^PrimitiveGaussian PrimitiveGaussian::operator*(const PrimitiveGaussian &rhs) const {$/;"	f	class:slymer::PrimitiveGaussian
operator *	src/apps/bryan/gaussian.h	/^  GaussianFunction operator*(const double rhs) const {$/;"	f	class:slymer::GaussianFunction
operator *	src/apps/bryan/gaussian.h	/^inline GaussianFunction operator*(const double lhs, const GaussianFunction &rhs) {$/;"	f	namespace:slymer
operator *	src/apps/bryan/polynomial.cc	/^PolynomialCoeffs PolynomialCoeffs::operator* (const PolynomialCoeffs &rhs) const$/;"	f	class:slymer::PolynomialCoeffs
operator *	src/apps/bryan/polynomial.cc	/^PolynomialCoeffs PolynomialCoeffs::operator* (const double c) const {$/;"	f	class:slymer::PolynomialCoeffs
operator *	src/apps/bryan/polynomial.h	/^inline PolynomialCoeffs operator* (const double c, const PolynomialCoeffs &poly) {$/;"	f	namespace:slymer
operator *	src/apps/chem/CCStructures.h	/^    CCFunction operator*(const double &fac)const{$/;"	f	struct:madness::CCFunction
operator *	src/apps/chem/CCStructures.h	/^    CCPairFunction operator*(const double fac)const{$/;"	f	struct:madness::CCPairFunction
operator *	src/apps/chem/CCStructures.h	/^    CC_vecfunction operator*(const double &fac)const{$/;"	f	struct:madness::CC_vecfunction
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const double  b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const int b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const long double b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpq_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const mpq_t b)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const mpz_t b)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const mpz_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const unsigned int b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	src/apps/nick/mpreal.h	/^inline const mpreal operator*(const unsigned long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	src/examples/newsolver.cc	/^    F operator*(double a) const { \/\/ Scale by a constant necessary$/;"	f	struct:F
operator *	src/examples/testsolver.cc	/^    F operator*(double a) const { \/\/ Scale by a constant necessary$/;"	f	class:F
operator *	src/examples/testspectralprop.cc	/^    Fred operator*(const double& d) const {$/;"	f	class:Fred
operator *	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  T& operator*() const { return *value_; }$/;"	f	class:testing::internal::linked_ptr
operator *	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  const T& operator*() const { return *impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator *	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  T& operator*() const { return *ptr_; }$/;"	f	class:testing::internal::scoped_ptr
operator *	src/madness/external/muParser/muParserFixes.h	/^	  _Ty& operator*() const  { return (*_Myptr); }$/;"	f	class:std::_my_auto_ptr
operator *	src/madness/mra/indexit.h	/^        operator*() const {$/;"	f	class:madness::IndexIterator
operator *	src/madness/mra/mra.h	/^    operator*(const Function<L,NDIM>& left, const Function<R,NDIM>& right) {$/;"	f	namespace:madness
operator *	src/madness/mra/mra.h	/^    operator*(const Function<T,NDIM>& f, const Q alpha) {$/;"	f	namespace:madness
operator *	src/madness/mra/mra.h	/^    operator*(const Q alpha, const Function<T,NDIM>& f) {$/;"	f	namespace:madness
operator *	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> operator*($/;"	f	namespace:madness
operator *	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(T, R), NDIM>> operator*($/;"	f	namespace:madness
operator *	src/madness/tensor/gentensor.h	/^    operator*(const Q& x, const GenTensor<T>& t) {$/;"	f	namespace:madness
operator *	src/madness/tensor/lowranktensor.h	/^    LowRankTensor<TENSOR_RESULT_TYPE(T,Q)> operator*(const Q& x) const {$/;"	f	class:madness::LowRankTensor
operator *	src/madness/tensor/lowranktensor.h	/^operator*(const Q& x, const LowRankTensor<T>& t) {$/;"	f	namespace:madness
operator *	src/madness/tensor/tensor.h	/^        operator*(const Q& x) const {$/;"	f	class:madness::Tensor
operator *	src/madness/tensor/tensor.h	/^    operator*(const Q& x, const Tensor<T>& t) {$/;"	f	namespace:madness
operator *	src/madness/tensor/tensoriter.h	/^        inline T& operator*() const {$/;"	f	class:madness::TensorIterator
operator *	src/madness/tensor/tensortrain.h	/^		TensorTrain<T> operator*(const T& factor) const {$/;"	f	class:madness::TensorTrain
operator *	src/madness/world/archive.h	/^            T& operator*() {$/;"	f	class:madness::archive::archive_ptr
operator *	src/madness/world/vector.h	/^    Vector<T,N> operator*(T l, Vector<U,N> r) {$/;"	f	namespace:madness
operator *	src/madness/world/vector.h	/^    Vector<T,N> operator*(Vector<T,N> l, U r) {$/;"	f	namespace:madness
operator *	src/madness/world/vector.h	/^    Vector<T,N> operator*(Vector<T,N> l, const Vector<U,N>& r) {$/;"	f	namespace:madness
operator *	src/madness/world/worlddc.h	/^        reference operator*() const {$/;"	f	class:madness::WorldContainerIterator
operator *	src/madness/world/worldhashmap.h	/^            datumT& operator*() const {$/;"	f	class:madness::Hash_private::HashAccessor
operator *	src/madness/world/worldhashmap.h	/^            reference operator*() const {$/;"	f	class:madness::Hash_private::HashIterator
operator *	src/madness/world/worldptr.h	/^            reference operator*() const {$/;"	f	class:madness::detail::WorldPtr
operator *	src/madness/world/worldref.h	/^        referenceT operator*() const {$/;"	f	class:madness::RemoteReference
operator *=	src/apps/adrian/gaussian.cc	/^GaussianFunction &GaussianFunction::operator*=(const double rhs) {$/;"	f	class:slymer::GaussianFunction
operator *=	src/apps/adrian/gaussian.h	/^  GaussianFunction &operator*=(const GaussianFunction &rhs) {$/;"	f	class:slymer::GaussianFunction
operator *=	src/apps/adrian/polynomial.cc	/^PolynomialCoeffs &PolynomialCoeffs::operator*= (const double c) {$/;"	f	class:slymer::PolynomialCoeffs
operator *=	src/apps/bryan/gaussian.cc	/^GaussianFunction &GaussianFunction::operator*=(const double rhs) {$/;"	f	class:slymer::GaussianFunction
operator *=	src/apps/bryan/gaussian.h	/^  GaussianFunction &operator*=(const GaussianFunction &rhs) {$/;"	f	class:slymer::GaussianFunction
operator *=	src/apps/bryan/polynomial.cc	/^PolynomialCoeffs &PolynomialCoeffs::operator*= (const double c) {$/;"	f	class:slymer::PolynomialCoeffs
operator *=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator*= (const mpreal& v)$/;"	f	class:mpfr::mpreal
operator *=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator*=(const double v)$/;"	f	class:mpfr::mpreal
operator *=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator*=(const int v)$/;"	f	class:mpfr::mpreal
operator *=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator*=(const long double v)$/;"	f	class:mpfr::mpreal
operator *=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator*=(const long int v)$/;"	f	class:mpfr::mpreal
operator *=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator*=(const mpq_t v)$/;"	f	class:mpfr::mpreal
operator *=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator*=(const mpz_t v)$/;"	f	class:mpfr::mpreal
operator *=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator*=(const unsigned int v)$/;"	f	class:mpfr::mpreal
operator *=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator*=(const unsigned long int v)$/;"	f	class:mpfr::mpreal
operator *=	src/madness/mra/mra.h	/^        operator*=(const Q q) {$/;"	f	class:madness::Function
operator *=	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrix<T>& operator*=(const T s) {$/;"	f	class:madness::DistributedMatrix
operator *=	src/madness/tensor/tensor.h	/^        operator*=(const Q& x) {$/;"	f	class:madness::Tensor
operator *=	src/madness/world/vector.h	/^        Vector<T,N>& operator*=(Q q) {$/;"	f	class:madness::Vector
operator +	src/apps/adrian/ResponseFunction2.h	/^  ResponseFunction operator+(ResponseFunction& b) {$/;"	f	class:madness::ResponseFunction
operator +	src/apps/adrian/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> operator+(std::vector<std::vector<real_function_3d>> a,$/;"	f
operator +	src/apps/adrian/gaussian.cc	/^GaussianFunction GaussianFunction::operator+(const GaussianFunction &rhs) const {$/;"	f	class:slymer::GaussianFunction
operator +	src/apps/adrian/polynomial.cc	/^PolynomialCoeffs PolynomialCoeffs::operator+ (const PolynomialCoeffs &rhs) const$/;"	f	class:slymer::PolynomialCoeffs
operator +	src/apps/bryan/ResponseFunction2.h	/^      ResponseFunction operator+(ResponseFunction& b) {$/;"	f	class:madness::ResponseFunction
operator +	src/apps/bryan/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> operator+(std::vector<std::vector<real_function_3d>> a,$/;"	f
operator +	src/apps/bryan/gaussian.cc	/^GaussianFunction GaussianFunction::operator+(const GaussianFunction &rhs) const {$/;"	f	class:slymer::GaussianFunction
operator +	src/apps/bryan/polynomial.cc	/^PolynomialCoeffs PolynomialCoeffs::operator+ (const PolynomialCoeffs &rhs) const$/;"	f	class:slymer::PolynomialCoeffs
operator +	src/apps/chem/PNOStructures.cpp	/^PairEnergies PairEnergies::operator +(const PairEnergies& right) const {$/;"	f	class:madness::PairEnergies
operator +	src/apps/nick/mpreal.h	/^inline const mpreal mpreal::operator+()const$/;"	f	class:mpfr::mpreal
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const char* a, const mpreal& b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const double  b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const int b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const long double b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpq_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const char* b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const mpq_t b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const mpz_t b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const mpz_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const unsigned int b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const mpreal operator+(const unsigned long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const std::string operator+(const mpreal& a, const std::string b)$/;"	f	namespace:mpfr
operator +	src/apps/nick/mpreal.h	/^inline const std::string operator+(const std::string a, const mpreal& b)$/;"	f	namespace:mpfr
operator +	src/madness/external/tinyxml/tinystr.cc	/^TiXmlString operator + (const TiXmlString & a, const TiXmlString & b)$/;"	f
operator +	src/madness/external/tinyxml/tinystr.cc	/^TiXmlString operator + (const TiXmlString & a, const char* b)$/;"	f
operator +	src/madness/external/tinyxml/tinystr.cc	/^TiXmlString operator + (const char* a, const TiXmlString & b)$/;"	f
operator +	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> operator+($/;"	f	namespace:madness
operator +	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrix<T> operator+(const DistributedMatrix<T>& A) const {$/;"	f	class:madness::DistributedMatrix
operator +	src/madness/tensor/tensor.h	/^        Tensor< TENSOR_RESULT_TYPE(T,Q) > operator+(const Tensor<Q>& t) const {$/;"	f	class:madness::Tensor
operator +	src/madness/tensor/tensor.h	/^        operator+(const Q& x) const {$/;"	f	class:madness::Tensor
operator +	src/madness/tensor/tensor.h	/^    operator+(Q x, const Tensor<T>& t) {$/;"	f	namespace:madness
operator +	src/madness/world/test_dc.cc	/^    Double operator+(double x) {return Double(value+x);}$/;"	f	class:Double
operator +	src/madness/world/vector.h	/^    Vector<T,N> operator+(Vector<T,N> l, U r) {$/;"	f	namespace:madness
operator +	src/madness/world/vector.h	/^    Vector<T,N> operator+(Vector<T,N> l, const Vector<U,N>& r) {$/;"	f	namespace:madness
operator ++	src/apps/chem/PNOStructures.cpp	/^ElectronPairIterator& ElectronPairIterator::operator ++() {$/;"	f	class:madness::ElectronPairIterator
operator ++	src/apps/chem/PNOStructures.h	/^	OrbitalIterator& operator ++(){$/;"	f	struct:madness::OrbitalIterator
operator ++	src/apps/chem/SCFProtocol.h	/^    SCFProtocol& operator++() {$/;"	f	class:madness::SCFProtocol
operator ++	src/apps/nick/mpreal.h	/^inline const mpreal mpreal::operator++ (int)$/;"	f	class:mpfr::mpreal
operator ++	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator++() $/;"	f	class:mpfr::mpreal
operator ++	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ParamIterator operator++(int \/*unused*\/) {$/;"	f	class:testing::internal::ParamIterator
operator ++	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ParamIterator& operator++() {$/;"	f	class:testing::internal::ParamIterator
operator ++	src/madness/mra/indexit.h	/^        operator++() {$/;"	f	class:madness::HighDimIndexIterator
operator ++	src/madness/mra/indexit.h	/^        operator++() {$/;"	f	class:madness::IndexIterator
operator ++	src/madness/mra/indexit.h	/^        operator++() {$/;"	f	class:madness::LowDimIndexIterator
operator ++	src/madness/mra/indexit.h	/^        operator++() {$/;"	f	class:madness::NonstandardIndexIterator
operator ++	src/madness/mra/key.h	/^        operator++() {$/;"	f	class:madness::KeyChildIterator
operator ++	src/madness/tensor/tensoriter.h	/^    TensorIterator<T,Q,R>& TensorIterator<T,Q,R>::operator++() {$/;"	f	class:madness::TensorIterator
operator ++	src/madness/world/atomicint.h	/^        int operator++() {$/;"	f	class:madness::AtomicInt
operator ++	src/madness/world/atomicint.h	/^        int operator++(int) {$/;"	f	class:madness::AtomicInt
operator ++	src/madness/world/test_tree.cc	/^    KeyChildIterator& operator++() {$/;"	f	class:KeyChildIterator
operator ++	src/madness/world/worlddc.h	/^        WorldContainerIterator operator++(int) {$/;"	f	class:madness::WorldContainerIterator
operator ++	src/madness/world/worlddc.h	/^        WorldContainerIterator& operator++() {$/;"	f	class:madness::WorldContainerIterator
operator ++	src/madness/world/worldhashmap.h	/^            HashIterator operator++(int) {$/;"	f	class:madness::Hash_private::HashIterator
operator ++	src/madness/world/worldhashmap.h	/^            HashIterator& operator++() {$/;"	f	class:madness::Hash_private::HashIterator
operator +=	src/apps/adrian/ResponseFunction2.h	/^  ResponseFunction operator+=(const ResponseFunction b) {$/;"	f	class:madness::ResponseFunction
operator +=	src/apps/adrian/TDHF_Basic_Operators.h	/^void operator+=(std::vector<std::vector<real_function_3d>> & a,$/;"	f
operator +=	src/apps/adrian/gaussian.cc	/^GaussianFunction &GaussianFunction::operator+=(const GaussianFunction &rhs) {$/;"	f	class:slymer::GaussianFunction
operator +=	src/apps/adrian/polynomial.cc	/^PolynomialCoeffs &PolynomialCoeffs::operator+= (const PolynomialCoeffs &rhs) {$/;"	f	class:slymer::PolynomialCoeffs
operator +=	src/apps/bryan/ResponseFunction2.h	/^      ResponseFunction operator+=(const ResponseFunction b) {$/;"	f	class:madness::ResponseFunction
operator +=	src/apps/bryan/TDHF_Basic_Operators.h	/^void operator+=(std::vector<std::vector<real_function_3d>> & a,$/;"	f
operator +=	src/apps/bryan/gaussian.cc	/^GaussianFunction &GaussianFunction::operator+=(const GaussianFunction &rhs) {$/;"	f	class:slymer::GaussianFunction
operator +=	src/apps/bryan/polynomial.cc	/^PolynomialCoeffs &PolynomialCoeffs::operator+= (const PolynomialCoeffs &rhs) {$/;"	f	class:slymer::PolynomialCoeffs
operator +=	src/apps/chem/PNOStructures.cpp	/^PairEnergies PairEnergies::operator +=(const PairEnergies& right) {$/;"	f	class:madness::PairEnergies
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+= (const double u)$/;"	f	class:mpfr::mpreal
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+= (const long double u)$/;"	f	class:mpfr::mpreal
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+=(const int u)$/;"	f	class:mpfr::mpreal
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+=(const long int u)$/;"	f	class:mpfr::mpreal
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+=(const mpf_t u)$/;"	f	class:mpfr::mpreal
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+=(const mpq_t u)$/;"	f	class:mpfr::mpreal
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+=(const mpreal& v)$/;"	f	class:mpfr::mpreal
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+=(const mpz_t u)$/;"	f	class:mpfr::mpreal
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+=(const unsigned int u)$/;"	f	class:mpfr::mpreal
operator +=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator+=(const unsigned long int u)$/;"	f	class:mpfr::mpreal
operator +=	src/examples/newsolver.cc	/^    F operator+=(const F& b) { \/\/ Operator+= necessary$/;"	f	struct:F
operator +=	src/examples/testsolver.cc	/^    F& operator+=(const F& b) { \/\/ Operator+= necessary$/;"	f	class:F
operator +=	src/examples/testspectralprop.cc	/^    Fred& operator+=(const Fred& f) {$/;"	f	class:Fred
operator +=	src/madness/external/tinyxml/tinystr.h	/^	TiXmlString& operator += (char single)$/;"	f	class:TiXmlString
operator +=	src/madness/external/tinyxml/tinystr.h	/^	TiXmlString& operator += (const TiXmlString & suffix)$/;"	f	class:TiXmlString
operator +=	src/madness/external/tinyxml/tinystr.h	/^	TiXmlString& operator += (const char * suffix)$/;"	f	class:TiXmlString
operator +=	src/madness/mra/mra.h	/^        Function<T,NDIM>& operator+=(const Function<Q,NDIM>& other) {$/;"	f	class:madness::Function
operator +=	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> operator+=($/;"	f	namespace:madness
operator +=	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrix<T>& operator+=(const DistributedMatrix<T>& A) {$/;"	f	class:madness::DistributedMatrix
operator +=	src/madness/tensor/lowranktensor.h	/^    LowRankTensor& operator+=(const LowRankTensor& other) {$/;"	f	class:madness::LowRankTensor
operator +=	src/madness/tensor/lowranktensor.h	/^    SliceLowRankTensor<T>& operator+=(const LowRankTensor<T>& rhs) {$/;"	f	class:madness::SliceLowRankTensor
operator +=	src/madness/tensor/lowranktensor.h	/^    SliceLowRankTensor<T>& operator+=(const SliceLowRankTensor<T>& rhs) {$/;"	f	class:madness::SliceLowRankTensor
operator +=	src/madness/tensor/tensor.h	/^        Tensor<T>& operator+=(const Tensor<Q>& t) {$/;"	f	class:madness::Tensor
operator +=	src/madness/tensor/tensor.h	/^        operator+=(const Q& x) {$/;"	f	class:madness::Tensor
operator +=	src/madness/tensor/tensortrain.h	/^		TensorTrain<T>& operator+=(const TensorTrain<T>& rhs) {$/;"	f	class:madness::TensorTrain
operator +=	src/madness/world/atomicint.h	/^        int operator+=(const int inc) {$/;"	f	class:madness::AtomicInt
operator +=	src/madness/world/vector.h	/^        Vector<T,N>& operator+=(const Vector<Q,N>& q) {$/;"	f	class:madness::Vector
operator -	src/apps/adrian/ResponseFunction2.h	/^  ResponseFunction operator-(const ResponseFunction& b) const {$/;"	f	class:madness::ResponseFunction
operator -	src/apps/adrian/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> operator-(const std::vector<std::vector<real_function_3d>> & a,$/;"	f
operator -	src/apps/adrian/gaussian.cc	/^GaussianFunction GaussianFunction::operator- () const {$/;"	f	class:slymer::GaussianFunction
operator -	src/apps/adrian/gaussian.h	/^  GaussianFunction operator-(const GaussianFunction &rhs) const {$/;"	f	class:slymer::GaussianFunction
operator -	src/apps/bryan/ResponseFunction2.h	/^      ResponseFunction operator-(const ResponseFunction& b) const {$/;"	f	class:madness::ResponseFunction
operator -	src/apps/bryan/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> operator-(const std::vector<std::vector<real_function_3d>> & a,$/;"	f
operator -	src/apps/bryan/gaussian.cc	/^GaussianFunction GaussianFunction::operator- () const {$/;"	f	class:slymer::GaussianFunction
operator -	src/apps/bryan/gaussian.h	/^  GaussianFunction operator-(const GaussianFunction &rhs) const {$/;"	f	class:slymer::GaussianFunction
operator -	src/apps/nick/mpreal.h	/^inline const mpreal mpreal::operator-()const$/;"	f	class:mpfr::mpreal
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const char* a, const mpreal& b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const double  b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const int b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const long double b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpq_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const char* b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const mpq_t b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const mpz_t b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const mpz_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const unsigned int b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	src/apps/nick/mpreal.h	/^inline const mpreal operator-(const unsigned long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	src/examples/navstokes_cosines.cc	/^template<typename T, int NDIM> inline myfun operator-(const myfun& l, const myfun& r) { return sub(*pworld, l, r); }$/;"	f
operator -	src/examples/newsolver.cc	/^    F operator-(const F& b) const {$/;"	f	struct:F
operator -	src/examples/testsolver.cc	/^    F operator-(const F& b) const { \/\/ Operator- necessary$/;"	f	class:F
operator -	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> operator-($/;"	f	namespace:madness
operator -	src/madness/tensor/tensor.h	/^        Tensor< TENSOR_RESULT_TYPE(T,Q) > operator-(const Tensor<Q>& t) const {$/;"	f	class:madness::Tensor
operator -	src/madness/tensor/tensor.h	/^        Tensor<T> operator-() const {$/;"	f	class:madness::Tensor
operator -	src/madness/tensor/tensor.h	/^        operator-(const Q& x) const {$/;"	f	class:madness::Tensor
operator -	src/madness/tensor/tensor.h	/^    operator-(Q x, const Tensor<T>& t) {$/;"	f	namespace:madness
operator -	src/madness/world/vector.h	/^    Vector<T,N> operator-(Vector<T,N> l, U r) {$/;"	f	namespace:madness
operator -	src/madness/world/vector.h	/^    Vector<T,N> operator-(Vector<T,N> l, const Vector<U,N>& r) {$/;"	f	namespace:madness
operator --	src/apps/nick/mpreal.h	/^inline const mpreal mpreal::operator-- (int)$/;"	f	class:mpfr::mpreal
operator --	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator--() $/;"	f	class:mpfr::mpreal
operator --	src/madness/world/atomicint.h	/^        int operator--() {$/;"	f	class:madness::AtomicInt
operator --	src/madness/world/atomicint.h	/^        int operator--(int) {$/;"	f	class:madness::AtomicInt
operator -=	src/apps/adrian/gaussian.h	/^  GaussianFunction &operator-=(const GaussianFunction &rhs) {$/;"	f	class:slymer::GaussianFunction
operator -=	src/apps/bryan/gaussian.h	/^  GaussianFunction &operator-=(const GaussianFunction &rhs) {$/;"	f	class:slymer::GaussianFunction
operator -=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator-= (const mpreal& v)$/;"	f	class:mpfr::mpreal
operator -=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator-=(const double v)$/;"	f	class:mpfr::mpreal
operator -=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator-=(const int v)$/;"	f	class:mpfr::mpreal
operator -=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator-=(const long double v)$/;"	f	class:mpfr::mpreal
operator -=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator-=(const long int v)$/;"	f	class:mpfr::mpreal
operator -=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator-=(const mpq_t v)$/;"	f	class:mpfr::mpreal
operator -=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator-=(const mpz_t v)$/;"	f	class:mpfr::mpreal
operator -=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator-=(const unsigned int v)$/;"	f	class:mpfr::mpreal
operator -=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator-=(const unsigned long int v)$/;"	f	class:mpfr::mpreal
operator -=	src/madness/mra/mra.h	/^        Function<T,NDIM>& operator-=(const Function<Q,NDIM>& other) {$/;"	f	class:madness::Function
operator -=	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> operator-=($/;"	f	namespace:madness
operator -=	src/madness/tensor/lowranktensor.h	/^    LowRankTensor& operator-=(const LowRankTensor& other) {$/;"	f	class:madness::LowRankTensor
operator -=	src/madness/tensor/lowranktensor.h	/^    SliceLowRankTensor<T>& operator-=(const LowRankTensor<T>& rhs) {$/;"	f	class:madness::SliceLowRankTensor
operator -=	src/madness/tensor/tensor.h	/^        Tensor<T>& operator-=(const Tensor<Q>& t) {$/;"	f	class:madness::Tensor
operator -=	src/madness/tensor/tensor.h	/^        operator-=(const Q& x) {$/;"	f	class:madness::Tensor
operator -=	src/madness/tensor/tensortrain.h	/^        TensorTrain<T>& operator-=(const TensorTrain<T>& rhs) {$/;"	f	class:madness::TensorTrain
operator -=	src/madness/world/atomicint.h	/^        int operator-=(const int dec) {$/;"	f	class:madness::AtomicInt
operator -=	src/madness/world/vector.h	/^        Vector<T,N>& operator-=(const Vector<Q,N>& q) {$/;"	f	class:madness::Vector
operator ->	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  T* operator->() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
operator ->	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  const T* operator->() const { return impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator ->	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  T* operator->() const { return ptr_; }$/;"	f	class:testing::internal::scoped_ptr
operator ->	src/madness/external/muParser/muParserFixes.h	/^	  _Ty *operator->() const	{ return (&**this);	}$/;"	f	class:std::_my_auto_ptr
operator ->	src/madness/tensor/tensoriter.h	/^        inline TensorIterator<T,Q,R>* operator->() {$/;"	f	class:madness::TensorIterator
operator ->	src/madness/world/worlddc.h	/^        pointer operator->() const {$/;"	f	class:madness::WorldContainerIterator
operator ->	src/madness/world/worldhashmap.h	/^            datumT* operator->() const {$/;"	f	class:madness::Hash_private::HashAccessor
operator ->	src/madness/world/worldhashmap.h	/^            pointer operator->() const {$/;"	f	class:madness::Hash_private::HashIterator
operator ->	src/madness/world/worldptr.h	/^            pointer operator->() const {$/;"	f	class:madness::detail::WorldPtr
operator ->	src/madness/world/worldref.h	/^        pointerT operator->() const {$/;"	f	class:madness::RemoteReference
operator /	src/apps/adrian/gaussian.h	/^  GaussianFunction operator\/(const double rhs) const {$/;"	f	class:slymer::GaussianFunction
operator /	src/apps/bryan/gaussian.h	/^  GaussianFunction operator\/(const double rhs) const {$/;"	f	class:slymer::GaussianFunction
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const double  b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const int b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const long double b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const mpq_t b)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const mpz_t b)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const unsigned int b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	src/apps/nick/mpreal.h	/^inline const mpreal operator\/(const unsigned long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	src/madness/tensor/tensor.h	/^        operator\/(const Q& x) const {$/;"	f	class:madness::Tensor
operator /=	src/apps/adrian/gaussian.h	/^  GaussianFunction &operator\/=(const double rhs) {$/;"	f	class:slymer::GaussianFunction
operator /=	src/apps/bryan/gaussian.h	/^  GaussianFunction &operator\/=(const double rhs) {$/;"	f	class:slymer::GaussianFunction
operator /=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator\/=(const double v)$/;"	f	class:mpfr::mpreal
operator /=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator\/=(const int v)$/;"	f	class:mpfr::mpreal
operator /=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator\/=(const long double v)$/;"	f	class:mpfr::mpreal
operator /=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator\/=(const long int v)$/;"	f	class:mpfr::mpreal
operator /=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator\/=(const mpq_t v)$/;"	f	class:mpfr::mpreal
operator /=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator\/=(const mpreal& v)$/;"	f	class:mpfr::mpreal
operator /=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator\/=(const mpz_t v)$/;"	f	class:mpfr::mpreal
operator /=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator\/=(const unsigned int v)$/;"	f	class:mpfr::mpreal
operator /=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator\/=(const unsigned long int v)$/;"	f	class:mpfr::mpreal
operator <	src/apps/chem/CCStructures.h	/^    bool operator< (const CC_vecfunction &b)const{return omega<b.omega;}$/;"	f	struct:madness::CC_vecfunction
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const double a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const int a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const long double a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const unsigned int a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	src/apps/nick/mpreal.h	/^inline bool operator <  (const unsigned long int a,	const mpreal& b)$/;"	f	namespace:mpfr
operator <	src/madness/external/tinyxml/tinystr.h	/^inline bool operator < (const TiXmlString & a, const TiXmlString & b)$/;"	f
operator <	src/madness/external/tinyxml/tinyxml.h	/^	bool operator<( const TiXmlAttribute& rhs )	 const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute
operator <	src/madness/mra/key.h	/^        bool operator<(const Key& other) const {$/;"	f	class:madness::Key
operator <	src/madness/mra/lbdeux.h	/^            bool operator<(const CostPerProc& other) const {$/;"	f	struct:madness::LoadBalanceDeux::CostPerProc
operator <	src/madness/world/vector.h	/^        friend bool operator<(const Vector<T, N>& l, const Vector<T, N>& r) {$/;"	f	class:madness::Vector
operator <	src/madness/world/worldptr.h	/^            bool operator<(const WorldPtr<U>& other) const {$/;"	f	class:madness::detail::WorldPtr
operator <	src/madness/world/worldrmi.h	/^        bool operator<(const qmsg& other) const {$/;"	f	struct:madness::qmsg
operator <<	src/apps/adrian/NWChem.cc	/^static std::ostream &operator<< (std::ostream &out, const BasisShell &bs) {$/;"	f	namespace:slymer
operator <<	src/apps/bryan/NWChem.cc	/^static std::ostream &operator<< (std::ostream &out, const BasisShell &bs) {$/;"	f	namespace:slymer
operator <<	src/apps/chem/CCStructures.h	/^    CCMessenger operator<<(const T& t)const{$/;"	f	struct:madness::CCMessenger
operator <<	src/apps/chem/PNOParameters.cpp	/^std::ostream& operator << (std::ostream& os, const EnergyType& en){$/;"	f	namespace:madness
operator <<	src/apps/chem/PNOParameters.cpp	/^std::ostream& operator << (std::ostream& os, const GuessType& en){$/;"	f	namespace:madness
operator <<	src/apps/chem/PNOParameters.cpp	/^std::ostream& operator << (std::ostream& os, const PairType& en){$/;"	f	namespace:madness
operator <<	src/apps/chem/PNOStructures.h	/^		friend std::ostream& operator <<(std::ostream& os, const MemInfo& mi){$/;"	f	struct:madness::PNOPairs::MemInfo
operator <<	src/apps/chem/molecularbasis.cc	/^std::ostream& operator<<(std::ostream& s, const AtomicBasis& c) {$/;"	f	namespace:madness
operator <<	src/apps/chem/molecularbasis.cc	/^std::ostream& operator<<(std::ostream& s, const AtomicBasisFunction& a) {$/;"	f	namespace:madness
operator <<	src/apps/chem/molecularbasis.cc	/^std::ostream& operator<<(std::ostream& s, const ContractedGaussianShell& c) {$/;"	f	namespace:madness
operator <<	src/apps/chem/molecule.cc	/^std::ostream &operator<<(std::ostream &s, const Atom &atom)$/;"	f	namespace:madness
operator <<	src/apps/chem/pointgroupoperator.h	/^	std::ostream& operator<<(std::ostream& s, const pg_operator& pg_op) {$/;"	f	class:madness::pg_operator
operator <<	src/apps/hf/mentity.cc	/^std::ostream& operator<<(std::ostream& s, const Atom& atom) {$/;"	f
operator <<	src/apps/hf/molecularbasis.h	/^std::ostream& operator<<(std::ostream& s, const AtomicBasis& c) {$/;"	f
operator <<	src/apps/hf/molecularbasis.h	/^std::ostream& operator<<(std::ostream& s, const AtomicBasisFunction& a) {$/;"	f
operator <<	src/apps/hf/molecularbasis.h	/^std::ostream& operator<<(std::ostream& s, const ContractedGaussianShell& c) {$/;"	f
operator <<	src/apps/moldft/pointgroup.h	/^std::ostream& operator<<(std::ostream& s, const PointGroup& g) {$/;"	f
operator <<	src/apps/nick/extra.cc	/^std::ostream& operator<<(std::ostream& s, const InputParameters& p) {$/;"	f
operator <<	src/apps/nick/mpreal.cc	/^ostream& operator<<(ostream& os, const mpreal& v)$/;"	f	namespace:mpfr
operator <<	src/apps/nick/mpreal.h	/^inline const mpreal operator<<(const mpreal& v, const int k)$/;"	f	namespace:mpfr
operator <<	src/apps/nick/mpreal.h	/^inline const mpreal operator<<(const mpreal& v, const long int k)$/;"	f	namespace:mpfr
operator <<	src/apps/nick/mpreal.h	/^inline const mpreal operator<<(const mpreal& v, const unsigned int k)$/;"	f	namespace:mpfr
operator <<	src/apps/nick/mpreal.h	/^inline const mpreal operator<<(const mpreal& v, const unsigned long int k)$/;"	f	namespace:mpfr
operator <<	src/apps/nick/tdse1.cc	/^ostream& operator<<(ostream& s, const InputParameters& p) {$/;"	f
operator <<	src/apps/polar/molecularbasis.cc	/^std::ostream& operator<<(std::ostream& s, const AtomicBasis& c) {$/;"	f
operator <<	src/apps/polar/molecularbasis.cc	/^std::ostream& operator<<(std::ostream& s, const AtomicBasisFunction& a) {$/;"	f
operator <<	src/apps/polar/molecularbasis.cc	/^std::ostream& operator<<(std::ostream& s, const ContractedGaussianShell& c) {$/;"	f
operator <<	src/apps/polar/molecule.cc	/^std::ostream& operator<<(std::ostream& s, const Atom& atom) {$/;"	f
operator <<	src/apps/polar/pointgroup.h	/^std::ostream& operator<<(std::ostream& s, const PointGroup& g) {$/;"	f
operator <<	src/apps/tdse/tdse.cc	/^std::ostream& operator<<(std::ostream& s, const InputParameters& p) {$/;"	f
operator <<	src/apps/tdse/tdse.confused.cc	/^ostream& operator<<(ostream& s, const InputParameters& p) {$/;"	f
operator <<	src/apps/tdse/tdse4.cc	/^std::ostream& operator<<(std::ostream& s, const InputParameters& p) {$/;"	f
operator <<	src/examples/compiler/mra-driver.hh	/^inline std::ostream& operator<<(std::ostream& s, const Exp& e) {$/;"	f
operator <<	src/examples/testspectralprop.cc	/^std::ostream& operator<<(std::ostream& s, const Fred& f) {$/;"	f
operator <<	src/madness/external/elemental/include/elemental/core/Complex/impl.hpp	/^std::ostream& operator<<( std::ostream& os, Complex<Real> alpha )$/;"	f	namespace:elem
operator <<	src/madness/external/gtest/include/gtest/gtest-message.h	/^  Message& operator <<(BasicNarrowIoManip val) {$/;"	f	class:testing::Message
operator <<	src/madness/external/gtest/include/gtest/gtest-message.h	/^  Message& operator <<(bool b) {$/;"	f	class:testing::Message
operator <<	src/madness/external/gtest/include/gtest/gtest-message.h	/^  inline Message& operator <<(T* const& pointer) {  \/\/ NOLINT$/;"	f	class:testing::Message
operator <<	src/madness/external/gtest/include/gtest/gtest-message.h	/^  inline Message& operator <<(const T& val) {$/;"	f	class:testing::Message
operator <<	src/madness/external/gtest/include/gtest/gtest-message.h	/^  inline Message& operator <<(const T& value) {$/;"	f	class:testing::Message
operator <<	src/madness/external/gtest/include/gtest/gtest-message.h	/^inline std::ostream& operator <<(std::ostream& os, const Message& sb) {$/;"	f	namespace:testing
operator <<	src/madness/external/gtest/include/gtest/gtest-printers.h	/^::std::basic_ostream<Char, CharTraits>& operator<<($/;"	f	namespace:testing::internal2
operator <<	src/madness/external/gtest/include/gtest/gtest.h	/^  template <typename T> AssertionResult& operator<<(const T& value) {$/;"	f	class:testing::AssertionResult
operator <<	src/madness/external/gtest/src/gtest-test-part.cc	/^std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {$/;"	f	namespace:testing
operator <<	src/madness/external/gtest/src/gtest.cc	/^Message& Message::operator <<(const ::std::wstring& wstr) {$/;"	f	class:testing::Message
operator <<	src/madness/external/gtest/src/gtest.cc	/^Message& Message::operator <<(const ::wstring& wstr) {$/;"	f	class:testing::Message
operator <<	src/madness/external/gtest/src/gtest.cc	/^Message& Message::operator <<(const wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	src/madness/external/gtest/src/gtest.cc	/^Message& Message::operator <<(wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	src/madness/external/tinyxml/tinystr.h	/^	TiXmlOutStream & operator << (const TiXmlString & in)$/;"	f	class:TiXmlOutStream
operator <<	src/madness/external/tinyxml/tinystr.h	/^	TiXmlOutStream & operator << (const char * in)$/;"	f	class:TiXmlOutStream
operator <<	src/madness/external/tinyxml/tinyxml.cc	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f
operator <<	src/madness/external/tinyxml/tinyxml.cc	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f
operator <<	src/madness/mra/funcdefaults.h	/^     std::ostream& operator << (std::ostream& s, const BoundaryConditions<NDIM>& bc) {$/;"	f	namespace:madness
operator <<	src/madness/mra/funcimpl.h	/^    operator<<(std::ostream& s, const CoeffTracker<T,NDIM>& ct) {$/;"	f	namespace:madness
operator <<	src/madness/mra/funcimpl.h	/^    std::ostream& operator<<(std::ostream& s, const FunctionNode<T,NDIM>& node) {$/;"	f	namespace:madness
operator <<	src/madness/mra/key.h	/^    operator<<(std::ostream& s, const Key<NDIM>& key) {$/;"	f	namespace:madness
operator <<	src/madness/mra/minmax/y.cc	/^std::ostream& operator<<(std::ostream& s, const matrix<t>& c) {$/;"	f
operator <<	src/madness/mra/minmax/y.cc	/^std::ostream& operator<<(std::ostream& s, const std::vector<t>& c) {$/;"	f
operator <<	src/madness/mra/minmax/y1.cc	/^std::ostream& operator<<(std::ostream& s, const matrix<t>& c) {$/;"	f
operator <<	src/madness/mra/minmax/y1.cc	/^std::ostream& operator<<(std::ostream& s, const std::vector<t>& c) {$/;"	f
operator <<	src/madness/mra/minmax/y_signed.cc	/^std::ostream& operator<<(std::ostream& s, const matrix<t>& c) {$/;"	f
operator <<	src/madness/mra/minmax/y_signed.cc	/^std::ostream& operator<<(std::ostream& s, const std::vector<t>& c) {$/;"	f
operator <<	src/madness/mra/minmax/y_varx.cc	/^std::ostream& operator<<(std::ostream& s, const matrix<t>& c) {$/;"	f
operator <<	src/madness/mra/minmax/y_varx.cc	/^std::ostream& operator<<(std::ostream& s, const std::vector<t>& c) {$/;"	f
operator <<	src/madness/tensor/srconf.h	/^	std::ostream& operator<<(std::ostream& s, const SRConf<T>& sr) {$/;"	f	namespace:madness
operator <<	src/madness/tensor/tensor.cc	/^    std::ostream& operator<<(std::ostream& stream, const Slice& s) {$/;"	f	namespace:madness
operator <<	src/madness/tensor/tensor.h	/^    std::ostream& operator << (std::ostream& s, const Tensor<T>& t) {$/;"	f	namespace:madness
operator <<	src/madness/tensor/tensor.h	/^    std::ostream& operator << (std::ostream& s, const TensorType& tt) {$/;"	f	namespace:madness
operator <<	src/madness/tensor/tensorexcept.h	/^    friend std::ostream& operator <<(std::ostream& out, const TensorException& e) {$/;"	f	class:madness::TensorException
operator <<	src/madness/world/archive.h	/^        operator<<(const Archive& ar, const T& t) {$/;"	f	namespace:madness::archive
operator <<	src/madness/world/array_addons.h	/^    std::ostream& operator<<(std::ostream& s, const std::array<T,N>& a) {$/;"	f	namespace:madness
operator <<	src/madness/world/future.cc	/^    std::ostream& operator<<(std::ostream& out, const Future<void>& f) {$/;"	f	namespace:madness
operator <<	src/madness/world/future.h	/^    std::ostream& operator<<(std::ostream& out, const Future<T>& f) {$/;"	f	namespace:madness
operator <<	src/madness/world/madness_exception.cc	/^    std::ostream& operator<<(std::ostream& out, const MadnessException& e) {$/;"	f	namespace:madness
operator <<	src/madness/world/print.h	/^    operator<<(std::ostream& s, const T(&v)[N]) {$/;"	f	namespace:madness
operator <<	src/madness/world/print.h	/^    std::ostream& operator<<(std::ostream& s, const std::complex<T>& c) {$/;"	f	namespace:madness
operator <<	src/madness/world/print.h	/^    std::ostream& operator<<(std::ostream& s, const std::list<T>& c) {$/;"	f	namespace:madness
operator <<	src/madness/world/print.h	/^    std::ostream& operator<<(std::ostream& s, const std::pair<T,U>& p) {$/;"	f	namespace:madness
operator <<	src/madness/world/print.h	/^    std::ostream& operator<<(std::ostream& s, const std::vector<T>& c) {$/;"	f	namespace:madness
operator <<	src/madness/world/safempi.h	/^        friend std::ostream& operator<<(std::ostream& os, const Exception& e) {$/;"	f	class:SafeMPI::Exception
operator <<	src/madness/world/test_ar.cc	/^std::ostream& operator<<(std::ostream& os, const F& data) {$/;"	f
operator <<	src/madness/world/test_dc.cc	/^ostream& operator<<(ostream&s, const Key& key) {$/;"	f
operator <<	src/madness/world/test_dc.cc	/^ostream& operator<<(ostream&s, const Node& node) {$/;"	f
operator <<	src/madness/world/test_hashdc.cc	/^ostream& operator<<(ostream&s, const Key& key) {$/;"	f
operator <<	src/madness/world/test_tree.cc	/^ostream& operator<<(ostream& s, const Key& key) {$/;"	f
operator <<	src/madness/world/test_tree.cc	/^ostream& operator<<(ostream& s, const Node& node) {$/;"	f
operator <<	src/madness/world/test_world.cc	/^ostream& operator<<(ostream& s, const Key& key) {$/;"	f
operator <<	src/madness/world/test_world.cc	/^ostream& operator<<(ostream& s, const Node& node) {$/;"	f
operator <<	src/madness/world/thread.h	/^            friend inline std::ostream& operator<<(std::ostream& os, const TaskEventListBase& tel) {$/;"	f	class:madness::profiling::TaskEventListBase
operator <<	src/madness/world/thread.h	/^            friend std::ostream& operator<<(std::ostream& os, const TaskEvent& te) {$/;"	f	class:madness::profiling::TaskEvent
operator <<	src/madness/world/uniqueid.h	/^        friend std::ostream& operator<<(std::ostream& s, const uniqueidT& id) {$/;"	f	class:madness::uniqueidT
operator <<	src/madness/world/vector.h	/^        friend std::ostream& operator<<(std::ostream& s, const Vector<T,N>& v) {$/;"	f	class:madness::Vector
operator <<	src/madness/world/worldptr.h	/^            friend std::ostream& operator<<(std::ostream& out, const WorldPtr<T>& p) {$/;"	f	class:madness::detail::WorldPtr
operator <<	src/madness/world/worldref.cc	/^        std::ostream& operator<<(std::ostream& out, const RemoteCounter& counter) {$/;"	f	namespace:madness::detail
operator <<	src/madness/world/worldref.h	/^        friend std::ostream& operator<<(std::ostream& out, const RemoteReference<T>& ref) {$/;"	f	class:madness::RemoteReference
operator <<=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator<<=(const int u)$/;"	f	class:mpfr::mpreal
operator <<=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator<<=(const long int u)$/;"	f	class:mpfr::mpreal
operator <<=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator<<=(const unsigned int u)$/;"	f	class:mpfr::mpreal
operator <<=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator<<=(const unsigned long int u)$/;"	f	class:mpfr::mpreal
operator <=	src/apps/chem/CCStructures.h	/^    bool operator<=(const CC_vecfunction &b)const{return omega<=b.omega;}$/;"	f	struct:madness::CC_vecfunction
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <=  (const unsigned long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator <=	src/apps/nick/mpreal.h	/^inline bool operator <= (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator <=	src/madness/external/tinyxml/tinystr.h	/^inline bool operator <= (const TiXmlString & a, const TiXmlString & b) { return !(b < a); }$/;"	f
operator <=	src/madness/world/vector.h	/^        friend bool operator<=(const Vector<T, N>& l, const Vector<T, N>& r) {$/;"	f	class:madness::Vector
operator <=	src/madness/world/worldptr.h	/^        bool operator<=(const WorldPtr<T>& left, const WorldPtr<U>& right) {$/;"	f	namespace:madness::detail
operator =	src/apps/adrian/TDDFT.cc	/^  TDHF_allocator operator=(const TDHF_allocator &other) {$/;"	f	struct:TDHF_allocator
operator =	src/apps/adrian/TDHF.cc	/^   TDHF_allocator operator=(const TDHF_allocator &other)$/;"	f	struct:TDHF_allocator
operator =	src/apps/adrian/TDHF2.cc	/^   TDHF_allocator operator=(const TDHF_allocator &other)$/;"	f	struct:TDHF_allocator
operator =	src/apps/bryan/TDHF.cc	/^   TDHF_allocator operator=(const TDHF_allocator &other)$/;"	f	struct:TDHF_allocator
operator =	src/apps/bryan/TDHF2.cc	/^   TDHF_allocator operator=(const TDHF_allocator &other)$/;"	f	struct:TDHF_allocator
operator =	src/apps/chem/CCStructures.cc	/^  CCPairFunction::operator =(CCPairFunction& other) {$/;"	f	class:madness::CCPairFunction
operator =	src/apps/chem/PNOStructures.cpp	/^PNOPairs PNOPairs::operator =(const PNOPairs& other) {$/;"	f	class:madness::PNOPairs
operator =	src/apps/chem/PNOStructures.h	/^	valarray_allocator operator=(const valarray_allocator &other){$/;"	f	struct:madness::valarray_allocator
operator =	src/apps/chem/TDHF.cc	/^	TDHF_allocator operator=(const TDHF_allocator &other){$/;"	f	struct:madness::TDHF_allocator
operator =	src/apps/chem/electronic_correlation_factor.h	/^    CorrelationFactor& operator=(const CorrelationFactor& other) {$/;"	f	class:madness::CorrelationFactor
operator =	src/apps/moldft/pointgroup.h	/^    PointGroup& operator=(const PointGroup& other) {$/;"	f	class:PointGroup
operator =	src/apps/nick/mpreal.cc	/^mpreal& mpreal::operator=(const char* s)$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const double v)				$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const int v)$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const long double v)		$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const long int v)			$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const mpf_t v)$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const mpq_t v)$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const mpreal& v)$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const mpz_t v)$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const unsigned int v)		$/;"	f	class:mpfr::mpreal
operator =	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator=(const unsigned long int v)	$/;"	f	class:mpfr::mpreal
operator =	src/apps/polar/pointgroup.h	/^    PointGroup& operator=(const PointGroup& other) {$/;"	f	class:PointGroup
operator =	src/examples/testsolver.cc	/^    F operator=(const F& f) { \/\/ Assignment required for storage in vector$/;"	f	class:F
operator =	src/examples/testspectralprop.cc	/^    Fred& operator=(const Fred& f) {$/;"	f	class:Fred
operator =	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-rvalue_references.cxx	/^   rvmove &operator=(rvmove &&other)$/;"	f	class:rvmove
operator =	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^    TreeData<F>& operator=( TreeData<F>&& treeData ) $/;"	f	struct:elem::qr::TreeData
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::operator=( AbstractBlockDistMatrix<T>&& A )$/;"	f	class:elem::AbstractBlockDistMatrix
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/CIRC_CIRC.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/General.cpp	/^GeneralBlockDistMatrix<T,U,V>::operator=( GeneralBlockDistMatrix<T,U,V>&& A )$/;"	f	class:elem::GeneralBlockDistMatrix
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MD_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/MR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MC.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MD.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_MR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VC.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/STAR_VR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VC_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BDM& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/VR_STAR.cpp	/^BDM::operator=( const BlockDistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^BDM::operator=( BDM&& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^BDM::operator=( const DistMatrix<T,U,V>& A )$/;"	f	class:elem::BDM
operator =	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::operator=( AbstractDistMatrix<T>&& A )$/;"	f	class:elem::AbstractDistMatrix
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/CIRC_CIRC.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/General.cpp	/^GeneralDistMatrix<T,U,V>::operator=( GeneralDistMatrix<T,U,V>&& A )$/;"	f	class:elem::GeneralDistMatrix
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_MR.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MC_STAR.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MD_STAR.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_MC.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/MR_STAR.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MC.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MD.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_MR.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_STAR.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VC.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/STAR_VR.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VC_STAR.cpp	/^DM::operator=( const DistMatrix<T,VR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DM& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,CIRC,CIRC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MD,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,MR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MD>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,MR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VC>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,STAR,VR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/VR_STAR.cpp	/^DM::operator=( const DistMatrix<T,VC,STAR>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^DM::operator=( DM&& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^DM::operator=( const BlockDistMatrix<T,U,V>& A )$/;"	f	class:elem::DM
operator =	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::operator=( Matrix<T>&& A )$/;"	f	class:elem::Matrix
operator =	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::operator=( const Matrix<T>& A )$/;"	f	class:elem::Matrix
operator =	src/madness/external/elemental/src/core/Memory.cpp	/^Memory<G>& Memory<G>::operator=( Memory<G>&& mem )$/;"	f	class:elem::Memory
operator =	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^  FilePath& operator=(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
operator =	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  linked_ptr& operator=(linked_ptr const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  template <typename U> linked_ptr& operator=(linked_ptr<U> const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ParamGenerator& operator=(const ParamGenerator& other) {$/;"	f	class:testing::internal::ParamGenerator
operator =	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ParamIterator& operator=(const ParamIterator& other) {$/;"	f	class:testing::internal::ParamIterator
operator =	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  tuple& operator=(const tuple& \/* t *\/) { return *this; }$/;"	f	class:std::tr1::tuple
operator =	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  tuple& operator=(const tuple& t) { return CopyFrom(t); }$/;"	f	class:std::tr1::tuple
operator =	src/madness/external/gtest/src/gtest.cc	/^void AssertHelper::operator=(const Message& message) const {$/;"	f	class:testing::internal::AssertHelper
operator =	src/madness/external/muParser/muParserBase.cpp	/^  ParserBase& ParserBase::operator=(const ParserBase &a_Parser)$/;"	f	class:mu::ParserBase
operator =	src/madness/external/muParser/muParserBytecode.cpp	/^  ParserByteCode& ParserByteCode::operator=(const ParserByteCode &a_ByteCode)$/;"	f	class:mu::ParserByteCode
operator =	src/madness/external/muParser/muParserError.cpp	/^  ParserError& ParserError::operator=(const ParserError &a_Obj)$/;"	f	class:mu::ParserError
operator =	src/madness/external/muParser/muParserError.cpp	/^  ParserErrorMsg& ParserErrorMsg::operator=(const ParserErrorMsg& )$/;"	f	class:mu::ParserErrorMsg
operator =	src/madness/external/muParser/muParserFixes.h	/^	  _my_auto_ptr<_Ty>& operator=(_my_auto_ptr<_Other>& _Right)$/;"	f	class:std::_my_auto_ptr
operator =	src/madness/external/muParser/muParserToken.h	/^      ParserToken& operator=(const ParserToken &a_Tok)$/;"	f	class:mu::ParserToken
operator =	src/madness/external/muParser/muParserTokenReader.cpp	/^  ParserTokenReader& ParserTokenReader::operator=(const ParserTokenReader &a_Reader)$/;"	f	class:mu::ParserTokenReader
operator =	src/madness/external/tinyxml/tinystr.h	/^	TiXmlString& operator = (const TiXmlString & copy)$/;"	f	class:TiXmlString
operator =	src/madness/external/tinyxml/tinystr.h	/^	TiXmlString& operator = (const char * copy)$/;"	f	class:TiXmlString
operator =	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment
operator =	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration
operator =	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument
operator =	src/madness/external/tinyxml/tinyxml.cc	/^void TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement
operator =	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlHandle operator=( const TiXmlHandle& ref ) { this->node = ref.node; return *this; }$/;"	f	class:TiXmlHandle
operator =	src/madness/external/tinyxml/tinyxml.h	/^	void operator=( const TiXmlText& base )							 	{ base.CopyTo( this ); }$/;"	f	class:TiXmlText
operator =	src/madness/external/tinyxml/tinyxml.h	/^	void operator=( const TiXmlUnknown& copy )										{ copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown
operator =	src/madness/mra/funcdefaults.h	/^        operator=(const BoundaryConditions<NDIM>& other) {$/;"	f	class:madness::BoundaryConditions
operator =	src/madness/mra/funcimpl.h	/^        operator=(const FunctionNode<T, NDIM>& other) {$/;"	f	class:madness::FunctionNode
operator =	src/madness/mra/lbdeux.h	/^        LBNodeDeux<NDIM>& operator=(const LBNodeDeux<NDIM>& other) {$/;"	f	class:madness::LBNodeDeux
operator =	src/madness/mra/mra.h	/^        Function<T,NDIM>& operator=(const Function<T,NDIM>& f) {$/;"	f	class:madness::Function
operator =	src/madness/mra/mypmap.h	/^        MyPmap<D>& operator=(const MyPmap<D>& other) {$/;"	f	class:madness::MyPmap
operator =	src/madness/mra/simplecache.h	/^        SimpleCache& operator=(const SimpleCache& c) {$/;"	f	class:madness::SimpleCache
operator =	src/madness/tensor/distributed_matrix.h	/^        DistributedMatrix<T>& operator=(const DistributedMatrix<T>& A) {$/;"	f	class:madness::DistributedMatrix
operator =	src/madness/tensor/gentensor.h	/^    GenTensor<T>& operator=(const T& number) {$/;"	f	class:madness::GenTensor
operator =	src/madness/tensor/gentensor.h	/^    SliceGenTensor<T>& operator=(const T& number) {$/;"	f	class:madness::SliceGenTensor
operator =	src/madness/tensor/lowranktensor.h	/^    LowRankTensor& operator=(const LowRankTensor<T>& other) {$/;"	f	class:madness::LowRankTensor
operator =	src/madness/tensor/lowranktensor.h	/^    LowRankTensor& operator=(const SliceLowRankTensor<T>& other) {$/;"	f	class:madness::LowRankTensor
operator =	src/madness/tensor/lowranktensor.h	/^    LowRankTensor& operator=(const T& number) {$/;"	f	class:madness::LowRankTensor
operator =	src/madness/tensor/lowranktensor.h	/^    SVDTensor& operator=(const T& number) {$/;"	f	class:madness::SVDTensor
operator =	src/madness/tensor/lowranktensor.h	/^    SliceLowRankTensor<T>& operator=(const LowRankTensor<T>& rhs) {$/;"	f	class:madness::SliceLowRankTensor
operator =	src/madness/tensor/lowranktensor.h	/^    SliceLowRankTensor<T>& operator=(const SliceLowRankTensor<T>& rhs) {$/;"	f	class:madness::SliceLowRankTensor
operator =	src/madness/tensor/lowranktensor.h	/^    SliceLowRankTensor<T>& operator=(const T& number) {$/;"	f	class:madness::SliceLowRankTensor
operator =	src/madness/tensor/slice.h	/^        inline Slice& operator=(const Slice& s) {$/;"	f	class:madness::Slice
operator =	src/madness/tensor/srconf.h	/^		SRConf& operator=(const SRConf& rhs)  {$/;"	f	class:madness::SRConf
operator =	src/madness/tensor/srconf.h	/^		SRConf& operator=(const T& number) {$/;"	f	class:madness::SRConf
operator =	src/madness/tensor/tensor.h	/^            SharedAlignedArray<T>& operator=(const SharedAlignedArray<T>& other) {$/;"	f	class:madness::detail::SharedAlignedArray
operator =	src/madness/tensor/tensor.h	/^        SliceTensor<T>& operator=(const SliceTensor<Q>& t) {$/;"	f	class:madness::SliceTensor
operator =	src/madness/tensor/tensor.h	/^        SliceTensor<T>& operator=(const SliceTensor<T>& t) {$/;"	f	class:madness::SliceTensor
operator =	src/madness/tensor/tensor.h	/^        SliceTensor<T>& operator=(const T& t) {$/;"	f	class:madness::SliceTensor
operator =	src/madness/tensor/tensor.h	/^        SliceTensor<T>& operator=(const Tensor<Q>& t) {$/;"	f	class:madness::SliceTensor
operator =	src/madness/tensor/tensor.h	/^        SliceTensor<T>& operator=(const Tensor<T>& t) {$/;"	f	class:madness::SliceTensor
operator =	src/madness/tensor/tensor.h	/^        Tensor<T>& operator=(T x) {$/;"	f	class:madness::Tensor
operator =	src/madness/tensor/tensor.h	/^        Tensor<T>& operator=(const Tensor<T>& t) {$/;"	f	class:madness::Tensor
operator =	src/madness/tensor/tensortrain.h	/^		TensorTrain& operator=(const TensorTrain& other) {$/;"	f	class:madness::TensorTrain
operator =	src/madness/tensor/tensortrain.h	/^        TensorTrain<T>& operator=(const T& number) {$/;"	f	class:madness::TensorTrain
operator =	src/madness/world/atomicint.h	/^        AtomicInt& operator=(const AtomicInt& other) {$/;"	f	class:madness::AtomicInt
operator =	src/madness/world/atomicint.h	/^        int operator=(int other) {$/;"	f	class:madness::AtomicInt
operator =	src/madness/world/distributed_id.h	/^        ProcessKey<Key, Tag>& operator=(const ProcessKey<Key, Tag>& other) {$/;"	f	class:madness::ProcessKey
operator =	src/madness/world/distributed_id.h	/^        TaggedKey<Key, Tag>& operator=(const TaggedKey<Key, Tag>& other) {$/;"	f	class:madness::TaggedKey
operator =	src/madness/world/future.h	/^        Future<T>& operator=(const Future<T>& other) {$/;"	f	class:madness::Future
operator =	src/madness/world/future.h	/^        inline Future<void>& operator=(const Future<void>& other) {$/;"	f	class:madness::Future
operator =	src/madness/world/group.h	/^        Group& operator=(const Group& other) {$/;"	f	class:madness::Group
operator =	src/madness/world/mem_func_wrapper.h	/^            MemFuncWrapper_& operator=(const MemFuncWrapper_& other) {$/;"	f	class:madness::detail::MemFuncWrapper
operator =	src/madness/world/safempi.h	/^        Exception& operator=(const Exception& other) {$/;"	f	class:SafeMPI::Exception
operator =	src/madness/world/safempi.h	/^        Request& operator=(const MPI_Request& other) {$/;"	f	class:SafeMPI::Request
operator =	src/madness/world/safempi.h	/^        Request& operator=(const Request &other) {$/;"	f	class:SafeMPI::Request
operator =	src/madness/world/safempi.h	/^        Status& operator=(const MPI_Status other) {$/;"	f	class:SafeMPI::Status
operator =	src/madness/world/safempi.h	/^        Status& operator=(const Status &other) {$/;"	f	class:SafeMPI::Status
operator =	src/madness/world/stack.h	/^        Stack<T,N>& operator=(Stack<T,N>&& other) {$/;"	f	class:madness::Stack
operator =	src/madness/world/stack.h	/^        Stack<T,N>& operator=(const Stack<T,N>& other) {$/;"	f	class:madness::Stack
operator =	src/madness/world/test_vec.cc	/^    A& operator=(const A& a) {$/;"	f	class:A
operator =	src/madness/world/vector.h	/^        Vector<T,N>& operator=(const T& t) {$/;"	f	class:madness::Vector
operator =	src/madness/world/vector.h	/^        Vector<T,N>& operator=(const Vector<Q,N>& other) {$/;"	f	class:madness::Vector
operator =	src/madness/world/vector.h	/^        Vector<T,N>& operator=(const Vector<T,N>& other) {$/;"	f	class:madness::Vector
operator =	src/madness/world/vector.h	/^        Vector<T,N>& operator=(const std::initializer_list<T>& list) {$/;"	f	class:madness::Vector
operator =	src/madness/world/vector.h	/^        Vector<T,N>& operator=(const std::vector<Q, A>& other) {$/;"	f	class:madness::Vector
operator =	src/madness/world/worlddc.h	/^        WorldContainerIterator& operator=(const WorldContainerIterator& other) {$/;"	f	class:madness::WorldContainerIterator
operator =	src/madness/world/worlddc.h	/^        containerT& operator=(const containerT& other) {$/;"	f	class:madness::WorldContainer
operator =	src/madness/world/worldhashmap.h	/^        hashT& operator=(const  hashT& h) {$/;"	f	class:madness::ConcurrentHashMap
operator =	src/madness/world/worldprofile.cc	/^    WorldProfileEntry& WorldProfileEntry::operator=(const WorldProfileEntry& other) {$/;"	f	class:madness::WorldProfileEntry
operator =	src/madness/world/worldptr.h	/^            WorldPtr<T>& operator=(const WorldPtr<T>& other) {$/;"	f	class:madness::detail::WorldPtr
operator =	src/madness/world/worldptr.h	/^            WorldPtr<T>& operator=(const WorldPtr<U>& other) {$/;"	f	class:madness::detail::WorldPtr
operator =	src/madness/world/worldref.h	/^            RemoteCounter& operator=(const RemoteCounter& other) {$/;"	f	class:madness::detail::RemoteCounter
operator =	src/madness/world/worldref.h	/^        RemoteReference<T>& operator=(const RemoteReference<T>& other) {$/;"	f	class:madness::RemoteReference
operator =	src/madness/world/worldref.h	/^        RemoteReference<T>& operator=(const RemoteReference<U>& other) {$/;"	f	class:madness::RemoteReference
operator ==	src/apps/chem/CCStructures.h	/^    bool operator ==(const CCFunction &other)const{$/;"	f	struct:madness::CCFunction
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator ==  (const unsigned long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator ==	src/apps/nick/mpreal.h	/^inline bool operator == (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator ==	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^inline bool operator==( const Grid& A, const Grid& B ) { return &A == &B; }$/;"	f	namespace:elem
operator ==	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^inline bool operator==( const Comm& a, const Comm& b )$/;"	f	namespace:elem::mpi
operator ==	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^inline bool operator==( const Group& a, const Group& b )$/;"	f	namespace:elem::mpi
operator ==	src/madness/external/elemental/include/elemental/core/imports/mpi.hpp	/^inline bool operator==( const Op& a, const Op& b )$/;"	f	namespace:elem::mpi
operator ==	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  bool operator==(const NativeArray& rhs) const {$/;"	f	class:testing::internal::NativeArray
operator ==	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  bool operator==(T* p) const { return value_ == p; }$/;"	f	class:testing::internal::linked_ptr
operator ==	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  bool operator==(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator ==	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^bool operator==(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator ==	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  bool operator==(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator ==	src/madness/external/tinyxml/tinystr.h	/^inline bool operator == (const TiXmlString & a, const TiXmlString & b)$/;"	f
operator ==	src/madness/external/tinyxml/tinystr.h	/^inline bool operator == (const TiXmlString & a, const char* b) { return strcmp(a.c_str(), b) == 0; }$/;"	f
operator ==	src/madness/external/tinyxml/tinystr.h	/^inline bool operator == (const char* a, const TiXmlString & b) { return b == a; }$/;"	f
operator ==	src/madness/external/tinyxml/tinyxml.h	/^	bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute
operator ==	src/madness/mra/key.h	/^        bool  operator==(const Key& other) const {$/;"	f	class:madness::Key
operator ==	src/madness/tensor/distributed_matrix.h	/^        bool operator==(const DistributedMatrixDistribution& d) const {$/;"	f	class:madness::DistributedMatrixDistribution
operator ==	src/madness/tensor/tensoriter.h	/^        inline bool operator == (const TensorIterator<T,Q,R>& a) const {$/;"	f	class:madness::TensorIterator
operator ==	src/madness/world/distributed_id.h	/^        bool operator==(const ProcessKey<Key, Tag>& other) const {$/;"	f	class:madness::ProcessKey
operator ==	src/madness/world/distributed_id.h	/^        bool operator==(const TaggedKey<Key, Tag>& other) const {$/;"	f	class:madness::TaggedKey
operator ==	src/madness/world/distributed_id.h	/^    inline bool operator==(const DistributedID& left, const DistributedID& right) {$/;"	f	namespace:madness
operator ==	src/madness/world/safempi.h	/^        bool operator==(const Intracomm& other) const {$/;"	f	class:SafeMPI::Intracomm
operator ==	src/madness/world/safempi.h	/^        bool operator==(const Request &other) { return (request_ == other.request_); }$/;"	f	class:SafeMPI::Request
operator ==	src/madness/world/test_dc.cc	/^    bool operator==(const Key& b) const {$/;"	f	struct:Key
operator ==	src/madness/world/test_dc.cc	/^    bool operator==(double x) {return value==x;}$/;"	f	class:Double
operator ==	src/madness/world/test_hashdc.cc	/^    bool operator==(const Key& b) const {$/;"	f	struct:Key
operator ==	src/madness/world/test_tree.cc	/^    bool operator==(const Key& b) const {$/;"	f	struct:Key
operator ==	src/madness/world/test_world.cc	/^    bool operator==(const Key& b) const {$/;"	f	struct:Key
operator ==	src/madness/world/uniqueid.h	/^        bool operator==(const uniqueidT& other) const {$/;"	f	class:madness::uniqueidT
operator ==	src/madness/world/vector.h	/^        friend bool operator==(const Vector<T, N>& l, const Vector<T, N>& r) {$/;"	f	class:madness::Vector
operator ==	src/madness/world/worlddc.h	/^        bool operator==(const WorldContainerIterator& other) const {$/;"	f	class:madness::WorldContainerIterator
operator ==	src/madness/world/worldhashmap.h	/^            bool operator==(const HashIterator& a) const {$/;"	f	class:madness::Hash_private::HashIterator
operator ==	src/madness/world/worldptr.h	/^            bool operator==(const WorldPtr<U>& other) const {$/;"	f	class:madness::detail::WorldPtr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator >  (const unsigned long int a,	const mpreal& b)$/;"	f	namespace:mpfr
operator >	src/apps/nick/mpreal.h	/^inline bool operator > (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator >	src/madness/external/tinyxml/tinystr.h	/^inline bool operator >  (const TiXmlString & a, const TiXmlString & b) { return b < a; }$/;"	f
operator >	src/madness/external/tinyxml/tinyxml.h	/^	bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute
operator >	src/madness/world/vector.h	/^        friend bool operator>(const Vector<T, N>& l, const Vector<T, N>& r) {$/;"	f	class:madness::Vector
operator >	src/madness/world/worldptr.h	/^        bool operator>(const WorldPtr<T>& left, const WorldPtr<U>& right) {$/;"	f	namespace:madness::detail
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >=  (const unsigned long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator >=	src/apps/nick/mpreal.h	/^inline bool operator >= (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator >=	src/madness/external/tinyxml/tinystr.h	/^inline bool operator >= (const TiXmlString & a, const TiXmlString & b) { return !(a < b); }$/;"	f
operator >=	src/madness/world/vector.h	/^        friend bool operator>=(const Vector<T, N>& l, const Vector<T, N>& r) {$/;"	f	class:madness::Vector
operator >=	src/madness/world/worldptr.h	/^        bool operator>=(const WorldPtr<T>& left, const WorldPtr<U>& right) {$/;"	f	namespace:madness::detail
operator >>	src/apps/chem/PNOParameters.cpp	/^std::istream& operator >> (std::istream& is, EnergyType& en){$/;"	f	namespace:madness
operator >>	src/apps/chem/PNOParameters.cpp	/^std::istream& operator >> (std::istream& is, GuessType& en){$/;"	f	namespace:madness
operator >>	src/apps/chem/PNOParameters.cpp	/^std::istream& operator >> (std::istream& is, PairType& en){$/;"	f	namespace:madness
operator >>	src/apps/chem/QCCalculationParametersBase.h	/^std::istream& operator>>(std::istream& is, std::pair<T,Q>& p) {$/;"	f	namespace:madness
operator >>	src/apps/chem/QCCalculationParametersBase.h	/^std::istream& operator>>(std::istream& is, std::vector<T,A>& v) {$/;"	f	namespace:madness
operator >>	src/apps/hf/esolver.h	/^std::istream& operator >> (std::istream& is, KPoint& kpt)$/;"	f
operator >>	src/apps/nick/mpreal.cc	/^istream& operator>>(istream &is, mpreal& v)$/;"	f	namespace:mpfr
operator >>	src/apps/nick/mpreal.h	/^inline const mpreal operator>>(const mpreal& v, const int k)$/;"	f	namespace:mpfr
operator >>	src/apps/nick/mpreal.h	/^inline const mpreal operator>>(const mpreal& v, const long int k)$/;"	f	namespace:mpfr
operator >>	src/apps/nick/mpreal.h	/^inline const mpreal operator>>(const mpreal& v, const unsigned int k)$/;"	f	namespace:mpfr
operator >>	src/apps/nick/mpreal.h	/^inline const mpreal operator>>(const mpreal& v, const unsigned long int k)$/;"	f	namespace:mpfr
operator >>	src/madness/external/tinyxml/tinyxml.cc	/^std::istream& operator>> (std::istream & in, TiXmlNode & base)$/;"	f
operator >>	src/madness/world/archive.h	/^        operator>>(const Archive& ar, const T& t) {$/;"	f	namespace:madness::archive
operator >>	src/madness/world/test_ar.cc	/^std::istream& operator>>(std::istream& os, F& data) {$/;"	f
operator >>=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator>>=(const int u)$/;"	f	class:mpfr::mpreal
operator >>=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator>>=(const long int u)$/;"	f	class:mpfr::mpreal
operator >>=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator>>=(const unsigned int u)$/;"	f	class:mpfr::mpreal
operator >>=	src/apps/nick/mpreal.h	/^inline mpreal& mpreal::operator>>=(const unsigned long int u)$/;"	f	class:mpfr::mpreal
operator Arg&	src/madness/world/taskfn.h	/^            operator Arg&() & { return arg_; }$/;"	f	class:madness::detail::ArgHolder
operator Arg&&	src/madness/world/taskfn.h	/^            explicit operator Arg&&() && { return std::move(arg_); }$/;"	f	class:madness::detail::ArgHolder
operator GenTensor<Q>	src/madness/tensor/gentensor.h	/^        template <class Q> operator GenTensor<Q>() const { \/\/ type conv => deep copy$/;"	f	class:madness::GenTensor
operator LowRankTensor<Q>	src/madness/tensor/lowranktensor.h	/^    template <class Q> operator LowRankTensor<Q>() const { \/\/ type conv => deep copy$/;"	f	class:madness::LowRankTensor
operator LowRankTensor<T>	src/madness/tensor/gentensor.h	/^    operator LowRankTensor<T>() const {return *this;}$/;"	f	class:madness::GenTensor
operator LowRankTensor<T>	src/madness/tensor/gentensor.h	/^    operator LowRankTensor<T>() {return *this;}$/;"	f	class:madness::GenTensor
operator MPI_Request	src/madness/world/safempi.h	/^        operator MPI_Request() const { return request_; }$/;"	f	class:SafeMPI::Request
operator MPI_Request*	src/madness/world/safempi.h	/^        operator MPI_Request*() { return &request_; }$/;"	f	class:SafeMPI::Request
operator MPI_Status	src/madness/world/safempi.h	/^        operator MPI_Status() const { return status_; }$/;"	f	class:SafeMPI::Status
operator MPI_Status*	src/madness/world/safempi.h	/^        operator MPI_Status*() { return &status_; }$/;"	f	class:SafeMPI::Status
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder10
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> >	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder9
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> >	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7,$/;"	f	class:testing::internal::CartesianProductHolder8
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> >	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6,$/;"	f	class:testing::internal::CartesianProductHolder7
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >() const {$/;"	f	class:testing::internal::CartesianProductHolder6
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >() const {$/;"	f	class:testing::internal::CartesianProductHolder5
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >() const {$/;"	f	class:testing::internal::CartesianProductHolder4
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >() const {$/;"	f	class:testing::internal::CartesianProductHolder3
operator ParamGenerator< ::std::tr1::tuple<T1, T2> >	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2> >() const {$/;"	f	class:testing::internal::CartesianProductHolder2
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const { return ValuesIn(&v1_, &v1_ + 1); }$/;"	f	class:testing::internal::ValueArray1
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray10
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray11
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray12
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray13
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray14
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray15
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray16
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray17
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray18
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray19
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray2
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray20
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray21
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray22
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray23
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray24
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray25
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray26
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray27
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray28
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray29
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray3
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray30
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray31
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray32
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray33
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray34
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray35
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray36
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray37
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray38
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray39
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray4
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray40
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray41
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray42
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray43
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray44
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray45
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray46
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray47
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray48
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray49
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray5
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray50
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray6
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray7
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray8
operator ParamGenerator<T>	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray9
operator SliceLowRankTensor<T>	src/madness/tensor/gentensor.h	/^    operator SliceLowRankTensor<T>() const {return *this;}$/;"	f	class:madness::SliceGenTensor
operator SliceLowRankTensor<T>	src/madness/tensor/gentensor.h	/^    operator SliceLowRankTensor<T>() {return *this;}$/;"	f	class:madness::SliceGenTensor
operator T&	src/madness/world/future.h	/^        inline operator T&() & {$/;"	f	class:madness::Future
operator T&&	src/madness/world/future.h	/^        inline explicit operator T&&() & {$/;"	f	class:madness::Future
operator T&&	src/madness/world/future.h	/^        inline explicit operator T&&() && {$/;"	f	class:madness::Future
operator Tensor<Q>	src/madness/tensor/tensor.h	/^        template <class Q> operator Tensor<Q>() const { \/\/ type conv => deep copy$/;"	f	class:madness::Tensor
operator TensorTrain<Q>	src/madness/tensor/tensortrain.h	/^        template <class Q> operator TensorTrain<Q>() const { \/\/ type conv => deep copy$/;"	f	class:madness::TensorTrain
operator []	src/apps/adrian/ResponseFunction2.h	/^  std::vector<Function<double, 3>>& operator[](long i) { return x[i]; }$/;"	f	class:madness::ResponseFunction
operator []	src/apps/adrian/polynomial.h	/^  double &operator[] (const std::array<unsigned, 3> &pows) {$/;"	f	class:slymer::PolynomialCoeffs
operator []	src/apps/adrian/polynomial.h	/^  double operator[] (const std::array<unsigned, 3> &pows) const {$/;"	f	class:slymer::PolynomialCoeffs
operator []	src/apps/bryan/ResponseFunction2.h	/^      std::vector<Function<double,3>>& operator[] (long i) {$/;"	f	class:madness::ResponseFunction
operator []	src/apps/bryan/polynomial.h	/^  double &operator[] (const std::array<unsigned, 3> &pows) {$/;"	f	class:slymer::PolynomialCoeffs
operator []	src/apps/bryan/polynomial.h	/^  double operator[] (const std::array<unsigned, 3> &pows) const {$/;"	f	class:slymer::PolynomialCoeffs
operator []	src/examples/compiler/mra-driver.hh	/^    Exp* operator[](int i) const {$/;"	f	class:Exp
operator []	src/madness/external/muParser/muParserError.cpp	/^  string_type ParserErrorMsg::operator[](unsigned a_iIdx) const$/;"	f	class:mu::ParserErrorMsg
operator []	src/madness/external/tinyxml/tinystr.h	/^	char& operator [] (size_type index) const$/;"	f	class:TiXmlString
operator []	src/madness/mra/indexit.h	/^        operator[](int d) const {$/;"	f	class:madness::IndexIterator
operator []	src/madness/tensor/tensor.h	/^        T& operator[](long i) {$/;"	f	class:madness::Tensor
operator []	src/madness/tensor/tensor.h	/^        const T& operator[](long i) const {$/;"	f	class:madness::Tensor
operator []	src/madness/world/vector.h	/^        const_reference operator[](size_type i) const { return data_[i]; }$/;"	f	class:madness::Vector
operator []	src/madness/world/vector.h	/^        reference operator[](size_type i) { return data_[i]; }$/;"	f	class:madness::Vector
operator []	src/madness/world/worldhashmap.h	/^        valueT& operator[](const keyT& key) {$/;"	f	class:madness::ConcurrentHashMap
operator _my_auto_ptr<_Other>	src/madness/external/muParser/muParserFixes.h	/^    operator _my_auto_ptr<_Other>()$/;"	f	class:std::_my_auto_ptr
operator bool	src/apps/chem/PNOStructures.h	/^	operator bool() const {$/;"	f	struct:madness::ElectronPairIterator
operator bool	src/apps/chem/PNOStructures.h	/^	operator bool() const{ return !finished_;}$/;"	f	struct:madness::OrbitalIterator
operator bool	src/madness/external/gtest/include/gtest/gtest.h	/^  operator bool() const { return success_; }  \/\/ NOLINT$/;"	f	class:testing::AssertionResult
operator bool	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  operator bool() const { return true; }$/;"	f	struct:testing::internal::ConstCharPtr
operator bool	src/madness/mra/indexit.h	/^        operator bool() const {$/;"	f	class:madness::IndexIterator
operator bool	src/madness/mra/key.h	/^        operator bool() const {$/;"	f	class:madness::KeyChildIterator
operator bool	src/madness/world/test_tree.cc	/^    operator bool() const {$/;"	f	class:KeyChildIterator
operator bool	src/madness/world/uniqueid.h	/^        operator bool() const {$/;"	f	class:madness::uniqueidT
operator bool	src/madness/world/worldptr.h	/^            operator bool () const {$/;"	f	class:madness::detail::WorldPtr
operator bool	src/madness/world/worldref.h	/^        operator bool() const {$/;"	f	class:madness::RemoteReference
operator const Arg&	src/madness/world/taskfn.h	/^            operator const Arg&() const& { return arg_; }$/;"	f	class:madness::detail::ArgHolder
operator const T&	src/madness/world/future.h	/^        inline operator const T&() const& {$/;"	f	class:madness::Future
operator const vectorT&	src/madness/world/future.h	/^        operator const vectorT& () const {$/;"	f	class:madness::Future
operator delete	src/madness/world/worldmem.cc	/^void operator delete(void *p) throw() {$/;"	f
operator double	src/apps/nick/mpreal.h	/^inline mpreal::operator double() const$/;"	f	class:mpfr::mpreal
operator float	src/apps/nick/mpreal.h	/^inline mpreal::operator float() const$/;"	f	class:mpfr::mpreal
operator int	src/madness/world/atomicint.h	/^        operator int() const volatile {$/;"	f	class:madness::AtomicInt
operator long	src/apps/nick/mpreal.h	/^inline mpreal::operator long() const$/;"	f	class:mpfr::mpreal
operator long double	src/apps/nick/mpreal.h	/^inline mpreal::operator long double() const$/;"	f	class:mpfr::mpreal
operator mpfr_ptr	src/apps/nick/mpreal.h	/^inline mpreal::operator mpfr_ptr()$/;"	f	class:mpfr::mpreal
operator new	src/madness/world/thread.h	/^        static inline void * operator new(std::size_t size) {$/;"	f	class:madness::PoolTaskInterface
operator new	src/madness/world/worldmem.cc	/^void* operator new(size_t size) throw (std::bad_alloc) {$/;"	f
operator std::array<T,N>	src/madness/world/vector.h	/^        operator std::array<T,N> () { return data_; }$/;"	f	class:madness::Vector
operator std::string	src/apps/nick/mpreal.h	/^inline mpreal::operator std::string() const$/;"	f	class:mpfr::mpreal
operator unsigned int	src/apps/nick/mpreal.h	/^inline mpreal::operator unsigned int() const$/;"	f	class:mpfr::mpreal
operator unsigned long	src/apps/nick/mpreal.h	/^inline mpreal::operator unsigned long() const$/;"	f	class:mpfr::mpreal
operator vectorT&	src/madness/world/future.h	/^        operator vectorT& () {$/;"	f	class:madness::Future
operatorT	src/apps/chem/SCF.h	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	namespace:madness
operatorT	src/apps/hf/eigsolver.h	/^  typedef SeparatedConvolution<double,NDIM> operatorT;$/;"	t	class:madness::EigSolver
operatorT	src/apps/hf/esolver.h	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t
operatorT	src/apps/hf/solver.h	/^    typedef SeparatedConvolution<T,3> operatorT;$/;"	t	class:madness::Solver
operatorT	src/apps/moldft/mcpfit.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/apps/moldft/testcosine.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/apps/moldft/testperiodic.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/apps/nick/tdse1.cc	/^typedef SeparatedConvolution<double,NDIM> operatorT;$/;"	t	file:
operatorT	src/apps/polar/mcpfit.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/apps/polar/moldft.cc	/^typedef SeparatedConvolution<double, 3> operatorT;$/;"	t	file:
operatorT	src/apps/polar/preal.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/apps/polar/testperiodic.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/apps/tdse/tdse.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/apps/tdse/tdse.confused.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/apps/tdse/tdse4.cc	/^typedef SeparatedConvolution<double,4> operatorT;$/;"	t	file:
operatorT	src/examples/csqrt.cc	/^typedef SeparatedConvolution<std::complex<double>,1> operatorT;$/;"	t	file:
operatorT	src/examples/h2dft.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/examples/heat.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/examples/hedft.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/examples/hefxc.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/examples/newsolver_lda.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/examples/tdse_example.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/examples/vnucso.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operatorT	src/madness/mra/testbc.cc	/^typedef SeparatedConvolution<double,3> operatorT;$/;"	t	file:
operator_type	src/apps/chem/CCStructures.h	/^    const OpType operator_type;$/;"	m	struct:madness::CCConvolutionOperator
operators_	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<pg_operator> operators_;		\/\/\/< symmetry operators$/;"	m	struct:madness::charactertable
operatortype	src/madness/mra/function_factory.h	/^    enum operatortype {coulomb_, slater_, f12_, bsh_};$/;"	g	class:madness::TwoElectronFactory
ops	src/apps/moldft/pointgroup.h	/^    std::string ops[8];         \/\/\/< Names of the operators$/;"	m	class:PointGroup
ops	src/apps/polar/pointgroup.h	/^    std::string ops[8];         \/\/< Names of the operators$/;"	m	class:PointGroup
ops	src/madness/mra/convolution1d.h	/^        std::array<std::shared_ptr<Convolution1D<Q> >, NDIM> ops;$/;"	m	class:madness::ConvolutionND
ops	src/madness/mra/function_interface.h	/^		mutable std::vector< ConvolutionND<double,6> > ops;$/;"	m	class:madness::TwoElectronInterface
ops	src/madness/mra/operator.h	/^        const ConvolutionData1D<Q>* ops[NDIM];$/;"	m	struct:madness::SeparatedConvolutionInternal
ops	src/madness/mra/operator.h	/^        mutable std::vector< ConvolutionND<Q,NDIM> > ops;   \/\/\/< ConvolutionND keeps data for 1 term, all dimensions, 1 displacement$/;"	m	class:madness::SeparatedConvolution
opt	src/madness/mra/minmax/y.cc	/^vector<FLOAT> opt(const vector<FLOAT>& x, const vector<FLOAT>& f, const vector<FLOAT>& w, const vector<FLOAT>& guess, int maxiter)$/;"	f
opt	src/madness/mra/minmax/y1.cc	/^vector<FLOAT> opt(const vector<FLOAT>& x, const vector<FLOAT>& f, const vector<FLOAT>& w, const vector<FLOAT>& guess, int maxiter)$/;"	f
opt	src/madness/mra/minmax/y_signed.cc	/^vector<FLOAT> opt(const vector<FLOAT>& x, const vector<FLOAT>& f, const vector<FLOAT>& w, const vector<FLOAT>& guess, int maxiter, bool conly=false)$/;"	f
opt	src/madness/mra/minmax/y_varx.cc	/^vector<FLOAT> opt(const vector<FLOAT>& x, const vector<FLOAT>& f, const vector<FLOAT>& w, const vector<FLOAT>& guess, int maxiter)$/;"	f
optimize	src/apps/chem/molecular_optimizer.h	/^    bool optimize(Tensor<double>& x) {$/;"	f	class:madness::MolecularOptimizer
optimize	src/apps/chem/molopt.h	/^        void optimize(Molecule molecule, targetT& target) { \/\/\/\/!!!!!!! pass by value$/;"	f	class:madness::MolOpt
optimize	src/apps/moldft/mcpfit.cc	/^    bool optimize(Tensor<double>& x)$/;"	f	class:MySteepestDescent
optimize	src/apps/polar/mcpfit.cc	/^    bool optimize(Tensor<double>& x)$/;"	f	class:MySteepestDescent
optimize	src/madness/tensor/kain.cc	/^    bool optimize(Tensor<double>& x) {$/;"	f	class:QuasiNewton
optimize	src/madness/tensor/kain.cc	/^    bool optimize(Tensor<double>& x) {$/;"	f	class:SteepestDescent
optimize	src/madness/tensor/solvers.cc	/^    bool QuasiNewton::optimize(Tensor<double>& x) {$/;"	f	class:madness::QuasiNewton
optimize	src/madness/tensor/solvers.cc	/^    bool SteepestDescent::optimize(Tensor<double>& x) {$/;"	f	class:madness::SteepestDescent
optimize_coeffs	src/madness/tensor/gfit.cc	/^Tensor<double> optimize_coeffs(const Tensor<double>& f,$/;"	f
optimize_conjugate_gradients	src/apps/chem/molecular_optimizer.h	/^    bool optimize_conjugate_gradients(Tensor<double>& x) {$/;"	f	class:madness::MolecularOptimizer
optimize_quasi_newton	src/apps/chem/molecular_optimizer.h	/^    bool optimize_quasi_newton(Tensor<double>& x) {$/;"	f	class:madness::MolecularOptimizer
optionalArgs_	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    std::vector<OptionalArg> optionalArgs_;$/;"	m	class:elem::choice::Args
optionalArgs_	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    std::vector<OptionalArg> optionalArgs_;$/;"	m	class:elem::choice::MpiArgs
orbital	src/apps/chem/corepotential.h	/^    std::vector<CoreOrbital> orbital;$/;"	m	struct:madness::AtomCore
orbital	src/apps/chem/mp2.h	/^        real_function_3d orbital(const int i) const {$/;"	f	class:madness::HartreeFock
orbital	src/apps/polar/corepotential.h	/^    std::vector<CoreOrbital> orbital;$/;"	m	struct:AtomCore
orbital_energies_	src/apps/chem/CCPotentials.h	/^    std::vector<double> orbital_energies_;$/;"	m	class:madness::CCPotentials
orbital_energy	src/apps/chem/mp2.h	/^        double orbital_energy(const int i) const {$/;"	f	class:madness::HartreeFock
orbitals	src/apps/adrian/GroundParameters.h	/^      std::vector<real_function_3d> orbitals;  \/\/\/< The ground state orbitals $/;"	m	struct:madness::GroundParameters
orbitals	src/apps/bryan/GroundParameters.h	/^      std::vector<real_function_3d> orbitals;  \/\/\/< The ground state orbitals $/;"	m	struct:madness::GroundParameters
orbitals	src/apps/chem/mp2.h	/^        std::vector<real_function_3d> orbitals() const {$/;"	f	class:madness::HartreeFock
orbitals_	src/apps/chem/mp2.h	/^        std::vector<real_function_3d> orbitals_;$/;"	m	class:madness::HartreeFock
orbitalshift	src/apps/chem/CalculationParameters.h	/^	double orbitalshift() const {return get<double>("orbitalshift");}$/;"	f	struct:madness::CalculationParameters
orbsyms	src/apps/moldft/fci/fci.F	/^      integer lenwrk, iwork, iv, lwork, iroot, orbsyms(/;"	v	program:fci
order	src/apps/moldft/fci/yacobi.F	/^      subroutine order(/;"	s
order	src/apps/moldft/pointgroup.h	/^    int order;                  \/\/\/< group order$/;"	m	class:PointGroup
order	src/apps/polar/pointgroup.h	/^    int order;                  \/\/< group order$/;"	m	class:PointGroup
order	src/madness/external/elemental/include/elemental/lapack-like/condense/decl.hpp	/^    GridOrder order;$/;"	m	struct:elem::HermitianTridiagCtrl
order_	src/apps/chem/pointgroupsymmetry.h	/^	int order_;									\/\/\/< order of the point group$/;"	m	struct:madness::charactertable
order_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    GridOrder order_;$/;"	m	class:elem::Grid
orgqr	src/madness/tensor/lapack.cc	/^    void orgqr(Tensor<T>& A, const Tensor<T>& tau) {$/;"	f	namespace:madness
orient	src/apps/chem/molecule.cc	/^void Molecule::orient(bool verbose)$/;"	f	class:madness::Molecule
orient	src/apps/polar/molecule.cc	/^void Molecule::orient() {$/;"	f	class:Molecule
origin	src/apps/adrian/TDDFT.h	/^  coordT origin;$/;"	m	class:GaussianGuess
origin	src/apps/adrian/TDHF.h	/^    coordT origin;$/;"	m	class:GaussianGuess
origin	src/apps/adrian/TDHF2.h	/^    coordT origin;$/;"	m	class:GaussianGuess
origin	src/apps/adrian/test_ResponseFunction.cc	/^    coordT origin;$/;"	m	class:GaussianGuess	file:
origin	src/apps/bryan/TDHF.h	/^    coordT origin;$/;"	m	class:GaussianGuess
origin	src/apps/bryan/TDHF2.h	/^    coordT origin;$/;"	m	class:GaussianGuess
origin	src/apps/bryan/test_ResponseFunction.cc	/^    coordT origin;$/;"	m	class:GaussianGuess	file:
origin	src/apps/chem/GuessFactory.h	/^    const coord_3d origin;$/;"	m	class:madness::guessfactory::PlaneWaveFunctor
origin	src/apps/chem/test_SCFOperators.cc	/^    coordT origin;$/;"	m	class:GaussianGuess	file:
origin	src/apps/chem/znemo.h	/^		coord_3d origin={0.0,0.0,0.0};$/;"	m	struct:madness::Znemo::landau_wave_function
origin	src/apps/chem/znemo.h	/^		coord_3d origin={0.0,0.0,0.0};$/;"	m	struct:madness::Znemo::p_orbital
origin	src/apps/chem/znemo.h	/^		coord_3d origin={0.0,0.0,0.0};$/;"	m	struct:madness::Znemo::s_orbital
original_reporter_	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  TestPartResultReporterInterface* original_reporter_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
original_working_dir	src/madness/external/gtest/src/gtest.cc	/^const char* UnitTest::original_working_dir() const {$/;"	f	class:testing::UnitTest
original_working_dir_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::FilePath original_working_dir_;$/;"	m	class:testing::internal::UnitTestImpl
orth	src/apps/moldft/testperiodic.cc	/^vector_complex_function_3d orth(World& world, const vector_complex_function_3d& v, double thresh = 1.e-10) {$/;"	f
ortho3	src/madness/tensor/srconf.h	/^	void ortho3(Tensor<T>& x, Tensor<T>& y, Tensor<double>& weights, const double& thresh) {$/;"	f	namespace:madness
ortho5	src/madness/tensor/srconf.h	/^	void ortho5(Tensor<T>& x1, Tensor<T>& y1, Tensor<double>& w1,$/;"	f	namespace:madness
orthogonalize	src/apps/moldft/preal.cc	/^    void orthogonalize(World& world, std::vector<Function<Q,3> >& psi) {$/;"	f	class:MiniDFT
orthogonalize	src/apps/moldft/testcosine.cc	/^void orthogonalize(World& world, vector_complex_function_3d& psi) {$/;"	f
orthogonalize	src/apps/moldft/testperiodic.cc	/^void orthogonalize(World& world, vector_complex_function_3d& psi) {$/;"	f
orthogonalize	src/apps/polar/preal.cc	/^void orthogonalize(World& world, vector_real_function_3d& psi) {$/;"	f
orthogonalize	src/apps/polar/testperiodic.cc	/^void orthogonalize(World& world, vector_complex_function_3d& psi) {$/;"	f
orthogonalize_response	src/apps/chem/SCF.cc	/^void SCF::orthogonalize_response(World &world, vecfuncT &dmo, vecfuncT &mo)$/;"	f	class:madness::SCF
orthogonalize_response	src/apps/polar/moldft.cc	/^void orthogonalize_response(vecfuncT &dmo, int flag)$/;"	f	struct:Calculation
orthonormalize	src/apps/chem/SCF.cc	/^void SCF::orthonormalize(World &world, vecfuncT &amo_new) const$/;"	f	class:madness::SCF
orthonormalize	src/apps/chem/SCF.cc	/^void SCF::orthonormalize(World &world, vecfuncT &amo_new, int nocc) const$/;"	f	class:madness::SCF
orthonormalize	src/apps/chem/TDHF.cc	/^void TDHF::orthonormalize(std::vector<CC_vecfunction> &x,std::vector<vector_real_function_3d> &V)const{$/;"	f	class:madness::TDHF
orthonormalize	src/apps/chem/nemo.h	/^	void orthonormalize(std::vector<Function<T,NDIM> >& nemo,$/;"	f	class:madness::NemoBase
orthonormalize	src/apps/chem/zcis.cc	/^void Zcis::orthonormalize(std::vector<root>& roots) const {$/;"	f	class:madness::Zcis
orthonormalize	src/apps/chem/zcis.cc	/^void Zcis::orthonormalize(std::vector<root>& roots, const Tensor<double_complex>& fock_pt) const {$/;"	f	class:madness::Zcis
orthonormalize	src/apps/chem/znemo.cc	/^std::vector<complex_function_3d> Znemo::orthonormalize(const std::vector<complex_function_3d>& mo) const {$/;"	f	class:madness::Znemo
orthonormalize	src/apps/hf/solver.h	/^    void orthonormalize(vecfuncT& wf, KPoint kpoint)$/;"	f	class:madness::Solver
orthonormalize	src/madness/tensor/srconf.h	/^		void orthonormalize(const double& thresh) {$/;"	f	class:madness::SRConf
orthonormalize_canonical	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> orthonormalize_canonical($/;"	f	namespace:madness
orthonormalize_cd	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> orthonormalize_cd($/;"	f	namespace:madness
orthonormalize_cholesky	src/apps/chem/PNO.cpp	/^PNOPairs PNO::orthonormalize_cholesky(PNOPairs& pairs) const {$/;"	f	class:madness::PNO
orthonormalize_irreps_	src/apps/chem/pointgroupsymmetry.h	/^	bool orthonormalize_irreps_=true;$/;"	m	class:madness::projector_irrep
orthonormalize_rrcd	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> orthonormalize_rrcd($/;"	f	namespace:madness
orthonormalize_symmetric	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> orthonormalize_symmetric($/;"	f	namespace:madness
orthonormalize_wavelets	src/madness/mra/tools/twoscalecoeffs.py	/^def orthonormalize_wavelets(g0,g1,k):$/;"	f
os	src/apps/chem/CCStructures.h	/^    std::ostream& os;$/;"	m	struct:madness::CCMessenger
os	src/apps/nick/extract.py	/^import sys, re, os, os.path$/;"	i
os	src/apps/nick/parse.py	/^import sys, string, re, array, os$/;"	i
os	src/madness/tensor/mtxmq_graveyard/new_mtxmq/tests/testDocStrings.py	/^import os$/;"	i
os	src/madness/world/binary_fstream_archive.h	/^            mutable std::ofstream os; \/\/\/< The filestream.$/;"	m	class:madness::archive::BinaryFstreamOutputArchive
os	src/madness/world/text_fstream_archive.h	/^            mutable std::ofstream os; \/\/\/< The filestream.$/;"	m	class:madness::archive::TextFstreamOutputArchive
os	src/madness/world/threadbind	/^import sys,os,subprocess$/;"	i
os_stack_trace_getter	src/madness/external/gtest/src/gtest.cc	/^OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {$/;"	f	class:testing::internal::UnitTestImpl
os_stack_trace_getter_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  OsStackTraceGetterInterface* os_stack_trace_getter_;$/;"	m	class:testing::internal::UnitTestImpl
oscillator_strength_length	src/apps/chem/TDHF.cc	/^double TDHF::oscillator_strength_length(const CC_vecfunction& x) const {$/;"	f	class:madness::TDHF
oscillator_strength_velocity	src/apps/chem/TDHF.cc	/^double TDHF::oscillator_strength_velocity(const CC_vecfunction& x) const {$/;"	f	class:madness::TDHF
other	src/apps/chem/projector.h	/^        QProjector(const QProjector& other) = default;$/;"	m	class:madness::QProjector
other	src/madness/mra/funcimpl.h	/^            FunctionImpl<Q,NDIM>* other;$/;"	m	struct:madness::FunctionImpl::do_merge_trees
other	src/madness/mra/funcimpl.h	/^            const FunctionImpl<R,NDIM>* other;$/;"	m	struct:madness::FunctionImpl::do_inner_local
other_truncate	src/madness/mra/tools/longfloat.py	/^    def other_truncate(self, nbits=None):$/;"	m	class:longfloat
out	src/apps/moldft/parsemad.py	/^out = csv.writer(outf)$/;"	v
out	src/madness/world/thread.h	/^            void* out; \/\/\/< \\todo Description needed.$/;"	m	union:madness::PoolTaskInterface::FunctionPointerGrabber
outcome	src/madness/external/gtest/src/gtest-death-test.cc	/^  DeathTestOutcome outcome() const { return outcome_; }$/;"	f	class:testing::internal::DeathTestImpl
outcome_	src/madness/external/gtest/src/gtest-death-test.cc	/^  DeathTestOutcome outcome_;$/;"	m	class:testing::internal::DeathTestImpl	file:
outer	src/madness/tensor/gentensor.h	/^     GenTensor<T> outer(const Tensor<T>& left, const Tensor<T>& right,$/;"	f	namespace:madness
outer	src/madness/tensor/gentensor.h	/^    GenTensor<T> outer(const GenTensor<T>& left, const GenTensor<T>& right,$/;"	f	namespace:madness
outer	src/madness/tensor/gentensor.h	/^ GenTensor<TENSOR_RESULT_TYPE(T,Q)> outer(const GenTensor<T>& lhs2,$/;"	f	namespace:madness
outer	src/madness/tensor/gentensor.h	/^ GenTensor<TENSOR_RESULT_TYPE(T,Q)> outer(const Tensor<T>& lhs2,$/;"	f	namespace:madness
outer	src/madness/tensor/lowranktensor.h	/^LowRankTensor<TENSOR_RESULT_TYPE(T,Q)> outer(const LowRankTensor<T>& t1,$/;"	f	namespace:madness
outer	src/madness/tensor/tensor.h	/^    Tensor<T> outer(const Tensor<T>& left, const Tensor<T>& right) {$/;"	f	namespace:madness
outer	src/madness/tensor/tensortrain.h	/^    TensorTrain<TENSOR_RESULT_TYPE(T,Q)> outer(const TensorTrain<T>& t1,$/;"	f	namespace:madness
outf	src/apps/moldft/parsemad.py	/^outf = open('out.csv', 'w')$/;"	v
output	src/apps/chem/CC2.h	/^    CCMessenger& output;$/;"	m	class:madness::CC2
output	src/apps/chem/CCPotentials.h	/^    CCMessenger output;$/;"	m	class:madness::CCPotentials
output	src/apps/chem/CCStructures.cc	/^  CCMessenger::output(const std::string& msg) const {$/;"	f	class:madness::CCMessenger
output	src/apps/chem/CCStructures.h	/^    void output(const std::string &msg)const{if(world.rank()==0 and parameters.debug) std::cout << "Intermediate Potential Manager: " << msg << "\\n";}$/;"	f	struct:madness::CCIntermediatePotentials
output	src/apps/chem/test_correlation_factor.h	/^	void output(const std::string &msg)const{$/;"	f	struct:test_correlation_factor
output	src/examples/smooth.h	/^	void output(const std::string &msg)const{$/;"	f	class:smooth
output_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::string output_;$/;"	m	class:testing::internal::GTestFlagSaver
output_file_	src/madness/external/gtest/src/gtest.cc	/^  const std::string output_file_;$/;"	m	class:testing::internal::XmlUnitTestResultPrinter	file:
output_file_name_	src/madness/world/thread.cc	/^    const char* profiling::TaskProfiler::output_file_name_;$/;"	m	class:madness::profiling::TaskProfiler	file:
output_file_name_	src/madness/world/thread.h	/^            static const char* output_file_name_;$/;"	m	class:madness::profiling::TaskProfiler
output_filename	src/madness/mra/mraplot.cc	/^    std::string output_filename;     \/\/ output file name for plot data$/;"	m	class:Plotter	file:
output_format	src/madness/mra/mraplot.cc	/^    std::string output_format;       \/\/ output format for volume data (presently only dx)$/;"	m	class:Plotter	file:
output_mutex_	src/madness/world/thread.cc	/^    Mutex profiling::TaskProfiler::output_mutex_;$/;"	m	class:madness::profiling::TaskProfiler	file:
output_mutex_	src/madness/world/thread.h	/^            static Mutex output_mutex_; \/\/\/< Mutex used to lock the output file.$/;"	m	class:madness::profiling::TaskProfiler
output_prec	src/apps/chem/CCStructures.h	/^    double output_prec=1.e-8;$/;"	m	struct:madness::CCParameters
output_prec	src/apps/chem/CCStructures.h	/^    size_t output_prec;$/;"	m	struct:madness::CCMessenger
overhead	src/madness/world/worldmem.h	/^        static const unsigned long overhead = 4*sizeof(long) + 16;$/;"	m	class:madness::WorldMemInfo
overlap	src/apps/chem/CCPotentials.cc	/^  CCPotentials::overlap(const CCPair& x) const {$/;"	f	class:madness::CCPotentials
overlap	src/apps/chem/CCPotentials.cc	/^  CCPotentials::overlap(const CCPairFunction& f1,const CCPairFunction& f2) const {$/;"	f	class:madness::CCPotentials
overlap	src/apps/nick/parse.py	/^overlap = []$/;"	v
overlap	src/madness/tensor/srconf.h	/^		friend  overlap(const SRConf<T>& rhs, const SRConf<Q>& lhs) {$/;"	f	class:madness::SRConf::std::enable_if
overlapFile	src/apps/nick/parse.py	/^overlapFile= open("overlap.dat",   'w')$/;"	v
override	src/apps/adrian/NWChem.h	/^  virtual void read(Properties::Properties props) override;$/;"	m	class:slymer::NWChem_Interface
override	src/apps/adrian/gaussian.h	/^  virtual double operator() (const std::array<double, 3> &x) const override;$/;"	m	class:slymer::GaussianFunction
override	src/apps/bryan/NWChem.h	/^  virtual void read(Properties::Properties props) override;$/;"	m	class:slymer::NWChem_Interface
override	src/apps/bryan/gaussian.h	/^  virtual double operator() (const std::array<double, 3> &x) const override;$/;"	m	class:slymer::GaussianFunction
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    ( const elem::BlockDistData& data, bool constrain=true ) override;$/;"	m	class:elem::GeneralBlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    Int PartialRowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    Int PartialUnionRowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    mpi::Comm PartialRowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    mpi::Comm PartialUnionRowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    Int PartialRowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    Int PartialUnionRowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    mpi::Comm PartialRowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    mpi::Comm PartialUnionRowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    Int PartialColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    Int PartialUnionColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    mpi::Comm PartialColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    mpi::Comm PartialUnionColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    Int PartialColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    Int PartialUnionColStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    elem::BlockDistData DistData() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    mpi::Comm PartialColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    mpi::Comm PartialUnionColComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::BlockDistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    ( const elem::DistData& data, bool constrain=true ) override;$/;"	m	class:elem::GeneralDistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    Int PartialRowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    Int PartialUnionRowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    mpi::Comm PartialRowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    mpi::Comm PartialUnionRowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    Int PartialRowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    Int PartialUnionRowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    mpi::Comm PartialRowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    mpi::Comm PartialUnionRowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    Int PartialColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    Int PartialUnionColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    mpi::Comm PartialColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    mpi::Comm PartialUnionColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    Int ColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    Int CrossSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    Int DistSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    Int PartialColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    Int PartialUnionColStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    Int RedundantSize() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    Int RowStride() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    elem::DistData DistData() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    mpi::Comm ColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    mpi::Comm CrossComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    mpi::Comm DistComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    mpi::Comm PartialColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    mpi::Comm PartialUnionColComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    mpi::Comm RedundantComm() const override;$/;"	m	class:elem::DistMatrix
override	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    mpi::Comm RowComm() const override;$/;"	m	class:elem::DistMatrix
overwrite_if_inf	src/apps/chem/QCCalculationParametersBase.h	/^	overwrite_if_inf(std::string& str, const T& arg) {$/;"	f	class:madness::QCCalculationParametersBase
own_mpi	src/madness/world/worldmpi.cc	/^        bool WorldMpi::own_mpi = false;$/;"	m	class:madness::detail::WorldMpi	file:
own_mpi	src/madness/world/worldmpi.h	/^            static bool own_mpi; \/\/\/< \\todo Brief description needed.$/;"	m	class:madness::detail::WorldMpi
owner	src/apps/hf/electronicstructureapp.h	/^    ProcessID owner(const Key<3>& key) const {$/;"	f	class:LevelPmap
owner	src/apps/hf/test_comm.cc	/^    ProcessID owner(size_t i) const {return i\/v.size();};$/;"	f	class:Array
owner	src/apps/hf/testconv.cc	/^    ProcessID owner(size_t i) const {return i\/v.size();};$/;"	f	class:Array
owner	src/apps/nick/extra.h	/^    ProcessID owner(const Key<3>& key) const {$/;"	f	class:LevelPmap
owner	src/apps/nick/tdse1.cc	/^    ProcessID owner(const Key<NDIM>& key) const {$/;"	f	class:LevelPmap
owner	src/apps/tdse/tdse.confused.cc	/^    ProcessID owner(const Key<3>& key) const {$/;"	f	class:LevelPmap
owner	src/examples/array_worldobject.cc	/^    ProcessID owner(size_t i) const {return i\/v.size();};$/;"	f	class:Array
owner	src/madness/mra/funcimpl.h	/^        ProcessID owner(const keyT& key) const {$/;"	f	class:madness::LevelPmap
owner	src/madness/mra/funcimpl.h	/^        ProcessID owner(const keyT& key) const {$/;"	f	class:madness::SimplePmap
owner	src/madness/mra/lbdeux.h	/^        ProcessID owner(const keyT& key) const {$/;"	f	class:madness::LBDeuxPmap
owner	src/madness/mra/mypmap.h	/^        ProcessID owner(const KeyD& key) const {$/;"	f	class:madness::MyPmap
owner	src/madness/tensor/distributed_matrix.h	/^        ProcessID owner(int64_t i, int64_t j) const {$/;"	f	class:madness::DistributedMatrixDistribution
owner	src/madness/world/safempi.h	/^            bool owner;$/;"	m	struct:SafeMPI::Intracomm::Impl
owner	src/madness/world/test_dc.cc	/^    ProcessID owner(const int& key) const {$/;"	f	class:TestPmap
owner	src/madness/world/test_future2.cc	/^    ProcessID owner(size_t i) const {$/;"	f	class:Array
owner	src/madness/world/worlddc.h	/^        ProcessID owner(const keyT& key) const {$/;"	f	class:madness::WorldContainerImpl
owner	src/madness/world/worlddc.h	/^        ProcessID owner(const keyT& key) const {$/;"	f	class:madness::WorldDCDefaultPmap
owner	src/madness/world/worlddc.h	/^        inline ProcessID owner(const keyT& key) const {$/;"	f	class:madness::WorldContainer
owner	src/madness/world/worldptr.h	/^            ProcessID owner() const {$/;"	f	class:madness::detail::WorldPtr
owner	src/madness/world/worldref.h	/^            ProcessID owner() const { return pimpl_.owner(); }$/;"	f	class:madness::detail::RemoteCounter
owner	src/madness/world/worldref.h	/^        inline ProcessID owner() const { return counter_.owner(); }$/;"	f	class:madness::RemoteReference
owner_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  pthread_t owner_;  \/\/ The thread holding the mutex.$/;"	m	class:testing::internal::MutexBase
owningComm_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    mpi::Comm owningComm_;$/;"	m	class:elem::Grid
owningGroup_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    mpi::Group owningGroup_;$/;"	m	class:elem::Grid
p	src/apps/polar/moldft.cc	/^    const std::vector<Function<T, NDIM>> &p() const { return p_; }$/;"	f	class:Projector
p	src/examples/derivatives.cc	/^char* p(char* buf, const char* name, int k, int initial_level, double thresh, int order) {$/;"	f
p	src/examples/spectralprop.h	/^        double p(int i, double t) {$/;"	f	class:madness::SpectralPropagator
p	src/examples/spectralprop.h	/^        double p(int i, double t) {$/;"	f	class:madness::SpectralPropagatorGaussLobatto
p	src/examples/test_derivative.cc	/^      const double p;$/;"	m	class:G	file:
p	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        p;$/;"	m	struct:__anon17
p	src/madness/mra/key.h	/^        Vector<Translation, NDIM> p;$/;"	m	class:madness::KeyChildIterator
p	src/madness/mra/minmax/y.cc	/^    const vector<FLOAT>& p;$/;"	m	class:Func	file:
p	src/madness/mra/minmax/y1.cc	/^    const vector<FLOAT>& p;$/;"	m	class:Func	file:
p	src/madness/mra/minmax/y_signed.cc	/^    const vector<FLOAT>& p;$/;"	m	class:Func	file:
p	src/madness/mra/minmax/y_varx.cc	/^    const vector<FLOAT>& p;$/;"	m	class:Func	file:
p	src/madness/tensor/gfit.cc	/^    const double p;$/;"	m	class:Fred	file:
p	src/madness/tensor/tensor.h	/^            T* volatile p;$/;"	m	class:madness::detail::SharedAlignedArray
p	src/madness/world/taskfn.h	/^            PoolTaskInterface* p;$/;"	m	struct:madness::TaskInterface::Submit
p	src/madness/world/test_stack.cc	/^            int* p;$/;"	m	union:__anon3::StackTestBase::type_converter	file:
p	src/madness/world/test_worldptr.cc	/^        WorldPtr<int> p;$/;"	m	class:__anon6::WorldPtrTest	file:
p	src/madness/world/worlddc.h	/^        std::shared_ptr<implT> p;$/;"	m	class:madness::WorldContainer
p	src/madness/world/worldhashmap.h	/^            entryT* volatile p;$/;"	m	class:madness::Hash_private::bin
p0	src/madness/world/test_worldptr.cc	/^        WorldPtr<int> p0;$/;"	m	class:__anon6::WorldPtrTest	file:
p1	src/madness/mra/funcimpl.h	/^            ctL p1, p2;			\/\/\/< tracking coeffs of the two lo-dim functions$/;"	m	struct:madness::FunctionImpl::hartree_op
p2	src/madness/mra/funcimpl.h	/^            ctL p1, p2;			\/\/\/< tracking coeffs of the two lo-dim functions$/;"	m	struct:madness::FunctionImpl::hartree_op
pWorld	src/madness/world/test_googletest.cc	/^        static madness::World* pWorld;$/;"	m	class:__anon4::WorldTest	file:
p_	src/apps/polar/moldft.cc	/^    std::vector<Function<T, NDIM>> p_;$/;"	m	class:Projector	file:
p_minus	src/apps/chem/test_SCFOperators.cc	/^static double_complex p_minus(const coord_3d& xyz) {$/;"	f	file:
p_orbital	src/apps/chem/znemo.h	/^		p_orbital(const long& mm, const double& expo, const coord_3d& o)$/;"	f	struct:madness::Znemo::p_orbital
p_orbital	src/apps/chem/znemo.h	/^	struct p_orbital : public FunctionFunctorInterface<double_complex,3> {$/;"	s	class:madness::Znemo
p_plus	src/apps/chem/test_SCFOperators.cc	/^static double_complex p_plus(const coord_3d& xyz) {$/;"	f	file:
pad	src/madness/world/dqueue.h	/^        char pad[64]; \/\/\/< To put the lock and the data in separate cache lines$/;"	m	class:madness::DQueue
paintEvent	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	/^DisplayWidget<T>::paintEvent( QPaintEvent* event )$/;"	f	class:elem::DisplayWidget
paintEvent	src/madness/external/elemental/include/elemental/io/SpyWidget/impl.hpp	/^SpyWidget::paintEvent( QPaintEvent* event )$/;"	f	class:elem::SpyWidget
pairT	src/madness/mra/lbdeux.h	/^        typedef std::pair<keyT,ProcessID> pairT;$/;"	t	class:madness::LBDeuxPmap
pairT	src/madness/mra/simplecache.h	/^        typedef std::pair<Key<NDIM>, Q> pairT;$/;"	t	class:madness::SimpleCache
pairT	src/madness/world/worlddc.h	/^        typedef typename implT::pairT pairT;$/;"	t	class:madness::WorldContainer
pairT	src/madness/world/worlddc.h	/^        typedef typename std::pair<const keyT,valueT> pairT;$/;"	t	class:madness::WorldContainerImpl
pair_int_double	src/madness/world/test_ar.cc	/^        typedef std::pair<int,double> pair_int_double;$/;"	t	namespace:madness::archive	file:
pair_short_complex_double	src/madness/world/test_ar.cc	/^        typedef std::pair< short,std::complex<double> > pair_short_complex_double;$/;"	t	namespace:madness::archive	file:
pairmapT	src/apps/chem/CCStructures.h	/^    typedef std::map<std::pair<int, int>, T> pairmapT;$/;"	t	struct:madness::Pairs
pairmapT	src/apps/chem/mp2.h	/^            typedef std::map<std::pair<int,int>, T> pairmapT;$/;"	t	struct:madness::MP2::Pairs
pairs	src/apps/chem/mp2.h	/^        Pairs<ElectronPair> pairs;       \/\/\/< pair functions and energies$/;"	m	class:madness::MP2
pairvecT	src/apps/moldft/subspace.h	/^    typedef std::pair<vector_complex_function_3d,vector_complex_function_3d> pairvecT;$/;"	t	class:Subspace
pairvecfuncT	src/apps/chem/SCF.h	/^typedef std::pair<vecfuncT,vecfuncT> pairvecfuncT;$/;"	t	namespace:madness
pairvecfuncT	src/apps/hf/solver.h	/^    typedef std::pair<vecfuncT,vecfuncT> pairvecfuncT;$/;"	t	class:madness::Solver
pairvecfuncT	src/apps/hf/solver.h	/^    typedef std::pair<vecfuncT,vecfuncT> pairvecfuncT;$/;"	t	class:madness::Subspace
pairvecfuncT	src/apps/hf/solver.h	/^    typedef std::pair<vecfuncT,vecfuncT> pairvecfuncT;$/;"	t	class:madness::SubspaceK
pairvecfuncT	src/apps/polar/moldft.cc	/^typedef std::pair<vecfuncT, vecfuncT> pairvecfuncT;$/;"	t	file:
pairvecfuncT	src/examples/h2dft.cc	/^typedef std::pair<vecfuncT,vecfuncT> pairvecfuncT;$/;"	t	file:
pairvecfuncT	src/examples/hedft.cc	/^typedef std::pair<vecfuncT,vecfuncT> pairvecfuncT;$/;"	t	file:
pairvecfuncT	src/examples/hefxc.cc	/^typedef std::pair<vecfuncT,vecfuncT> pairvecfuncT;$/;"	t	file:
pairvecfuncT	src/examples/newsolver_lda.cc	/^typedef std::pair<vecfuncT,vecfuncT> pairvecfuncT;$/;"	t	file:
pairvecfuncT	src/madness/mra/testbc.cc	/^typedef std::pair<vecfuncT,vecfuncT> pairvecfuncT;$/;"	t	file:
papi_mutex	src/madness/world/worldpapi.cc	/^    static Mutex papi_mutex;$/;"	m	namespace:madness	file:
par_reduce	src/madness/world/worldprofile.cc	/^    void WorldProfileEntry::par_reduce(const WorldProfileEntry& other) {$/;"	f	class:madness::WorldProfileEntry
par_reduce	src/madness/world/worldprofile.h	/^        void par_reduce(const ProfileStat<T>& other) {$/;"	f	struct:madness::ProfileStat
param	src/apps/chem/PNO.h	/^	PNOParameters param;  \/\/\/< calculation parameters$/;"	m	class:madness::PNO
param	src/apps/chem/PNOF12Potentials.h	/^	F12Parameters param;													\/\/\/< parameters$/;"	m	class:madness::F12Potentials
param	src/apps/chem/SCF.h	/^	CalculationParameters param;$/;"	m	class:madness::SCF
param	src/apps/chem/mp2.h	/^        Parameters param;						\/\/\/< SCF parameters for MP2$/;"	m	class:madness::MP2
param	src/apps/chem/nemo.h	/^    NemoCalculationParameters param;$/;"	m	class:madness::Nemo
param	src/apps/chem/znemo.h	/^	Nemo_complex_Parameters param;$/;"	m	class:madness::Znemo
param	src/apps/moldft/mcpfit.cc	/^    CalculationParameters param;$/;"	m	struct:Calculation	file:
param	src/apps/nick/extra.cc	/^InputParameters param;$/;"	v
param	src/apps/nick/tdse1.cc	/^InputParameters param;$/;"	v
param	src/apps/polar/mcpfit.cc	/^    CalculationParameters param;$/;"	m	struct:Calculation	file:
param	src/apps/polar/moldft.cc	/^    CalculationParameters param;$/;"	m	struct:Calculation	file:
param	src/apps/tdse/tdse.cc	/^InputParameters param;$/;"	v
param	src/apps/tdse/tdse.confused.cc	/^InputParameters param;$/;"	v
param	src/apps/tdse/tdse4.cc	/^InputParameters param;$/;"	v
param_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const T param_;  \/\/ User-supplied parameter to the thread function.$/;"	m	class:testing::internal::ThreadWithParam
parameter_	src/madness/external/gtest/include/gtest/gtest.h	/^  static const ParamType* parameter_;$/;"	m	class:testing::WithParamInterface
parameter_	src/madness/external/gtest/include/gtest/gtest.h	/^const T* WithParamInterface<T>::parameter_ = NULL;$/;"	m	class:testing::WithParamInterface
parameter_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  const ParamType parameter_;$/;"	m	class:testing::internal::ParameterizedTestFactory
parameter_exists	src/apps/chem/QCCalculationParametersBase.h	/^	bool parameter_exists(const std::string& key) const {$/;"	f	class:madness::QCCalculationParametersBase
parameter_variations	src/apps/chem/test_qc.cc	/^	ParameterVectorContainerT parameter_variations;$/;"	m	class:TestCalculationParameters	file:
parameterized_test_registry	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::ParameterizedTestCaseRegistry& parameterized_test_registry() {$/;"	f	class:testing::internal::UnitTestImpl
parameterized_test_registry_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::ParameterizedTestCaseRegistry parameterized_test_registry_;$/;"	m	class:testing::internal::UnitTestImpl
parameterized_tests_registered_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool parameterized_tests_registered_;$/;"	m	class:testing::internal::UnitTestImpl
parameters	src/apps/chem/CC2.h	/^    const CCParameters parameters;$/;"	m	class:madness::CC2
parameters	src/apps/chem/CCPotentials.h	/^    const CCParameters& parameters;$/;"	m	class:madness::CCPotentials
parameters	src/apps/chem/CCStructures.h	/^    const CCParameters& parameters;$/;"	m	struct:madness::CCIntermediatePotentials
parameters	src/apps/chem/CCStructures.h	/^    const Parameters& parameters;$/;"	m	struct:madness::CCConvolutionOperator
parameters	src/apps/chem/QCCalculationParametersBase.h	/^	ParameterContainerT parameters;$/;"	m	class:madness::QCCalculationParametersBase
parameters	src/apps/chem/TDHF.h	/^	const Parameters parameters;$/;"	m	class:madness::TDHF
parameters	src/apps/chem/molecular_optimizer.h	/^    MolecularOptimizationParameters parameters;$/;"	m	class:madness::MolecularOptimizer
parent	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode*		parent;$/;"	m	class:TiXmlNode
parent	src/madness/mra/key.h	/^        Key<NDIM> parent;$/;"	m	class:madness::KeyChildIterator
parent	src/madness/mra/key.h	/^        parent(int generation = 1) const {$/;"	f	class:madness::Key
parent	src/madness/world/test_tree.cc	/^    Key parent() const {$/;"	f	struct:Key
parent	src/madness/world/test_tree.cc	/^    Key parent;$/;"	m	class:KeyChildIterator	file:
parent_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  UnitTest* const parent_;$/;"	m	class:testing::internal::UnitTestImpl
parent_processed	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  bool            parent_processed;$/;"	m	struct:__anon19
parent_to_child	src/madness/mra/mraimpl.h	/^    const GenTensor<T> FunctionImpl<T,NDIM>::parent_to_child(const coeffT& s, const keyT& parent, const keyT& child) const {$/;"	f	class:madness::FunctionImpl
parent_to_child_NS	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::coeffT FunctionImpl<T,NDIM>::parent_to_child_NS($/;"	f	class:madness::FunctionImpl
parent_value	src/apps/adrian/TDDFT.cc	/^  double parent_value;$/;"	m	struct:lbcost	file:
parent_value	src/apps/adrian/TDHF.cc	/^    double parent_value;$/;"	m	struct:lbcost	file:
parent_value	src/apps/adrian/TDHF2.cc	/^    double parent_value;$/;"	m	struct:lbcost	file:
parent_value	src/apps/bryan/TDHF.cc	/^    double parent_value;$/;"	m	struct:lbcost	file:
parent_value	src/apps/bryan/TDHF2.cc	/^    double parent_value;$/;"	m	struct:lbcost	file:
parent_value	src/apps/chem/SCF.h	/^	double parent_value;$/;"	m	struct:madness::lbcost
parent_value	src/apps/chem/mp2.h	/^        double parent_value;$/;"	m	struct:madness::LBCost
parent_value	src/apps/interior_bc/test_problems.h	/^    double parent_value;$/;"	m	struct:DirichletLBCost
parent_value	src/apps/nick/projPsi.cc	/^    double parent_value;$/;"	m	struct:LBCost	file:
parent_value	src/apps/polar/moldft.cc	/^    double parent_value;$/;"	m	struct:lbcost	file:
parent_value	src/apps/tdse/tdse.cc	/^    double parent_value;$/;"	m	struct:lbcost	file:
parent_value	src/apps/tdse/tdse.confused.cc	/^    double parent_value;$/;"	m	struct:lbcost	file:
parent_value	src/apps/tdse/tdse4.cc	/^    double parent_value;$/;"	m	struct:lbcost	file:
parent_value	src/examples/dataloadbal.cc	/^    double parent_value;$/;"	m	struct:LBCost	file:
parent_value	src/examples/he.cc	/^    double parent_value;$/;"	m	struct:LBCost	file:
parent_value	src/examples/helium_mp2.cc	/^    double parent_value;$/;"	m	struct:LBCost	file:
parity	src/madness/mra/twoscale.cc	/^    static inline int parity(int i) {$/;"	f	namespace:madness
parse	src/examples/compiler/mra-driver.cc	/^mra_driver::parse (const std::string &f)$/;"	f	class:mra_driver
parsec	src/madness/world/thread.h	/^        static dague_context_t *parsec;$/;"	m	class:madness::ThreadPool
parsemad	src/apps/moldft/parsemad.py	/^def parsemad(filename):$/;"	f
parser	src/madness/misc/phandler.h	/^    mu::Parser parser;                   \/\/ the string-to-function parser$/;"	m	class:ParserHandler
partial_regex_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  regex_t partial_regex_;  \/\/ For PartialMatch().$/;"	m	class:testing::internal::RE
partial_upsample	src/madness/mra/operator.h	/^        GenTensor<T> partial_upsample(const Key<FDIM>& key, const GenTensor<T>& coeff, const int particle) const {$/;"	f	class:madness::SeparatedConvolution
partial_wave	src/apps/chem/PNOParameters.h	/^	std::map<std::string, std::vector<int> >partial_wave(const std::string& key = "partial_wave")const {$/;"	f	class:madness::PNOParameters
particle	src/apps/polar/moldft.cc	/^    const int &particle() const { return particle_; }$/;"	f	class:Projector
particle	src/apps/polar/moldft.cc	/^    int &particle() { return particle_; }$/;"	f	class:Projector
particle	src/madness/mra/funcimpl.h	/^            int particle;       \/\/\/< if g is g(1) or g(2)$/;"	m	struct:madness::FunctionImpl::multiply_op
particle	src/madness/mra/leafop.h	/^    int particle;$/;"	m	struct:madness::NuclearCuspyBox_op
particle	src/madness/mra/operator.h	/^        const int& particle() const {return particle_;}$/;"	f	class:madness::SeparatedConvolution
particle	src/madness/mra/operator.h	/^        int& particle() {return particle_;}$/;"	f	class:madness::SeparatedConvolution
particle1	src/madness/mra/function_factory.h	/^    particle1(const Function<T, MDIM>& f) {$/;"	f	class:madness::CompositeFactory
particle2	src/madness/mra/function_factory.h	/^    particle2(const Function<T, MDIM>& f) {$/;"	f	class:madness::CompositeFactory
particle_	src/apps/polar/moldft.cc	/^    int particle_;$/;"	m	class:Projector	file:
particle_	src/madness/mra/operator.h	/^        int particle_;$/;"	m	class:madness::SeparatedConvolution
partition	src/madness/mra/lbdeux.h	/^        void partition(const treeT& tree, const keyT& key, double avg) {$/;"	f	class:madness::LBNodeDeux
passed	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  bool passed() const { return type_ == kSuccess; }$/;"	f	class:testing::TestPartResult
path	src/apps/moldft/fci/crayio.c	/^  char *path;                \/* file name *\/$/;"	m	struct:w_file	file:
path	src/apps/nick/extract.py	/^import sys, re, os, os.path$/;"	i
pathname_	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^  std::string pathname_;$/;"	m	class:testing::internal::FilePath
pattern	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const char* pattern() const { return pattern_; }$/;"	f	class:testing::internal::RE
pattern_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const char* pattern_;$/;"	m	class:testing::internal::RE
pause	src/madness/world/worldprofile.cc	/^    void WorldProfileObj::pause(double now, const RMIStats& stats) {$/;"	f	class:madness::WorldProfileObj
pcfilter	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^        pcfilter = list(filter(lambda x: x[1] == pc, results))$/;"	v
pcm	src/apps/chem/SCF.h	/^	PCM pcm;$/;"	m	class:madness::SCF
pcm	src/apps/chem/nemo.h	/^	PCM pcm;$/;"	m	class:madness::Nemo
pcm_context	src/apps/chem/pcm.h	/^    std::shared_ptr<pcmsolver_context_t> pcm_context;$/;"	m	class:madness::PCM
pcm_data	src/apps/chem/CalculationParameters.h	/^	std::string pcm_data() const {return get<std::string>("pcm_data");}$/;"	f	struct:madness::CalculationParameters
pcmsolver_input	src/apps/chem/pcm.cc	/^PCMInput PCM::pcmsolver_input() const {$/;"	f	class:madness::PCM
pcoeff	src/apps/moldft/nwtoxml.py	/^            pcoeff = []$/;"	v
pcoeff	src/apps/polar/nwtoxml.py	/^            pcoeff = []$/;"	v
pcomplex_operatorT	src/examples/tdse1d.cc	/^  typedef std::shared_ptr<complex_operatorT> pcomplex_operatorT;$/;"	t	file:
pcomplex_operatorT	src/examples/testspectralprop.cc	/^typedef std::shared_ptr<complex_operatorT> pcomplex_operatorT;$/;"	t	file:
pcoperatorT	src/apps/moldft/testperiodic.cc	/^typedef std::shared_ptr<coperatorT> pcoperatorT;$/;"	t	file:
peek	src/madness/world/world_object.h	/^        static inline const uniqueidT& peek(const AmArg& arg) {$/;"	f	namespace:madness::detail
penalty	src/madness/tensor/gfit.cc	/^    double penalty(double expnt) const {$/;"	f	class:Fred	file:
penalty_name	src/apps/interior_bc/test_problems.h	/^        std::string penalty_name;$/;"	m	class:EmbeddedDirichlet
penalty_prefact	src/apps/interior_bc/test_problems.h	/^        double penalty_prefact, eps;$/;"	m	class:EmbeddedDirichlet
pending	src/madness/mra/mra1.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<double,1> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra1.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<std::complex<double>,1> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra1.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<FunctionImpl<double,1> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra1.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<SeparatedConvolution<double,1> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra1.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<SeparatedConvolution<std::complex<double>,1> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra1.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<1>, FunctionNode<double, 1>, Hash<Key<1> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra1.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<1>, FunctionNode<std::complex<double>, 1>, Hash<Key<1> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra1.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<1>, LBNodeDeux<1>, Hash<Key<1> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra1.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::FunctionImpl<std::complex<double>, 1> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra2.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<double,2> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra2.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<std::complex<double>,2> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra2.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<FunctionImpl<double,2> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra2.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<2>, FunctionNode<double, 2>, Hash<Key<2> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra2.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<2>, FunctionNode<std::complex<double>, 2>, Hash<Key<2> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra2.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<2>, LBNodeDeux<2>, Hash<Key<2> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra2.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::FunctionImpl<std::complex<double>, 2> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra2.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<double,2> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra2.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<std::complex<double>,2> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra3.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<double,3> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra3.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<std::complex<double>,3> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra3.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<FunctionImpl<double,3> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra3.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<3>, FunctionNode<double, 3>, Hash<Key<3> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra3.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<3>, FunctionNode<std::complex<double>, 3>, Hash<Key<3> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra3.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<3>, LBNodeDeux<3>, Hash<Key<3> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra3.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::FunctionImpl<std::complex<double>, 3> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra3.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<double,3> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra3.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<std::complex<double>,3> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra4.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<double,4> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra4.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<std::complex<double>,4> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra4.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<FunctionImpl<double,4> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra4.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<4>, FunctionNode<double, 4>, Hash<Key<4> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra4.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<4>, FunctionNode<std::complex<double>, 4>, Hash<Key<4> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra4.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<4>, LBNodeDeux<4>, Hash<Key<4> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra4.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::FunctionImpl<std::complex<double>, 4> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra4.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<double,4> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra4.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<std::complex<double>,4> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra5.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<double,5> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra5.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<std::complex<double>,5> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra5.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<FunctionImpl<double,5> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra5.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<5>, FunctionNode<double, 5>, Hash<Key<5> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra5.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<5>, FunctionNode<std::complex<double>, 5>, Hash<Key<5> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra5.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<5>, LBNodeDeux<5>, Hash<Key<5> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra5.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::FunctionImpl<std::complex<double>, 5> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra5.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<double,5> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra5.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<std::complex<double>,5> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra6.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<double,6> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra6.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<DerivativeBase<std::complex<double>,6> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra6.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<FunctionImpl<double,6> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra6.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<6>, FunctionNode<double, 6>, Hash<Key<6> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra6.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<6>, FunctionNode<std::complex<double>, 6>, Hash<Key<6> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra6.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<WorldContainerImpl<Key<6>, LBNodeDeux<6>, Hash<Key<6> > > >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra6.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::FunctionImpl<std::complex<double>, 6> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra6.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<double,6> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/mra/mra6.cc	/^    template <> volatile std::list<detail::PendingMsg> WorldObject<madness::SeparatedConvolution<std::complex<double>,6> >::pending = std::list<detail::PendingMsg>();$/;"	m	class:madness::WorldObject	file:
pending	src/madness/world/world_object.h	/^        static volatile pendingT pending; \/\/\/< Buffer for pending messages.$/;"	m	class:madness::WorldObject
pending	src/madness/world/world_object.h	/^volatile std::list<madness::detail::PendingMsg> madness::WorldObject<Derived>::pending;$/;"	m	class:madness::WorldObject
pendingT	src/madness/world/world_object.h	/^        typedef std::list<detail::PendingMsg> pendingT;$/;"	t	class:madness::WorldObject
pending_mutex	src/madness/world/world_object.h	/^        static Spinlock pending_mutex; \/\/\/< \\todo Description needed.$/;"	m	class:madness::WorldObject
pending_mutex	src/madness/world/world_object.h	/^madness::Spinlock madness::WorldObject<Derived>::pending_mutex;$/;"	m	class:madness::WorldObject
per_thread_test_part_result_reporter_	src/madness/external/gtest/src/gtest-internal-inl.h	/^      per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl
periodic	src/apps/hf/electronicstructureapp.h	/^    const bool periodic;$/;"	m	class:MolecularNuclearChargeDensityFunctor
periodic	src/apps/hf/electronicstructureapp.h	/^  const bool periodic;$/;"	m	class:AtomicBasisFunctor
periodic	src/apps/hf/electronicstructureparams.h	/^  bool periodic;$/;"	m	struct:madness::ElectronicStructureParams
periodic	src/apps/hf/ewald.cc	/^    const bool periodic;$/;"	m	class:MolecularNuclearChargeDensityFunctor	file:
periodic	src/apps/hf/solver.h	/^        const bool periodic;$/;"	m	struct:madness::Solver::GuessDensity
periodic_derivative	src/madness/mra/derivative.h	/^    periodic_derivative(World& world, int axis, int k=FunctionDefaults<NDIM>::get_k()) {$/;"	f	namespace:madness
permutations	src/madness/tensor/mtxmq_graveyard/new_mtxmq/main.py	/^from itertools import permutations, product$/;"	i
perturbed_density	src/apps/adrian/ResponsePotential.h	/^      std::vector<real_function_3d> perturbed_density(ResponseFunction& x, ResponseFunction& y) {$/;"	f	class:madness::ResponsePotential
perturbed_density	src/apps/bryan/ResponsePotential.h	/^      std::vector<real_function_3d> perturbed_density(ResponseFunction& x, ResponseFunction& y) {$/;"	f	class:madness::ResponsePotential
perturbed_molecular_pot	src/examples/colloid.cc	/^    realfunc perturbed_molecular_pot(const realfunc& surface,const realfunc& volume) const {$/;"	f	class:SurfaceMoleculeInteraction
pexact	src/examples/navstokes_cosines.cc	/^static double pexact(const coordT3d& r) {$/;"	f	file:
pflags	src/madness/world/worldmutex.h	/^        volatile bool* pflags[64];$/;"	m	class:madness::Barrier
pg_c2	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_c2() {$/;"	f	namespace:madness
pg_c2x	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_c2x() {$/;"	f	namespace:madness
pg_c2y	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_c2y() {$/;"	f	namespace:madness
pg_c2z	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_c2z() {$/;"	f	namespace:madness
pg_c4	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_c4() {$/;"	f	namespace:madness
pg_c4x	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_c4x() {$/;"	f	namespace:madness
pg_c4y	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_c4y() {$/;"	f	namespace:madness
pg_c4z	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_c4z() {$/;"	f	namespace:madness
pg_identity	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_identity() {$/;"	f	namespace:madness
pg_inversion	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_inversion() {$/;"	f	namespace:madness
pg_operator	src/apps/chem/pointgroupoperator.h	/^    pg_operator(std::string symbol, std::string name, const std::vector<long> mm,$/;"	f	class:madness::pg_operator
pg_operator	src/apps/chem/pointgroupoperator.h	/^class pg_operator {$/;"	c	namespace:madness
pg_sigma_x	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_sigma_x() {$/;"	f	namespace:madness
pg_sigma_xy	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_sigma_xy() {$/;"	f	namespace:madness
pg_sigma_xz	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_sigma_xz() {$/;"	f	namespace:madness
pg_sigma_y	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_sigma_y() {$/;"	f	namespace:madness
pg_sigma_yz	src/apps/chem/pointgroupoperator.h	/^static inline pg_operator pg_sigma_yz() {$/;"	f	namespace:madness
phase	src/apps/chem/test_SCFOperators.cc	/^    double phase=double(rand()%1000)\/1000.0;		\/\/\/< complex phase (if applicable)$/;"	m	class:GaussianGuess	file:
phase	src/madness/mra/convolution1d.h	/^        Q phase(double R) const {$/;"	f	class:madness::Convolution1D
phase	src/madness/mra/convolution1d.h	/^        Q phase(double_complex R) const {$/;"	f	class:madness::Convolution1D
phase	src/madness/mra/twoscale.cc	/^    static inline double phase(long i) {$/;"	f	namespace:madness
phase_m	src/apps/moldft/testperiodic.cc	/^    complex_function_3d phase_m;$/;"	m	class:KPeriodicBSHOperator	file:
phase_p	src/apps/moldft/testperiodic.cc	/^    complex_function_3d phase_p;$/;"	m	class:KPeriodicBSHOperator	file:
phi	src/madness/mra/tools/twoscalecoeffs.py	/^def phi(x,k):$/;"	f
phi0_on_demand	src/apps/chem/mp2.cc	/^real_function_6d MP2::phi0_on_demand(const int i, const int j) const {$/;"	f	class:madness::MP2
phi_bsh_func3d	src/apps/hf/test_lattice.cc	/^static double phi_bsh_func3d(const coordT3d& r)$/;"	f	file:
phi_coulomb_func3d	src/apps/hf/test_lattice.cc	/^static double_complex phi_coulomb_func3d(const coordT3d& r)$/;"	f	file:
phi_for_mul	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::phi_for_mul(Level np, Translation lp, Level nc, Translation lc, Tensor<double>& phi) const {$/;"	f	class:madness::FunctionImpl
phi_initial_guess1D	src/apps/hf/test_coulomb.cc	/^static double phi_initial_guess1D(const coordT1d& r)$/;"	f	file:
phi_initial_guess3D	src/apps/hf/test_coulomb.cc	/^static double phi_initial_guess3D(const coordT3d& r)$/;"	f	file:
phi_norms	src/madness/mra/legendre.cc	/^    static double phi_norms[100];$/;"	m	namespace:madness	file:
phi_norms	src/madness/mra/tools/twoscalecoeffs.py	/^phi_norms = []                          # Cache sqrt(2*n+1)$/;"	v
phi_norms_long	src/madness/mra/tools/twoscalecoeffs.py	/^phi_norms_long = []                          # Cache sqrt(2*n+1)$/;"	v
phik	src/apps/nick/projPsi.cc	/^    PhiK& phik;$/;"	m	struct:PhiKAdaptor	file:
phik	src/apps/nick/test.cc	/^    PhiK& phik;$/;"	m	struct:PhiKAdaptor	file:
phik	src/apps/nick/wfSlice.cc	/^    PhiK& phik;$/;"	m	struct:PhiKAdaptor	file:
philong	src/madness/mra/tools/twoscalecoeffs.py	/^def philong(x,k):$/;"	f
phis	src/apps/hf/dft.h	/^     const std::vector<funcT>& phis()$/;"	f	class:madness::DFT
phis	src/apps/hf/eigsolver.h	/^  const std::vector<funcT>& phis()$/;"	f	class:madness::EigSolver
phis	src/apps/hf/hartreefock.h	/^    const std::vector<funcT>& phis()$/;"	f	class:madness::HartreeFock
physical_B	src/apps/chem/diamagneticpotentialfactor.h	/^	coord_3d physical_B={0,0,0};		\/\/\/< the actual magnetic field strength$/;"	m	class:madness::Diamagnetic_potential_factor
physical_B	src/apps/chem/znemo.h	/^	double physical_B() const {return get<double>("physical_b");}$/;"	f	class:madness::Nemo_complex_Parameters
pi	src/apps/adrian/gaussian.cc	/^const static double pi = 4.*atan(1.);$/;"	v	file:
pi	src/apps/bryan/gaussian.cc	/^const static double pi = 4.*atan(1.);$/;"	v	file:
pi	src/apps/moldft/testcosine.cc	/^static const double pi = constants::pi;$/;"	v	file:
pi	src/examples/navstokes_cosines.cc	/^const double pi=madness::constants::pi;$/;"	v
pi	src/madness/constants.h	/^        const double pi = 3.14159265358979323846264338328; \/\/\/< Mathematical constant \\f$\\pi\\f$.$/;"	m	namespace:madness::constants
pi	src/madness/mra/tools/longfloat.py	/^    def pi(self):$/;"	m	class:longfloat
pi_	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^    Real pi_;$/;"	m	class:FourierPhase	file:
pi_	src/madness/external/elemental/examples/matrices/Egorov.cpp	/^    Real pi_;$/;"	m	class:Phase	file:
pid	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int      pid;$/;"	m	struct:__anon24
pids	src/madness/world/threadbind	/^pids = sys.argv[1:]$/;"	v
pimpl	src/madness/world/safempi.h	/^        std::shared_ptr<Impl> pimpl;$/;"	m	class:SafeMPI::Group
pimpl	src/madness/world/safempi.h	/^        std::shared_ptr<Impl> pimpl;$/;"	m	class:SafeMPI::Intracomm
pimplL	src/madness/mra/function_interface.h	/^		typedef std::shared_ptr<implL> pimplL;$/;"	t	class:madness::CompositeFunctorInterface
pimplT	src/madness/mra/funcimpl.h	/^        typedef std::shared_ptr< FunctionImpl<T,NDIM> > pimplT; \/\/\/< pointer to this class$/;"	t	class:madness::FunctionImpl
pimplT	src/madness/mra/function_interface.h	/^		typedef std::shared_ptr<implT> pimplT;$/;"	t	class:madness::CompositeFunctorInterface
pimpl_	src/madness/world/group.h	/^        std::shared_ptr<Impl> pimpl_;$/;"	m	class:madness::Group
pimpl_	src/madness/world/worldref.h	/^            mutable WorldPtr<implT> pimpl_;$/;"	m	class:madness::detail::RemoteCounter
pimpl_mapT	src/madness/world/worldref.h	/^            typedef ConcurrentHashMap<void*, WorldPtr<implT> > pimpl_mapT;$/;"	t	class:madness::detail::RemoteCounter
pimpl_map_	src/madness/world/worldref.cc	/^        RemoteCounter::pimpl_mapT RemoteCounter::pimpl_map_;$/;"	m	class:madness::detail::RemoteCounter	file:
pimpl_map_	src/madness/world/worldref.h	/^            static pimpl_mapT pimpl_map_;   \/\/\/< A map of currently registered$/;"	m	class:madness::detail::RemoteCounter
ping	src/madness/world/test_world.cc	/^    void ping(int from, int speed) {$/;"	f	class:Foo
ping_am	src/madness/world/test_world.cc	/^    void ping_am(int from, int speed) {$/;"	f	class:Foo
pit	src/apps/chem/PNO.h	/^	ElectronPairIterator pit()const{ return f12.pit();} \/\/\/ convenience$/;"	f	class:madness::PNO
pit	src/apps/chem/PNOF12Potentials.h	/^	ElectronPairIterator pit()const{ return ElectronPairIterator(acmos.size()+param.freeze(),param.freeze());}$/;"	f	class:madness::F12Potentials
pivmin	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double       pivmin;$/;"	m	struct:__anon30
pivmin	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double pivmin;$/;"	m	struct:__anon25
pivmin	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double pivmin;$/;"	m	struct:__anon29
pivot	src/apps/moldft/fci/fci.F	/^      integer pivot(/;"	v	program:fci
pivot	src/madness/external/elemental/include/elemental/lapack-like/factor/Cholesky/LVar3Pivoted.hpp	/^namespace pivot {$/;"	n	namespace:elem::cholesky
pivot	src/madness/external/elemental/include/elemental/lapack-like/factor/LDL/Pivoted.hpp	/^namespace pivot {$/;"	n	namespace:elem::ldl
pixmap_	src/madness/external/elemental/include/elemental/io/DisplayWidget/decl.hpp	/^    QPixmap pixmap_;$/;"	m	class:elem::DisplayWidget
pixmap_	src/madness/external/elemental/include/elemental/io/SpyWidget/decl.hpp	/^    QPixmap pixmap_;$/;"	m	class:elem::SpyWidget
plarre	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^int plarre(proc_t *procinfo, char *jobz, char *range, in_t *Dstruct, $/;"	f
plarrv	src/madness/external/elemental/external/pmrrr/src/plarrv.c	/^int plarrv(proc_t *procinfo, in_t *Dstruct, val_t *Wstruct,$/;"	f
plist	src/madness/world/threadbind	/^        plist = subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True).strip().split()$/;"	v
plist	src/madness/world/threadbind	/^    plist = [p]$/;"	v
plocalize_boys	src/apps/ii/localize_boys.cc	/^DistributedMatrix<T> plocalize_boys( World & world, const std::vector< Function<T,3> > & mo, const std::vector<int> & set, const double vtol,$/;"	f
plot	src/apps/adrian/ResponseParameters.h	/^      bool plot;                         \/\/\/< Turn on plotting of final orbitals. Output format is .vts $/;"	m	struct:madness::ResponseParameters
plot	src/apps/bryan/ResponseParameters.h	/^      bool plot;                         \/\/\/< Turn on plotting of final orbitals. Output format is .vts $/;"	m	struct:madness::ResponseParameters
plot	src/apps/chem/CC2.h	/^    plot(const real_function_3d &f,const std::string &msg="unspecified function") const {$/;"	f	class:madness::CC2
plot	src/apps/chem/CCPotentials.cc	/^  void CCPotentials::plot(const real_function_3d &f, const std::string &msg, const bool doprint) const {$/;"	f	class:madness::CCPotentials
plot	src/apps/chem/CCPotentials.cc	/^  void CCPotentials::plot(const vector_real_function_3d &f, const std::string &msg) const {$/;"	f	class:madness::CCPotentials
plot	src/apps/chem/CCStructures.h	/^    bool plot=false;$/;"	m	struct:madness::CCParameters
plot	src/apps/chem/CCStructures.h	/^    void plot(const std::string &msg="")const{$/;"	f	struct:madness::CCFunction
plot	src/apps/chem/CCStructures.h	/^    void plot(const std::string &msg="")const{$/;"	f	struct:madness::CC_vecfunction
plot	src/apps/chem/TDHF.cc	/^void TDHF::plot(const vector_real_function_3d& vf, const std::string& name)const{$/;"	f	class:madness::TDHF
plot	src/apps/chem/TDHF.h	/^		bool plot() const {return get<bool>("plot");}$/;"	f	struct:madness::TDHF::Parameters
plot	src/apps/chem/xcfunctional.h	/^    void plot() const {$/;"	f	class:madness::XCfunctional
plot	src/apps/moldft/mcpfit.cc	/^    bool plot;      \/\/\/< if true plot vmo or umo$/;"	m	struct:CalculationParameters	file:
plot	src/apps/polar/mcpfit.cc	/^    bool plot;      \/\/\/< if true plot vmo or umo$/;"	m	struct:CalculationParameters	file:
plot	src/apps/polar/xcfunctional.h	/^    void plot() const {$/;"	f	class:madness::XCfunctional
plot	src/examples/3dharmonic.cc	/^void plot(const char* filename, const real_function_3d& f) {$/;"	f
plot	src/madness/mra/funcplot.h	/^    void plot(const std::vector<Function<double,NDIM> >& vf, const std::string& name, const std::vector<std::string>& header){$/;"	f	namespace:madness
plot	src/madness/mra/minmax/y.cc	/^void plot(int npt, const FLOAT& a, const FLOAT& b, const vector<FLOAT>& p) $/;"	f
plot	src/madness/mra/minmax/y1.cc	/^void plot(int npt, const FLOAT& a, const FLOAT& b, const vector<FLOAT>& p) $/;"	f
plot	src/madness/mra/minmax/y_signed.cc	/^void plot(int npt, const FLOAT& a, const FLOAT& b, const vector<FLOAT>& p) $/;"	f
plot	src/madness/mra/minmax/y_varx.cc	/^void plot(int npt, const FLOAT& a, const FLOAT& b, const vector<FLOAT>& p) $/;"	f
plot	src/madness/mra/mraplot.cc	/^    void plot() {$/;"	f	class:Plotter
plot	src/madness/mra/qmprop.cc	/^        static void plot() {$/;"	f	class:madness::BandlimitedPropagator
plot_L	src/apps/adrian/ResponseParameters.h	/^      double plot_L;                     \/\/\/< Controls the plotting box size $/;"	m	struct:madness::ResponseParameters
plot_L	src/apps/bryan/ResponseParameters.h	/^      double plot_L;                     \/\/\/< Controls the plotting box size $/;"	m	struct:madness::ResponseParameters
plot_along	src/madness/mra/funcplot.h	/^    void plot_along(World& world, trajectory<NDIM> traj, const Function<double,NDIM>& function, std::string filename) {$/;"	f	namespace:madness
plot_along	src/madness/mra/funcplot.h	/^    void plot_along(World& world, trajectory<NDIM> traj, double (*ff)(const Vector<double,NDIM>&), std::string filename) {$/;"	f	namespace:madness
plot_cell	src/apps/chem/CalculationParameters.h	/^	Tensor<double> plot_cell() const {$/;"	f	struct:madness::CalculationParameters
plot_cell	src/apps/polar/moldft.cc	/^    tensorT plot_cell;     \/\/\/< lo hi in each dimension for plotting (default is all space)$/;"	m	struct:CalculationParameters	file:
plot_cell	src/madness/mra/mraplot.cc	/^    Tensor<double> plot_cell;   \/\/ Plotting volume$/;"	m	class:Plotter	file:
plot_cube_kernel	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::plot_cube_kernel(archive::archive_ptr< Tensor<T> > ptr,$/;"	f	class:madness::FunctionImpl
plot_cubefile	src/madness/mra/funcplot.h	/^    plot_cubefile(World& world, const Function<double,NDIM>& f, std::string filename,$/;"	f	namespace:madness
plot_data	src/apps/adrian/ResponseParameters.h	/^      std::vector<int> plot_data;        \/\/\/< Orbitals to plot$/;"	m	struct:madness::ResponseParameters
plot_data	src/apps/bryan/ResponseParameters.h	/^      std::vector<int> plot_data;        \/\/\/< Orbitals to plot$/;"	m	struct:madness::ResponseParameters
plot_initial	src/apps/adrian/ResponseParameters.h	/^      bool plot_initial;                 \/\/\/< Flag to plot the ground state orbitals read in from archive$/;"	m	struct:madness::ResponseParameters
plot_initial	src/apps/bryan/ResponseParameters.h	/^      bool plot_initial;                 \/\/\/< Flag to plot the ground state orbitals read in from archive$/;"	m	struct:madness::ResponseParameters
plot_line	src/madness/mra/funcplot.h	/^    void plot_line(World& world, const char* filename, int npt, const Vector<double,NDIM>& lo,$/;"	f	namespace:madness
plot_line	src/madness/mra/funcplot.h	/^    void plot_line(const char* filename, int npt, const Vector<double,NDIM>& lo, const Vector<double,NDIM>& hi,$/;"	f	namespace:madness
plot_line_print_value	src/madness/mra/funcplot.h	/^    static inline void plot_line_print_value(FILE* f, double v) {$/;"	f	namespace:madness
plot_line_print_value	src/madness/mra/funcplot.h	/^    static inline void plot_line_print_value(FILE* f, double_complex v) {$/;"	f	namespace:madness
plot_p	src/apps/moldft/mcpfit.cc	/^    void plot_p (const char* filename, const vecfuncT& f)$/;"	f	struct:Calculation
plot_p	src/apps/polar/mcpfit.cc	/^    void plot_p (const char* filename, const vecfuncT& f)$/;"	f	struct:Calculation
plot_plane	src/madness/mra/funcplot.h	/^    void plot_plane(World& world, const Function<double,NDIM>& function,$/;"	f	namespace:madness
plot_plane	src/madness/mra/funcplot.h	/^    void plot_plane(World& world, const Function<double,NDIM>& function1,$/;"	f	namespace:madness
plot_plane	src/madness/mra/funcplot.h	/^    void plot_plane(World& world, const opT& op, const std::string name) {$/;"	f	namespace:madness
plot_plane	src/madness/mra/funcplot.h	/^    void plot_plane(World& world, const std::vector<Function<double,NDIM> >& vfunction,$/;"	f	namespace:madness
plot_pts	src/apps/adrian/ResponseParameters.h	/^      int plot_pts;                      \/\/\/< Controls number of points in plots$/;"	m	struct:madness::ResponseParameters
plot_pts	src/apps/bryan/ResponseParameters.h	/^      int plot_pts;                      \/\/\/< Controls number of points in plots$/;"	m	struct:madness::ResponseParameters
plot_range	src/apps/adrian/ResponseParameters.h	/^      bool plot_range;                   \/\/\/< Controls which orbitals will be plotted $/;"	m	struct:madness::ResponseParameters
plot_range	src/apps/bryan/ResponseParameters.h	/^      bool plot_range;                   \/\/\/< Controls which orbitals will be plotted $/;"	m	struct:madness::ResponseParameters
plot_symmetry_operators	src/apps/chem/test_pointgroupsymmetry.cc	/^void plot_symmetry_operators(World& world) {$/;"	f
plot_type	src/madness/mra/mraplot.cc	/^    std::string plot_type;           \/\/ line or volume$/;"	m	class:Plotter	file:
plot_z	src/apps/moldft/mcpfit.cc	/^    void plot_z (const char* filename, const functionT & f)$/;"	f	struct:Calculation
plot_z	src/apps/polar/mcpfit.cc	/^    void plot_z (const char* filename, const functionT & f)$/;"	f	struct:Calculation
plotcoul	src/apps/polar/moldft.cc	/^    bool plotcoul;         \/\/\/< If true plot the total coulomb potential at convergence$/;"	m	struct:CalculationParameters	file:
plotdens	src/apps/polar/moldft.cc	/^    bool plotdens;         \/\/\/< If true print the density at convergence$/;"	m	struct:CalculationParameters	file:
plotdx	src/madness/mra/mraimpl.h	/^    void plotdx(const Function<T,NDIM>& function,$/;"	f	namespace:madness
plothi	src/apps/polar/moldft.cc	/^    int plotlo, plothi;    \/\/\/< Range of MOs to print (for both spins if polarized)$/;"	m	struct:CalculationParameters	file:
plotlo	src/apps/polar/moldft.cc	/^    int plotlo, plothi;    \/\/\/< Range of MOs to print (for both spins if polarized)$/;"	m	struct:CalculationParameters	file:
plotorbs	src/apps/hf/electronicstructureparams.h	/^  bool plotorbs;$/;"	m	struct:madness::ElectronicStructureParams
plotpovray	src/madness/mra/funcplot.h	/^    static void plotpovray(const Function<T,3>& function,$/;"	f	namespace:madness
plotter1	src/examples/derivatives.cc	/^void plotter1(const std::string& fname, const std::vector<coord_3d>& pts, real_function_3d& g0, real_function_3d& g1, real_function_3d& g2, real_function_3d& g3) {$/;"	f
plotter2	src/examples/derivatives.cc	/^void plotter2(const std::string& fname, const std::vector<coord_3d>& pts, real_function_3d& g0, real_function_3d& g2) {$/;"	f
plotter3	src/examples/derivatives.cc	/^void plotter3(const std::string& fname, const std::vector<coord_3d>& pts, real_function_3d& g0, real_function_3d& g3) {$/;"	f
plotvtk	src/examples/vtk.cc	/^void plotvtk(const Function<T,NDIM>& function,$/;"	f
plotvtk_begin	src/madness/mra/funcplot.h	/^    void plotvtk_begin(World &world, const char *filename,$/;"	f	namespace:madness
plotvtk_data	src/madness/mra/funcplot.h	/^    void plotvtk_data(const Function<T, NDIM> &function, const char *fieldname,$/;"	f	namespace:madness
plotvtk_data	src/madness/mra/funcplot.h	/^    void plotvtk_data(const Function<std::complex<T>, NDIM> &function,$/;"	f	namespace:madness
plotvtk_data	src/madness/mra/funcplot.h	/^    void plotvtk_data(const T &function, const char *fieldname, World &world,$/;"	f	namespace:madness
plotvtk_end	src/madness/mra/funcplot.h	/^    void plotvtk_end(World &world, const char *filename, bool binary = false) {$/;"	f	namespace:madness
plus2	src/madness/external/muParser/muParserTest.h	/^        static value_type plus2(value_type v1) { return v1+2; }$/;"	f	class:mu::Test::ParserTester
pmap	src/madness/mra/funcdefaults.h	/^        static std::shared_ptr< WorldDCPmapInterface< Key<NDIM> > > pmap; \/\/\/< Default mapping of keys to processes$/;"	m	class:madness::FunctionDefaults
pmap	src/madness/mra/function_factory.h	/^    pmap(const std::shared_ptr<WorldDCPmapInterface<Key<NDIM> > >& pmap) {$/;"	f	class:madness::FunctionFactory
pmap	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> std::shared_ptr< WorldDCPmapInterface< Key<NDIM> > > FunctionDefaults<NDIM>::pmap;$/;"	m	class:madness::FunctionDefaults
pmap	src/madness/world/worlddc.h	/^        std::shared_ptr< WorldDCPmapInterface<keyT> > pmap;\/\/\/< Function\/class to map from keys to owning process$/;"	m	class:madness::WorldContainerImpl
pmapT	src/apps/chem/SCF.h	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	namespace:madness
pmapT	src/apps/hf/esolver.h	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t
pmapT	src/apps/moldft/mcpfit.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/apps/nick/tdse1.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<NDIM> > > pmapT;$/;"	t	file:
pmapT	src/apps/nick/test.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/apps/nick/wavef.h	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t
pmapT	src/apps/nick/wfSlice.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/apps/polar/mcpfit.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/apps/polar/moldft.cc	/^typedef std::shared_ptr<WorldDCPmapInterface<Key<3>>> pmapT;$/;"	t	file:
pmapT	src/apps/tdse/tdse.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/apps/tdse/tdse.confused.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/apps/tdse/tdse4.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<4> > > pmapT;$/;"	t	file:
pmapT	src/examples/h2dft.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/examples/hedft.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/examples/hefxc.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/examples/newsolver_lda.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmapT	src/madness/mra/testbc.cc	/^typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmapT;$/;"	t	file:
pmap_1d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< WorldDCPmapInterface< Key<1> > > pmap_1d;$/;"	t	namespace:madness
pmap_2d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< WorldDCPmapInterface< Key<2> > > pmap_2d;$/;"	t	namespace:madness
pmap_3d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< WorldDCPmapInterface< Key<3> > > pmap_3d;$/;"	t	namespace:madness
pmap_4d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< WorldDCPmapInterface< Key<4> > > pmap_4d;$/;"	t	namespace:madness
pmap_5d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< WorldDCPmapInterface< Key<5> > > pmap_5d;$/;"	t	namespace:madness
pmap_6d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< WorldDCPmapInterface< Key<6> > > pmap_6d;$/;"	t	namespace:madness
pmax	src/madness/world/worldprofile.h	/^        ProcessID pmax, pmin;    \/\/ processor with max, min values$/;"	m	struct:madness::ProfileStat
pmin	src/madness/world/worldprofile.h	/^        ProcessID pmax, pmin;    \/\/ processor with max, min values$/;"	m	struct:madness::ProfileStat
pml	src/madness/external/elemental/include/elemental/matrices/HelmholtzPML.hpp	/^namespace pml {$/;"	n	namespace:elem
pmr_comm_eigvals_	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^void pmr_comm_eigvals_(MPI_Fint *comm, int *nz, int *myfirstp, $/;"	f
pmrrr	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^int pmrrr(char *jobz, char *range, int *np, double  *D,$/;"	f
pmrrr_dscal	src/madness/external/elemental/external/pmrrr/src/pmrrr_dscal.c	/^void pmrrr_dscal(int *n, double *alpha, double *restrict x, int *incx)$/;"	f
pn	src/madness/mra/tools/twoscalecoeffs.py	/^def pn(x,order):$/;"	f
pnew	src/madness/mra/minmax/y.cc	/^    mutable vector<FLOAT> pnew;$/;"	m	class:Func	file:
pnew	src/madness/mra/minmax/y1.cc	/^    mutable vector<FLOAT> pnew;$/;"	m	class:Func	file:
pnew	src/madness/mra/minmax/y_signed.cc	/^    mutable vector<FLOAT> pnew;$/;"	m	class:Func	file:
pnew	src/madness/mra/minmax/y_varx.cc	/^    mutable vector<FLOAT> pnew;$/;"	m	class:Func	file:
pnlong	src/madness/mra/tools/twoscalecoeffs.py	/^def pnlong(x,order):$/;"	f
pno	src/apps/chem/PNOStructures.h	/^		double pno;$/;"	m	struct:madness::PNOPairs::MemInfo
pno_compress	src/apps/chem/PNO.cpp	/^std::valarray<Tensor<double> > PNO::pno_compress(PNOPairs& pairs, const double tpno) const {$/;"	f	class:madness::PNO
pno_ij	src/apps/chem/PNOStructures.h	/^	vfT pno_ij;										\/\/\/< the PNOs for all Pairs$/;"	m	struct:madness::PNOPairs
pod_deserialize_dispatch	src/madness/world/test_ar.cc	/^struct pod_deserialize_dispatch<false> {$/;"	s	file:
pod_deserialize_dispatch	src/madness/world/test_ar.cc	/^struct pod_deserialize_dispatch<true> {$/;"	s	file:
pod_serialize_dispatch	src/madness/world/test_ar.cc	/^struct pod_serialize_dispatch<false> {$/;"	s	file:
pod_serialize_dispatch	src/madness/world/test_ar.cc	/^struct pod_serialize_dispatch<true> {$/;"	s	file:
point	src/madness/mra/sdf_shape_3D.h	/^        const coord_3d point; \/\/\/< A point in the plane$/;"	m	class:madness::SDFPlane
pointer	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^    T* pointer() { return &value_; }$/;"	f	class:testing::internal::ThreadLocal::ValueHolder
pointer	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  T* pointer() { return &value_; }$/;"	f	class:testing::internal::ThreadLocal
pointer	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  T* pointer() { return GetOrCreateValue(); }$/;"	f	class:testing::internal::ThreadLocal
pointer	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const T* pointer() const { return &value_; }$/;"	f	class:testing::internal::ThreadLocal
pointer	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const T* pointer() const { return GetOrCreateValue(); }$/;"	f	class:testing::internal::ThreadLocal
pointer	src/madness/world/worlddc.h	/^      typedef typename std::iterator_traits<internal_iteratorT>::pointer pointer;$/;"	t	class:madness::WorldContainerIterator
pointer	src/madness/world/worldhashmap.h	/^            typedef datumT* pointer;$/;"	t	class:madness::Hash_private::HashAccessor
pointer	src/madness/world/worldhashmap.h	/^            typedef datumT* pointer;$/;"	t	class:madness::Hash_private::HashIterator
pointer	src/madness/world/worldptr.h	/^            typedef T* pointer;$/;"	t	class:madness::detail::WorldPtr
pointerT	src/madness/world/worldref.h	/^        typedef T* pointerT;$/;"	t	class:madness::RemoteReference
pointer_	src/madness/world/worldptr.h	/^            T* pointer_; \/\/\/< The pointer being referenced.$/;"	m	class:madness::detail::WorldPtr
pointer_	src/madness/world/worldref.h	/^            std::shared_ptr<T> pointer_; \/\/\/< pointer that is remotely referenced$/;"	m	class:madness::detail::RemoteCounterImpl
pointer_	src/madness/world/worldref.h	/^        mutable pointerT pointer_;      \/\/\/< World pointer$/;"	m	class:madness::RemoteReference
pointer_call	src/madness/world/parsec.cc	/^    dague_hook_return_t pointer_call(dague_execution_unit_t *eu, $/;"	f	namespace:madness
pointgroup	src/apps/chem/CalculationParameters.h	/^	std::string pointgroup() const {return get<std::string>("pointgroup");}$/;"	f	struct:madness::CalculationParameters
pointgroup_	src/apps/chem/molecule.h	/^    std::string pointgroup_="c1";$/;"	m	class:madness::Molecule
points	src/madness/mra/legendre.cc	/^    static Tensor<double> points[max_npt+1];$/;"	m	namespace:madness	file:
points	src/madness/mra/tools/quadrature.py	/^    def points(self):$/;"	m	class:Quadrature
poisson	src/apps/chem/PNO.h	/^	std::shared_ptr<real_convolution_3d> poisson;$/;"	m	class:madness::PNO
poisson	src/apps/chem/SCFOperators.h	/^    std::shared_ptr<real_convolution_3d> poisson;$/;"	m	class:madness::Exchange
poisson	src/apps/chem/mp2.h	/^        std::shared_ptr<real_convolution_3d> poisson;$/;"	m	class:madness::MP2
poisson	src/apps/chem/nemo.h	/^	std::shared_ptr<real_convolution_3d> poisson;$/;"	m	class:madness::Nemo
polar	src/apps/polar/moldft.cc	/^    bool polar;           \/\/\/< If true calculate polarizability on$/;"	m	struct:CalculationParameters	file:
polar	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/QDWH.hpp	/^namespace polar {$/;"	n	namespace:elem
polar	src/madness/external/elemental/include/elemental/lapack-like/decomp/Polar/SVD.hpp	/^namespace polar {$/;"	n	namespace:elem
polar_ds	src/apps/polar/moldft.cc	/^    int polar_ds;         \/\/\/< Static or Dynamic$/;"	m	struct:CalculationParameters	file:
polarizability	src/apps/adrian/ResponseParameters.h	/^      bool polarizability;               \/\/\/< Flag to indicate desired property is the polarizability$/;"	m	struct:madness::ResponseParameters
polarizability	src/apps/adrian/TDDFT.cc	/^void TDHF::polarizability(World &world, Tensor<double> polar) {$/;"	f	class:TDHF
polarizability	src/apps/adrian/TDHF2.cc	/^void TDHF::polarizability(World& world,$/;"	f	class:TDHF
polarizability	src/apps/bryan/ResponseParameters.h	/^      bool polarizability;               \/\/\/< Flag to indicate desired property is the polarizability$/;"	m	struct:madness::ResponseParameters
polarizability	src/apps/bryan/TDHF2.cc	/^void TDHF::polarizability(World& world,$/;"	f	class:TDHF
polarizability	src/apps/chem/SCF.cc	/^void SCF::polarizability(World &world)$/;"	f	class:madness::SCF
poly4erfc	src/apps/chem/correlationfactor.h	/^	    Polynomial, Slater, poly4erfc, Two};$/;"	e	enum:madness::NuclearCorrelationFactor::corrfactype
poly4erfc	src/apps/chem/correlationfactor.h	/^    poly4erfc(World& world, const Molecule& mol, const double aa)$/;"	f	class:madness::poly4erfc
poly4erfc	src/apps/chem/correlationfactor.h	/^class poly4erfc : public NuclearCorrelationFactor {$/;"	c	namespace:madness
polyIndex	src/apps/adrian/polynomial.h	/^  static inline unsigned polyIndex(const std::array<unsigned, 3> &pows) {$/;"	f	class:slymer::PolynomialCoeffs
polyIndex	src/apps/bryan/polynomial.h	/^  static inline unsigned polyIndex(const std::array<unsigned, 3> &pows) {$/;"	f	class:slymer::PolynomialCoeffs
polyn	src/apps/chem/xcfunctional.h	/^    static void polyn(const double x, double& p, double& dpdx) {$/;"	f	class:madness::XCfunctional
polyn	src/apps/polar/xcfunctional.h	/^    static void polyn(const double x, double& p, double& dpdx) {$/;"	f	class:madness::XCfunctional
pong	src/madness/world/test_world.cc	/^    void pong(int from, int speed) {$/;"	f	class:Foo
pong_am	src/madness/world/test_world.cc	/^    void pong_am(int from, int speed) {$/;"	f	class:Foo
pool_num	src/madness/world/thread.h	/^        int pool_num; \/\/\/< Stores index of thread in pool or -1.$/;"	m	class:madness::ThreadBase
pool_thread_main	src/madness/world/thread.cc	/^    void* ThreadPool::pool_thread_main(void *v) {$/;"	f	class:madness::ThreadPool
pop	src/apps/adrian/TDDFT.cc	/^static double pop(std::vector<double> &v) {$/;"	f	file:
pop	src/apps/adrian/TDHF.cc	/^static double pop(std::vector<double>& v)$/;"	f	file:
pop	src/apps/adrian/TDHF2.cc	/^static double pop(std::vector<double>& v)$/;"	f	file:
pop	src/apps/bryan/TDHF.cc	/^static double pop(std::vector<double>& v)$/;"	f	file:
pop	src/apps/bryan/TDHF2.cc	/^static double pop(std::vector<double>& v)$/;"	f	file:
pop	src/apps/chem/SCF.cc	/^static double pop(std::vector<double> &v)$/;"	f	namespace:madness
pop	src/madness/external/muParser/muParserStack.h	/^	    TValueType pop()$/;"	f	class:mu::ParserStack
pop	src/madness/world/stack.h	/^        void pop() {$/;"	f	class:madness::Stack
pop_back	src/apps/adrian/ResponseFunction2.h	/^  void pop_back() {$/;"	f	class:madness::ResponseFunction
pop_back	src/apps/bryan/ResponseFunction2.h	/^      void pop_back() {$/;"	f	class:madness::ResponseFunction
pop_front	src/madness/world/dqueue.h	/^        int pop_front(int nmax, T* r, bool wait) {$/;"	f	class:madness::DQueue
pop_front	src/madness/world/dqueue.h	/^        std::pair<T,bool> pop_front(bool wait) {$/;"	f	class:madness::DQueue
poperatorT	src/apps/chem/PNO.h	/^	typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	class:madness::PNO
poperatorT	src/apps/chem/SCF.h	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	namespace:madness
poperatorT	src/apps/chem/nemo.h	/^	typedef std::shared_ptr<real_convolution_3d> poperatorT;$/;"	t	class:madness::Nemo
poperatorT	src/apps/chem/oep.h	/^	typedef std::shared_ptr<real_convolution_3d> poperatorT;$/;"	t	class:madness::OEP
poperatorT	src/apps/hf/eigsolver.h	/^  typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	class:madness::EigSolver
poperatorT	src/apps/hf/esolver.h	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t
poperatorT	src/apps/hf/solver.h	/^    typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	class:madness::Solver
poperatorT	src/apps/moldft/mcpfit.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/apps/moldft/preal.cc	/^typedef std::shared_ptr<real_convolution_3d> poperatorT;$/;"	t	file:
poperatorT	src/apps/moldft/testcosine.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/apps/moldft/testperiodic.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/apps/polar/mcpfit.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/apps/polar/moldft.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/apps/polar/preal.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/apps/polar/testperiodic.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/examples/h2dft.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/examples/hedft.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/examples/hefxc.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/examples/newsolver_lda.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/examples/vnucso.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
poperatorT	src/madness/mra/testbc.cc	/^typedef std::shared_ptr<operatorT> poperatorT;$/;"	t	file:
port_num_	src/madness/external/gtest/src/gtest-internal-inl.h	/^    const string port_num_;$/;"	m	class:testing::internal::StreamingListener::SocketWriter
position	src/apps/adrian/ESInterface.h	/^  std::array<double, 3> position; \/\/\/< The atom's location, in angstroms.$/;"	m	struct:slymer::Atom
position	src/apps/bryan/ESInterface.h	/^  std::array<double, 3> position; \/\/\/< The atom's location, in angstroms.$/;"	m	struct:slymer::Atom
position	src/apps/moldft/fci/crayio.c	/^  off_t position;            \/* current file position in bytes a la lseek *\/$/;"	m	struct:w_file	file:
position_stream	src/madness/misc/position_stream.cc	/^    std::istream& position_stream(std::istream& f, const std::string& tag) {$/;"	f	namespace:madness
posix	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^namespace posix {$/;"	n	namespace:testing::internal
posix	src/madness/external/gtest/src/gtest-port.cc	/^namespace posix {$/;"	n	namespace:testing::internal	file:
posix_memalign	src/madness/world/posixmem.h	/^static inline int posix_memalign(void **memptr, std::size_t alignment, std::size_t size) {$/;"	f
post_checksum	src/madness/world/worldmem.cc	/^static const unsigned char post_checksum = 0xab;$/;"	v	file:
post_flag_parse_init_performed_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool post_flag_parse_init_performed_;$/;"	m	class:testing::internal::UnitTestImpl
post_pending_huge_msg	src/madness/world/worldrmi.cc	/^    void RMI::RmiTask::post_pending_huge_msg() {$/;"	f	class:madness::RMI::RmiTask
post_process_mos	src/apps/chem/MolecularOrbitals.cc	/^void MolecularOrbitals<T,NDIM>::post_process_mos(World& world, const double thresh, const int k) {$/;"	f	class:madness::MolecularOrbitals
post_recv_buf	src/madness/world/worldrmi.cc	/^    void RMI::RmiTask::post_recv_buf(int i) {$/;"	f	class:madness::RMI::RmiTask
post_screening	src/madness/mra/leafop.h	/^    post_screening(const Key<NDIM> &key,const GenTensor<T>& G) const {$/;"	f	class:madness::Leaf_op_other
post_screening	src/madness/mra/leafop.h	/^    post_screening(const Key<NDIM> &key,const GenTensor<T>& coeff) const{$/;"	f	class:madness::Leaf_op
postamble_load	src/madness/world/archive.h	/^            static inline void postamble_load(const Archive& \/*ar*\/) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_load	src/madness/world/buffer_archive.h	/^            static inline void postamble_load(const BufferInputArchive& \/*ar*\/) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_load	src/madness/world/mpi_archive.h	/^            static inline void postamble_load(const MPIInputArchive& ar) {};$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_load	src/madness/world/mpi_archive.h	/^            static inline void postamble_load(const MPIRawInputArchive& ar) {};$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_load	src/madness/world/parallel_archive.h	/^            static inline void postamble_load(const ParallelInputArchive& ar) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_load	src/madness/world/text_fstream_archive.h	/^            static inline void postamble_load(const TextFstreamInputArchive& ar) {$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_store	src/madness/world/archive.h	/^            static inline void postamble_store(const Archive& \/*ar*\/) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_store	src/madness/world/buffer_archive.h	/^            static inline void postamble_store(const BufferOutputArchive& \/*ar*\/) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_store	src/madness/world/mpi_archive.h	/^            static inline void postamble_store(const MPIOutputArchive& ar) {};$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_store	src/madness/world/mpi_archive.h	/^            static inline void postamble_store(const MPIRawOutputArchive& ar) {};$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_store	src/madness/world/parallel_archive.h	/^            static inline void postamble_store(const ParallelOutputArchive& ar) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
postamble_store	src/madness/world/text_fstream_archive.h	/^            static inline void postamble_store(const TextFstreamOutputArchive& ar) {$/;"	f	struct:madness::archive::ArchivePrePostImpl
pot	src/apps/moldft/mcpfit.cc	/^    const CorePotential& pot;$/;"	m	class:CorePotentialFunctor	file:
pot	src/apps/polar/mcpfit.cc	/^    const CorePotential& pot;$/;"	m	class:CorePotentialFunctor	file:
potential	src/apps/adrian/ResponsePotential.h	/^      ResponseFunction potential;                                      \/\/ For storing the ground state$/;"	m	class:madness::ResponsePotential
potential	src/apps/bryan/ResponsePotential.h	/^      ResponseFunction potential;                                      \/\/ For storing the ground state$/;"	m	class:madness::ResponsePotential
potential	src/apps/chem/AC.h	/^	double potential(const Vector<double, NDIM> &r) const{$/;"	f	class:madness::lr_pot_functor
potential	src/apps/chem/SCFOperators.h	/^    const real_function_3d& potential() const {return vcoul;}$/;"	f	class:madness::Coulomb
potential	src/apps/chem/SCFOperators.h	/^    real_function_3d& potential() {return vcoul;}$/;"	f	class:madness::Coulomb
potential	src/apps/chem/corepotential.h	/^    CorePotential potential;$/;"	m	struct:madness::AtomCore
potential	src/apps/chem/corepotential.h	/^    double potential(unsigned int atn, double r) const {$/;"	f	class:madness::CorePotentialManager
potential	src/apps/polar/corepotential.h	/^    CorePotential potential;$/;"	m	struct:AtomCore
potential	src/apps/polar/corepotential.h	/^    double potential(unsigned int atn, double r) const {$/;"	f	class:CorePotentialManager
potential	src/examples/3dharmonic.cc	/^double potential(const coord_3d& r) {$/;"	f
potential	src/madness/mra/testperiodic.cc	/^double potential(const coordT& r) {$/;"	f
potential_derivative	src/apps/chem/corepotential.h	/^    double potential_derivative(unsigned int atn, double xi, double r) const {$/;"	f	class:madness::CorePotentialManager
potential_derivative	src/apps/polar/corepotential.h	/^    double potential_derivative(unsigned int atn, double xi, double r) const {$/;"	f	class:CorePotentialManager
potential_energy_ex	src/apps/chem/CCPotentials.cc	/^  CCPotentials::potential_energy_ex(const CC_vecfunction& bra,const CC_vecfunction& singles_gs,const Pairs<CCPair>& doubles_gs,const CC_vecfunction& singles_ex,const Pairs<CCPair>& doubles_ex,$/;"	f	class:madness::CCPotentials
potential_energy_gs	src/apps/chem/CCPotentials.cc	/^  CCPotentials::potential_energy_gs(const CC_vecfunction& bra,const CC_vecfunction& singles,const Pairs<CCPair>& doubles,const PotentialType& name) const {$/;"	f	class:madness::CCPotentials
potential_radius	src/apps/chem/diamagneticpotentialfactor.h	/^	double potential_radius;$/;"	m	class:madness::Diamagnetic_potential_factor
potential_radius	src/apps/chem/znemo.h	/^	double potential_radius() const {return get<double>("potential_radius");}$/;"	f	class:madness::Nemo_complex_Parameters
potential_singles_ex	src/apps/chem/CCPotentials.cc	/^  CCPotentials::potential_singles_ex(const CC_vecfunction& singles_gs,const Pairs<CCPair>& doubles_gs,const CC_vecfunction& singles_ex,const Pairs<CCPair>& doubles_ex,$/;"	f	class:madness::CCPotentials
potential_singles_gs	src/apps/chem/CCPotentials.cc	/^  CCPotentials::potential_singles_gs(const CC_vecfunction& singles,const Pairs<CCPair>& doubles,const PotentialType& name) const {$/;"	f	class:madness::CCPotentials
potentialmanager	src/apps/chem/SCF.h	/^	std::shared_ptr<PotentialManager> potentialmanager;$/;"	m	class:madness::SCF
potentialmanager	src/apps/chem/correlationfactor.h	/^    std::shared_ptr<PotentialManager> potentialmanager;$/;"	m	class:madness::PseudoNuclearCorrelationFactor
potentialmanager	src/apps/chem/znemo.h	/^	std::shared_ptr<PotentialManager> potentialmanager;$/;"	m	class:madness::Znemo
potentialmanager	src/apps/polar/moldft.cc	/^    std::shared_ptr<PotentialManager> potentialmanager;$/;"	m	struct:Calculation	file:
potentials	src/apps/chem/znemo.h	/^		potentials(World& world, const std::size_t nmo) {$/;"	f	struct:madness::Znemo::potentials
potentials	src/apps/chem/znemo.h	/^	struct potentials {$/;"	s	class:madness::Znemo
potrf_	src/madness/tensor/lapack.cc	/^void potrf_(const char * UPLO,integer *n, complex_real4 *a ,integer *lda , integer *info){$/;"	f
potrf_	src/madness/tensor/lapack.cc	/^void potrf_(const char * UPLO,integer *n, complex_real8 *a ,integer *lda , integer *info){$/;"	f
potrf_	src/madness/tensor/lapack.cc	/^void potrf_(const char * UPLO,integer *n, real4 *a ,integer *lda , integer *info){$/;"	f
potrf_	src/madness/tensor/lapack.cc	/^void potrf_(const char * UPLO,integer *n, real8 *a ,integer *lda , integer *info){$/;"	f
pounder	src/madness/world/test_world.cc	/^void pounder(const WorldContainer<int,Mary>& m, int ind) {$/;"	f
pow	src/apps/adrian/polynomial.cc	/^PolynomialCoeffs PolynomialCoeffs::pow(const unsigned j) const {$/;"	f	class:slymer::PolynomialCoeffs
pow	src/apps/bryan/polynomial.cc	/^PolynomialCoeffs PolynomialCoeffs::pow(const unsigned j) const {$/;"	f	class:slymer::PolynomialCoeffs
pow	src/apps/hf/lda.h	/^static inline double pow(const double* a, const double* b) {$/;"	f
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const double a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const double a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const double a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const double a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const double a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const double a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const int a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const int a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const int a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const int a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const int a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const int a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const int a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long double a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long double a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long double a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long double a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long double a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long double a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long int a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long int a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long int a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long int a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long int a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long int a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const long int a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const mpreal& a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const mpreal& a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const mpreal& a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const mpreal& a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const mpreal& a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const mpreal& a, const mpz_t b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const mpreal& a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const mpreal& a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned int a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned int a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned int a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned int a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned int a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned int a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned int a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/apps/nick/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	src/madness/mra/power.h	/^			static T pow(const T x){$/;"	f	struct:madness::detail::helper
power	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^    Real power;$/;"	m	struct:elem::SignCtrl
power	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^    Real power;$/;"	m	struct:elem::SquareRootCtrl
power	src/madness/mra/power.h	/^    T power(T const x) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power(int base = 2) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<0>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<10>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<12>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<1>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<2>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<3>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<4>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<5>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<6>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<7>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<8>(int base) {$/;"	f	namespace:madness
power	src/madness/mra/power.h	/^    inline int power<9>(int base) {$/;"	f	namespace:madness
prADD_SUB	src/madness/external/muParser/muParserDef.h	/^    prADD_SUB = 3,  \/\/\/< addition$/;"	e	enum:mu::EPrec
prCMP	src/madness/external/muParser/muParserDef.h	/^    prCMP     = 2,  \/\/\/< comparsion operators$/;"	e	enum:mu::EPrec
prINFIX	src/madness/external/muParser/muParserDef.h	/^    prINFIX    = 4, \/\/\/< Signs have a higher priority than ADD_SUB, but lower than power operator$/;"	e	enum:mu::EPrec
prLOGIC	src/madness/external/muParser/muParserDef.h	/^    prLOGIC   = 1,  \/\/\/< logic operators$/;"	e	enum:mu::EPrec
prMUL_DIV	src/madness/external/muParser/muParserDef.h	/^    prMUL_DIV = 4,  \/\/\/< multiplication\/division$/;"	e	enum:mu::EPrec
prPOSTFIX	src/madness/external/muParser/muParserDef.h	/^    prPOSTFIX  = 4  \/\/\/< Postfix operator priority (currently unused)$/;"	e	enum:mu::EPrec
prPOW	src/madness/external/muParser/muParserDef.h	/^    prPOW     = 5,  \/\/\/< power operator priority (highest)$/;"	e	enum:mu::EPrec
pre	src/examples/smooth.h	/^    double pre = 1.0\/M_PI;$/;"	m	struct:slater_kernel
pre_checksum	src/madness/world/worldmem.cc	/^static const unsigned long pre_checksum = 0xdeadbeef;$/;"	v	file:
pre_screening	src/madness/mra/leafop.h	/^    pre_screening(const Key<NDIM> &key) const {$/;"	f	class:madness::Leaf_op
pre_screening	src/madness/mra/leafop.h	/^    pre_screening(const Key<NDIM> &key) const {$/;"	f	class:madness::Leaf_op_other
preamble_load	src/madness/world/archive.h	/^            static inline void preamble_load(const Archive& ar) {$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_load	src/madness/world/buffer_archive.h	/^            static inline void preamble_load(const BufferInputArchive& \/*ar*\/) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_load	src/madness/world/mpi_archive.h	/^            static inline void preamble_load(const MPIInputArchive& ar) {};$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_load	src/madness/world/mpi_archive.h	/^            static inline void preamble_load(const MPIRawInputArchive& ar) {};$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_load	src/madness/world/parallel_archive.h	/^            static inline void preamble_load(const ParallelInputArchive& ar) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_load	src/madness/world/text_fstream_archive.h	/^            static inline void preamble_load(const TextFstreamInputArchive& ar) {$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_store	src/madness/world/archive.h	/^            static inline void preamble_store(const Archive& ar) {$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_store	src/madness/world/buffer_archive.h	/^            static inline void preamble_store(const BufferOutputArchive& \/*ar*\/) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_store	src/madness/world/mpi_archive.h	/^            static void preamble_store(const MPIOutputArchive& ar) {};$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_store	src/madness/world/mpi_archive.h	/^            static void preamble_store(const MPIRawOutputArchive& ar) {};$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_store	src/madness/world/parallel_archive.h	/^            static void preamble_store(const ParallelOutputArchive& ar) {}$/;"	f	struct:madness::archive::ArchivePrePostImpl
preamble_store	src/madness/world/text_fstream_archive.h	/^            static void preamble_store(const TextFstreamOutputArchive& ar) {$/;"	f	struct:madness::archive::ArchivePrePostImpl
precedence	src/apps/chem/QCCalculationParametersBase.h	/^	enum {def, derived, defined} precedence=def;$/;"	m	struct:madness::QCParameter	typeref:enum:madness::QCParameter::__anon47
precond	src/madness/mra/tools/mathutil.py	/^    def precond(g): $/;"	f
predefined_guess	src/apps/chem/PNOGuessFunctions.h	/^	vector_real_function_3d predefined_guess(const std::string name)const{$/;"	f	class:madness::BasisFunctions
predefined_guess	src/apps/chem/PNOParameters.h	/^	std::string predefined_guess()const{ return get<std::string >("predefined");}$/;"	f	class:madness::PNOParameters
prefac	src/apps/chem/test_SCFOperators.cc	/^    double prefac;      \/\/ prefactor to account for unnormalized Gaussian$/;"	m	struct:refpotfunctor	file:
prefactor	src/apps/adrian/gaussian.h	/^  PolynomialCoeffs prefactor;$/;"	m	class:slymer::PrimitiveGaussian
prefactor	src/apps/bryan/gaussian.h	/^  PolynomialCoeffs prefactor;$/;"	m	class:slymer::PrimitiveGaussian
prefactor	src/examples/smooth.h	/^		const double prefactor = 1.0\/M_PI;$/;"	m	struct:apply_kernel_helper::slater_kernel
prefactor	src/examples/smooth.h	/^	const double prefactor = 1.0\/M_PI;$/;"	m	struct:apply_kernel_helper
prefactor	src/examples/smooth.h	/^	const double prefactor = 1.0\/M_PI;$/;"	m	struct:asymptotic_slater
prefix	src/apps/nick/extra.h	/^  std::string prefix; \/\/ Prefix for filenames$/;"	m	struct:InputParameters
prefix	src/apps/nick/tdse1.cc	/^    string prefix;      \/\/ Prefix for filenames$/;"	m	struct:InputParameters	file:
prefix	src/apps/nick/wavef.h	/^const std::string prefix = "data";$/;"	v
prefix	src/apps/tdse/tdse.cc	/^  std::string prefix; \/\/ Prefix for filenames$/;"	m	struct:InputParameters	file:
prefix	src/apps/tdse/tdse.confused.cc	/^  string prefix;      \/\/ Prefix for filenames$/;"	m	struct:InputParameters	file:
prefix	src/apps/tdse/tdse4.cc	/^  std::string prefix;      \/\/ Prefix for filenames$/;"	m	struct:InputParameters	file:
preloadbal	src/apps/tdse/tdse.cc	/^void preloadbal(World& world,$/;"	f
premature_exit_filepath_	src/madness/external/gtest/src/gtest.cc	/^  const char* const premature_exit_filepath_;$/;"	m	class:testing::internal::ScopedPrematureExitFile	file:
prep_tensor	src/madness/mra/test_mra6.cc	/^    Tensor<T> prep_tensor(const std::vector<long>& dim, const TensorFill& f) {$/;"	f	namespace:__anon12
prep_tensor	src/madness/tensor/test_gentensor.cc	/^    Tensor<T> prep_tensor(const std::vector<long>& dim, const TensorFill& f) {$/;"	f	namespace:__anon43
prep_xc_args	src/apps/chem/SCFOperators.cc	/^vecfuncT XCOperator::prep_xc_args(const real_function_3d& arho,$/;"	f	class:madness::XCOperator
prep_xc_args_response	src/apps/chem/SCFOperators.cc	/^void XCOperator::prep_xc_args_response(const real_function_3d& dens_pt,$/;"	f	class:madness::XCOperator
prepare_not_so_simple_map	src/madness/mra/mypmap.h	/^        void prepare_not_so_simple_map(World& world) {$/;"	f	class:madness::MyPmap
prepare_op	src/apps/hf/dft.cc	/^  void DFTCoulombOp<T,NDIM>::prepare_op(Function<double,NDIM> rho)$/;"	f	class:madness::DFTCoulombOp
prepare_op	src/apps/hf/dft.cc	/^  void DFTCoulombPeriodicOp<T,NDIM>::prepare_op(Function<double,NDIM> rho)$/;"	f	class:madness::DFTCoulombPeriodicOp
prepare_op	src/apps/hf/dft.h	/^    void prepare_op(Function<double,NDIM> rho) {}$/;"	f	class:madness::DFTNuclearChargeDensityOp
prepare_op	src/apps/hf/eigsolver.h	/^  virtual void prepare_op(funcT rho) {}$/;"	f	class:madness::EigSolverOp
prepare_op	src/apps/hf/test_hydro.cc	/^    void prepare_op(Function<double,NDIM> rho) {}$/;"	f	class:NuclearChargeDensityOp
prepare_ops	src/apps/hf/eigsolver.cc	/^  void EigSolver<T,NDIM>::prepare_ops()$/;"	f	class:madness::EigSolver
prev	src/madness/external/elemental/external/pmrrr/include/queue.h	/^  task_t     *prev;       \/* ptr to prev. task; NULL if non-existing; *\/$/;"	m	struct:task_aux
prev	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute*	prev;$/;"	m	class:TiXmlAttribute
prev	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlNode*		prev;$/;"	m	class:TiXmlNode
prev	src/madness/tensor/tempspec.py	/^        prev = cur$/;"	v
prev	src/madness/tensor/tempspec.py	/^prev = a[0]$/;"	v
prev	src/madness/world/worldprofile.h	/^        WorldProfileObj* const prev; \/\/\/< Pointer to the entry that called me$/;"	m	class:madness::WorldProfileObj
print	src/apps/chem/AC.h	/^	void print(World& world){$/;"	f	struct:madness::ACParameters
print	src/apps/chem/CCStructures.h	/^    void print()const{$/;"	f	struct:madness::CCTimer
print	src/apps/chem/CCStructures.h	/^    void print(){$/;"	f	struct:madness::CCTimer
print	src/apps/chem/CCStructures.h	/^    void print(const std::pair<double,double> &times)const{$/;"	f	struct:madness::CCTimer
print	src/apps/chem/PNOStructures.h	/^	MyTimer print()const{$/;"	f	struct:madness::MyTimer
print	src/apps/chem/PNOStructures.h	/^	MyTimer print(const std::string& msg)const{$/;"	f	struct:madness::MyTimer
print	src/apps/chem/QCCalculationParametersBase.cc	/^void QCCalculationParametersBase::print(const std::string header,$/;"	f	class:madness::QCCalculationParametersBase
print	src/apps/chem/molecularbasis.cc	/^void AtomicBasisSet::print(const Molecule& molecule) const {$/;"	f	class:madness::AtomicBasisSet
print	src/apps/chem/molecule.cc	/^void Molecule::print() const$/;"	f	class:madness::Molecule
print	src/apps/hf/mentity.cc	/^void MolecularEntity::print() const {$/;"	f	class:MolecularEntity
print	src/apps/hf/molecularbasis.h	/^    void print(const MolecularEntity& mentity) const {$/;"	f	class:AtomicBasisSet
print	src/apps/moldft/mcpfit.cc	/^void print (const tensorT & t) {$/;"	f
print	src/apps/polar/mcpfit.cc	/^void print (const tensorT & t) {$/;"	f
print	src/apps/polar/moldft.cc	/^    void print(World &world) const$/;"	f	struct:CalculationParameters
print	src/apps/polar/molecularbasis.cc	/^void AtomicBasisSet::print(const Molecule& molecule) const {$/;"	f	class:AtomicBasisSet
print	src/apps/polar/molecule.cc	/^void Molecule::print() const {$/;"	f	class:Molecule
print	src/madness/mra/function_common_data.h	/^        void print(std::string line="") const {$/;"	f	class:madness::Timer
print	src/madness/mra/lbdeux.h	/^        void print() const {$/;"	f	class:madness::LBDeuxPmap
print	src/madness/mra/mraimpl.h	/^    void FunctionDefaults<NDIM>::print(){$/;"	f	class:madness::FunctionDefaults
print	src/madness/mra/mypmap.h	/^        void print() const {$/;"	f	class:madness::MyPmap
print	src/madness/world/print.h	/^    void print(const T& t, const Ts&... ts) {$/;"	f	namespace:madness
print	src/madness/world/test_ar.cc	/^    void print() {$/;"	f	class:linked_list
print	src/madness/world/worlddc.h	/^        virtual void print() const {}$/;"	f	class:madness::WorldDCPmapInterface
print	src/madness/world/worldmem.cc	/^    void WorldMemInfo::print() const {$/;"	f	class:madness::WorldMemInfo
print	src/madness/world/worldprofile.cc	/^    void WorldProfile::print(World& world) {$/;"	f	class:madness::WorldProfile
printBasis	src/apps/nick/extra.cc	/^void printBasis(World& world, double Z, double cutoff) {$/;"	f
print_all	src/apps/chem/molecularbasis.cc	/^void AtomicBasisSet::print_all() const {$/;"	f	class:madness::AtomicBasisSet
print_all	src/apps/hf/molecularbasis.h	/^    void print_all() const {$/;"	f	class:AtomicBasisSet
print_all	src/apps/polar/molecularbasis.cc	/^void AtomicBasisSet::print_all() const {$/;"	f	class:AtomicBasisSet
print_anal	src/apps/chem/molecularbasis.h	/^    void print_anal(const Molecule& molecule, const Tensor<T>& v) {$/;"	f	class:madness::AtomicBasisSet
print_anal	src/apps/hf/molecularbasis.h	/^    void print_anal(const MolecularEntity& mentity, const Tensor<T>& v) {$/;"	f	class:AtomicBasisSet
print_anal	src/apps/polar/molecularbasis.h	/^    void print_anal(const Molecule& molecule, const Tensor<T>& v) {$/;"	f	class:AtomicBasisSet
print_and_clear_log	src/apps/chem/test_utilities.h	/^	void print_and_clear_log() {$/;"	f	struct:madness::test_output
print_backtrace	src/madness/world/test_sig.cc	/^void print_backtrace(int fd) {$/;"	f
print_best_per_benchmark	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^def print_best_per_benchmark(results):$/;"	f
print_best_per_benchmark	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^def print_best_per_benchmark(results):$/;"	f
print_centered	src/madness/world/print.cc	/^    void print_centered(const char* s, int column, bool underline) {$/;"	f	namespace:madness
print_character_table	src/apps/chem/pointgroupsymmetry.h	/^	void print_character_table() const {$/;"	f	class:madness::projector_irrep
print_contracted_basis	src/apps/chem/PNOGuessFunctions.h	/^	void print_contracted_basis(std::map<std::string, cbfT >& molbas)const{$/;"	f	class:madness::BasisFunctions
print_convergence	src/apps/chem/znemo.h	/^	bool print_convergence() const {return print_convergence_;}$/;"	f	struct:madness::printleveler
print_convergence_	src/apps/chem/znemo.h	/^	bool print_convergence_=false;$/;"	m	struct:madness::printleveler
print_cube	src/apps/hf/esolver.h	/^void print_cube(World& world, const Function<double,3>& f, int npts)$/;"	f
print_cube	src/apps/hf/esolver.h	/^void print_cube(World& world, const Function<double,3>& f1, const Function<double,3>& f2, int npts)$/;"	f
print_cube	src/apps/hf/esolver.h	/^void print_cube(World& world, const Function<double,3>& f1, const Function<double,3>& f2,$/;"	f
print_data_sizes	src/madness/world/worlddc.h	/^        void print_data_sizes(World& world, const std::string msg="") const {$/;"	f	class:madness::WorldDCPmapInterface
print_debug	src/apps/chem/QCCalculationParametersBase.h	/^	bool print_debug=false;$/;"	m	class:madness::QCCalculationParametersBase
print_debug	src/apps/chem/znemo.h	/^	bool print_debug() const {return print_debug_information_;}$/;"	f	struct:madness::printleveler
print_debug	src/madness/world/dependency_interface.h	/^        constexpr static const bool print_debug = false;  \/\/ change to true to log state changes in {inc,dec,notify}_debug, (debug) ctor, and dtor$/;"	m	class:madness::DependencyInterface
print_debug_information_	src/apps/chem/znemo.h	/^	bool print_debug_information_=false;$/;"	m	struct:madness::printleveler
print_demangled	src/madness/world/thread.h	/^            static void print_demangled(std::ostream& os, const char* symbol) {$/;"	f	class:madness::profiling::TaskEvent
print_energies	src/apps/chem/znemo.h	/^	bool print_energies() const {return print_energies_;}$/;"	f	struct:madness::printleveler
print_energies_	src/apps/chem/znemo.h	/^	bool print_energies_=false;$/;"	m	struct:madness::printleveler
print_energy	src/apps/chem/mp2.h	/^    	void print_energy() const {$/;"	f	class:madness::ElectronPair
print_error	src/madness/world/print.h	/^    void print_error(const T& t, const Ts&... ts) {$/;"	f	namespace:madness
print_events	src/madness/world/thread.h	/^            virtual std::ostream& print_events(std::ostream& os) const {$/;"	f	class:madness::profiling::TaskEventList
print_f12_energies	src/apps/chem/PNOF12Potentials.h	/^	void print_f12_energies(const PairEnergies& pe, const std::string& msg="")const{$/;"	f	class:madness::F12Potentials
print_fock_matrix_eigs	src/apps/hf/solver.h	/^    void print_fock_matrix_eigs(const vecfuncT& wf, const vecfuncT& vwf, KPoint kpoint)$/;"	f	class:madness::Solver
print_grid	src/madness/mra/mraimpl.h	/^    void  FunctionImpl<T,NDIM>::print_grid(const std::string filename) const {$/;"	f	class:madness::FunctionImpl
print_helper	src/madness/world/print.h	/^    inline std::ostream& print_helper(std::ostream& out) {$/;"	f	namespace:madness
print_helper	src/madness/world/print.h	/^    inline std::ostream& print_helper(std::ostream& out,$/;"	f	namespace:madness
print_info	src/apps/chem/diamagneticpotentialfactor.cc	/^void Diamagnetic_potential_factor::print_info() const {$/;"	f	class:madness::Diamagnetic_potential_factor
print_info	src/apps/chem/mp2.cc	/^void MP2::print_info(World& world) const {$/;"	f	class:madness::MP2
print_info	src/apps/chem/pointgroupsymmetry.h	/^	void print_info(World& world) const {$/;"	f	class:madness::projector_irrep
print_info	src/apps/chem/znemo.h	/^    printleveler print_info=printleveler(2);$/;"	m	class:madness::Znemo
print_info	src/apps/moldft/mcpfit.cc	/^    void print_info () {$/;"	f	struct:Calculation
print_info	src/apps/moldft/mcpfit.cc	/^    void print_info () {$/;"	f	struct:CalculationParameters
print_info	src/apps/polar/mcpfit.cc	/^    void print_info () {$/;"	f	struct:Calculation
print_info	src/apps/polar/mcpfit.cc	/^    void print_info () {$/;"	f	struct:CalculationParameters
print_info	src/examples/tdse1d.cc	/^void print_info(World& world, const complex_function_1d& psi, int step) {$/;"	f
print_info	src/examples/testspectralprop.cc	/^void print_info(World& world, double current_time, const complex_function_1d& psi, int step) {$/;"	f
print_info	src/madness/mra/mra.h	/^        void print_info() const {$/;"	f	class:madness::Function
print_info	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::print_info() const {$/;"	f	class:madness::FunctionImpl
print_intermediate	src/apps/chem/CCStructures.h	/^    void print_intermediate(const FuncType type)const{$/;"	f	struct:madness::CCConvolutionOperator
print_justified	src/madness/world/print.cc	/^    void print_justified(const char* s, int column, bool underline) {$/;"	f	namespace:madness
print_level	src/apps/adrian/ResponseParameters.h	/^      int print_level;                   \/\/\/< Controls the amount and style of printing. Higher values print more$/;"	m	struct:madness::ResponseParameters
print_level	src/apps/bryan/ResponseParameters.h	/^      int print_level;                   \/\/\/< Controls the amount and style of printing. Higher values print more$/;"	m	struct:madness::ResponseParameters
print_level	src/apps/chem/CalculationParameters.h	/^	int print_level() const {return get<int>("print_level");}$/;"	f	struct:madness::CalculationParameters
print_level	src/apps/chem/molopt.h	/^        const int print_level;           \/\/< print_level=0 is none; 1 is default; 2 is debug$/;"	m	class:madness::MolOpt
print_line	src/apps/chem/QCCalculationParametersBase.h	/^	std::string print_line(const std::string& key) const {$/;"	f	struct:madness::QCParameter
print_matrices	src/apps/hf/electronicstructureparams.h	/^  bool print_matrices;$/;"	m	struct:madness::ElectronicStructureParams
print_matrix	src/apps/moldft/xmlguess.py	/^def print_matrix(n, m, a):$/;"	f
print_matrix	src/apps/polar/xmlguess.py	/^def print_matrix(n, m, a):$/;"	f
print_matrix_elements	src/apps/hf/dft.h	/^     void print_matrix_elements(const funcT& phii, const funcT& phij)$/;"	f	class:madness::DFT
print_matrix_elements	src/apps/hf/eigsolver.cc	/^  void EigSolver<T,NDIM>::print_matrix_elements(const funcT& phii, const funcT& phij)$/;"	f	class:madness::EigSolver
print_me	src/apps/chem/molecularbasis.cc	/^void AtomicBasisFunction::print_me(std::ostream& s) const {$/;"	f	class:madness::AtomicBasisFunction
print_me	src/apps/hf/molecularbasis.h	/^    void print_me(std::ostream& s) const {$/;"	f	class:AtomicBasisFunction
print_me	src/apps/polar/molecularbasis.cc	/^void AtomicBasisFunction::print_me(std::ostream& s) const {$/;"	f	class:AtomicBasisFunction
print_meminfo	src/madness/world/worldmem.h	/^    template <typename String> void print_meminfo($/;"	f	namespace:madness
print_meminfo_disable	src/madness/world/worldmem.cc	/^  void print_meminfo_disable() {$/;"	f	namespace:madness
print_meminfo_enable	src/madness/world/worldmem.cc	/^  void print_meminfo_enable() {$/;"	f	namespace:madness
print_meminfo_enabled	src/madness/world/worldmem.cc	/^  bool print_meminfo_enabled() {$/;"	f	namespace:madness
print_meminfo_flag_accessor	src/madness/world/worldmem.cc	/^    bool& print_meminfo_flag_accessor() {$/;"	f	namespace:madness::detail
print_molecule	src/apps/adrian/TDDFT.cc	/^void TDHF::print_molecule(World &world) {$/;"	f	class:TDHF
print_molecule	src/apps/adrian/TDHF.cc	/^void TDHF::print_molecule(World &world)$/;"	f	class:TDHF
print_molecule	src/apps/adrian/TDHF2.cc	/^void TDHF::print_molecule(World &world)$/;"	f	class:TDHF
print_molecule	src/apps/bryan/TDHF.cc	/^void TDHF::print_molecule(World &world)$/;"	f	class:TDHF
print_molecule	src/apps/bryan/TDHF2.cc	/^void TDHF::print_molecule(World &world)$/;"	f	class:TDHF
print_mpi_error	src/madness/world/safempi.h	/^        inline void print_mpi_error(const int rc, const char* function,$/;"	f	namespace:SafeMPI::detail
print_mutex_error	src/madness/world/worldmutex.cc	/^        void print_mutex_error(int error_number) {$/;"	f	namespace:madness::detail
print_norms	src/apps/adrian/TDDFT.cc	/^void TDHF::print_norms(World &world, ResponseFunction f) {$/;"	f	class:TDHF
print_norms	src/apps/adrian/TDHF.cc	/^void TDHF::print_norms(World & world,$/;"	f	class:TDHF
print_norms	src/apps/adrian/TDHF2.cc	/^void TDHF::print_norms(World & world,$/;"	f	class:TDHF
print_norms	src/apps/adrian/test_ops.cc	/^void print_norms(World & world,$/;"	f
print_norms	src/apps/bryan/TDHF.cc	/^void TDHF::print_norms(World & world,$/;"	f	class:TDHF
print_norms	src/apps/bryan/TDHF2.cc	/^void TDHF::print_norms(World & world,$/;"	f	class:TDHF
print_norms	src/apps/bryan/test_ops.cc	/^void print_norms(World & world,$/;"	f
print_nothing_	src/apps/chem/znemo.h	/^	bool print_nothing_=true;$/;"	m	struct:madness::printleveler
print_options	src/apps/chem/mp2.h	/^        void print_options(const std::string option, const T val) const {$/;"	f	class:madness::MP2
print_orbens	src/apps/chem/oep.h	/^    void print_orbens(const tensorT orbens, const double shift = 0.0) const {$/;"	f	class:madness::OEP
print_order	src/apps/chem/QCCalculationParametersBase.h	/^	int print_order=0;		\/\/ use this for printing the parameters in the same order as they are defined$/;"	m	struct:madness::QCParameter
print_pair_energies	src/apps/chem/PNOF12Potentials.cpp	/^void F12Potentials::print_pair_energies(const PNOPairs& pairs,$/;"	f	class:madness::F12Potentials
print_pair_energies	src/apps/chem/PNOF12Potentials.cpp	/^void F12Potentials::print_pair_energies(const std::valarray<double>& es, const std::valarray<double>& et, const std::string& msg, const PairType& type) const{$/;"	f	class:madness::F12Potentials
print_params	src/apps/adrian/GroundParameters.h	/^      void print_params() const$/;"	f	struct:madness::GroundParameters
print_params	src/apps/adrian/ResponseParameters.h	/^      void print_params() const$/;"	f	struct:madness::ResponseParameters
print_params	src/apps/bryan/GroundParameters.h	/^      void print_params() const$/;"	f	struct:madness::GroundParameters
print_params	src/apps/bryan/ResponseParameters.h	/^      void print_params() const$/;"	f	struct:madness::ResponseParameters
print_plane	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::print_plane(const std::string filename, const int xaxis, const int yaxis, const coordT& el2) {$/;"	f	class:madness::FunctionImpl
print_plane_local	src/madness/mra/mraimpl.h	/^    Tensor<double> FunctionImpl<T,NDIM>::print_plane_local(const int xaxis, const int yaxis, const coordT& el2) {$/;"	f	class:madness::FunctionImpl
print_potential_matrix_eigs	src/apps/hf/solver.h	/^    void print_potential_matrix_eigs(const vecfuncT& wf, const vecfuncT& vwf)$/;"	f	class:madness::Solver
print_precedence	src/apps/chem/QCCalculationParametersBase.h	/^	std::string print_precedence() const {$/;"	f	struct:madness::QCParameter
print_psdot	src/madness/mra/funcplot.h	/^        static void print_psdot(FILE *f, double x, double y, double color) {$/;"	f	struct:madness::trajectory
print_ranks	src/apps/chem/PNO.cpp	/^void PNO::print_ranks(const PNOPairs& pairs)const{$/;"	f	class:madness::PNO
print_revision_information	src/madness/misc/gitinfo.cc	/^        std::string print_revision_information() {$/;"	f	namespace:madness::info
print_seq	src/madness/world/print_seq.h	/^    void print_seq(World& world, const A& a) {$/;"	f	namespace:madness
print_seq	src/madness/world/print_seq.h	/^    void print_seq(World& world, const A& a, const B& b) {$/;"	f	namespace:madness
print_seq	src/madness/world/print_seq.h	/^    void print_seq(World& world, const A& a, const B& b, const C& c) {$/;"	f	namespace:madness
print_seq	src/madness/world/print_seq.h	/^    void print_seq(World& world, const A& a, const B& b, const C& c, const D& d) {$/;"	f	namespace:madness
print_setup	src/apps/chem/znemo.h	/^	bool print_setup() const {return print_setup_;}$/;"	f	struct:madness::printleveler
print_setup_	src/apps/chem/znemo.h	/^	bool print_setup_=false;$/;"	m	struct:madness::printleveler
print_size	src/apps/chem/CCPotentials.h	/^    void print_size(const Function<double,NDIM> &f, const std::string &msg, const bool print=true)const{$/;"	f	class:madness::CCPotentials
print_size	src/apps/chem/CCStructures.cc	/^  CCPairFunction::print_size() const {$/;"	f	class:madness::CCPairFunction
print_size	src/apps/chem/CCStructures.cc	/^  CC_vecfunction::print_size(const std::string& msg) const {$/;"	f	class:madness::CC_vecfunction
print_size	src/madness/mra/mra.h	/^        void print_size(const std::string name) const {$/;"	f	class:madness::Function
print_size	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::print_size(const std::string name) const {$/;"	f	class:madness::FunctionImpl
print_size	src/madness/mra/vmra.h	/^void print_size(World& world, const std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
print_stats	src/apps/nick/tdse1.cc	/^void print_stats(World& world, int step, double t, const functionT& v,$/;"	f
print_stats	src/apps/tdse/tdse.cc	/^void print_stats(World& world, int step, double t, const functionT& v,$/;"	f
print_stats	src/apps/tdse/tdse.confused.cc	/^void print_stats(World& world, int step, double t, const functionT& v,$/;"	f
print_stats	src/apps/tdse/tdse4.cc	/^void print_stats(World& world, int step, double t, const functionT& pote,  const functionT& potn, const functionT& potf,$/;"	f
print_stats	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::print_stats() const {$/;"	f	class:madness::FunctionImpl
print_stats	src/madness/world/world.cc	/^    void print_stats(World& world) {$/;"	f	namespace:madness
print_stats	src/madness/world/worldhashmap.h	/^        void print_stats() const {$/;"	f	class:madness::ConcurrentHashMap
print_stats_header	src/apps/nick/tdse1.cc	/^void print_stats_header(World& world) {$/;"	f
print_stats_header	src/apps/tdse/tdse.cc	/^void print_stats_header(World& world) {$/;"	f
print_stats_header	src/apps/tdse/tdse.confused.cc	/^void print_stats_header(World& world) {$/;"	f
print_stats_header	src/apps/tdse/tdse4.cc	/^void print_stats_header(World& world) {$/;"	f
print_tensor2d	src/apps/hf/solver.h	/^    void print_tensor2d(ostream& os, Tensor<Q> t)$/;"	f	class:madness::Solver
print_time_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool print_time_;$/;"	m	class:testing::internal::GTestFlagSaver
print_timer	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::print_timer() const {$/;"	f	class:madness::FunctionImpl
print_timer	src/madness/mra/operator.h	/^        void print_timer() const {$/;"	f	class:madness::SeparatedConvolution
print_timings	src/apps/chem/SCF.cc	/^static bool print_timings = false;$/;"	m	namespace:madness	file:
print_timings	src/apps/chem/znemo.h	/^	bool print_timings() const {return print_timings_;}$/;"	f	struct:madness::printleveler
print_timings_	src/apps/chem/znemo.h	/^	bool print_timings_=false;$/;"	m	struct:madness::printleveler
print_to_string	src/apps/chem/QCCalculationParametersBase.cc	/^std::string QCCalculationParametersBase::print_to_string(bool non_defaults_only) const {$/;"	f	class:madness::QCCalculationParametersBase
print_top_n_variants	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^def print_top_n_variants(results, n=10):$/;"	f
print_top_n_variants	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^def print_top_n_variants(results, n=10):$/;"	f
print_tree	src/examples/compiler/mra-driver.hh	/^    void print_tree(std::ostream& file) const {$/;"	f	class:mra_driver
print_tree	src/examples/compiler/mra-driver.hh	/^    void print_tree(std::ostream& file, int depth=0) const {$/;"	f	class:Exp
print_tree	src/madness/mra/lbdeux.h	/^        void print_tree(const keyT& key = keyT(0)) {$/;"	f	class:madness::LoadBalanceDeux
print_tree	src/madness/mra/mra.h	/^        void print_tree(std::ostream& os = std::cout) const {$/;"	f	class:madness::Function
print_tree	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::print_tree(std::ostream& os, Level maxlevel) const {$/;"	f	class:madness::FunctionImpl
print_tree_graphviz	src/madness/mra/mra.h	/^        void print_tree_graphviz(std::ostream& os = std::cout) const {$/;"	f	class:madness::Function
print_tree_graphviz	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::print_tree_graphviz(std::ostream& os, Level maxlevel) const {$/;"	f	class:madness::FunctionImpl
print_vector	src/apps/moldft/xmlguess.py	/^def print_vector(n, a):$/;"	f
print_vector	src/apps/polar/xmlguess.py	/^def print_vector(n, a):$/;"	f
print_warnings	src/apps/chem/CCStructures.h	/^    void print_warnings()const{$/;"	f	struct:madness::CCMessenger
print_xfunctions	src/apps/chem/TDHF.cc	/^void TDHF::print_xfunctions(const std::vector<CC_vecfunction> & f, const bool& fullinfo)const{$/;"	f	class:madness::TDHF
printfunc	src/apps/hf/test_he.cc	/^void printfunc(const World& world, Function<double,3> f, int npts)$/;"	f
printlevel	src/apps/chem/zcis.h	/^	int printlevel() const {return get<int>("printlevel");};$/;"	f	class:madness::Complex_CIS_Parameters
printlevel	src/apps/chem/znemo.h	/^	int printlevel() const {return get<int>("printlevel");}$/;"	f	class:madness::Nemo_complex_Parameters
printleveler	src/apps/chem/znemo.h	/^	printleveler(int printlevel) {$/;"	f	struct:madness::printleveler
printleveler	src/apps/chem/znemo.h	/^struct printleveler {$/;"	s	namespace:madness
printmatrix	src/madness/mra/tools/mathutil.py	/^def printmatrix(a): $/;"	f
printmatrix	src/madness/mra/tools/twoscalecoeffs.py	/^from mathutil import printvector, printmatrix, dot$/;"	i
printmutex	src/madness/world/worldmutex.cc	/^        Mutex printmutex;$/;"	m	namespace:madness::detail	file:
printout	src/apps/interior_bc/test_problems.h	/^        void printout() const {$/;"	f	class:EmbeddedDirichlet
printtest	src/apps/chem/molecular_optimizer.h	/^	bool printtest() const {return get<bool>("printtest");}$/;"	f	class:madness::MolecularOptimizationParameters
printtest	src/madness/tensor/solvers.h	/^        bool printtest;$/;"	m	class:madness::QuasiNewton
printvector	src/madness/mra/tools/mathutil.py	/^def printvector(a): $/;"	f
printvector	src/madness/mra/tools/twoscalecoeffs.py	/^from mathutil import printvector, printmatrix, dot$/;"	i
probe	src/madness/world/dependency_interface.h	/^        bool probe() const {$/;"	f	class:madness::DependencyInterface
probe	src/madness/world/future.h	/^        bool probe() const {$/;"	f	class:madness::Future
probe	src/madness/world/future.h	/^        inline bool probe() const {$/;"	f	class:madness::Future
probe	src/madness/world/future.h	/^        inline bool probe() const {$/;"	f	class:madness::FutureImpl
probe	src/madness/world/future.h	/^        static bool probe() {$/;"	f	class:madness::Future
probe	src/madness/world/worlddc.h	/^        bool probe(const keyT& key) const {$/;"	f	class:madness::WorldContainer
probe	src/madness/world/worlddc.h	/^        bool probe(const keyT& key) const {$/;"	f	class:madness::WorldContainerImpl
problem_name	src/apps/interior_bc/test_problems.h	/^        std::string problem_name;$/;"	m	class:EmbeddedDirichlet
problem_specific_info	src/apps/interior_bc/test_problems.h	/^        std::string problem_specific_info;$/;"	m	class:EmbeddedDirichlet
proc	src/madness/mra/lbdeux.h	/^            int proc;$/;"	m	struct:madness::LoadBalanceDeux::CostPerProc
proc	src/madness/world/distributed_id.h	/^        ProcessID proc() const { return proc_; }$/;"	f	class:madness::ProcessKey
proc_	src/madness/world/distributed_id.h	/^        ProcessID proc_; \/\/\/< The process that generated the key.$/;"	m	class:madness::ProcessKey
proc_W_begin	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        proc_W_begin;$/;"	m	struct:__anon16
proc_W_end	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        proc_W_end;$/;"	m	struct:__anon16
proc_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} proc_t;$/;"	t	typeref:struct:__anon24
process_coldim	src/apps/ii/systolic.h	/^        int64_t process_coldim() const {return Pcoldim;}$/;"	f	class:madness::DistributedMatrix
process_coldim	src/madness/tensor/distributed_matrix.h	/^        int64_t process_coldim() const {return Pcoldim;}$/;"	f	class:madness::DistributedMatrixDistribution
process_pending	src/madness/world/world_object.h	/^        void process_pending() {$/;"	f	class:madness::WorldObject
process_pending	src/madness/world/worlddc.h	/^        inline void process_pending() {$/;"	f	class:madness::WorldContainer
process_rowdim	src/apps/ii/systolic.h	/^        int64_t process_rowdim() const {return Prowdim;}$/;"	f	class:madness::DistributedMatrix
process_rowdim	src/madness/tensor/distributed_matrix.h	/^        int64_t process_rowdim() const {return Prowdim;}$/;"	f	class:madness::DistributedMatrixDistribution
process_some	src/madness/world/worldrmi.cc	/^    void RMI::RmiTask::process_some() {$/;"	f	class:madness::RMI::RmiTask
procinfo	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  proc_t       *procinfo;$/;"	m	struct:__anon31
producer_tid	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        producer_tid; \/\/ not longer needed$/;"	m	struct:__anon17
product	src/madness/mra/testsuite.cc	/^inline T product(L l, R r) {$/;"	f
product	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^from itertools import product$/;"	i
product	src/madness/tensor/mtxmq_graveyard/new_mtxmq/main.py	/^from itertools import permutations, product$/;"	i
product	src/madness/tensor/tensor.h	/^        T product() const {$/;"	f	class:madness::Tensor
product	src/madness/world/worldgop.h	/^        inline void product(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
profile	src/madness/mra/tools/longfloat.py	/^    import profile$/;"	i
profile_do_print	src/madness/world/worldprofile.cc	/^    static void profile_do_print(World& world, const std::vector<WorldProfileEntry>& v, bool use_inclusive) {$/;"	f	namespace:madness
profile_do_print_comms	src/madness/world/worldprofile.cc	/^    static void profile_do_print_comms(World& world, const std::vector<WorldProfileEntry>& v) {$/;"	f	namespace:madness
profiler	src/madness/world/thread.h	/^        profiling::TaskProfiler& profiler() {$/;"	f	class:madness::ThreadPoolThread
profiler_	src/madness/world/thread.h	/^        profiling::TaskProfiler profiler_; \/\/\/< \\todo Description needed.$/;"	m	class:madness::ThreadPoolThread
profiling	src/madness.h	/^    namespace profiling {$/;"	n	namespace:madness
profiling	src/madness/world/thread.cc	/^    namespace profiling {$/;"	n	namespace:madness	file:
profiling	src/madness/world/thread.h	/^    namespace profiling {$/;"	n	namespace:madness
program	src/examples/compiler/mra-driver.hh	/^    std::vector<Exp*> program;                 \/\/ The full AST$/;"	m	class:mra_driver
progress	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^    bool progress;$/;"	m	struct:elem::SdcCtrl
progress	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    bool progress;$/;"	m	struct:elem::HermitianSdcCtrl
progress	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^    bool progress;$/;"	m	struct:elem::SignCtrl
progress	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^    bool progress;$/;"	m	struct:elem::SquareRootCtrl
progress	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    bool progress;$/;"	m	struct:elem::PseudospecCtrl
proj_p_1_x_ne	src/apps/polar/gth_pseudopotential.h	/^double proj_p_1_x_ne(const coord_3d& r) {$/;"	f
proj_p_1_y_ne	src/apps/polar/gth_pseudopotential.h	/^double proj_p_1_y_ne(const coord_3d& r) {$/;"	f
proj_p_1_z_ne	src/apps/polar/gth_pseudopotential.h	/^double proj_p_1_z_ne(const coord_3d& r) {$/;"	f
proj_p_2_x_ne	src/apps/polar/gth_pseudopotential.h	/^double proj_p_2_x_ne(const coord_3d& r) {$/;"	f
proj_p_2_y_ne	src/apps/polar/gth_pseudopotential.h	/^double proj_p_2_y_ne(const coord_3d& r) {$/;"	f
proj_p_2_z_ne	src/apps/polar/gth_pseudopotential.h	/^double proj_p_2_z_ne(const coord_3d& r) {$/;"	f
proj_s_1_ne	src/apps/polar/gth_pseudopotential.h	/^double proj_s_1_ne(const coord_3d& r) {$/;"	f
proj_s_2_ne	src/apps/polar/gth_pseudopotential.h	/^double proj_s_2_ne(const coord_3d& r) {$/;"	f
project	src/apps/chem/SCF.cc	/^void SCF::project(World &world)$/;"	f	class:madness::SCF
project	src/apps/polar/moldft.cc	/^    void project(World &world)$/;"	f	struct:Calculation
project	src/madness/mra/mraimpl.h	/^    Tensor<T> FunctionImpl<T,NDIM>::project(const keyT& key) const {$/;"	f	class:madness::FunctionImpl
project	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::project(const implT& old, bool fence) {$/;"	f	class:madness::FunctionImpl
projectL	src/apps/nick/projPsi.cc	/^void projectL(World& world, const double L, const int wf, const int n, const int lMAX, const double cutoff) {$/;"	f
projectPsi	src/apps/nick/projPsi.cc	/^void projectPsi(World& world, std::vector<std::string> boundList, std::vector<std::string> unboundList, const double Z, double cutoff) {$/;"	f
projectZdip	src/apps/nick/extra.cc	/^void projectZdip(World& world, std::vector<WF> stateList) {$/;"	f
project_ao	src/apps/chem/MolecularOrbitals.cc	/^void MolecularOrbitals<T,NDIM>::project_ao(World& world, const Tensor<T>& Saomo,$/;"	f	class:madness::MolecularOrbitals
project_ao_basis	src/apps/chem/SCF.cc	/^vecfuncT SCF::project_ao_basis(World &world, const AtomicBasisSet &aobasis)$/;"	f	class:madness::SCF
project_ao_basis	src/apps/hf/solver.h	/^    vecfuncT project_ao_basis(World& world, KPoint kpt) {$/;"	f	class:madness::Solver
project_ao_basis	src/apps/polar/moldft.cc	/^    void project_ao_basis(World &world)$/;"	f	struct:Calculation
project_ao_basis_only	src/apps/chem/SCF.cc	/^vecfuncT SCF::project_ao_basis_only(World &world, const AtomicBasisSet &aobasis,$/;"	f	class:madness::SCF
project_on_irreps	src/apps/chem/pointgroupsymmetry.cc	/^std::vector<Function<T,NDIM> > projector_irrep::project_on_irreps($/;"	f	class:madness::projector_irrep
project_out	src/apps/chem/CCStructures.cc	/^  real_function_3d CCPairFunction::project_out(const CCFunction &f,const size_t particle)const{$/;"	f	class:madness::CCPairFunction
project_out	src/madness/mra/funcimpl.h	/^        void project_out(FunctionImpl<T,NDIM-LDIM>* result, const FunctionImpl<T,LDIM>* gimpl,$/;"	f	class:madness::FunctionImpl
project_out	src/madness/mra/mra.h	/^        Function<TENSOR_RESULT_TYPE(T,R),NDIM-LDIM> project_out(const Function<R,LDIM>& g, const int dim) const {$/;"	f	class:madness::Function
project_out2	src/madness/mra/funcimpl.h	/^        void project_out2(const FunctionImpl<T,LDIM+NDIM>* f, const FunctionImpl<T,LDIM>* g, const int dim) {$/;"	f	class:madness::FunctionImpl
project_out_decomposed	src/apps/chem/CCStructures.cc	/^  real_function_3d CCPairFunction::project_out_decomposed(const real_function_3d &f,const size_t particle)const{$/;"	f	class:madness::CCPairFunction
project_out_op	src/madness/mra/funcimpl.h	/^            project_out_op() {}$/;"	f	struct:madness::FunctionImpl::project_out_op
project_out_op	src/madness/mra/funcimpl.h	/^            project_out_op(const implT* fimpl, implL1* result, const ctL& iag, const int dim)$/;"	f	struct:madness::FunctionImpl::project_out_op
project_out_op	src/madness/mra/funcimpl.h	/^            project_out_op(const project_out_op& other)$/;"	f	struct:madness::FunctionImpl::project_out_op
project_out_op	src/madness/mra/funcimpl.h	/^        struct project_out_op {$/;"	s	class:madness::FunctionImpl
project_out_op_decomposed	src/apps/chem/CCStructures.cc	/^  real_function_3d CCPairFunction::project_out_op_decomposed(const CCFunction &f, const size_t particle)const{$/;"	f	class:madness::CCPairFunction
project_potential_basis	src/apps/moldft/mcpfit.cc	/^    functionT project_potential_basis (World & world, CorePotential & cp, int i)$/;"	f	struct:Calculation
project_potential_basis	src/apps/polar/mcpfit.cc	/^    functionT project_potential_basis (World & world, CorePotential & cp, int i)$/;"	f	struct:Calculation
project_randomize	src/madness/mra/funcdefaults.h	/^        static bool project_randomize; \/\/\/< If true use randomization for load balancing in project\/refine$/;"	m	class:madness::FunctionDefaults
project_randomize	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> bool FunctionDefaults<NDIM>::project_randomize;$/;"	m	class:madness::FunctionDefaults
project_refine_op	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::project_refine_op(const keyT& key,$/;"	f	class:madness::FunctionImpl
projector	src/apps/adrian/ResponsePotential.h	/^      QProjector<double,3> projector;                                  \/\/ Will project out ground state$/;"	m	class:madness::ResponsePotential
projector	src/apps/bryan/ResponsePotential.h	/^      QProjector<double,3> projector;                                  \/\/ Will project out ground state$/;"	m	class:madness::ResponsePotential
projector_external_dof	src/apps/chem/molecular_optimizer.h	/^    static Tensor<double> projector_external_dof(const Molecule& mol,$/;"	f	class:madness::MolecularOptimizer
projector_external_dof	src/apps/chem/vibanal.cc	/^Tensor<double> projector_external_dof(const Molecule& mol) {$/;"	f
projector_irrep	src/apps/chem/pointgroupsymmetry.h	/^	projector_irrep(std::string pointgroup, std::string irrep="all")$/;"	f	class:madness::projector_irrep
projector_irrep	src/apps/chem/pointgroupsymmetry.h	/^class projector_irrep {$/;"	c	namespace:madness
projs	src/apps/polar/gth_pseudopotential.h	/^    vector_real_function_3d projs;$/;"	m	class:ProjStore
propagate	src/apps/chem/SCF.cc	/^void SCF::propagate(World &world, double omega, int step0)$/;"	f	class:madness::SCF
propagate	src/apps/nick/tdse1.cc	/^void propagate(World& world, int step0) {$/;"	f
propagate	src/apps/tdse/tdse.cc	/^void propagate(World& world, int step0) {$/;"	f
propagate	src/apps/tdse/tdse.confused.cc	/^void propagate(World& world, int step0) {$/;"	f
propagate	src/apps/tdse/tdse4.cc	/^void propagate(World& world, functionT& pote, functionT& potn, functionT& pot, int step0) {$/;"	f
propagate	src/examples/tdse_example.cc	/^void propagate(World& world, functionT& potn, functionT& psi0, double& eps) {$/;"	f
properties	src/apps/adrian/ESInterface.h	/^  const Properties::Properties &properties; \/\/\/< Publically accessible list of read properties.$/;"	m	class:slymer::ES_Interface
properties	src/apps/bryan/ESInterface.h	/^  const Properties::Properties &properties; \/\/\/< Publically accessible list of read properties.$/;"	m	class:slymer::ES_Interface
property	src/apps/adrian/ResponseParameters.h	/^      bool property;                     \/\/\/< Flag that this is a properties calculation$/;"	m	struct:madness::ResponseParameters
property	src/apps/bryan/ResponseParameters.h	/^      bool property;                     \/\/\/< Flag that this is a properties calculation$/;"	m	struct:madness::ResponseParameters
proto2	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^namespace proto2 { class Message; }$/;"	n
protocol	src/apps/chem/CalculationParameters.h	/^	std::vector<double> protocol() const {return get<std::vector<double> >("protocol");}$/;"	f	struct:madness::CalculationParameters
protocol	src/apps/chem/PNOParameters.h	/^	std::vector<std::vector<double> > protocol()const { return get<std::vector<std::vector<double> > >("protocol");}$/;"	f	class:madness::PNOParameters
protocol_data	src/apps/adrian/ResponseParameters.h	/^      std::vector<double> protocol_data; \/\/\/< Different thresholds for truncation$/;"	m	struct:madness::ResponseParameters
protocol_data	src/apps/bryan/ResponseParameters.h	/^      std::vector<double> protocol_data; \/\/\/< Different thresholds for truncation$/;"	m	struct:madness::ResponseParameters
protocol_data	src/apps/polar/moldft.cc	/^    std::vector<double> protocol_data; \/\/\/< Calculation protocol$/;"	m	struct:CalculationParameters	file:
proton_electron_mass_ratio	src/madness/constants.h	/^        const double proton_electron_mass_ratio = 1836.15267247 ; \/\/      0.00000080$/;"	m	namespace:madness::constants
proton_g_factor	src/madness/constants.h	/^        const double proton_g_factor = 5.585694713 ; \/\/        0.000000046         $/;"	m	namespace:madness::constants
proton_gyromagnetic_ratio	src/madness/constants.h	/^        const double proton_gyromagnetic_ratio = 2.675222099e8 ; \/\/     0.000000070 e8      s^-1 T^-1$/;"	m	namespace:madness::constants
proton_magnetic_moment	src/madness/constants.h	/^        const double proton_magnetic_moment = 1.410606662e-26 ; \/\/   0.000000037e-26    J T^-1$/;"	m	namespace:madness::constants
proton_mass	src/madness/constants.h	/^        const double proton_mass = 1.672621637e-27 ; \/\/   0.000000083e-27    kg$/;"	m	namespace:madness::constants
provides_coeff	src/madness/mra/function_interface.h	/^		bool provides_coeff() const {$/;"	f	class:madness::CompositeFunctorInterface
provides_coeff	src/madness/mra/function_interface.h	/^		bool provides_coeff() const {$/;"	f	class:madness::TwoElectronInterface
provides_coeff	src/madness/mra/function_interface.h	/^	    virtual bool provides_coeff() const {$/;"	f	class:madness::FunctionFunctorInterface
provides_coeff	src/madness/mra/function_interface.h	/^        bool provides_coeff() const {return false;}$/;"	f	class:madness::FunctionInterface
provides_gradient	src/apps/chem/SCF.h	/^	bool provides_gradient() const {return true;}$/;"	f	class:madness::MolecularEnergy
provides_gradient	src/apps/chem/mp2.h	/^        bool provides_gradient() const {return true;}$/;"	f	class:madness::HartreeFock
provides_gradient	src/apps/chem/nemo.h	/^	bool provides_gradient() const {return true;}$/;"	f	class:madness::Nemo
provides_gradient	src/apps/moldft/mcpfit.cc	/^    bool provides_gradient() const {return true;}$/;"	f	struct:CoreFittingTarget
provides_gradient	src/apps/polar/mcpfit.cc	/^    bool provides_gradient() const {return true;}$/;"	f	struct:CoreFittingTarget
provides_gradient	src/apps/polar/moldft.cc	/^    bool provides_gradient() const { return true; }$/;"	f	class:MolecularEnergy
provides_gradient	src/madness/tensor/gfit.cc	/^    bool provides_gradient() const {return true;}$/;"	f	class:Fred
provides_gradient	src/madness/tensor/kain.cc	/^    bool provides_gradient() const {return true;}$/;"	f	struct:Test
provides_gradient	src/madness/tensor/kain.cc	/^    bool provides_gradient() const {return true;}$/;"	f	struct:Test2
provides_gradient	src/madness/tensor/solvers.h	/^        virtual bool provides_gradient() const {return false;}$/;"	f	struct:madness::OptimizationTargetInterface
provides_gradient	src/madness/tensor/test_solvers.cc	/^    bool provides_gradient() const {return true;}$/;"	f	struct:Test
provides_gradient	src/madness/tensor/test_solvers.cc	/^    bool provides_gradient() const {return true;}$/;"	f	struct:Test2
provides_jacobian	src/madness/tensor/solvers.h	/^        virtual bool provides_jacobian() const {return false;}$/;"	f	struct:madness::SolverTargetInterface
prthresh	src/apps/moldft/fci/fci.F	/^      double precision thresh, prthresh,/;"	v	program:fci
pseudo_atom	src/apps/chem/molecule.h	/^    bool pseudo_atom;           \/\/\/< Indicates if this atom uses a pseudopotential$/;"	m	class:madness::Atom
psi	src/apps/ii/hatom_energy.cc	/^double psi(const Vector<double,3>& r) {$/;"	f
psi	src/examples/hatom_energy.cc	/^double psi(const Vector<double,3>& r) {$/;"	f
psi	src/madness/mra/tools/twoscalecoeffs.py	/^def psi(x,k,g0,g1):$/;"	f
psi0	src/madness/mra/testqm.cc	/^double_complex psi0(const coord_1d& r) {$/;"	f
psi_exact	src/examples/tdse1d.cc	/^double_complex psi_exact(const coord_1d& r) {$/;"	f
psi_func_be1	src/apps/hf/test_be.cc	/^static double psi_func_be1(const coordT& rr)$/;"	f	file:
psi_func_be1	src/apps/hf/test_hf.cc	/^static double psi_func_be1(const coordT& rr)$/;"	f	file:
psi_func_be2	src/apps/hf/test_be.cc	/^static double psi_func_be2(const coordT& rr)$/;"	f	file:
psi_func_be2	src/apps/hf/test_hf.cc	/^static double psi_func_be2(const coordT& rr)$/;"	f	file:
psi_func_h2	src/apps/hf/test_hf.cc	/^double psi_func_h2(const Vector<double,3>& r)$/;"	f
psi_func_he	src/apps/hf/test_coulomb.cc	/^static double psi_func_he(const coordT3d& r)$/;"	f	file:
psi_func_he	src/apps/hf/test_he.cc	/^static double psi_func_he(const coordT& r)$/;"	f	file:
psi_func_he	src/apps/hf/test_hf.cc	/^static double psi_func_he(const coordT& r)$/;"	f	file:
psi_func_hydro	src/apps/hf/test_hydro.cc	/^double psi_func_hydro(const Vector<double,3>& r)$/;"	f
psp_calc	src/apps/chem/CalculationParameters.h	/^	bool psp_calc() const {return get<bool>("psp_calc");}$/;"	f	struct:madness::CalculationParameters
pspec	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Analytic.hpp	/^namespace pspec {$/;"	n	namespace:elem
pspec	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRA.hpp	/^namespace pspec {$/;"	n	namespace:elem
pspec	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/IRL.hpp	/^namespace pspec {$/;"	n	namespace:elem
pspec	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Lanczos.hpp	/^namespace pspec {$/;"	n	namespace:elem
pspec	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Power.hpp	/^namespace pspec {$/;"	n	namespace:elem
pspec	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/BasicMath.hpp	/^namespace pspec {$/;"	n	namespace:elem
pspec	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Rearrange.hpp	/^namespace pspec {$/;"	n	namespace:elem
pspec	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^namespace pspec {$/;"	n	namespace:elem
pstrf_	src/madness/tensor/lapack.cc	/^void pstrf_(const char * UPLO,integer *n, complex_real4 *a ,integer* lda, integer *piv, integer* rank, real4* tol, complex_real4* work , integer *info){$/;"	f
pstrf_	src/madness/tensor/lapack.cc	/^void pstrf_(const char * UPLO,integer *n, complex_real8 *a ,integer* lda, integer *piv, integer* rank, real8* tol, complex_real8* work , integer *info){$/;"	f
pstrf_	src/madness/tensor/lapack.cc	/^void pstrf_(const char * UPLO,integer *n, real4 *a ,integer* lda, integer *piv, integer* rank, real4* tol, real4* work , integer *info){$/;"	f
pstrf_	src/madness/tensor/lapack.cc	/^void pstrf_(const char * UPLO,integer *n, real8 *a ,integer* lda, integer *piv, integer* rank, real8* tol, real8* work , integer *info){$/;"	f
pthread_spin_destroy	src/madness/world/worldmutex.h	/^inline int pthread_spin_destroy(pthread_spinlock_t*) {$/;"	f
pthread_spin_destroy	src/madness/world/worldmutex.h	/^inline void pthread_spin_destroy(pthread_spinlock_t* \/*p*\/) {}$/;"	f
pthread_spin_init	src/madness/world/worldmutex.h	/^inline void pthread_spin_init(pthread_spinlock_t* p, int \/*mode*\/) {$/;"	f
pthread_spin_lock	src/madness/world/worldmutex.h	/^inline int pthread_spin_lock(pthread_spinlock_t* p) {$/;"	f
pthread_spin_trylock	src/madness/world/worldmutex.h	/^inline int pthread_spin_trylock(pthread_spinlock_t* p) {$/;"	f
pthread_spin_unlock	src/madness/world/worldmutex.h	/^inline int pthread_spin_unlock(pthread_spinlock_t* p) {$/;"	f
pthread_spinlock_t	src/madness/world/worldmutex.h	/^typedef OSSpinLock pthread_spinlock_t;$/;"	t
pthread_spinlock_t	src/madness/world/worldmutex.h	/^typedef std::remove_pointer<os_unfair_lock_t>::type pthread_spinlock_t;$/;"	t
pthresh	src/examples/navstokes_cosines.cc	/^const double pthresh = 1.e-9; \/\/ Precision$/;"	v
pthresh1	src/examples/navstokes_cosines.cc	/^const double pthresh1 = 1e-10;\/\/ * pthresh;$/;"	v
ptr	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-rvalue_references.cxx	/^   void *ptr;$/;"	m	class:rvmove	file:
ptr	src/madness/tensor/lowranktensor.h	/^    T* ptr(const int ivec=0) {$/;"	f	class:madness::LowRankTensor
ptr	src/madness/tensor/lowranktensor.h	/^    const T* ptr(const int ivec=0) const {$/;"	f	class:madness::LowRankTensor
ptr	src/madness/tensor/tensor.h	/^        T* ptr() {$/;"	f	class:madness::Tensor
ptr	src/madness/tensor/tensor.h	/^        const T* ptr() const {$/;"	f	class:madness::Tensor
ptr	src/madness/tensor/tensortrain.h	/^        T* ptr(const int ivec=0) {$/;"	f	class:madness::TensorTrain
ptr	src/madness/tensor/tensortrain.h	/^        const T* ptr(const int ivec=0) const {$/;"	f	class:madness::TensorTrain
ptr	src/madness/world/archive.h	/^            T* ptr; \/\/\/< The pointer.$/;"	m	class:madness::archive::archive_ptr
ptr	src/madness/world/archive.h	/^            const T* ptr; \/\/\/< The pointer.$/;"	m	class:madness::archive::archive_array
ptr	src/madness/world/buffer_archive.h	/^            const unsigned char* const ptr; \/\/\/< The memory buffer.$/;"	m	class:madness::archive::BufferInputArchive
ptr	src/madness/world/buffer_archive.h	/^            unsigned char * const ptr; \/\/\/< The memory buffer.$/;"	m	class:madness::archive::BufferOutputArchive
ptr	src/madness/world/worldmutex.h	/^        pthread_mutex_t* ptr() const {$/;"	f	class:madness::Mutex
ptr	src/madness/world/worldmutex.h	/^        pthread_mutex_t* ptr() const {$/;"	f	class:madness::RecursiveMutex
ptrT	src/madness/world/world_object.h	/^                    const objT*, objT*>::type ptrT;$/;"	t	struct:madness::detail::WorldObjectTaskHelper
ptrT	src/madness/world/worlddc.h	/^        typedef WorldDCRedistributeInterface<keyT>* ptrT;$/;"	t	class:madness::WorldDCPmapInterface
ptr_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  T* ptr_;$/;"	m	class:testing::internal::scoped_ptr
ptr_	src/madness/world/mem_func_wrapper.h	/^            ptrT ptr_; \/\/\/< Pointer to the object.$/;"	m	class:madness::detail::MemFuncWrapper
ptr_from_id	src/madness/world/world.h	/^        T* ptr_from_id(uniqueidT id) const {$/;"	f	class:madness::World
ptr_traits	src/madness/world/worldptr.h	/^        struct ptr_traits {$/;"	s	namespace:madness::detail
ptr_traits	src/madness/world/worldptr.h	/^        struct ptr_traits<void> {$/;"	s	namespace:madness::detail
ptrs	src/madness/world/worlddc.h	/^        std::set<ptrT> ptrs;$/;"	m	class:madness::WorldDCPmapInterface
pts	src/examples/derivatives.cc	/^    std::vector<coord_3d> pts;$/;"	m	class:F	file:
pure_ae	src/apps/chem/CalculationParameters.h	/^	bool pure_ae() const {return get<bool>("pure_ae");}$/;"	f	struct:madness::CalculationParameters
purify_hessian	src/apps/chem/nemo.cc	/^Tensor<double> Nemo::purify_hessian(const Tensor<double>& hessian) const {$/;"	f	class:madness::Nemo
push	src/madness/external/muParser/muParserStack.h	/^      void push(const TValueType& a_Val) $/;"	f	class:mu::ParserStack
push	src/madness/world/stack.h	/^        void push(const_reference value) {$/;"	f	class:madness::Stack
push_back	src/apps/adrian/ResponseFunction2.h	/^  void push_back(const std::vector<Function<double, 3>>& f) {$/;"	f	class:madness::ResponseFunction
push_back	src/apps/bryan/ResponseFunction2.h	/^      void push_back(const std::vector<Function<double,3>>& f) {$/;"	f	class:madness::ResponseFunction
push_back	src/madness/world/dqueue.h	/^        void push_back(const T& value, int ncopy=1) {$/;"	f	class:madness::DQueue
push_back_with_lock	src/madness/world/dqueue.h	/^        void push_back_with_lock(const T& value) {$/;"	f	class:madness::DQueue
push_front	src/madness/world/dqueue.h	/^        void push_front(const T& value) {$/;"	f	class:madness::DQueue
put_in_box	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::put_in_box(ProcessID from, long nl, long ni) const {$/;"	f	class:madness::FunctionImpl
putwa_	src/apps/moldft/fci/crayio.c	/^void putwa_(integer* unit, double* source, integer* addr, integer* count, integer* ierr)$/;"	f
pw_lhs	src/madness/mra/testperiodic.cc	/^double_complex pw_lhs(const coord_3d& r)$/;"	f
pw_rhs	src/madness/mra/testperiodic.cc	/^double_complex pw_rhs(const coord_3d& r)$/;"	f
pworld	src/examples/navstokes_cosines.cc	/^World *pworld;$/;"	v
pworld	src/madness/tensor/distributed_matrix.h	/^        World* pworld;$/;"	m	class:madness::DistributedMatrixDistribution
pworld	src/madness/world/binsorter.h	/^        World* pworld;$/;"	m	class:madness::BinSorter
pworld	src/madness/world/test_googletest.cc	/^madness::World* pworld;$/;"	v
pworld	src/madness/world/test_worldptr.cc	/^madness::World* pworld;$/;"	v
pworld	src/madness/world/test_worldref.cc	/^madness::World* pworld;$/;"	v
px	src/apps/adrian/gaussian.h	/^  s, px, py, pz,$/;"	m	class:slymer::GaussianType
px	src/apps/bryan/gaussian.h	/^  s, px, py, pz,$/;"	m	class:slymer::GaussianType
py	src/apps/adrian/gaussian.h	/^  s, px, py, pz,$/;"	m	class:slymer::GaussianType
py	src/apps/bryan/gaussian.h	/^  s, px, py, pz,$/;"	m	class:slymer::GaussianType
pythag	src/apps/moldft/fci/rsg.f	/^      double precision function pythag(/;"	f
pz	src/apps/adrian/gaussian.h	/^  s, px, py, pz,$/;"	m	class:slymer::GaussianType
pz	src/apps/bryan/gaussian.h	/^  s, px, py, pz,$/;"	m	class:slymer::GaussianType
q	src/apps/chem/molecule.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:madness::Atom
q	src/apps/hf/mentity.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:Atom
q	src/apps/polar/molecule.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:Atom
q	src/examples/spectralprop.h	/^        SpectralPropagator* q;$/;"	m	class:madness::SpectralPropagator
q	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        q;$/;"	m	struct:__anon17
q	src/madness/mra/convolution1d.h	/^            const GenericConvolution1D<Q,opT>& q;$/;"	m	struct:madness::GenericConvolution1D::Shmoo
q	src/madness/mra/mraimpl.h	/^            T q;$/;"	m	struct:madness::detail::scaleinplace
q	src/madness/mra/testbsh.cc	/^double q(double r) {$/;"	f
q	src/madness/mra/testper.cc	/^double q(double x, double a) {$/;"	f
q	src/madness/mra/tools/longfloat.py	/^    q = longfloat(0.72)$/;"	v
q	src/madness/mra/tools/quadrature.py	/^    q = Quadrature(7,(0.0,1.0),rule='GaussLegendre')$/;"	v
q	src/madness/mra/tools/twoscalecoeffs.py	/^        q = Quadrature(k,[0,1.0])$/;"	v
q	src/madness/world/threadbind	/^        q = int(pids[0])$/;"	v
q	src/madness/world/worldmutex.h	/^        mutable volatile bool* volatile q[MAX_NTHREAD]; \/\/ Circular buffer of flags$/;"	m	class:madness::ConditionVariable
q	src/madness/world/worldmutex.h	/^        mutable volatile bool* volatile q[MAX_NTHREAD];$/;"	m	class:madness::MutexFair
q	src/madness/world/worldrmi.h	/^            std::unique_ptr<qmsg[]> q;$/;"	m	class:madness::RMI::RmiTask
q0	src/apps/moldft/testcosine.cc	/^    Q q0;$/;"	m	class:ExpFunctor3d	file:
q0	src/apps/moldft/testperiodic.cc	/^    Q q0;$/;"	m	class:ExpFunctor3d	file:
q1	src/apps/moldft/testcosine.cc	/^    Q q1;$/;"	m	class:ExpFunctor3d	file:
q1	src/apps/moldft/testperiodic.cc	/^    Q q1;$/;"	m	class:ExpFunctor3d	file:
q1	src/madness/mra/tools/twoscalecoeffs.py	/^        q1 = Quadrature(k,[0,0.5])$/;"	v
q2	src/apps/moldft/testcosine.cc	/^    Q q2;$/;"	m	class:ExpFunctor3d	file:
q2	src/apps/moldft/testperiodic.cc	/^    Q q2;$/;"	m	class:ExpFunctor3d	file:
q2	src/madness/mra/tools/twoscalecoeffs.py	/^        q2 = Quadrature(k,[0.5,1.0])$/;"	v
qTime	src/apps/nick/extract.py	/^    qTime = time[1]        # quantum time$/;"	v
q_c	src/examples/tdse1d.cc	/^complex_function_1d q_c(World& world, const int np, const complex_function_1d psi0, const double tstep) {$/;"	f
qm_1d_free_particle_propagator	src/madness/mra/qmprop.cc	/^    qm_1d_free_particle_propagator(int k, double bandlimit, double timestep, double width) {$/;"	f	namespace:madness
qm_free_particle_propagator	src/madness/mra/qmprop.cc	/^    qm_free_particle_propagator(World& world, int k, double bandlimit, double timestep) {$/;"	f	namespace:madness
qm_free_particle_propagatorPtr	src/madness/mra/qmprop.cc	/^    qm_free_particle_propagatorPtr(World& world, int k, double bandlimit, double timestep) {$/;"	f	namespace:madness
qmsg	src/madness/world/worldrmi.h	/^        qmsg() {}$/;"	f	struct:madness::qmsg
qmsg	src/madness/world/worldrmi.h	/^        qmsg(size_t len, rmi_handlerT func, int i, int src, attrT attr, counterT count)$/;"	f	struct:madness::qmsg
qmsg	src/madness/world/worldrmi.h	/^    struct qmsg {$/;"	s	namespace:madness
qnxnto	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.8.0-rc1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qr	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/ApplyQ.hpp	/^namespace qr {$/;"	n	namespace:elem
qr	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/BusingerGolub.hpp	/^namespace qr {$/;"	n	namespace:elem
qr	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Cholesky.hpp	/^namespace qr {$/;"	n	namespace:elem
qr	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Explicit.hpp	/^namespace qr {$/;"	n	namespace:elem
qr	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/Householder.hpp	/^namespace qr {$/;"	n	namespace:elem
qr	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/PanelHouseholder.hpp	/^namespace qr {$/;"	n	namespace:elem
qr	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/SolveAfter.hpp	/^namespace qr {$/;"	n	namespace:elem
qr	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^namespace qr {$/;"	n	namespace:elem
qr	src/madness/tensor/lapack.cc	/^    void qr(Tensor<T>& A, Tensor<T>& R) {$/;"	f	namespace:madness
quad_phi	src/madness/mra/function_common_data.h	/^        Tensor<double> quad_phi; \/\/\/< quad_phi(i,j) = at x[i] value of phi[j]$/;"	m	class:madness::FunctionCommonData
quad_phit	src/madness/mra/funcimpl.h	/^            Tensor<double> quad_phit;$/;"	m	class:madness::FunctionImpl::do_err_box
quad_phit	src/madness/mra/function_common_data.h	/^        Tensor<double> quad_phit; \/\/\/< transpose of quad_phi$/;"	m	class:madness::FunctionCommonData
quad_phiw	src/madness/mra/funcimpl.h	/^            Tensor<double> quad_phiw;$/;"	m	class:madness::FunctionImpl::do_err_box
quad_phiw	src/madness/mra/function_common_data.h	/^        Tensor<double> quad_phiw; \/\/\/< quad_phiw(i,j) = at x[i] value of w[i]*phi[j]$/;"	m	class:madness::FunctionCommonData
quad_w	src/madness/mra/convolution1d.h	/^        Tensor<double> quad_w;$/;"	m	class:madness::Convolution1D
quad_w	src/madness/mra/function_common_data.h	/^        Tensor<double> quad_w; \/\/\/< quadrature weights$/;"	m	class:madness::FunctionCommonData
quad_x	src/madness/mra/convolution1d.h	/^        Tensor<double> quad_x;$/;"	m	class:madness::Convolution1D
quad_x	src/madness/mra/function_common_data.h	/^        Tensor<double> quad_x; \/\/\/< quadrature points$/;"	m	class:madness::FunctionCommonData
quadfit	src/madness/mra/tools/mathutil.py	/^def quadfit(alpha0, f0, alpha1, f1, alpha2, f2): $/;"	f
quadratic_step	src/madness/mra/tools/mathutil.py	/^def quadratic_step(trust, g0, h0, prnt=1): $/;"	f
quasinr	src/madness/mra/tools/mathutil.py	/^def quasinr(func, guess, tol, eps, printvar=None, prnt=1): $/;"	f
quasitrsm	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLN.hpp	/^namespace quasitrsm {$/;"	n	namespace:elem
quasitrsm	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LLT.hpp	/^namespace quasitrsm {$/;"	n	namespace:elem
quasitrsm	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUN.hpp	/^namespace quasitrsm {$/;"	n	namespace:elem
quasitrsm	src/madness/external/elemental/include/elemental/blas-like/level3/QuasiTrsm/LUT.hpp	/^namespace quasitrsm {$/;"	n	namespace:elem
queue	src/madness/world/thread.h	/^        DQueue<PoolTaskInterface*> queue; \/\/\/< Queue of tasks.$/;"	m	class:madness::ThreadPool
queue_size	src/madness/world/thread.h	/^        static std::size_t queue_size() {$/;"	f	class:madness::ThreadPool
queue_t	src/madness/external/elemental/external/pmrrr/include/queue.h	/^} queue_t;$/;"	t	typeref:struct:__anon20
quiet	src/madness/world/world.cc	/^    bool quiet() {$/;"	f	namespace:madness
quit	src/madness/external/tinyxml/tinystr.h	/^	void quit()$/;"	f	class:TiXmlString
qx	src/apps/moldft/testcosine.cc	/^    Q qx;$/;"	m	class:ExpFunctor	file:
qx	src/apps/moldft/testperiodic.cc	/^    Q qx;$/;"	m	class:ExpFunctor	file:
qx	src/examples/he.cc	/^    const Tensor<double>& qx;$/;"	m	class:YetAnotherWrapperClass	file:
qx	src/madness/mra/funcimpl.h	/^            Tensor<double> qx;$/;"	m	class:madness::FunctionImpl::do_err_box
qx3	src/examples/helium_mp2.cc	/^    const Tensor<double>& qx3;$/;"	m	class:YetAnotherWrapperClass	file:
qx6	src/examples/helium_mp2.cc	/^    const Tensor<double>& qx6;$/;"	m	class:YetAnotherWrapperClass	file:
qy	src/apps/moldft/testcosine.cc	/^    Q qy;$/;"	m	class:ExpFunctor	file:
qy	src/apps/moldft/testperiodic.cc	/^    Q qy;$/;"	m	class:ExpFunctor	file:
qz	src/apps/moldft/testcosine.cc	/^    Q qz;$/;"	m	class:ExpFunctor	file:
qz	src/apps/moldft/testperiodic.cc	/^    Q qz;$/;"	m	class:ExpFunctor	file:
r	src/apps/hf/electronicstructureapp.h	/^  coordT r;$/;"	m	class:AtomicBasisFunctor
r	src/apps/moldft/mcpfit.cc	/^    mutable double r;$/;"	m	struct:CoreFittingTarget	file:
r	src/apps/polar/mcpfit.cc	/^    mutable double r;$/;"	m	struct:CoreFittingTarget	file:
r	src/madness/misc/phandler.h	/^    mutable double r;                    \/\/ distance to origin$/;"	m	class:ParserHandler
r	src/madness/misc/ran.h	/^        const int r;$/;"	m	class:madness::Random
r	src/madness/mra/operator.h	/^            long r;             \/\/ Effective rank of transformation$/;"	m	struct:madness::SeparatedConvolution::Transformation
r	src/madness/world/test_worldref.cc	/^        RemoteReference<int> r;$/;"	m	class:__anon1::WorldRefTest	file:
r	src/madness/world/world.h	/^            mutable SafeMPI::Request* r; \/\/\/< \\todo Brief description needed.$/;"	m	struct:madness::World::MpiRequestTester
r0	src/madness/mra/derivative.h	/^        Tensor<double> rm, r0, rp        ; \/\/\/< Blocks of the derivative operator$/;"	m	class:madness::Derivative
r0	src/madness/world/test_worldref.cc	/^        RemoteReference<int> r0;$/;"	m	class:__anon1::WorldRefTest	file:
r0_bsp	src/madness/mra/derivative.h	/^        Tensor<double> r0_bsp;$/;"	m	class:madness::Derivative
r0_bsp_t	src/madness/mra/derivative.h	/^        Tensor<double> r0_bsp_t;$/;"	m	class:madness::Derivative
r0t	src/madness/mra/derivative.h	/^        Tensor<double> rmt, r0t, rpt     ; \/\/\/< Blocks of the derivative operator, transposed$/;"	m	class:madness::Derivative
r12	src/apps/chem/electronic_correlation_factor.h	/^    static double r12(const coord_6d& r) {$/;"	f	class:madness::CorrelationFactor
r12	src/apps/chem/electronic_correlation_factor.h	/^    static double r12(const coord_6d& r) {$/;"	f	class:madness::CorrelationFactor2
r12cut	src/examples/he.cc	/^static const double r12cut = 0.01; \/\/ Smoothing distance in 2e potential$/;"	v	file:
r12cut	src/examples/helium_mp2.cc	/^static const double r12cut=1.e-3;$/;"	v	file:
r2	src/examples/smooth.h	/^static double r2(const coord_3d &x){$/;"	f
r2r	src/madness/mra/test6.cc	/^static double r2r(const coord_6d& r) {$/;"	f	file:
r3mv	src/apps/exciting/wannier.cc	/^  vec3dT r3mv(const Tensor<double>& m, const vec3dT& v)$/;"	f	class:ExcitingApp
rGammaAA	src/apps/nick/wavef.h	/^    complexd rGammaAA;$/;"	m	class:ScatteringWF
r_queue	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  queue_t *r_queue;$/;"	m	struct:__anon27
r_states	src/apps/adrian/ResponseFunction2.h	/^  unsigned int r_states;  \/\/ Num. of resp. states$/;"	m	class:madness::ResponseFunction
r_states	src/apps/bryan/ResponseFunction2.h	/^      unsigned int r_states; \/\/ Num. of resp. states$/;"	m	class:madness::ResponseFunction
r_term	src/madness/mra/operator.h	/^            bool r_term;$/;"	m	struct:madness::SeparatedConvolution::ApplyTerms
radial	src/apps/adrian/TDHF.cc	/^static double radial(const coord_3d& r)$/;"	f	file:
radial	src/apps/bryan/TDHF.cc	/^static double radial(const coord_3d& r)$/;"	f	file:
radii	src/apps/chem/gth_pseudopotential.h	/^    real_tensor radii;$/;"	m	class:madness::ProjRLMStore
radii	src/apps/chem/gth_pseudopotential.h	/^    std::array<real_tensor,118> radii;$/;"	m	class:madness::GTHPseudopotential
radii	src/apps/polar/gth_pseudopotential.h	/^    std::array<real_tensor,118> radii;$/;"	m	class:GTHPseudopotential
radii	src/madness/mra/sdf_shape_3D.h	/^        coord_3d radii; \/\/\/< the directional radii$/;"	m	class:madness::SDFEllipsoid
radius	src/apps/chem/diamagneticpotentialfactor.cc	/^	const double radius;$/;"	m	struct:madness::R_times_arg_div_R	file:
radius	src/apps/chem/diamagneticpotentialfactor.cc	/^	double radius;		\/\/$/;"	m	struct:madness::harmonic_potential_boxed	file:
radius	src/apps/chem/masks_and_boxes.h	/^	const double radius;$/;"	m	struct:madness::spherical_box
radius	src/apps/interior_bc/test_problems.h	/^        double radius;$/;"	m	class:ConstantSphere
radius	src/apps/interior_bc/test_problems.h	/^        double radius;$/;"	m	class:CosineSphere
radius	src/apps/interior_bc/test_problems.h	/^        double radius;$/;"	m	class:InhomoConstantSphere
radius	src/apps/interior_bc/test_problems.h	/^        double radius;$/;"	m	class:Y20Sphere
radius	src/madness/mra/funcplot.h	/^    	double radius;$/;"	m	struct:madness::trajectory
radius	src/madness/mra/sdf_shape_2D.h	/^        const double radius; \/\/\/< Radius of circle$/;"	m	class:madness::SDFCircle
radius	src/madness/mra/sdf_shape_3D.h	/^        const double radius; \/\/\/< Radius of sphere$/;"	m	class:madness::SDFSphere
radius	src/madness/mra/sdf_shape_3D.h	/^        double radius; \/\/\/< the radius of the cylinder$/;"	m	class:madness::SDFCylinder
radius	src/madness/mra/testbc.cc	/^    const double radius;$/;"	m	class:DSphere	file:
radius	src/madness/mra/testbc.cc	/^    const double radius;$/;"	m	class:Sphere	file:
radius_function	src/apps/moldft/mcpfit.cc	/^inline static double radius_function (double rsq) {$/;"	f	file:
radius_function	src/apps/polar/mcpfit.cc	/^inline static double radius_function (double rsq) {$/;"	f	file:
ran	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_Zmtxmq.cc	/^double_complex ran()$/;"	f
ran	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_mtxmq.cc	/^double ran()$/;"	f
ran	src/madness/tensor/test_Zmtxmq.cc	/^double_complex ran()$/;"	f
ran	src/madness/tensor/test_mtxmq.cc	/^double ran()$/;"	f
ran_fill	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_Zmtxmq.cc	/^void ran_fill(int n, double_complex *a) {$/;"	f
ran_fill	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_mtxmq.cc	/^void ran_fill(int n, double *a) {$/;"	f
ran_fill	src/madness/tensor/test_Zmtxmq.cc	/^void ran_fill(int n, double_complex *a) {$/;"	f
ran_fill	src/madness/tensor/test_mtxmq.cc	/^void ran_fill(int n, double *a) {$/;"	f
rand	src/madness/external/muParser/muParserFixes.h	/^  inline int rand(void)$/;"	f	namespace:std
rand	src/madness/world/world.h	/^        int rand() {$/;"	f	class:madness::World
random	src/apps/adrian/ResponseParameters.h	/^      bool random;                       \/\/\/< Use a random guess for initial response functions$/;"	m	struct:madness::ResponseParameters
random	src/apps/bryan/ResponseParameters.h	/^      bool random;                       \/\/\/< Use a random guess for initial response functions$/;"	m	struct:madness::ResponseParameters
random	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^    bool random; $/;"	m	struct:elem::SdcCtrl
random	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::Random* random() { return &random_; }$/;"	f	class:testing::internal::UnitTestImpl
random	src/madness/mra/test_mra6.cc	/^    enum TensorFill {null, index, random};$/;"	e	enum:__anon12::TensorFill	file:
random	src/madness/mra/tools/longfloat.py	/^    from whrandom import random, seed$/;"	i
random	src/madness/mra/tools/mathutil.py	/^    import random$/;"	i
random	src/madness/tensor/test_gentensor.cc	/^    enum TensorFill {null, index, random};$/;"	e	enum:__anon43::TensorFill	file:
random_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::Random random_;$/;"	m	class:testing::internal::UnitTestImpl
random_gaussian	src/examples/dataloadbal.cc	/^real_functor_3d random_gaussian() {$/;"	f
random_insert	src/madness/world/test_tree.cc	/^    void random_insert(const dcT& constd, const Key& key, double valin) {$/;"	f	struct:Node
random_insert	src/madness/world/test_world.cc	/^    void random_insert(const dcT& constd, const Key& keyin, double valin) {$/;"	f	struct:Node
random_perm	src/madness/world/test_hashthreaded.cc	/^vector<int> random_perm(int n) {$/;"	f
random_proc	src/madness/world/world.h	/^        ProcessID random_proc() { return rand()%size(); }$/;"	f	class:madness::World
random_proc_not_me	src/madness/world/world.h	/^        ProcessID random_proc_not_me() {$/;"	f	class:madness::World
random_seed	src/madness/external/gtest/src/gtest-internal-inl.h	/^  int random_seed() const { return random_seed_; }$/;"	f	class:testing::internal::UnitTestImpl
random_seed	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::random_seed() const { return impl_->random_seed(); }$/;"	f	class:testing::UnitTest
random_seed_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  int random_seed_;$/;"	m	class:testing::internal::UnitTestImpl
random_seed_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::Int32 random_seed_;$/;"	m	class:testing::internal::GTestFlagSaver
randomize	src/madness/mra/funcimpl.h	/^            bool randomize() const {return false;}$/;"	f	struct:madness::FunctionImpl::add_op
randomize	src/madness/mra/funcimpl.h	/^            bool randomize() const {return false;}$/;"	f	struct:madness::FunctionImpl::hartree_op
randomize	src/madness/mra/funcimpl.h	/^            bool randomize() const {return false;}$/;"	f	struct:madness::FunctionImpl::project_out_op
randomize	src/madness/mra/funcimpl.h	/^            bool randomize() const {return true;}$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
randomize	src/madness/mra/funcimpl.h	/^            bool randomize() const {return true;}$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
randomize	src/madness/mra/funcimpl.h	/^            static bool randomize() {return false;}$/;"	f	struct:madness::FunctionImpl::multiply_op
randomize	src/madness/mra/funcimpl.h	/^          bool randomize() const {return true;}$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
randomized	src/apps/ii/systolic.h	/^        const bool randomized, doprint;$/;"	m	class:madness::LocalizeBoys
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename FunctionImpl<Q,NDIM>::dcT::const_iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_gaxpy_inplace
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::const_iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_average
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::const_iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_check_symmetry_local
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::const_iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_merge_trees
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_change_tensor_type
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_consolidate_buffer
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_keep_sum_coeffs
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_map_and_mirror
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_mapdim
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_mirror
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_reduce_rank
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_standard
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_truncate_NS_leafs
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::do_unary_op_value_inplace
rangeT	src/madness/mra/funcimpl.h	/^            typedef Range<typename dcT::iterator> rangeT;$/;"	t	struct:madness::FunctionImpl::remove_internal_coeffs
rangeT	src/madness/world/worlddc.h	/^	  typedef Range<typename std::vector<keyT>::const_iterator> rangeT;$/;"	t	struct:madness::WorldContainerImpl::P2Op
range_	src/madness/world/world_task_queue.h	/^            rangeT range_; \/\/\/< The range.$/;"	m	class:madness::detail::ForEachRootTask
range_high	src/apps/adrian/ResponseParameters.h	/^      double range_high;                 \/\/\/< Energy range (upper end) for orbitals to excite from$/;"	m	struct:madness::ResponseParameters
range_high	src/apps/bryan/ResponseParameters.h	/^      double range_high;                 \/\/\/< Energy range (upper end) for orbitals to excite from$/;"	m	struct:madness::ResponseParameters
range_low	src/apps/adrian/ResponseParameters.h	/^      double range_low;                  \/\/\/< Energy range (lower end) for orbitals to excite from$/;"	m	struct:madness::ResponseParameters
range_low	src/apps/bryan/ResponseParameters.h	/^      double range_low;                  \/\/\/< Energy range (lower end) for orbitals to excite from$/;"	m	struct:madness::ResponseParameters
rangesq	src/apps/chem/molecularbasis.h	/^    double rangesq() const {$/;"	f	class:madness::AtomicBasisFunction
rangesq	src/apps/chem/molecularbasis.h	/^    double rangesq() const {$/;"	f	class:madness::ContractedGaussianShell
rangesq	src/apps/hf/electronicstructureapp.h	/^  const double rangesq;$/;"	m	class:AtomicBasisFunctor
rangesq	src/apps/hf/molecularbasis.h	/^    double rangesq() const {$/;"	f	class:AtomicBasisFunction
rangesq	src/apps/hf/molecularbasis.h	/^    double rangesq() const {$/;"	f	class:ContractedGaussianShell
rangesq	src/apps/moldft/testperiodic.cc	/^    double rangesq;$/;"	m	class:AtomicOrbitalFunctor	file:
rangesq	src/apps/polar/molecularbasis.h	/^    double rangesq() const {$/;"	f	class:ContractedGaussianShell
rank	src/apps/ii/systolic.h	/^        const ProcessID rank;           \/\/< My processor rank$/;"	m	class:madness::DistributedMatrix
rank	src/apps/ii/systolic.h	/^        const ProcessID rank;           \/\/< Rank of current process$/;"	m	class:madness::SystolicMatrixAlgorithm
rank	src/madness/mra/function_interface.h	/^		int rank;$/;"	m	class:madness::TwoElectronInterface
rank	src/madness/mra/operator.h	/^        const int rank;$/;"	m	class:madness::SeparatedConvolution
rank	src/madness/tensor/distributed_matrix.h	/^        ProcessID rank;           \/\/\/< My processor rank$/;"	m	class:madness::DistributedMatrixDistribution
rank	src/madness/tensor/gentensor.h	/^		long rank() const {return -1;}$/;"	f	class:madness::GenTensor
rank	src/madness/tensor/lowranktensor.h	/^    long rank() const {$/;"	f	class:madness::LowRankTensor
rank	src/madness/tensor/srconf.h	/^		long rank() const {return rank_;};$/;"	f	class:madness::SRConf
rank	src/madness/tensor/systolic.h	/^        const ProcessID rank;           \/\/\/< Rank of current process$/;"	m	class:madness::SystolicMatrixAlgorithm
rank	src/madness/world/group.h	/^            ProcessID rank() const { return group_rank_; }$/;"	f	class:madness::Group::Impl
rank	src/madness/world/group.h	/^            ProcessID rank(const ProcessID world_rank) const {$/;"	f	class:madness::Group::Impl
rank	src/madness/world/group.h	/^        ProcessID rank() const {$/;"	f	class:madness::Group
rank	src/madness/world/group.h	/^        ProcessID rank(const ProcessID world_rank) const {$/;"	f	class:madness::Group
rank	src/madness/world/world.h	/^        ProcessID rank() const { return mpi.rank(); }$/;"	f	class:madness::World
rank	src/madness/world/worldam.h	/^        const ProcessID rank;$/;"	m	class:madness::WorldAmInterface
rank	src/madness/world/worldmpi.h	/^        int rank() const { return SafeMPI::Intracomm::Get_rank(); }$/;"	f	class:madness::WorldMpiInterface
rank	src/madness/world/worldrmi.h	/^            const ProcessID rank;       \/\/ Rank of this process$/;"	m	class:madness::RMI::RmiTask
rank_	src/madness/tensor/srconf.h	/^		long rank_;$/;"	m	class:madness::SRConf
rank_	src/madness/world/worldptr.h	/^            ProcessID rank_; \/\/\/< The rank of the node that the pointer belongs to.$/;"	m	class:madness::detail::WorldPtr
rank_increase	src/apps/chem/PNOParameters.h	/^	int rank_increase()const { return get<int >("rank_increase");}$/;"	f	class:madness::PNOParameters
rank_revealing_decompose	src/madness/tensor/tensortrain.h	/^    long rank_revealing_decompose(Tensor<T>& A, Tensor<T>& U,$/;"	f	namespace:madness
ranks	src/madness/tensor/tensortrain.h	/^		std::vector<long> ranks() const {$/;"	f	class:madness::TensorTrain
ranks	src/madness/tensor/tensortrain.h	/^       long ranks(const int i) const {$/;"	f	class:madness::TensorTrain
rateb	src/apps/moldft/fci/timer.f	/^      double precision linux_cputime, start, usedf, usedb, ratef, rateb$/;"	v
ratef	src/apps/moldft/fci/timer.f	/^      double precision linux_cputime, start, usedf, usedb, ratef,/;"	v
ratio_rho	src/examples/gygi_soltion.cc	/^  realfunc ratio_rho()const {$/;"	f	class:GygiPot	file:
rbegin	src/madness/world/vector.h	/^        const_reverse_iterator rbegin() const { return data_.rbegin(); }$/;"	f	class:madness::Vector
rbegin	src/madness/world/vector.h	/^        reverse_iterator rbegin() { return data_.rbegin(); }$/;"	f	class:madness::Vector
rcell_width	src/madness/mra/funcdefaults.h	/^        static Tensor<double> rcell_width; \/\/\/< Reciprocal of width$/;"	m	class:madness::FunctionDefaults
rcell_width	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> Tensor<double> FunctionDefaults<NDIM>::rcell_width;$/;"	m	class:madness::FunctionDefaults
rconv	src/apps/polar/moldft.cc	/^    double rconv;         \/\/\/< Response convergence$/;"	m	struct:CalculationParameters	file:
rcriterion	src/apps/hf/electronicstructureparams.h	/^  double rcriterion;$/;"	m	struct:madness::ElectronicStructureParams
rcut	src/apps/chem/corepotential.h	/^    double eprec, rcut0, rcut;$/;"	m	struct:madness::CorePotential
rcut	src/apps/chem/molecule.h	/^    std::vector<double> rcut;  \/\/ Reciprocal of the smoothing radius$/;"	m	class:madness::Molecule
rcut	src/apps/chem/pcm.cc	/^    double rcut;$/;"	m	struct:madness::detail::asc_potential	file:
rcut	src/apps/hf/mentity.h	/^    std::vector<double> rcut;  \/\/ Reciprocal of the smoothing radius$/;"	m	class:MolecularEntity
rcut	src/apps/moldft/mcpfit.cc	/^    double alpha, rcut;$/;"	m	class:PotentialBasisFunctor	file:
rcut	src/apps/polar/corepotential.h	/^    double eprec, rcut0, rcut;$/;"	m	struct:CorePotential
rcut	src/apps/polar/mcpfit.cc	/^    double alpha, rcut;$/;"	m	class:PotentialBasisFunctor	file:
rcut	src/apps/polar/molecule.h	/^    std::vector<double> rcut;  \/\/ Reciprocal of the smoothing radius$/;"	m	class:Molecule
rcut	src/examples/he.cc	/^static const double   rcut = 0.01; \/\/ Smoothing distance in 1e potential$/;"	v	file:
rcut	src/examples/helium_mp2.cc	/^static const double rcut=1.e-3;$/;"	v	file:
rcut0	src/apps/chem/corepotential.h	/^    double eprec, rcut0, rcut;$/;"	m	struct:madness::CorePotential
rcut0	src/apps/polar/corepotential.h	/^    double eprec, rcut0, rcut;$/;"	m	struct:CorePotential
rdielectric	src/examples/svpe.cc	/^    real_function_3d rdielectric; \/\/< Reciprocal of the dielectric$/;"	m	class:SVPESolver	file:
re	src/apps/nick/extract.py	/^import sys, re, os, os.path$/;"	i
re	src/apps/nick/parse.py	/^import sys, string, re, array, os$/;"	i
re	src/madness/mra/tools/longfloat.py	/^import re$/;"	i
re_epsilon_rho	src/examples/gygi_soltion.cc	/^  realfunc re_epsilon_rho() const{$/;"	f	class:GygiPot
re_grad_rho	src/examples/gygi_soltion.cc	/^  realfunc re_grad_rho(const realfunc& dens) const{$/;"	f	class:GygiPot	file:
re_one_plus_ratio_rho	src/examples/gygi_soltion.cc	/^  realfunc re_one_plus_ratio_rho() const{$/;"	f	class:GygiPot	file:
read	src/apps/adrian/GroundParameters.h	/^      void read(World& world, const std::string& filename)$/;"	f	struct:madness::GroundParameters
read	src/apps/adrian/NWChem.cc	/^void NWChem_Interface::read(Properties::Properties props) {$/;"	f	class:slymer::NWChem_Interface
read	src/apps/adrian/ResponseParameters.h	/^      void read(std::istream& f)$/;"	f	struct:madness::ResponseParameters
read	src/apps/bryan/GroundParameters.h	/^      void read(World& world, const std::string& filename)$/;"	f	struct:madness::GroundParameters
read	src/apps/bryan/NWChem.cc	/^void NWChem_Interface::read(Properties::Properties props) {$/;"	f	class:slymer::NWChem_Interface
read	src/apps/bryan/ResponseParameters.h	/^      void read(std::istream& f)$/;"	f	struct:madness::ResponseParameters
read	src/apps/chem/QCCalculationParametersBase.cc	/^void QCCalculationParametersBase::read(World& world, const std::string filename, const std::string tag) {$/;"	f	class:madness::QCCalculationParametersBase
read	src/apps/chem/molecule.cc	/^void Molecule::read(std::istream &f)$/;"	f	class:madness::Molecule
read	src/apps/hf/test_comm.cc	/^    Future<double> read(size_t i) const {$/;"	f	class:Array
read	src/apps/hf/testconv.cc	/^    Future<double> read(size_t i) const {$/;"	f	class:Array
read	src/apps/nick/extra.h	/^  void read(const char* filename) {$/;"	f	struct:InputParameters
read	src/apps/nick/tdse1.cc	/^    void read(const char* filename) {$/;"	f	struct:InputParameters
read	src/apps/tdse/tdse.cc	/^  void read(const char* filename) {$/;"	f	struct:InputParameters
read	src/apps/tdse/tdse.confused.cc	/^  void read(const char* filename) {$/;"	f	struct:InputParameters
read	src/apps/tdse/tdse4.cc	/^  void read(const char* filename) {$/;"	f	struct:InputParameters
read	src/examples/array_worldobject.cc	/^    Future<double> read(size_t i) const {$/;"	f	class:Array
read	src/madness/external/elemental/include/elemental/io/Read/Ascii.hpp	/^namespace read {$/;"	n	namespace:elem
read	src/madness/external/elemental/include/elemental/io/Read/AsciiMatlab.hpp	/^namespace read {$/;"	n	namespace:elem
read	src/madness/external/elemental/include/elemental/io/Read/Binary.hpp	/^namespace read {$/;"	n	namespace:elem
read	src/madness/external/elemental/include/elemental/io/Read/BinaryFlat.hpp	/^namespace read {$/;"	n	namespace:elem
read	src/madness/external/elemental/include/elemental/io/Read/MatrixMarket.hpp	/^namespace read {$/;"	n	namespace:elem
read	src/madness/mra/mraplot.cc	/^    void read(std::istream& input) {$/;"	f	class:Plotter
read	src/madness/world/test_future2.cc	/^    Future<double> read(size_t i) const {$/;"	f	class:Array
read_and_set_derived_values	src/apps/chem/mp2.h	/^        	void read_and_set_derived_values(World& world) {$/;"	f	struct:madness::MP2::Parameters
read_and_set_derived_values	src/apps/chem/test_QCCalculationParametersBase.cc	/^	void read_and_set_derived_values(World& world, std::string inputfile, std::string tag) {$/;"	f	class:Parameters
read_atom	src/apps/chem/corepotential.cc	/^static AtomCore read_atom(TiXmlElement* e, unsigned int atn, double eprec) {$/;"	f	namespace:madness
read_atom	src/apps/polar/corepotential.cc	/^static AtomCore read_atom(TiXmlElement* e, unsigned int atn, double eprec) {$/;"	f	file:
read_atoms	src/apps/adrian/NWChem.cc	/^void NWChem_Interface::read_atoms(std::istream &in) {$/;"	f	class:slymer::NWChem_Interface
read_atoms	src/apps/bryan/NWChem.cc	/^void NWChem_Interface::read_atoms(std::istream &in) {$/;"	f	class:slymer::NWChem_Interface
read_basis_from_file	src/apps/chem/PNOGuessFunctions.cpp	/^ std::map<std::string, std::vector<std::vector<double> > > BasisFunctions::read_basis_from_file(const std::string& filename, const std::vector<madness::Atom> atoms) const {$/;"	f	class:madness::BasisFunctions
read_basis_from_file	src/apps/chem/PNOGuessFunctions.cpp	/^ std::vector<std::vector<double> > BasisFunctions::read_basis_from_file(const std::string& filename, const std::string& atom) const {$/;"	f	class:madness::BasisFunctions
read_basis_set	src/apps/adrian/NWChem.cc	/^void NWChem_Interface::read_basis_set(std::istream &in) {$/;"	f	class:slymer::NWChem_Interface
read_basis_set	src/apps/bryan/NWChem.cc	/^void NWChem_Interface::read_basis_set(std::istream &in) {$/;"	f	class:slymer::NWChem_Interface
read_cabs_from_file	src/apps/chem/PNOF12Potentials.cpp	/^std::vector<real_function_3d> F12Potentials::read_cabs_from_file(const std::string& filename)const{$/;"	f	class:madness::F12Potentials
read_cell	src/madness/mra/mraplot.cc	/^    Tensor<double> read_cell(std::istream& input) {$/;"	f	class:Plotter
read_complex_guess	src/apps/chem/znemo.cc	/^Znemo::read_complex_guess() const {$/;"	f	class:madness::Znemo
read_contracted_basis_from_file	src/apps/chem/PNOGuessFunctions.h	/^	cbfT read_contracted_basis_from_file(const std::string& filename, const std::string& atom) const {$/;"	f	class:madness::BasisFunctions
read_contracted_basis_from_file	src/apps/chem/PNOGuessFunctions.h	/^	std::map<std::string, cbfT > read_contracted_basis_from_file(const std::string& filename, const std::vector<madness::Atom> atoms) const {$/;"	f	class:madness::BasisFunctions
read_core_file	src/apps/chem/molecule.cc	/^void Molecule::read_core_file(const std::string &filename)$/;"	f	class:madness::Molecule
read_core_file	src/apps/polar/molecule.cc	/^void Molecule::read_core_file(const std::string& filename) {$/;"	f	class:Molecule
read_data	src/madness/mra/legendre.cc	/^    static bool read_data() {$/;"	f	namespace:madness
read_data	src/madness/mra/twoscale.cc	/^    static bool read_data(int k) {$/;"	f	namespace:madness
read_endian	src/apps/adrian/NWChem.cc	/^static T read_endian(std::istream &in, const bool swap) {$/;"	f	namespace:slymer
read_endian	src/apps/bryan/NWChem.cc	/^static T read_endian(std::istream &in, const bool swap) {$/;"	f	namespace:slymer
read_energy	src/apps/moldft/xmlguess.py	/^def read_energy():$/;"	f
read_energy	src/apps/polar/xmlguess.py	/^def read_energy():$/;"	f
read_explicit_guess_functions	src/apps/chem/znemo.cc	/^Znemo::read_explicit_guess_functions() const {$/;"	f	class:madness::Znemo
read_fd	src/madness/external/gtest/src/gtest-death-test.cc	/^  int read_fd() const { return read_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
read_fd_	src/madness/external/gtest/src/gtest-death-test.cc	/^  int read_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
read_file	src/apps/adrian/ResponseParameters.h	/^      void read_file(const std::string& filename)$/;"	f	struct:madness::ResponseParameters
read_file	src/apps/bryan/ResponseParameters.h	/^      void read_file(const std::string& filename)$/;"	f	struct:madness::ResponseParameters
read_file	src/apps/chem/corepotential.cc	/^void CorePotentialManager::read_file(string filename, std::set<unsigned int> atomset, double eprec) {$/;"	f	class:madness::CorePotentialManager
read_file	src/apps/chem/molecularbasis.cc	/^void AtomicBasisSet::read_file(std::string filename) {$/;"	f	class:madness::AtomicBasisSet
read_file	src/apps/chem/molecule.cc	/^void Molecule::read_file(const std::string &filename)$/;"	f	class:madness::Molecule
read_file	src/apps/hf/electronicstructureparams.h	/^  void read_file(const std::string& filename)$/;"	f	struct:madness::ElectronicStructureParams
read_file	src/apps/hf/mentity.cc	/^void MolecularEntity::read_file(const std::string& filename, bool fractional = false) {$/;"	f	class:MolecularEntity
read_file	src/apps/hf/molecularbasis.h	/^    void read_file(std::string filename) {$/;"	f	class:AtomicBasisSet
read_file	src/apps/moldft/mcpfit.cc	/^    void read_file (const std::string filename) {$/;"	f	struct:CalculationParameters
read_file	src/apps/polar/corepotential.cc	/^void CorePotentialManager::read_file(string filename, std::set<unsigned int> atomset, double eprec) {$/;"	f	class:CorePotentialManager
read_file	src/apps/polar/mcpfit.cc	/^    void read_file (const std::string filename) {$/;"	f	struct:CalculationParameters
read_file	src/apps/polar/moldft.cc	/^    void read_file(const std::string &filename)$/;"	f	struct:CalculationParameters
read_file	src/apps/polar/molecularbasis.h	/^    void read_file(std::string filename) {$/;"	f	class:AtomicBasisSet
read_file	src/apps/polar/molecule.cc	/^void Molecule::read_file(const std::string& filename) {$/;"	f	class:Molecule
read_from_file	src/madness/mra/derivative.h	/^        void read_from_file(const std::string& filename, unsigned int order = 1) {$/;"	f	class:madness::Derivative
read_geometry	src/apps/moldft/xmlguess.py	/^def read_geometry():$/;"	f
read_geometry	src/apps/polar/xmlguess.py	/^def read_geometry():$/;"	f
read_grid	src/madness/mra/funcimpl.h	/^        read_grid(const std::string keyfile, const std::string gridfile,$/;"	f	class:madness::FunctionImpl
read_grid2	src/madness/mra/funcimpl.h	/^        read_grid2(const std::string gridfile,$/;"	f	class:madness::FunctionImpl
read_guess	src/apps/chem/zcis.cc	/^std::vector<Zcis::root> Zcis::read_guess() const {$/;"	f	class:madness::Zcis
read_internal	src/apps/chem/QCCalculationParametersBase.cc	/^void QCCalculationParametersBase::read_internal(World& world, std::string& filecontents, std::string tag) {$/;"	f	class:madness::QCCalculationParametersBase
read_kpoints	src/apps/exciting/wannier.cc	/^  void read_kpoints()$/;"	f	class:ExcitingApp
read_lattice	src/apps/exciting/wannier.cc	/^  void read_lattice()$/;"	f	class:ExcitingApp
read_lock	src/madness/world/worldmutex.h	/^        void read_lock() const {$/;"	f	class:madness::MutexReaderWriter
read_matrix	src/apps/moldft/xmlguess.py	/^def read_matrix(n,m):$/;"	f
read_matrix	src/apps/polar/xmlguess.py	/^def read_matrix(n,m):$/;"	f
read_movecs	src/apps/adrian/NWChem.cc	/^void NWChem_Interface::read_movecs(const Properties::Properties props,$/;"	f	class:slymer::NWChem_Interface
read_movecs	src/apps/bryan/NWChem.cc	/^void NWChem_Interface::read_movecs(const Properties::Properties props,$/;"	f	class:slymer::NWChem_Interface
read_npt	src/madness/mra/mraplot.cc	/^    std::vector<long> read_npt(std::istream& input) {$/;"	f	class:Plotter
read_numao	src/apps/moldft/xmlguess.py	/^def read_numao():$/;"	f
read_numao	src/apps/polar/xmlguess.py	/^def read_numao():$/;"	f
read_occn	src/apps/moldft/xmlguess.py	/^def read_occn(n, ab):$/;"	f
read_occn	src/apps/polar/xmlguess.py	/^def read_occn(n, ab):$/;"	f
read_orbital	src/apps/chem/corepotential.cc	/^static bool read_orbital(TiXmlElement* e, AtomCore& ac) {$/;"	f	namespace:madness
read_orbital	src/apps/polar/corepotential.cc	/^static bool read_orbital(TiXmlElement* e, AtomCore& ac) {$/;"	f	file:
read_orbitals	src/apps/moldft/xmlguess.py	/^def read_orbitals(n):$/;"	f
read_orbitals	src/apps/polar/xmlguess.py	/^def read_orbitals(n):$/;"	f
read_potential	src/apps/chem/corepotential.cc	/^static bool read_potential(TiXmlElement* elem, AtomCore& ac, double eprec) {$/;"	f	namespace:madness
read_potential	src/apps/polar/corepotential.cc	/^static bool read_potential(TiXmlElement* elem, AtomCore& ac, double eprec) {$/;"	f	file:
read_quotes	src/apps/chem/QCCalculationParametersBase.h	/^	read_quotes(std::stringstream& ssvalue) {$/;"	f	class:madness::QCCalculationParametersBase
read_real_guess	src/apps/chem/znemo.cc	/^Znemo::read_real_guess() const {$/;"	f	class:madness::Znemo
read_reference	src/apps/chem/znemo.cc	/^Znemo::read_reference() const {$/;"	f	class:madness::Znemo
read_restartaodata	src/apps/chem/MolecularOrbitals.cc	/^MolecularOrbitals<T,NDIM>::read_restartaodata(World& world,$/;"	f	class:madness::MolecularOrbitals
read_restartaodata	src/apps/chem/znemo.cc	/^Znemo::read_restartaodata() const {$/;"	f	class:madness::Znemo
read_restartdata	src/apps/chem/MolecularOrbitals.h	/^	static read_restartdata(World& world, const Molecule& molecule, const std::size_t nmo_alpha,$/;"	f	class:madness::MolecularOrbitals
read_string	src/apps/chem/GuessFactory.cc	/^std::vector<std::vector<double> > PolynomialFunctor::read_string(const std::string string) const$/;"	f	class:madness::guessfactory::PolynomialFunctor
read_test_data	src/apps/chem/plotxc.cc	/^std::vector<xcfunc_data_point> read_test_data(const std::string& dfname,$/;"	f
read_test_data	src/apps/chem/testxc.cc	/^std::vector<xcfunc_data_point> read_test_data(const std::string& dfname,$/;"	f
read_test_data	src/apps/polar/testxc.cc	/^std::vector<xcfunc_data_point> read_test_data(const std::string& dfname,$/;"	f
read_to_end_of_line	src/madness/mra/mraplot.cc	/^    std::string read_to_end_of_line(std::istream& input) {$/;"	f	class:Plotter
read_twoscale	src/madness/mra/twoscale.cc	/^    static bool read_twoscale(int kmax) {$/;"	f	namespace:madness
read_unlock	src/madness/world/worldmutex.h	/^        void read_unlock() const {$/;"	f	class:madness::MutexReaderWriter
read_wannier_functions	src/apps/exciting/wannier.cc	/^  void read_wannier_functions()$/;"	f	class:ExcitingApp
readascii	src/madness/mra/tools/dump2.py	/^def readascii(kmax,filename):$/;"	f
readin	src/examples/tdse1d.cc	/^static void readin(int np) {$/;"	f	file:
readinput	src/apps/exciting/wannier.cc	/^  void readinput()$/;"	f	class:ExcitingApp
readmat	src/madness/mra/tools/dump2.py	/^def readmat(k,file):$/;"	f
readmat	src/madness/mra/twoscale.cc	/^    static Tensor<double> readmat(int k, FILE* file) {$/;"	f	namespace:madness
ready	src/madness/world/world_object.h	/^        volatile bool ready; \/\/\/< True if ready to rock 'n roll.$/;"	m	class:madness::WorldObject
real	src/apps/exciting/wannier.cc	/^double real(double x) {return x;}$/;"	f
real	src/apps/hf/complexfun.h	/^Function<typename TensorTypeData<Q>::scalar_type,NDIM> real(const Function<Q,NDIM>& func)$/;"	f	namespace:madness
real	src/apps/hf/complexfun.h	/^double real(double x) {return x;}$/;"	f	namespace:madness
real	src/apps/tdse/tdse4.cc	/^double real(double a) {return a;}$/;"	f
real	src/madness/mra/vmra.h	/^std::vector<Function<typename Tensor<T>::scalar_type, NDIM>> real($/;"	f	namespace:madness
real	src/madness/tensor/gmres.h	/^    static inline double real(double x) { return x; }$/;"	f	namespace:madness
real	src/madness/tensor/tensor.h	/^    Tensor< typename Tensor<T>::scalar_type > real(const Tensor<T>& t) {$/;"	f	namespace:madness
real4	src/madness/fortran_ctypes.h	/^typedef float real4;$/;"	t
real8	src/madness/fortran_ctypes.h	/^typedef double real8;$/;"	t
realDisplay_	src/madness/external/elemental/include/elemental/io/ComplexDisplayWindow-premoc.hpp	/^    DisplayWidget<Complex<double>> *realDisplay_, *imagDisplay_;$/;"	m	class:elem::ComplexDisplayWindow
realScroll_	src/madness/external/elemental/include/elemental/io/ComplexDisplayWindow-premoc.hpp	/^    QScrollArea *realScroll_, *imagScroll_;$/;"	m	class:elem::ComplexDisplayWindow
realSize	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util/Snapshot.hpp	/^    Int realSize, imagSize;$/;"	m	struct:elem::SnapshotCtrl
real_complex	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def real_complex(self):$/;"	m	class:MTXMGen
real_convolution_1d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double,1> real_convolution_1d;$/;"	t	namespace:madness
real_convolution_1d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<real_convolution_1d> real_convolution_1d_ptr;$/;"	t	namespace:madness
real_convolution_2d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double,2> real_convolution_2d;$/;"	t	namespace:madness
real_convolution_2d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<real_convolution_2d> real_convolution_2d_ptr;$/;"	t	namespace:madness
real_convolution_3d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double,3> real_convolution_3d;$/;"	t	namespace:madness
real_convolution_3d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<real_convolution_3d> real_convolution_3d_ptr;$/;"	t	namespace:madness
real_convolution_4d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double,4> real_convolution_4d;$/;"	t	namespace:madness
real_convolution_4d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<real_convolution_4d> real_convolution_4d_ptr;$/;"	t	namespace:madness
real_convolution_5d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double,5> real_convolution_5d;$/;"	t	namespace:madness
real_convolution_5d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<real_convolution_5d> real_convolution_5d_ptr;$/;"	t	namespace:madness
real_convolution_6d	src/madness/mra/functypedefs.h	/^    typedef SeparatedConvolution<double,6> real_convolution_6d;$/;"	t	namespace:madness
real_convolution_6d_ptr	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr<real_convolution_6d> real_convolution_6d_ptr;$/;"	t	namespace:madness
real_derivative_1d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double,1> real_derivative_1d;$/;"	t	namespace:madness
real_derivative_2d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double,2> real_derivative_2d;$/;"	t	namespace:madness
real_derivative_3d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double,3> real_derivative_3d;$/;"	t	namespace:madness
real_derivative_4d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double,4> real_derivative_4d;$/;"	t	namespace:madness
real_derivative_5d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double,5> real_derivative_5d;$/;"	t	namespace:madness
real_derivative_6d	src/madness/mra/functypedefs.h	/^    typedef Derivative<double,6> real_derivative_6d;$/;"	t	namespace:madness
real_factoryT	src/examples/vnucso.cc	/^typedef FunctionFactory<double,3> real_factoryT;$/;"	t	file:
real_factory_1d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double,1> real_factory_1d;$/;"	t	namespace:madness
real_factory_2d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double,2> real_factory_2d;$/;"	t	namespace:madness
real_factory_3d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double,3> real_factory_3d;$/;"	t	namespace:madness
real_factory_4d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double,4> real_factory_4d;$/;"	t	namespace:madness
real_factory_5d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double,5> real_factory_5d;$/;"	t	namespace:madness
real_factory_6d	src/madness/mra/functypedefs.h	/^    typedef FunctionFactory<double,6> real_factory_6d;$/;"	t	namespace:madness
real_funcimpl_1d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double,1> real_funcimpl_1d;$/;"	t	namespace:madness
real_funcimpl_2d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double,2> real_funcimpl_2d;$/;"	t	namespace:madness
real_funcimpl_3d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double,3> real_funcimpl_3d;$/;"	t	namespace:madness
real_funcimpl_4d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double,4> real_funcimpl_4d;$/;"	t	namespace:madness
real_funcimpl_5d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double,5> real_funcimpl_5d;$/;"	t	namespace:madness
real_funcimpl_6d	src/madness/mra/functypedefs.h	/^    typedef FunctionImpl<double,6> real_funcimpl_6d;$/;"	t	namespace:madness
real_functionT	src/examples/vnucso.cc	/^typedef Function<double,3> real_functionT;$/;"	t	file:
real_function_1d	src/madness/mra/functypedefs.h	/^    typedef Function<double,1> real_function_1d;$/;"	t	namespace:madness
real_function_2d	src/madness/mra/functypedefs.h	/^    typedef Function<double,2> real_function_2d;$/;"	t	namespace:madness
real_function_3d	src/madness/mra/functypedefs.h	/^    typedef Function<double,3> real_function_3d;$/;"	t	namespace:madness
real_function_4d	src/madness/mra/functypedefs.h	/^    typedef Function<double,4> real_function_4d;$/;"	t	namespace:madness
real_function_5d	src/madness/mra/functypedefs.h	/^    typedef Function<double,5> real_function_5d;$/;"	t	namespace:madness
real_function_6d	src/madness/mra/functypedefs.h	/^    typedef Function<double,6> real_function_6d;$/;"	t	namespace:madness
real_functorT	src/examples/vnucso.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > real_functorT;$/;"	t	file:
real_functor_1d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double,1> > real_functor_1d;$/;"	t	namespace:madness
real_functor_2d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double,2> > real_functor_2d;$/;"	t	namespace:madness
real_functor_3d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double,3> > real_functor_3d;$/;"	t	namespace:madness
real_functor_4d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double,4> > real_functor_4d;$/;"	t	namespace:madness
real_functor_5d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double,5> > real_functor_5d;$/;"	t	namespace:madness
real_functor_6d	src/madness/mra/functypedefs.h	/^    typedef std::shared_ptr< FunctionFunctorInterface<double,6> > real_functor_6d;$/;"	t	namespace:madness
real_op	src/apps/hf/complexfun.h	/^struct real_op$/;"	s	namespace:madness
real_real	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/mtxm.py	/^    def real_real(self):$/;"	m	class:MTXMGen
real_size	src/madness/mra/mraimpl.h	/^    std::size_t FunctionImpl<T,NDIM>::real_size() const {$/;"	f	class:madness::FunctionImpl
real_size	src/madness/tensor/gentensor.h	/^		size_t real_size() const {return this->size();}$/;"	f	class:madness::GenTensor
real_size	src/madness/tensor/lowranktensor.h	/^    long real_size() const {$/;"	f	class:madness::LowRankTensor
real_size	src/madness/tensor/srconf.h	/^		size_t real_size() const {$/;"	f	class:madness::SRConf
real_size	src/madness/tensor/tensortrain.h	/^		long real_size() const {$/;"	f	class:madness::TensorTrain
real_tensor	src/madness/mra/functypedefs.h	/^    typedef Tensor<double> real_tensor;$/;"	t	namespace:madness
real_type	src/madness/tensor/gmres.h	/^            typedef typename TensorTypeData<T>::float_scalar_type real_type;$/;"	t	class:madness::FunctionSpace
real_type	src/madness/tensor/gmres.h	/^            typedef typename TensorTypeData<T>::float_scalar_type real_type;$/;"	t	class:madness::VectorOfFunctionsSpace
real_type	src/madness/tensor/gmres.h	/^            typedef typename TensorTypeData<T>::float_scalar_type real_type;$/;"	t	class:madness::VectorSpace
realfunc	src/examples/colloid.cc	/^typedef real_function_3d realfunc;$/;"	t	file:
realfunc	src/examples/gygi_soltion.cc	/^typedef real_function_3d realfunc;$/;"	t	file:
realfunc0	src/examples/test_gmres.cc	/^bool realfunc0() {$/;"	f
realfunc1	src/examples/test_gmres.cc	/^bool realfunc1() {$/;"	f
realfunc2	src/examples/test_gmres.cc	/^bool realfunc2() {$/;"	f
realmain	src/madness/world/test_worldprofile.cc	/^void realmain(int argc, char** argv)$/;"	f
realvec0	src/examples/test_gmres.cc	/^bool realvec0() {$/;"	f
realvec1	src/examples/test_gmres.cc	/^bool realvec1() {$/;"	f
realvec2	src/examples/test_gmres.cc	/^bool realvec2() {$/;"	f
reassemble	src/apps/chem/PNOStructures.cpp	/^PNOPairs::vfT PNOPairs::reassemble($/;"	f	class:madness::PNOPairs
reassemble	src/apps/chem/PNOStructures.h	/^	vfT reassemble(const vector_real_function_3d& v){$/;"	f	struct:madness::PNOPairs
rec_sqrt	src/apps/nick/mpreal.h	/^inline const mpreal rec_sqrt(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
reciprocal	src/examples/dielectric.cc	/^double reciprocal(double x) {$/;"	f
reciprocal	src/examples/svpe.cc	/^double reciprocal(double x) {$/;"	f
reciprocal	src/madness/mra/tools/longfloat.py	/^    def reciprocal(self):$/;"	m	class:longfloat
reciprocal	src/madness/tensor/gfit.cc	/^double reciprocal(double x) {return 1.0\/x;}$/;"	f
recompute_cell_info	src/madness/mra/funcdefaults.h	/^        static void recompute_cell_info() {$/;"	f	class:madness::FunctionDefaults
recompute_factors_and_potentials	src/apps/chem/diamagneticpotentialfactor.cc	/^void Diamagnetic_potential_factor::recompute_factors_and_potentials() {$/;"	f	class:madness::Diamagnetic_potential_factor
recompute_factors_and_potentials	src/apps/chem/znemo.cc	/^void Znemo::recompute_factors_and_potentials(const double thresh) {$/;"	f	class:madness::Znemo
recompute_irreps	src/apps/chem/MolecularOrbitals.h	/^	void recompute_irreps() {$/;"	f	class:madness::MolecularOrbitals
recompute_localize_sets	src/apps/chem/MolecularOrbitals.h	/^	void recompute_localize_sets() {$/;"	f	class:madness::MolecularOrbitals
reconstruct	src/madness/mra/mra.h	/^        const Function<T,NDIM>& reconstruct(bool fence = true) const {$/;"	f	class:madness::Function
reconstruct	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::reconstruct(bool fence) {$/;"	f	class:madness::FunctionImpl
reconstruct	src/madness/mra/vmra.h	/^void reconstruct(World& world, const std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
reconstruct	src/madness/mra/vmra1.h	/^    void reconstruct(World& world,$/;"	f	namespace:madness
reconstruct	src/madness/tensor/srconf.h	/^        Tensor<T> reconstruct() const {$/;"	f	class:madness::SRConf
reconstruct	src/madness/tensor/tensortrain.h	/^		Tensor<T> reconstruct(const bool flat=false) const {$/;"	f	class:madness::TensorTrain
reconstruct_op	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::reconstruct_op(const keyT& key, const coeffT& s) {$/;"	f	class:madness::FunctionImpl
reconstruct_psi	src/examples/helium_exact.cc	/^real_function_6d reconstruct_psi(World& world, const real_function_6d& psi,$/;"	f
reconstruct_rf	src/apps/adrian/ResponseFunction2.h	/^  void reconstruct_rf() {$/;"	f	class:madness::ResponseFunction
reconstruct_rf	src/apps/bryan/ResponseFunction2.h	/^      void reconstruct_rf() {$/;"	f	class:madness::ResponseFunction
reconstruct_tensor	src/madness/tensor/gentensor.h	/^        GenTensor<T> reconstruct_tensor() const {return *this;}$/;"	f	class:madness::GenTensor
reconstruct_tensor	src/madness/tensor/lowranktensor.h	/^    Tensor<T> reconstruct_tensor() const {$/;"	f	class:madness::LowRankTensor
recursive_apply	src/madness/mra/funcimpl.h	/^        void recursive_apply(opT& apply_op, const FunctionImpl<T,LDIM>* fimpl,$/;"	f	class:madness::FunctionImpl
recursive_apply	src/madness/mra/funcimpl.h	/^        void recursive_apply(opT& apply_op, const implT* fimpl, implT* rimpl, const bool fence) {$/;"	f	class:madness::FunctionImpl
recursive_apply_op	src/madness/mra/funcimpl.h	/^            recursive_apply_op() {}$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
recursive_apply_op	src/madness/mra/funcimpl.h	/^            recursive_apply_op(const recursive_apply_op& other) : result(other.result), iaf(other.iaf),$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
recursive_apply_op	src/madness/mra/funcimpl.h	/^            recursive_apply_op(implT* result,$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
recursive_apply_op	src/madness/mra/funcimpl.h	/^        struct recursive_apply_op {$/;"	s	class:madness::FunctionImpl
recursive_apply_op2	src/madness/mra/funcimpl.h	/^            recursive_apply_op2() {}$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
recursive_apply_op2	src/madness/mra/funcimpl.h	/^            recursive_apply_op2(const recursive_apply_op2& other) : result(other.result),$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
recursive_apply_op2	src/madness/mra/funcimpl.h	/^            recursive_apply_op2(implT* result, const ctT& iaf, const opT* apply_op)$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
recursive_apply_op2	src/madness/mra/funcimpl.h	/^        struct recursive_apply_op2 {$/;"	s	class:madness::FunctionImpl
recursive_print	src/madness/world/test_tree.cc	/^    void recursive_print(const dcT& d, const Key& key) const {$/;"	f	struct:Node
recv	src/madness/world/worldgop.h	/^        static Future<valueT> recv(const ProcessID source, const keyT& key) {$/;"	f	class:madness::WorldGopInterface
recvCounts	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^                     recvCounts, recvDispls;$/;"	m	struct:elem::PermutationMeta
recvDispls	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^                     recvCounts, recvDispls;$/;"	m	struct:elem::PermutationMeta
recvDummy_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    byte sendDummy_, recvDummy_;$/;"	m	class:elem::AxpyInterface
recvIdx	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^                     recvIdx, recvRanks;$/;"	m	struct:elem::PermutationMeta
recvRanks	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^                     recvIdx, recvRanks;$/;"	m	struct:elem::PermutationMeta
recvVector_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    std::vector<byte> recvVector_;$/;"	m	class:elem::AxpyInterface
recv_buf	src/madness/world/worldrmi.h	/^            std::unique_ptr<void*[]> recv_buf; \/\/ Will be at least ALIGNMENT aligned ... +1 for huge messages$/;"	m	class:madness::RMI::RmiTask
recv_counters	src/madness/world/worldrmi.h	/^            std::unique_ptr<counterT[]> recv_counters;$/;"	m	class:madness::RMI::RmiTask
recv_internal	src/madness/world/worldgop.h	/^        static Future<valueT> recv_internal(const keyT& key) {$/;"	f	class:madness::WorldGopInterface
recv_req	src/madness/world/worldrmi.h	/^            std::unique_ptr<SafeMPI::Request[]> recv_req;$/;"	m	class:madness::RMI::RmiTask
recv_stats	src/madness/world/worldprofile.cc	/^    void WorldProfile::recv_stats(World& world, ProcessID p) {$/;"	f	class:madness::WorldProfile
redirectio	src/madness/world/redirectio.cc	/^    void redirectio(const World& world, bool split) {$/;"	f	namespace:madness
redistribute	src/madness/mra/funcdefaults.h	/^        static void redistribute(World& world, const std::shared_ptr< WorldDCPmapInterface< Key<NDIM> > >& newpmap) {$/;"	f	class:madness::FunctionDefaults
redistribute	src/madness/world/worlddc.h	/^        void redistribute(World& world, const std::shared_ptr< WorldDCPmapInterface<keyT> >& newpmap) {$/;"	f	class:madness::WorldDCPmapInterface
redistribute_phase1	src/madness/world/worlddc.h	/^        void redistribute_phase1(const std::shared_ptr< WorldDCPmapInterface<keyT> >& newpmap) {$/;"	f	class:madness::WorldContainerImpl
redistribute_phase2	src/madness/world/worlddc.h	/^        void redistribute_phase2() {$/;"	f	class:madness::WorldContainerImpl
redistribute_phase3	src/madness/world/worlddc.h	/^        void redistribute_phase3() {$/;"	f	class:madness::WorldContainerImpl
reduce	src/apps/chem/pointgroupsymmetry.cc	/^std::vector<std::string> projector_irrep::reduce(const std::vector<std::string> irreps) const {$/;"	f	class:madness::projector_irrep
reduce	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<std::string> reduce(const std::string irrep1, const std::string irrep2) const {$/;"	f	class:madness::projector_irrep
reduce	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<std::string> reduce(const std::string irrep1, const std::string irrep2,$/;"	f	class:madness::projector_irrep
reduce	src/madness/tensor/gentensor.h	/^	GenTensor<T> reduce(std::list<GenTensor<T> >& addends, double eps, bool are_optimal=false) {$/;"	f	namespace:madness
reduce	src/madness/tensor/gentensor.h	/^GenTensor<T> reduce(std::list<GenTensor<T> >& addends, double eps, bool are_optimal=false) {$/;"	f	namespace:madness
reduce	src/madness/tensor/lowranktensor.h	/^ LowRankTensor<T> reduce(std::list<LowRankTensor<T> >& addends, double eps, bool are_optimal=false) {$/;"	f	namespace:madness
reduce	src/madness/world/world_task_queue.h	/^        Future<resultT> reduce(const rangeT& range, const opT& op) {$/;"	f	class:madness::WorldTaskQueue
reduce	src/madness/world/worldgop.h	/^        reduce(const keyT& key, const valueT& value, const opT& op, const ProcessID root) {$/;"	f	class:madness::WorldGopInterface
reduce	src/madness/world/worldgop.h	/^        reduce(const keyT& key, const valueT& value, const opT& op,$/;"	f	class:madness::WorldGopInterface
reduce	src/madness/world/worldgop.h	/^        void reduce(T* buf, size_t nelem, opT op) {$/;"	f	class:madness::WorldGopInterface
reduceRank	src/madness/mra/funcimpl.h	/^        void reduceRank(const double& eps) {$/;"	f	class:madness::FunctionNode
reduce_internal	src/madness/world/worldgop.h	/^        reduce_internal(const ProcessID parent, const ProcessID child0,$/;"	f	class:madness::WorldGopInterface
reduce_rank	src/madness/mra/mra.h	/^        Function<T,NDIM>& reduce_rank(const bool fence=true) {$/;"	f	class:madness::Function
reduce_rank	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::reduce_rank(const TensorArgs& targs, bool fence) {$/;"	f	class:madness::FunctionImpl
reduce_rank	src/madness/tensor/gentensor.h	/^        void reduce_rank(const double& eps) {return;};$/;"	f	class:madness::GenTensor
reduce_rank	src/madness/tensor/lowranktensor.h	/^    void reduce_rank(const double& thresh) {$/;"	f	class:madness::LowRankTensor
reduce_result_task	src/madness/world/worldgop.h	/^        reduce_result_task(const std::vector<Future<typename detail::result_of<opT>::type> >& results,$/;"	f	class:madness::WorldGopInterface
reduce_task	src/madness/world/worldgop.h	/^        reduce_task(const valueT& value, const opT& op) {$/;"	f	class:madness::WorldGopInterface
reduced	src/examples/vnucso.cc	/^const double reduced = 0.04825964488415279478;$/;"	v
reduced_mass	src/apps/tdse/tdse4.cc	/^static const double reduced_mass = 0.5*constants::proton_electron_mass_ratio;$/;"	v	file:
redundant	src/madness/mra/funcimpl.h	/^        bool redundant; \/\/\/< If true, function keeps sum coefficients on all levels$/;"	m	class:madness::FunctionImpl
ref	src/madness/world/world_object.h	/^            refT ref; \/\/\/< \\todo Description needed.$/;"	m	struct:madness::detail::info
ref	src/madness/world/world_task_queue.h	/^            refT ref; \/\/\/< Remote reference for a task result future.$/;"	m	struct:madness::detail::TaskHandlerInfo
refT	src/madness/world/world_object.h	/^            typedef RemoteReference< FutureImpl< REMFUTURE(MEMFUN_RETURNT(memfunT)) > > refT;$/;"	t	struct:madness::detail::info
ref_vector	src/madness/tensor/srconf.h	/^		Tensor<T>& ref_vector(const unsigned int& idim) {$/;"	f	class:madness::SRConf
ref_vector	src/madness/tensor/srconf.h	/^		const Tensor<T>& ref_vector(const unsigned int& idim) const {$/;"	f	class:madness::SRConf
reference	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef const T& reference;$/;"	t	class:testing::internal::ParamIterator
reference	src/madness/world/stack.h	/^        typedef T& reference; \/\/\/< Element reference type.$/;"	t	class:madness::Stack
reference	src/madness/world/worlddc.h	/^      typedef typename std::iterator_traits<internal_iteratorT>::reference reference;$/;"	t	class:madness::WorldContainerIterator
reference	src/madness/world/worldhashmap.h	/^            typedef datumT& reference;$/;"	t	class:madness::Hash_private::HashAccessor
reference	src/madness/world/worldhashmap.h	/^            typedef datumT& reference;$/;"	t	class:madness::Hash_private::HashIterator
reference	src/madness/world/worldptr.h	/^            typedef U & reference;$/;"	t	struct:madness::detail::ptr_traits
reference	src/madness/world/worldptr.h	/^            typedef typename ptr_traits<T>::reference reference;$/;"	t	class:madness::detail::WorldPtr
reference	src/madness/world/worldptr.h	/^            typedef void reference;$/;"	t	struct:madness::detail::ptr_traits
referenceT	src/madness/world/worldref.h	/^        typedef typename detail::ptr_traits<T>::reference referenceT;$/;"	t	class:madness::RemoteReference
refine	src/madness/mra/funcdefaults.h	/^        static bool refine;            \/\/\/< Whether to refine new functions$/;"	m	class:madness::FunctionDefaults
refine	src/madness/mra/funcimpl.h	/^        void refine(const opT& op, bool fence) {$/;"	f	class:madness::FunctionImpl
refine	src/madness/mra/function_factory.h	/^    refine(bool refine = true) {$/;"	f	class:madness::FunctionFactory
refine	src/madness/mra/mra.h	/^        const Function<T,NDIM>& refine(bool fence = true) const {$/;"	f	class:madness::Function
refine	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> bool FunctionDefaults<NDIM>::refine;$/;"	m	class:madness::FunctionDefaults
refine	src/madness/mra/vmra.h	/^void refine(World& world, const std::vector<Function<T, NDIM>>& vf,$/;"	f	namespace:madness
refine_eigvals	src/madness/external/elemental/external/pmrrr/src/process_c_task.c	/^int refine_eigvals(cluster_t *cl, int rf_begin, int rf_end,$/;"	f	file:
refine_general	src/madness/mra/mra.h	/^        void refine_general(const opT& op, bool fence = true) const {$/;"	f	class:madness::Function
refine_op	src/madness/mra/funcimpl.h	/^        void refine_op(const opT& op, const keyT& key) {$/;"	f	class:madness::FunctionImpl
refine_spawn	src/madness/mra/funcimpl.h	/^        void refine_spawn(const opT& op, const keyT& key) {$/;"	f	class:madness::FunctionImpl
refine_t	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^} refine_t;$/;"	t	typeref:struct:__anon17
refine_to_common_level	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::refine_to_common_level(const std::vector<FunctionImpl<T,NDIM>*>& v,$/;"	f	class:madness::FunctionImpl
refine_to_common_level	src/madness/mra/vmra.h	/^void refine_to_common_level(World& world, std::vector<Function<T, NDIM>>& vf,$/;"	f	namespace:madness
refine_to_highrac	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^int refine_to_highrac(proc_t *procinfo, char *jobz, double *D,$/;"	f	file:
reflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Col.hpp	/^namespace reflector {$/;"	n	namespace:elem
reflector	src/madness/external/elemental/include/elemental/lapack-like/util/Reflector/Row.hpp	/^namespace reflector {$/;"	n	namespace:elem
refop	src/apps/tdse/tdse.cc	/^    struct refop {$/;"	s	file:
refop	src/examples/tdse1d.cc	/^struct refop {$/;"	s	file:
refop	src/madness/mra/testsuite.cc	/^    struct refop {$/;"	s	file:
refpotfunctor	src/apps/chem/test_SCFOperators.cc	/^    refpotfunctor(double alpha) : exponent(alpha) {$/;"	f	struct:refpotfunctor
refpotfunctor	src/apps/chem/test_SCFOperators.cc	/^struct refpotfunctor {$/;"	s	file:
regenerate	src/examples/compiler/mra-driver.hh	/^    void regenerate(std::ostream& file) const {$/;"	f	class:Exp
regenerate	src/examples/compiler/mra-driver.hh	/^    void regenerate(std::ostream& file) const {$/;"	f	class:mra_driver
regex	src/madness/external/gtest/src/gtest-death-test.cc	/^  const RE* regex() const { return regex_; }$/;"	f	class:testing::internal::DeathTestImpl
regex_	src/madness/external/gtest/src/gtest-death-test.cc	/^  const RE* const regex_;$/;"	m	class:testing::internal::DeathTestImpl	file:
register_callback	src/madness/world/dependency_interface.h	/^        void register_callback(CallbackInterface* callback) {$/;"	f	class:madness::DependencyInterface
register_callback	src/madness/world/future.h	/^        inline void register_callback(CallbackInterface* callback) {$/;"	f	class:madness::Future
register_callback	src/madness/world/future.h	/^        inline void register_callback(CallbackInterface* callback) {$/;"	f	class:madness::FutureImpl
register_callback	src/madness/world/worlddc.h	/^        void register_callback(ptrT ptr) {$/;"	f	class:madness::WorldDCPmapInterface
register_final_callback	src/madness/world/dependency_interface.h	/^        void register_final_callback(CallbackInterface* callback) {$/;"	f	class:madness::DependencyInterface
register_group	src/madness/world/group.cc	/^    void Group::register_group() const {$/;"	f	class:madness::Group
register_id	src/madness/world/worldprofile.cc	/^    int WorldProfile::register_id(const char* classname, const char* function) {$/;"	f	class:madness::WorldProfile
register_id	src/madness/world/worldprofile.cc	/^    int WorldProfile::register_id(const char* name) {$/;"	f	class:madness::WorldProfile
register_ptr	src/madness/world/world.h	/^        uniqueidT register_ptr(T* ptr) {$/;"	f	class:madness::World
register_ptr_	src/madness/world/worldref.h	/^            static WorldPtr<implT> register_ptr_(World& w, const std::shared_ptr<T>& p) {$/;"	f	class:madness::detail::RemoteCounter
register_submit_callback	src/madness/world/taskfn.h	/^        void register_submit_callback() { register_final_callback(&submit); }$/;"	f	class:madness::TaskInterface
register_thread	src/madness/world/worldmutex.h	/^        void register_thread(int id, volatile bool* pflag) {$/;"	f	class:madness::Barrier
registered_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  bool registered_;$/;"	m	class:testing::internal::TypedTestCasePState
rehash	src/madness/mra/key.h	/^        rehash() {$/;"	f	class:madness::Key
rel_fn_ptr_t	src/madness/world/worldrmi.h	/^    typedef std::ptrdiff_t rel_fn_ptr_t;$/;"	t	namespace:madness
relation_to_source_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  RelationToSource relation_to_source_;$/;"	m	class:testing::internal::NativeArray
release	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  T* release() {$/;"	f	class:testing::internal::scoped_ptr
release	src/madness/external/muParser/muParserFixes.h	/^    _Ty *release()$/;"	f	class:std::_my_auto_ptr
release	src/madness/world/worldhashmap.h	/^            void release() {$/;"	f	class:madness::Hash_private::HashAccessor
release	src/madness/world/worldref.h	/^            bool release() {$/;"	f	class:madness::detail::RemoteCounterBase
release_madness_task	src/madness/world/parsec.cc	/^    dague_hook_return_t release_madness_task (dague_execution_unit_t *eu, $/;"	f	namespace:madness
remainder	src/apps/nick/mpreal.cc	/^const mpreal remainder (const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
remote_count_	src/madness/world/group.h	/^            mutable AtomicInt remote_count_; \/\/\/< Remote use count$/;"	m	class:madness::Group::Impl
remote_ptr	src/madness/world/test_worldptr.cc	/^            madness::Future<WorldPtr<T> > remote_ptr;$/;"	m	class:__anon6::WorldPtrTest::XferPtr	file:
remote_ref	src/madness/world/future.h	/^        RemoteReference< FutureImpl<T> > remote_ref;$/;"	m	class:madness::FutureImpl
remote_ref	src/madness/world/future.h	/^        inline remote_refT remote_ref(World& world) const {$/;"	f	class:madness::Future
remote_ref	src/madness/world/future.h	/^        static remote_refT remote_ref(World& world) {$/;"	f	class:madness::Future
remote_ref	src/madness/world/test_worldref.cc	/^            madness::Future<RemoteReference<T> > remote_ref;$/;"	m	class:__anon1::WorldRefTest::XferRef	file:
remote_refT	src/madness/world/future.h	/^        typedef RemoteReference< FutureImpl<T> > remote_refT;$/;"	t	class:madness::Future
remote_refT	src/madness/world/future.h	/^        typedef RemoteReference< FutureImpl<void> > remote_refT;$/;"	t	class:madness::Future
remote_task_handler	src/madness/world/world_task_queue.h	/^        static void remote_task_handler(const AmArg& arg) {$/;"	f	class:madness::WorldTaskQueue
remote_update	src/madness/world/group.h	/^            void remote_update(const int n) const {$/;"	f	class:madness::Group::Impl
remote_update	src/madness/world/group.h	/^        void remote_update() const {$/;"	f	class:madness::Group
remove	src/madness/world/parallel_archive.h	/^            static void remove(World& world, const char* filename) {$/;"	f	class:madness::archive::BaseParallelArchive
remove	src/madness/world/parallel_archive.h	/^            void remove() {$/;"	f	class:madness::archive::BaseParallelArchive
removeSmallTerms	src/apps/adrian/gaussian.h	/^  void removeSmallTerms(const double eps = 1.e-6) {$/;"	f	class:slymer::GaussianFunction
removeSmallTerms	src/apps/bryan/gaussian.h	/^  void removeSmallTerms(const double eps = 1.e-6) {$/;"	f	class:slymer::GaussianFunction
remove_dof	src/apps/chem/molecular_optimizer.h	/^	std::vector<std::string> remove_dof() const {return get<std::vector<std::string> >("remove_dof");}$/;"	f	class:madness::MolecularOptimizationParameters
remove_external_dof	src/apps/chem/molecular_optimizer.h	/^    static void remove_external_dof(Tensor<double>& hessian, const Molecule& mol,$/;"	f	class:madness::MolecularOptimizer
remove_external_dof	src/apps/chem/vibanal.cc	/^void remove_external_dof(Tensor<double>& hessian,$/;"	f
remove_fcvr	src/madness/world/type_traits.h	/^    struct remove_fcvr {$/;"	s	namespace:madness
remove_future	src/madness/world/future.h	/^    struct remove_future {$/;"	s	namespace:madness
remove_future	src/madness/world/future.h	/^    struct remove_future< Future<T> > {$/;"	s	namespace:madness
remove_future	src/madness/world/future.h	/^    struct remove_future< Future<T>& > {$/;"	s	namespace:madness
remove_future	src/madness/world/future.h	/^    struct remove_future< Future<T>&& > {$/;"	s	namespace:madness
remove_future	src/madness/world/future.h	/^    struct remove_future< const Future<T> > {$/;"	s	namespace:madness
remove_future	src/madness/world/future.h	/^    struct remove_future< const Future<T>& > {$/;"	s	namespace:madness
remove_internal_coeffs	src/madness/mra/funcimpl.h	/^            remove_internal_coeffs() {}$/;"	f	struct:madness::FunctionImpl::remove_internal_coeffs
remove_internal_coeffs	src/madness/mra/funcimpl.h	/^        struct remove_internal_coeffs {$/;"	s	class:madness::FunctionImpl
remquo	src/apps/nick/mpreal.cc	/^const mpreal remquo (long* q, const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rend	src/madness/world/vector.h	/^        const_reverse_iterator rend() const { return data_.rend(); }$/;"	f	class:madness::Vector
rend	src/madness/world/vector.h	/^        reverse_iterator rend() { return data_.rend(); }$/;"	f	class:madness::Vector
renorm	src/apps/moldft/fci/renorm.F	/^      subroutine renorm(/;"	s
reorthog	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    bool reorthog; \/\/ only matters for IRL, which isn't currently used$/;"	m	struct:elem::PseudospecCtrl
rep_	src/madness/external/tinyxml/tinystr.h	/^	Rep * rep_;$/;"	m	class:TiXmlString
repeat_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::Int32 repeat_;$/;"	m	class:testing::internal::GTestFlagSaver
repeater	src/madness/external/gtest/src/gtest.cc	/^TestEventListener* TestEventListeners::repeater() { return repeater_; }$/;"	f	class:testing::TestEventListeners
repeater_	src/madness/external/gtest/include/gtest/gtest.h	/^  internal::TestEventRepeater* repeater_;$/;"	m	class:testing::TestEventListeners
replace	src/madness/world/worlddc.h	/^        void replace(const keyT& key, const valueT& value) {$/;"	f	class:madness::WorldContainer
replace	src/madness/world/worlddc.h	/^        void replace(const pairT& datum) {$/;"	f	class:madness::WorldContainer
replace	src/madness/world/worlddc.h	/^        void replace(input_iterator& start, input_iterator& end) {$/;"	f	class:madness::WorldContainer
replace_with	src/madness/world/future.h	/^        bool replace_with(FutureImpl<T>* f) {$/;"	f	class:madness::FutureImpl
replySendRequests_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        dataSendRequests_, requestSendRequests_, replySendRequests_;$/;"	m	class:elem::AxpyInterface
replyVectors_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        dataVectors_, requestVectors_, replyVectors_;$/;"	m	class:elem::AxpyInterface
reportable_disabled_test_count	src/madness/external/gtest/src/gtest.cc	/^int TestCase::reportable_disabled_test_count() const {$/;"	f	class:testing::TestCase
reportable_disabled_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::reportable_disabled_test_count() const {$/;"	f	class:testing::UnitTest
reportable_disabled_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::reportable_disabled_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
reportable_test_count	src/madness/external/gtest/src/gtest.cc	/^int TestCase::reportable_test_count() const {$/;"	f	class:testing::TestCase
reportable_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::reportable_test_count() const {$/;"	f	class:testing::UnitTest
reportable_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::reportable_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
reproject	src/apps/chem/gth_pseudopotential.h	/^    void reproject(int k, double thresh) {$/;"	f	class:madness::GTHPseudopotential
reproject	src/apps/hf/solver.h	/^    void reproject()$/;"	f	class:madness::Solver
reproject	src/apps/hf/solver.h	/^    void reproject()$/;"	f	class:madness::Subspace
reproject	src/apps/moldft/subspace.h	/^    void reproject()$/;"	f	class:Subspace
reproject	src/apps/polar/gth_pseudopotential.h	/^    void reproject(int k, double thresh) {$/;"	f	class:GTHPseudopotential
req	src/madness/world/worldam.h	/^            RMI::Request req;$/;"	m	class:madness::WorldAmInterface::SendReq
requestSendRequests_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        dataSendRequests_, requestSendRequests_, replySendRequests_;$/;"	m	class:elem::AxpyInterface
requestVectors_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        dataVectors_, requestVectors_, replyVectors_;$/;"	m	class:elem::AxpyInterface
request_	src/madness/world/safempi.h	/^        MPI_Request request_;$/;"	m	class:SafeMPI::Request
requestor	src/madness/world/world_object.h	/^            ProcessID requestor; \/\/\/< \\todo Description needed.$/;"	m	struct:madness::detail::info_base
requests	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  MPI_Request *requests;$/;"	m	struct:__anon26
requiredArgs_	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    std::vector<RequiredArg> requiredArgs_;$/;"	m	class:elem::choice::Args
requiredArgs_	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    std::vector<RequiredArg> requiredArgs_;$/;"	m	class:elem::choice::MpiArgs
res	src/madness/world/threadbind	/^        res = subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True).strip().split()$/;"	v
reserve	src/madness/external/tinyxml/tinystr.cc	/^void TiXmlString::reserve (size_type cap)$/;"	f	class:TiXmlString
reserve	src/madness/tensor/srconf.h	/^		void reserve(long r) {$/;"	f	class:madness::SRConf
reset	src/apps/adrian/ESInterface.h	/^  void reset() {$/;"	f	class:slymer::ES_Interface
reset	src/apps/adrian/NWChem.h	/^  void reset(const std::string &fname_) {$/;"	f	class:slymer::NWChem_Interface
reset	src/apps/bryan/ESInterface.h	/^  void reset() {$/;"	f	class:slymer::ES_Interface
reset	src/apps/bryan/NWChem.h	/^  void reset(const std::string &fname_) {$/;"	f	class:slymer::NWChem_Interface
reset	src/apps/chem/PNOTensors.h	/^	void reset() {$/;"	f	class:__anon48::Tensor_IJ_IK
reset	src/apps/chem/PNOTensors.h	/^	void reset() {$/;"	f	class:__anon48::Tensor_IJ_KJ
reset	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  void reset(T* ptr = NULL) {$/;"	f	class:testing::internal::linked_ptr
reset	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void reset(T* p = NULL) {$/;"	f	class:testing::internal::scoped_ptr
reset	src/madness/external/muParser/muParserFixes.h	/^	  void reset(_Ty* _Ptr = 0)$/;"	f	class:std::_my_auto_ptr
reset	src/madness/mra/function_common_data.h	/^        void reset() const {$/;"	f	class:madness::Timer
reset	src/madness/mra/indexit.h	/^        reset() {$/;"	f	class:madness::IndexIterator
reset	src/madness/tensor/tensor.h	/^            void reset() {dec(); p = 0;}$/;"	f	class:madness::detail::SharedAlignedArray
reset	src/madness/tensor/tensoriter.h	/^    void TensorIterator<T,Q,R>::reset() {$/;"	f	class:madness::TensorIterator
reset	src/madness/world/stack.h	/^        void reset() {$/;"	f	class:madness::Stack
reset	src/madness/world/worldmem.cc	/^    void WorldMemInfo::reset() {$/;"	f	class:madness::WorldMemInfo
reset	src/madness/world/worldmutex.h	/^        void reset() { count = 0; }$/;"	f	class:madness::MutexWaiter
reset	src/madness/world/worldref.h	/^        void reset() {$/;"	f	class:madness::RemoteReference
reset_aobasis	src/apps/chem/SCF.h	/^	void reset_aobasis(const std::string& aobasisname) {$/;"	f	class:madness::SCF
reset_explicit_B_and_v	src/apps/chem/diamagneticpotentialfactor.h	/^	void reset_explicit_B_and_v(const coord_3d& eB) {$/;"	f	class:madness::Diamagnetic_potential_factor
reset_handler	src/madness/world/worldref.h	/^        static void reset_handler(const AmArg& arg) {$/;"	f	class:madness::RemoteReference
reset_hessian	src/madness/tensor/solvers.h	/^        void reset_hessian() {h = Tensor<double>();}$/;"	f	class:madness::QuasiNewton
reset_papi_measurement	src/madness/world/worldpapi.cc	/^    void reset_papi_measurement() {$/;"	f	namespace:madness
reset_timer	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::reset_timer() {$/;"	f	class:madness::FunctionImpl
reset_timer	src/madness/mra/operator.h	/^        void reset_timer() const {$/;"	f	class:madness::SeparatedConvolution
reshape	src/madness/tensor/tensor.h	/^        Tensor<T> reshape(const std::vector<long>& d) {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        Tensor<T> reshape(int ndimnew, const long* d) {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        Tensor<T> reshape(long dim0) {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        Tensor<T> reshape(long dim0, long dim1) {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        Tensor<T> reshape(long dim0, long dim1, long dim2) {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        Tensor<T> reshape(long dim0, long dim1, long dim2, long dim3) {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        Tensor<T> reshape(long dim0, long dim1, long dim2, long dim3, long dim4) {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        Tensor<T> reshape(long dim0, long dim1, long dim2, long dim3, long dim4, long dim5) {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        const Tensor<T> reshape(const std::vector<long>& d) const {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        const Tensor<T> reshape(int ndimnew, const long* d) const {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        const Tensor<T> reshape(long dim0) const {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        const Tensor<T> reshape(long dim0, long dim1) const {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        const Tensor<T> reshape(long dim0, long dim1, long dim2) const {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        const Tensor<T> reshape(long dim0, long dim1, long dim2, long dim3) const {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        const Tensor<T> reshape(long dim0, long dim1, long dim2, long dim3, long dim4) const {$/;"	f	class:madness::Tensor
reshape	src/madness/tensor/tensor.h	/^        const Tensor<T> reshape(long dim0, long dim1, long dim2, long dim3, long dim4, long dim5) const {$/;"	f	class:madness::Tensor
reshape_inplace	src/madness/tensor/basetensor.cc	/^    void BaseTensor::reshape_inplace(const std::vector<long>& d) {$/;"	f	class:madness::BaseTensor
reshape_inplace	src/madness/tensor/basetensor.cc	/^    void BaseTensor::reshape_inplace(int nd, const long* d) {$/;"	f	class:madness::BaseTensor
residual	src/examples/testsolver.cc	/^F residual(const F& f) {$/;"	f
residual_and_jacobian	src/madness/tensor/kain.cc	/^    virtual void residual_and_jacobian(const Tensor<double>& x,$/;"	f	struct:SolverTargetInterface
residual_and_jacobian	src/madness/tensor/solvers.h	/^        virtual void residual_and_jacobian(const Tensor<double>& x,$/;"	f	struct:madness::SolverTargetInterface
residual_response	src/apps/chem/SCF.cc	/^double SCF::residual_response(World &world, const vecfuncT &x, const vecfuncT &y,$/;"	f	class:madness::SCF
residual_response	src/apps/polar/moldft.cc	/^double residual_response(World &world, vecfuncT &x, vecfuncT &y,$/;"	f	struct:Calculation
resort	src/apps/chem/pointgroupsymmetry.h	/^	static std::vector<R> resort(const std::vector<int> map,$/;"	f	class:madness::projector_irrep
response	src/apps/chem/CalculationParameters.h	/^	bool response() const {return get<bool>("response");}$/;"	f	struct:madness::CalculationParameters
response	src/apps/exciting/wannier.cc	/^  void response(vec3dT qvec)$/;"	f	class:ExcitingApp
response	src/apps/polar/moldft.cc	/^    bool response;        \/\/\/< If true calculate response on$/;"	m	struct:CalculationParameters	file:
response_axis	src/apps/chem/CalculationParameters.h	/^	std::vector<bool> response_axis() const {return get<std::vector<bool> >("response_axis");}$/;"	f	struct:madness::CalculationParameters
response_axis	src/apps/polar/moldft.cc	/^    int response_axis;    \/\/\/< The axis for calculation response function$/;"	m	struct:CalculationParameters	file:
response_freq	src/apps/chem/CalculationParameters.h	/^	double response_freq() const {return get<double>("response_freq");}$/;"	f	struct:madness::CalculationParameters
response_freq	src/apps/polar/moldft.cc	/^    double response_freq; \/\/\/< Frequency for calculation response function$/;"	m	struct:CalculationParameters	file:
response_zero_functions	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::response_zero_functions(World & world,$/;"	f	class:TDHF
response_zero_functions	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::response_zero_functions(World & world,$/;"	f	class:TDHF
restart	src/apps/adrian/ResponseParameters.h	/^      bool restart;                      \/\/\/< Flag to restart from file$/;"	m	struct:madness::ResponseParameters
restart	src/apps/bryan/ResponseParameters.h	/^      bool restart;                      \/\/\/< Flag to restart from file$/;"	m	struct:madness::ResponseParameters
restart	src/apps/chem/CCStructures.h	/^    bool restart=false;$/;"	m	struct:madness::CCParameters
restart	src/apps/chem/CalculationParameters.h	/^	bool restart() const {return get<bool>("restart");}$/;"	f	struct:madness::CalculationParameters
restart	src/apps/chem/PNOParameters.h	/^	PairType restart()const {return assign_from_string<PairType>(get<std::string >("restart"));}$/;"	f	class:madness::PNOParameters
restart	src/apps/chem/SCFProtocol.h	/^    bool restart;           \/\/\/< do a restart from file (if possible)$/;"	m	class:madness::SCFProtocol
restart	src/apps/chem/TDHF.h	/^		std::vector<size_t>  restart() const {return get<std::vector<size_t> >("restart");}$/;"	f	struct:madness::TDHF::Parameters
restart	src/apps/chem/mp2.h	/^        	int restart() const {return this->get<bool>("restart");}	\/\/\/ convenience function$/;"	f	struct:madness::MP2::Parameters
restart	src/apps/hf/electronicstructureparams.h	/^  int restart;$/;"	m	struct:madness::ElectronicStructureParams
restart	src/apps/polar/moldft.cc	/^    bool restart;          \/\/\/< If true restart from orbitals on disk$/;"	m	struct:CalculationParameters	file:
restart_aos	src/apps/chem/SCF.cc	/^bool SCF::restart_aos(World &world)$/;"	f	class:madness::SCF
restart_cphf	src/apps/chem/CalculationParameters.h	/^	bool restart_cphf() const {return get<bool>("restart_cphf");}$/;"	f	struct:madness::CalculationParameters
restart_file	src/apps/adrian/ResponseParameters.h	/^      std::string restart_file;          \/\/\/< Flag to restart from file$/;"	m	struct:madness::ResponseParameters
restart_file	src/apps/bryan/ResponseParameters.h	/^      std::string restart_file;          \/\/\/< Flag to restart from file$/;"	m	struct:madness::ResponseParameters
restartao	src/apps/chem/CalculationParameters.h	/^	bool restartao() const {return get<bool>("restartao");}$/;"	f	struct:madness::CalculationParameters
restrict	src/madness/external/elemental/external/pmrrr/include/global.h	55;"	d
restrict	src/madness/external/elemental/external/pmrrr/include/global.h	75;"	d
result	src/madness/external/gtest/include/gtest/gtest.h	/^  const TestResult* result() const { return &result_; }$/;"	f	class:testing::TestInfo
result	src/madness/mra/funcimpl.h	/^            implT* result; 	    \/\/\/< where to construct the pair function$/;"	m	struct:madness::FunctionImpl::hartree_op
result	src/madness/mra/funcimpl.h	/^            implT* result;$/;"	m	struct:madness::FunctionImpl::recursive_apply_op
result	src/madness/mra/funcimpl.h	/^            mutable implL1* result;	\/\/\/< the low dim result function$/;"	m	struct:madness::FunctionImpl::project_out_op
result	src/madness/mra/funcimpl.h	/^            mutable implT* result;$/;"	m	struct:madness::FunctionImpl::recursive_apply_op2
result	src/madness/mra/funcimpl.h	/^          implT* result;  		\/\/\/< where to construct Vphi, no need to track parents$/;"	m	struct:madness::FunctionImpl::Vphi_op_NS
result	src/madness/mra/vmra1.h	/^        Tensor<TENSOR_RESULT_TYPE(T,R)> result; \/\/ Must be a copy$/;"	m	struct:madness::MatrixInnerTask
result	src/madness/world/taskfn.h	/^        const futureT& result() const { return result_; }$/;"	f	struct:madness::TaskFn
result	src/madness/world/world_task_queue.h	/^            const Future<bool>& result() const { return completion_status_; }$/;"	f	class:madness::detail::ForEachRootTask
resultT	src/apps/chem/GuessFactory.h	/^	typedef double resultT;$/;"	t	class:madness::guessfactory::PlaneWaveFunctor
resultT	src/apps/chem/SCFOperators.h	/^        typedef double resultT;$/;"	t	struct:madness::XCOperator::expme
resultT	src/apps/chem/SCFOperators.h	/^        typedef double resultT;$/;"	t	struct:madness::XCOperator::logme
resultT	src/apps/exciting/wannier.cc	/^  typedef typename TensorTypeData<Q>::scalar_type resultT;$/;"	t	struct:abs_square_op	file:
resultT	src/apps/hf/complexfun.h	/^  typedef Q resultT;$/;"	t	struct:madness::conj_op
resultT	src/apps/hf/complexfun.h	/^  typedef std::complex<Q> resultT;$/;"	t	struct:madness::function_real2complex_op
resultT	src/apps/hf/complexfun.h	/^  typedef typename TensorTypeData<Q>::scalar_type resultT;$/;"	t	struct:madness::abs_op
resultT	src/apps/hf/complexfun.h	/^  typedef typename TensorTypeData<Q>::scalar_type resultT;$/;"	t	struct:madness::abs_square_op
resultT	src/apps/hf/complexfun.h	/^  typedef typename TensorTypeData<Q>::scalar_type resultT;$/;"	t	struct:madness::imag_op
resultT	src/apps/hf/complexfun.h	/^  typedef typename TensorTypeData<Q>::scalar_type resultT;$/;"	t	struct:madness::real_op
resultT	src/apps/hf/test_he.cc	/^  typedef T resultT;$/;"	t	struct:myunaryop_square	file:
resultT	src/apps/polar/preal.cc	/^  typedef std::complex<Q> resultT;$/;"	t	struct:function_real2complex_op	file:
resultT	src/madness/mra/funcimpl.h	/^            typedef TENSOR_RESULT_TYPE(T,R) resultT;$/;"	t	struct:madness::FunctionImpl::do_inner_local
resultT	src/madness/mra/funcimpl.h	/^            typedef typename opT::resultT resultT;$/;"	t	struct:madness::FunctionImpl::coeff_value_adaptor
resultT	src/madness/mra/testsuite.cc	/^    typedef T resultT;$/;"	t	struct:myunaryop	file:
resultT	src/madness/mra/testsuite.cc	/^    typedef T resultT;$/;"	t	struct:myunaryop_square	file:
resultT	src/madness/world/taskfn.h	/^            typedef typename madness::remove_fcvr<typename madness::detail::result_of<fnT>::type>::type resultT;$/;"	t	struct:madness::detail::task_result_type
resultT	src/madness/world/taskfn.h	/^        typedef typename detail::task_result_type<fnT>::resultT resultT;$/;"	t	struct:madness::TaskFn
result_	src/madness/external/gtest/include/gtest/gtest-spi.h	/^  TestPartResultArray* const result_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter
result_	src/madness/external/gtest/include/gtest/gtest.h	/^  TestResult result_;$/;"	m	class:testing::TestInfo
result_	src/madness/world/taskfn.h	/^        futureT result_; \/\/\/< The task Future result$/;"	m	struct:madness::TaskFn
result_of	src/madness/world/function_traits.h	/^        struct result_of {$/;"	s	namespace:madness::detail
result_of	src/madness/world/function_traits.h	/^        struct result_of<fnT, typename std::enable_if<function_traits<fnT>::value>::type> {$/;"	s	namespace:madness::detail
result_of	src/madness/world/function_traits.h	/^        struct result_of<fnT, typename std::enable_if<is_type<decltype(&fnT::operator())>::value >::type> :$/;"	s	namespace:madness::detail
result_of	src/madness/world/function_traits.h	/^        struct result_of<fnT, typename std::enable_if<memfunc_traits<fnT>::value>::type> {$/;"	s	namespace:madness::detail
result_size	src/madness/mra/testvmra.cc	/^    std::size_t result_size;$/;"	m	struct:many_to_many_op	file:
result_type	src/madness/world/function_traits.h	/^            typedef returnT result_type;$/;"	t	struct:madness::detail::memfunc_traits
result_type	src/madness/world/mem_func_wrapper.h	/^            typedef resT result_type;$/;"	t	class:madness::detail::MemFuncWrapper
result_type	src/madness/world/mem_func_wrapper.h	/^            typedef void result_type;$/;"	t	class:madness::detail::MemFuncWrapper
results	src/apps/moldft/parsemad.py	/^results = {}$/;"	v
results	src/madness/tensor/mtxmq_graveyard/new_mtxmq/results_parse.py	/^    results = get_data()$/;"	v
results_	src/madness/external/gtest/include/gtest/gtest-spi.h	/^  const TestPartResultArray* const results_;$/;"	m	class:testing::internal::SingleFailureChecker
resume	src/madness/world/worldprofile.cc	/^    void WorldProfileObj::resume(double now, const RMIStats& statsnow) {$/;"	f	class:madness::WorldProfileObj
ret	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-deleted_functions_fail_compile.cxx	/^int A::ret()$/;"	f	class:A
retrieve_auxarg1	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^void retrieve_auxarg1(auxarg1_t *arg, int *n, double **D, double **E,$/;"	f	file:
retrieve_auxarg2	src/madness/external/elemental/external/pmrrr/src/plarre.c	/^void retrieve_auxarg2(auxarg2_t *arg, int *bl_size, double **D,$/;"	f	file:
retrieve_auxarg3	src/madness/external/elemental/external/pmrrr/src/plarrv.c	/^retrieve_auxarg3(auxarg3_t *arg, int *tid, proc_t **procinfo,$/;"	f	file:
returnT	src/madness/mra/adquad.h	/^            typedef double returnT;$/;"	t	struct:madness::detail::adqtest
returnT	src/madness/mra/convolution1d.h	/^            typedef Tensor<Q> returnT;$/;"	t	struct:madness::GenericConvolution1D::Shmoo
returnT	src/madness/mra/qmprop.cc	/^        typedef double_complex returnT;$/;"	t	class:madness::BandlimitedPropagator	file:
return_ptr	src/madness/world/test_worldptr.cc	/^            madness::Future<WorldPtr<T> > return_ptr;$/;"	m	class:__anon6::WorldPtrTest::XferPtr	file:
return_ref	src/madness/world/test_worldref.cc	/^            madness::Future<RemoteReference<T> > return_ref;$/;"	m	class:__anon1::WorldRefTest::XferRef	file:
reuse	src/madness/tensor/tensoriter.h	/^    void TensorIterator<T,Q,R>::reuse(const Tensor<T>* t0,$/;"	f	class:madness::TensorIterator
reverse_resort	src/apps/chem/pointgroupsymmetry.h	/^	static std::vector<R> reverse_resort(const std::vector<int> map,$/;"	f	class:madness::projector_irrep
rewind	src/madness/world/buffer_archive.h	/^            void rewind() const {$/;"	f	class:madness::archive::BufferInputArchive
rewind	src/madness/world/cereal_archive.h	/^  void rewind() const {}$/;"	f	class:madness::archive::CerealInputArchive
rewind	src/madness/world/vector_archive.h	/^            void rewind() const {$/;"	f	class:madness::archive::VectorInputArchive
rewrite_sum	src/examples/compiler/mra-driver.hh	/^    void rewrite_sum(Exp* ee) {$/;"	f	class:mra_driver
rf_begin	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int          rf_begin;$/;"	m	struct:__anon30
rf_end	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int          rf_end;$/;"	m	struct:__anon30
rfactoryT	src/apps/hf/esolver.h	/^typedef FunctionFactory<double,3> rfactoryT;$/;"	t
rfactoryT	src/apps/hf/ewald.cc	/^typedef FunctionFactory<double,3> rfactoryT;$/;"	t	file:
rfactoryT	src/apps/hf/solver.h	/^    typedef FunctionFactory<T,NDIM> rfactoryT;$/;"	t	class:madness::Solver
rfunctionT	src/apps/hf/esolver.h	/^typedef Function<double,3> rfunctionT;$/;"	t
rfunctionT	src/apps/hf/ewald.cc	/^typedef Function<double,3> rfunctionT;$/;"	t	file:
rfunctionT	src/apps/hf/solver.h	/^    typedef Function<T,NDIM> rfunctionT;$/;"	t	class:madness::Solver
rfunctorT	src/apps/hf/esolver.h	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > rfunctorT;$/;"	t
rfunctorT	src/apps/hf/ewald.cc	/^typedef std::shared_ptr< FunctionFunctorInterface<double,3> > rfunctorT;$/;"	t	file:
rh	src/apps/nick/interp.h	/^    double rh;            \/\/< 1\/h$/;"	m	class:CubicInterpolationTable
rh	src/madness/misc/interpolation_1d.h	/^    double rh;            \/\/\/< 1\/h$/;"	m	class:CubicInterpolationTable
rho	src/examples/gygi_soltion.cc	/^  const realfunc& rho;    \/\/density for the poisson's equation$/;"	m	class:GygiPot	file:
rho	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    F rho;$/;"	m	struct:elem::SafeProduct
rhoT	src/apps/polar/moldft.cc	/^    functionT rhoT;$/;"	m	struct:Calculation	file:
rho_0	src/examples/gygi_soltion.cc	/^  const double& rho_0;  \/\/ the density at the solut-solvent interface$/;"	m	class:GygiPot	file:
rho_0	src/examples/gygi_soltion.cc	/^const double rho_0 = 0.0004;$/;"	v
rho_beta_one	src/examples/gygi_soltion.cc	/^  realfunc rho_beta_one() const {$/;"	f	class:GygiPot	file:
rho_bsh_func3d	src/apps/hf/test_lattice.cc	/^static double rho_bsh_func3d(const coordT3d& r)$/;"	f	file:
rho_coulomb_func3d	src/apps/hf/test_lattice.cc	/^static double_complex rho_coulomb_func3d(const coordT3d& r)$/;"	f	file:
rho_elec	src/apps/polar/moldft.cc	/^    functionT rho_elec;$/;"	m	struct:Calculation	file:
rho_func	src/examples/gygi_soltion.cc	/^double rho_func(const coord_3d& r){$/;"	f
rho_func_be	src/apps/hf/test_be.cc	/^static double rho_func_be(const coordT& rr)$/;"	f	file:
rho_func_he	src/apps/hf/test_he.cc	/^static double rho_func_he(const coordT& rr)$/;"	f	file:
rho_func_he	src/apps/hf/test_hf.cc	/^static double rho_func_he(const coordT& rr)$/;"	f	file:
rho_func_hydro	src/apps/hf/test_hydro.cc	/^static double rho_func_hydro(const coordT& rr)$/;"	f	file:
rho_function	src/examples/siam_example.cc	/^double rho_function(const coord_3d &r) {$/;"	f
rho_gaussian_func3d	src/apps/hf/test_lattice.cc	/^static double rho_gaussian_func3d(const coordT3d& r)$/;"	f	file:
rhoa	src/apps/chem/plotxc.cc	/^  double rhoa, rhob;$/;"	m	struct:xcfunc_data_point	file:
rhoa	src/apps/chem/testlda.cc	/^  double rhoa, rhob;$/;"	m	struct:xcfunc_data_point	file:
rhoa	src/apps/chem/testxc.cc	/^  double rhoa, rhob;$/;"	m	struct:xcfunc_data_point	file:
rhoa	src/apps/polar/testxc.cc	/^  double rhoa, rhob;$/;"	m	struct:xcfunc_data_point	file:
rhob	src/apps/chem/plotxc.cc	/^  double rhoa, rhob;$/;"	m	struct:xcfunc_data_point	file:
rhob	src/apps/chem/testlda.cc	/^  double rhoa, rhob;$/;"	m	struct:xcfunc_data_point	file:
rhob	src/apps/chem/testxc.cc	/^  double rhoa, rhob;$/;"	m	struct:xcfunc_data_point	file:
rhob	src/apps/polar/testxc.cc	/^  double rhoa, rhob;$/;"	m	struct:xcfunc_data_point	file:
rhomin	src/apps/chem/xcfunctional.h	/^    double rhomin, rhotol;      \/\/\/< See initialize and munge*$/;"	m	class:madness::XCfunctional
rhomin	src/apps/polar/xcfunctional.h	/^    double rhomin, rhotol, sigmin, sigtol; \/\/ See initialize and munge*$/;"	m	class:madness::XCfunctional
rhon	src/apps/polar/moldft.cc	/^    functionT rhon;$/;"	m	struct:Calculation	file:
rhot	src/examples/colloid.cc	/^    realfunc& rhot; \/\/total charge density$/;"	m	class:SurfaceMoleculeInteraction	file:
rhot	src/examples/gygi_soltion.cc	/^  const realfunc& rhot;    \/\/density for the dielectric functional$/;"	m	class:GygiPot	file:
rhotol	src/apps/chem/xcfunctional.h	/^    double rhomin, rhotol;      \/\/\/< See initialize and munge*$/;"	m	class:madness::XCfunctional
rhotol	src/apps/polar/xcfunctional.h	/^    double rhomin, rhotol, sigmin, sigtol; \/\/ See initialize and munge*$/;"	m	class:madness::XCfunctional
rifunction	src/examples/h2dynamic.cc	/^double rifunction(const coord_3d& r) {$/;"	f
rifunction	src/examples/newsolver.cc	/^double rifunction(const coord_3d& r) {$/;"	f
rifunction	src/examples/newsolver_lda.cc	/^double rifunction(const coord_3d& r) {$/;"	f
rifunction	src/examples/takeshi_response.cc	/^double rifunction(const coord_3d& r){$/;"	f
right	src/madness/mra/mra.h	/^              TENSOR_RESULT_TYPE(L,R) beta,  const Function<R,NDIM>& right, bool fence=true) {$/;"	m	namespace:madness
right	src/madness/mra/testsuite.cc	/^    functorR right;$/;"	m	class:BinaryOp	file:
right_dirichlet	src/madness/mra/testdiff1D.cc	/^static double right_dirichlet(const coordT &pt) {$/;"	f	file:
right_dirichlet	src/madness/mra/testdiff1Db.cc	/^static double right_dirichlet(const coordT &pt) {$/;"	f	file:
right_neumann	src/madness/mra/testdiff1D.cc	/^static double right_neumann  (const coordT &pt) {$/;"	f	file:
right_neumann	src/madness/mra/testdiff1Db.cc	/^static double right_neumann  (const coordT &pt) {$/;"	f	file:
right_pid	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  int        right_pid;$/;"	m	struct:__anon16
right_r0	src/madness/mra/derivative.h	/^        Tensor<double> right_r0, right_rp; \/\/\/< Blocks of the derivative for the right boundary$/;"	m	class:madness::Derivative
right_r0t	src/madness/mra/derivative.h	/^        Tensor<double> right_r0t, right_rpt; \/\/\/< Blocks of the derivative for the right boundary$/;"	m	class:madness::Derivative
right_rp	src/madness/mra/derivative.h	/^        Tensor<double> right_r0, right_rp; \/\/\/< Blocks of the derivative for the right boundary$/;"	m	class:madness::Derivative
right_rpt	src/madness/mra/derivative.h	/^        Tensor<double> right_r0t, right_rpt; \/\/\/< Blocks of the derivative for the right boundary$/;"	m	class:madness::Derivative
rindx	src/apps/exciting/wannier.cc	/^    int rindx;$/;"	m	struct:ExcitingApp::wannierf	file:
rint	src/apps/nick/mpreal.h	/^inline const mpreal rint(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rint_ceil	src/apps/nick/mpreal.h	/^inline const mpreal rint_ceil (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rint_floor	src/apps/nick/mpreal.h	/^inline const mpreal rint_floor(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rint_round	src/apps/nick/mpreal.h	/^inline const mpreal rint_round(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rint_trunc	src/apps/nick/mpreal.h	/^inline const mpreal rint_trunc(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rks_c_vwn5__	src/apps/hf/lda.h	/^inline \/* Subroutine *\/ int rks_c_vwn5__(integer *ideriv, integer *npt, doublereal *$/;"	f
rks_x_lda__	src/apps/hf/lda.h	/^inline \/* Subroutine *\/ int rks_x_lda__(integer *ideriv, integer *npt, doublereal *$/;"	f
rlist	src/madness/mra/nonlinsol.h	/^		std::vector<Function<double,NDIM> > ulist, rlist;$/;"	m	class:madness::NonlinearSolverND
rlist	src/madness/mra/nonlinsol.h	/^        std::vector<T> ulist, rlist; \/\/\/< Subspace information$/;"	m	class:madness::XNonlinearSolver
rlm	src/apps/polar/gth_pseudopotential.h	/^    real_function_3d rlm(int l, int m) {$/;"	f	class:RlmStore
rlms	src/apps/polar/gth_pseudopotential.h	/^    vector_real_function_3d rlms;$/;"	m	class:RlmStore
rm	src/madness/mra/derivative.h	/^        Tensor<double> rm, r0, rp        ; \/\/\/< Blocks of the derivative operator$/;"	m	class:madness::Derivative
rm_bsp	src/madness/mra/derivative.h	/^        Tensor<double> rm_bsp;$/;"	m	class:madness::Derivative
rm_bsp_t	src/madness/mra/derivative.h	/^        Tensor<double> rm_bsp_t;$/;"	m	class:madness::Derivative
rmaxsq	src/apps/chem/molecularbasis.h	/^    double rmaxsq;$/;"	m	class:madness::AtomicBasis
rmaxsq	src/apps/hf/molecularbasis.h	/^    double rmaxsq;$/;"	m	class:AtomicBasis
rmaxsq	src/apps/polar/molecularbasis.h	/^    double rmaxsq;$/;"	m	class:AtomicBasis
rmi_handlerT	src/madness/world/worldrmi.h	/^    typedef void (*rmi_handlerT)(void* buf, size_t nbyte);$/;"	t	namespace:madness
rmi_task_is_running	src/madness/world/worldrmi.cc	/^    static volatile bool rmi_task_is_running = false;$/;"	m	namespace:madness	file:
rmt	src/madness/mra/derivative.h	/^        Tensor<double> rmt, r0t, rpt     ; \/\/\/< Blocks of the derivative operator, transposed$/;"	m	class:madness::Derivative
rn	src/apps/polar/mcpfit.cc	/^    double rn;$/;"	m	class:PotentialBasisFunctor	file:
rnlij	src/madness/mra/convolution1d.h	/^        const Tensor<Q>& rnlij(Level n, Translation lx, bool do_transpose=false) const {$/;"	f	class:madness::Convolution1D
rnlij_cache	src/madness/mra/convolution1d.h	/^        mutable SimpleCache<Tensor<Q>, 1> rnlij_cache;$/;"	m	class:madness::Convolution1D
rnlp	src/madness/mra/convolution1d.h	/^        Tensor<Q> rnlp(Level n, Translation lx) const {$/;"	f	class:madness::GaussianConvolution1D
rnlp	src/madness/mra/convolution1d.h	/^        Tensor<Q> rnlp(Level n, Translation lx) const {$/;"	f	class:madness::GenericConvolution1D
rnlp_cache	src/madness/mra/convolution1d.h	/^        mutable SimpleCache<Tensor<Q>, 1> rnlp_cache;$/;"	m	class:madness::Convolution1D
root	src/apps/chem/zcis.h	/^	struct root {$/;"	s	class:madness::Zcis
root	src/apps/nick/mpreal.h	/^inline const mpreal root(const mpreal& v, unsigned long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
root	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    Int root;  \/\/ relevant for [o ,o ]\/[MD,* ]\/[* ,MD]$/;"	m	struct:elem::BlockDistData
root	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	/^    Int root;  \/\/ relevant for [o ,o ]\/[MD,* ]\/[* ,MD]$/;"	m	struct:elem::DistData
rootConstrained_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    bool colConstrained_, rowConstrained_, rootConstrained_;$/;"	m	class:elem::AbstractBlockDistMatrix
rootConstrained_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    bool colConstrained_, rowConstrained_, rootConstrained_;$/;"	m	class:elem::AbstractDistMatrix
root_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    Int root_;$/;"	m	class:elem::AbstractBlockDistMatrix
root_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    Int root_;$/;"	m	class:elem::AbstractDistMatrix
roots	src/apps/chem/zcis.h	/^	std::vector<root> roots;$/;"	m	class:madness::Zcis
roots	src/apps/moldft/fci/fci.F	/^      double precision roots(/;"	v	program:fci
rootzero	src/madness/mra/sdf_shape_3D.h	/^        const long double rootzero; \/\/\/< Numerical zero for the roots$/;"	m	class:madness::SDFParaboloid
rot	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> rot(const std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
rot	src/madness/world/lookup3.c	72;"	d	file:
rotate	src/apps/chem/molecule.cc	/^void Molecule::rotate(const Tensor<double> &D)$/;"	f	class:madness::Molecule
rotate_subspace	src/apps/chem/SCF.cc	/^void SCF::rotate_subspace(World &world, const distmatT &dUT, subspaceT &subspace,$/;"	f	class:madness::SCF
rotate_subspace	src/apps/chem/SCF.cc	/^void SCF::rotate_subspace(World &world, const tensorT &U, subspaceT &subspace,$/;"	f	class:madness::SCF
rotate_subspace	src/apps/chem/nemo.h	/^void Nemo::rotate_subspace(World& world, const tensorT& U, solverT& solver,$/;"	f	class:madness::Nemo
rotate_subspace	src/apps/chem/znemo.h	/^	void rotate_subspace(const Tensor<double_complex>& U, solverT& solver) const {$/;"	f	class:madness::Znemo
rotate_subspace	src/apps/polar/moldft.cc	/^    void rotate_subspace(World &world, const tensorT &U, subspaceT &subspace, int lo, int nfunc, double trantol)$/;"	f	struct:Calculation
round	src/apps/nick/mpreal.h	/^inline const mpreal round(const mpreal& v)$/;"	f	namespace:mpfr
row	src/madness/external/tinyxml/tinyxml.h	/^	int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor
rowAlign	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    Int colAlign, rowAlign; $/;"	m	struct:elem::BlockDistData
rowAlign	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	/^    Int colAlign, rowAlign; $/;"	m	struct:elem::DistData
rowAlign_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    Int colAlign_, rowAlign_,$/;"	m	class:elem::AbstractBlockDistMatrix
rowAlign_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    Int colAlign_, rowAlign_,$/;"	m	class:elem::AbstractDistMatrix
rowConstrained_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    bool colConstrained_, rowConstrained_, rootConstrained_;$/;"	m	class:elem::AbstractBlockDistMatrix
rowConstrained_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    bool colConstrained_, rowConstrained_, rootConstrained_;$/;"	m	class:elem::AbstractDistMatrix
rowCut	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    Int colCut, rowCut;$/;"	m	struct:elem::BlockDistData
rowCut_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^        colCut_,   rowCut_,$/;"	m	class:elem::AbstractBlockDistMatrix
rowDist	src/madness/external/elemental/include/elemental/core/BlockDistMatrix.hpp	/^    Dist colDist, rowDist;$/;"	m	struct:elem::BlockDistData
rowDist	src/madness/external/elemental/include/elemental/core/DistMatrix.hpp	/^    Dist colDist, rowDist;$/;"	m	struct:elem::DistData
rowShift_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^        colShift_, rowShift_;$/;"	m	class:elem::AbstractBlockDistMatrix
rowShift_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^        colShift_, rowShift_;$/;"	m	class:elem::AbstractDistMatrix
row_distributed_matrix	src/apps/ii/systolic.h	/^    DistributedMatrix<T> row_distributed_matrix(World& world, int64_t n, int64_t m, int64_t rowtile=0) {$/;"	f	namespace:madness
row_distributed_matrix	src/madness/tensor/distributed_matrix.h	/^    DistributedMatrix<T> row_distributed_matrix(World& world, int64_t n, int64_t m, int64_t rowtile=0) {$/;"	f	namespace:madness
row_distributed_matrix_distribution	src/madness/tensor/distributed_matrix.h	/^    row_distributed_matrix_distribution(World& world, int64_t n, int64_t m, int64_t rowtile) { \/\/ default rowtile=0 above$/;"	f	namespace:madness
rowdim	src/apps/ii/systolic.h	/^        int64_t rowdim() const { return m; }$/;"	f	class:madness::DistributedMatrix
rowdim	src/apps/ii/systolic.h	/^        int64_t rowdim;                 \/\/< A(coldim,rowdim)$/;"	m	class:madness::SystolicMatrixAlgorithm
rowdim	src/madness/tensor/distributed_matrix.h	/^        int64_t rowdim() const {$/;"	f	class:madness::DistributedMatrixDistribution
rowdim	src/madness/tensor/systolic.h	/^        const int64_t rowdim;           \/\/\/< A(coldim,rowdim)$/;"	m	class:madness::SystolicMatrixAlgorithm
rowtile	src/apps/ii/systolic.h	/^        int64_t rowtile() const { return tilem; }$/;"	f	class:madness::DistributedMatrix
rowtile	src/madness/tensor/distributed_matrix.h	/^        int64_t rowtile() const {$/;"	f	class:madness::DistributedMatrixDistribution
rp	src/madness/mra/derivative.h	/^        Tensor<double> rm, r0, rp        ; \/\/\/< Blocks of the derivative operator$/;"	m	class:madness::Derivative
rp_bsp	src/madness/mra/derivative.h	/^        Tensor<double> rp_bsp;$/;"	m	class:madness::Derivative
rp_bsp_t	src/madness/mra/derivative.h	/^        Tensor<double> rp_bsp_t;$/;"	m	class:madness::Derivative
rpt	src/madness/mra/derivative.h	/^        Tensor<double> rmt, r0t, rpt     ; \/\/\/< Blocks of the derivative operator, transposed$/;"	m	class:madness::Derivative
rq	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/ApplyQ.hpp	/^namespace rq {$/;"	n	namespace:elem
rq	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Cholesky.hpp	/^namespace rq {$/;"	n	namespace:elem
rq	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/Householder.hpp	/^namespace rq {$/;"	n	namespace:elem
rq	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/PanelHouseholder.hpp	/^namespace rq {$/;"	n	namespace:elem
rq	src/madness/external/elemental/include/elemental/lapack-like/factor/RQ/SolveAfter.hpp	/^namespace rq {$/;"	n	namespace:elem
rr_cholesky	src/madness/tensor/lapack.cc	/^    void rr_cholesky(Tensor<T>& A, typename Tensor<T>::scalar_type tol, Tensor<integer>& piv, int& rank) {$/;"	f	namespace:madness
rrr_t	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^} rrr_t;$/;"	t	typeref:struct:__anon19
rrrebak	src/apps/moldft/fci/rsg.f	/^      subroutine rrrebak(/;"	s
rrreduc	src/apps/moldft/fci/rsg.f	/^      subroutine rrreduc(/;"	s
rsg	src/apps/moldft/fci/rsg.f	/^      subroutine rsg(/;"	s
rsqasymptotic	src/apps/hf/mentity.h	/^    std::vector<double> rsqasymptotic;   \/\/ Value of r*r beyond which the potential is asymptotic 1\/r$/;"	m	class:MolecularEntity
rsqmax	src/apps/chem/corepotential.h	/^    double rsqmax;$/;"	m	struct:madness::CoreOrbital
rsqmax	src/apps/chem/molecularbasis.h	/^    double rsqmax;$/;"	m	class:madness::ContractedGaussianShell
rsqmax	src/apps/hf/molecularbasis.h	/^    double rsqmax;$/;"	m	class:ContractedGaussianShell
rsqmax	src/apps/polar/corepotential.h	/^    double rsqmax;$/;"	m	struct:CoreOrbital
rsqmax	src/apps/polar/molecularbasis.h	/^    double rsqmax;$/;"	m	class:ContractedGaussianShell
rsqrt	src/madness/mra/tools/longfloat.py	/^    def rsqrt(self):$/;"	m	class:longfloat
rsquared	src/apps/chem/SCF.cc	/^static double rsquared(const coordT &r)$/;"	f	namespace:madness
rsquared	src/apps/hf/electronicstructureapp.h	/^double rsquared(const coordT& r) {$/;"	f
rsquared	src/apps/polar/moldft.cc	/^double rsquared(const coordT &r)$/;"	f
rtensorT	src/apps/hf/esolver.h	/^typedef Tensor<double> rtensorT;$/;"	t
rtensorT	src/apps/hf/solver.h	/^    typedef Tensor<double> rtensorT;$/;"	t	class:madness::Solver
rtol1	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double       rtol1;$/;"	m	struct:__anon30
rtol1	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double rtol1;$/;"	m	struct:__anon25
rtol2	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double       rtol2;$/;"	m	struct:__anon30
rtol2	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double rtol2;$/;"	m	struct:__anon25
run	src/apps/ii/systolic.h	/^        void run(World& world, const TaskThreadEnv& env) {$/;"	f	class:madness::SystolicMatrixAlgorithm
run	src/madness/mra/vmra1.h	/^        void run(World& world) {$/;"	f	struct:madness::MatrixInnerTask
run	src/madness/tensor/systolic.h	/^        void run(World& world, const TaskThreadEnv& env) {$/;"	f	class:madness::SystolicMatrixAlgorithm
run	src/madness/world/taskfn.h	/^        virtual void run(World& world, const TaskThreadEnv& env) {$/;"	f	class:madness::TaskInterface
run	src/madness/world/taskfn.h	/^        virtual void run(World&) {$/;"	f	class:madness::TaskInterface
run	src/madness/world/taskfn.h	/^        virtual void run(const TaskThreadEnv& env) {$/;"	f	struct:madness::TaskFn
run	src/madness/world/test_atomicint.cc	/^    void run(const TaskThreadEnv& env) {$/;"	f	class:Adder
run	src/madness/world/test_atomicint.cc	/^    void run(const TaskThreadEnv& env) {$/;"	f	class:Greet
run	src/madness/world/test_hashthreaded.cc	/^    void run() {$/;"	f	class:Peasant
run	src/madness/world/test_hashthreaded.cc	/^    void run() {$/;"	f	class:Worker
run	src/madness/world/test_queue.cc	/^    virtual void run(madness::World& world) {$/;"	f	class:Task
run	src/madness/world/test_world.cc	/^    void run(World& world) {$/;"	f	class:GPUHelloWorldTask
run	src/madness/world/test_world.cc	/^    void run(World& world) {$/;"	f	class:TestTask
run	src/madness/world/test_world.cc	/^    void run(World& world, const TaskThreadEnv& env) {$/;"	f	class:TestBarrier
run	src/madness/world/test_world.cc	/^    void run(World& world, const TaskThreadEnv& env) {$/;"	f	class:TimeBarrier
run	src/madness/world/thread.h	/^        void run() {$/;"	f	class:madness::Thread
run	src/madness/world/thread.h	/^        void run(const TaskThreadEnv& \/*info*\/) {}$/;"	f	class:madness::PoolTaskNull
run	src/madness/world/world_task_queue.cc	/^    void TaskInterface::run(const TaskThreadEnv& env) {$/;"	f	class:madness::TaskInterface
run	src/madness/world/worldrmi.h	/^            void run() {$/;"	f	class:madness::RMI::RmiTask
run_all_calculations	src/apps/chem/test_qc.cc	/^int run_all_calculations(World& world, const std::vector<CalculationParameters>& all_parameters,$/;"	f
run_function	src/madness/world/taskfn.h	/^        run_function(Future<void>& result, fnT fn, a1T& a1, a2T& a2,$/;"	f	namespace:madness::detail
run_function	src/madness/world/taskfn.h	/^        run_function(Future<void>& result, fnT fn, a1T& a1,$/;"	f	namespace:madness::detail
run_function	src/madness/world/taskfn.h	/^        run_function(Future<void>& result, fnT fn, const voidT&,$/;"	f	namespace:madness::detail
run_function	src/madness/world/taskfn.h	/^        run_function(typename task_result_type<fnT>::futureT& result,$/;"	f	namespace:madness::detail
run_multi_threaded	src/madness/world/thread.h	/^    	bool run_multi_threaded() {$/;"	f	class:madness::PoolTaskInterface
run_task	src/madness/world/thread.h	/^        bool run_task(bool wait, ThreadPoolThread* this_thread) {$/;"	f	class:madness::ThreadPool
run_task	src/madness/world/thread.h	/^        static bool run_task() {$/;"	f	class:madness::ThreadPool
run_tasks	src/madness/world/thread.h	/^        bool run_tasks(bool wait, ThreadPoolThread* const this_thread) {$/;"	f	class:madness::ThreadPool
running_	src/madness/external/elemental/include/elemental/core/Timer/decl.hpp	/^    bool running_ = false;$/;"	m	class:elem::Timer
runtest	src/madness/mra/adquad.h	/^            static bool runtest() {$/;"	f	struct:madness::detail::adqtest
rvec	src/apps/chem/znemo.h	/^	std::vector<real_function_3d> rvec;$/;"	m	class:madness::Znemo
rvecfuncT	src/apps/hf/esolver.h	/^typedef std::vector<rfunctionT> rvecfuncT;$/;"	t
rvecfuncT	src/apps/hf/ewald.cc	/^typedef std::vector<rfunctionT> rvecfuncT;$/;"	t	file:
rvecs	src/apps/hf/ewald.cc	/^  std::vector< Vector<double,3> > rvecs;$/;"	m	class:EwaldNuclearPotentialFunctor	file:
rvecs	src/apps/hf/ewald.cc	/^  std::vector< Vector<double,3> > rvecs;$/;"	m	class:MolecularNuclearPotentialFunctor2	file:
rvmove	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-rvalue_references.cxx	/^   rvmove()$/;"	f	class:rvmove
rvmove	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-rvalue_references.cxx	/^   rvmove(rvmove &&other)$/;"	f	class:rvmove
rvmove	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-rvalue_references.cxx	/^class rvmove {$/;"	c	file:
s	src/apps/adrian/gaussian.h	/^  s, px, py, pz,$/;"	m	class:slymer::GaussianType
s	src/apps/bryan/gaussian.h	/^  s, px, py, pz,$/;"	m	class:slymer::GaussianType
s	src/apps/moldft/fci/timer.f	/^      double precisi/;"	v
s	src/examples/compiler/mra-driver.hh	/^    std::string s;       \/\/ Token or operator$/;"	m	class:Exp
s	src/examples/molecularmask.h	/^    const MolecularVolumeExponentialSwitch s;$/;"	m	class:MolecularVolumeExponentialSwitchReciprocal
s	src/madness/misc/ran.h	/^        const int s;$/;"	m	class:madness::Random
s	src/madness/mra/function_common_data.h	/^        Slice s[4]; \/\/\/< s[0]=Slice(0,k-1), s[1]=Slice(k,2*k-1), etc.$/;"	m	class:madness::FunctionCommonData
s0	src/apps/tdse/tdse4.cc	/^static const double s0 = sqrtmu*R0;$/;"	v	file:
s0	src/madness/mra/function_common_data.h	/^        std::vector<Slice> s0; \/\/\/< s[0] in each dimension to get scaling coeff$/;"	m	class:madness::FunctionCommonData
s0	src/madness/mra/operator.h	/^        const std::vector<Slice> s0;$/;"	m	class:madness::SeparatedConvolution
s2b	src/apps/chem/CCPotentials.cc	/^  CCPotentials::s2b(const CC_vecfunction& singles,const Pairs<CCPair>& doubles) const {$/;"	f	class:madness::CCPotentials
s2c	src/apps/chem/CCPotentials.cc	/^  CCPotentials::s2c(const CC_vecfunction& singles,const Pairs<CCPair>& doubles) const {$/;"	f	class:madness::CCPotentials
s4a_from_s2b	src/apps/chem/CCPotentials.cc	/^  CCPotentials::s4a_from_s2b(const vector_real_function_3d& s2b,const CC_vecfunction& singles) const {$/;"	f	class:madness::CCPotentials
s4b	src/apps/chem/CCPotentials.cc	/^  CCPotentials::s4b(const CC_vecfunction& singles,const Pairs<CCPair>& doubles) const {$/;"	f	class:madness::CCPotentials
s4c	src/apps/chem/CCPotentials.cc	/^  CCPotentials::s4c(const CC_vecfunction& singles,const Pairs<CCPair>& doubles) const {$/;"	f	class:madness::CCPotentials
sInv	src/madness/external/elemental/include/elemental/matrices/HelmholtzPML.hpp	/^sInv( Int j, Int n, Int numPmlPoints, Real h, Real pmlExp, Real sigma, Real k )$/;"	f	namespace:elem::pml
s_	src/madness/tensor/srconf.h	/^		std::vector<Slice> s_;$/;"	m	class:madness::SRConf
s_locale	src/madness/external/muParser/muParser.cpp	/^  std::locale Parser::s_locale = std::locale("C");$/;"	m	class:mu::Parser	file:
s_locale	src/madness/external/muParser/muParser.h	/^    static std::locale s_locale;  \/\/\/< The locale used by the parser$/;"	m	class:mu::Parser
s_orbital	src/apps/chem/znemo.h	/^		s_orbital(const double& expo, const coord_3d& o) :$/;"	f	struct:madness::Znemo::s_orbital
s_orbital	src/apps/chem/znemo.h	/^	struct s_orbital : public FunctionFunctorInterface<double_complex,3> {$/;"	s	class:madness::Znemo
s_queue	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  queue_t *s_queue;$/;"	m	struct:__anon27
s_x_gaussian_shift_2d	src/apps/chem/test_pointgroupsymmetry.cc	/^double s_x_gaussian_shift_2d(const coord_2d& r) {$/;"	f
s_xz_dgaussian	src/apps/chem/test_pointgroupsymmetry.cc	/^double s_xz_dgaussian(const coord_3d& r) {$/;"	f
safety	src/apps/nick/extra.h	/^  double safety;      \/\/ additional precision (thresh*safety) for operators and potential$/;"	m	struct:InputParameters
safety	src/apps/nick/tdse1.cc	/^    double safety;      \/\/ additional precision (thresh*safety) for operators and potential$/;"	m	struct:InputParameters	file:
safety	src/apps/tdse/tdse.cc	/^  double safety;      \/\/ additional precision (thresh*safety) for operators and potential$/;"	m	struct:InputParameters	file:
safety	src/apps/tdse/tdse.confused.cc	/^  double safety;      \/\/ additional precision (thresh*safety) for operators and potential$/;"	m	struct:InputParameters	file:
safety	src/apps/tdse/tdse4.cc	/^  double safety;      \/\/ additional precision (thresh*safety) for operators and potential$/;"	m	struct:InputParameters	file:
safety	src/examples/smooth.h	/^    const double safety;$/;"	m	struct:density_mask_operator
safety_thresh_ptrho	src/examples/smooth.h	/^	const double safety_thresh_ptrho = FunctionDefaults<3>::get_thresh()*0.01;$/;"	m	struct:apply_kernel_helper
safety_thresh_rho	src/examples/smooth.h	/^	const double safety_thresh_rho = FunctionDefaults<3>::get_thresh()*0.01;$/;"	m	struct:apply_kernel_helper
same	src/apps/chem/SCFOperators.h	/^    Exchange& same(const bool flag) {$/;"	f	class:madness::Exchange
same	src/apps/chem/SCFOperators.h	/^    bool same() const {return same_;}$/;"	f	class:madness::Exchange
same	src/apps/chem/SCFOperators.h	/^    bool& same() {return same_;}$/;"	f	class:madness::Exchange
same_	src/apps/chem/SCFOperators.h	/^    bool same_=false;$/;"	m	class:madness::Exchange
same_size	src/apps/adrian/ResponseFunction2.h	/^  bool same_size(const ResponseFunction& b) const {$/;"	f	class:madness::ResponseFunction
same_size	src/apps/bryan/ResponseFunction2.h	/^      bool same_size(const ResponseFunction& b) const {$/;"	f	class:madness::ResponseFunction
sanity	src/apps/chem/CCStructures.h	/^    void sanity()const{print_intermediate(HOLE);}$/;"	f	struct:madness::CCConvolutionOperator
sanity	src/madness/mra/leafop.h	/^    sanity() const {$/;"	f	class:madness::Leaf_op
sanity	src/madness/mra/leafop.h	/^    void sanity()const{$/;"	f	class:madness::Leaf_op_other
sanity_check	src/apps/chem/CCStructures.cc	/^  void CCParameters::sanity_check(World &world)const{$/;"	f	class:madness::CCParameters
sanity_check	src/madness/world/dqueue.h	/^        void sanity_check() const {$/;"	f	class:madness::DQueue
sara	src/madness/world/test_world.cc	/^    static double_complex sara(double a, const double_complex& b) {$/;"	f	class:TTT
save	src/apps/adrian/ResponseParameters.h	/^      bool save;                         \/\/\/< Controls if orbitals will be saved each iteration$/;"	m	struct:madness::ResponseParameters
save	src/apps/adrian/TDDFT.cc	/^void TDHF::save(World &world) {$/;"	f	class:TDHF
save	src/apps/adrian/TDHF.cc	/^void TDHF::save(World & world)$/;"	f	class:TDHF
save	src/apps/adrian/TDHF2.cc	/^void TDHF::save(World & world)$/;"	f	class:TDHF
save	src/apps/bryan/ResponseParameters.h	/^      bool save;                         \/\/\/< Controls if orbitals will be saved each iteration$/;"	m	struct:madness::ResponseParameters
save	src/apps/bryan/TDHF.cc	/^void TDHF::save(World & world)$/;"	f	class:TDHF
save	src/apps/bryan/TDHF2.cc	/^void TDHF::save(World & world)$/;"	f	class:TDHF
save	src/apps/chem/CalculationParameters.h	/^	bool save() const {return get<bool>("save");}$/;"	f	struct:madness::CalculationParameters
save	src/apps/polar/moldft.cc	/^    bool save;             \/\/\/< If true save orbitals to disk$/;"	m	struct:CalculationParameters	file:
save	src/examples/helium_exact.cc	/^void save(World& world, const real_function_6d& f, std::string filename) {$/;"	f
save_function	src/apps/chem/mp2.cc	/^void MP2::save_function(const Function<T, NDIM>& f,$/;"	f	class:madness::MP2
save_function	src/apps/chem/nemo.h	/^void Nemo::save_function(const std::vector<Function<T,NDIM> >& f, const std::string name) const {$/;"	f	class:madness::Nemo
save_function	src/examples/helium_mp2.cc	/^void save_function(World& world, const Function<double,NDIM>& pair, const std::string name) {$/;"	f
save_function	src/examples/tiny.cc	/^void save_function(World& world, Function<double,NDIM>& pair, const std::string name) {$/;"	f
save_function	src/madness/mra/test6.cc	/^void save_function(World& world, Function<double,NDIM>& pair, const std::string name) {$/;"	f
save_function	src/madness/mra/vmra.h	/^void save_function(const std::vector<Function<T, NDIM>>& f,$/;"	f	namespace:madness
save_functions	src/apps/chem/CCStructures.h	/^    void save_functions(const std::string msg="")const{$/;"	f	struct:madness::CC_vecfunction
save_guess	src/apps/chem/zcis.cc	/^void Zcis::save_guess(const std::vector<root>& roots) const {$/;"	f	class:madness::Zcis
save_iter_dcep_correction	src/apps/chem/oep.h	/^	unsigned int save_iter_dcep_correction    () const {return get<unsigned int>("save_iter_dcep_correction");}$/;"	f	class:madness::OEP_Parameters
save_iter_density	src/apps/chem/oep.h	/^	unsigned int save_iter_density            () const {return get<unsigned int>("save_iter_density");}$/;"	f	class:madness::OEP_Parameters
save_iter_effective_potential	src/apps/chem/oep.h	/^	unsigned int save_iter_effective_potential() const {return get<unsigned int>("save_iter_effective_potential");}$/;"	f	class:madness::OEP_Parameters
save_iter_kin_P_KS	src/apps/chem/oep.h	/^	unsigned int save_iter_kin_P_KS           () const {return get<unsigned int>("save_iter_kin_p_ks");}$/;"	f	class:madness::OEP_Parameters
save_iter_kin_tot_KS	src/apps/chem/oep.h	/^	unsigned int save_iter_kin_tot_KS         () const {return get<unsigned int>("save_iter_kin_tot_ks");}$/;"	f	class:madness::OEP_Parameters
save_iter_mrks_correction	src/apps/chem/oep.h	/^	unsigned int save_iter_mrks_correction    () const {return get<unsigned int>("save_iter_mrks_correction");}$/;"	f	class:madness::OEP_Parameters
save_iter_ocep_correction	src/apps/chem/oep.h	/^	unsigned int save_iter_ocep_correction    () const {return get<unsigned int>("save_iter_ocep_correction");}$/;"	f	class:madness::OEP_Parameters
save_iter_orbs	src/apps/chem/oep.h	/^	unsigned int save_iter_orbs               () const {return get<unsigned int>("save_iter_orbs");}$/;"	f	class:madness::OEP_Parameters
save_iter_total_correction	src/apps/chem/oep.h	/^	unsigned int save_iter_total_correction   () const {return get<unsigned int>("save_iter_total_correction");}$/;"	f	class:madness::OEP_Parameters
save_mos	src/apps/chem/MolecularOrbitals.h	/^	void save_mos(archive::ParallelOutputArchive& ar, const Molecule& molecule) const {$/;"	f	class:madness::MolecularOrbitals
save_mos	src/apps/chem/SCF.cc	/^void SCF::save_mos(World &world)$/;"	f	class:madness::SCF
save_mos	src/apps/polar/moldft.cc	/^    void save_mos(World &world)$/;"	f	struct:Calculation
save_orbitals	src/apps/chem/znemo.cc	/^void Znemo::save_orbitals(std::string suffix) const {$/;"	f	class:madness::Znemo
save_orbitals	src/apps/chem/znemo.h	/^	void save_orbitals() const {$/;"	f	class:madness::Znemo
save_orbitals	src/apps/hf/solver.h	/^    void save_orbitals()$/;"	f	class:madness::Solver
save_pnos	src/apps/chem/PNO.cpp	/^void PNO::save_pnos(const PNOPairs& pairs) const {$/;"	f	class:madness::PNO
save_restartaodata	src/apps/chem/MolecularOrbitals.cc	/^void MolecularOrbitals<T,NDIM>::save_restartaodata(World& world, const Molecule& molecule,$/;"	f	class:madness::MolecularOrbitals
save_restartdata	src/apps/chem/MolecularOrbitals.h	/^	void static save_restartdata(World& world, const Molecule& molecule,$/;"	f	class:madness::MolecularOrbitals
saving_amount	src/apps/chem/oep.h	/^	unsigned int saving_amount() const {return get<unsigned int>("saving_amount");}$/;"	f	class:madness::OEP_Parameters
sbox	src/apps/chem/znemo.h	/^	real_function_3d sbox;$/;"	m	class:madness::Znemo
scal	src/madness/tensor/cblas.h	/^    inline void scal(const integer n, const complex_real4 alpha, complex_real4* x, const integer incx) {$/;"	f	namespace:madness::cblas
scal	src/madness/tensor/cblas.h	/^    inline void scal(const integer n, const complex_real8 alpha, complex_real8* x, const integer incx) {$/;"	f	namespace:madness::cblas
scal	src/madness/tensor/cblas.h	/^    inline void scal(const integer n, const double alpha, complex_real8* x, const integer incx) {$/;"	f	namespace:madness::cblas
scal	src/madness/tensor/cblas.h	/^    inline void scal(const integer n, const double alpha, double* x, const integer incx) {$/;"	f	namespace:madness::cblas
scal	src/madness/tensor/cblas.h	/^    inline void scal(const integer n, const float alpha, complex_real4* x, const integer incx) {$/;"	f	namespace:madness::cblas
scal	src/madness/tensor/cblas.h	/^    inline void scal(const integer n, const float alpha, float* x, const integer incx) {$/;"	f	namespace:madness::cblas
scalapack	src/madness/external/elemental/include/elemental/core/imports/scalapack.hpp	/^namespace scalapack {$/;"	n	namespace:elem
scalapack	src/madness/external/elemental/src/core/imports/scalapack.cpp	/^namespace scalapack {$/;"	n	namespace:elem	file:
scalar_type	src/madness/tensor/gmres.h	/^            typedef T scalar_type;$/;"	t	class:madness::FunctionSpace
scalar_type	src/madness/tensor/gmres.h	/^            typedef T scalar_type;$/;"	t	class:madness::VectorOfFunctionsSpace
scalar_type	src/madness/tensor/gmres.h	/^            typedef T scalar_type;$/;"	t	class:madness::VectorSpace
scalar_type	src/madness/tensor/lowranktensor.h	/^    typedef typename TensorTypeData<T>::scalar_type scalar_type;$/;"	t	class:madness::LowRankTensor
scalar_type	src/madness/tensor/srconf.h	/^		typedef typename Tensor<T>::scalar_type scalar_type;$/;"	t	class:madness::SRConf
scalar_type	src/madness/tensor/tensor.h	/^        typedef typename TensorTypeData<T>::scalar_type scalar_type;$/;"	t	class:madness::Tensor
scalar_type	src/madness/tensor/tensortrain.h	/^        typedef typename TensorTypeData<T>::scalar_type scalar_type;$/;"	t	class:madness::TensorTrain
scale	src/apps/adrian/ResponseFunction2.h	/^  void scale(Tensor<double>& mat) {$/;"	f	class:madness::ResponseFunction
scale	src/apps/adrian/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> scale(std::vector<std::vector<real_function_3d>> a,$/;"	f
scale	src/apps/adrian/TDHF_Basic_Operators2.h	/^ResponseFunction scale(ResponseFunction a, double b) {$/;"	f
scale	src/apps/bryan/ResponseFunction2.h	/^      void scale(Tensor<double>& mat) {$/;"	f	class:madness::ResponseFunction
scale	src/apps/bryan/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> scale(std::vector<std::vector<real_function_3d>> a,$/;"	f
scale	src/apps/bryan/TDHF_Basic_Operators2.h	/^ResponseFunction scale(ResponseFunction a,$/;"	f
scale	src/apps/chem/CCStructures.h	/^    void scale(const double& factor){$/;"	f	struct:madness::CC_vecfunction
scale	src/madness/mra/funcimpl.h	/^        void scale(Q a) {$/;"	f	class:madness::FunctionNode
scale	src/madness/mra/mra.h	/^        Function<T,NDIM>& scale(const Q q, bool fence=true) {$/;"	f	class:madness::Function
scale	src/madness/mra/vmra.h	/^void scale(World& world, std::vector<Function<T, NDIM>>& v, const Q factor,$/;"	f	namespace:madness
scale	src/madness/mra/vmra.h	/^void scale(World& world, std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
scale	src/madness/mra/vmra1.h	/^      void scale(World& world,$/;"	f	namespace:madness
scale	src/madness/tensor/gmres.h	/^            virtual Function<scalar_type, NDIM> & scale($/;"	f	class:madness::FunctionSpace
scale	src/madness/tensor/gmres.h	/^            virtual Vector<Function<scalar_type, FDIM>, VDIM> & scale($/;"	f	class:madness::VectorOfFunctionsSpace
scale	src/madness/tensor/gmres.h	/^            virtual Vector<scalar_type, NDIM> & scale($/;"	f	class:madness::VectorSpace
scale	src/madness/tensor/lowranktensor.h	/^    scale(Q fac) {$/;"	f	class:madness::LowRankTensor
scale	src/madness/tensor/srconf.h	/^		void scale(const double& fac) {weights_.scale(fac);};$/;"	f	class:madness::SRConf
scale	src/madness/tensor/srconf.h	/^		void scale(const double_complex& fac) {$/;"	f	class:madness::SRConf
scale	src/madness/tensor/tensor.h	/^        scale(Q x) {$/;"	f	class:madness::Tensor
scale	src/madness/tensor/tensortrain.h	/^        void scale(T fac) {$/;"	f	class:madness::TensorTrain
scale_2d	src/apps/adrian/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> scale_2d(World & world,$/;"	f
scale_2d	src/apps/adrian/TDHF_Basic_Operators2.h	/^ResponseFunction scale_2d(World& world, ResponseFunction& a,$/;"	f
scale_2d	src/apps/bryan/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> scale_2d(World & world,$/;"	f
scale_2d	src/apps/bryan/TDHF_Basic_Operators2.h	/^ResponseFunction scale_2d(World & world,$/;"	f
scale_K	src/apps/chem/SCFOperators.h	/^    const double scale_K;$/;"	m	class:madness::Fock
scale_coords	src/apps/moldft/moldx.py	/^def scale_coords(coords, fac):$/;"	f
scale_coords	src/apps/polar/moldx.py	/^def scale_coords(coords, fac):$/;"	f
scale_inplace	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::scale_inplace(const T q, bool fence) {$/;"	f	class:madness::FunctionImpl
scale_matrix	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^double scale_matrix(in_t *Dstruct, val_t *Wstruct, bool valeig)$/;"	f	file:
scale_oop	src/madness/mra/funcimpl.h	/^        void scale_oop(const Q q, const FunctionImpl<F,NDIM>& f, bool fence) {$/;"	f	class:madness::FunctionImpl
scaleinplace	src/madness/mra/mraimpl.h	/^            scaleinplace() {}$/;"	f	struct:madness::detail::scaleinplace
scaleinplace	src/madness/mra/mraimpl.h	/^            scaleinplace(T q) {this->q = q;}$/;"	f	struct:madness::detail::scaleinplace
scaleinplace	src/madness/mra/mraimpl.h	/^        struct scaleinplace {$/;"	s	namespace:madness::detail
scaling	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^    SignScaling scaling;$/;"	m	struct:elem::SignCtrl
scan	src/madness/world/dqueue.h	/^        void scan(opT& op) {$/;"	f	class:madness::DQueue
scan	src/madness/world/thread.h	/^        void scan(opT& op) {$/;"	f	class:madness::ThreadPool
schoenflies_	src/apps/chem/pointgroupsymmetry.h	/^	std::string schoenflies_;					\/\/\/< Schoenflies symbol of the point group$/;"	m	struct:madness::charactertable
schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/CheckReal.hpp	/^namespace schur {$/;"	n	namespace:elem
schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/InverseFreeSDC.hpp	/^namespace schur {$/;"	n	namespace:elem
schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QR.hpp	/^namespace schur {$/;"	n	namespace:elem
schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/QuasiTriangEig.hpp	/^namespace schur {$/;"	n	namespace:elem
schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/RealToComplex.hpp	/^namespace schur {$/;"	n	namespace:elem
schur	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^namespace schur {$/;"	n	namespace:elem
schur	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    bool schur; \/\/ begin with reduction to Schur form?$/;"	m	struct:elem::PseudospecCtrl
scientific	src/apps/chem/CCStructures.h	/^    bool scientific;$/;"	m	struct:madness::CCMessenger
scomplex	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^typedef Complex<float>  scomplex; $/;"	t	namespace:elem
scoped_ptr	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  explicit scoped_ptr(T* p = NULL) : ptr_(p) {}$/;"	f	class:testing::internal::scoped_ptr
scoped_ptr	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^class scoped_ptr {$/;"	c	namespace:testing::internal
scopedepth	src/examples/compiler/mra-driver.hh	/^    int scopedepth;             \/\/ Nesting depth of if\/while to disambiguate end keyword$/;"	m	class:mra_driver
screen	src/apps/moldft/fci/screen.F	/^      subroutine screen(/;"	s
screen	src/madness/mra/funcimpl.h	/^            bool screen(const coeffT& fcoeff, const coeffT& gcoeff, const keyT& key) const {$/;"	f	struct:madness::FunctionImpl::multiply_op
screen	src/madness/tensor/tensor.h	/^        Tensor<T>& screen(double x) {$/;"	f	class:madness::Tensor
screened	src/apps/chem/gth_pseudopotential.h	/^    virtual bool screened(const coord_3d& c1, const coord_3d& c2) const {$/;"	f	class:madness::ProjRLMFunctor
screened	src/madness/mra/function_interface.h	/^	    virtual bool screened(const Vector<double,NDIM>& c1, const Vector<double,NDIM>& c2) const {$/;"	f	class:madness::FunctionFunctorInterface
scroll_	src/madness/external/elemental/include/elemental/io/DisplayWindow-premoc.hpp	/^    QScrollArea *scroll_;$/;"	m	class:elem::DisplayWindow
scroll_	src/madness/external/elemental/include/elemental/io/SpyWindow/decl.hpp	/^    QScrollArea *scroll_;$/;"	m	class:elem::SpyWindow
sd	src/apps/hf/electronicstructureparams.h	/^  double sd;$/;"	m	struct:madness::ElectronicStructureParams
sdcCtrl	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    HermitianSdcCtrl<Real> sdcCtrl;$/;"	m	struct:elem::HermitianEigCtrl
sdcCtrl	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    SdcCtrl<Real> sdcCtrl;$/;"	m	struct:elem::PseudospecCtrl
sdf	src/examples/molecularmask.h	/^    double sdf(const madness::coord_3d& r, const madness::coord_3d& center, double R) const {$/;"	f	class:MolecularMaskBase
sdf	src/madness/mra/sdf_domainmask.h	/^        std::shared_ptr<SignedDFInterface<NDIM> > sdf;$/;"	m	class:madness::DomainMaskSDFFunctor
sdf	src/madness/mra/sdf_shape_2D.h	/^        double sdf(const coord_2d& pt) const {$/;"	f	class:madness::SDFCircle
sdf	src/madness/mra/sdf_shape_2D.h	/^        double sdf(const coord_2d& pt) const {$/;"	f	class:madness::SDFRectangle
sdf	src/madness/mra/sdf_shape_3D.h	/^        double sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFBox
sdf	src/madness/mra/sdf_shape_3D.h	/^        double sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFCone
sdf	src/madness/mra/sdf_shape_3D.h	/^        double sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFCylinder
sdf	src/madness/mra/sdf_shape_3D.h	/^        double sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFEllipsoid
sdf	src/madness/mra/sdf_shape_3D.h	/^        double sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFParaboloid
sdf	src/madness/mra/sdf_shape_3D.h	/^        double sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFPlane
sdf	src/madness/mra/sdf_shape_3D.h	/^        double sdf(const coord_3d& pt) const {$/;"	f	class:madness::SDFSphere
sdfi	src/apps/interior_bc/test_problems.h	/^        SignedDFInterface<3> *sdfi;$/;"	m	class:EmbeddedDirichlet
sec	src/apps/nick/mpreal.h	/^inline const mpreal sec(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sech	src/apps/nick/mpreal.h	/^inline const mpreal sech (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sech	src/madness/mra/testdiff1Db.cc	/^double sech(double val)$/;"	f
section	src/apps/chem/CCStructures.cc	/^  CCMessenger::section(const std::string& msg) const {$/;"	f	class:madness::CCMessenger
seed	src/madness/mra/tools/longfloat.py	/^    from whrandom import random, seed$/;"	i
seek_read	src/apps/moldft/fci/crayio.c	/^  int seek_read;             \/* no. of seeks on read *\/$/;"	m	struct:w_file	file:
seek_write	src/apps/moldft/fci/crayio.c	/^  int seek_write;            \/* no. of seeks on write *\/$/;"	m	struct:w_file	file:
select_active_subspace	src/apps/adrian/TDDFT.cc	/^void TDHF::select_active_subspace(World &world) {$/;"	f	class:TDHF
select_active_subspace	src/apps/adrian/TDHF.cc	/^void TDHF::select_active_subspace(World & world)$/;"	f	class:TDHF
select_active_subspace	src/apps/adrian/TDHF2.cc	/^void TDHF::select_active_subspace(World & world)$/;"	f	class:TDHF
select_active_subspace	src/apps/bryan/TDHF.cc	/^void TDHF::select_active_subspace(World & world)$/;"	f	class:TDHF
select_active_subspace	src/apps/bryan/TDHF2.cc	/^void TDHF::select_active_subspace(World & world)$/;"	f	class:TDHF
select_functions	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::select_functions(World &world, ResponseFunction &f,$/;"	f	class:TDHF
select_functions	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::select_functions(World & world,$/;"	f	class:TDHF
select_functions	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::select_functions(World & world,$/;"	f	class:TDHF
select_functions	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::select_functions(World & world,$/;"	f	class:TDHF
select_functions	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::select_functions(World & world,$/;"	f	class:TDHF
self	src/madness/mra/function_factory.h	/^    CompositeFactory& self() {return *this;}$/;"	f	class:madness::CompositeFactory
self	src/madness/mra/function_factory.h	/^    FunctionFactory& self() {return *this;}$/;"	f	class:madness::FunctionFactory
self	src/madness/mra/function_factory.h	/^    TwoElectronFactory& self() {return *this;}$/;"	f	class:madness::TwoElectronFactory
self_overlap	src/apps/chem/CCStructures.cc	/^  CCPairFunction::self_overlap(const real_function_3d& R) const {$/;"	f	class:madness::CCPairFunction
self_type	src/madness/external/muParser/muParserError.h	/^    typedef ParserErrorMsg self_type;$/;"	t	class:mu::ParserErrorMsg
sem	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  sem_t      *sem; \/* since semt_t is a handle could also store it$/;"	m	struct:__anon17
send	src/madness/world/world_object.h	/^        send(ProcessID dest, memfnT memfn) const {$/;"	f	class:madness::WorldObject
send	src/madness/world/world_object.h	/^        send(ProcessID dest, memfnT memfn, const a1T& a1) const {$/;"	f	class:madness::WorldObject
send	src/madness/world/world_object.h	/^        send(ProcessID dest, memfnT memfn, const a1T& a1, const a2T& a2) const {$/;"	f	class:madness::WorldObject
send	src/madness/world/world_object.h	/^        send(ProcessID dest, memfnT memfn, const a1T& a1, const a2T& a2,$/;"	f	class:madness::WorldObject
send	src/madness/world/worldam.h	/^        void send(ProcessID dest, am_handlerT op, const AmArg* arg,$/;"	f	class:madness::WorldAmInterface
send	src/madness/world/worlddc.h	/^        send(const keyT& key, const memfunT& memfun, const arg1T& arg1) {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun) const {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun) {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1) const {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2) const {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2) {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3) const {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3) {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4) const {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4) {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5) const {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5) {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5, const arg6T& arg6) {$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4,$/;"	f	class:madness::WorldContainer
send	src/madness/world/worlddc.h	/^        send(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3,$/;"	f	class:madness::WorldContainer
send	src/madness/world/worldgop.h	/^        void send(const ProcessID dest, const keyT& key, const valueT& value) const {$/;"	f	class:madness::WorldGopInterface
sendCounts	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    std::vector<int> sendCounts, sendDispls,$/;"	m	struct:elem::PermutationMeta
sendDispls	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    std::vector<int> sendCounts, sendDispls,$/;"	m	struct:elem::PermutationMeta
sendDummy_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    byte sendDummy_, recvDummy_;$/;"	m	class:elem::AxpyInterface
sendIdx	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    std::vector<int> sendIdx, sendRanks,$/;"	m	struct:elem::PermutationMeta
sendRanks	src/madness/external/elemental/include/elemental/lapack-like/perm/PermutationMeta.hpp	/^    std::vector<int> sendIdx, sendRanks,$/;"	m	struct:elem::PermutationMeta
send_am	src/madness/world/world_object.h	/^        send_am(ProcessID dest, memfnT memfn, const a1T& a1, const a2T& a2,$/;"	f	class:madness::WorldObject
send_counters	src/madness/world/worldrmi.h	/^            std::unique_ptr<volatile counterT[]> send_counters;$/;"	m	class:madness::RMI::RmiTask
send_internal	src/madness/world/worldgop.h	/^        send_internal(const ProcessID dest, const keyT& key, const valueT& value) const {$/;"	f	class:madness::WorldGopInterface
send_internal	src/madness/world/worldgop.h	/^        void send_internal(ProcessID dest, const keyT& key, const Future<valueT>& value) const {$/;"	f	class:madness::WorldGopInterface
send_req	src/madness/world/worldam.h	/^        std::unique_ptr<SendReq []> send_req; \/\/\/< Send requests and managed buffers $/;"	m	class:madness::WorldAmInterface
send_req	src/madness/world/worldrmi.cc	/^    std::list< std::unique_ptr<RMISendReq> > RMI::send_req;$/;"	m	class:madness::RMI	file:
send_req	src/madness/world/worldrmi.h	/^        static std::list< std::unique_ptr<RMISendReq> > send_req; \/\/ List of outstanding world active messages sent by the server$/;"	m	class:madness::RMI
send_task	src/madness/world/world_object.h	/^        send_task(ProcessID dest, memfnT memfn, const a1T& a1,$/;"	f	class:madness::WorldObject
send_task	src/madness/world/world_task_queue.h	/^        send_task(ProcessID where, fnT fn, const a1T& a1,$/;"	f	class:madness::WorldTaskQueue
sendingData_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        sendingData_, sendingRequest_, sendingReply_;$/;"	m	class:elem::AxpyInterface
sendingReply_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        sendingData_, sendingRequest_, sendingReply_;$/;"	m	class:elem::AxpyInterface
sendingRequest_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^        sendingData_, sendingRequest_, sendingReply_;$/;"	m	class:elem::AxpyInterface
sense	src/madness/world/worldmutex.h	/^        volatile bool sense;$/;"	m	class:madness::Barrier
sentEomTo_	src/madness/external/elemental/include/elemental/core/AxpyInterface/decl.hpp	/^    std::vector<bool> sentEomTo_, haveEomFrom_;$/;"	m	class:elem::AxpyInterface
sentinel	src/madness/external/tinyxml/tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet
seq	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-initializer_list.cxx	/^class seq {$/;"	c	file:
seq	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-initializer_list.cxx	/^seq::seq(std::initializer_list<int> list)$/;"	f	class:seq
serialize	src/apps/adrian/ResponseParameters.h	/^      void serialize(Archive& ar)$/;"	f	struct:madness::ResponseParameters
serialize	src/apps/bryan/ResponseParameters.h	/^      void serialize(Archive& ar)$/;"	f	struct:madness::ResponseParameters
serialize	src/apps/chem/AC.h	/^    template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:madness::BinaryOpStructure
serialize	src/apps/chem/AC.h	/^    template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:madness::UnaryOpStructure
serialize	src/apps/chem/AC.h	/^    void serialize(Archive& ar) {$/;"	f	struct:madness::ACParameters
serialize	src/apps/chem/AC.h	/^    void serialize(Archive& ar) {$/;"	f	struct:madness::atom_information
serialize	src/apps/chem/GuessFactory.h	/^    template <typename Archive> void serialize(Archive& ar) {}$/;"	f	class:madness::guessfactory::ExopUnaryOpStructure
serialize	src/apps/chem/MolecularOrbitals.h	/^	void serialize (Archive& ar) {$/;"	f	class:madness::MolecularOrbitals
serialize	src/apps/chem/QCCalculationParametersBase.h	/^	template <typename Archive> void serialize (Archive& ar) {$/;"	f	class:madness::QCCalculationParametersBase
serialize	src/apps/chem/QCCalculationParametersBase.h	/^	template <typename Archive> void serialize (Archive& ar) {$/;"	f	struct:madness::QCParameter
serialize	src/apps/chem/SCF.cc	/^	void serialize(Archive &ar) {}$/;"	f	struct:madness::unaryexp
serialize	src/apps/chem/SCFOperators.h	/^        void serialize(Archive& ar) {}$/;"	f	struct:madness::XCOperator::expme
serialize	src/apps/chem/SCFOperators.h	/^        void serialize(Archive& ar) {}$/;"	f	struct:madness::XCOperator::logme
serialize	src/apps/chem/corepotential.h	/^    void serialize(Archive& ar) {$/;"	f	class:madness::CorePotentialManager
serialize	src/apps/chem/corepotential.h	/^    void serialize(Archive& ar) {$/;"	f	struct:madness::AtomCore
serialize	src/apps/chem/corepotential.h	/^    void serialize(Archive& ar) {$/;"	f	struct:madness::CoreOrbital
serialize	src/apps/chem/corepotential.h	/^    void serialize(Archive& ar) {$/;"	f	struct:madness::CorePotential
serialize	src/apps/chem/molecularbasis.h	/^    void serialize(Archive& ar) {$/;"	f	class:madness::AtomicBasis
serialize	src/apps/chem/molecularbasis.h	/^    void serialize(Archive& ar) {$/;"	f	class:madness::AtomicBasisSet
serialize	src/apps/chem/molecularbasis.h	/^    void serialize(Archive& ar) {$/;"	f	class:madness::ContractedGaussianShell
serialize	src/apps/chem/molecule.h	/^    void serialize(Archive& ar) {$/;"	f	class:madness::Atom
serialize	src/apps/chem/molecule.h	/^    void serialize(Archive& ar) {$/;"	f	class:madness::Molecule
serialize	src/apps/chem/mp2.h	/^        template <typename Archive> void serialize (Archive& ar) {$/;"	f	class:madness::ElectronPair
serialize	src/apps/chem/nemo.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:madness::dens_inv
serialize	src/apps/chem/oep.h	/^    void serialize(Archive& ar) {}$/;"	f	struct:madness::dens_inv1
serialize	src/apps/exciting/wannier.cc	/^  void serialize(Archive& ar) {}$/;"	f	struct:abs_square_op
serialize	src/apps/hf/complexfun.h	/^  void serialize(Archive& ar) {}$/;"	f	struct:madness::abs_op
serialize	src/apps/hf/complexfun.h	/^  void serialize(Archive& ar) {}$/;"	f	struct:madness::abs_square_op
serialize	src/apps/hf/complexfun.h	/^  void serialize(Archive& ar) {}$/;"	f	struct:madness::conj_op
serialize	src/apps/hf/complexfun.h	/^  void serialize(Archive& ar) {}$/;"	f	struct:madness::function_real2complex_op
serialize	src/apps/hf/complexfun.h	/^  void serialize(Archive& ar) {}$/;"	f	struct:madness::imag_op
serialize	src/apps/hf/complexfun.h	/^  void serialize(Archive& ar) {}$/;"	f	struct:madness::real_op
serialize	src/apps/hf/electronicstructureparams.h	/^  void serialize(Archive& ar) {$/;"	f	struct:madness::ElectronicStructureParams
serialize	src/apps/hf/esolver.h	/^  void serialize(Archive& ar) {$/;"	f	struct:KPoint
serialize	src/apps/hf/mentity.h	/^    void serialize(Archive& ar) {ar & atoms & rcut & rsqasymptotic;}$/;"	f	class:MolecularEntity
serialize	src/apps/hf/mentity.h	/^    void serialize(Archive& ar) {ar & x & y & z & q & atomic_number;}$/;"	f	class:Atom
serialize	src/apps/hf/molecularbasis.h	/^    void serialize(Archive& ar) {$/;"	f	class:AtomicBasis
serialize	src/apps/hf/molecularbasis.h	/^    void serialize(Archive& ar) {$/;"	f	class:AtomicBasisSet
serialize	src/apps/hf/molecularbasis.h	/^    void serialize(Archive& ar) {$/;"	f	class:ContractedGaussianShell
serialize	src/apps/hf/test_he.cc	/^  void serialize(Archive& ar) {}$/;"	f	struct:myunaryop_square
serialize	src/apps/moldft/mcpfit.cc	/^    void serialize(Archive& ar) {$/;"	f	struct:CalculationParameters
serialize	src/apps/nick/extra.h	/^  void serialize(Archive & ar) {$/;"	f	struct:InputParameters
serialize	src/apps/nick/tdse1.cc	/^    void serialize(Archive & ar) {$/;"	f	struct:InputParameters
serialize	src/apps/nick/tdse1.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:unaryexp
serialize	src/apps/polar/corepotential.h	/^    void serialize(Archive& ar) {$/;"	f	class:CorePotentialManager
serialize	src/apps/polar/corepotential.h	/^    void serialize(Archive& ar) {$/;"	f	struct:AtomCore
serialize	src/apps/polar/corepotential.h	/^    void serialize(Archive& ar) {$/;"	f	struct:CoreOrbital
serialize	src/apps/polar/corepotential.h	/^    void serialize(Archive& ar) {$/;"	f	struct:CorePotential
serialize	src/apps/polar/mcpfit.cc	/^    void serialize(Archive& ar) {$/;"	f	struct:CalculationParameters
serialize	src/apps/polar/moldft.cc	/^    void serialize(Archive &ar) {}$/;"	f	struct:unaryexp
serialize	src/apps/polar/moldft.cc	/^    void serialize(Archive &ar)$/;"	f	struct:CalculationParameters
serialize	src/apps/polar/molecularbasis.h	/^    void serialize(Archive& ar) {$/;"	f	class:AtomicBasis
serialize	src/apps/polar/molecularbasis.h	/^    void serialize(Archive& ar) {$/;"	f	class:AtomicBasisSet
serialize	src/apps/polar/molecularbasis.h	/^    void serialize(Archive& ar) {$/;"	f	class:ContractedGaussianShell
serialize	src/apps/polar/molecule.h	/^    void serialize(Archive& ar) {$/;"	f	class:Atom
serialize	src/apps/polar/molecule.h	/^    void serialize(Archive& ar) {$/;"	f	class:Molecule
serialize	src/apps/polar/preal.cc	/^  void serialize(Archive& ar) {}$/;"	f	struct:function_real2complex_op
serialize	src/apps/tdse/tdse.cc	/^        template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:refop
serialize	src/apps/tdse/tdse.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:unaryexp
serialize	src/apps/tdse/tdse.cc	/^  void serialize(Archive & ar) {$/;"	f	struct:InputParameters
serialize	src/apps/tdse/tdse.confused.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:unaryexp
serialize	src/apps/tdse/tdse.confused.cc	/^  void serialize(Archive & ar) {$/;"	f	struct:InputParameters
serialize	src/apps/tdse/tdse4.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:unaryexp
serialize	src/apps/tdse/tdse4.cc	/^  void serialize(Archive & ar) {$/;"	f	struct:InputParameters
serialize	src/examples/binaryop.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:Uop
serialize	src/examples/colloid.cc	/^        template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:SurfaceMoleculeInteraction::Reciprocal
serialize	src/examples/colloid.cc	/^        void serialize(Archive& ar) {}$/;"	f	struct:SurfaceMoleculeInteraction::Bop
serialize	src/examples/gygi_soltion.cc	/^    template <typename Archive>void serialize(Archive& ar) {}$/;"	f	struct:GygiPot::Pow
serialize	src/examples/gygi_soltion.cc	/^    template <typename Archive>void serialize(Archive& ar) {}$/;"	f	struct:GygiPot::Pow_beta_one
serialize	src/examples/gygi_soltion.cc	/^    template <typename Archive>void serialize(Archive& ar) {}$/;"	f	struct:GygiPot::Reciprocal
serialize	src/examples/he.cc	/^    template <typename Archive> void serialize (Archive& ar) {}$/;"	f	struct:true_op
serialize	src/examples/heat2.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:unaryexp
serialize	src/examples/helium_mp2.cc	/^    template <typename Archive> void serialize (Archive& ar) {}$/;"	f	struct:true_if_n_gt_op
serialize	src/examples/helium_mp2.cc	/^    template <typename Archive> void serialize (Archive& ar) {}$/;"	f	struct:true_op
serialize	src/examples/smooth.h	/^    void serialize(Archive& ar) {}$/;"	f	struct:munging_operator
serialize	src/examples/smooth.h	/^    void serialize(Archive& ar) {}$/;"	f	struct:slater_kernel
serialize	src/examples/tdse1d.cc	/^    template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:refop
serialize	src/examples/tdse1d.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:unaryexp
serialize	src/examples/tdse_example.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:unaryexp
serialize	src/madness/mra/derivative.h	/^        template <typename Archive> void serialize(const Archive& ar) const {$/;"	f	class:madness::DerivativeBase
serialize	src/madness/mra/funcdefaults.h	/^        void serialize(const Archive& ar) {$/;"	f	class:madness::BoundaryConditions
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::true_refine_test
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::add_op
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_check_symmetry_local
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_inner_ext_local_ffi
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_inner_local
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_map_and_mirror
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_mapdim
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_merge_trees
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_mirror
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_norm2sq_local
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_standard
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::hartree_op
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::multiply_op
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::project_out_op
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::recursive_apply_op
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::recursive_apply_op2
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::do_average
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::do_change_tensor_type
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::do_consolidate_buffer
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::do_keep_sum_coeffs
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::do_reduce_rank
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::do_truncate_NS_leafs
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::do_unary_op_value_inplace
serialize	src/madness/mra/funcimpl.h	/^            template <typename Archive> void serialize(const Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::remove_internal_coeffs
serialize	src/madness/mra/funcimpl.h	/^            void serialize(Archive& ar) {$/;"	f	struct:madness::FunctionImpl::coeff_value_adaptor
serialize	src/madness/mra/funcimpl.h	/^            void serialize(Archive& ar) {$/;"	f	struct:madness::FunctionImpl::do_op_args
serialize	src/madness/mra/funcimpl.h	/^            void serialize(Archive& ar) {}$/;"	f	struct:madness::FunctionImpl::do_gaxpy_inplace
serialize	src/madness/mra/funcimpl.h	/^            void serialize(const Archive& ar) {$/;"	f	class:madness::FunctionImpl::do_err_box
serialize	src/madness/mra/funcimpl.h	/^          template <typename Archive> void serialize(const Archive& ar) {$/;"	f	struct:madness::FunctionImpl::Vphi_op_NS
serialize	src/madness/mra/funcimpl.h	/^        template <typename Archive> void serialize (Archive& ar) {$/;"	f	struct:madness::hartree_convolute_leaf_op
serialize	src/madness/mra/funcimpl.h	/^        template <typename Archive> void serialize (Archive& ar) {$/;"	f	struct:madness::hartree_leaf_op
serialize	src/madness/mra/funcimpl.h	/^        template <typename Archive> void serialize (Archive& ar) {$/;"	f	struct:madness::insert_op
serialize	src/madness/mra/funcimpl.h	/^        template <typename Archive> void serialize (Archive& ar) {$/;"	f	struct:madness::op_leaf_op
serialize	src/madness/mra/funcimpl.h	/^        template <typename Archive> void serialize (Archive& ar) {}$/;"	f	struct:madness::noop
serialize	src/madness/mra/funcimpl.h	/^        template <typename Archive> void serialize (Archive& ar) {}$/;"	f	struct:madness::true_op
serialize	src/madness/mra/funcimpl.h	/^        template <typename Archive> void serialize(const Archive& ar) {$/;"	f	class:madness::CoeffTracker
serialize	src/madness/mra/funcimpl.h	/^        void serialize(Archive& ar) {$/;"	f	class:madness::FunctionNode
serialize	src/madness/mra/funcimpl.h	/^        void serialize(Archive& ar) {$/;"	f	struct:madness::ShallowNode
serialize	src/madness/mra/key.h	/^        serialize(Archive& ar) {$/;"	f	class:madness::KeyChildIterator
serialize	src/madness/mra/lbdeux.h	/^        void serialize(Archive& ar) {$/;"	f	class:madness::LBNodeDeux
serialize	src/madness/mra/leafop.h	/^    serialize(Archive& ar) { }$/;"	f	struct:madness::Specialbox_op
serialize	src/madness/mra/leafop.h	/^    serialize(Archive& ar) {$/;"	f	class:madness::Leaf_op
serialize	src/madness/mra/leafop.h	/^    serialize(Archive& ar) {$/;"	f	class:madness::Leaf_op_other
serialize	src/madness/mra/leafop.h	/^    void serialize(Archive& ar) { ar & particle;}$/;"	f	struct:madness::NuclearCuspyBox_op
serialize	src/madness/mra/leafop.h	/^    void serialize(Archive& ar) {}$/;"	f	struct:madness::ElectronCuspyBox_op
serialize	src/madness/mra/mra.h	/^            template <typename Archive> void serialize (Archive& ar) {}$/;"	f	struct:madness::Function::autorefine_square_op
serialize	src/madness/mra/mra.h	/^            template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:madness::Function::SimpleUnaryOpWrapper
serialize	src/madness/mra/mraimpl.h	/^            template <typename Archive> void serialize(Archive& ar) {$/;"	f	struct:madness::detail::scaleinplace
serialize	src/madness/mra/mraimpl.h	/^            template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:madness::detail::absinplace
serialize	src/madness/mra/mraimpl.h	/^            template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:madness::detail::abssquareinplace
serialize	src/madness/mra/mraimpl.h	/^            template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:madness::detail::noop
serialize	src/madness/mra/mraimpl.h	/^            template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:madness::detail::squareinplace
serialize	src/madness/mra/mraplot.cc	/^    void serialize(Archive& ar) {$/;"	f	class:Plotter
serialize	src/madness/mra/testqm.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:unaryexp
serialize	src/madness/mra/testsuite.cc	/^        template <typename Archive> void serialize(Archive& ar) {}$/;"	f	struct:refop
serialize	src/madness/mra/testsuite.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:myunaryop
serialize	src/madness/mra/testsuite.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:myunaryop_square
serialize	src/madness/mra/testsuite.cc	/^    void serialize(Archive& ar) {}$/;"	f	struct:test_multiop
serialize	src/madness/tensor/elem.h	/^            void serialize(const Archive& ar) {$/;"	f	struct:madness::detail::Value
serialize	src/madness/tensor/gentensor.h	/^		void serialize(const Archive& ar) {$/;"	f	struct:madness::TensorArgs
serialize	src/madness/tensor/srconf.h	/^        void serialize(Archive& ar) {$/;"	f	class:madness::SRConf
serialize	src/madness/tensor/tensortrain.h	/^        void serialize(Archive& ar) {$/;"	f	class:madness::TensorTrain
serialize	src/madness/world/archive.h	/^            static inline void serialize(const Archive& ar, T& t) {$/;"	f	struct:madness::archive::ArchiveSerializeImpl
serialize	src/madness/world/archive.h	/^            static inline void serialize(const Archive& ar, resT(*(&fn))(paramT...)) {$/;"	f	struct:madness::archive::ArchiveSerializeImpl
serialize	src/madness/world/archive.h	/^            static inline void serialize(const Archive& ar, resT(objT::*(&memfn))(paramT...)) {$/;"	f	struct:madness::archive::ArchiveSerializeImpl
serialize	src/madness/world/archive.h	/^            static inline void serialize(const Archive& ar, resT(objT::*memfn)(paramT...) const) {$/;"	f	struct:madness::archive::ArchiveSerializeImpl
serialize	src/madness/world/archive.h	/^            static inline void serialize(const Archive& ar, std::pair<T,Q>& t) {$/;"	f	struct:madness::archive::ArchiveSerializeImpl
serialize	src/madness/world/archive.h	/^            static inline void serialize(const Archive& ar, std::tuple<Types...>& t) {$/;"	f	struct:madness::archive::ArchiveSerializeImpl
serialize	src/madness/world/archive.h	/^            void serialize(const Archive& ar) {ar & wrap_opaque(&ptr, 1);}$/;"	f	class:madness::archive::archive_ptr
serialize	src/madness/world/archive.h	/^        serialize(const Archive& ar, const T& t) {$/;"	f	namespace:madness::archive
serialize	src/madness/world/archive.h	/^        serialize(const Archive& ar, const T* t, unsigned int n) {$/;"	f	namespace:madness::archive
serialize	src/madness/world/distributed_id.h	/^        void serialize(const Archive& ar) { ar & key_; }$/;"	f	class:madness::TaggedKey
serialize	src/madness/world/distributed_id.h	/^        void serialize(const Archive& ar) {$/;"	f	class:madness::ProcessKey
serialize	src/madness/world/group.h	/^        void serialize(const Archive&) {$/;"	f	class:madness::Group
serialize	src/madness/world/mem_func_wrapper.h	/^            void serialize(const Archive& ar) {$/;"	f	class:madness::detail::MemFuncWrapper
serialize	src/madness/world/test_ar.cc	/^            static inline void serialize(const Archive& ar, B& b) {$/;"	f	struct:madness::archive::ArchiveSerializeImpl
serialize	src/madness/world/test_ar.cc	/^    inline void serialize(Archive& ar) {$/;"	f	class:A
serialize	src/madness/world/test_dc.cc	/^    void serialize(const Archive& ar) {$/;"	f	class:Double
serialize	src/madness/world/test_dc.cc	/^    void serialize(const Archive& ar) {$/;"	f	struct:Key
serialize	src/madness/world/test_dc.cc	/^    void serialize(const Archive& ar) {$/;"	f	struct:Node
serialize	src/madness/world/test_hashdc.cc	/^            static inline void serialize(const Archive& ar, Key& obj) {$/;"	f	struct:madness::archive::ArchiveSerializeImpl
serialize	src/madness/world/test_tree.cc	/^    void serialize(Archive& ar) {$/;"	f	struct:Node
serialize	src/madness/world/test_tree.cc	/^    void serialize(const Archive& ar) {$/;"	f	struct:Key
serialize	src/madness/world/test_world.cc	/^    template <typename Archive> void serialize(Archive &ar) {$/;"	f	class:B
serialize	src/madness/world/test_world.cc	/^    void serialize(Archive& ar) {$/;"	f	struct:Node
serialize	src/madness/world/test_world.cc	/^    void serialize(const Archive& ar) {$/;"	f	class:Mary
serialize	src/madness/world/test_world.cc	/^    void serialize(const Archive& ar) {$/;"	f	struct:Key
serialize	src/madness/world/thread.h	/^        void serialize(Archive& ar) {$/;"	f	class:madness::TaskAttributes
serialize	src/madness/world/uniqueid.h	/^        void serialize(Archive& ar) {$/;"	f	class:madness::uniqueidT
serialize	src/madness/world/vector.h	/^        void serialize(Archive& ar) {$/;"	f	class:madness::Vector
serialize	src/madness/world/world_object.h	/^            void serialize(const Archive& ar) {$/;"	f	struct:madness::detail::info
serialize	src/madness/world/world_object.h	/^            void serialize(const Archive& ar) {$/;"	f	struct:madness::detail::info_base
serialize	src/madness/world/world_task_queue.h	/^            void serialize(const Archive& ar) {$/;"	f	struct:madness::detail::TaskHandlerInfo
serialize	src/madness/world/worlddc.h	/^        void serialize(const Archive& ar) {$/;"	f	class:madness::WorldContainer
serialize	src/madness/world/worlddc.h	/^        void serialize(const Archive&) {$/;"	f	class:madness::WorldContainerIterator
serialize	src/madness/world/worlddc.h	/^        void serialize(const archive::BufferInputArchive& ar) {$/;"	f	class:madness::WorldContainer
serialize	src/madness/world/worlddc.h	/^        void serialize(const archive::BufferOutputArchive& ar) {$/;"	f	class:madness::WorldContainer
serialize	src/madness/world/worldprofile.h	/^        void serialize(const Archive& ar) {$/;"	f	struct:madness::WorldProfileEntry
serialize	src/madness/world/worldref.h	/^        void serialize(const Archive& ar) const {$/;"	f	class:madness::RemoteReference
serialize_am_args	src/madness/world/worldam.h	/^    inline void serialize_am_args(Archive&& archive, T&& t, argT&&... args) {$/;"	f	namespace:madness
serialize_am_args	src/madness/world/worldam.h	/^    inline void serialize_am_args(Archive&&) { }$/;"	f	namespace:madness
serialize_internal	src/madness/world/world_task_queue.h	/^            serialize_internal(const Archive& ar) {$/;"	f	struct:madness::detail::TaskHandlerInfo
series	src/madness/mra/minmax/y1.cc	/^FLOAT series(FLOAT z) {$/;"	f
set	src/apps/chem/CCStructures.h	/^    void set(const real_function_3d &other){function=other;}$/;"	f	struct:madness::CCFunction
set	src/apps/chem/PNOTensors.h	/^	void set(size_t i, size_t j, size_t k, const madness::Tensor<T>& t) {$/;"	f	class:__anon48::Tensor_IJ_IK
set	src/apps/chem/PNOTensors.h	/^	void set(size_t i, size_t j, size_t k, const madness::Tensor<T>& t) {$/;"	f	class:__anon48::Tensor_IJ_KJ
set	src/apps/chem/distpm.cc	/^    const std::vector<int>& set;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
set	src/apps/ii/systolic.h	/^        std::vector<int> set;$/;"	m	class:madness::LocalizeBoys
set	src/apps/polar/distpm.cc	/^    const std::vector<int>& set;$/;"	m	class:SystolicPMOrbitalLocalize	file:
set	src/examples/testspectralprop.cc	/^    void set(int i, double a) {v[i] = a;}$/;"	f	class:Fred
set	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void set(const T& value) { *pointer() = value; }$/;"	f	class:testing::internal::ThreadLocal
set	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  void set(const T& value) { value_ = value; }$/;"	f	class:testing::internal::ThreadLocal
set	src/madness/mra/simplecache.h	/^        inline void set(Level n, Translation l, const Q& val) {$/;"	f	class:madness::SimpleCache
set	src/madness/mra/simplecache.h	/^        inline void set(Level n, const Key<NDIM>& disp, const Q& val) {$/;"	f	class:madness::SimpleCache
set	src/madness/mra/simplecache.h	/^        inline void set(const Key<NDIM>& key, const Q& val) {$/;"	f	class:madness::SimpleCache
set	src/madness/tensor/distributed_matrix.h	/^        void set(int64_t i, int64_t j, const T x) {$/;"	f	class:madness::DistributedMatrix
set	src/madness/world/future.h	/^        inline void set(const T& value) {$/;"	f	class:madness::Future
set	src/madness/world/future.h	/^        inline void set(const archive::BufferInputArchive& input_arch) {$/;"	f	class:madness::Future
set	src/madness/world/future.h	/^        static void set() { }$/;"	f	class:madness::Future
set	src/madness/world/future.h	/^        static void set(const Future<void>& f) { }$/;"	f	class:madness::Future
set	src/madness/world/future.h	/^        void set(const Future<T>& other) {$/;"	f	class:madness::Future
set	src/madness/world/future.h	/^        void set(const U& value) {$/;"	f	class:madness::FutureImpl
set	src/madness/world/future.h	/^        void set(const archive::BufferInputArchive& input_arch) {$/;"	f	class:madness::FutureImpl
set	src/madness/world/test_tree.cc	/^    void set(double v) {$/;"	f	struct:Node
set	src/madness/world/test_vec.cc	/^    void set(int a) {$/;"	f	class:A
set	src/madness/world/test_world.cc	/^    void set(double v) {$/;"	f	struct:Node
set	src/madness/world/test_world.cc	/^    void set(long value) {$/;"	f	class:B
set	src/madness/world/worldam.h	/^            void set(AmArg* b, const RMI::Request& r) {buf=b; req=r;} \/\/ assumes lock held$/;"	f	class:madness::WorldAmInterface::SendReq
set	src/madness/world/worldhashmap.h	/^            void set(entryT* entry) {$/;"	f	class:madness::Hash_private::HashAccessor
setAA	src/apps/nick/wavef.cc	/^complexd PhiK::setAA() { return -I*Z_\/k_; }$/;"	f	class:PhiK
setAA	src/apps/nick/wavef.cc	/^complexd Phikl::setAA() { return l_ + 1.0 + I*Z_\/k_;}$/;"	f	class:Phikl
setBB	src/apps/nick/wavef.cc	/^complexd PhiK::setBB() { return complexd(1.0, 0.0); }$/;"	f	class:PhiK
setBB	src/apps/nick/wavef.cc	/^complexd Phikl::setBB() { return complexd(2.0*l_ + 2.0, 0.0); }$/;"	f	class:Phikl
setMaskFunction	src/madness/mra/sdf_domainmask.h	/^        void setMaskFunction(int _mswitch) {$/;"	f	class:madness::DomainMaskSDFFunctor
set_affinity	src/madness/world/thread.cc	/^    void ThreadBase::set_affinity(int logical_id, int ind) {$/;"	f	class:madness::ThreadBase
set_affinity_pattern	src/madness/world/thread.cc	/^    void ThreadBase::set_affinity_pattern(const bool bind[3], const int cpu[3]) {$/;"	f	class:madness::ThreadBase
set_all	src/apps/chem/QCCalculationParametersBase.h	/^	void set_all() {$/;"	f	struct:madness::QCParameter
set_all_coords	src/apps/chem/molecule.cc	/^void Molecule::set_all_coords(const madness::Tensor<double> &c)$/;"	f	class:madness::Molecule
set_all_coords	src/apps/polar/molecule.cc	/^void Molecule::set_all_coords(const madness::Tensor<double>& c) {$/;"	f	class:Molecule
set_aocc	src/apps/chem/molecularbasis.h	/^    void set_aocc(Tensor<double>& occ) {$/;"	f	class:madness::AtomicBasis
set_aoccpsp	src/apps/chem/molecularbasis.h	/^    void set_aoccpsp(Tensor<double>& occ) {$/;"	f	class:madness::AtomicBasis
set_apply_randomize	src/madness/mra/funcdefaults.h	/^        static void set_apply_randomize(bool value) {$/;"	f	class:madness::FunctionDefaults
set_assigned	src/madness/world/future.h	/^        inline void set_assigned(const T& value) {$/;"	f	class:madness::FutureImpl
set_atom_charge	src/apps/chem/molecule.cc	/^void Molecule::set_atom_charge(unsigned int i, double zeff)$/;"	f	class:madness::Molecule
set_atom_coords	src/apps/chem/molecule.cc	/^void Molecule::set_atom_coords(unsigned int i, double x, double y, double z)$/;"	f	class:madness::Molecule
set_atom_coords	src/apps/hf/mentity.cc	/^void MolecularEntity::set_atom_coords(unsigned int i, double x, double y, double z) {$/;"	f	class:MolecularEntity
set_atom_coords	src/apps/polar/molecule.cc	/^void Molecule::set_atom_coords(unsigned int i, double x, double y, double z) {$/;"	f	class:Molecule
set_autorefine	src/madness/mra/funcdefaults.h	/^        static void set_autorefine(bool value) {$/;"	f	class:madness::FunctionDefaults
set_autorefine	src/madness/mra/mra.h	/^        void set_autorefine(bool value, bool fence = true) {$/;"	f	class:madness::Function
set_autorefine	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::set_autorefine(bool value) {autorefine = value;}$/;"	f	class:madness::FunctionImpl
set_bc	src/madness/mra/funcdefaults.h	/^        static void set_bc(const BoundaryConditions<NDIM>& value) {$/;"	f	class:madness::FunctionDefaults
set_ble1	src/madness/mra/derivative.h	/^        void set_ble1() {$/;"	f	class:madness::Derivative
set_ble2	src/madness/mra/derivative.h	/^        void set_ble2() {$/;"	f	class:madness::Derivative
set_bocc	src/apps/chem/molecularbasis.h	/^    void set_bocc(Tensor<double>& occ)  {$/;"	f	class:madness::AtomicBasis
set_boccpsp	src/apps/chem/molecularbasis.h	/^    void set_boccpsp(Tensor<double>& occ)  {$/;"	f	class:madness::AtomicBasis
set_bspline1	src/madness/mra/derivative.h	/^        void set_bspline1() {$/;"	f	class:madness::Derivative
set_bspline2	src/madness/mra/derivative.h	/^        void set_bspline2() {$/;"	f	class:madness::Derivative
set_bspline3	src/madness/mra/derivative.h	/^        void set_bspline3() {$/;"	f	class:madness::Derivative
set_cache_value	src/madness/world/dist_cache.h	/^            static void set_cache_value(const keyT& key, const valueT& value) {$/;"	f	class:madness::detail::DistCache
set_catch_exceptions	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }$/;"	f	class:testing::internal::UnitTestImpl
set_cell	src/madness/mra/funcdefaults.h	/^        static void set_cell(const Tensor<double>& value) {$/;"	f	class:madness::FunctionDefaults
set_child_pid	src/madness/external/gtest/src/gtest-death-test.cc	/^  void set_child_pid(pid_t child_pid) { child_pid_ = child_pid; }$/;"	f	class:testing::internal::ForkingDeathTest
set_coeff	src/madness/mra/funcimpl.h	/^        void set_coeff(const coeffT& coeffs) {$/;"	f	class:madness::FunctionNode
set_core_eprec	src/apps/chem/molecule.h	/^    void set_core_eprec(double value) {$/;"	f	class:madness::Molecule
set_core_eprec	src/apps/polar/molecule.h	/^    void set_core_eprec(double value) {$/;"	f	class:Molecule
set_core_rcut	src/apps/chem/molecule.h	/^    void set_core_rcut(double value) {$/;"	f	class:madness::Molecule
set_core_rcut	src/apps/polar/molecule.h	/^    void set_core_rcut(double value) {$/;"	f	class:Molecule
set_cubic_cell	src/madness/mra/funcdefaults.h	/^        static void set_cubic_cell(double lo, double hi) {$/;"	f	class:madness::FunctionDefaults
set_current_test_case	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void set_current_test_case(TestCase* a_current_test_case) {$/;"	f	class:testing::internal::UnitTestImpl
set_current_test_info	src/madness/external/gtest/src/gtest-internal-inl.h	/^  void set_current_test_info(TestInfo* a_current_test_info) {$/;"	f	class:testing::internal::UnitTestImpl
set_debug	src/madness/mra/funcdefaults.h	/^        static void set_debug(bool value) {$/;"	f	class:madness::FunctionDefaults
set_debug	src/madness/world/worldgop.h	/^        bool set_debug(bool value) {$/;"	f	class:madness::WorldGopInterface
set_debug	src/madness/world/worldrmi.h	/^        static void set_debug(bool status) { debugging = status; }$/;"	f	class:madness::RMI
set_default_base	src/apps/nick/mpreal.h	/^inline void mpreal::set_default_base(int base)$/;"	f	class:mpfr::mpreal
set_default_prec	src/apps/nick/mpreal.h	/^inline void mpreal::set_default_prec(mp_prec_t prec)$/;"	f	class:mpfr::mpreal
set_default_rnd	src/apps/nick/mpreal.h	/^inline void mpreal::set_default_rnd(mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
set_defaults	src/madness/mra/mraimpl.h	/^    void FunctionDefaults<NDIM>::set_defaults(World& world) {$/;"	f	class:madness::FunctionDefaults
set_derived_value	src/apps/chem/QCCalculationParametersBase.h	/^	void set_derived_value(const std::string val) {$/;"	f	struct:madness::QCParameter
set_derived_value	src/apps/chem/QCCalculationParametersBase.h	/^	void set_derived_value(const std::string& key, const T& value) {$/;"	f	class:madness::QCCalculationParametersBase
set_derived_values	src/apps/chem/CalculationParameters.h	/^	void set_derived_values(const Molecule& molecule, const AtomicBasisSet& aobasis) {$/;"	f	struct:madness::CalculationParameters
set_derived_values	src/apps/chem/PNOParameters.h	/^	void set_derived_values() {$/;"	f	class:madness::F12Parameters
set_derived_values	src/apps/chem/PNOParameters.h	/^	void set_derived_values(const Molecule& molecule) {$/;"	f	class:madness::PNOParameters
set_derived_values	src/apps/chem/TDHF.cc	/^void TDHF::Parameters::set_derived_values(const std::shared_ptr<SCF>& scf) {$/;"	f	class:madness::TDHF::Parameters
set_derived_values	src/apps/chem/molecular_optimizer.h	/^	void set_derived_values() {$/;"	f	class:madness::MolecularOptimizationParameters
set_derived_values	src/apps/chem/oep.h	/^	void set_derived_values(const Nemo::NemoCalculationParameters& nparam) {$/;"	f	class:madness::OEP_Parameters
set_derived_values	src/apps/chem/znemo.h	/^	void set_derived_values() {$/;"	f	class:madness::Nemo_complex_Parameters
set_dims_and_size	src/madness/tensor/basetensor.h	/^        void set_dims_and_size(long nd, const long d[]) {$/;"	f	class:madness::BaseTensor
set_dmat	src/apps/chem/molecularbasis.h	/^    void set_dmat(Tensor<double>& mat) {$/;"	f	class:madness::AtomicBasis
set_dmatpsp	src/apps/chem/molecularbasis.h	/^    void set_dmatpsp(Tensor<double>& mat) {$/;"	f	class:madness::AtomicBasis
set_dofence	src/madness/world/parallel_archive.h	/^            void set_dofence(bool dofence) {$/;"	f	class:madness::archive::BaseParallelArchive
set_double_bits	src/apps/nick/mpreal.h	/^inline void mpreal::set_double_bits(int dbits)$/;"	f	class:mpfr::mpreal
set_elapsed_time	src/madness/external/gtest/include/gtest/gtest.h	/^  void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }$/;"	f	class:testing::TestResult
set_emax	src/apps/nick/mpreal.h	/^inline int mpreal::set_emax (mp_exp_t exp)$/;"	f	class:mpfr::mpreal
set_emin	src/apps/nick/mpreal.h	/^inline int mpreal::set_emin (mp_exp_t exp)$/;"	f	class:mpfr::mpreal
set_eprec	src/apps/chem/corepotential.cc	/^void CorePotentialManager::set_eprec(double value) {$/;"	f	class:madness::CorePotentialManager
set_eprec	src/apps/chem/molecule.cc	/^void Molecule::set_eprec(double value)$/;"	f	class:madness::Molecule
set_eprec	src/apps/polar/corepotential.cc	/^void CorePotentialManager::set_eprec(double value) {$/;"	f	class:CorePotentialManager
set_eprec	src/apps/polar/molecule.cc	/^void Molecule::set_eprec(double value) {$/;"	f	class:Molecule
set_event	src/madness/world/thread.h	/^        void set_event(profiling::TaskEvent* task_event) {$/;"	f	class:madness::PoolTaskInterface
set_exp	src/apps/nick/mpreal.h	/^inline int mpreal::set_exp (mp_exp_t e)$/;"	f	class:mpfr::mpreal
set_extra_truncation	src/apps/chem/SCFOperators.h	/^    XCOperator& set_extra_truncation(const double& fac) {$/;"	f	class:madness::XCOperator
set_forwarding_enabled	src/madness/external/gtest/src/gtest.cc	/^  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }$/;"	f	class:testing::internal::TestEventRepeater
set_func	src/madness/world/worldam.h	/^        void set_func(am_handlerT handler) {$/;"	f	class:madness::AmArg
set_functions	src/apps/chem/CCStructures.h	/^    void set_functions(const vector_real_function_3d & v, const FuncType& type, const size_t& freeze){$/;"	f	struct:madness::CC_vecfunction
set_functor	src/madness/mra/mra.h	/^        void set_functor(const std::shared_ptr<FunctionFunctorInterface<T, NDIM> > functor) {$/;"	f	class:madness::Function
set_functor	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::set_functor(const std::shared_ptr<FunctionFunctorInterface<T,NDIM> > functor1) {$/;"	f	class:madness::FunctionImpl
set_generator	src/madness/world/thread.h	/^        void set_generator(bool generator_hint) {$/;"	f	class:madness::TaskAttributes
set_guess_info	src/apps/chem/molecularbasis.h	/^    void set_guess_info(const Tensor<double>& dmat, const Tensor<double>& dmatpsp,$/;"	f	class:madness::AtomicBasis
set_guess_info	src/apps/hf/molecularbasis.h	/^    void set_guess_info(const Tensor<double>& dmat,$/;"	f	class:AtomicBasis
set_guess_info	src/apps/polar/molecularbasis.h	/^    void set_guess_info(const Tensor<double>& dmat,$/;"	f	class:AtomicBasis
set_handler	src/madness/world/future.h	/^        static void set_handler(const AmArg& arg) {$/;"	f	class:madness::FutureImpl
set_has_children	src/madness/mra/funcimpl.h	/^        void set_has_children(bool flag) {$/;"	f	class:madness::FunctionNode
set_has_children_recursive	src/madness/mra/funcimpl.h	/^        void set_has_children_recursive(const typename FunctionNode<T,NDIM>::dcT& c,const Key<NDIM>& key) {$/;"	f	class:madness::FunctionNode
set_hessian	src/apps/chem/molecular_optimizer.h	/^    void set_hessian(const Tensor<double>& hess) {$/;"	f	class:madness::MolecularOptimizer
set_hessian	src/apps/chem/molopt.h	/^        void set_hessian(const Tensor<double>& h) {$/;"	f	class:madness::MolOpt
set_hessian	src/madness/tensor/solvers.h	/^        void set_hessian(const Tensor<double>& matrix) {h = madness::copy(matrix);}$/;"	f	class:madness::QuasiNewton
set_highpriority	src/madness/world/thread.h	/^        void set_highpriority(bool hipri) {$/;"	f	class:madness::TaskAttributes
set_hpm_thread_env	src/madness/world/thread.cc	/^  void ThreadBase::set_hpm_thread_env(int hpm_thread_id) {$/;"	f	class:madness::ThreadBase
set_impl	src/madness/mra/mra.h	/^        void set_impl(const Function<R,NDIM>& f, bool zero = true) {$/;"	f	class:madness::Function
set_impl	src/madness/mra/mra.h	/^        void set_impl(const std::shared_ptr< FunctionImpl<T,NDIM> >& impl) {$/;"	f	class:madness::Function
set_inf	src/apps/nick/mpreal.h	/^inline void mpreal::set_inf(int sign) $/;"	f	class:mpfr::mpreal
set_info	src/madness/world/taskfn.h	/^        void set_info(World* w, CallbackInterface* c) {$/;"	f	class:madness::TaskInterface
set_initial_level	src/madness/mra/funcdefaults.h	/^        static void set_initial_level(int value) {$/;"	f	class:madness::FunctionDefaults
set_irrep	src/apps/chem/pointgroupsymmetry.h	/^	projector_irrep& set_irrep(std::string irrep) {$/;"	f	class:madness::projector_irrep
set_is_first	src/madness/mra/derivative.h	/^        void set_is_first() {is_second = false; is_third = false;}$/;"	f	class:madness::Derivative
set_is_leaf	src/madness/mra/funcimpl.h	/^        void set_is_leaf(bool flag) {$/;"	f	class:madness::FunctionNode
set_is_second	src/madness/mra/derivative.h	/^        void set_is_second() {is_second = true; is_third=false;}$/;"	f	class:madness::Derivative
set_is_third	src/madness/mra/derivative.h	/^        void set_is_third() {is_second = false; is_third = true;}$/;"	f	class:madness::Derivative
set_ispin	src/apps/chem/SCFOperators.h	/^    void set_ispin(const int i) const {ispin=i;}$/;"	f	class:madness::XCOperator
set_k	src/madness/mra/funcdefaults.h	/^        static void set_k(int value) {$/;"	f	class:madness::FunctionDefaults
set_last_death_test_message	src/madness/external/gtest/src/gtest-death-test.cc	/^void DeathTest::set_last_death_test_message(const std::string& message) {$/;"	f	class:testing::internal::DeathTest
set_length_scale	src/madness/mra/funcdefaults.h	/^        static int set_length_scale(const double lo,const size_t k=get_k()) {$/;"	f	class:madness::FunctionDefaults
set_length_scale	src/madness/mra/function_interface.h	/^	    void set_length_scale(double lo) {$/;"	f	class:madness::FunctionFunctorInterface
set_lindep	src/apps/chem/pointgroupsymmetry.h	/^	projector_irrep& set_lindep(const double ld) {$/;"	f	class:madness::projector_irrep
set_max_mem_limit	src/madness/world/worldmem.h	/^        void set_max_mem_limit(unsigned long max_mem_limit) {$/;"	f	class:madness::WorldMemInfo
set_max_refine_level	src/madness/mra/funcdefaults.h	/^        static void set_max_refine_level(int value) {$/;"	f	class:madness::FunctionDefaults
set_maxsub	src/madness/mra/nonlinsol.h	/^		void set_maxsub(const unsigned int &new_maxsub){$/;"	f	class:madness::NonlinearSolverND
set_maxsub	src/madness/mra/nonlinsol.h	/^	void set_maxsub(int maxsub) {this->maxsub = maxsub;}$/;"	f	class:madness::XNonlinearSolver
set_molecular_info	src/apps/hf/electronicstructureparams.h	/^  void set_molecular_info(const MolecularEntity& mentity, const AtomicBasisSet& aobasis) {$/;"	f	struct:madness::ElectronicStructureParams
set_molecular_info	src/apps/polar/moldft.cc	/^    void set_molecular_info(const Molecule &molecule, const AtomicBasisSet &aobasis, unsigned int n_core)$/;"	f	struct:CalculationParameters
set_mos	src/apps/chem/MolecularOrbitals.h	/^	void set_mos(const std::vector<Function<T,NDIM> >& mo_new) {$/;"	f	class:madness::MolecularOrbitals
set_nan	src/apps/nick/mpreal.h	/^inline void mpreal::set_nan() $/;"	f	class:mpfr::mpreal
set_norm_tree	src/madness/mra/funcimpl.h	/^        void set_norm_tree(double norm_tree) {$/;"	f	class:madness::FunctionNode
set_nthread	src/madness/world/thread.h	/^        void set_nthread(int nthread) {$/;"	f	class:madness::PoolTaskInterface
set_nthread	src/madness/world/thread.h	/^        void set_nthread(int nthread) {$/;"	f	class:madness::TaskAttributes
set_occs2	src/apps/hf/solver.h	/^    void set_occs2(const std::vector<KPoint>& kpoints,$/;"	f	class:madness::Solver
set_ordering	src/apps/chem/pointgroupsymmetry.h	/^	projector_irrep& set_ordering(const std::string o) {$/;"	f	class:madness::projector_irrep
set_orthonormalize_irreps	src/apps/chem/pointgroupsymmetry.h	/^	projector_irrep& set_orthonormalize_irreps(bool flag) {$/;"	f	class:madness::projector_irrep
set_os_stack_trace_getter	src/madness/external/gtest/src/gtest.cc	/^void UnitTestImpl::set_os_stack_trace_getter($/;"	f	class:testing::internal::UnitTestImpl
set_outcome	src/madness/external/gtest/src/gtest-death-test.cc	/^  void set_outcome(DeathTestOutcome an_outcome) { outcome_ = an_outcome; }$/;"	f	class:testing::internal::DeathTestImpl
set_parameters	src/apps/chem/SCFOperators.h	/^    void set_parameters(const vecfuncT& bra, const vecfuncT& ket,$/;"	f	class:madness::Exchange
set_pending	src/madness/world/worldam.h	/^        void set_pending() { flags |= 0x1ul; }$/;"	f	class:madness::AmArg
set_pmap	src/madness/mra/funcdefaults.h	/^        static void set_pmap(const std::shared_ptr< WorldDCPmapInterface< Key<NDIM> > >& value) {$/;"	f	class:madness::FunctionDefaults
set_pool_thread_index	src/madness/world/thread.h	/^        void set_pool_thread_index(int i) {$/;"	f	class:madness::ThreadBase
set_prec	src/apps/nick/mpreal.h	/^inline void mpreal::set_prec(mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
set_project_randomize	src/madness/mra/funcdefaults.h	/^        static void set_project_randomize(bool value) {$/;"	f	class:madness::FunctionDefaults
set_protocol	src/apps/adrian/TDDFT.cc	/^void TDHF::set_protocol(World &world, double thresh) {$/;"	f	class:TDHF
set_protocol	src/apps/adrian/TDHF.cc	/^void TDHF::set_protocol(World & world, double thresh)$/;"	f	class:TDHF
set_protocol	src/apps/adrian/TDHF2.cc	/^void TDHF::set_protocol(World & world, double thresh)$/;"	f	class:TDHF
set_protocol	src/apps/bryan/TDHF.cc	/^void TDHF::set_protocol(World & world, double thresh)$/;"	f	class:TDHF
set_protocol	src/apps/bryan/TDHF2.cc	/^void TDHF::set_protocol(World & world, double thresh)$/;"	f	class:TDHF
set_protocol	src/apps/chem/SCF.h	/^	void set_protocol(World & world, double thresh)$/;"	f	class:madness::SCF
set_protocol	src/apps/chem/nemo.h	/^    void set_protocol(const double thresh) {$/;"	f	class:madness::Nemo
set_protocol	src/apps/moldft/mcpfit.cc	/^    void set_protocol (World & world, double thresh)$/;"	f	struct:Calculation
set_protocol	src/apps/polar/mcpfit.cc	/^    void set_protocol (World & world, double thresh)$/;"	f	struct:Calculation
set_protocol	src/apps/polar/moldft.cc	/^    void set_protocol(World &world, double thresh)$/;"	f	struct:Calculation
set_pseudo_atom	src/apps/chem/molecule.cc	/^void Molecule::set_pseudo_atom(unsigned int i, bool psat)$/;"	f	class:madness::Molecule
set_ptr	src/madness/world/test_worldptr.cc	/^            void set_ptr(const WorldPtr<T>& p, const madness::uniqueidT & id, bool away) {$/;"	f	class:__anon6::WorldPtrTest::XferPtr	file:
set_ptr	src/madness/world/test_worldref.cc	/^            void set_ptr(const RemoteReference<T>& r, bool away) {$/;"	f	class:__anon1::WorldRefTest::XferRef	file:
set_rcut	src/apps/chem/corepotential.cc	/^void CorePotentialManager::set_rcut(double value) {$/;"	f	class:madness::CorePotentialManager
set_rcut	src/apps/chem/molecule.cc	/^void Molecule::set_rcut(double value)$/;"	f	class:madness::Molecule
set_rcut	src/apps/polar/corepotential.cc	/^void CorePotentialManager::set_rcut(double value) {$/;"	f	class:CorePotentialManager
set_rcut	src/apps/polar/molecule.cc	/^void Molecule::set_rcut(double value) {$/;"	f	class:Molecule
set_read_fd	src/madness/external/gtest/src/gtest-death-test.cc	/^  void set_read_fd(int fd) { read_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
set_refine	src/madness/mra/funcdefaults.h	/^        static void set_refine(bool value) {$/;"	f	class:madness::FunctionDefaults
set_rmi_task_is_running	src/madness/world/worldrmi.cc	/^  void RMI::RmiTask::set_rmi_task_is_running(bool flag) {$/;"	f	class:madness::RMI::RmiTask
set_should_run	src/madness/external/gtest/include/gtest/gtest.h	/^  void set_should_run(bool should) { should_run_ = should; }$/;"	f	class:testing::TestCase
set_sign	src/apps/nick/mpreal.h	/^inline void mpreal::set_sign(int sign, mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
set_size	src/apps/moldft/preal.cc	/^    void set_size(unsigned int norbs) {$/;"	f	struct:BoysLocalization
set_size	src/madness/external/tinyxml/tinystr.h	/^	void set_size(size_type sz) { rep_->str[ rep_->size = sz ] = '\\0'; }$/;"	f	class:TiXmlString
set_size	src/madness/world/worldam.h	/^        void set_size(std::size_t numbyte) { nbyte = numbyte; }$/;"	f	class:madness::AmArg
set_spaces	src/apps/chem/projector.h	/^    	void set_spaces(const vecfuncT& bra1, const vecfuncT& ket1,$/;"	f	class:madness::StrongOrthogonalityProjector
set_spaces	src/apps/chem/projector.h	/^    	void set_spaces(const vecfuncT& p) {$/;"	f	class:madness::StrongOrthogonalityProjector
set_spawned	src/madness/external/gtest/src/gtest-death-test.cc	/^  void set_spawned(bool is_spawned) { spawned_ = is_spawned; }$/;"	f	class:testing::internal::DeathTestImpl
set_special_level	src/madness/mra/funcdefaults.h	/^        static void set_special_level(int value) {$/;"	f	class:madness::FunctionDefaults
set_src	src/madness/world/worldam.h	/^        void set_src(ProcessID source) { src = source; }$/;"	f	class:madness::AmArg
set_status	src/madness/external/gtest/src/gtest-death-test.cc	/^  void set_status(int a_status) { status_ = a_status; }$/;"	f	class:testing::internal::DeathTestImpl
set_stealable	src/madness/world/thread.h	/^        void set_stealable(bool stealable) {$/;"	f	class:madness::TaskAttributes
set_tensor_type	src/madness/mra/funcdefaults.h	/^        static void set_tensor_type(const TensorType& t) {$/;"	f	class:madness::FunctionDefaults
set_test	src/madness/tensor/solvers.cc	/^    void QuasiNewton::set_test(const bool& test_level) {$/;"	f	class:madness::QuasiNewton
set_this_thread_is_server	src/madness/world/worldrmi.h	/^        static void set_this_thread_is_server(bool flag = true) {is_server_thread = flag;}$/;"	f	class:madness::RMI
set_thresh	src/madness/mra/funcdefaults.h	/^        static void set_thresh(double value) {$/;"	f	class:madness::FunctionDefaults
set_thresh	src/madness/mra/mra.h	/^        void set_thresh(double value, bool fence = true) {$/;"	f	class:madness::Function
set_thresh	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::set_thresh(double value) {thresh = value;}$/;"	f	class:madness::FunctionImpl
set_thresh	src/madness/mra/vmra.h	/^void set_thresh(World& world, std::vector<Function<T, NDIM>>& v, double thresh,$/;"	f	namespace:madness
set_thresh	src/madness/mra/vmra1.h	/^      void set_thresh(World& world,$/;"	f	namespace:madness
set_trace	src/madness/world/worldmem.h	/^        void set_trace(bool trace) {$/;"	f	class:madness::WorldMemInfo
set_truncate_mode	src/madness/mra/funcdefaults.h	/^        static void set_truncate_mode(int value) {$/;"	f	class:madness::FunctionDefaults
set_truncate_on_project	src/madness/mra/funcdefaults.h	/^        static void set_truncate_on_project(bool value) {$/;"	f	class:madness::FunctionDefaults
set_type	src/examples/compiler/mra-driver.hh	/^    void set_type(Type t) {$/;"	f	class:Exp
set_up_tc_	src/madness/external/gtest/include/gtest/gtest.h	/^  Test::SetUpTestCaseFunc set_up_tc_;$/;"	m	class:testing::TestCase
set_update	src/madness/tensor/kain.cc	/^    void set_update(const string& method) {$/;"	f	class:QuasiNewton
set_update	src/madness/tensor/solvers.cc	/^    void QuasiNewton::set_update(const std::string& method) {$/;"	f	class:madness::QuasiNewton
set_user_defined_value	src/apps/chem/QCCalculationParametersBase.h	/^	void set_user_defined_value(const std::string val) {$/;"	f	struct:madness::QCParameter
set_user_defined_value	src/apps/chem/QCCalculationParametersBase.h	/^	void set_user_defined_value(const std::string& key, const T& value) {$/;"	f	class:madness::QCCalculationParametersBase
set_user_state	src/madness/world/world.h	/^        void set_user_state(void* state) { user_state = state; }$/;"	f	class:madness::World
set_value	src/madness/world/test_ar.cc	/^    void set_value(int val) {$/;"	f	class:linked_list
set_verbosity	src/apps/chem/pointgroupsymmetry.h	/^	projector_irrep& set_verbosity(int v) {$/;"	f	class:madness::projector_irrep
set_worldid	src/madness/world/worldam.h	/^        void set_worldid(unsigned long id) { worldid = id; }$/;"	f	class:madness::AmArg
set_write_fd	src/madness/external/gtest/src/gtest-death-test.cc	/^  void set_write_fd(int fd) { write_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
setfac	src/madness/mra/convolution1d.h	/^        void setfac(Q value) {$/;"	f	class:madness::ConvolutionND
setop	src/madness/mra/convolution1d.h	/^        void setop(int dim, const std::shared_ptr<Convolution1D<Q> >& op)  {$/;"	f	class:madness::ConvolutionND
setstate	src/madness/misc/ran.cc	/^    void Random::setstate(const RandomState &s) {$/;"	f	class:madness::Random
setstate	src/madness/misc/ran.cc	/^    void Random::setstate(unsigned int seed) {$/;"	f	class:madness::Random
severity_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  const GTestLogSeverity severity_;$/;"	m	class:testing::internal::GTestLog
sgelss_	src/madness/tensor/clapack_fortran.h	55;"	d
sgesv_	src/madness/tensor/clapack_fortran.h	50;"	d
sgesvd_	src/madness/tensor/clapack_fortran.h	45;"	d
sgn	src/apps/chem/PNOGuessFunctions.h	/^		template <typename T> int sgn(T val) const {$/;"	f	class:madness::BasisFunctions::SolidHarmonicGaussian
sgn	src/apps/nick/mpreal.h	/^inline int sgn(const mpreal& v)$/;"	f	namespace:mpfr
sh	src/madness/mra/function_common_data.h	/^        std::vector<Slice> sh; \/\/\/< Slice(0,(k-1)\/2) in each dimension for autorefine test$/;"	m	class:madness::FunctionCommonData
shared_ptrT	src/madness/world/world_object.h	/^                    std::shared_ptr<const objT>, std::shared_ptr<objT> >::type shared_ptrT;$/;"	t	struct:madness::detail::WorldObjectTaskHelper
shared_ptr_from_id	src/madness/world/world.h	/^        std::shared_ptr<T> shared_ptr_from_id(uniqueidT id) const {$/;"	f	class:madness::World
shell	src/apps/chem/molecularbasis.h	/^    const ContractedGaussianShell& shell; \/\/ Reference to the underlying atomic shell$/;"	m	class:madness::AtomicBasisFunction
shell	src/apps/hf/molecularbasis.h	/^    const ContractedGaussianShell& shell; \/\/ Reference to the underlying atomic shell$/;"	m	class:AtomicBasisFunction
shell	src/apps/polar/molecularbasis.h	/^    const ContractedGaussianShell& shell; \/\/ Reference to the underlying atomic shell$/;"	m	class:AtomicBasisFunction
shells_to_bfn	src/apps/chem/molecularbasis.h	/^    void shells_to_bfn(const Molecule& molecule, std::vector<int>& sh_to_bf, std::vector<int>& sh_nbf) const {$/;"	f	class:madness::AtomicBasisSet
shelltype	src/apps/moldft/nwtoxml.py	/^            shelltype = line[1]$/;"	v
shelltype	src/apps/polar/nwtoxml.py	/^            shelltype = line[1]$/;"	v
shift	src/apps/chem/AC.h	/^	double shift()const{return (-ac_param_.e_ion_-ac_param_.eh_);}$/;"	f	class:madness::AC
shift	src/apps/chem/znemo.h	/^	double shift() const {return get<double>("shift");}$/;"	f	class:madness::Nemo_complex_Parameters
shift	src/examples/helium_mp2.cc	/^static const double shift=0.0;$/;"	v	file:
shift	src/madness/world/test_dc.cc	/^    const int shift;$/;"	m	class:TestPmap	file:
shift_	src/examples/smooth.h	/^		const Vector<double,NDIM> shift_;$/;"	m	struct:smooth::inv_mask_functor
shift_	src/examples/smooth.h	/^		const Vector<double,NDIM> shift_;$/;"	m	struct:smooth::mask_functor
should_run	src/madness/external/gtest/include/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestCase
should_run	src/madness/external/gtest/include/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestInfo
should_run_	src/madness/external/gtest/include/gtest/gtest.h	/^  bool should_run_;                 \/\/ True iff this test should run$/;"	m	class:testing::TestInfo
should_run_	src/madness/external/gtest/include/gtest/gtest.h	/^  bool should_run_;$/;"	m	class:testing::TestCase
shuffle_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool shuffle_;$/;"	m	class:testing::internal::GTestFlagSaver
shuffm1	src/madness/tensor/mtxmq_graveyard/mtxmq.cc	/^static const int shuffm1=0x0F; \/\/ originally -1=0xFFFFFFFF but produced compiler warning about out of range value (upper bits reseved and must be zero).$/;"	m	namespace:madness	file:
shuffm1	src/madness/tensor/mtxmq_graveyard/mtxmq_avx_rjh.cc	/^static const int shuffm1=0x0F; \/\/ originally -1=0xFFFFFFFF but produced compiler warning about out of range value (upper bits reseved and must be zero).$/;"	m	namespace:madness	file:
sigma	src/apps/chem/test_SCFOperators.cc	/^    double sigma;       \/\/ parameter in the formulas$/;"	m	struct:refpotfunctor	file:
sigma	src/examples/colloid.cc	/^    const double& sigma;  \/\/surface width$/;"	m	class:SurfaceMoleculeInteraction	file:
sigma	src/examples/dielectric.cc	/^const double sigma = 0.1; \/\/ Surface width$/;"	v
sigma	src/examples/dielectric_external_field.cc	/^const double sigma = 0.3; \/\/ Surface width$/;"	v
sigma	src/examples/molecularmask.h	/^    const double sigma;$/;"	m	class:MolecularMaskBase
sigma	src/examples/siam_example.cc	/^const double sigma = 0.1; \/\/\/< Surface "width".$/;"	v
sigma	src/examples/svpe.cc	/^    const double sigma;                 \/\/< Width of surface layer$/;"	m	class:SVPESolver	file:
sigma	src/examples/svpe.cc	/^const double sigma = 0.5; \/\/ Surface width$/;"	v
sigma	src/madness/mra/testbc.cc	/^    const double sigma;$/;"	m	class:DSphere	file:
sigma	src/madness/mra/testbc.cc	/^    const double sigma;$/;"	m	class:Sphere	file:
sigmaaa	src/apps/chem/plotxc.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmaaa	src/apps/chem/testlda.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmaaa	src/apps/chem/testxc.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmaaa	src/apps/polar/testxc.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmaab	src/apps/chem/plotxc.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmaab	src/apps/chem/testlda.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmaab	src/apps/chem/testxc.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmaab	src/apps/polar/testxc.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmabb	src/apps/chem/plotxc.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmabb	src/apps/chem/testlda.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmabb	src/apps/chem/testxc.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmabb	src/apps/polar/testxc.cc	/^  double sigmaaa, sigmaab, sigmabb;$/;"	m	struct:xcfunc_data_point	file:
sigmin	src/apps/polar/xcfunctional.h	/^    double rhomin, rhotol, sigmin, sigtol; \/\/ See initialize and munge*$/;"	m	class:madness::XCfunctional
sign	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^namespace sign {$/;"	n	namespace:elem
sign	src/madness/external/muParser/muParserTest.h	/^        static value_type sign(value_type v) { return -v; }$/;"	f	class:mu::Test::ParserTester
signCtrl	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^    SignCtrl<Real> signCtrl;$/;"	m	struct:elem::SdcCtrl
sign_bit	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  Bits sign_bit() const { return kSignBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
signal	src/madness/world/worldmutex.h	/^        void signal() const {$/;"	f	class:madness::ConditionVariable
signal	src/madness/world/worldmutex.h	/^        void signal() const {$/;"	f	class:madness::PthreadConditionVariable
signum_	src/madness/external/gtest/include/gtest/gtest-death-test.h	/^  const int signum_;$/;"	m	class:testing::KilledBySignal
sigtol	src/apps/polar/xcfunctional.h	/^    double rhomin, rhotol, sigmin, sigtol; \/\/ See initialize and munge*$/;"	m	class:madness::XCfunctional
sim_to_user	src/madness/mra/funcdefaults.h	/^    static void sim_to_user(const Vector<double,NDIM>& xsim, Vector<double,NDIM>& xuser) {$/;"	f	namespace:madness
similar	src/apps/chem/MolecularOrbitals.h	/^	friend bool similar(const MolecularOrbitals& mo1, const MolecularOrbitals& mo2, const double thresh=1.e-6) {$/;"	f	class:madness::MolecularOrbitals
similar	src/apps/chem/test_SCFOperators.cc	/^bool similar(double val1, double val2, double thresh=1.e-6) {$/;"	f
simple	src/madness/misc/ran.cc	/^    unsigned int Random::simple() {$/;"	f	class:madness::Random
simpleTextPrint	src/madness/external/tinyxml/tinyxml.h	/^	bool simpleTextPrint;$/;"	m	class:TiXmlPrinter
simple_hash	src/madness/mra/mypmap.h	/^        ProcessID simple_hash(const KeyD& key) const {$/;"	f	class:madness::MyPmap
simple_key_map	src/madness/mra/mypmap.h	/^        Tensor<ProcessID> simple_key_map; \/\/ map of keys at level n, for map_type 1$/;"	m	class:madness::MyPmap
simple_state	src/madness/misc/ran.h	/^        unsigned int simple_state;$/;"	m	class:madness::Random
simpt2key	src/examples/helium_mp2.cc	/^     Key<6> simpt2key(const Vector<double,6>& pt, Level n) {$/;"	f
simpt2key	src/madness/mra/funcdefaults.h	/^    static inline Key<NDIM> simpt2key(const Vector<T,NDIM>& pt, Level n){$/;"	f	namespace:madness
sin	src/apps/nick/mpreal.h	/^inline const mpreal sin(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sin	src/madness/mra/tools/longfloat.py	/^    def sin(self):$/;"	m	class:longfloat
sin	src/madness/mra/tools/longfloat.py	/^    def sin(self,x):$/;"	m	class:interpolators
sin_cos	src/apps/nick/mpreal.h	/^inline int sin_cos(mpreal& s, mpreal& c, const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sindsin	src/madness/mra/tools/longfloat.py	/^    def sindsin(self, x):$/;"	m	class:interpolators
single_precision	src/madness/fortran_ctypes.h	/^typedef float single_precision;$/;"	t
single_precision_complex	src/madness/fortran_ctypes.h	/^typedef std::complex<float> single_precision_complex;$/;"	t
singleton_t	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^} singleton_t;$/;"	t	typeref:struct:__anon15
sinh	src/apps/nick/mpreal.h	/^inline const mpreal sinh (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sinh_cosh	src/apps/nick/mpreal.h	/^inline int sinh_cosh(mpreal& s, mpreal& c, const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
size	src/apps/adrian/ResponseFunction2.h	/^  unsigned int size() const { return r_states; }$/;"	f	class:madness::ResponseFunction
size	src/apps/bryan/ResponseFunction2.h	/^      unsigned int size() const {$/;"	f	class:madness::ResponseFunction
size	src/apps/chem/CCStructures.h	/^    size_t size()const{$/;"	f	struct:madness::CC_vecfunction
size	src/apps/ii/eigen_solver.cc	/^    int size; \/\/\/ size of A$/;"	m	class:SystolicEigensolver	file:
size	src/apps/ii/testsystolic.cc	/^    int nrot, nrotsum, size;$/;"	m	class:SystolicEigensolver	file:
size	src/madness/external/elemental/external/pmrrr/include/rrr.h	/^  int             size;$/;"	m	struct:__anon19
size	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  size_t size() const { return size_; }$/;"	f	class:testing::internal::NativeArray
size	src/madness/external/gtest/src/gtest-test-part.cc	/^int TestPartResultArray::size() const {$/;"	f	class:testing::TestPartResultArray
size	src/madness/external/muParser/muParserStack.h	/^      unsigned size() const$/;"	f	class:mu::ParserStack
size	src/madness/external/tinyxml/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep
size	src/madness/external/tinyxml/tinystr.h	/^	size_type size () const { return rep_->size; }$/;"	f	class:TiXmlString
size	src/madness/mra/funcimpl.h	/^        size_t size() const {$/;"	f	class:madness::FunctionNode
size	src/madness/mra/mra.h	/^        std::size_t size() const {$/;"	f	class:madness::Function
size	src/madness/mra/mraimpl.h	/^    std::size_t FunctionImpl<T,NDIM>::size() const {$/;"	f	class:madness::FunctionImpl
size	src/madness/tensor/basetensor.h	/^        long size() const {return _size;}$/;"	f	class:madness::BaseTensor
size	src/madness/tensor/lowranktensor.h	/^    long size() const {$/;"	f	class:madness::LowRankTensor
size	src/madness/tensor/tensortrain.h	/^		long size() const {$/;"	f	class:madness::TensorTrain
size	src/madness/world/buffer_archive.h	/^            inline std::size_t size() const {$/;"	f	class:madness::archive::BufferOutputArchive
size	src/madness/world/dqueue.h	/^        size_t size() const {$/;"	f	class:madness::DQueue
size	src/madness/world/group.h	/^            ProcessID size() const { return group_to_world_map_.size(); }$/;"	f	class:madness::Group::Impl
size	src/madness/world/group.h	/^            size(const vectorT &v) { return v.size(); }$/;"	f	class:madness::Group::Impl
size	src/madness/world/group.h	/^        ProcessID size() const {$/;"	f	class:madness::Group
size	src/madness/world/range.h	/^        size_t size() const { return n; }$/;"	f	class:madness::Range
size	src/madness/world/stack.h	/^        size_type size() const volatile { return size_; }$/;"	f	class:madness::Stack
size	src/madness/world/stack.h	/^        size_type size() const { return size_; }$/;"	f	class:madness::Stack
size	src/madness/world/thread.h	/^        static std::size_t size() {$/;"	f	class:madness::ThreadPool
size	src/madness/world/vector.h	/^        size_type size() const { return data_.size(); }$/;"	f	class:madness::Vector
size	src/madness/world/world.h	/^        ProcessID size() const { return mpi.size(); }$/;"	f	class:madness::World
size	src/madness/world/world_task_queue.h	/^        size_t size() const {$/;"	f	class:madness::WorldTaskQueue
size	src/madness/world/worldam.h	/^        std::size_t size() const { return nbyte; }$/;"	f	class:madness::AmArg
size	src/madness/world/worlddc.h	/^        std::size_t size() const {$/;"	f	class:madness::WorldContainer
size	src/madness/world/worlddc.h	/^        std::size_t size() const {$/;"	f	class:madness::WorldContainerImpl
size	src/madness/world/worldhashmap.h	/^            std::size_t size() const {$/;"	f	class:madness::Hash_private::bin
size	src/madness/world/worldhashmap.h	/^        size_t size() const {$/;"	f	class:madness::ConcurrentHashMap
size	src/madness/world/worldmpi.h	/^        int size() const { return SafeMPI::Intracomm::Get_size(); }$/;"	f	class:madness::WorldMpiInterface
size_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    int height_, size_, gcd_;$/;"	m	class:elem::Grid
size_	src/madness/external/elemental/include/elemental/core/Memory.hpp	/^    std::size_t size_;$/;"	m	class:elem::Memory
size_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  size_t size_;$/;"	m	class:testing::internal::NativeArray
size_	src/madness/world/stack.h	/^        size_type size_; \/\/\/< Number of elements on the stack.$/;"	m	class:madness::Stack
size_of	src/apps/chem/CCStructures.cc	/^  size_of(const intermediateT& im) {$/;"	f	namespace:madness
size_t	src/madness/external/muParser/muParserFixes.h	/^  typedef ::size_t size_t;$/;"	t	namespace:std
size_type	src/madness/external/tinyxml/tinystr.h	/^  	typedef size_t size_type;$/;"	t	class:TiXmlString
size_type	src/madness/world/stack.h	/^        typedef unsigned int size_type; \/\/\/< An unsigned integral type.$/;"	t	class:madness::Stack
sizeof	src/madness/tensor/cblas_types.h	/^static_assert(sizeof(std::complex<double>)==sizeof(blas_complex_double), "sizes of blas_complex_double and std::complex<double> do not match");$/;"	v
sizeof	src/madness/tensor/cblas_types.h	/^static_assert(sizeof(std::complex<float>)==sizeof(blas_complex_float), "sizes of blas_complex_float and std::complex<float> do not match");$/;"	v
sizeof	src/madness/tensor/lapacke_types.h	/^static_assert(sizeof(std::complex<double>)==sizeof(lapack_complex_double), "sizes of lapack_complex_double and std::complex<double> do not match");$/;"	v
sizeof	src/madness/tensor/lapacke_types.h	/^static_assert(sizeof(std::complex<float>)==sizeof(lapack_complex_float), "sizes of lapack_complex_float and std::complex<float> do not match");$/;"	v
slamch_	src/madness/tensor/clapack_fortran.h	79;"	d
slater	src/apps/chem/test_dft.cc	/^double slater(const coord_3d& xyz) {$/;"	f
slater	src/madness/mra/function_factory.h	/^    TwoElectronFactory& slater() {$/;"	f	class:madness::TwoElectronFactory
slater2	src/apps/chem/test_dft.cc	/^double slater2(const coord_3d& xyz) {$/;"	f
slater_	src/madness/mra/function_factory.h	/^    enum operatortype {coulomb_, slater_, f12_, bsh_};$/;"	e	enum:madness::TwoElectronFactory::operatortype
slater_apply	src/examples/smooth.h	/^	madness::Tensor<double> slater_apply(const std::vector< madness::Tensor<double> >& t,const madness::Key<3> & key,const FunctionCommonData<double,3> cdata) const{$/;"	f	struct:apply_kernel_helper
slater_fit	src/madness/mra/gfit.h	/^	static void slater_fit(double gamma, double lo, double hi, double eps,$/;"	f	class:madness::GFit
slater_functor	src/examples/smooth.h	/^static double slater_functor(const coord_3d &x){$/;"	f
slater_kernel	src/examples/smooth.h	/^	slater_kernel() : thresh_(FunctionDefaults<3>::get_thresh()) {}$/;"	f	struct:slater_kernel
slater_kernel	src/examples/smooth.h	/^	slater_kernel(const double thresh) : thresh_(thresh) {}$/;"	f	struct:slater_kernel
slater_kernel	src/examples/smooth.h	/^	struct slater_kernel{$/;"	s	struct:apply_kernel_helper
slater_kernel	src/examples/smooth.h	/^struct slater_kernel {$/;"	s
slater_kernel_apply	src/examples/smooth.h	/^    slater_kernel_apply(const apply_kernel_helper &xc_) : cdata(FunctionCommonData<double,3>::get(FunctionDefaults<3>::get_k())), xc(&xc_) {}$/;"	f	struct:slater_kernel_apply
slater_kernel_apply	src/examples/smooth.h	/^struct slater_kernel_apply {$/;"	s
slater_radius	src/apps/chem/AC.cc	/^double slater_radius(int atomic_number){$/;"	f	namespace:madness
slatergradop	src/apps/chem/PNOF12Potentials.h	/^	std::vector< std::shared_ptr< real_convolution_3d > > slatergradop; 	\/\/\/ Convolution with the gradient of the slater operator$/;"	m	class:madness::F12Potentials
slatergradop_sq	src/apps/chem/PNOF12Potentials.h	/^	std::vector< std::shared_ptr< real_convolution_3d > > slatergradop_sq;  \/\/\/ Convolution with the gradient of the squared (\\gamma*2) slater operator$/;"	m	class:madness::F12Potentials
slaterop	src/apps/chem/PNOF12Potentials.h	/^	std::shared_ptr<real_convolution_3d> slaterop;							\/\/\/< operator for convolutions with the slater factor exp(-\\gamma*r_{12})$/;"	m	class:madness::F12Potentials
slaterop_sq	src/apps/chem/PNOF12Potentials.h	/^	std::shared_ptr<real_convolution_3d> slaterop_sq;						\/\/\/< operator for convolutions with the slater factor exp(-2.0*\\gamma*r_{12})$/;"	m	class:madness::F12Potentials
slymer	src/apps/adrian/ESInterface.h	/^namespace slymer {$/;"	n
slymer	src/apps/adrian/NWChem.cc	/^namespace slymer {$/;"	n	file:
slymer	src/apps/adrian/NWChem.h	/^namespace slymer {$/;"	n
slymer	src/apps/adrian/basis.h	/^namespace slymer {$/;"	n
slymer	src/apps/adrian/gaussian.cc	/^namespace slymer {$/;"	n	file:
slymer	src/apps/adrian/gaussian.h	/^namespace slymer {$/;"	n
slymer	src/apps/adrian/polynomial.cc	/^namespace slymer {$/;"	n	file:
slymer	src/apps/adrian/polynomial.h	/^namespace slymer {$/;"	n
slymer	src/apps/bryan/ESInterface.h	/^namespace slymer {$/;"	n
slymer	src/apps/bryan/NWChem.cc	/^namespace slymer {$/;"	n	file:
slymer	src/apps/bryan/NWChem.h	/^namespace slymer {$/;"	n
slymer	src/apps/bryan/basis.h	/^namespace slymer {$/;"	n
slymer	src/apps/bryan/gaussian.cc	/^namespace slymer {$/;"	n	file:
slymer	src/apps/bryan/gaussian.h	/^namespace slymer {$/;"	n
slymer	src/apps/bryan/polynomial.cc	/^namespace slymer {$/;"	n	file:
slymer	src/apps/bryan/polynomial.h	/^namespace slymer {$/;"	n
small	src/apps/adrian/ResponseParameters.h	/^      double small;                      \/\/\/< Minimum length scale to be resolved$/;"	m	struct:madness::ResponseParameters
small	src/apps/adrian/ResponsePotential.h	/^      const double small;                                              \/\/ Smallest lengthscale for coulomb op.$/;"	m	class:madness::ResponsePotential
small	src/apps/bryan/ResponseParameters.h	/^      double small;                      \/\/\/< Minimum length scale to be resolved$/;"	m	struct:madness::ResponseParameters
small	src/apps/bryan/ResponsePotential.h	/^      const double small;                                              \/\/ Smallest lengthscale for coulomb op.$/;"	m	class:madness::ResponsePotential
small	src/examples/binaryop.cc	/^static const double small = thresh*1e-4;$/;"	v	file:
small	src/madness/mra/funcimpl.h	/^        AtomicInt small;$/;"	m	class:madness::FunctionImpl
small_memory	src/apps/chem/SCFOperators.h	/^    Exchange& small_memory(const bool flag) {$/;"	f	class:madness::Exchange
small_memory	src/apps/chem/SCFOperators.h	/^    bool small_memory() const {return small_memory_;}$/;"	f	class:madness::Exchange
small_memory	src/apps/chem/SCFOperators.h	/^    bool& small_memory() {return small_memory_;}$/;"	f	class:madness::Exchange
small_memory_	src/apps/chem/SCFOperators.h	/^    bool small_memory_=true;$/;"	m	class:madness::Exchange
smallest_length_scale	src/apps/chem/molecule.cc	/^double Molecule::smallest_length_scale() const$/;"	f	class:madness::Molecule
smallest_length_scale	src/apps/hf/mentity.cc	/^double MolecularEntity::smallest_length_scale() const {$/;"	f	class:MolecularEntity
smallest_length_scale	src/apps/polar/molecule.cc	/^double Molecule::smallest_length_scale() const {$/;"	f	class:Molecule
smalltest	src/madness/mra/testsuite.cc	/^bool smalltest = false;$/;"	v
smalltest	src/madness/tensor/test_mtxmq.cc	/^bool smalltest = false;$/;"	v
smear	src/apps/hf/electronicstructureparams.h	/^  double smear;$/;"	m	struct:madness::ElectronicStructureParams
smear	src/apps/polar/moldft.cc	/^    double smear;          \/\/\/< Smearing parameter$/;"	m	struct:CalculationParameters	file:
smooth	src/examples/smooth.h	/^	smooth(World&world):$/;"	f	class:smooth
smooth	src/examples/smooth.h	/^	smooth(World&world, const double &box_mask_factor, const double box_mask_cutoff):$/;"	f	class:smooth
smooth	src/examples/smooth.h	/^class smooth{$/;"	c
smooth_density	src/examples/smooth.h	/^	Function<T,NDIM> smooth_density(const Function<T,NDIM> &density, const std::string & msg ="function"){$/;"	f	class:smooth
smooth_density_from_orbitals	src/examples/smooth.h	/^	Function<T,NDIM> smooth_density_from_orbitals(const std::vector<Function<T,NDIM>> &orbitals)const{$/;"	f	class:smooth
smooth_sigma	src/examples/smooth.h	/^	Function<T,NDIM> smooth_sigma(const Function<T,NDIM> &density){$/;"	f	class:smooth
smoothed_density	src/apps/chem/atomutil.cc	/^double smoothed_density(double r) {$/;"	f	namespace:madness
smoothed_density	src/apps/hf/mentity.cc	/^static double smoothed_density(double r)$/;"	f	file:
smoothed_density	src/apps/polar/atomutil.cc	/^double smoothed_density(double r) {$/;"	f
smoothed_potential	src/apps/chem/atomutil.cc	/^double smoothed_potential(double r) {$/;"	f	namespace:madness
smoothed_potential	src/apps/hf/mentity.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/apps/hf/test_be.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/apps/hf/test_coulomb.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/apps/hf/test_he.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/apps/hf/test_hf.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/apps/nick/extra.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/apps/nick/tdse1.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/apps/polar/atomutil.cc	/^double smoothed_potential(double r) {$/;"	f
smoothed_potential	src/apps/tdse/tdse.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/apps/tdse/tdse.confused.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/apps/tdse/tdse4.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_potential	src/examples/tdse_example.cc	/^static double smoothed_potential(double r) {$/;"	f	file:
smoothed_unitvec	src/apps/chem/correlationfactor.h	/^	coord_3d smoothed_unitvec(const coord_3d& xyz, double smoothing=0.0) const {$/;"	f	class:madness::NuclearCorrelationFactor
smoothen	src/apps/chem/nemo.h	/^    static void smoothen(real_function_3d& f) {$/;"	f	class:madness::Nemo
smoothing_parameter	src/apps/chem/atomutil.cc	/^double smoothing_parameter(double Z, double eprec) {$/;"	f	namespace:madness
smoothing_parameter	src/apps/hf/mentity.cc	/^static double smoothing_parameter(double Z, double eprec) {$/;"	f	file:
smoothing_parameter	src/apps/hf/test_be.cc	/^static double smoothing_parameter(double Z, double eprec) {$/;"	f	file:
smoothing_parameter	src/apps/hf/test_coulomb.cc	/^static double smoothing_parameter(double Z, double eprec) {$/;"	f	file:
smoothing_parameter	src/apps/hf/test_he.cc	/^static double smoothing_parameter(double Z, double eprec) {$/;"	f	file:
smoothing_parameter	src/apps/hf/test_hf.cc	/^static double smoothing_parameter(double Z, double eprec) {$/;"	f	file:
smoothing_parameter	src/apps/polar/atomutil.cc	/^double smoothing_parameter(double Z, double eprec) {$/;"	f
snapCtrl	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    SnapshotCtrl snapCtrl;$/;"	m	struct:elem::PseudospecCtrl
sock_it_to_me	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::sock_it_to_me(const keyT& key,$/;"	f	class:madness::FunctionImpl
sock_it_to_me_too	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::sock_it_to_me_too(const keyT& key,$/;"	f	class:madness::FunctionImpl
socket_writer_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  const scoped_ptr<AbstractSocketWriter> socket_writer_;$/;"	m	class:testing::internal::StreamingListener
sockfd_	src/madness/external/gtest/src/gtest-internal-inl.h	/^    int sockfd_;  \/\/ socket file descriptor$/;"	m	class:testing::internal::StreamingListener::SocketWriter
solid_harmonics	src/apps/adrian/TDDFT.cc	/^std::map<std::vector<int>, real_function_3d> TDHF::solid_harmonics(World &world,$/;"	f	class:TDHF
solid_harmonics	src/apps/adrian/TDHF2.cc	/^std::map<std::vector<int>,real_function_3d> TDHF::solid_harmonics(World & world,$/;"	f	class:TDHF
solid_harmonics	src/apps/bryan/TDHF2.cc	/^std::map<std::vector<int>,real_function_3d> TDHF::solid_harmonics(World & world,$/;"	f	class:TDHF
solve	src/apps/adrian/TDDFT.cc	/^void TDHF::solve(World &world) {$/;"	f	class:TDHF
solve	src/apps/adrian/TDHF.cc	/^void TDHF::solve(World & world)$/;"	f	class:TDHF
solve	src/apps/adrian/TDHF2.cc	/^void TDHF::solve(World & world)$/;"	f	class:TDHF
solve	src/apps/bryan/TDHF.cc	/^void TDHF::solve(World & world)$/;"	f	class:TDHF
solve	src/apps/bryan/TDHF2.cc	/^void TDHF::solve(World & world)$/;"	f	class:TDHF
solve	src/apps/chem/CC2.cc	/^  CC2::solve() {$/;"	f	class:madness::CC2
solve	src/apps/chem/PNO.cpp	/^void PNO::solve(std::vector<PNOPairs>& all_pairs) const {$/;"	f	class:madness::PNO
solve	src/apps/chem/PNO.h	/^	void solve()const{$/;"	f	class:madness::PNO
solve	src/apps/chem/SCF.cc	/^void SCF::solve(World &world)$/;"	f	class:madness::SCF
solve	src/apps/chem/nemo.cc	/^double Nemo::solve(const SCFProtocol& proto) {$/;"	f	class:madness::Nemo
solve	src/apps/hf/dft.cc	/^  void DFT<T,NDIM>::solve(int maxits)$/;"	f	class:madness::DFT
solve	src/apps/hf/eigsolver.cc	/^  void EigSolver<T,NDIM>::solve(int maxits)$/;"	f	class:madness::EigSolver
solve	src/apps/hf/solver.h	/^    void solve()$/;"	f	class:madness::Solver
solve	src/apps/ii/systolic.h	/^        void solve() { run(A.get_world(), TaskThreadEnv(1,0,0)); }$/;"	f	class:madness::SystolicMatrixAlgorithm
solve	src/apps/polar/moldft.cc	/^    void solve(World &world)$/;"	f	struct:Calculation
solve	src/examples/helium_mp2.cc	/^void solve(World& world, real_function_6d& pair, double& energy, long maxiter, double dcut) {$/;"	f
solve	src/examples/spectralprop.h	/^        std::vector<uT> solve(double t, double Delta, const uT& u0, const expLT& expL, const NT& N, const double eps, bool doprint, bool recurinit, int& napp) {$/;"	f	class:madness::SpectralPropagator
solve	src/examples/svpe.cc	/^    real_function_3d solve(const real_function_3d& rho,$/;"	f	class:SVPESolver
solve_cc2	src/apps/chem/CC2.cc	/^  CC2::solve_cc2(CC_vecfunction &singles,Pairs<CCPair> &doubles) {$/;"	f	class:madness::CC2
solve_ccs	src/apps/chem/CC2.cc	/^  std::vector<CC_vecfunction> CC2::solve_ccs() {$/;"	f	class:madness::CC2
solve_cis	src/apps/chem/TDHF.cc	/^std::vector<CC_vecfunction> TDHF::solve_cis()const{$/;"	f	class:madness::TDHF
solve_cis	src/apps/chem/TDHF.cc	/^std::vector<CC_vecfunction> TDHF::solve_cis(std::vector<CC_vecfunction> &start)const{$/;"	f	class:madness::TDHF
solve_cispd	src/apps/chem/CC2.cc	/^  CC2::solve_cispd(Pairs<CCPair> &cispd,const Pairs<CCPair> &mp2,const CC_vecfunction & ccs) {$/;"	f	class:madness::CC2
solve_cispd	src/apps/chem/PNO.cpp	/^std::vector<PNOPairs> PNO::solve_cispd(std::vector<PNOPairs>& result) const {$/;"	f	class:madness::PNO
solve_coupled_equations	src/apps/chem/mp2.cc	/^double MP2::solve_coupled_equations(Pairs<ElectronPair>& pairs,$/;"	f	class:madness::MP2
solve_cphf	src/apps/chem/nemo.cc	/^vecfuncT Nemo::solve_cphf(const size_t iatom, const int iaxis, const Tensor<double> fock,$/;"	f	class:madness::Nemo
solve_mp2	src/apps/chem/CC2.cc	/^  CC2::solve_mp2(Pairs<CCPair> &doubles) {$/;"	f	class:madness::CC2
solve_mp2	src/apps/chem/PNO.cpp	/^PNOPairs PNO::solve_mp2(PNOPairs& mp2) const {$/;"	f	class:madness::PNO
solve_mp2	src/apps/chem/PNO.h	/^	void solve_mp2(std::vector<PNOPairs>& pairs)const{$/;"	f	class:madness::PNO
solve_oep	src/apps/chem/oep.cc	/^void OEP::solve_oep(const vecfuncT& HF_nemo, const tensorT& HF_eigvals) {$/;"	f	class:madness::OEP
solve_polarizability	src/apps/adrian/TDDFT.cc	/^void TDHF::solve_polarizability(World &world) {$/;"	f	class:TDHF
solve_polarizability	src/apps/adrian/TDHF2.cc	/^void TDHF::solve_polarizability(World & world)$/;"	f	class:TDHF
solve_polarizability	src/apps/bryan/TDHF2.cc	/^void TDHF::solve_polarizability(World & world)$/;"	f	class:TDHF
solve_residual_equations	src/apps/chem/mp2.cc	/^void MP2::solve_residual_equations(ElectronPair& result,$/;"	f	class:madness::MP2
solve_response	src/apps/polar/moldft.cc	/^void solve_response(World &world)$/;"	f	struct:Calculation
solve_sequential	src/madness/tensor/systolic.h	/^        void solve_sequential() {$/;"	f	class:madness::SystolicMatrixAlgorithm
solve_tdhf	src/apps/chem/TDHF.cc	/^void TDHF::solve_tdhf(std::vector<CC_vecfunction> &x)const{$/;"	f	class:madness::TDHF
solver	src/apps/hf/electronicstructureparams.h	/^  int solver;$/;"	m	struct:madness::ElectronicStructureParams
sort	src/apps/adrian/TDDFT.cc	/^void TDHF::sort(World &world, Tensor<double> &vals, ResponseFunction &f) {$/;"	f	class:TDHF
sort	src/apps/adrian/TDHF.cc	/^Tensor<int> TDHF::sort(World & world,$/;"	f	class:TDHF
sort	src/apps/adrian/TDHF2.cc	/^void TDHF::sort(World & world,$/;"	f	class:TDHF
sort	src/apps/bryan/TDHF.cc	/^Tensor<int> TDHF::sort(World & world,$/;"	f	class:TDHF
sort	src/apps/bryan/TDHF2.cc	/^void TDHF::sort(World & world,$/;"	f	class:TDHF
sort_eigenpairs	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^int sort_eigenpairs(proc_t *procinfo, val_t *Wstruct, vec_t *Zstruct)$/;"	f	file:
sort_eigenpairs_global	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^int sort_eigenpairs_global(proc_t *procinfo, int m, val_t *Wstruct, $/;"	f	file:
sort_eigenpairs_local	src/madness/external/elemental/external/pmrrr/src/pmrrr.c	/^int sort_eigenpairs_local(proc_t *procinfo, int m, val_t *Wstruct, vec_t *Zstruct)$/;"	f	file:
sort_eigenvalues	src/apps/adrian/TDDFT.cc	/^Tensor<int> TDHF::sort_eigenvalues(World &world, Tensor<double> &vals,$/;"	f	class:TDHF
sort_eigenvalues	src/apps/adrian/TDHF.cc	/^Tensor<int> TDHF::sort_eigenvalues(World & world,$/;"	f	class:TDHF
sort_eigenvalues	src/apps/adrian/TDHF2.cc	/^Tensor<int> TDHF::sort_eigenvalues(World & world,$/;"	f	class:TDHF
sort_eigenvalues	src/apps/bryan/TDHF.cc	/^Tensor<int> TDHF::sort_eigenvalues(World & world,$/;"	f	class:TDHF
sort_eigenvalues	src/apps/bryan/TDHF2.cc	/^Tensor<int> TDHF::sort_eigenvalues(World & world,$/;"	f	class:TDHF
sort_struct_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} sort_struct_t;$/;"	t	typeref:struct:__anon28
sort_to_irreps	src/apps/chem/pointgroupsymmetry.h	/^	std::vector<Function<T,NDIM> > sort_to_irreps(std::vector<Function<T,NDIM> >& vrhs,$/;"	f	class:madness::projector_irrep
sort_xfunctions	src/apps/chem/TDHF.cc	/^std::vector<CC_vecfunction> TDHF::sort_xfunctions(std::vector<CC_vecfunction> x)const{$/;"	f	class:madness::TDHF
sorter	src/madness/world/binsorter.h	/^        void sorter(const std::vector<T>& v) {$/;"	f	class:madness::BinSorter
source	src/madness/mra/testperiodic.cc	/^double source(const coordT& r) {$/;"	f
source1	src/madness/mra/testperiodic.cc	/^double source1(const coord_1d& r) {$/;"	f
sparse_mtxm	src/madness/mra/tools/mathutil.py	/^def sparse_mtxm(a,b):$/;"	f
sparse_mtxm_nflop	src/madness/mra/tools/mathutil.py	/^sparse_mtxm_nflop = 0.0$/;"	v
spawn_remote_task_handler	src/madness/world/world_object.h	/^        static void spawn_remote_task_handler(const AmArg& arg) {$/;"	f	class:madness::WorldObject
spawned	src/madness/external/gtest/src/gtest-death-test.cc	/^  bool spawned() const { return spawned_; }$/;"	f	class:testing::internal::DeathTestImpl
spawned_	src/madness/external/gtest/src/gtest-death-test.cc	/^  bool spawned_;$/;"	m	class:testing::internal::DeathTestImpl	file:
spdiam	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double           spdiam;$/;"	m	struct:__anon21
special_level	src/apps/adrian/gaussian.h	/^    madness::Level special_level() {$/;"	f	class:slymer::Gaussian_Functor
special_level	src/apps/bryan/gaussian.h	/^    madness::Level special_level() {$/;"	f	class:slymer::Gaussian_Functor
special_level	src/apps/chem/PNOGuessFunctions.h	/^		Level special_level()const{$/;"	f	class:madness::BasisFunctions::SolidHarmonicGaussian
special_level	src/apps/chem/gth_pseudopotential.h	/^    Level special_level() {$/;"	f	class:madness::ProjRLMFunctor
special_level	src/apps/chem/gth_pseudopotential.h	/^    Level special_level() {$/;"	f	class:madness::VLocalFunctor
special_level	src/apps/hf/electronicstructureapp.h	/^    virtual Level special_level()$/;"	f	class:MolecularNuclearChargeDensityFunctor
special_level	src/apps/hf/ewald.cc	/^    virtual Level special_level()$/;"	f	class:GaussianFunctor
special_level	src/apps/hf/ewald.cc	/^    virtual Level special_level()$/;"	f	class:MolecularNuclearChargeDensityFunctor
special_level	src/apps/moldft/preal.cc	/^    Level special_level() {$/;"	f	class:AtomicBasisFunctor
special_level	src/apps/moldft/preal.cc	/^  Level special_level() {$/;"	f	class:NuclearDensityFunctor
special_level	src/apps/moldft/testperiodic.cc	/^    Level special_level() {$/;"	f	class:NuclearDensityFunctor
special_level	src/apps/polar/gth_pseudopotential.h	/^    Level special_level() {$/;"	f	class:ProjFunctor
special_level	src/apps/polar/gth_pseudopotential.h	/^    Level special_level() {$/;"	f	class:ProjRLMFunctor
special_level	src/apps/polar/gth_pseudopotential.h	/^    Level special_level() {$/;"	f	class:RlmFunctor
special_level	src/apps/polar/gth_pseudopotential.h	/^    Level special_level() {$/;"	f	class:VLocalFunctor
special_level	src/apps/polar/gth_pseudopotential.h	/^    Level special_level() {$/;"	f	class:YlmFunctor
special_level	src/apps/polar/preal.cc	/^    Level special_level() {$/;"	f	class:AtomicBasisFunctor
special_level	src/apps/polar/preal.cc	/^  Level special_level() {$/;"	f	class:NuclearDensityFunctor
special_level	src/apps/polar/testperiodic.cc	/^    Level special_level() {$/;"	f	class:NuclearDensityFunctor
special_level	src/madness/mra/funcdefaults.h	/^        static int special_level;      \/\/\/< Minimum level for fine scale projection of special boxes$/;"	m	class:madness::FunctionDefaults
special_level	src/madness/mra/funcimpl.h	/^        int special_level; \/\/\/< Minimium level for refinement on special points$/;"	m	class:madness::FunctionImpl
special_level	src/madness/mra/function_factory.h	/^    special_level(int special_level) {$/;"	f	class:madness::FunctionFactory
special_level	src/madness/mra/function_interface.h	/^	    virtual Level special_level() {return special_level_;}$/;"	f	class:madness::FunctionFunctorInterface
special_level	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> int FunctionDefaults<NDIM>::special_level;$/;"	m	class:madness::FunctionDefaults
special_level_	src/madness/mra/function_interface.h	/^	    Level special_level_;$/;"	m	class:madness::FunctionFunctorInterface
special_points	src/apps/adrian/gaussian.h	/^    std::vector<madness::coord_3d> special_points() const {$/;"	f	class:slymer::Gaussian_Functor
special_points	src/apps/bryan/gaussian.h	/^    std::vector<madness::coord_3d> special_points() const {$/;"	f	class:slymer::Gaussian_Functor
special_points	src/apps/chem/PNOGuessFunctions.h	/^		std::vector<coord_3d> special_points()const{$/;"	f	class:madness::BasisFunctions::SolidHarmonicGaussian
special_points	src/apps/chem/SCF.h	/^	std::vector<coordT> special_points() const {$/;"	f	class:madness::AtomicAttractionFunctor
special_points	src/apps/chem/SCF.h	/^	std::vector<coordT> special_points() const {$/;"	f	class:madness::AtomicBasisFunctor
special_points	src/apps/chem/SCF.h	/^	std::vector<coordT> special_points() const {$/;"	f	class:madness::MolecularDerivativeFunctor
special_points	src/apps/chem/SCF.h	/^	std::vector<coordT> special_points() const {$/;"	f	class:madness::MolecularSecondDerivativeFunctor
special_points	src/apps/chem/SCF.h	/^	std::vector<coordT> special_points() const {return molecule.get_all_coords_vec();}$/;"	f	class:madness::MolecularGuessDensityFunctor
special_points	src/apps/chem/correlationfactor.h	/^		std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::R_functor
special_points	src/apps/chem/correlationfactor.h	/^		std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U1_functor
special_points	src/apps/chem/correlationfactor.h	/^		std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U2_functor
special_points	src/apps/chem/correlationfactor.h	/^		std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U3_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::RX_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U1X_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U1_atomic_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U1_dot_U1_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U2X_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U2_atomic_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U3X_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::U3_atomic_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::square_times_V_derivative_functor
special_points	src/apps/chem/correlationfactor.h	/^        std::vector<coord_3d> special_points() const {$/;"	f	class:madness::NuclearCorrelationFactor::square_times_V_functor
special_points	src/apps/chem/diamagneticpotentialfactor.cc	/^    std::vector<coord_3d> special_points() const {$/;"	f	struct:madness::harmonic_potential_boxed
special_points	src/apps/chem/gth_pseudopotential.h	/^    std::vector<coord_3d> special_points() const {return specialpts;}$/;"	f	class:madness::ProjRLMFunctor
special_points	src/apps/chem/gth_pseudopotential.h	/^    std::vector<coord_3d> special_points() const {return specialpts;}$/;"	f	class:madness::VLocalFunctor
special_points	src/apps/chem/nemo.cc	/^    std::vector<coord_3d> special_points() const {$/;"	f	class:madness::atomic_attraction
special_points	src/apps/chem/potentialmanager.h	/^    std::vector<coord_3d> special_points() const {return molecule.get_all_coords_vec();}$/;"	f	class:madness::MolecularCorePotentialFunctor
special_points	src/apps/chem/potentialmanager.h	/^    std::vector<coord_3d> special_points() const {return molecule.get_all_coords_vec();}$/;"	f	class:madness::MolecularPotentialFunctor
special_points	src/apps/hf/electronicstructureapp.h	/^    virtual std::vector<coordT> special_points() const$/;"	f	class:MolecularNuclearChargeDensityFunctor
special_points	src/apps/hf/electronicstructureapp.h	/^  virtual std::vector<coordT> special_points() const$/;"	f	class:AtomicBasisFunctor
special_points	src/apps/hf/ewald.cc	/^    virtual std::vector<coordT> special_points() const$/;"	f	class:GaussianFunctor
special_points	src/apps/hf/ewald.cc	/^    virtual std::vector<coordT> special_points() const$/;"	f	class:MolecularNuclearChargeDensityFunctor
special_points	src/apps/hf/solver.h	/^      std::vector<coord_3d> special_points() const {return specialpt;}$/;"	f	class:madness::WSTAtomicBasisFunctor
special_points	src/apps/moldft/preal.cc	/^    std::vector<coord_3d> special_points() const {$/;"	f	class:AtomicBasisFunctor
special_points	src/apps/moldft/preal.cc	/^    std::vector<coord_3d> special_points() const {return molecule.get_all_coords_vec();}$/;"	f	class:MolecularPotentialFunctor
special_points	src/apps/moldft/preal.cc	/^  std::vector<coord_3d> special_points() const{$/;"	f	class:NuclearDensityFunctor
special_points	src/apps/moldft/testperiodic.cc	/^    std::vector<coord_3d> special_points() const {return specialpt;}$/;"	f	class:AtomicBasisFunctor
special_points	src/apps/moldft/testperiodic.cc	/^    std::vector<coord_3d> special_points() const {return specialpt;}$/;"	f	class:AtomicOrbitalFunctor
special_points	src/apps/moldft/testperiodic.cc	/^    std::vector<coord_3d> special_points() const {return specialpt;}$/;"	f	class:NuclearDensityFunctor
special_points	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> special_points() const {return specialpts;}$/;"	f	class:ProjFunctor
special_points	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> special_points() const {return specialpts;}$/;"	f	class:ProjRLMFunctor
special_points	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> special_points() const {return specialpts;}$/;"	f	class:RlmFunctor
special_points	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> special_points() const {return specialpts;}$/;"	f	class:VLocalFunctor
special_points	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> special_points() const {return specialpts;}$/;"	f	class:YlmFunctor
special_points	src/apps/polar/moldft.cc	/^    std::vector<coordT> special_points() const { return molecule.get_all_coords_vec(); }$/;"	f	class:MolecularGuessDensityFunctor
special_points	src/apps/polar/moldft.cc	/^    std::vector<coordT> special_points() const$/;"	f	class:AtomicBasisFunctor
special_points	src/apps/polar/moldft.cc	/^    std::vector<coordT> special_points() const$/;"	f	class:MolecularDerivativeFunctor
special_points	src/apps/polar/potentialmanager.h	/^    std::vector<coord_3d> special_points() const {return molecule.get_all_coords_vec();}$/;"	f	class:MolecularCorePotentialFunctor
special_points	src/apps/polar/potentialmanager.h	/^    std::vector<coord_3d> special_points() const {return molecule.get_all_coords_vec();}$/;"	f	class:MolecularPotentialFunctor
special_points	src/apps/polar/preal.cc	/^    std::vector<coord_3d> special_points() const {$/;"	f	class:AtomicBasisFunctor
special_points	src/apps/polar/preal.cc	/^    std::vector<coord_3d> special_points() const {return molecule.get_all_coords_vec();}$/;"	f	class:MolecularPotentialFunctor
special_points	src/apps/polar/preal.cc	/^  std::vector<coord_3d> special_points() const{$/;"	f	class:NuclearDensityFunctor
special_points	src/apps/polar/testperiodic.cc	/^    std::vector<coord_3d> special_points() const {return specialpt;}$/;"	f	class:AtomicBasisFunctor
special_points	src/apps/polar/testperiodic.cc	/^    std::vector<coord_3d> special_points() const {return specialpt;}$/;"	f	class:NuclearDensityFunctor
special_points	src/examples/dataloadbal.cc	/^    std::vector<coord_3d> special_points() const {$/;"	f	class:Gaussian
special_points	src/examples/derivatives.cc	/^    std::vector<coord_3d> special_points() const {return pts;}$/;"	f	class:F
special_points	src/examples/molecularmask.h	/^    std::vector< madness::Vector<double,3> > special_points() const {$/;"	f	class:MolecularMaskBase
special_points	src/examples/molecularmask.h	/^    std::vector< madness::Vector<double,3> > special_points() const {$/;"	f	class:MolecularSurface
special_points	src/examples/molecularmask.h	/^    std::vector< madness::Vector<double,3> > special_points() const {$/;"	f	class:MolecularVolumeComplementMask
special_points	src/examples/molecularmask.h	/^    std::vector< madness::Vector<double,3> > special_points() const {$/;"	f	class:MolecularVolumeExponentialSwitch
special_points	src/examples/molecularmask.h	/^    std::vector< madness::Vector<double,3> > special_points() const {$/;"	f	class:MolecularVolumeExponentialSwitchLogGrad
special_points	src/examples/molecularmask.h	/^    std::vector< madness::Vector<double,3> > special_points() const {$/;"	f	class:MolecularVolumeMask
special_points	src/examples/molecularmask.h	/^    std::vector< madness::Vector<double,3> > special_points() const {$/;"	f	class:MolecularVolumeMaskGrad
special_points	src/madness/mra/funcimpl.h	/^        std::vector<Vector<double,NDIM> > special_points; \/\/\/< special points for further refinement (needed for composite functions or multiplication)$/;"	m	class:madness::FunctionImpl
special_points	src/madness/mra/function_factory.h	/^    special_points(std::vector<Vector<double, NDIM> > & special_points) {$/;"	f	class:madness::FunctionFactory
special_points	src/madness/mra/function_interface.h	/^	    virtual std::vector< Vector<double,NDIM> > special_points() const {$/;"	f	class:madness::FunctionFunctorInterface
special_points	src/madness/mra/testproj.cc	/^    std::vector<coordT> special_points() const {$/;"	f	class:Gaussian
special_refinement_needed	src/madness/mra/leafop.h	/^    special_refinement_needed(const Key<NDIM>& key) const {$/;"	f	class:madness::Leaf_op
special_refinement_needed	src/madness/mra/leafop.h	/^    special_refinement_needed(const Key<NDIM>&key)const{$/;"	f	class:madness::Leaf_op_other
specialbox	src/madness/mra/leafop.h	/^    specialboxT specialbox;$/;"	m	class:madness::Leaf_op
specialpt	src/apps/chem/SCF.h	/^	std::vector<coordT> specialpt;$/;"	m	class:madness::CorePotentialDerivativeFunctor
specialpt	src/apps/hf/solver.h	/^      std::vector<coord_3d> specialpt;$/;"	m	class:madness::WSTAtomicBasisFunctor
specialpt	src/apps/moldft/testperiodic.cc	/^    std::vector<coord_3d> specialpt;$/;"	m	class:AtomicBasisFunctor	file:
specialpt	src/apps/moldft/testperiodic.cc	/^    std::vector<coord_3d> specialpt;$/;"	m	class:AtomicOrbitalFunctor	file:
specialpt	src/apps/moldft/testperiodic.cc	/^    std::vector<coord_3d> specialpt;$/;"	m	class:NuclearDensityFunctor	file:
specialpt	src/apps/polar/moldft.cc	/^    std::vector<coordT> specialpt;$/;"	m	class:CorePotentialDerivativeFunctor	file:
specialpt	src/apps/polar/testperiodic.cc	/^    std::vector<coord_3d> specialpt;$/;"	m	class:AtomicBasisFunctor	file:
specialpt	src/apps/polar/testperiodic.cc	/^    std::vector<coord_3d> specialpt;$/;"	m	class:NuclearDensityFunctor	file:
specialpt	src/examples/dataloadbal.cc	/^    std::vector<coord_3d> specialpt;$/;"	m	class:Gaussian	file:
specialpts	src/apps/chem/gth_pseudopotential.h	/^    std::vector<coord_3d> specialpts;$/;"	m	class:madness::ProjRLMFunctor
specialpts	src/apps/chem/gth_pseudopotential.h	/^    std::vector<coord_3d> specialpts;$/;"	m	class:madness::VLocalFunctor
specialpts	src/apps/hf/ewald.cc	/^  std::vector<coordT> specialpts;$/;"	m	class:GaussianFunctor	file:
specialpts	src/apps/moldft/preal.cc	/^  std::vector<coord_3d> specialpts;$/;"	m	class:NuclearDensityFunctor	file:
specialpts	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> specialpts;$/;"	m	class:ProjFunctor
specialpts	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> specialpts;$/;"	m	class:ProjRLMFunctor
specialpts	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> specialpts;$/;"	m	class:RlmFunctor
specialpts	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> specialpts;$/;"	m	class:VLocalFunctor
specialpts	src/apps/polar/gth_pseudopotential.h	/^    std::vector<coord_3d> specialpts;$/;"	m	class:YlmFunctor
specialpts	src/apps/polar/preal.cc	/^  std::vector<coord_3d> specialpts;$/;"	m	class:NuclearDensityFunctor	file:
speed_of_light_in_vacuum	src/madness/constants.h	/^        const double speed_of_light_in_vacuum = 299792458 ; \/\/           (exact)               m s^-1$/;"	m	namespace:madness::constants
speed_of_light_in_vacuum_in_au	src/madness/constants.h	/^        const double speed_of_light_in_vacuum_in_au = 1.0\/fine_structure_constant;   \/\/ \\approx 137$/;"	m	namespace:madness::constants
spherical_box	src/apps/chem/masks_and_boxes.h	/^	spherical_box(const double r, const double deviation,$/;"	f	struct:madness::spherical_box
spherical_box	src/apps/chem/masks_and_boxes.h	/^struct spherical_box {$/;"	s	namespace:madness
spin_polarized	src/apps/chem/xcfunctional.h	/^    bool spin_polarized;        \/\/\/< True if the functional is spin polarized$/;"	m	class:madness::XCfunctional
spin_polarized	src/apps/polar/xcfunctional.h	/^    bool spin_polarized;        \/\/\/< True if the functional is spin polarized$/;"	m	class:madness::XCfunctional
spin_restricted	src/apps/chem/CalculationParameters.h	/^	bool spin_restricted() const {return get<bool>("spin_restricted");}$/;"	f	struct:madness::CalculationParameters
spin_restricted	src/apps/moldft/mcpfit.cc	/^    bool spin_restricted;$/;"	m	struct:Calculation	file:
spin_restricted	src/apps/polar/mcpfit.cc	/^    bool spin_restricted;$/;"	m	struct:Calculation	file:
spin_restricted	src/apps/polar/moldft.cc	/^    bool spin_restricted;  \/\/\/< True if spin restricted$/;"	m	struct:CalculationParameters	file:
spin_zeeman_mo	src/apps/chem/znemo.h	/^		std::vector<complex_function_3d> spin_zeeman_mo;$/;"	m	struct:madness::Znemo::potentials
spinlock	src/madness/world/worldmutex.h	/^        mutable pthread_spinlock_t spinlock;$/;"	m	class:madness::Spinlock
spinpol	src/apps/hf/electronicstructureparams.h	/^  bool spinpol;$/;"	m	struct:madness::ElectronicStructureParams
spinrestricted	src/apps/adrian/GroundParameters.h	/^      bool spinrestricted;                     \/\/\/< Indicates if ground state calc. was open or closed shell$/;"	m	struct:madness::GroundParameters
spinrestricted	src/apps/bryan/GroundParameters.h	/^      bool spinrestricted;                     \/\/\/< Indicates if ground state calc. was open or closed shell$/;"	m	struct:madness::GroundParameters
split	src/apps/chem/zcis.h	/^	split(const std::vector<complex_function_3d>& rhs, int dim1) {$/;"	f	class:madness::Zcis
split	src/apps/chem/zcis.h	/^	static std::tuple<Tensor<T>, Tensor<T> > split(const Tensor<T>& rhs, int dim1) {$/;"	f	class:madness::Zcis
split	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double split;$/;"	m	struct:__anon25
split	src/madness/world/test_hashthreaded.cc	/^void split(const Range<ConcurrentHashMap<int,int>::iterator>& range) {$/;"	f
splitdim	src/madness/tensor/tensor.h	/^        Tensor<T> splitdim(long i, long dimi0, long dimi1) {$/;"	f	class:madness::Tensor
splitdim	src/madness/tensor/tensor.h	/^        const Tensor<T> splitdim(long i, long dimi0, long dimi1) const {$/;"	f	class:madness::Tensor
splitdim	src/madness/tensor/tensortrain.h	/^        TensorTrain<T> splitdim(long idim, long k1, long k2, const double eps) const {$/;"	f	class:madness::TensorTrain
splitdim_inplace	src/madness/tensor/basetensor.cc	/^    void BaseTensor::splitdim_inplace(long i, long dimi0, long dimi1) {$/;"	f	class:madness::BaseTensor
spreadFactor	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^    Real spreadFactor;$/;"	m	struct:elem::SdcCtrl
spreadFactor	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    Real spreadFactor;$/;"	m	struct:elem::HermitianSdcCtrl
spy_	src/madness/external/elemental/include/elemental/io/SpyWindow/decl.hpp	/^    SpyWidget *spy_;$/;"	m	class:elem::SpyWindow
sqr	src/apps/nick/mpreal.h	/^inline const mpreal sqr(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqr	src/madness/external/muParser/muParserTest.h	/^        static value_type sqr(value_type v1) { return v1*v1; }$/;"	f	class:mu::Test::ParserTester
sqrt	src/apps/nick/mpreal.h	/^inline const mpreal sqrt(const double v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	src/apps/nick/mpreal.h	/^inline const mpreal sqrt(const int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	src/apps/nick/mpreal.h	/^inline const mpreal sqrt(const long double v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	src/apps/nick/mpreal.h	/^inline const mpreal sqrt(const long int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	src/apps/nick/mpreal.h	/^inline const mpreal sqrt(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	src/apps/nick/mpreal.h	/^inline const mpreal sqrt(const unsigned int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	src/apps/nick/mpreal.h	/^inline const mpreal sqrt(const unsigned long int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	src/apps/polar/moldft.cc	/^tensorT sqrt(const tensorT &s, double tol = 1e-8)$/;"	f
sqrt	src/madness/mra/tools/longfloat.py	/^    def sqrt(self):$/;"	m	class:longfloat
sqrt	src/madness/mra/tools/mathutil.py	/^from math import sqrt $/;"	i
sqrtPI	src/apps/chem/gth_pseudopotential.h	/^    double sqrtPI;$/;"	m	class:madness::ProjRLMFunctor
sqrtPI	src/apps/polar/gth_pseudopotential.h	/^    double sqrtPI;$/;"	m	class:ProjFunctor
sqrtPI	src/apps/polar/gth_pseudopotential.h	/^    double sqrtPI;$/;"	m	class:ProjRLMFunctor
sqrtmu	src/apps/tdse/tdse4.cc	/^static const double sqrtmu = sqrt(reduced_mass);$/;"	v	file:
square	src/apps/chem/correlationfactor.h	/^	virtual real_function_3d square() const {$/;"	f	class:madness::NuclearCorrelationFactor
square	src/apps/chem/electronic_correlation_factor.h	/^    real_function_6d square() const {$/;"	f	class:madness::CorrelationFactor2
square	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-constexpr.cxx	/^constexpr int square(int x)$/;"	f
square	src/madness/mra/mra.h	/^        Function<T,NDIM>& square(bool fence = true) {$/;"	f	class:madness::Function
square	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> square(World& world,$/;"	f	namespace:madness
square	src/madness/mra/vmra1.h	/^      square(World& world,$/;"	f	namespace:madness
square	src/madness/tensor/gfit.cc	/^double square(double x) {return x*x;}$/;"	f
square_inplace	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::square_inplace(bool fence) {$/;"	f	class:madness::FunctionImpl
square_root	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^namespace square_root {$/;"	n	namespace:elem
square_times_V_derivative	src/apps/chem/correlationfactor.h	/^    virtual real_function_3d square_times_V_derivative(const int iatom, const int axis) const {$/;"	f	class:madness::NuclearCorrelationFactor
square_times_V_derivative_functor	src/apps/chem/correlationfactor.h	/^        square_times_V_derivative_functor(const NuclearCorrelationFactor* ncf,$/;"	f	class:madness::NuclearCorrelationFactor::square_times_V_derivative_functor
square_times_V_derivative_functor	src/apps/chem/correlationfactor.h	/^    class square_times_V_derivative_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
square_times_V_functor	src/apps/chem/correlationfactor.h	/^        square_times_V_functor(const NuclearCorrelationFactor* ncf,$/;"	f	class:madness::NuclearCorrelationFactor::square_times_V_functor
square_times_V_functor	src/apps/chem/correlationfactor.h	/^    class square_times_V_functor : public FunctionFunctorInterface<double,3> {$/;"	c	class:madness::NuclearCorrelationFactor
squareinplace	src/madness/mra/mraimpl.h	/^        struct squareinplace {$/;"	s	namespace:madness::detail
squareit	src/madness/mra/testunaryop.cc	/^void squareit(const Key<NDIM>& key, Tensor<T>& t) {$/;"	f
srand	src/madness/world/world.h	/^        void srand(unsigned long seed = 0ul) {$/;"	f	class:madness::World
src	src/madness/world/mpi_archive.h	/^            ProcessID src; \/\/\/< The source process.$/;"	m	class:madness::archive::MPIInputArchive
src	src/madness/world/mpi_archive.h	/^            ProcessID src; \/\/\/< The source process.$/;"	m	class:madness::archive::MPIRawInputArchive
src	src/madness/world/worldam.h	/^        ProcessID src;          \/\/ Rank of process sending the message$/;"	m	class:madness::AmArg
src	src/madness/world/worldrmi.h	/^        ProcessID src;$/;"	m	struct:madness::qmsg
ss1	src/madness/tensor/lapack.cc	/^double tt1, ss1;$/;"	v
ss_	src/madness/external/gtest/include/gtest/gtest-message.h	/^  const internal::scoped_ptr< ::std::stringstream> ss_;$/;"	m	class:testing::Message
sss	src/apps/adrian/TDDFT.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
sss	src/apps/adrian/TDHF.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
sss	src/apps/adrian/TDHF2.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
sss	src/apps/bryan/TDHF.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
sss	src/apps/bryan/TDHF2.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
sss	src/apps/chem/SCF.cc	/^static std::vector<double> ttt, sss;$/;"	m	namespace:madness	file:
sss	src/apps/chem/mp2.h	/^        mutable double ttt, sss;$/;"	m	class:madness::MP2
sss	src/apps/chem/nemo.h	/^	    double ttt,sss;$/;"	m	struct:madness::Nemo::timer
sss	src/apps/chem/nemo.h	/^	mutable double ttt, sss;$/;"	m	class:madness::Nemo
sss	src/apps/chem/znemo.h	/^	    double ttt,sss;$/;"	m	struct:madness::Znemo::timer
sss	src/apps/hf/solver.h	/^    double ttt, sss;$/;"	m	class:madness::Solver
sss	src/apps/ii/eigen_solver.cc	/^double ttt, sss;$/;"	v
sss	src/apps/moldft/mcpfit.cc	/^static double ttt, sss;$/;"	v	file:
sss	src/apps/moldft/moldft.cc	/^    static double ttt, sss;$/;"	v	file:
sss	src/apps/moldft/testperiodic.cc	/^static double ttt, sss;$/;"	v	file:
sss	src/apps/polar/mcpfit.cc	/^static double ttt, sss;$/;"	v	file:
sss	src/apps/polar/moldft.cc	/^static double ttt, sss;$/;"	v	file:
sss	src/madness/mra/testgaxpyext.cc	/^double ttt, sss;$/;"	v
sss	src/madness/mra/testinnerext.cc	/^double ttt, sss;$/;"	v
sss	src/madness/mra/testsuite.cc	/^double ttt, sss;$/;"	v
sss	src/madness/mra/testvmra.cc	/^double ttt, sss;$/;"	v
ssyev_	src/madness/tensor/clapack_fortran.h	60;"	d
ssygv_	src/madness/tensor/clapack_fortran.h	66;"	d
stack_trace_depth_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  internal::Int32 stack_trace_depth_;$/;"	m	class:testing::internal::GTestFlagSaver
stamp	src/madness/external/tinyxml/tinyxmlparser.cc	/^	const char*		stamp;$/;"	m	class:TiXmlParsingData	file:
standalone	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration
standard	src/madness/mra/mra.h	/^        void standard(bool fence = true) {$/;"	f	class:madness::Function
standard	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::standard(bool fence) {$/;"	f	class:madness::FunctionImpl
standard	src/madness/mra/vmra.h	/^void standard(World& world, std::vector<Function<T, NDIM>>& v,$/;"	f	namespace:madness
standard	src/madness/mra/vmra1.h	/^      void standard(World& world,$/;"	f	namespace:madness
start	src/apps/chem/CCStructures.h	/^    CCTimer start(){$/;"	f	struct:madness::CCTimer
start	src/apps/chem/PNOStructures.h	/^	MyTimer start()const{$/;"	f	struct:madness::MyTimer
start	src/apps/chem/PNOStructures.h	/^	size_t start()const{ return start_;}$/;"	f	struct:madness::ElectronPairIterator
start	src/apps/moldft/fci/timer.f	/^      double precision linux_cputime, start,/;"	v
start	src/madness/external/tinyxml/tinystr.h	/^	char* start() const { return rep_->str; }$/;"	f	class:TiXmlString
start	src/madness/mra/funcplot.h	/^    	coordT start, end;$/;"	m	struct:madness::trajectory
start	src/madness/tensor/slice.h	/^        long start;$/;"	m	class:madness::Slice
start	src/madness/world/range.h	/^        iteratorT start; \/\/\/< First item for iteration.$/;"	m	class:madness::Range
start	src/madness/world/thread.cc	/^    void ThreadBase::start() {$/;"	f	class:madness::ThreadBase
start	src/madness/world/thread.h	/^            void start(const std::pair<void*, unsigned short>& id,$/;"	f	class:madness::profiling::TaskEvent
start	src/madness/world/thread.h	/^        void start(void* (*f)(void *), void* args=nullptr) {$/;"	f	class:madness::Thread
start_	src/apps/chem/PNOStructures.h	/^	const size_t start_;$/;"	m	struct:madness::OrbitalIterator
start_	src/apps/chem/PNOStructures.h	/^	const size_t start_=0; \/\/\/< start value for i and j (usually 0)$/;"	m	struct:madness::ElectronPairIterator
start_cpu	src/apps/chem/CCStructures.h	/^    double start_cpu;$/;"	m	struct:madness::CCTimer
start_cpu_time	src/madness/world/world.cc	/^        double start_cpu_time; \/\/\/< \\todo Documentation needed.$/;"	m	namespace:madness::__anon11	file:
start_iteration_hook	src/apps/chem/distpm.cc	/^    void start_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:madness::SystolicFixOrbitalOrders
start_iteration_hook	src/apps/chem/distpm.cc	/^    void start_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:madness::SystolicPMOrbitalLocalize
start_iteration_hook	src/apps/ii/eigen_solver.cc	/^void SystolicEigensolver<T>::start_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:SystolicEigensolver
start_iteration_hook	src/apps/ii/systolic.h	/^        virtual void start_iteration_hook(const TaskThreadEnv& env) {}$/;"	f	class:madness::SystolicMatrixAlgorithm
start_iteration_hook	src/apps/ii/systolic.h	/^    void LocalizeBoys<T>::start_iteration_hook(const TaskThreadEnv& env)$/;"	f	class:madness::LocalizeBoys
start_iteration_hook	src/apps/ii/testsystolic.cc	/^    void start_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:SystolicEigensolver
start_iteration_hook	src/apps/polar/distpm.cc	/^    void start_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:SystolicFixOrbitalOrders
start_iteration_hook	src/apps/polar/distpm.cc	/^    void start_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:SystolicPMOrbitalLocalize
start_iteration_hook	src/madness/tensor/systolic.h	/^        virtual void start_iteration_hook(const TaskThreadEnv& env) {}$/;"	f	class:madness::SystolicMatrixAlgorithm
start_iteration_hook	src/madness/tensor/test_systolic.cc	/^    void start_iteration_hook(const TaskThreadEnv& env) {$/;"	f	class:TestSystolicMatrixAlgorithm
start_prec	src/apps/chem/SCFProtocol.h	/^    double start_prec;      \/\/\/< starting precision, typically 1.e-4$/;"	m	class:madness::SCFProtocol
start_timer	src/apps/adrian/TDDFT.cc	/^static void start_timer(World &world) {$/;"	f	file:
start_timer	src/apps/adrian/TDHF.cc	/^static void start_timer(World& world)$/;"	f	file:
start_timer	src/apps/adrian/TDHF2.cc	/^static void start_timer(World& world)$/;"	f	file:
start_timer	src/apps/bryan/TDHF.cc	/^static void start_timer(World& world)$/;"	f	file:
start_timer	src/apps/bryan/TDHF2.cc	/^static void start_timer(World& world)$/;"	f	file:
start_timestamp	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TimeInMillis start_timestamp() const { return start_timestamp_; }$/;"	f	class:testing::internal::UnitTestImpl
start_timestamp	src/madness/external/gtest/src/gtest.cc	/^internal::TimeInMillis UnitTest::start_timestamp() const {$/;"	f	class:testing::UnitTest
start_timestamp_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  TimeInMillis start_timestamp_;$/;"	m	class:testing::internal::UnitTestImpl
start_wall	src/apps/chem/CCStructures.h	/^    double start_wall;$/;"	m	struct:madness::CCTimer
start_wall_time	src/madness/world/world.cc	/^        double start_wall_time; \/\/\/< \\todo Documentation needed.$/;"	m	namespace:madness::__anon11	file:
startup	src/madness/mra/startup.cc	/^    void startup(World& world, int argc, char** argv, bool doprint) {$/;"	f	namespace:madness
state	src/madness/world/test_world.cc	/^    int state;$/;"	m	class:TTT	file:
state_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  UInt32 state_;$/;"	m	class:testing::internal::Random
statement	src/madness/external/gtest/src/gtest-death-test.cc	/^  const char* statement() const { return statement_; }$/;"	f	class:testing::internal::DeathTestImpl
statement_	src/madness/external/gtest/src/gtest-death-test.cc	/^  const char* const statement_;$/;"	m	class:testing::internal::DeathTestImpl	file:
states	src/apps/adrian/ResponseParameters.h	/^      int states;                        \/\/\/< Number of excited states requested$/;"	m	struct:madness::ResponseParameters
states	src/apps/bryan/ResponseParameters.h	/^      int states;                        \/\/\/< Number of excited states requested$/;"	m	struct:madness::ResponseParameters
static_fn	src/madness/world/test_ar.cc	/^  static void static_fn(){}$/;"	f	struct:__anon8::Member
static_size	src/madness/world/vector.h	/^        static const size_type static_size = N;$/;"	m	class:madness::Vector
stats	src/apps/moldft/fci/crayio.c	/^  int stats;                 \/* boolean flag to collect statistics *\/$/;"	m	struct:w_file	file:
stats	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  MPI_Status  *stats;$/;"	m	struct:__anon26
stats	src/madness/world/dqueue.h	/^        DQStats stats;$/;"	m	class:madness::DQueue
stats	src/madness/world/worldmem.cc	/^static madness::WorldMemInfo stats = {0, 0, 0, 0, 0, 0, ULONG_MAX, false};$/;"	v	file:
stats	src/madness/world/worldrmi.cc	/^    RMIStats RMI::stats;$/;"	m	class:madness::RMI	file:
stats	src/madness/world/worldrmi.h	/^        static RMIStats stats;$/;"	m	class:madness::RMI
stats_base	src/madness/world/worldprofile.h	/^        RMIStats stats_base;         \/\/\/< Msg stats when I start executing$/;"	m	class:madness::WorldProfileObj
stats_start	src/madness/world/worldprofile.h	/^        RMIStats stats_start;        \/\/\/< Msg stats when I was at top of stack;$/;"	m	class:madness::WorldProfileObj
status	src/madness/external/gtest/src/gtest-death-test.cc	/^  int status() const { return status_; }$/;"	f	class:testing::internal::DeathTestImpl
status	src/madness/mra/testperiodic.cc	/^const char* status[2] = {"FAIL !!!!!","PASS"};$/;"	v
status	src/madness/world/worldrmi.h	/^            std::unique_ptr<SafeMPI::Status[]> status;$/;"	m	class:madness::RMI::RmiTask
status_	src/madness/external/gtest/src/gtest-death-test.cc	/^  int status_;$/;"	m	class:testing::internal::DeathTestImpl	file:
status_	src/madness/world/safempi.h	/^        MPI_Status status_;$/;"	m	class:SafeMPI::Status
std	src/apps/nick/mpreal.h	/^namespace std$/;"	n
std	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^namespace std {$/;"	n
std	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^namespace std {$/;"	n
std	src/madness/external/muParser/muParserFixes.h	/^namespace std$/;"	n
std	src/madness/mra/mraimpl.h	/^namespace std {$/;"	n
std	src/madness/tensor/tensor.h	/^namespace std {$/;"	n
std	src/madness/world/distributed_id.h	/^namespace std {$/;"	n
std	src/madness/world/worldhashmap.h	/^namespace std {$/;"	n
step	src/apps/nick/extract.py	/^    step  = float(time[0]) # time step number$/;"	v
step	src/examples/spectralprop.h	/^        uT step(double t, double Delta, const uT& u0, const expLT& expL, const NT& N, const double eps=1e-12, bool doprint=false) {$/;"	f	class:madness::SpectralPropagatorGaussLobatto
step	src/examples/spectralprop.h	/^        uT step(double t, double Delta, const uT& u0, const expLT& expL, const NT& N, const double eps=1e-12, bool doprint=false, bool recurinit=true) {$/;"	f	class:madness::SpectralPropagator
step	src/madness/tensor/slice.h	/^        long step;$/;"	m	class:madness::Slice
step_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
step_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator
step_restriction	src/apps/hf/solver.h	/^    void step_restriction(vecfuncT& owfs,$/;"	f	class:madness::Solver
stheta_fd	src/apps/hf/solver.h	/^  T stheta_fd(const T& x)$/;"	f	namespace:madness
stop	src/apps/chem/CCStructures.h	/^    CCTimer stop(){$/;"	f	struct:madness::CCTimer
stop	src/apps/chem/PNOStructures.h	/^	MyTimer stop(){$/;"	f	struct:madness::MyTimer
stop	src/apps/chem/PNOStructures.h	/^	size_t stop()const{ return stop_;}$/;"	f	struct:madness::ElectronPairIterator
stop	src/madness/world/thread.h	/^            void stop() {$/;"	f	class:madness::profiling::TaskEvent
stop_	src/apps/chem/PNOStructures.h	/^	const size_t stop_;$/;"	m	struct:madness::OrbitalIterator
stop_	src/apps/chem/PNOStructures.h	/^	const size_t stop_=0;  \/\/\/< stop value for i and j (usually number of occ orbitals or occ-nfreeze for frozen core)$/;"	m	struct:madness::ElectronPairIterator
storage_type	src/madness/external/muParser/muParserBytecode.h	/^    typedef std::vector<map_type> storage_type;$/;"	t	class:mu::ParserByteCode
store	src/madness/mra/derivative.h	/^            static void store(const Archive& ar, const DerivativeBase<T,NDIM>* const & ptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/mra/funcimpl.h	/^            static void store(const Archive& ar, FunctionImpl<T,NDIM>*const& ptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/mra/funcimpl.h	/^            static void store(const Archive& ar, const FunctionImpl<T,NDIM>*const& ptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/mra/funcimpl.h	/^            static void store(const Archive& ar, const std::shared_ptr<FunctionImpl<T,NDIM> >& ptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/mra/funcimpl.h	/^            static void store(const Archive& ar, const std::shared_ptr<const FunctionImpl<T,NDIM> >& ptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/mra/funcimpl.h	/^        void store(Archive& ar) {$/;"	f	class:madness::FunctionImpl
store	src/madness/mra/key.h	/^            static void store(const Archive& ar, const Key<NDIM>& t) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/mra/mra.h	/^        void store(Archive& ar) const {$/;"	f	class:madness::Function
store	src/madness/mra/operator.h	/^            static inline void store(const Archive& ar, const SeparatedConvolution<T,NDIM>*const& ptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/tensor/gentensor.h	/^		static void store(const Archive& s, const GenTensor<T>& t) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/tensor/gentensor.h	/^    static void store(const Archive& ar, const GenTensor<T>& t) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/tensor/lowranktensor.h	/^        static void store(const Archive& ar, const LowRankTensor<T>& t) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/tensor/tensor.h	/^            static void store(const Archive& s, const Tensor<T>& t) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/archive.h	/^            static inline void store(const Archive& ar, const T& t) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/archive.h	/^            static inline void store(const Archive& ar, const std::array<U, N>& v) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/archive.h	/^            static inline void store(const Archive& ar, const std::array<U, N>& v, std::enable_if_t<!is_serializable<Archive,U>::value>* = nullptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/archive.h	/^            static inline void store(const Archive& ar, const std::complex<T>& c) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/archive.h	/^            static inline void store(const Archive& ar, const std::vector<U, Alloc>& v) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/archive.h	/^            static inline void store(const Archive& ar, const std::vector<U, Alloc>& v, std::enable_if_t<!is_serializable<Archive,U>::value>* = nullptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/archive.h	/^            static inline void store(const Archive& ar, const std::vector<bool, Alloc>& v) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/archive.h	/^            static void store(const Archive& ar, const std::map<T,Q,Compare,Alloc>& t) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/archive.h	/^            static void store(const Archive& ar, const std::string& v) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/binary_fstream_archive.h	/^            store(const T* t, long n) const {$/;"	f	class:madness::archive::BinaryFstreamOutputArchive
store	src/madness/world/buffer_archive.h	/^            store(const T* t, long n) const {$/;"	f	class:madness::archive::BufferOutputArchive
store	src/madness/world/cereal_archive.h	/^  store(const T *t, long n) const {$/;"	f	class:madness::archive::CerealOutputArchive
store	src/madness/world/future.h	/^            static inline void store(const Archive& ar, const Future<T>& f) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/future.h	/^            static inline void store(const Archive& ar, const Future<void>& f)$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/future.h	/^            static inline void store(const Archive& ar, const std::vector<Future<T> >& v) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/mpi_archive.h	/^            store(const T* t, long n) const {$/;"	f	class:madness::archive::MPIOutputArchive
store	src/madness/world/mpi_archive.h	/^            store(const T* t, long n) const {$/;"	f	class:madness::archive::MPIRawOutputArchive
store	src/madness/world/test_ar.cc	/^            static inline void store(const Archive& ar, const C& c) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/test_ar.cc	/^            static void store(const Archive& ar, const linked_list& c) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/text_fstream_archive.cc	/^        void TextFstreamOutputArchive::store(const char* t, long \/*n*\/) const {$/;"	f	class:madness::archive::TextFstreamOutputArchive
store	src/madness/world/text_fstream_archive.h	/^            store(const T* t, long n) const {$/;"	f	class:madness::archive::TextFstreamOutputArchive
store	src/madness/world/text_fstream_archive.h	/^            void store(const unsigned char* t, long n) const {$/;"	f	class:madness::archive::TextFstreamOutputArchive
store	src/madness/world/vector_archive.h	/^            store(const T* t, long n) const {$/;"	f	class:madness::archive::VectorOutputArchive
store	src/madness/world/world.h	/^            static inline void store(const Archive& ar, World* const & wptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/world_object.h	/^            static inline void store(const BufferOutputArchive& ar, WorldObject<Derived>* const& ptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/world_object.h	/^            static inline void store(const BufferOutputArchive& ar, const WorldObject<Derived>* const& ptr) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/worlddc.h	/^            static void store(const ParallelOutputArchive& ar, const WorldContainer<keyT,valueT>& t) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/worldptr.h	/^            static inline void store(const Archive& ar, const detail::WorldPtr<T>& p) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store	src/madness/world/worldref.h	/^            static inline void store(const Archive& ar, const detail::RemoteCounter& c) {$/;"	f	struct:madness::archive::ArchiveStoreImpl
store_	src/madness/world/worldref.h	/^            void store_(const Archive& ar) const {$/;"	f	class:madness::detail::RemoteCounter
store_end_tag	src/madness/world/text_fstream_archive.h	/^            void store_end_tag() const {$/;"	f	class:madness::archive::TextFstreamOutputArchive
store_internal_	src/madness/world/worldptr.h	/^            inline void store_internal_(const Archive& ar) const {$/;"	f	class:madness::detail::WorldPtr
store_pair	src/apps/chem/mp2.h	/^        void store_pair(World& world) {$/;"	f	class:madness::ElectronPair
store_potential	src/apps/adrian/ResponseParameters.h	/^      bool store_potential;              \/\/\/< Store the potential instead of computing each iteration$/;"	m	struct:madness::ResponseParameters
store_potential	src/apps/adrian/ResponsePotential.h	/^      const bool store_potential;                                      \/\/ Flag for storing the potential (default = true)$/;"	m	class:madness::ResponsePotential
store_potential	src/apps/bryan/ResponseParameters.h	/^      bool store_potential;              \/\/\/< Store the potential instead of computing each iteration$/;"	m	struct:madness::ResponseParameters
store_potential	src/apps/bryan/ResponsePotential.h	/^      const bool store_potential;                                      \/\/ Flag for storing the potential (default = true)$/;"	m	class:madness::ResponsePotential
store_potential	src/apps/chem/TDHF.h	/^		bool store_potential() const {return get<bool>("store_potential");}$/;"	f	struct:madness::TDHF::Parameters
store_start_tag	src/madness/world/text_fstream_archive.h	/^            void store_start_tag() const {$/;"	f	class:madness::archive::TextFstreamOutputArchive
stored_potential	src/apps/adrian/TDDFT.h	/^  ResponseFunction stored_potential;  \/\/ The ground state potential, stored only$/;"	m	class:TDHF
stored_potential	src/apps/adrian/TDHF.h	/^      std::vector<std::vector<real_function_3d>> stored_potential;   \/\/ The ground state potential, stored only if store_potential$/;"	m	class:TDHF
stored_potential	src/apps/adrian/TDHF2.h	/^      ResponseFunction stored_potential;   \/\/ The ground state potential, stored only if store_potential$/;"	m	class:TDHF
stored_potential	src/apps/bryan/TDHF.h	/^      std::vector<std::vector<real_function_3d>> stored_potential;   \/\/ The ground state potential, stored only if store_potential$/;"	m	class:TDHF
stored_potential	src/apps/bryan/TDHF2.h	/^      ResponseFunction stored_potential;   \/\/ The ground state potential, stored only if store_potential$/;"	m	class:TDHF
stored_v_coul	src/apps/adrian/TDDFT.h	/^  real_function_3d stored_v_coul;  \/\/ Stored coulomb potential from ground state$/;"	m	class:TDHF
stored_v_coul	src/apps/adrian/TDHF2.h	/^      real_function_3d stored_v_coul; \/\/ Stored coulomb potential from ground state$/;"	m	class:TDHF
stored_v_coul	src/apps/bryan/TDHF2.h	/^      real_function_3d stored_v_coul; \/\/ Stored coulomb potential from ground state$/;"	m	class:TDHF
stored_v_nuc	src/apps/adrian/TDDFT.h	/^  real_function_3d stored_v_nuc;   \/\/ Stored nuclear potential from ground state$/;"	m	class:TDHF
stored_v_nuc	src/apps/adrian/TDHF2.h	/^      real_function_3d stored_v_nuc;  \/\/ Stored nuclear potential from ground state$/;"	m	class:TDHF
stored_v_nuc	src/apps/bryan/TDHF2.h	/^      real_function_3d stored_v_nuc;  \/\/ Stored nuclear potential from ground state$/;"	m	class:TDHF
str	src/apps/nick/extra.h	/^    std::string str;$/;"	m	struct:WF
str	src/examples/compiler/mra-driver.hh	/^    const std::string& str() const {$/;"	f	class:Exp
str	src/madness/external/tinyxml/tinystr.h	/^		char str[1];$/;"	m	struct:TiXmlString::Rep
str	src/madness/external/tinyxml/tinyxml.h	/^		const char*     str;$/;"	m	struct:TiXmlBase::Entity
strLength	src/madness/external/tinyxml/tinyxml.h	/^		unsigned int	strLength;$/;"	m	struct:TiXmlBase::Entity
stream_result_to_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::string stream_result_to_;$/;"	m	class:testing::internal::GTestFlagSaver
strfun_type1	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*strfun_type1)(const char_type*);$/;"	t	namespace:mu
strfun_type2	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*strfun_type2)(const char_type*, value_type);$/;"	t	namespace:mu
strfun_type3	src/madness/external/muParser/muParserDef.h	/^  typedef value_type (*strfun_type3)(const char_type*, value_type, value_type);$/;"	t	namespace:mu
stride	src/madness/tensor/basetensor.h	/^        long stride(int i) const {return _stride[i];}$/;"	f	class:madness::BaseTensor
stride0	src/madness/tensor/tensoriter.h	/^        long stride0[TENSOR_MAXDIM];$/;"	m	class:madness::TensorIterator
stride1	src/madness/tensor/tensoriter.h	/^        long stride1[TENSOR_MAXDIM];$/;"	m	class:madness::TensorIterator
stride2	src/madness/tensor/tensoriter.h	/^        long stride2[TENSOR_MAXDIM];$/;"	m	class:madness::TensorIterator
strides	src/madness/tensor/basetensor.h	/^        const long* strides() const {return _stride;}$/;"	f	class:madness::BaseTensor
string	src/apps/moldft/xmlguess.py	/^import sys, string$/;"	i
string	src/apps/nick/parse.py	/^import sys, string, re, array, os$/;"	i
string	src/apps/polar/xmlguess.py	/^import sys, string$/;"	i
string	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^  const std::string& string() const { return pathname_; }$/;"	f	class:testing::internal::FilePath
string	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef ::std::string string;$/;"	t	namespace:testing::internal
string	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef ::string string;$/;"	t	namespace:testing::internal
string_type	src/madness/external/muParser/muParserDef.h	/^  typedef MUP_STRING_TYPE string_type;$/;"	t	namespace:mu
stringbuf_type	src/madness/external/muParser/muParserBase.h	/^    typedef std::vector<string_type> stringbuf_type;$/;"	t	class:mu::ParserBase
stringify	src/madness/mra/funcplot.h	/^    static std::string stringify(T arg) {$/;"	f	namespace:madness
stringstream_type	src/madness/external/muParser/muParserDef.h	/^                                  std::allocator<char_type> > stringstream_type;$/;"	t	namespace:mu
strip_paren	src/examples/compiler/mra-driver.hh	/^    const Exp* strip_paren() const {$/;"	f	class:Exp
strlen	src/madness/external/muParser/muParserFixes.h	/^  inline size_t strlen(const char *szMsg)$/;"	f	namespace:std
strmap_type	src/madness/external/muParser/muParserDef.h	/^  typedef std::map<string_type, std::size_t> strmap_type;$/;"	t	namespace:mu
strncmp	src/madness/external/muParser/muParserFixes.h	/^  inline int strncmp(const char *a, const char *b, size_t len)$/;"	f	namespace:std
sub	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(T, R), NDIM>> sub($/;"	f	namespace:madness
sub	src/madness/mra/vmra1.h	/^      sub(World& world,$/;"	f	namespace:madness
submit	src/madness/world/taskfn.h	/^        } submit;$/;"	m	class:madness::TaskInterface	typeref:struct:madness::TaskInterface::Submit
submit	src/madness/world/thread.h	/^        void submit() {$/;"	f	class:madness::PoolTaskInterface
submit_time_	src/madness/world/thread.h	/^    	double submit_time_; \/\/\/< \\todo Description needed.$/;"	m	class:madness::PoolTaskInterface
subnormalize	src/apps/nick/mpreal.h	/^inline int mpreal::subnormalize (int t,mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
subprocess	src/madness/world/threadbind	/^import sys,os,subprocess$/;"	i
subscrtype	src/examples/compiler/mra-driver.hh	/^    static Type subscrtype(Type t) {$/;"	f	class:Exp
subsection	src/apps/chem/CCStructures.cc	/^  CCMessenger::subsection(const std::string& msg) const {$/;"	f	class:madness::CCMessenger
subspace	src/apps/moldft/testperiodic.cc	/^static Subspace* subspace;$/;"	v	file:
subspaceT	src/apps/chem/SCF.h	/^typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	namespace:madness
subspaceT	src/apps/hf/solver.h	/^    typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	class:madness::Solver
subspaceT	src/apps/hf/solver.h	/^    typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	class:madness::Subspace
subspaceT	src/apps/hf/solver.h	/^    typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	class:madness::SubspaceK
subspaceT	src/apps/moldft/subspace.h	/^    typedef std::vector<pairvecT> subspaceT;$/;"	t	class:Subspace
subspaceT	src/apps/polar/moldft.cc	/^typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	file:
subspaceT	src/examples/h2dft.cc	/^typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	file:
subspaceT	src/examples/hedft.cc	/^typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	file:
subspaceT	src/examples/hefxc.cc	/^typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	file:
subspaceT	src/examples/newsolver_lda.cc	/^typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	file:
subspaceT	src/madness/mra/testbc.cc	/^typedef std::vector<pairvecfuncT> subspaceT;$/;"	t	file:
substr_	src/madness/external/gtest/include/gtest/gtest-spi.h	/^  const string substr_;$/;"	m	class:testing::internal::SingleFailureChecker
success_	src/madness/external/gtest/include/gtest/gtest.h	/^  bool success_;$/;"	m	class:testing::AssertionResult
successful_test_case_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::successful_test_case_count() const {$/;"	f	class:testing::UnitTest
successful_test_case_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::successful_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
successful_test_count	src/madness/external/gtest/src/gtest.cc	/^int TestCase::successful_test_count() const {$/;"	f	class:testing::TestCase
successful_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::successful_test_count() const {$/;"	f	class:testing::UnitTest
successful_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::successful_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
sum	src/apps/nick/mpreal.cc	/^const mpreal sum (const mpreal tab[], unsigned long int n, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sum	src/madness/mra/lbdeux.h	/^        double sum() {$/;"	f	class:madness::LoadBalanceDeux
sum	src/madness/mra/lbdeux.h	/^        void sum(const treeT& tree, const keyT& child, double value) {$/;"	f	class:madness::LBNodeDeux
sum	src/madness/mra/testsuite.cc	/^inline T sum(L l, R r) {$/;"	f
sum	src/madness/mra/vmra.h	/^Function<T, NDIM> sum(World& world, const std::vector<Function<T, NDIM>>& f,$/;"	f	namespace:madness
sum	src/madness/tensor/tensor.h	/^        T sum() const {$/;"	f	class:madness::Tensor
sum	src/madness/world/test_hashthreaded.cc	/^    double& sum;$/;"	m	class:Worker	file:
sum	src/madness/world/world_task_queue.h	/^        static resultT sum(const resultT& left, const resultT& right, const opT& op) {$/;"	f	class:madness::WorldTaskQueue
sum	src/madness/world/worldgop.h	/^        inline void sum(T* buf, size_t nelem) {$/;"	f	class:madness::WorldGopInterface
sum	src/madness/world/worldgop.h	/^        void sum(T& a) {$/;"	f	class:madness::WorldGopInterface
sum	src/madness/world/worldprofile.h	/^        T value, max, min, sum;  \/\/ local value, parallel max, min, sum$/;"	m	struct:madness::ProfileStat
sum_down	src/madness/mra/mra.h	/^        void sum_down(bool fence = true) const {$/;"	f	class:madness::Function
sum_down	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::sum_down(bool fence) {$/;"	f	class:madness::FunctionImpl
sum_down_spawn	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::sum_down_spawn(const keyT& key, const coeffT& s) {$/;"	f	class:madness::FunctionImpl
summary	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  const char* summary() const { return summary_.c_str(); }$/;"	f	class:testing::TestPartResult
summary_	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  std::string summary_;  \/\/ The test failure summary.$/;"	m	class:testing::TestPartResult
sumsq	src/madness/tensor/tensor.h	/^        T sumsq() const {$/;"	f	class:madness::Tensor
supports_vectorized	src/apps/chem/gth_pseudopotential.h	/^    virtual bool supports_vectorized() const {return false;}$/;"	f	class:madness::ProjRLMFunctor
supports_vectorized	src/madness/mra/function_interface.h	/^	    virtual bool supports_vectorized() const {return false;}$/;"	f	class:madness::FunctionFunctorInterface
surface	src/madness/mra/sdf_domainmask.h	/^        double surface(double d) const {$/;"	f	class:madness::GaussianDomainMask
surface	src/madness/mra/sdf_domainmask.h	/^        double surface(double d) const {$/;"	f	class:madness::LLRVDomainMask
svd	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Chan.hpp	/^namespace svd {$/;"	n	namespace:elem
svd	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/GolubReinsch.hpp	/^namespace svd {$/;"	n	namespace:elem
svd	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Thresholded.hpp	/^namespace svd {$/;"	n	namespace:elem
svd	src/madness/external/elemental/include/elemental/lapack-like/decomp/SVD/Util.hpp	/^namespace svd {$/;"	n	namespace:elem
svd	src/madness/tensor/lapack.cc	/^    void svd(const Tensor<T>& a, Tensor<T>& U,$/;"	f	namespace:madness
svd	src/madness/tensor/lowranktensor.h	/^        std::shared_ptr<SVDTensor<T> > svd;$/;"	m	struct:madness::LowRankTensor::implT
svd_normf	src/madness/tensor/gentensor.h	/^		double svd_normf() const {return this->normf();}$/;"	f	class:madness::GenTensor
svd_normf	src/madness/tensor/lowranktensor.h	/^    float_scalar_type svd_normf() const {$/;"	f	class:madness::LowRankTensor
svd_normf	src/madness/tensor/srconf.h	/^        typename TensorTypeData<T>::float_scalar_type svd_normf() const {$/;"	f	class:madness::SRConf
svd_result	src/madness/tensor/lapack.cc	/^    void svd_result(Tensor<T>& a, Tensor<T>& U,$/;"	f	namespace:madness
svt	src/madness/external/elemental/include/elemental/convex/SVT/Cross.hpp	/^namespace svt {$/;"	n	namespace:elem
svt	src/madness/external/elemental/include/elemental/convex/SVT/Normal.hpp	/^namespace svt {$/;"	n	namespace:elem
svt	src/madness/external/elemental/include/elemental/convex/SVT/PivotedQR.hpp	/^namespace svt {$/;"	n	namespace:elem
svt	src/madness/external/elemental/include/elemental/convex/SVT/TSQR.hpp	/^namespace svt {$/;"	n	namespace:elem
swap	src/apps/chem/CCStructures.h	/^    void swap(Pairs<T>& other){$/;"	f	struct:madness::Pairs
swap	src/apps/nick/mpreal.h	/^	inline void swap(mpfr::mpreal& x, mpfr::mpreal& y) $/;"	f	namespace:std
swap	src/apps/nick/mpreal.h	/^inline void swap(mpreal& a, mpreal& b) $/;"	f	namespace:mpfr
swap	src/madness/external/tinyxml/tinystr.h	/^	void swap (TiXmlString& other)$/;"	f	class:TiXmlString
swap	src/madness/world/vector.h	/^        void swap(Vector<T, N>& other) { data_.swap(other.data_); }$/;"	f	class:madness::Vector
swap	src/madness/world/vector.h	/^    void swap(Vector<T,N>& l, Vector<T,N>& r) {$/;"	f	namespace:madness
swap	src/madness/world/worlddc.h	/^    void swap(WorldContainer<keyT, valueT, hashfunT>& dc0, WorldContainer<keyT, valueT, hashfunT>& dc1) {$/;"	f	namespace:madness
swap	src/madness/world/worldptr.h	/^            void swap(WorldPtr<U>& other) {$/;"	f	class:madness::detail::WorldPtr
swap	src/madness/world/worldptr.h	/^        void swap(WorldPtr<T>& l, WorldPtr<T>& r) {$/;"	f	namespace:madness::detail
swap	src/madness/world/worldref.h	/^            void swap(RemoteCounter& other) {$/;"	f	class:madness::detail::RemoteCounter
swap	src/madness/world/worldref.h	/^        inline void swap(RemoteCounter& l, RemoteCounter& r) { l.swap(r); }$/;"	f	namespace:madness::detail
swap	src/madness/world/worldref.h	/^        void swap(RemoteReference<U>& other) {$/;"	f	class:madness::RemoteReference
swap	src/madness/world/worldref.h	/^    void swap(RemoteReference<T>& l, RemoteReference<U>& r) {$/;"	f	namespace:madness
swap_ab	src/apps/chem/zcis.h	/^	bool swap_ab() const {return get<bool>("swap_ab");};$/;"	f	class:madness::Complex_CIS_Parameters
swap_particles	src/apps/chem/CCPotentials.h	/^    real_function_6d swap_particles(const real_function_6d &f)const{$/;"	f	class:madness::CCPotentials
swap_particles	src/apps/chem/CCPotentials.h	/^    std::vector<CCPairFunction> swap_particles(const std::vector<CCPairFunction> & f) const{$/;"	f	class:madness::CCPotentials
swap_particles	src/apps/chem/CCStructures.cc	/^  CCPairFunction CCPairFunction::swap_particles()const{$/;"	f	class:madness::CCPairFunction
swap_particles	src/apps/chem/mp2.cc	/^real_function_6d MP2::swap_particles(const real_function_6d& f) const {$/;"	f	class:madness::MP2
swap_particles_decomposed	src/apps/chem/CCStructures.cc	/^  CCPairFunction CCPairFunction::swap_particles_decomposed()const{$/;"	f	class:madness::CCPairFunction
swap_particles_op_decomposed	src/apps/chem/CCStructures.cc	/^  CCPairFunction CCPairFunction::swap_particles_op_decomposed()const{$/;"	f	class:madness::CCPairFunction
swap_particles_pure	src/apps/chem/CCStructures.cc	/^  CCPairFunction CCPairFunction::swap_particles_pure() const {$/;"	f	class:madness::CCPairFunction
swapaxes	src/apps/chem/molecule.cc	/^void Molecule::swapaxes(int ix, int iy)$/;"	f	class:madness::Molecule
swapaxes	src/apps/polar/molecule.cc	/^void Molecule::swapaxes(int ix, int iy) {$/;"	f	class:Molecule
swapdim	src/madness/tensor/tensor.h	/^        Tensor<T> swapdim(long idim, long jdim) {$/;"	f	class:madness::Tensor
swapdim	src/madness/tensor/tensor.h	/^        const Tensor<T> swapdim(long idim, long jdim) const {$/;"	f	class:madness::Tensor
swapdim_inplace	src/madness/tensor/basetensor.cc	/^    void BaseTensor::swapdim_inplace(long i, long j) {$/;"	f	class:madness::BaseTensor
swidth	src/apps/hf/electronicstructureparams.h	/^  double swidth;$/;"	m	struct:madness::ElectronicStructureParams
syev	src/madness/tensor/lapack.cc	/^    void syev(const Tensor<T>& A,$/;"	f	namespace:madness
sygv	src/madness/tensor/elem.h	/^    void sygv(const DistributedMatrix<T>& A, $/;"	f	namespace:madness
sygv	src/madness/tensor/lapack.cc	/^    void sygv(const Tensor<T>& A, const Tensor<T>& B, int itype,$/;"	f	namespace:madness
sygvp	src/madness/tensor/elem.h	/^    void sygvp(World& world,$/;"	f	namespace:madness
symbol	src/apps/adrian/ESInterface.h	/^  std::string symbol; \/\/\/< The atom's symbol.$/;"	m	struct:slymer::Atom
symbol	src/apps/bryan/ESInterface.h	/^  std::string symbol; \/\/\/< The atom's symbol.$/;"	m	struct:slymer::Atom
symbol	src/apps/chem/atomutil.h	/^    const char* const symbol;$/;"	m	struct:madness::AtomicData
symbol	src/apps/chem/pointgroupoperator.h	/^    std::string symbol() const {return symbol_;}$/;"	f	class:madness::pg_operator
symbol	src/apps/hf/mentity.h	/^    const char* const symbol;$/;"	m	struct:AtomicData
symbol	src/apps/moldft/mcpfit.cc	/^    std::string symbol;  \/\/\/< symbol of target atom$/;"	m	struct:CalculationParameters	file:
symbol	src/apps/moldft/nwtoxml.py	/^        symbol = line.split()[1].split("_")[0][1:]$/;"	v
symbol	src/apps/polar/atomutil.h	/^    const char* const symbol;$/;"	m	struct:AtomicData
symbol	src/apps/polar/mcpfit.cc	/^    std::string symbol;  \/\/\/< symbol of target atom$/;"	m	struct:CalculationParameters	file:
symbol	src/apps/polar/nwtoxml.py	/^        symbol = line.split()[1].split("_")[0][1:]$/;"	v
symbol_	src/apps/chem/pointgroupoperator.h	/^	std::string symbol_;$/;"	m	class:madness::pg_operator
symbol_lowercase	src/apps/chem/atomutil.h	/^    const char* const symbol_lowercase;$/;"	m	struct:madness::AtomicData
symbol_lowercase	src/apps/hf/mentity.h	/^    const char* const symbol_lowercase;$/;"	m	struct:AtomicData
symbol_lowercase	src/apps/polar/atomutil.h	/^    const char* const symbol_lowercase;$/;"	m	struct:AtomicData
symbol_to_atomic_number	src/apps/chem/atomutil.cc	/^unsigned int symbol_to_atomic_number(const std::string& symbol) {$/;"	f	namespace:madness
symbol_to_atomic_number	src/apps/hf/mentity.cc	/^unsigned int symbol_to_atomic_number(const std::string& symbol) {$/;"	f
symbol_to_atomic_number	src/apps/polar/atomutil.cc	/^unsigned int symbol_to_atomic_number(const std::string& symbol) {$/;"	f
symmetrize	src/apps/chem/TDHF.cc	/^void TDHF::symmetrize(std::vector<CC_vecfunction>& v) const {$/;"	f	class:madness::TDHF
symmetry	src/apps/adrian/TDHF.cc	/^std::vector<real_function_3d> TDHF::symmetry(World & world)$/;"	f	class:TDHF
symmetry	src/apps/bryan/TDHF.cc	/^std::vector<real_function_3d> TDHF::symmetry(World & world)$/;"	f	class:TDHF
symmetry_info	src/apps/chem/pcm.h	/^    Tensor<int> symmetry_info;$/;"	m	class:madness::PCM
symmetry_projector	src/apps/chem/TDHF.h	/^	projector_irrep symmetry_projector;$/;"	m	class:madness::TDHF
symmetry_projector	src/apps/chem/nemo.h	/^	projector_irrep symmetry_projector;$/;"	m	class:madness::Nemo
sympgrad4	src/examples/tdse1d.cc	/^complex_function_1d sympgrad4(World& world,$/;"	f
sympgrad6	src/examples/tdse1d.cc	/^complex_function_1d sympgrad6(World& world,$/;"	f
symstate	src/apps/moldft/fci/fci.F	/^     $     symstate,/;"	v	program:fci
symtab	src/examples/compiler/mra-driver.hh	/^    std::map<std::string, Exp::Type> symtab;   \/\/ maps symbols to types$/;"	m	class:mra_driver
symtoatn	src/apps/moldft/moldx.py	/^def symtoatn(sym):$/;"	f
symtoatn	src/apps/polar/moldx.py	/^def symtoatn(sym):$/;"	f
sys	src/apps/moldft/moldx.py	/^import math, sys$/;"	i
sys	src/apps/moldft/nwtoxml.py	/^import sys$/;"	i
sys	src/apps/moldft/parsemad.py	/^import sys$/;"	i
sys	src/apps/moldft/xmlguess.py	/^import sys, string$/;"	i
sys	src/apps/nick/extract.py	/^import sys, re, os, os.path$/;"	i
sys	src/apps/nick/parse.py	/^import sys, string, re, array, os$/;"	i
sys	src/apps/nick/spawnK.py	/^import sys, math$/;"	i
sys	src/apps/nick/spawnNLM.py	/^import sys$/;"	i
sys	src/apps/polar/moldx.py	/^import math, sys$/;"	i
sys	src/apps/polar/nwtoxml.py	/^import sys$/;"	i
sys	src/apps/polar/xmlguess.py	/^import sys, string$/;"	i
sys	src/madness/mra/tools/dump2.py	/^import sys$/;"	i
sys	src/madness/mra/tools/mathutil.py	/^    import sys$/;"	i
sys	src/madness/tensor/mtxmq_graveyard/new_mtxmq/main.py	/^import sys$/;"	i
sys	src/madness/tensor/mtxmq_graveyard/new_mtxmq/tests/testDocStrings.py	/^import sys$/;"	i
sys	src/madness/world/threadbind	/^import sys,os,subprocess$/;"	i
sz	src/madness/world/dqueue.h	/^        volatile size_t sz;              \/\/\/< Current capacity$/;"	m	class:madness::DQueue
t	src/apps/ii/systolic.h	/^        Tensor<T> t;                    \/\/< The data$/;"	m	class:madness::DistributedMatrix
t	src/apps/nick/wfSlice.cc	/^    int t;$/;"	m	struct:WF	file:
t	src/examples/compiler/mra-driver.hh	/^    Type t;              \/\/ Result type$/;"	m	class:Exp
t	src/examples/heat.cc	/^    double t;$/;"	m	class:uexact	file:
t	src/examples/heat2.cc	/^    double t;$/;"	m	class:uexact	file:
t	src/madness/mra/testsuite.cc	/^    const double t;$/;"	m	class:QMtest	file:
t	src/madness/tensor/distributed_matrix.h	/^        Tensor<T> t;            \/\/\/< The data$/;"	m	class:madness::DistributedMatrix
t	src/madness/tensor/elem.h	/^            T t;$/;"	m	struct:madness::detail::Value
t	src/madness/tensor/tensorexcept.h	/^        BaseTensor t;$/;"	m	class:madness::TensorException
t	src/madness/world/future.h	/^        volatile T t; \/\/\/< The future data.$/;"	m	class:madness::FutureImpl
t0	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^    Matrix<F> QR0, t0;$/;"	m	struct:elem::qr::TreeData
t0	src/madness/mra/test_mra6.cc	/^        Tensor<double> t0;$/;"	m	class:__anon12::BinaryGenTest	file:
t0	src/madness/mra/test_mra6.cc	/^        Tensor<double> t0;$/;"	m	class:__anon12::UnaryGenTest	file:
t0	src/madness/tensor/test_gentensor.cc	/^        Tensor<double> t0;$/;"	m	class:__anon43::BinaryGenTest	file:
t0	src/madness/tensor/test_gentensor.cc	/^        Tensor<double> t0;$/;"	m	class:__anon43::UnaryGenTest	file:
t1	src/apps/chem/gth_pseudopotential.h	/^    double t1;$/;"	m	class:madness::ProjRLMFunctor
t1	src/apps/polar/gth_pseudopotential.h	/^    double t1;$/;"	m	class:ProjFunctor
t1	src/apps/polar/gth_pseudopotential.h	/^    double t1;$/;"	m	class:ProjRLMFunctor
t1	src/madness/mra/test_mra6.cc	/^		Tensor<double> t1;$/;"	m	class:__anon12::BinaryGenTest	file:
t1	src/madness/tensor/test_gentensor.cc	/^		Tensor<double> t1;$/;"	m	class:__anon43::BinaryGenTest	file:
tFile	src/apps/nick/extract.py	/^tFile = open("tMAX.dat", 'w')$/;"	v
tList	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^    std::vector<Matrix<F>> tList;$/;"	m	struct:elem::qr::TreeData
tScale	src/apps/nick/extra.h	/^  double tScale;      \/\/ Scaling parameter for optimization$/;"	m	struct:InputParameters
tScale	src/apps/tdse/tdse.cc	/^  double tScale;      \/\/ Scaling parameter for optimization$/;"	m	struct:InputParameters	file:
tScale	src/apps/tdse/tdse.confused.cc	/^  double tScale;      \/\/ Scaling parameter for optimization$/;"	m	struct:InputParameters	file:
tScale	src/apps/tdse/tdse4.cc	/^  double tScale;      \/\/ Scaling parameter for optimization$/;"	m	struct:InputParameters	file:
t_ij	src/apps/chem/PNOStructures.h	/^	std::valarray<Tensor<double> > t_ij;			\/\/\/< the amplitudes for all Pairs$/;"	m	struct:madness::PNOPairs
t_solve	src/apps/chem/PNO.cpp	/^madness::PairEnergies PNO::t_solve(PNOPairs& pairs, const Tensor<double>& F_occ,$/;"	f	class:madness::PNO
t_term	src/madness/mra/operator.h	/^            bool t_term;$/;"	m	struct:madness::SeparatedConvolution::ApplyTerms
table_	src/apps/chem/pointgroupsymmetry.h	/^	charactertable table_;$/;"	m	class:madness::projector_irrep
tabsize	src/madness/external/tinyxml/tinyxml.h	/^	int tabsize;$/;"	m	class:TiXmlDocument
tabsize	src/madness/external/tinyxml/tinyxmlparser.cc	/^	int				tabsize;$/;"	m	class:TiXmlParsingData	file:
tabulate	src/examples/derivatives.cc	/^Tensor<double> tabulate(funcT& f, const std::vector<coord_3d>& pts) {$/;"	f
tag	src/apps/chem/nemo.h	/^	    void tag(const std::string msg) {$/;"	f	struct:madness::Nemo::timer
tag	src/apps/chem/znemo.h	/^	    void tag(const std::string msg) {$/;"	f	struct:madness::Znemo::timer
tag	src/apps/ii/systolic.h	/^        const int tag;                  \/\/< MPI tag to be used for messages$/;"	m	class:madness::SystolicMatrixAlgorithm
tag	src/madness/tensor/systolic.h	/^        const int tag;                  \/\/\/< MPI tag to be used for messages$/;"	m	class:madness::SystolicMatrixAlgorithm
tag	src/madness/world/mpi_archive.h	/^            int tag; \/\/\/< MPI communication tag.$/;"	m	class:madness::archive::MPIInputArchive
tag	src/madness/world/mpi_archive.h	/^            int tag; \/\/\/< MPI communication tag.$/;"	m	class:madness::archive::MPIOutputArchive
tag	src/madness/world/mpi_archive.h	/^            int tag; \/\/\/< MPI communication tag.$/;"	m	class:madness::archive::MPIRawInputArchive
tag	src/madness/world/mpi_archive.h	/^            int tag; \/\/\/< MPI communication tag.$/;"	m	class:madness::archive::MPIRawOutputArchive
tail_	src/madness/world/thread.h	/^            TaskEventListBase* tail_; \/\/\/< The tail of the linked list of data.$/;"	m	class:madness::profiling::TaskProfiler
takestep	src/madness/mra/tools/mathutil.py	/^def takestep(x0, s, alpha): $/;"	f
tan	src/apps/nick/mpreal.h	/^inline const mpreal tan(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
tanh	src/apps/nick/mpreal.h	/^inline const mpreal tanh (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
target	src/apps/chem/molecular_optimizer.h	/^    std::shared_ptr<MolecularOptimizationTargetInterface> target;$/;"	m	class:madness::MolecularOptimizer
target	src/apps/moldft/mcpfit.cc	/^    std::shared_ptr<OptimizationTargetInterface> target;$/;"	m	class:MySteepestDescent	file:
target	src/apps/polar/mcpfit.cc	/^    std::shared_ptr<OptimizationTargetInterface> target;$/;"	m	class:MySteepestDescent	file:
target	src/madness/mra/minmax/y.cc	/^FLOAT target(const FLOAT& x) {$/;"	f
target	src/madness/mra/minmax/y.cc	/^void target(const FLOAT& x, FLOAT& f, FLOAT& d1f, FLOAT& d2f) {$/;"	f
target	src/madness/mra/minmax/y1.cc	/^FLOAT target(const FLOAT& x) {$/;"	f
target	src/madness/mra/minmax/y1.cc	/^void target(const FLOAT& x, FLOAT& f, FLOAT& d1f, FLOAT& d2f) {$/;"	f
target	src/madness/mra/minmax/y_signed.cc	/^FLOAT target(const FLOAT& x) {$/;"	f
target	src/madness/mra/minmax/y_signed.cc	/^void target(const FLOAT& x, FLOAT& f, FLOAT& d1f, FLOAT& d2f) {$/;"	f
target	src/madness/mra/minmax/y_varx.cc	/^FLOAT target(const FLOAT& x) {$/;"	f
target	src/madness/mra/minmax/y_varx.cc	/^void target(const FLOAT& x, FLOAT& f, FLOAT& d1f, FLOAT& d2f) {$/;"	f
target	src/madness/tensor/kain.cc	/^    std::shared_ptr<OptimizationTargetInterface> target;$/;"	m	class:QuasiNewton	file:
target	src/madness/tensor/kain.cc	/^    std::shared_ptr<OptimizationTargetInterface> target;$/;"	m	class:SteepestDescent	file:
target	src/madness/tensor/solvers.h	/^        std::shared_ptr<OptimizationTargetInterface> target;$/;"	m	class:madness::QuasiNewton
target	src/madness/tensor/solvers.h	/^        std::shared_ptr<OptimizationTargetInterface> target;$/;"	m	class:madness::SteepestDescent
target_time	src/apps/nick/extra.h	/^  double target_time; \/\/ Target end-time for the simulation$/;"	m	struct:InputParameters
target_time	src/apps/nick/tdse1.cc	/^    double target_time;\/\/ Target end-time for the simulation$/;"	m	struct:InputParameters	file:
target_time	src/apps/tdse/tdse.cc	/^  double target_time; \/\/ Target end-time for the simulation$/;"	m	struct:InputParameters	file:
target_time	src/apps/tdse/tdse.confused.cc	/^  double target_time;\/\/ Target end-time for the simulation$/;"	m	struct:InputParameters	file:
target_time	src/apps/tdse/tdse4.cc	/^  double target_time;\/\/ Target end-time for the simulation$/;"	m	struct:InputParameters	file:
targs	src/madness/mra/funcimpl.h	/^            TensorArgs targs;$/;"	m	struct:madness::FunctionImpl::do_change_tensor_type
targs	src/madness/mra/funcimpl.h	/^            TensorArgs targs;$/;"	m	struct:madness::FunctionImpl::do_consolidate_buffer
targs	src/madness/mra/funcimpl.h	/^        TensorArgs targs; \/\/\/< type of tensor to be used in the FunctionNodes$/;"	m	class:madness::FunctionImpl
task	src/madness/world/world_object.h	/^        task(ProcessID dest, memfnT memfn, const TaskAttributes& attr = TaskAttributes()) const {$/;"	f	class:madness::WorldObject
task	src/madness/world/world_object.h	/^        task(ProcessID dest, memfnT memfn, const a1T& a1, const a2T& a2,$/;"	f	class:madness::WorldObject
task	src/madness/world/world_object.h	/^        task(ProcessID dest, memfnT memfn, const a1T& a1,$/;"	f	class:madness::WorldObject
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun,  const TaskAttributes& attr = TaskAttributes()) const {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const TaskAttributes& attr = TaskAttributes()) {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1,  const TaskAttributes& attr = TaskAttributes()) const {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const TaskAttributes& attr = TaskAttributes()) {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2,  const TaskAttributes& attr = TaskAttributes()) const {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const TaskAttributes& attr = TaskAttributes()) {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const TaskAttributes& attr = TaskAttributes()) const {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const TaskAttributes& attr = TaskAttributes()) {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const TaskAttributes& attr = TaskAttributes()) const {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const TaskAttributes& attr = TaskAttributes()) {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5, const TaskAttributes& attr = TaskAttributes()) const {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5, const TaskAttributes& attr = TaskAttributes()) {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5, const arg6T& arg6, const TaskAttributes& attr = TaskAttributes()) const {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5, const arg6T& arg6, const TaskAttributes& attr = TaskAttributes()) {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5, const arg6T& arg6, const arg7T& arg7, const TaskAttributes& attr = TaskAttributes()) const {$/;"	f	class:madness::WorldContainer
task	src/madness/world/worlddc.h	/^        task(const keyT& key, memfunT memfun, const arg1T& arg1, const arg2T& arg2, const arg3T& arg3, const arg4T& arg4, const arg5T& arg5, const arg6T& arg6, const arg7T& arg7, const TaskAttributes& attr = TaskAttributes()) {$/;"	f	class:madness::WorldContainer
task_arg	src/madness/world/taskfn.h	/^        struct task_arg {$/;"	s	namespace:madness::detail
task_arg	src/madness/world/taskfn.h	/^        struct task_arg<Future<T> > {$/;"	s	namespace:madness::detail
task_arg	src/madness/world/taskfn.h	/^        struct task_arg<Future<T>* > {$/;"	s	namespace:madness::detail
task_arg	src/madness/world/taskfn.h	/^        struct task_arg<Future<void> > {$/;"	s	namespace:madness::detail
task_arg	src/madness/world/taskfn.h	/^        struct task_arg<void> {$/;"	s	namespace:madness::detail
task_aux	src/madness/external/elemental/external/pmrrr/include/queue.h	/^struct task_aux {$/;"	s
task_event_	src/madness/world/thread.h	/^    	profiling::TaskEvent* task_event_; \/\/\/< \\todo Description needed.$/;"	m	class:madness::PoolTaskInterface
task_ptr	src/madness/world/worldrmi.cc	/^    RMI::RmiTask* RMI::task_ptr = nullptr;$/;"	m	class:madness::RMI	file:
task_ptr	src/madness/world/worldrmi.h	/^        static RmiTask* task_ptr;    \/\/ Pointer to the singleton instance$/;"	m	class:madness::RMI
task_result_type	src/madness/world/taskfn.h	/^        struct task_result_type {$/;"	s	namespace:madness::detail
task_t	src/madness/external/elemental/external/pmrrr/include/queue.h	/^typedef struct task_aux task_t;$/;"	t	typeref:struct:task_aux
taskattr_is_last_arg	src/madness/world/world_task_queue.h	/^    struct taskattr_is_last_arg : public std::integral_constant<bool, std::is_same<std::decay_t<typename meta::last_type<argsT...>::type>,$/;"	s	namespace:madness::meta
taskattr_is_last_arg	src/madness/world/world_task_queue.h	/^    struct taskattr_is_last_arg<> : public std::false_type {};$/;"	s	namespace:madness::meta
taskq	src/madness/world/world.h	/^        WorldTaskQueue& taskq; \/\/\/< Task queue.$/;"	m	class:madness::World
tbb_rmi_parent_task	src/madness/world/worldrmi.cc	/^    tbb::task* RMI::tbb_rmi_parent_task = nullptr;$/;"	m	class:madness::RMI	file:
tbb_rmi_parent_task	src/madness/world/worldrmi.h	/^        static tbb::task* tbb_rmi_parent_task;$/;"	m	class:madness::RMI
tbb_scheduler	src/madness/world/thread.cc	/^    tbb::task_scheduler_init* ThreadPool::tbb_scheduler = 0;$/;"	m	class:madness::ThreadPool	file:
tbb_scheduler	src/madness/world/thread.h	/^        static tbb::task_scheduler_init* tbb_scheduler; \/\/\/< \\todo Description needed.$/;"	m	class:madness::ThreadPool
tc	src/examples/tdse1d.cc	/^Tensor<double> B, tc;$/;"	v
tcrit	src/examples/tdse1d.cc	/^static double tcrit = 2*constants::pi\/(c*c);$/;"	v	file:
tcrit	src/examples/testspectralprop.cc	/^static double tcrit = 2*constants::pi\/(c*c);$/;"	v	file:
tda	src/apps/adrian/ResponseParameters.h	/^      bool tda;                          \/\/\/< Turn on Tam-Danchof approximation (only calculate excitations)$/;"	m	struct:madness::ResponseParameters
tda	src/apps/bryan/ResponseParameters.h	/^      bool tda;                          \/\/\/< Turn on Tam-Danchof approximation (only calculate excitations)$/;"	m	struct:madness::ResponseParameters
tdksprop	src/apps/chem/CalculationParameters.h	/^	bool tdksprop() const {return get<bool>("tdksprop");}$/;"	f	struct:madness::CalculationParameters
tdksprop	src/apps/polar/moldft.cc	/^    bool tdksprop;                     \/\/\/< time-dependent Kohn-Sham equation propagate$/;"	m	struct:CalculationParameters	file:
tear_down_tc_	src/madness/external/gtest/include/gtest/gtest.h	/^  Test::TearDownTestCaseFunc tear_down_tc_;$/;"	m	class:testing::TestCase
tensor2vec	src/apps/moldft/mcpfit.cc	/^static vector<double> tensor2vec (const tensorT & t) {$/;"	f	file:
tensor2vec	src/apps/polar/mcpfit.cc	/^static vector<double> tensor2vec (const tensorT & t) {$/;"	f	file:
tensorT	src/apps/chem/SCF.h	/^typedef Tensor<double> tensorT;$/;"	t	namespace:madness
tensorT	src/apps/chem/SCFOperators.h	/^    typedef Tensor<T> tensorT;$/;"	t	class:madness::DerivativeOperator
tensorT	src/apps/chem/SCFOperators.h	/^    typedef Tensor<T> tensorT;$/;"	t	class:madness::Kinetic
tensorT	src/apps/chem/SCFOperators.h	/^    typedef Tensor<T> tensorT;$/;"	t	class:madness::Laplacian
tensorT	src/apps/chem/distpm.cc	/^typedef Tensor<double> tensorT;$/;"	t	namespace:madness	file:
tensorT	src/apps/chem/gth_pseudopotential.h	/^typedef Tensor<double> tensorT;$/;"	t	namespace:madness
tensorT	src/apps/hf/solver.h	/^    typedef Tensor<valueT> tensorT;$/;"	t	class:madness::Solver
tensorT	src/apps/hf/solver.h	/^    typedef Tensor<valueT> tensorT;$/;"	t	class:madness::Subspace
tensorT	src/apps/hf/solver.h	/^    typedef Tensor<valueT> tensorT;$/;"	t	class:madness::SubspaceK
tensorT	src/apps/moldft/mcpfit.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/apps/polar/distpm.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/apps/polar/mcpfit.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/apps/polar/moldft.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/examples/h2dft.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/examples/heat.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/examples/hedft.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/examples/hefxc.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/examples/newsolver_lda.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/madness/mra/derivative.h	/^        typedef Tensor<T>               tensorT  ;	\/\/\/< regular tensors, like rm, etc$/;"	t	class:madness::DerivativeBase
tensorT	src/madness/mra/derivative.h	/^        typedef Tensor<T>               tensorT  ;$/;"	t	class:madness::Derivative
tensorT	src/madness/mra/funcimpl.h	/^    	typedef Tensor<T> tensorT;$/;"	t	class:madness::FunctionNode
tensorT	src/madness/mra/funcimpl.h	/^        typedef Tensor<T> tensorT; \/\/\/< Type of tensor for anything but to hold coeffs$/;"	t	class:madness::FunctionImpl
tensorT	src/madness/mra/function_common_data.h	/^        typedef Tensor<T> tensorT; \/\/\/< Type of tensor used to hold coeff$/;"	t	class:madness::FunctionCommonData
tensorT	src/madness/mra/testbc.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/madness/mra/testdiff1D.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/madness/mra/testdiff1Db.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/madness/mra/testdiff2D.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/madness/mra/testdiff3D.cc	/^typedef Tensor<double> tensorT;$/;"	t	file:
tensorT	src/madness/tensor/srconf.h	/^		typedef Tensor<T> tensorT;$/;"	t	class:madness::SRConf
tensor_abs	src/apps/hf/complexfun.h	/^Tensor<Q> tensor_abs(const Tensor< std::complex<Q> >& c)$/;"	f	namespace:madness
tensor_complex	src/madness/mra/functypedefs.h	/^    typedef Tensor<double_complex> tensor_complex;$/;"	t	namespace:madness
tensor_real	src/madness/mra/functypedefs.h	/^    typedef Tensor<double> tensor_real;$/;"	t	namespace:madness
tensor_real2complex	src/apps/hf/complexfun.h	/^Tensor< std::complex<Q> > tensor_real2complex(const Tensor<Q>& r)$/;"	f	namespace:madness
tensor_to_coord	src/apps/chem/GuessFactory.h	/^Vector<T,NDIM> tensor_to_coord(const Tensor<T>& t) {$/;"	f	namespace:madness::guessfactory
tensor_type	src/madness/tensor/gentensor.h	/^		TensorType tensor_type() const {return TT_FULL;}$/;"	f	class:madness::GenTensor
tensor_type	src/madness/tensor/lowranktensor.h	/^    TensorType tensor_type() const {return type;}$/;"	f	class:madness::LowRankTensor
tensor_type_names	src/madness/tensor/type_data.h	/^    const char *tensor_type_names[TENSOR_MAX_TYPE_ID+1] = {$/;"	m	namespace:madness
tensor_ximag	src/apps/hf/complexfun.h	/^Tensor<Q> tensor_ximag(const Tensor< std::complex<Q> >& c)$/;"	f	namespace:madness
tensor_xreal	src/apps/hf/complexfun.h	/^Tensor<Q> tensor_xreal(const Tensor< std::complex<Q> >& c)$/;"	f	namespace:madness
tensortype_	src/madness/tensor/srconf.h	/^		TensorType tensortype_;$/;"	m	class:madness::SRConf
ternary_iterator	src/madness/tensor/tensor.h	/^        TensorIterator<T,Q,R> ternary_iterator(const Tensor<Q>& q,$/;"	f	class:madness::Tensor
test	src/apps/chem/CCPotentials.cc	/^  void CCPotentials::test(){$/;"	f	class:madness::CCPotentials
test	src/apps/chem/CCStructures.h	/^    bool test=false;$/;"	m	struct:madness::CCParameters
test	src/apps/chem/GuessFactory.cc	/^void PolynomialFunctor::test() {$/;"	f	class:madness::guessfactory::PolynomialFunctor
test	src/apps/chem/mp2.cc	/^void MP2::test(const std::string filename) {$/;"	f	class:madness::MP2
test	src/apps/chem/znemo.cc	/^bool Znemo::test() const {$/;"	f	class:madness::Znemo
test	src/apps/moldft/pointgroup.h	/^    static bool test() {$/;"	f	class:PointGroup
test	src/apps/polar/pointgroup.h	/^    static bool test() {$/;"	f	class:PointGroup
test	src/examples/dataloadbal.cc	/^void test(World& world, bool doloadbal=false) {$/;"	f
test	src/examples/derivatives.cc	/^void test(World& world, int k, int initial_level, double thresh, int truncmode, bool refine) {$/;"	f
test	src/madness/misc/ran.cc	/^    void Random::test() {$/;"	f	class:madness::Random
test	src/madness/mra/indexit.h	/^        test() {$/;"	f	class:madness::IndexIterator
test	src/madness/mra/minmax/y.cc	/^void test() {$/;"	f
test	src/madness/mra/minmax/y1.cc	/^void test() {$/;"	f
test	src/madness/mra/minmax/y_signed.cc	/^void test() {$/;"	f
test	src/madness/mra/minmax/y_varx.cc	/^void test() {$/;"	f
test	src/madness/mra/qmprop.cc	/^        static void test() {$/;"	f	class:madness::BandlimitedPropagator
test	src/madness/mra/test6.cc	/^int test(World& world, const long& k, const double thresh) {$/;"	f
test	src/madness/tensor/testseprep.cc	/^void test(const long& k, const long& dim, const TensorArgs& targs) {$/;"	f
test	src/madness/world/test_world.cc	/^    Future<int> test(int state) {$/;"	f	class:TestFutureForwarding
test0	src/examples/testspectralprop.cc	/^void test0(World& world) {$/;"	f
test0	src/madness/world/test_dc.cc	/^void test0(World& world) {$/;"	f
test0	src/madness/world/test_world.cc	/^void test0(World& world) {$/;"	f
test0GaussLobatto	src/examples/testspectralprop.cc	/^void test0GaussLobatto(World& world) {$/;"	f
test1	src/examples/testspectralprop.cc	/^void test1(World& world) {$/;"	f
test1	src/madness/world/test_dc.cc	/^void test1(World& world) {$/;"	f
test10	src/madness/world/test_world.cc	/^void test10(World& world) {$/;"	f
test11	src/madness/world/test_world.cc	/^void test11(World& world) {$/;"	f
test12	src/madness/world/test_world.cc	/^void test12(World& world) {$/;"	f
test13	src/madness/world/test_world.cc	/^void test13(World& world) {$/;"	f
test2	src/examples/testspectralprop.cc	/^void test2(World& world) {$/;"	f
test5	src/madness/world/test_world.cc	/^void test5(World& world) {$/;"	f
test6	src/madness/world/test_world.cc	/^void test6(World& world) {$/;"	f
test6a	src/madness/world/test_world.cc	/^void test6a(World& world) {$/;"	f
test7	src/madness/world/test_world.cc	/^void test7(World& world) {$/;"	f
test8	src/madness/world/test_world.cc	/^void test8(World& world) {$/;"	f
test9	src/madness/world/test_world.cc	/^void test9(World& world) {$/;"	f
testGenTensor_algebra	src/madness/tensor/testseprep.cc	/^int testGenTensor_algebra(const long& k, const long& dim, const double& eps, const TensorType& tt) {$/;"	f
testGenTensor_assignment	src/madness/tensor/testseprep.cc	/^int testGenTensor_assignment(const long& k, const long& dim, const double& eps, const TensorType& tt) {$/;"	f
testGenTensor_convert	src/madness/tensor/testseprep.cc	/^int testGenTensor_convert(const long k, const long dim, const TensorArgs targs) {$/;"	f
testGenTensor_ctor	src/madness/tensor/testseprep.cc	/^int testGenTensor_ctor(const long& k, const long& dim, const double& eps, const TensorType& tt) {$/;"	f
testGenTensor_deepcopy	src/madness/tensor/testseprep.cc	/^int testGenTensor_deepcopy(const long& k, const long& dim, const double& eps, const TensorType& tt) {$/;"	f
testGenTensor_rankreduce	src/madness/tensor/testseprep.cc	/^int testGenTensor_rankreduce(const long& k, const long& dim, const double& eps, const TensorType& tt) {$/;"	f
testGenTensor_reconstruct	src/madness/tensor/testseprep.cc	/^int testGenTensor_reconstruct(const long& k, const long& dim, const double& eps, const TensorType& tt) {$/;"	f
testGenTensor_reduce	src/madness/tensor/testseprep.cc	/^int testGenTensor_reduce(const long& k, const long& dim, const double& eps, const TensorType& tt) {$/;"	f
testGenTensor_transform	src/madness/tensor/testseprep.cc	/^int testGenTensor_transform(const long& k, const long& dim, const double& eps, const TensorType& tt) {$/;"	f
testIntegral	src/apps/nick/projPsi.cc	/^void testIntegral(World& world, double L, const double Z, double k) {$/;"	f
testNavierStokes	src/examples/navstokes_cosines.cc	/^void testNavierStokes(int argc, char**argv) {$/;"	f
testPeriodicCoulomb3d	src/apps/hf/test_lattice.cc	/^void testPeriodicCoulomb3d(int argc, char**argv)$/;"	f
testTensorTrain	src/madness/tensor/testseprep.cc	/^int testTensorTrain(const long k, const long dim, const TensorArgs targs) {$/;"	f
test_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^    DeathTest* const test_;$/;"	m	class:testing::internal::DeathTest::ReturnSentinel
test_1d	src/examples/smooth.h	/^	void test_1d()const{$/;"	f	class:smooth
test_1d_functor	src/examples/smooth.h	/^static double test_1d_functor(const coord_1d &x){$/;"	f
test_G_R_vectors	src/apps/hf/ewald.cc	/^void test_G_R_vectors(int argc, char** argv)$/;"	f
test_TT_operator_application	src/madness/tensor/testseprep.cc	/^int test_TT_operator_application(const long k, const long dim, const TensorArgs targs) {$/;"	f
test_TT_truncate	src/madness/tensor/testseprep.cc	/^int test_TT_truncate(const long k, const long dim, const TensorArgs targs) {$/;"	f
test_U_el	src/examples/helium_exact.cc	/^void test_U_el(World& world, const real_function_6d& psi,$/;"	f
test_U_potentials	src/apps/chem/znemo.cc	/^bool Znemo::test_U_potentials() const {$/;"	f	class:madness::Znemo
test_XCOperator	src/apps/chem/test_SCFOperators.cc	/^int test_XCOperator(World& world) {$/;"	f
test_accessors	src/madness/world/test_hashthreaded.cc	/^void test_accessors() {$/;"	f
test_adaptive_tree	src/examples/helium_mp2.cc	/^void test_adaptive_tree(World& world, const bool restart, const std::string restartname) {$/;"	f
test_add	src/madness/mra/test6.cc	/^int test_add(World& world, const long& k, const double thresh) {$/;"	f
test_add	src/madness/mra/testvmra.cc	/^void test_add(World& world) {$/;"	f
test_apply_push_1d	src/madness/mra/testsuite.cc	/^int test_apply_push_1d(World& world) {$/;"	f
test_asymmetric	src/apps/chem/test_SCFOperators.cc	/^int test_asymmetric(World& world, const opT& op, double thresh) {$/;"	f
test_autoc	src/madness/mra/twoscale.cc	/^    bool test_autoc() {$/;"	f	namespace:madness
test_axis	src/madness/mra/testdiff1D.cc	/^static const int test_axis = 0;$/;"	v	file:
test_axis	src/madness/mra/testdiff1Db.cc	/^static const int test_axis = 0;$/;"	v	file:
test_axis	src/madness/mra/testdiff2D.cc	/^static int test_axis = 0;$/;"	v	file:
test_axis	src/madness/mra/testdiff3D.cc	/^static int test_axis = 0;$/;"	v	file:
test_base_name	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    const string test_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_basic	src/madness/mra/testsuite.cc	/^int test_basic(World& world) {$/;"	f
test_bsh	src/madness/mra/testbsh.cc	/^int test_bsh(World& world) {$/;"	f
test_capitalization	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_capitalization(World& world) {$/;"	f
test_case_base_name	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    const string test_case_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_indices_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::vector<int> test_case_indices_;$/;"	m	class:testing::internal::UnitTestImpl
test_case_infos_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  TestCaseInfoContainer test_case_infos_;$/;"	m	class:testing::internal::ParameterizedTestCaseRegistry
test_case_name	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* test_case_name() const { return test_case_name_.c_str(); }$/;"	f	class:testing::TestInfo
test_case_name_	src/madness/external/gtest/include/gtest/gtest.h	/^  const std::string test_case_name_;     \/\/ Test case name$/;"	m	class:testing::TestInfo
test_case_name_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  const string test_case_name_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
test_case_to_run_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::test_case_to_run_count() const {$/;"	f	class:testing::UnitTest
test_case_to_run_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::test_case_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
test_cases_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  std::vector<TestCase*> test_cases_;$/;"	m	class:testing::internal::UnitTestImpl
test_chin_chen	src/madness/mra/testqm.cc	/^void test_chin_chen(World& world) {$/;"	f
test_cholesky	src/madness/tensor/lapack.cc	/^    double test_cholesky(int n) {$/;"	f	namespace:madness
test_comm_status	src/madness/external/elemental/external/pmrrr/src/process_c_task.c	/^int test_comm_status(cluster_t *cl, val_t *Wstruct)$/;"	f	file:
test_comment_lines	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_comment_lines(World& world) {$/;"	f
test_compare_pairs	src/apps/chem/CCPotentials.cc	/^  bool CCPotentials::test_compare_pairs(const CCPair &pair1, const CCPair &pair2)const{$/;"	f	class:madness::CCPotentials
test_compress	src/examples/helium_mp2.cc	/^void test_compress(World& world) {$/;"	f
test_compute_current_density	src/apps/chem/znemo.cc	/^void Znemo::test_compute_current_density() const {$/;"	f	class:madness::Znemo
test_conv	src/madness/mra/testsuite.cc	/^int test_conv(World& world) {$/;"	f
test_convolution	src/madness/mra/test6.cc	/^int test_convolution(World& world, const long& k, const double thresh) {$/;"	f
test_copy	src/madness/tensor/test_elemental.cc	/^void test_copy(World& world, int n, int m) {$/;"	f
test_correlation_factor	src/apps/chem/test_correlation_factor.h	/^	test_correlation_factor(World &world, const real_function_3d &f, const double eps) : world(world), corrfac(world), f(f), eps(eps){$/;"	f	struct:test_correlation_factor
test_correlation_factor	src/apps/chem/test_correlation_factor.h	/^	test_correlation_factor(World &world,const CorrelationFactor & corrfactor, const real_function_3d &f, const double eps) : world(world), corrfac(corrfactor), f(f), eps(eps){$/;"	f	struct:test_correlation_factor
test_correlation_factor	src/apps/chem/test_correlation_factor.h	/^struct test_correlation_factor{$/;"	s
test_coulomb	src/apps/chem/test_SCFOperators.cc	/^int test_coulomb(World& world) {$/;"	f
test_coulomb	src/madness/mra/testsuite.cc	/^int test_coulomb(World& world) {$/;"	f
test_coverage	src/madness/world/test_hashthreaded.cc	/^void test_coverage() {$/;"	f
test_cross	src/madness/mra/testvmra.cc	/^void test_cross(World& world) {$/;"	f
test_cuda0	src/madness/world/test_world.cc	/^void test_cuda0(World& world) {$/;"	f
test_derived	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_derived(World& world) {$/;"	f
test_diff	src/madness/mra/testsuite.cc	/^int test_diff(World& world) {$/;"	f
test_distributed_eval	src/madness/tensor/test_elemental.cc	/^void test_distributed_eval(World& world, const int N) {$/;"	f
test_dnuclear	src/apps/chem/test_SCFOperators.cc	/^int test_dnuclear(World& world) {$/;"	f
test_empty_lines	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_empty_lines(World& world) {$/;"	f
test_exchange	src/apps/chem/test_SCFOperators.cc	/^int test_exchange(World& world) {$/;"	f
test_exchange	src/madness/mra/test6.cc	/^int test_exchange(World& world, const long& k, const double thresh) {$/;"	f
test_factor	src/apps/chem/diamagneticpotentialfactor.cc	/^bool Diamagnetic_potential_factor::test_factor() const {$/;"	f	class:madness::Diamagnetic_potential_factor
test_for_c2	src/apps/chem/molecule.cc	/^bool Molecule::test_for_c2(double xaxis, double yaxis, double zaxis) const$/;"	f	class:madness::Molecule
test_for_c2	src/apps/polar/molecule.cc	/^bool Molecule::test_for_c2(double xaxis, double yaxis, double zaxis) const {$/;"	f	class:Molecule
test_for_inverse	src/apps/chem/molecule.cc	/^bool Molecule::test_for_inverse() const$/;"	f	class:madness::Molecule
test_for_inverse	src/apps/polar/molecule.cc	/^bool Molecule::test_for_inverse() const {$/;"	f	class:Molecule
test_for_op	src/apps/chem/molecule.cc	/^bool Molecule::test_for_op(double xaxis, double yaxis, double zaxis, opT op) const$/;"	f	class:madness::Molecule
test_for_op	src/apps/polar/molecule.cc	/^bool Molecule::test_for_op(double xaxis, double yaxis, double zaxis, opT op) const {$/;"	f	class:Molecule
test_for_sigma	src/apps/chem/molecule.cc	/^bool Molecule::test_for_sigma(double xaxis, double yaxis, double zaxis) const$/;"	f	class:madness::Molecule
test_for_sigma	src/apps/polar/molecule.cc	/^bool Molecule::test_for_sigma(double xaxis, double yaxis, double zaxis) const {$/;"	f	class:Molecule
test_gaussian_num_coeffs	src/apps/hf/ewald.cc	/^void test_gaussian_num_coeffs(int argc, char** argv)$/;"	f
test_gconv	src/madness/mra/testgconv.cc	/^int test_gconv(World& world) {$/;"	f
test_gelss	src/madness/tensor/lapack.cc	/^    double test_gelss(int n, int nrhs) {$/;"	f	namespace:madness
test_gence	src/apps/hf/ewald.cc	/^void test_gence(int argc, char** argv)$/;"	f
test_gence2	src/apps/hf/ewald.cc	/^void test_gence2(int argc, char** argv)$/;"	f
test_gesv	src/madness/tensor/lapack.cc	/^    double test_gesv(int n, int nrhs) {$/;"	f	namespace:madness
test_gesvp	src/madness/tensor/test_elemental.cc	/^double test_gesvp(World& world, int n, int nrhs) {$/;"	f
test_gradient	src/madness/tensor/kain.cc	/^    double test_gradient(Tensor<double>& x, double value_precision, bool doprint=true) {$/;"	f	struct:OptimizationTargetInterface
test_gradient	src/madness/tensor/solvers.cc	/^    double OptimizationTargetInterface::test_gradient(Tensor<double>& x, double value_precision, bool doprint) {$/;"	f	class:madness::OptimizationTargetInterface
test_harmonic_potential	src/apps/chem/diamagneticpotentialfactor.cc	/^bool Diamagnetic_potential_factor::test_harmonic_potential() const {$/;"	f	class:madness::Diamagnetic_potential_factor
test_hartree_product	src/madness/mra/test6.cc	/^int test_hartree_product(World& world, const long& k, const double thresh) {$/;"	f
test_he	src/apps/hf/test_coulomb.cc	/^void test_he(int argc, char** argv)$/;"	f
test_he_potential	src/apps/hf/test_he.cc	/^void test_he_potential(World& world)$/;"	f
test_hermiticity	src/apps/chem/test_SCFOperators.cc	/^int test_hermiticity(World& world, const opT& op, double thresh) {$/;"	f
test_hf_be	src/apps/hf/test_be.cc	/^void test_hf_be(World& world)$/;"	f
test_hf_be	src/apps/hf/test_hf.cc	/^void test_hf_be(World& world)$/;"	f
test_hf_h2	src/apps/hf/test_hf.cc	/^void test_hf_h2(World& world)$/;"	f
test_hf_he	src/apps/hf/test_he.cc	/^void test_hf_he(World& world)$/;"	f
test_hf_he	src/apps/hf/test_hf.cc	/^void test_hf_he(World& world)$/;"	f
test_hydro	src/apps/hf/test_hydro.cc	/^void test_hydro(World& world)$/;"	f
test_in	src/madness/world/test_ar.cc	/^void test_in(const InputArchive& iar) {$/;"	f
test_indices_	src/madness/external/gtest/include/gtest/gtest.h	/^  std::vector<int> test_indices_;$/;"	m	class:testing::TestCase
test_info_list	src/madness/external/gtest/include/gtest/gtest.h	/^  const std::vector<TestInfo*>& test_info_list() const {$/;"	f	class:testing::TestCase
test_info_list	src/madness/external/gtest/include/gtest/gtest.h	/^  std::vector<TestInfo*>& test_info_list() { return test_info_list_; }$/;"	f	class:testing::TestCase
test_info_list_	src/madness/external/gtest/include/gtest/gtest.h	/^  std::vector<TestInfo*> test_info_list_;$/;"	m	class:testing::TestCase
test_inner	src/madness/mra/test6.cc	/^int test_inner(World& world, const long& k, const double thresh) {$/;"	f
test_inner	src/madness/mra/testvmra.cc	/^void test_inner(World& world) {$/;"	f
test_inverse	src/madness/tensor/lapack.cc	/^    double test_inverse(int n) {$/;"	f	namespace:madness
test_io	src/madness/mra/testsuite.cc	/^int test_io(World& world) {$/;"	f
test_kinetic	src/apps/chem/test_SCFOperators.cc	/^int test_kinetic(World& world) {$/;"	f
test_landau_wave_function	src/apps/chem/znemo.cc	/^void Znemo::test_landau_wave_function() {$/;"	f	class:madness::Znemo
test_lda	src/apps/chem/testlda.cc	/^void test_lda(World& world)$/;"	f
test_lz_commutator	src/apps/chem/diamagneticpotentialfactor.cc	/^bool Diamagnetic_potential_factor::test_lz_commutator() const {$/;"	f	class:madness::Diamagnetic_potential_factor
test_math	src/madness/mra/testsuite.cc	/^int test_math(World& world) {$/;"	f
test_me	src/apps/chem/diamagneticpotentialfactor.h	/^	bool test_me(const int level) const {$/;"	f	class:madness::Diamagnetic_potential_factor
test_meta_factory	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    const scoped_ptr<TestMetaFactoryBase<ParamType> > test_meta_factory;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_modified	src/examples/helium_mp2.cc	/^void test_modified(World& world) {$/;"	f
test_multi	src/madness/world/test_world.cc	/^void test_multi(World& world) {$/;"	f
test_multi_to_multi_op	src/madness/mra/testvmra.cc	/^void test_multi_to_multi_op(World& world) {$/;"	f
test_multi_world	src/madness/world/test_world.cc	/^void test_multi_world(World& world) {$/;"	f
test_multiop	src/madness/mra/testsuite.cc	/^struct test_multiop {$/;"	s	file:
test_multiply	src/madness/mra/test6.cc	/^int test_multiply(World& world, const long& k, const double thresh) {$/;"	f
test_nemo	src/apps/chem/test_SCFOperators.cc	/^int test_nemo(World& world) {$/;"	f
test_not_allowed	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_not_allowed(World& world) {$/;"	f
test_nuclear	src/apps/chem/test_SCFOperators.cc	/^int test_nuclear(World& world) {$/;"	f
test_nuclear_energy	src/apps/hf/ewald.cc	/^void test_nuclear_energy(int argc, char** argv)$/;"	f
test_nuclear_potential	src/apps/hf/ewald.cc	/^void test_nuclear_potential(int argc, char** argv)$/;"	f
test_nuclear_potential2	src/apps/hf/ewald.cc	/^void test_nuclear_potential2(int argc, char** argv)$/;"	f
test_nuclear_potential3	src/apps/hf/ewald.cc	/^void test_nuclear_potential3(int argc, char** argv)$/;"	f
test_nuclear_potential_big_unit_cell	src/apps/hf/ewald.cc	/^void test_nuclear_potential_big_unit_cell(int argc, char** argv)$/;"	f
test_oep	src/apps/chem/oep.cc	/^void OEP::test_oep(const vecfuncT& HF_nemo, const tensorT& HF_eigvals) {$/;"	f	class:madness::OEP
test_op	src/madness/mra/testsuite.cc	/^int test_op(World& world) {$/;"	f
test_opdir	src/madness/mra/testopdir.cc	/^int test_opdir(World& world) {$/;"	f
test_orthogonalization	src/apps/chem/test_pointgroupsymmetry.cc	/^int test_orthogonalization(World& world) {$/;"	f
test_out	src/madness/world/test_ar.cc	/^void test_out(const OutputArchive& oar) {$/;"	f
test_output	src/apps/chem/test_utilities.h	/^	test_output(std::string line) {$/;"	f	struct:madness::test_output
test_output	src/apps/chem/test_utilities.h	/^struct test_output {$/;"	s	namespace:madness
test_pair_consistency	src/apps/chem/CCPotentials.cc	/^  void CCPotentials::test_pair_consistency(const CCPairFunction &u,const size_t i, const size_t j, const CC_vecfunction &x)const{$/;"	f	class:madness::CCPotentials
test_pairs	src/apps/chem/CCPotentials.cc	/^  void CCPotentials::test_pairs(){$/;"	f	class:madness::CCPotentials
test_part_results	src/madness/external/gtest/include/gtest/gtest.h	/^  const std::vector<TestPartResult>& test_part_results() const {$/;"	f	class:testing::TestResult
test_part_results	src/madness/external/gtest/src/gtest-internal-inl.h	/^  static const std::vector<testing::TestPartResult>& test_part_results($/;"	f	class:testing::internal::TestResultAccessor
test_part_results_	src/madness/external/gtest/include/gtest/gtest.h	/^  std::vector<TestPartResult> test_part_results_;$/;"	m	class:testing::TestResult
test_per	src/madness/mra/testper.cc	/^int test_per(World& world) {$/;"	f
test_periodic	src/madness/mra/testperiodic.cc	/^void test_periodic(World& world) {$/;"	f
test_periodic1	src/madness/mra/testperiodic.cc	/^void test_periodic1(World& world) {$/;"	f
test_periodic2	src/madness/mra/testperiodic.cc	/^void test_periodic2(World& world) {$/;"	f
test_periodic_bsh	src/madness/mra/testperiodic.cc	/^int test_periodic_bsh(World& world)$/;"	f
test_periodicity	src/apps/hf/solver.h	/^    void test_periodicity(const Function<Q,3>& f)$/;"	f	class:madness::Solver
test_plot	src/madness/mra/testsuite.cc	/^int test_plot(World& world) {$/;"	f
test_proj	src/madness/mra/testproj.cc	/^int test_proj(World& world) {$/;"	f
test_projector	src/apps/chem/test_pointgroupsymmetry.cc	/^int test_projector(World& world) {$/;"	f
test_properites_mutex_	src/madness/external/gtest/include/gtest/gtest.h	/^  internal::Mutex test_properites_mutex_;$/;"	m	class:testing::TestResult
test_properties	src/madness/external/gtest/include/gtest/gtest.h	/^  const std::vector<TestProperty>& test_properties() const {$/;"	f	class:testing::TestResult
test_properties_	src/madness/external/gtest/include/gtest/gtest.h	/^  std::vector<TestProperty> test_properties_;$/;"	m	class:testing::TestResult
test_property_count	src/madness/external/gtest/src/gtest.cc	/^int TestResult::test_property_count() const {$/;"	f	class:testing::TestResult
test_qm	src/madness/mra/testsuite.cc	/^int test_qm(World& world) {$/;"	f
test_qr	src/madness/tensor/lapack.cc	/^    double test_qr() {$/;"	f	namespace:madness
test_random	src/madness/world/test_hashthreaded.cc	/^void test_random() {$/;"	f
test_read_restartaodata	src/apps/chem/test_MolecularOrbitals.cc	/^int test_read_restartaodata(World& world) {$/;"	f
test_read_restartdata	src/apps/chem/test_MolecularOrbitals.cc	/^int test_read_restartdata(World& world) {$/;"	f
test_recursive_application	src/examples/helium_mp2.cc	/^void test_recursive_application(World& world) {$/;"	f
test_rnlp	src/madness/mra/test_sepop.cc	/^    bool test_rnlp() {$/;"	f	namespace:madness
test_rot	src/madness/mra/testvmra.cc	/^void test_rot(World& world) {$/;"	f
test_rr_cholesky	src/madness/tensor/lapack.cc	/^    double test_rr_cholesky(int n) {$/;"	f	namespace:madness
test_same	src/apps/chem/test_QCCalculationParametersBase.cc	/^void test_same(const T& t1, const T& t2) {$/;"	f
test_scalar_potentials	src/apps/chem/diamagneticpotentialfactor.cc	/^bool Diamagnetic_potential_factor::test_scalar_potentials() const {$/;"	f	class:madness::Diamagnetic_potential_factor
test_serialize	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_serialize(World& world) {$/;"	f
test_singles_potential	src/apps/chem/CCPotentials.cc	/^  void CCPotentials::test_singles_potential()const{$/;"	f	class:madness::CCPotentials
test_slater_exchange	src/apps/chem/test_dft.cc	/^int test_slater_exchange(World& world) {$/;"	f
test_smooth_maxout	src/apps/chem/test_masks_and_boxes.cc	/^bool test_smooth_maxout(World& world) {$/;"	f
test_spherical_box	src/apps/chem/test_masks_and_boxes.cc	/^bool test_spherical_box(World& world) {$/;"	f
test_svd	src/madness/tensor/lapack.cc	/^    double test_svd(int n, int m) {$/;"	f	namespace:madness
test_syev	src/madness/tensor/lapack.cc	/^    double test_syev(int n) {$/;"	f	namespace:madness
test_syev1	src/apps/polar/diago.cc	/^    void test_syev1(int n) {$/;"	f	namespace:madness
test_sygv	src/madness/tensor/lapack.cc	/^    double test_sygv(int n) {$/;"	f	namespace:madness
test_sygvp	src/madness/tensor/test_elemental.cc	/^double test_sygvp(World& world, int n) {$/;"	f
test_tensor_lapack	src/madness/tensor/lapack.cc	/^    bool test_tensor_lapack() {$/;"	f	namespace:madness
test_thread	src/madness/world/test_hashthreaded.cc	/^void test_thread() {$/;"	f
test_time	src/madness/world/test_hashthreaded.cc	/^void test_time() {$/;"	f
test_to_run_count	src/madness/external/gtest/src/gtest.cc	/^int TestCase::test_to_run_count() const {$/;"	f	class:testing::TestCase
test_to_run_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }$/;"	f	class:testing::UnitTest
test_to_run_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::test_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
test_trailing_characters	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_trailing_characters(World& world) {$/;"	f
test_trotter	src/madness/mra/testqm.cc	/^void test_trotter(World& world) {$/;"	f
test_truncation	src/examples/helium_mp2.cc	/^void test_truncation(World& world) {$/;"	f
test_two_scale_coefficients	src/madness/mra/twoscale.cc	/^    bool test_two_scale_coefficients() {$/;"	f	namespace:madness
test_type_conversion1	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_type_conversion1(World& world) {$/;"	f
test_type_conversion2	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_type_conversion2(World& world) {$/;"	f
test_type_conversion3	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_type_conversion3(World& world) {$/;"	f
test_type_conversion4	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_type_conversion4(World& world) {$/;"	f
test_type_conversion5	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_type_conversion5(World& world) {$/;"	f
test_type_conversion6	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_type_conversion6(World& world) {$/;"	f
test_type_conversion7	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_type_conversion7(World& world) {$/;"	f
test_type_conversion8	src/apps/chem/test_QCCalculationParametersBase.cc	/^bool test_type_conversion8(World& world) {$/;"	f
test_unaryop	src/madness/mra/testunaryop.cc	/^void test_unaryop(World& world) {$/;"	f
test_vector_potentials	src/apps/chem/diamagneticpotentialfactor.cc	/^bool Diamagnetic_potential_factor::test_vector_potentials() const {$/;"	f	class:madness::Diamagnetic_potential_factor
test_wannier	src/apps/exciting/wannier.cc	/^void test_wannier(World& world)$/;"	f
test_wannier2	src/apps/exciting/wannier.cc	/^void test_wannier2(World& world)$/;"	f
test_xc	src/apps/hf/test_he.cc	/^void test_xc(World& world)$/;"	f
test_xc1	src/apps/hf/test_xc.cc	/^void test_xc1(World& world)$/;"	f
test_xc2	src/apps/hf/test_xc.cc	/^void test_xc2(World& world)$/;"	f
test_xcfunctional	src/apps/chem/plotxc.cc	/^void test_xcfunctional(World& world)$/;"	f
test_xcfunctional	src/apps/chem/testxc.cc	/^void test_xcfunctional(World& world)$/;"	f
test_xcfunctional	src/apps/polar/testxc.cc	/^void test_xcfunctional()$/;"	f
testbsh	src/apps/tdse/tdse4.cc	/^void testbsh(World& world) {$/;"	f
tester	src/madness/tensor/mtxmq_graveyard/new_mtxmq/main.py	/^def tester(m, versions):$/;"	f
tester_gen	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/driver.py	/^def tester_gen(f, mtxmspecs, mtxm_gen, complex_a=False, complex_b=False, bg=True):$/;"	f
tester_gen	src/madness/tensor/mtxmq_graveyard/new_mtxmq/main.py	/^from codegen.driver import tester_gen$/;"	i
tester_gen_bgq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/codegen/bgqdriver.py	/^def tester_gen_bgq(f, mtxmspecs, mtxm_gen, complex_a, complex_b):$/;"	f
tester_gen_bgq	src/madness/tensor/mtxmq_graveyard/new_mtxmq/main.py	/^from codegen.bgqdriver import tester_gen_bgq$/;"	i
testf	src/madness/mra/legendre.cc	/^    static double testf(int n, double x) {$/;"	f	namespace:madness
testfun_type	src/madness/external/muParser/muParserTest.h	/^        typedef int (ParserTester::*testfun_type)();$/;"	t	class:mu::Test::ParserTester
testgradG	src/madness/mra/testopdir.cc	/^int testgradG(World& world) {$/;"	f
testing	src/madness/external/gtest/include/gtest/gtest-death-test.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/gtest-message.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/gtest-param-test.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/gtest-printers.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/gtest-spi.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/gtest.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/internal/gtest-filepath.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/internal/gtest-string.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/src/gtest-death-test.cc	/^namespace testing {$/;"	n	file:
testing	src/madness/external/gtest/src/gtest-filepath.cc	/^namespace testing {$/;"	n	file:
testing	src/madness/external/gtest/src/gtest-internal-inl.h	/^namespace testing {$/;"	n
testing	src/madness/external/gtest/src/gtest-port.cc	/^namespace testing {$/;"	n	file:
testing	src/madness/external/gtest/src/gtest-printers.cc	/^namespace testing {$/;"	n	file:
testing	src/madness/external/gtest/src/gtest-test-part.cc	/^namespace testing {$/;"	n	file:
testing	src/madness/external/gtest/src/gtest-typed-test.cc	/^namespace testing {$/;"	n	file:
testing	src/madness/external/gtest/src/gtest.cc	/^namespace testing {$/;"	n	file:
testing_internal	src/madness/external/gtest/include/gtest/gtest-printers.h	/^namespace testing_internal {$/;"	n
testptr	src/examples/test_gmres.cc	/^typedef bool (*testptr)(void);$/;"	t	file:
tests_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  TestInfoContainer tests_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
testsome_backoff_us	src/madness/world/worldrmi.cc	/^  int RMI::testsome_backoff_us = 2;$/;"	m	class:madness::RMI	file:
testsome_backoff_us	src/madness/world/worldrmi.h	/^        static int testsome_backoff_us;$/;"	m	class:madness::RMI
tfilter	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^            tfilter = sorted(filter(lambda x: x[2] == test, pcfilter), key=lambda x: x[3])$/;"	v
th	src/madness/world/worldpapi.cc	/^    static volatile int th=0;$/;"	m	namespace:madness	file:
the_answer	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-constexpr.cxx	/^constexpr int the_answer()$/;"	f
thetamax	src/apps/chem/distpm.cc	/^    const double thetamax;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
thetamax	src/apps/ii/systolic.h	/^        const double thetamax, thresh;$/;"	m	class:madness::LocalizeBoys
thetamax	src/apps/polar/distpm.cc	/^    const double thetamax;$/;"	m	class:SystolicPMOrbitalLocalize	file:
thisDIR	src/apps/nick/extract.py	/^    thisDIR = os.getcwd()$/;"	v
thisKeyContains	src/madness/mra/key.h	/^        bool thisKeyContains(const Vector<double,NDIM>& x, const unsigned int& dim0,$/;"	f	class:madness::Key
this_axis	src/apps/chem/SCF.cc	/^void SCF::this_axis(World &world, int axis)$/;"	f	class:madness::SCF
this_thread	src/madness/world/thread.h	/^        static ThreadBase* this_thread() {$/;"	f	class:madness::ThreadBase
this_type	src/madness/mra/funcimpl.h	/^            typedef add_op this_type;$/;"	t	struct:madness::FunctionImpl::add_op
this_type	src/madness/mra/funcimpl.h	/^            typedef hartree_op<LDIM,leaf_opT> this_type;$/;"	t	struct:madness::FunctionImpl::hartree_op
this_type	src/madness/mra/funcimpl.h	/^            typedef multiply_op<LDIM> this_type;$/;"	t	struct:madness::FunctionImpl::multiply_op
this_type	src/madness/mra/funcimpl.h	/^            typedef project_out_op<LDIM> this_type;$/;"	t	struct:madness::FunctionImpl::project_out_op
this_type	src/madness/mra/funcimpl.h	/^            typedef recursive_apply_op2<opT> this_type;$/;"	t	struct:madness::FunctionImpl::recursive_apply_op2
this_type	src/madness/mra/funcimpl.h	/^            typedef recursive_apply_op<opT,LDIM> this_type;$/;"	t	struct:madness::FunctionImpl::recursive_apply_op
this_type	src/madness/mra/funcimpl.h	/^          typedef Vphi_op_NS<opT,LDIM> this_type;$/;"	t	struct:madness::FunctionImpl::Vphi_op_NS
thisatom	src/apps/chem/correlationfactor.h	/^        const Atom& thisatom;$/;"	m	class:madness::NuclearCorrelationFactor::RX_functor
thisatom	src/apps/chem/correlationfactor.h	/^        const Atom& thisatom;$/;"	m	class:madness::NuclearCorrelationFactor::U1X_functor
thisslice	src/madness/tensor/lowranktensor.h	/^    std::vector<Slice> thisslice;$/;"	m	class:madness::SliceLowRankTensor
thread_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  pthread_t thread_;  \/\/ The native thread object.$/;"	m	class:testing::internal::ThreadWithParam
thread_can_start_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  Notification* const thread_can_start_;$/;"	m	class:testing::internal::ThreadWithParam
thread_counters	src/madness/world/test_queue.cc	/^unsigned long* thread_counters = nullptr;$/;"	v
thread_index	src/madness/world/test_queue.cc	/^madness::AtomicInt thread_index;$/;"	v
thread_key	src/madness/world/test_queue.cc	/^pthread_key_t thread_key;$/;"	v
thread_key	src/madness/world/thread.cc	/^    pthread_key_t ThreadBase::thread_key;$/;"	m	class:madness::ThreadBase	file:
thread_key	src/madness/world/thread.h	/^        static pthread_key_t thread_key; \/\/\/< Thread id key.$/;"	m	class:madness::ThreadBase
thread_local	build/src/madness/config.h	135;"	d
thread_main	src/madness/world/thread.cc	/^    void ThreadPool::thread_main(ThreadPoolThread* const thread) {$/;"	f	class:madness::ThreadPool
thread_support	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int      thread_support;$/;"	m	struct:__anon24
threadcounter	src/madness/world/worldprofile.cc	/^    static AtomicInt threadcounter; \/\/ Used to assign unique ID to threads$/;"	m	namespace:madness	file:
threads	src/madness/world/thread.h	/^        ThreadPoolThread *threads; \/\/\/< Array of threads.$/;"	m	class:madness::ThreadPool
threads_	src/madness/world/thread.h	/^            unsigned short threads_; \/\/\/< Number of threads used by the task.$/;"	m	class:madness::profiling::TaskEvent
thresh	src/apps/adrian/ResponsePotential.h	/^      const double thresh;                                             \/\/ Truncation threshold for coulomb op.$/;"	m	class:madness::ResponsePotential
thresh	src/apps/bryan/ResponsePotential.h	/^      const double thresh;                                             \/\/ Truncation threshold for coulomb op.$/;"	m	class:madness::ResponsePotential
thresh	src/apps/chem/PNOParameters.h	/^	double thresh()const { return get<double >("thresh");}$/;"	f	class:madness::PNOParameters
thresh	src/apps/chem/SCFProtocol.h	/^    double thresh;          \/\/\/< numerical precision of representing functions$/;"	m	class:madness::SCFProtocol
thresh	src/apps/chem/TDHF.h	/^		double thresh() const {return get<double>("thresh");}$/;"	f	struct:madness::TDHF::Parameters
thresh	src/apps/chem/distpm.cc	/^    const double thresh;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
thresh	src/apps/chem/mp2.h	/^        	double thresh() const {return get<double>("thresh");}   	\/\/\/ convenience function$/;"	f	struct:madness::MP2::Parameters
thresh	src/apps/chem/zcis.h	/^	double thresh() const {return get<double>("thresh");};$/;"	f	class:madness::Complex_CIS_Parameters
thresh	src/apps/hf/eigsolver.h	/^  double thresh() {return _thresh;}$/;"	f	class:madness::EigSolverOp
thresh	src/apps/hf/electronicstructureparams.h	/^  double thresh;$/;"	m	struct:madness::ElectronicStructureParams
thresh	src/apps/hf/hartreefock.h	/^    double thresh() {return _thresh;}$/;"	f	class:madness::HartreeFock
thresh	src/apps/ii/systolic.h	/^        const double thetamax, thresh;$/;"	m	class:madness::LocalizeBoys
thresh	src/apps/interior_bc/test_problems.h	/^        double thresh;$/;"	m	class:EmbeddedDirichlet
thresh	src/apps/moldft/fci/fci.F	/^      double precision thresh,/;"	v	program:fci
thresh	src/apps/moldft/mcpfit.cc	/^    double thresh;  \/\/\/< truncation threshold$/;"	m	struct:CalculationParameters	file:
thresh	src/apps/moldft/testcosine.cc	/^static const double thresh = 1e-2;$/;"	v	file:
thresh	src/apps/moldft/testperiodic.cc	/^static const double thresh = 1e-6;$/;"	v	file:
thresh	src/apps/nick/extra.h	/^  double thresh;      \/\/ precision for truncating wave function$/;"	m	struct:InputParameters
thresh	src/apps/nick/tdse1.cc	/^    double thresh;      \/\/ precision for truncating wave function$/;"	m	struct:InputParameters	file:
thresh	src/apps/polar/distpm.cc	/^    const double thresh;$/;"	m	class:SystolicPMOrbitalLocalize	file:
thresh	src/apps/polar/mcpfit.cc	/^    double thresh;  \/\/\/< truncation threshold$/;"	m	struct:CalculationParameters	file:
thresh	src/apps/polar/preal.cc	/^static double thresh = 1e-6;$/;"	v	file:
thresh	src/apps/polar/testperiodic.cc	/^static const double thresh = 1e-4;$/;"	v	file:
thresh	src/apps/tdse/tdse.cc	/^  double thresh;      \/\/ precision for truncating wave function$/;"	m	struct:InputParameters	file:
thresh	src/apps/tdse/tdse.confused.cc	/^  double thresh;      \/\/ precision for truncating wave function$/;"	m	struct:InputParameters	file:
thresh	src/apps/tdse/tdse4.cc	/^  double thresh;      \/\/ precision for truncating wave function$/;"	m	struct:InputParameters	file:
thresh	src/examples/binaryop.cc	/^static const double thresh = 1e-6; \/\/ precision$/;"	v	file:
thresh	src/examples/csqrt.cc	/^static const double thresh = 1e-3; \/\/ precision$/;"	v	file:
thresh	src/examples/dielectric.cc	/^const double thresh = 1e-4; \/\/ truncation threshold$/;"	v
thresh	src/examples/dielectric_external_field.cc	/^const double thresh = 1e-4; \/\/ truncation threshold$/;"	v
thresh	src/examples/gygi_soltion.cc	/^const double thresh = 1e-6;$/;"	v
thresh	src/examples/h2.cc	/^static const double thresh = 1e-6; \/\/ precision$/;"	v	file:
thresh	src/examples/h2dft.cc	/^static const double thresh = 1e-5; \/\/ precision$/;"	v	file:
thresh	src/examples/h2dynamic.cc	/^static const double thresh = 1e-4; \/\/ precision$/;"	v	file:
thresh	src/examples/hatom_1d.cc	/^static const double thresh = 1e-4; \/\/ precision$/;"	v	file:
thresh	src/examples/he.cc	/^static const double thresh = 1e-4; \/\/ precision$/;"	v	file:
thresh	src/examples/heat.cc	/^static const double thresh = 1e-6; \/\/ precision$/;"	v	file:
thresh	src/examples/heat2.cc	/^static const double thresh = 1e-6; \/\/ precision$/;"	v	file:
thresh	src/examples/hedft.cc	/^static const double thresh = 1e-8; \/\/ precision$/;"	v	file:
thresh	src/examples/hefxc.cc	/^static const double thresh = 1e-6; \/\/ precision$/;"	v	file:
thresh	src/examples/hehf.cc	/^static const double thresh = 1e-6; \/\/ precision$/;"	v	file:
thresh	src/examples/newsolver.cc	/^static const double thresh = 1e-5; \/\/ precision$/;"	v	file:
thresh	src/examples/newsolver_lda.cc	/^static const double thresh = 1e-5; \/\/ precision$/;"	v	file:
thresh	src/examples/nonlinschro.cc	/^static const double thresh = 1e-8;      \/\/ precision$/;"	v	file:
thresh	src/examples/svpe.cc	/^    const double thresh;$/;"	m	class:SVPESolver	file:
thresh	src/examples/svpe.cc	/^const double thresh = 1e-6; \/\/ truncation threshold$/;"	v
thresh	src/examples/takeshi_response.cc	/^static const double thresh = 1e-5; \/\/precision$/;"	v	file:
thresh	src/examples/tdse1d.cc	/^static const double thresh = 1e-12; \/\/ precision$/;"	v	file:
thresh	src/examples/tdse_example.cc	/^static const double thresh = 1e-6; \/\/ precision$/;"	v	file:
thresh	src/examples/testspectralprop.cc	/^static const double thresh = 1e-8; \/\/ precision$/;"	v	file:
thresh	src/madness/mra/funcdefaults.h	/^        static double thresh;          \/\/\/< Truncation threshold$/;"	m	class:madness::FunctionDefaults
thresh	src/madness/mra/funcimpl.h	/^        double thresh; \/\/\/< Screening threshold$/;"	m	class:madness::FunctionImpl
thresh	src/madness/mra/function_factory.h	/^    TwoElectronFactory& thresh(double thresh) {$/;"	f	class:madness::TwoElectronFactory
thresh	src/madness/mra/function_factory.h	/^    virtual FunctionFactory& thresh(double thresh) {$/;"	f	class:madness::FunctionFactory
thresh	src/madness/mra/mra.h	/^        double thresh() const {$/;"	f	class:madness::Function
thresh	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> double FunctionDefaults<NDIM>::thresh;$/;"	m	class:madness::FunctionDefaults
thresh	src/madness/mra/testdiff1D.cc	/^static const double thresh = 1.e-7 ; \/\/ Precision$/;"	v	file:
thresh	src/madness/mra/testdiff1Db.cc	/^static const double thresh = 1.e-7 ; \/\/ Precision$/;"	v	file:
thresh	src/madness/mra/testdiff2D.cc	/^static const double thresh = 1.e-7 ; \/\/ Precision$/;"	v	file:
thresh	src/madness/mra/testdiff3D.cc	/^static const double thresh = 1.e-7 ; \/\/ Precision$/;"	v	file:
thresh	src/madness/mra/testgaxpyext.cc	/^static const double thresh = 1e-6; \/\/ precision$/;"	v	file:
thresh	src/madness/mra/testgconv.cc	/^static const double thresh = 1e-6;$/;"	v	file:
thresh	src/madness/mra/testinnerext.cc	/^static const double thresh = 1e-6; \/\/ precision$/;"	v	file:
thresh	src/madness/tensor/gentensor.h	/^		double thresh;$/;"	m	struct:madness::TensorArgs
thresh_	src/examples/smooth.h	/^    double thresh_;$/;"	m	struct:munging_operator
thresh_	src/examples/smooth.h	/^    double thresh_;$/;"	m	struct:slater_kernel
thresh_3D	src/apps/chem/CCStructures.h	/^    double thresh_3D=FunctionDefaults<3>::get_thresh();$/;"	m	struct:madness::CCParameters
thresh_6D	src/apps/chem/CCStructures.h	/^    double thresh_6D=FunctionDefaults<6>::get_thresh();$/;"	m	struct:madness::CCParameters
thresh_Ue	src/apps/chem/CCStructures.h	/^    double thresh_Ue=std::min(1.e-4,FunctionDefaults<3>::get_thresh());$/;"	m	struct:madness::CCParameters
thresh_bsh_3D	src/apps/chem/CCStructures.h	/^    double thresh_bsh_3D=std::min(1.e-4,FunctionDefaults<3>::get_thresh());$/;"	m	struct:madness::CCParameters
thresh_bsh_6D	src/apps/chem/CCStructures.h	/^    double thresh_bsh_6D=std::min(1.e-4,FunctionDefaults<3>::get_thresh());$/;"	m	struct:madness::CCParameters
thresh_f12	src/apps/chem/CCStructures.h	/^    double thresh_f12=std::min(1.e-4,FunctionDefaults<3>::get_thresh());$/;"	m	struct:madness::CCParameters
thresh_high	src/apps/chem/oep.h	/^	double thresh_high=1.e-5;$/;"	m	struct:madness::divide_add_interpolate
thresh_high	src/apps/chem/oep.h	/^	double thresh_high=1.e-5;$/;"	m	struct:madness::interpolate_to_longrange_op
thresh_low	src/apps/chem/oep.h	/^	double thresh_low=1.e-7;$/;"	m	struct:madness::divide_add_interpolate
thresh_low	src/apps/chem/oep.h	/^	double thresh_low=1.e-7;$/;"	m	struct:madness::interpolate_to_longrange_op
thresh_op	src/apps/chem/CCStructures.h	/^		  double thresh_op=FunctionDefaults<3>::get_thresh();$/;"	m	struct:madness::CCConvolutionOperator::Parameters
thresh_poisson	src/apps/chem/CCStructures.h	/^    double thresh_poisson=std::min(1.e-4,FunctionDefaults<3>::get_thresh());$/;"	m	struct:madness::CCParameters
threshold	src/apps/chem/oep.h	/^	double threshold;$/;"	m	struct:madness::dens_inv1
throw_on_failure_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  bool throw_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver
tid	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  int          tid;$/;"	m	struct:__anon31
tight_thresh_3D	src/apps/chem/CCStructures.h	/^    double tight_thresh_3D=FunctionDefaults<3>::get_thresh()*0.1;$/;"	m	struct:madness::CCParameters
tight_thresh_6D	src/apps/chem/CCStructures.h	/^    double tight_thresh_6D=FunctionDefaults<3>::get_thresh()*0.1;$/;"	m	struct:madness::CCParameters
tightgauss_3d	src/madness/mra/test6.cc	/^static double tightgauss_3d(const coord_3d& r) {$/;"	f	file:
tightness	src/apps/chem/diamagneticpotentialfactor.cc	/^	double tightness;	\/\/ alpha in the article$/;"	m	struct:madness::harmonic_potential_boxed	file:
tightness	src/apps/chem/diamagneticpotentialfactor.cc	/^	double tightness;$/;"	m	struct:madness::R_times_arg_div_R	file:
tightness	src/apps/chem/masks_and_boxes.h	/^	const double tightness=11.5;	\/\/ 99.9% accurate at 0.8 radius$/;"	m	struct:madness::spherical_box
tilem	src/apps/ii/systolic.h	/^        const int64_t tilem;            \/\/< Tile size for row$/;"	m	class:madness::DistributedMatrix
tilem	src/madness/tensor/distributed_matrix.h	/^        int64_t tilem;            \/\/\/< Tile size for row$/;"	m	class:madness::DistributedMatrixDistribution
tilen	src/apps/ii/systolic.h	/^        const int64_t tilen;            \/\/< Tile size for column$/;"	m	class:madness::DistributedMatrix
tilen	src/madness/tensor/distributed_matrix.h	/^        int64_t tilen;            \/\/\/< Tile size for column$/;"	m	class:madness::DistributedMatrixDistribution
time	src/apps/nick/extract.py	/^    time = line.split()$/;"	v
time	src/apps/nick/parse.py	/^time    = []$/;"	v
time	src/madness/tensor/srconf.h	/^		static double& time(int i) {return time_[i];}$/;"	f	class:madness::SRConf
timeFile	src/apps/nick/parse.py	/^timeFile   = open("time.dat",      'w')$/;"	v
time_	src/madness/tensor/srconf.h	/^	static double time_[30];$/;"	m	namespace:madness
time_cpu	src/apps/chem/CCStructures.h	/^    double time_cpu;$/;"	m	struct:madness::CCTimer
time_read	src/apps/moldft/fci/crayio.c	/^  double time_read;          \/* total wall time reading *\/$/;"	m	struct:w_file	file:
time_transform	src/madness/mra/startup.cc	/^  static void time_transform(World& world, int& mflopslo, int& mflopshi) {$/;"	f	namespace:madness
time_wall	src/apps/chem/CCStructures.h	/^    double time_wall;$/;"	m	struct:madness::CCTimer
time_write	src/apps/moldft/fci/crayio.c	/^  double time_write;         \/* total wall time writing *\/$/;"	m	struct:w_file	file:
timer	src/apps/chem/nemo.h	/^	    timer(World& world) : world(world) {$/;"	f	struct:madness::Nemo::timer
timer	src/apps/chem/nemo.h	/^	struct timer {$/;"	s	class:madness::Nemo
timer	src/apps/chem/znemo.h	/^	    timer(World& world, bool do_print=true) : world(world), do_print(do_print) {$/;"	f	struct:madness::Znemo::timer
timer	src/apps/chem/znemo.h	/^	struct timer {$/;"	s	class:madness::Znemo
timer	src/apps/polar/moldft.cc	/^        timer : Overlap 0.02s 0.02s timer : focka eigen sol 0.00s 0.00s$/;"	m	struct:Calculation	file:
timer	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_Zmtxmq.cc	/^void timer(const char* s, long ni, long nj, long nk, double_complex *a, double_complex *b, double_complex *c) {$/;"	f
timer	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_mtxmq.cc	/^void timer(const char* s, long ni, long nj, long nk, double *a, double *b, double *c) {$/;"	f
timer	src/madness/tensor/test_Zmtxmq.cc	/^void timer(const char* s, long ni, long nj, long nk, double_complex *a, double_complex *b, double_complex *c) {$/;"	f
timer	src/madness/tensor/test_mtxmq.cc	/^void timer(const char* s, long ni, long nj, long nk, double *a, double *b, double *c) {$/;"	f
timer_accumulate	src/madness/mra/funcimpl.h	/^        Timer timer_accumulate;$/;"	m	class:madness::FunctionImpl
timer_compress_svd	src/madness/mra/funcimpl.h	/^        Timer timer_compress_svd;$/;"	m	class:madness::FunctionImpl
timer_filter	src/madness/mra/funcimpl.h	/^        Timer timer_filter;$/;"	m	class:madness::FunctionImpl
timer_full	src/madness/mra/operator.h	/^        Timer timer_full;$/;"	m	class:madness::SeparatedConvolution
timer_low_accumulate	src/madness/mra/operator.h	/^        Timer timer_low_accumulate;$/;"	m	class:madness::SeparatedConvolution
timer_low_transf	src/madness/mra/operator.h	/^        Timer timer_low_transf;$/;"	m	class:madness::SeparatedConvolution
timer_lr_result	src/madness/mra/funcimpl.h	/^        Timer timer_lr_result;$/;"	m	class:madness::FunctionImpl
timer_target_driven	src/madness/mra/funcimpl.h	/^        Timer timer_target_driven;$/;"	m	class:madness::FunctionImpl
times3	src/madness/external/muParser/muParserTest.h	/^        static value_type times3(value_type v1) { return v1*3; }$/;"	f	class:mu::Test::ParserTester
times_	src/madness/world/thread.h	/^            double times_[3]; \/\/\/< Task trace times: { submit, start, stop }.$/;"	m	class:madness::profiling::TaskEvent
tmpvar	src/examples/compiler/mra-driver.hh	/^    std::string tmpvar() {$/;"	f	class:mra_driver
tmpvarcnt	src/examples/compiler/mra-driver.hh	/^    int tmpvarcnt;              \/\/ Counts temporary variables$/;"	m	class:mra_driver
tnorm	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::tnorm(const tensorT& t, double* lo, double* hi) const {$/;"	f	class:madness::FunctionImpl
toString	src/apps/nick/extra.cc	/^std::string toString( const T& a ) {$/;"	f
toString	src/apps/nick/test.cc	/^string toString(int& i) {$/;"	f
toString	src/apps/nick/wfSlice.cc	/^string toString(int& i) {$/;"	f
to_abs_fn_ptr	src/madness/world/archive.h	/^        T to_abs_fn_ptr(std::ptrdiff_t rel_fn_ptr) {$/;"	f	namespace:madness::archive
to_abs_memfn_ptr	src/madness/world/archive.h	/^        auto to_abs_memfn_ptr(std::array<std::ptrdiff_t, N> rel_fn_ptr) {$/;"	f	namespace:madness::archive
to_cptr	src/madness/tensor/cblas_types.h	/^    to_cptr(T* ptr) {$/;"	f	namespace:madness::cblas
to_cptr	src/madness/tensor/cblas_types.h	/^    to_cptr(const T* ptr) {$/;"	f	namespace:madness::cblas
to_cptr	src/madness/tensor/lapacke_types.h	/^    to_cptr(T* ptr) {$/;"	f	namespace:madness::lapacke
to_cptr	src/madness/tensor/lapacke_types.h	/^    to_cptr(const T* ptr) {$/;"	f	namespace:madness::lapacke
to_rel_fn_ptr	src/madness/world/archive.h	/^        std::ptrdiff_t to_rel_fn_ptr(const T& fn) {$/;"	f	namespace:madness::archive
to_rel_memfn_ptr	src/madness/world/archive.h	/^        auto to_rel_memfn_ptr(const T& fn) {$/;"	f	namespace:madness::archive
to_string	src/apps/chem/corepotential.cc	/^string CorePotential::to_string () const {$/;"	f	class:madness::CorePotential
to_string	src/apps/nick/mpreal.cc	/^std::string to_string(T t, std::ios_base & (*f)(std::ios_base&))$/;"	f	namespace:mpfr
to_string	src/apps/nick/mpreal.cc	/^string mpreal::to_string(size_t n, int b, mp_rnd_t mode) const$/;"	f	class:mpfr::mpreal
to_string	src/apps/polar/corepotential.cc	/^string CorePotential::to_string () const {$/;"	f	class:CorePotential
to_zptr	src/madness/tensor/cblas_types.h	/^    to_zptr(T* ptr) {$/;"	f	namespace:madness::cblas
to_zptr	src/madness/tensor/cblas_types.h	/^    to_zptr(const T* ptr) {$/;"	f	namespace:madness::cblas
to_zptr	src/madness/tensor/lapacke_types.h	/^    to_zptr(T* ptr) {$/;"	f	namespace:madness::lapacke
to_zptr	src/madness/tensor/lapacke_types.h	/^    to_zptr(const T* ptr) {$/;"	f	namespace:madness::lapacke
tofile	src/madness/mra/tools/twoscalecoeffs.py	/^def tofile(h0,h1,g0,g1):$/;"	f
token_reader_type	src/madness/external/muParser/muParserBase.h	/^    typedef ParserTokenReader token_reader_type;$/;"	t	class:mu::ParserBase
token_type	src/madness/external/muParser/muParserBase.h	/^    typedef ParserToken<value_type, string_type> token_type;$/;"	t	class:mu::ParserBase
token_type	src/madness/external/muParser/muParserBytecode.h	/^    typedef ParserToken<value_type, string_type> token_type;$/;"	t	class:mu::ParserByteCode
token_type	src/madness/external/muParser/muParserTokenReader.h	/^      typedef ParserToken<value_type, string_type> token_type;$/;"	t	class:mu::ParserTokenReader
tol	src/apps/chem/distpm.cc	/^    double tol;$/;"	m	class:madness::SystolicPMOrbitalLocalize	file:
tol	src/apps/chem/molecular_optimizer.h	/^	double tol() const {return get<double>("tol");}$/;"	f	class:madness::MolecularOptimizationParameters
tol	src/apps/ii/eigen_solver.cc	/^    T tol; \/\/\/ current threshold$/;"	m	class:SystolicEigensolver	file:
tol	src/apps/ii/systolic.h	/^        double tol; \/\/ current error$/;"	m	class:madness::LocalizeBoys
tol	src/apps/ii/testsystolic.cc	/^    T tol, maxd, maxdaij;$/;"	m	class:SystolicEigensolver	file:
tol	src/apps/moldft/mcpfit.cc	/^    const double tol;$/;"	m	class:MySteepestDescent	file:
tol	src/apps/polar/distpm.cc	/^    double tol;$/;"	m	class:SystolicPMOrbitalLocalize	file:
tol	src/apps/polar/mcpfit.cc	/^    const double tol;$/;"	m	class:MySteepestDescent	file:
tol	src/madness/external/elemental/include/elemental/lapack-like/decomp/Schur/SDC.hpp	/^    Real tol;$/;"	m	struct:elem::SdcCtrl
tol	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    Real tol;$/;"	m	struct:elem::HermitianSdcCtrl
tol	src/madness/external/elemental/include/elemental/lapack-like/funcs/Sign.hpp	/^    Real tol;$/;"	m	struct:elem::SignCtrl
tol	src/madness/external/elemental/include/elemental/lapack-like/funcs/SquareRoot.hpp	/^    Real tol;$/;"	m	struct:elem::SquareRootCtrl
tol	src/madness/external/elemental/include/elemental/lapack-like/props/Pseudospectrum/Util.hpp	/^    Real tol;$/;"	m	struct:elem::PseudospecCtrl
tol	src/madness/mra/funcimpl.h	/^            double tol, fac, cnorm;$/;"	m	struct:madness::FunctionImpl::do_op_args
tol	src/madness/tensor/kain.cc	/^    const double tol;$/;"	m	class:QuasiNewton	file:
tol	src/madness/tensor/kain.cc	/^    const double tol;$/;"	m	class:SteepestDescent	file:
tol	src/madness/tensor/solvers.h	/^        const double tol;$/;"	m	class:madness::QuasiNewton
tol	src/madness/tensor/solvers.h	/^        const double tol;$/;"	m	class:madness::SteepestDescent
tol_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} tol_t;$/;"	t	typeref:struct:__anon25
tolmin	src/apps/ii/eigen_solver.cc	/^    const T tolmin; \/\/\/threshld$/;"	m	class:SystolicEigensolver	file:
tolmin	src/apps/ii/testsystolic.cc	/^    static const T tolmin = (T)5.0e-16; \/\/\/threshld$/;"	m	class:SystolicEigensolver	file:
tolstruct	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  tol_t        *tolstruct;$/;"	m	struct:__anon31
top	src/madness/external/muParser/muParserStack.h	/^      TValueType& top() $/;"	f	class:mu::ParserStack
top	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^        top = sorted(avgs, key=lambda x: avgs[x])[-5:][::-1]$/;"	v
top	src/madness/world/stack.h	/^        const_reference top() const {$/;"	f	class:madness::Stack
top	src/madness/world/stack.h	/^        reference top() {$/;"	f	class:madness::Stack
tostring	src/apps/chem/QCCalculationParametersBase.h	/^	static std::string tostring(const T& arg) {$/;"	f	class:madness::QCCalculationParametersBase
tostring	src/apps/chem/QCCalculationParametersBase.h	/^	static std::string tostring(const bool& arg) {$/;"	f	class:madness::QCCalculationParametersBase
totalTime	src/apps/nick/extract.py	/^    totalTime = wTime + legacyTime$/;"	v
totalTime_	src/madness/external/elemental/include/elemental/core/Timer/decl.hpp	/^    double totalTime_=0, lastPartialTime_=0;$/;"	m	class:elem::Timer
total_cost	src/madness/mra/lbdeux.h	/^        volatile double total_cost;$/;"	m	class:madness::LBNodeDeux
total_count	src/madness/world/test_queue.cc	/^madness::AtomicInt total_count;$/;"	v
total_energy	src/apps/chem/PNOStructures.h	/^	double total_energy()const{return energy+energy_f12;}$/;"	f	struct:madness::PairEnergies
total_nuclear_charge	src/apps/chem/molecule.cc	/^double Molecule::total_nuclear_charge() const$/;"	f	class:madness::Molecule
total_nuclear_charge	src/apps/hf/mentity.cc	/^double MolecularEntity::total_nuclear_charge() const {$/;"	f	class:MolecularEntity
total_nuclear_charge	src/apps/polar/molecule.cc	/^double Molecule::total_nuclear_charge() const {$/;"	f	class:Molecule
total_part_count	src/madness/external/gtest/src/gtest.cc	/^int TestResult::total_part_count() const {$/;"	f	class:testing::TestResult
total_test_case_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::total_test_case_count() const {$/;"	f	class:testing::UnitTest
total_test_case_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::total_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
total_test_count	src/madness/external/gtest/src/gtest.cc	/^int TestCase::total_test_count() const {$/;"	f	class:testing::TestCase
total_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTest::total_test_count() const { return impl()->total_test_count(); }$/;"	f	class:testing::UnitTest
total_test_count	src/madness/external/gtest/src/gtest.cc	/^int UnitTestImpl::total_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
total_values	src/madness/world/worldpapi.cc	/^    static volatile long long total_values[NUMEVENTS] = {0};$/;"	m	namespace:madness	file:
tp	src/madness/tensor/tensorexcept.h	/^        const BaseTensor *tp;$/;"	m	class:madness::TensorException
tpDBL	src/madness/external/muParser/muParserDef.h	/^    tpDBL  = 1,     \/\/\/< Floating point variables$/;"	e	enum:mu::ETypeCode
tpSTR	src/madness/external/muParser/muParserDef.h	/^    tpSTR  = 0,     \/\/\/< String type (Function arguments and constants only, no string variables)$/;"	e	enum:mu::ETypeCode
tpVOID	src/madness/external/muParser/muParserDef.h	/^    tpVOID = 2      \/\/\/< Undefined type.$/;"	e	enum:mu::ETypeCode
tpno	src/apps/chem/PNOParameters.h	/^	double tpno()const { return get<double >("tpno");}$/;"	f	class:madness::PNOParameters
tpno_tight	src/apps/chem/PNOParameters.h	/^	double tpno_tight()const { return get<double >("tpno_tight");}$/;"	f	class:madness::PNOParameters
tq	src/madness/world/world_task_queue.h	/^            WorldTaskQueue* tq; \/\/\/< The task queue.$/;"	m	struct:madness::WorldTaskQueue::ProbeAllDone
tr1	src/madness.h	/^    namespace tr1 {$/;"	n	namespace:madness
tr1	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^namespace tr1 {$/;"	n	namespace:std
tr1	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^namespace tr1 {$/;"	n	namespace:std
trace	src/madness/mra/mra.h	/^        T trace() const {$/;"	f	class:madness::Function
trace	src/madness/tensor/tensor.h	/^        T trace(const Tensor<T>& t) const {$/;"	f	class:madness::Tensor
trace	src/madness/tensor/tensortrain.h	/^		trace(const TensorTrain<Q>& B) const {$/;"	f	class:madness::TensorTrain
trace	src/madness/world/worldmem.h	/^        bool trace;$/;"	m	class:madness::WorldMemInfo
trace_conj	src/madness/mra/funcimpl.h	/^        T trace_conj(const FunctionNode<T,NDIM>& rhs) const {$/;"	f	class:madness::FunctionNode
trace_conj	src/madness/tensor/lowranktensor.h	/^    TENSOR_RESULT_TYPE(T,Q) trace_conj(const LowRankTensor<Q>& rhs) const {$/;"	f	class:madness::LowRankTensor
trace_conj	src/madness/tensor/tensor.h	/^        TENSOR_RESULT_TYPE(T,Q) trace_conj(const Tensor<Q>& t) const {$/;"	f	class:madness::Tensor
trace_local	src/madness/mra/mra.h	/^        T trace_local() const {$/;"	f	class:madness::Function
trace_local	src/madness/mra/mraimpl.h	/^    T FunctionImpl<T,NDIM>::trace_local() const {$/;"	f	class:madness::FunctionImpl
trace_parsing	src/examples/compiler/mra-driver.hh	/^    bool trace_parsing;$/;"	m	class:mra_driver
trace_scanning	src/examples/compiler/mra-driver.hh	/^    bool trace_scanning;$/;"	m	class:mra_driver
trajectory	src/madness/mra/funcplot.h	/^    	trajectory() {}$/;"	f	struct:madness::trajectory
trajectory	src/madness/mra/funcplot.h	/^    	trajectory(double radius, coord_3d el2, long npt) : radius(radius), npt(npt), el2(el2), curve(this->circle_6d) {$/;"	f	struct:madness::trajectory
trajectory	src/madness/mra/funcplot.h	/^    	trajectory(double radius, long npt) : radius(radius), npt(npt), curve(this->circle2) {$/;"	f	struct:madness::trajectory
trajectory	src/madness/mra/funcplot.h	/^    struct trajectory {$/;"	s	namespace:madness
tranT	src/madness/mra/funcimpl.h	/^        typedef Vector<Translation,NDIM> tranT; \/\/\/< Type of array holding translation$/;"	t	class:madness::FunctionImpl
transform	src/apps/adrian/TDDFT.cc	/^ResponseFunction TDHF::transform(World &world, ResponseFunction &f,$/;"	f	class:TDHF
transform	src/apps/adrian/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::transform(World & world,$/;"	f	class:TDHF
transform	src/apps/adrian/TDHF2.cc	/^ResponseFunction TDHF::transform(World & world,$/;"	f	class:TDHF
transform	src/apps/bryan/TDHF.cc	/^std::vector<std::vector<real_function_3d>> TDHF::transform(World & world,$/;"	f	class:TDHF
transform	src/apps/bryan/TDHF2.cc	/^ResponseFunction TDHF::transform(World & world,$/;"	f	class:TDHF
transform	src/apps/chem/TDHF.cc	/^std::vector<CC_vecfunction> TDHF::transform(const std::vector<CC_vecfunction> &x,const madness::Tensor<double> U) const {$/;"	f	class:madness::TDHF
transform	src/apps/chem/TDHF.h	/^	std::vector<vector_real_function_3d> transform(const std::vector<vector_real_function_3d> &x,const madness::Tensor<double> U) const{$/;"	f	class:madness::TDHF
transform	src/apps/chem/zcis.h	/^	static std::vector<root> transform(World& world,$/;"	f	class:madness::Zcis
transform	src/apps/chem/znemo.h	/^		void transform(const Tensor<double_complex>& U) {$/;"	f	struct:madness::Znemo::potentials
transform	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(L, R), NDIM>> transform($/;"	f	namespace:madness
transform	src/madness/mra/vmra.h	/^std::vector<Function<TENSOR_RESULT_TYPE(T, R), NDIM>> transform($/;"	f	namespace:madness
transform	src/madness/mra/vmra1.h	/^      transform(World& world,$/;"	f	namespace:madness
transform	src/madness/tensor/lowranktensor.h	/^    LowRankTensor< TENSOR_RESULT_TYPE(T,Q) > transform(const Tensor<Q>& c) const {$/;"	f	class:madness::LowRankTensor
transform	src/madness/tensor/lowranktensor.h	/^LowRankTensor< TENSOR_RESULT_TYPE(T,Q) > transform(const LowRankTensor<Q>& t, const Tensor<T>& c) {$/;"	f	namespace:madness
transform	src/madness/tensor/srconf.h	/^		SRConf<T> transform(const Tensor<T>& c) const {$/;"	f	class:madness::SRConf
transform	src/madness/tensor/tensor.h	/^    Tensor<TENSOR_RESULT_TYPE(T,Q)> transform(const Tensor<T>& t, const Tensor<Q>& c) {$/;"	f	namespace:madness
transform	src/madness/tensor/tensortrain.h	/^    TensorTrain<TENSOR_RESULT_TYPE(T,Q)> transform(const TensorTrain<T>& t,$/;"	f	namespace:madness
transform3d	src/madness/tensor/transform3d.cc	/^Tensor<T> transform3d(const Tensor<T>& t, const Tensor<T>& c) {$/;"	f
transform3d	src/madness/tensor/transform3d.cc	/^Tensor<double_complex> transform3d(const Tensor<double_complex>& t, const Tensor<double>& c) {$/;"	f
transform3d_3c	src/madness/tensor/transform3d.cc	/^Tensor<T> transform3d_3c(const Tensor<T>& t,$/;"	f
transform_dir	src/madness/tensor/lowranktensor.h	/^    LowRankTensor<TENSOR_RESULT_TYPE(T,Q)> transform_dir(const Tensor<Q>& c, int axis) const {$/;"	f	class:madness::LowRankTensor
transform_dir	src/madness/tensor/lowranktensor.h	/^LowRankTensor<TENSOR_RESULT_TYPE(T,Q)> transform_dir(const LowRankTensor<Q>& t,$/;"	f	namespace:madness
transform_dir	src/madness/tensor/srconf.h	/^		SRConf<T> transform_dir(const Tensor<T>& c, const int& axis) const {$/;"	f	class:madness::SRConf
transform_dir	src/madness/tensor/tensor.h	/^    Tensor<TENSOR_RESULT_TYPE(T,Q)> transform_dir(const Tensor<T>& t, const Tensor<Q>& c, int axis) {$/;"	f	namespace:madness
transform_dir	src/madness/tensor/tensortrain.h	/^    TensorTrain<TENSOR_RESULT_TYPE(T,Q)> transform_dir(const TensorTrain<T>& t,$/;"	f	namespace:madness
transform_pairs	src/apps/chem/PNO.cpp	/^PNOPairs PNO::transform_pairs(PNOPairs& pairs, const std::valarray<Tensor<double> >& U_ij) const {$/;"	f	class:madness::PNO
transform_typelist	src/madness/tensor/tempspec.py	/^transform_typelist = [["double", "double"],$/;"	v
transition_density	src/apps/adrian/TDDFT.cc	/^std::vector<real_function_3d> TDHF::transition_density($/;"	f	class:TDHF
transition_density	src/apps/adrian/TDHF.cc	/^std::vector<real_function_3d> TDHF::transition_density(World& world)$/;"	f	class:TDHF
transition_density	src/apps/adrian/TDHF2.cc	/^std::vector<real_function_3d> TDHF::transition_density(World& world,$/;"	f	class:TDHF
transition_density	src/apps/bryan/TDHF.cc	/^std::vector<real_function_3d> TDHF::transition_density(World& world)$/;"	f	class:TDHF
transition_density	src/apps/bryan/TDHF2.cc	/^std::vector<real_function_3d> TDHF::transition_density(World& world,$/;"	f	class:TDHF
translate	src/apps/chem/molecule.cc	/^void Molecule::translate(const Tensor<double> &translation)$/;"	f	class:madness::Molecule
translation	src/madness/mra/key.h	/^        translation() const {$/;"	f	class:madness::Key
transpose	src/apps/adrian/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> transpose(std::vector<std::vector<real_function_3d>> f)$/;"	f
transpose	src/apps/adrian/TDHF_Basic_Operators2.h	/^ResponseFunction transpose(ResponseFunction& f) {$/;"	f
transpose	src/apps/bryan/TDHF_Basic_Operators.h	/^std::vector<std::vector<real_function_3d>> transpose(std::vector<std::vector<real_function_3d>> f)$/;"	f
transpose	src/apps/bryan/TDHF_Basic_Operators2.h	/^ResponseFunction transpose(ResponseFunction & f)$/;"	f
transpose	src/madness/mra/tools/mathutil.py	/^def transpose(x): $/;"	f
transpose	src/madness/tensor/tensor.h	/^    Tensor<T> transpose(const Tensor<T>& t) {$/;"	f	namespace:madness
trantimer	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_Zmtxmq.cc	/^void trantimer(const char* s, long ni, long nj, long nk, double_complex *a, double_complex *b, double_complex *c) {$/;"	f
trantimer	src/madness/tensor/mtxmq_graveyard/bgp_tuning/test_mtxmq.cc	/^void trantimer(const char* s, long ni, long nj, long nk, double *a, double *b, double *c) {$/;"	f
trantimer	src/madness/tensor/test_Zmtxmq.cc	/^void trantimer(const char* s, long ni, long nj, long nk, double_complex *a, double_complex *b, double_complex *c) {$/;"	f
trantimer	src/madness/tensor/test_mtxmq.cc	/^void trantimer(const char* s, long ni, long nj, long nk, double *a, double *b, double *c) {$/;"	f
trantol	src/apps/chem/nemo.h	/^    double trantol() const {$/;"	f	class:madness::Nemo
traverse_tree	src/madness/mra/funcimpl.h	/^        void traverse_tree(const coeff_opT& coeff_op, const apply_opT& apply_op, const keyT& key) const {$/;"	f	class:madness::FunctionImpl
tree	src/madness/mra/lbdeux.h	/^        treeT tree;$/;"	m	class:madness::LoadBalanceDeux
treeT	src/madness/mra/lbdeux.h	/^        typedef WorldContainer<keyT,nodeT> treeT;$/;"	t	class:madness::LBNodeDeux
treeT	src/madness/mra/lbdeux.h	/^        typedef WorldContainer<keyT,nodeT> treeT;$/;"	t	class:madness::LoadBalanceDeux
tree_map	src/madness/mra/mypmap.h	/^        std::shared_ptr< ProcMapImpl<D> > tree_map; \/\/ for map_type 2$/;"	m	class:madness::MyPmap
tree_size	src/madness/mra/mra.h	/^        std::size_t tree_size() const {$/;"	f	class:madness::Function
tree_size	src/madness/mra/mraimpl.h	/^    std::size_t FunctionImpl<T,NDIM>::tree_size() const {$/;"	f	class:madness::FunctionImpl
triang_inv	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular.hpp	/^namespace triang_inv {$/;"	n	namespace:elem
triang_inv	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/LVar3.hpp	/^namespace triang_inv {$/;"	n	namespace:elem
triang_inv	src/madness/external/elemental/include/elemental/lapack-like/funcs/Inverse/Triangular/UVar3.hpp	/^namespace triang_inv {$/;"	n	namespace:elem
trickle_down	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::trickle_down(bool fence) {$/;"	f	class:madness::FunctionImpl
trickle_down_op	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::trickle_down_op(const keyT& key, const coeffT& s) {$/;"	f	class:madness::FunctionImpl
tridiagCtrl	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    HermitianTridiagCtrl tridiagCtrl;$/;"	m	struct:elem::HermitianEigCtrl
tridx	src/apps/chem/PNOStructures.h	/^	size_t tridx(Int row, Int col) {$/;"	f	struct:madness::ElectronPairIterator
tridx	src/apps/chem/PNOTensors.h	/^size_t tridx(Int row, Int col) {$/;"	f	namespace:__anon48
trim_blanks	src/apps/chem/QCCalculationParametersBase.h	/^	static std::string trim_blanks(const std::string arg) {$/;"	f	class:madness::QCCalculationParametersBase
trim_quotes	src/apps/chem/QCCalculationParametersBase.h	/^	static std::string trim_quotes(const std::string arg) {$/;"	f	class:madness::QCCalculationParametersBase
triplet	src/apps/chem/TDHF.h	/^		bool triplet() const {return get<bool>("triplet");}$/;"	f	struct:madness::TDHF::Parameters
trmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLN.hpp	/^namespace trmm {$/;"	n	namespace:elem
trmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LLT.hpp	/^namespace trmm {$/;"	n	namespace:elem
trmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUN.hpp	/^namespace trmm {$/;"	n	namespace:elem
trmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/LUT.hpp	/^namespace trmm {$/;"	n	namespace:elem
trmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLN.hpp	/^namespace trmm {$/;"	n	namespace:elem
trmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RLT.hpp	/^namespace trmm {$/;"	n	namespace:elem
trmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUN.hpp	/^namespace trmm {$/;"	n	namespace:elem
trmm	src/madness/external/elemental/include/elemental/blas-like/level3/Trmm/RUT.hpp	/^namespace trmm {$/;"	n	namespace:elem
trotter	src/apps/nick/tdse1.cc	/^complex_functionT trotter(World& world,$/;"	f
trotter	src/apps/tdse/tdse.cc	/^complex_functionT trotter(World& world,$/;"	f
trotter	src/apps/tdse/tdse.confused.cc	/^complex_functionT trotter(World& world,$/;"	f
trotter	src/apps/tdse/tdse4.cc	/^complex_functionT trotter(World& world,$/;"	f
trotter	src/examples/tdse1d.cc	/^complex_function_1d trotter(World& world, const complex_function_1d& psi0, const double tstep, complex_operatorT* G0 = 0) {$/;"	f
trotter	src/madness/mra/testqm.cc	/^complex_function_1d trotter(const complex_function_1d& expV,$/;"	f
trr2k	src/madness/external/elemental/src/blas-like/Trr2k/Local.hpp	/^namespace trr2k {$/;"	n	namespace:elem
trrk	src/madness/external/elemental/src/blas-like/Trrk/Local.hpp	/^namespace trrk {$/;"	n	namespace:elem
trsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLN.hpp	/^namespace trsm {$/;"	n	namespace:elem
trsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LLT.hpp	/^namespace trsm {$/;"	n	namespace:elem
trsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUN.hpp	/^namespace trsm {$/;"	n	namespace:elem
trsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/LUT.hpp	/^namespace trsm {$/;"	n	namespace:elem
trsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RLN.hpp	/^namespace trsm {$/;"	n	namespace:elem
trsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RLT.hpp	/^namespace trsm {$/;"	n	namespace:elem
trsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RUN.hpp	/^namespace trsm {$/;"	n	namespace:elem
trsm	src/madness/external/elemental/include/elemental/blas-like/level3/Trsm/RUT.hpp	/^namespace trsm {$/;"	n	namespace:elem
true	src/madness/external/elemental/external/pmrrr/include/global.h	63;"	d
true	src/madness/external/elemental/external/pmrrr/include/global.h	82;"	d
true_if_n_gt_op	src/examples/helium_mp2.cc	/^    true_if_n_gt_op() : _l(100) {}$/;"	f	struct:true_if_n_gt_op
true_if_n_gt_op	src/examples/helium_mp2.cc	/^    true_if_n_gt_op(const int level) : _l(level) {}$/;"	f	struct:true_if_n_gt_op
true_if_n_gt_op	src/examples/helium_mp2.cc	/^struct true_if_n_gt_op {$/;"	s	file:
true_op	src/examples/he.cc	/^struct true_op {$/;"	s	file:
true_op	src/examples/helium_mp2.cc	/^struct true_op {$/;"	s	file:
true_op	src/madness/mra/funcimpl.h	/^    struct true_op {$/;"	s	namespace:madness
true_refine_test	src/madness/mra/funcimpl.h	/^        struct true_refine_test {$/;"	s	class:madness::FunctionImpl
true_type	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef bool_constant<true> true_type;$/;"	t	namespace:testing::internal
trunc	src/apps/nick/mpreal.h	/^inline const mpreal trunc(const mpreal& v)$/;"	f	namespace:mpfr
truncate	src/apps/adrian/TDHF_Basic_Operators.h	/^void truncate(World & world,$/;"	f
truncate	src/apps/adrian/TDHF_Basic_Operators2.h	/^void truncate(World& world, ResponseFunction& v, double tol = 0.0,$/;"	f
truncate	src/apps/bryan/TDHF_Basic_Operators.h	/^void truncate(World & world,$/;"	f
truncate	src/apps/bryan/TDHF_Basic_Operators2.h	/^void truncate(World & world,$/;"	f
truncate	src/madness/mra/mra.h	/^        Function<T,NDIM>& truncate(double tol = 0.0, bool fence = true) {$/;"	f	class:madness::Function
truncate	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::truncate(double tol, bool fence) {$/;"	f	class:madness::FunctionImpl
truncate	src/madness/mra/tools/longfloat.py	/^    def truncate(self):$/;"	m	class:longfloat
truncate	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> truncate(std::vector<Function<T, NDIM>> v,$/;"	f	namespace:madness
truncate	src/madness/mra/vmra.h	/^void truncate(World& world, std::vector<Function<T, NDIM>>& v, double tol = 0.0,$/;"	f	namespace:madness
truncate	src/madness/mra/vmra1.h	/^    void truncate(World& world,$/;"	f	namespace:madness
truncate	src/madness/tensor/tensortrain.h	/^		truncate(double eps) {$/;"	f	class:madness::TensorTrain
truncate	src/madness/tensor/tensortrain.h	/^        truncate(double eps) {$/;"	f	class:madness::TensorTrain
truncate_mode	src/apps/moldft/testcosine.cc	/^static const int truncate_mode = 0;$/;"	v	file:
truncate_mode	src/apps/moldft/testperiodic.cc	/^static const int truncate_mode = 0;$/;"	v	file:
truncate_mode	src/apps/polar/preal.cc	/^static const int truncate_mode = 0;$/;"	v	file:
truncate_mode	src/apps/polar/testperiodic.cc	/^static const int truncate_mode = 0;$/;"	v	file:
truncate_mode	src/madness/mra/funcdefaults.h	/^        static int truncate_mode;    \/\/\/< Truncation method$/;"	m	class:madness::FunctionDefaults
truncate_mode	src/madness/mra/funcimpl.h	/^        int truncate_mode; \/\/\/< 0=default=(|d|<thresh), 1=(|d|<thresh\/2^n), 1=(|d|<thresh\/4^n);$/;"	m	class:madness::FunctionImpl
truncate_mode	src/madness/mra/function_factory.h	/^    truncate_mode(int truncate_mode) {$/;"	f	class:madness::FunctionFactory
truncate_mode	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> int FunctionDefaults<NDIM>::truncate_mode;$/;"	m	class:madness::FunctionDefaults
truncate_on_project	src/madness/mra/funcdefaults.h	/^        static bool truncate_on_project; \/\/\/< If true initial projection inserts at n-1 not n$/;"	m	class:madness::FunctionDefaults
truncate_on_project	src/madness/mra/funcimpl.h	/^        bool truncate_on_project; \/\/\/< If true projection inserts at level n-1 not n$/;"	m	class:madness::FunctionImpl
truncate_on_project	src/madness/mra/function_factory.h	/^    truncate_on_project() {$/;"	f	class:madness::FunctionFactory
truncate_on_project	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> bool FunctionDefaults<NDIM>::truncate_on_project;$/;"	m	class:madness::FunctionDefaults
truncate_op	src/madness/mra/mraimpl.h	/^    bool FunctionImpl<T,NDIM>::truncate_op(const keyT& key, double tol, const std::vector< Future<bool> >& v) {$/;"	f	class:madness::FunctionImpl
truncate_pair_ranks	src/apps/chem/PNO.cpp	/^PNOPairs PNO::truncate_pair_ranks(PNOPairs& pairs) const {$/;"	f	class:madness::PNO
truncate_pairs	src/apps/chem/PNO.cpp	/^PNOPairs PNO::truncate_pairs(PNOPairs& pairs) const {$/;"	f	class:madness::PNO
truncate_periodic_expansion	src/madness/mra/gfit.h	/^	void truncate_periodic_expansion(Tensor<double>& c, Tensor<double>& e,$/;"	f	class:madness::GFit
truncate_reconstructed_op	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::coeffT FunctionImpl<T,NDIM>::truncate_reconstructed_op(const keyT& key, const std::vector< Future<coeffT > >& v, const double tol) {$/;"	f	class:madness::FunctionImpl
truncate_reconstructed_spawn	src/madness/mra/mraimpl.h	/^    Future<typename FunctionImpl<T,NDIM>::coeffT> FunctionImpl<T,NDIM>::truncate_reconstructed_spawn(const keyT& key, const double tol) {$/;"	f	class:madness::FunctionImpl
truncate_rf	src/apps/adrian/ResponseFunction2.h	/^  void truncate_rf() {$/;"	f	class:madness::ResponseFunction
truncate_rf	src/apps/bryan/ResponseFunction2.h	/^      void truncate_rf() {$/;"	f	class:madness::ResponseFunction
truncate_spawn	src/madness/mra/mraimpl.h	/^    Future<bool> FunctionImpl<T,NDIM>::truncate_spawn(const keyT& key, double tol) {$/;"	f	class:madness::FunctionImpl
truncate_tol	src/madness/mra/mraimpl.h	/^    double FunctionImpl<T,NDIM>::truncate_tol(double tol, const keyT& key) const {$/;"	f	class:madness::FunctionImpl
try_convert_read_lock_to_write_lock	src/madness/world/worldmutex.h	/^        bool try_convert_read_lock_to_write_lock() const {$/;"	f	class:madness::MutexReaderWriter
try_lock	src/madness/world/worldmutex.h	/^        bool try_lock() const {$/;"	f	class:madness::Mutex
try_lock	src/madness/world/worldmutex.h	/^        bool try_lock() const {$/;"	f	class:madness::MutexFair
try_lock	src/madness/world/worldmutex.h	/^        bool try_lock() const {$/;"	f	class:madness::RecursiveMutex
try_lock	src/madness/world/worldmutex.h	/^        bool try_lock() const {$/;"	f	class:madness::Spinlock
try_lock	src/madness/world/worldmutex.h	/^        bool try_lock(int lockmode) const {$/;"	f	class:madness::MutexReaderWriter
try_read_lock	src/madness/world/worldmutex.h	/^        bool try_read_lock() const {$/;"	f	class:madness::MutexReaderWriter
try_setting_user_defined_value	src/apps/chem/QCCalculationParametersBase.h	/^	bool try_setting_user_defined_value(const std::string& key, const std::string& val) {$/;"	f	class:madness::QCCalculationParametersBase
try_two_locks	src/madness/world/worldmutex.h	/^    inline bool try_two_locks(const Mutex& m1, const Mutex& m2) {$/;"	f	namespace:madness
try_write_lock	src/madness/world/worldmutex.h	/^        bool try_write_lock() const {$/;"	f	class:madness::MutexReaderWriter
ts	src/madness/external/elemental/include/elemental/lapack-like/factor/QR/TS.hpp	/^namespace ts {$/;"	n	namespace:elem::qr
tstep	src/examples/heat.cc	/^static const double tstep = 0.333;$/;"	v	file:
tstep	src/examples/heat2.cc	/^static const double tstep = 0.1;$/;"	v	file:
tt	src/apps/moldft/parsemad.py	/^            tt = "TBB"$/;"	v
tt	src/apps/moldft/parsemad.py	/^        tt = "Old"$/;"	v
tt	src/apps/moldft/parsemad.py	/^        tt = "TBB"$/;"	v
tt	src/apps/moldft/parsemad.py	/^    tt = "Old"$/;"	v
tt	src/madness/mra/funcdefaults.h	/^        static TensorType tt;			\/\/\/< structure of the tensor in FunctionNode$/;"	m	class:madness::FunctionDefaults
tt	src/madness/mra/mraimpl.h	/^    template <std::size_t NDIM> TensorType FunctionDefaults<NDIM>::tt;$/;"	m	class:madness::FunctionDefaults
tt	src/madness/mra/test_mra6.cc	/^        TensorType tt;$/;"	m	class:__anon12::BinaryGenTest	file:
tt	src/madness/mra/test_mra6.cc	/^        TensorType tt;$/;"	m	class:__anon12::UnaryGenTest	file:
tt	src/madness/tensor/gentensor.h	/^		TensorType tt;$/;"	m	struct:madness::TensorArgs
tt	src/madness/tensor/lowranktensor.h	/^        std::shared_ptr<TensorTrain<T> > tt;$/;"	m	struct:madness::LowRankTensor::implT
tt	src/madness/tensor/test_gentensor.cc	/^        TensorType tt;$/;"	m	class:__anon43::BinaryGenTest	file:
tt	src/madness/tensor/test_gentensor.cc	/^        TensorType tt;$/;"	m	class:__anon43::UnaryGenTest	file:
tt1	src/madness/tensor/lapack.cc	/^double tt1, ss1;$/;"	v
tt_identity	src/madness/tensor/tensortrain.h	/^    TensorTrain<T> tt_identity(const long ndim, const long k) {$/;"	f	namespace:madness
ttt	src/apps/adrian/TDDFT.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
ttt	src/apps/adrian/TDHF.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
ttt	src/apps/adrian/TDHF2.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
ttt	src/apps/bryan/TDHF.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
ttt	src/apps/bryan/TDHF2.cc	/^static std::vector<double> ttt, sss;$/;"	v	file:
ttt	src/apps/chem/SCF.cc	/^static std::vector<double> ttt, sss;$/;"	m	namespace:madness	file:
ttt	src/apps/chem/mp2.h	/^        mutable double ttt, sss;$/;"	m	class:madness::MP2
ttt	src/apps/chem/nemo.h	/^	    double ttt,sss;$/;"	m	struct:madness::Nemo::timer
ttt	src/apps/chem/nemo.h	/^	mutable double ttt, sss;$/;"	m	class:madness::Nemo
ttt	src/apps/chem/znemo.h	/^	    double ttt,sss;$/;"	m	struct:madness::Znemo::timer
ttt	src/apps/hf/solver.h	/^    double ttt, sss;$/;"	m	class:madness::Solver
ttt	src/apps/ii/eigen_solver.cc	/^double ttt, sss;$/;"	v
ttt	src/apps/moldft/mcpfit.cc	/^static double ttt, sss;$/;"	v	file:
ttt	src/apps/moldft/moldft.cc	/^    static double ttt, sss;$/;"	v	file:
ttt	src/apps/moldft/testperiodic.cc	/^static double ttt, sss;$/;"	v	file:
ttt	src/apps/polar/mcpfit.cc	/^static double ttt, sss;$/;"	v	file:
ttt	src/apps/polar/moldft.cc	/^static double ttt, sss;$/;"	v	file:
ttt	src/madness/mra/testgaxpyext.cc	/^double ttt, sss;$/;"	v
ttt	src/madness/mra/testinnerext.cc	/^double ttt, sss;$/;"	v
ttt	src/madness/mra/testsuite.cc	/^double ttt, sss;$/;"	v
ttt	src/madness/mra/testvmra.cc	/^double ttt, sss;$/;"	v
tttql2	src/apps/moldft/fci/rsg.f	/^      subroutine tttql2(/;"	s
tttqlrat	src/apps/moldft/fci/rsg.f	/^      subroutine tttqlrat(/;"	s
tttred1	src/apps/moldft/fci/rsg.f	/^      subroutine tttred1(/;"	s
tttred2	src/apps/moldft/fci/rsg.f	/^      subroutine tttred2(/;"	s
tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_(), f8_(),$/;"	f	class:std::tr1::tuple
tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  tuple() {}$/;"	f	class:std::tr1::tuple
tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  tuple(const tuple& \/* t *\/)  {}$/;"	f	class:std::tr1::tuple
tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_),$/;"	f	class:std::tr1::tuple
tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class tuple {$/;"	c	namespace:std::tr1
tuple	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^class tuple<> {$/;"	c	namespace:std::tr1
tuple_element	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_element {$/;"	s	namespace:std::tr1
tuple_int_double_complexfloat	src/madness/world/test_ar.cc	/^typedef std::tuple<int,double,std::complex<float>> tuple_int_double_complexfloat;$/;"	t	file:
tuple_serialize_helper	src/madness/world/archive.h	/^          struct tuple_serialize_helper {$/;"	s	namespace:madness::archive::__anon10
tuple_serialize_helper	src/madness/world/archive.h	/^          struct tuple_serialize_helper<0,Archive,Types...> {$/;"	s	namespace:madness::archive::__anon10
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_0_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_1_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_2_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_3_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_4_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_5_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_6_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_7_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_8_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct tuple_size<GTEST_9_TUPLE_(T) > {$/;"	s	namespace:std::tr1
two_mode_representation	src/madness/tensor/tensortrain.h	/^		void two_mode_representation(Tensor<T>& U, Tensor<T>& VT,$/;"	f	class:madness::TensorTrain
two_scale_coefficients	src/madness/mra/twoscale.cc	/^    bool two_scale_coefficients(int k,$/;"	f	namespace:madness
two_scale_hg	src/madness/mra/twoscale.cc	/^    bool two_scale_hg(int k, Tensor<double>* hg) {$/;"	f	namespace:madness
twoint	src/apps/chem/SCF.cc	/^Tensor<double> SCF::twoint(World &world, const vecfuncT &psi) const$/;"	f	class:madness::SCF
twoint	src/apps/polar/moldft.cc	/^    Tensor<double> twoint(World &world, const vecfuncT &psi)$/;"	f	struct:Calculation
twopdm	src/apps/moldft/fci/fci.F	/^      double precision twopdm(/;"	v	program:fci
twopi	src/apps/moldft/preal.cc	/^static const double twopi = 2.0*constants::pi;$/;"	v	file:
twopi	src/apps/moldft/testcosine.cc	/^static const double twopi = 2.0*constants::pi;$/;"	v	file:
twopi	src/apps/moldft/testperiodic.cc	/^static const double twopi = 2.0*constants::pi;$/;"	v	file:
twopi	src/apps/polar/preal.cc	/^static const double twopi = 2.0*constants::pi;$/;"	v	file:
twopi	src/apps/polar/testperiodic.cc	/^static const double twopi = 2.0*constants::pi;$/;"	v	file:
twoscale_cache_class	src/madness/mra/twoscale.cc	/^    static class twoscale_cache_class {$/;"	c	namespace:madness	file:
twoscale_filename	src/madness/mra/twoscale.cc	/^    static const char *twoscale_filename = "coeffs";  \/\/ Will be overridden by load_coeffs$/;"	m	namespace:madness	file:
twoscalecoeffs	src/madness/mra/tools/dump2.py	/^    from twoscalecoeffs import twoscalecoeffs$/;"	i
twoscalecoeffs	src/madness/mra/tools/twoscalecoeffs.py	/^def twoscalecoeffs(k,usecached=1):$/;"	f
tx	src/apps/hf/electronicstructureapp.h	/^  Vector<std::complex<double>,2*NTRANS+1> tx;$/;"	m	class:AtomicBasisFunctor
ty	src/apps/hf/electronicstructureapp.h	/^  Vector<std::complex<double>,2*NTRANS+1> ty;$/;"	m	class:AtomicBasisFunctor
type	src/apps/adrian/NWChem.cc	/^  char type; \/\/\/< Type of basis function.$/;"	m	struct:slymer::BasisShell	file:
type	src/apps/bryan/NWChem.cc	/^  char type; \/\/\/< Type of basis function.$/;"	m	struct:slymer::BasisShell	file:
type	src/apps/chem/CCStructures.h	/^    FuncType type;$/;"	m	struct:madness::CCFunction
type	src/apps/chem/CCStructures.h	/^    FuncType type;$/;"	m	struct:madness::CC_vecfunction
type	src/apps/chem/CCStructures.h	/^    OpType type()const {return operator_type;}$/;"	f	struct:madness::CCConvolutionOperator
type	src/apps/chem/CCStructures.h	/^    const CCState type;$/;"	m	class:madness::CCPair
type	src/apps/chem/CCStructures.h	/^    const PairFormat type;$/;"	m	struct:madness::CCPairFunction
type	src/apps/chem/PNOParameters.h	/^inline std::string type(const EnergyType& n){ return "EnergyType";}$/;"	f	namespace:madness
type	src/apps/chem/PNOParameters.h	/^inline std::string type(const GuessType& n){ return "GuessType";}$/;"	f	namespace:madness
type	src/apps/chem/PNOParameters.h	/^inline std::string type(const PairType& n){ return "PairType";}$/;"	f	namespace:madness
type	src/apps/chem/PNOStructures.h	/^	const PairType type;							\/\/\/< type (i.e. MP2_PAIRTYPE, CISPD_PAIRTYPE, later CCSD etc$/;"	m	struct:madness::PNOPairs
type	src/apps/chem/PNOStructures.h	/^	const std::string type;$/;"	m	class:madness::ParametrizedExchange
type	src/apps/chem/QCCalculationParametersBase.h	/^	std::string type="";$/;"	m	struct:madness::QCParameter
type	src/apps/chem/corepotential.h	/^    int type;$/;"	m	struct:madness::CoreOrbital
type	src/apps/chem/correlationfactor.h	/^	corrfactype type() const {return None;}$/;"	f	class:madness::PseudoNuclearCorrelationFactor
type	src/apps/chem/correlationfactor.h	/^	corrfactype type() const {return NuclearCorrelationFactor::GaussSlater;}$/;"	f	class:madness::GaussSlater
type	src/apps/chem/correlationfactor.h	/^	corrfactype type() const {return NuclearCorrelationFactor::LinearSlater;}$/;"	f	class:madness::LinearSlater
type	src/apps/chem/correlationfactor.h	/^	corrfactype type() const {return NuclearCorrelationFactor::Polynomial;}$/;"	f	class:madness::Polynomial
type	src/apps/chem/correlationfactor.h	/^	corrfactype type() const {return NuclearCorrelationFactor::Slater;}$/;"	f	class:madness::Slater
type	src/apps/chem/correlationfactor.h	/^    corrfactype type() const {return NuclearCorrelationFactor::GradientalGaussSlater;}$/;"	f	class:madness::GradientalGaussSlater
type	src/apps/chem/correlationfactor.h	/^    corrfactype type() const {return NuclearCorrelationFactor::poly4erfc;}$/;"	f	class:madness::poly4erfc
type	src/apps/chem/molecularbasis.h	/^    int type;  \/\/\/< Angular momentum = 0, 1, 2, ...$/;"	m	class:madness::ContractedGaussianShell
type	src/apps/hf/molecularbasis.h	/^    int type;  \/\/\/< Angular momentum = 0, 1, 2, ...$/;"	m	class:ContractedGaussianShell
type	src/apps/polar/corepotential.h	/^    int type;$/;"	m	struct:CoreOrbital
type	src/apps/polar/molecularbasis.h	/^    int type;  \/\/\/< Angular momentum = 0, 1, 2, ...$/;"	m	class:ContractedGaussianShell
type	src/examples/compiler/mra-driver.hh	/^    Type type() const {$/;"	f	class:Exp
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    typedef AbstractBlockDistMatrix<T> type;$/;"	t	class:elem::AbstractBlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/CIRC_CIRC.hpp	/^    typedef BlockDistMatrix<T,CIRC,CIRC> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/General.hpp	/^    typedef GeneralBlockDistMatrix<T,U,V> type;$/;"	t	class:elem::GeneralBlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_MR.hpp	/^    typedef BlockDistMatrix<T,MC,MR> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MC_STAR.hpp	/^    typedef BlockDistMatrix<T,MC,STAR> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MD_STAR.hpp	/^    typedef BlockDistMatrix<T,MD,STAR> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_MC.hpp	/^    typedef BlockDistMatrix<T,MR,MC> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/MR_STAR.hpp	/^    typedef BlockDistMatrix<T,MR,STAR> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MC.hpp	/^    typedef BlockDistMatrix<T,STAR,MC> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MD.hpp	/^    typedef BlockDistMatrix<T,STAR,MD> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_MR.hpp	/^    typedef BlockDistMatrix<T,STAR,MR> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_STAR.hpp	/^    typedef BlockDistMatrix<T,STAR,STAR> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VC.hpp	/^    typedef BlockDistMatrix<T,STAR,VC> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/STAR_VR.hpp	/^    typedef BlockDistMatrix<T,STAR,VR> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VC_STAR.hpp	/^    typedef BlockDistMatrix<T,VC,STAR> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/VR_STAR.hpp	/^    typedef BlockDistMatrix<T,VR,STAR> type;$/;"	t	class:elem::BlockDistMatrix
type	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	/^struct BaseHelper { typedef Real type; };$/;"	t	struct:elem::BaseHelper
type	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	/^struct BaseHelper<Complex<Real>> { typedef Real type; };$/;"	t	struct:elem::BaseHelper
type	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    typedef AbstractDistMatrix<T> type;$/;"	t	class:elem::AbstractDistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/CIRC_CIRC.hpp	/^    typedef DistMatrix<T,CIRC,CIRC> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/General.hpp	/^    typedef GeneralDistMatrix<T,U,V> type;$/;"	t	class:elem::GeneralDistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_MR.hpp	/^    typedef DistMatrix<T,MC,MR> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/MC_STAR.hpp	/^    typedef DistMatrix<T,MC,STAR> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/MD_STAR.hpp	/^    typedef DistMatrix<T,MD,STAR> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_MC.hpp	/^    typedef DistMatrix<T,MR,MC> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/MR_STAR.hpp	/^    typedef DistMatrix<T,MR,STAR> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MC.hpp	/^    typedef DistMatrix<T,STAR,MC> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MD.hpp	/^    typedef DistMatrix<T,STAR,MD> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_MR.hpp	/^    typedef DistMatrix<T,STAR,MR> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_STAR.hpp	/^    typedef DistMatrix<T,STAR,STAR> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VC.hpp	/^    typedef DistMatrix<T,STAR,VC> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/STAR_VR.hpp	/^    typedef DistMatrix<T,STAR,VR> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/VC_STAR.hpp	/^    typedef DistMatrix<T,VC,STAR> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/elemental/include/elemental/core/DistMatrix/VR_STAR.hpp	/^    typedef DistMatrix<T,VR,STAR> type;$/;"	t	class:elem::DistMatrix
type	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  Type type() const { return type_; }$/;"	f	class:testing::TestPartResult
type	src/madness/external/gtest/include/gtest/gtest.h	/^    TestPartResult::Type const type;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::TestPartResult
type	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  typedef typename RemoveConst<T>::type type[N];$/;"	t	struct:testing::internal::RemoveConst
type	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::EnableIf
type	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef bool_constant<bool_value> type;$/;"	t	struct:testing::internal::bool_constant
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T0 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T1 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T2 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T3 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T4 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T5 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T6 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T7 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T8 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  typedef T9 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T12> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13, T14> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T13> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14, T15> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T14> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T26> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27, T28> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T27> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28, T29> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T28> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T40> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>::type type;$/;"	t	struct:testing::internal::TypeList
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41, T42> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T41> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42, T43> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^      T42> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^    typedef Tmpl<T> type;$/;"	t	struct:testing::internal::TemplateSel::Bind
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates0 type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates1<T1> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates2<T1, T2> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates3<T1, T2, T3> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates4<T1, T2, T3, T4> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Templates9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::internal::Templates
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef Types1<T> type;$/;"	t	struct:testing::internal::TypeList
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef bool type;$/;"	t	struct:testing::internal::AssertTypeEq
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types0 type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types1<T1> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types2<T1, T2> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types3<T1, T2, T3> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types4<T1, T2, T3, T4> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::Types
type	src/madness/external/gtest/include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::Types
type	src/madness/external/tinyxml/tinyxml.h	/^	NodeType		type;$/;"	m	class:TiXmlNode
type	src/madness/tensor/lowranktensor.h	/^    TensorType type;$/;"	m	class:madness::LowRankTensor
type	src/madness/tensor/srconf.h	/^		TensorType type() const {return tensortype_;};$/;"	f	class:madness::SRConf
type	src/madness/tensor/tensor.h	/^        typedef T type;$/;"	t	class:madness::Tensor
type	src/madness/tensor/tensortrain.h	/^        typedef T type;$/;"	t	class:madness::TensorTrain
type	src/madness/tensor/type_data.h	/^        typedef ReturnType type;$/;"	t	struct:madness::IsSupported
type	src/madness/tensor/type_data.h	/^        typedef long type;$/;"	t	class:madness::TensorTypeFromId
type	src/madness/world/function_traits.h	/^            typedef typename fnT::result_type type;$/;"	t	struct:madness::detail::result_of
type	src/madness/world/function_traits.h	/^            typedef typename function_traits<fnT>::result_type type;$/;"	t	struct:madness::detail::result_of
type	src/madness/world/function_traits.h	/^            typedef typename memfunc_traits<fnT>::result_type type;$/;"	t	struct:madness::detail::result_of
type	src/madness/world/future.h	/^        typedef Future<T> type;$/;"	t	struct:madness::add_future
type	src/madness/world/future.h	/^        typedef T type;$/;"	t	struct:madness::future_to_ref
type	src/madness/world/future.h	/^        typedef T type;$/;"	t	struct:madness::remove_future
type	src/madness/world/future.h	/^        typedef T& type;$/;"	t	struct:madness::remove_future
type	src/madness/world/future.h	/^        typedef T&& type;$/;"	t	struct:madness::remove_future
type	src/madness/world/future.h	/^        typedef const T type;$/;"	t	struct:madness::remove_future
type	src/madness/world/future.h	/^        typedef const T& type;$/;"	t	struct:madness::remove_future
type	src/madness/world/future.h	/^      typedef T& type;$/;"	t	struct:madness::future_to_ref
type	src/madness/world/meta.h	/^  typedef T0 type;$/;"	t	struct:madness::meta::last_type
type	src/madness/world/taskfn.h	/^            typedef T type;$/;"	t	struct:madness::detail::task_arg
type	src/madness/world/taskfn.h	/^            typedef const Future<void> type;$/;"	t	struct:madness::detail::task_arg
type	src/madness/world/taskfn.h	/^            typedef futureT type;$/;"	t	struct:madness::detail::task_result_type
type	src/madness/world/type_traits.h	/^                   typename std::remove_reference<T>::type>::type>::type type;$/;"	t	struct:madness::remove_fcvr
type	src/madness/world/world_task_queue.h	/^            typedef typename add_future<resT>::type type;$/;"	t	struct:madness::detail::memfunc_enabler_base
type	src/madness/world/world_task_queue.h	/^          typedef typename returnT::type type;$/;"	t	struct:madness::detail::function_enabler_helper
typeDoubleInt	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Datatype typeDoubleInt;$/;"	m	namespace:__anon34	file:
typeDoubleIntPair	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Datatype typeDoubleIntPair;$/;"	m	namespace:__anon34	file:
typeFloatInt	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Datatype typeFloatInt;$/;"	m	namespace:__anon34	file:
typeFloatIntPair	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Datatype typeFloatIntPair;$/;"	m	namespace:__anon34	file:
typeInfo	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::Args::OptionalArg
typeInfo	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        std::string name, desc, typeInfo, usedVal; $/;"	m	struct:elem::choice::Args::RequiredArg
typeInfo	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::MpiArgs::OptionalArg
typeInfo	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        std::string name, desc, typeInfo, usedVal; $/;"	m	struct:elem::choice::MpiArgs::RequiredArg
typeIntInt	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Datatype typeIntInt;$/;"	m	namespace:__anon34	file:
typeIntIntPair	src/madness/external/elemental/src/core/mpi_register.cpp	/^elem::mpi::Datatype typeIntIntPair;$/;"	m	namespace:__anon34	file:
type_	src/madness/external/gtest/include/gtest/gtest-spi.h	/^  const TestPartResult::Type type_;$/;"	m	class:testing::internal::SingleFailureChecker
type_	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  Type type_;$/;"	m	class:testing::TestPartResult
type_	src/madness/mra/function_factory.h	/^    operatortype type_;$/;"	m	class:madness::TwoElectronFactory
type_converter	src/madness/world/test_stack.cc	/^        union type_converter {$/;"	u	struct:__anon3::StackTestBase	file:
type_name	src/examples/compiler/mra-driver.hh	/^    static const char* type_name(Type t) {$/;"	f	class:Exp
type_param	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestCase
type_param	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestInfo
type_param_	src/madness/external/gtest/include/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestCase
type_param_	src/madness/external/gtest/include/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestInfo
typelist	src/madness/tensor/tempspec.py	/^typelist = ["int","long","double","float","double_complex","float_complex"]$/;"	v
typelist	src/madness/world/meta.h	/^struct typelist {};$/;"	s	namespace:madness::meta
tz	src/apps/hf/electronicstructureapp.h	/^  Vector<std::complex<double>,2*NTRANS+1> tz;$/;"	m	class:AtomicBasisFunctor
u	src/apps/chem/CCStructures.h	/^    real_function_6d u;$/;"	m	struct:madness::CCPairFunction
u	src/apps/chem/electronic_correlation_factor.h	/^    static double u(double r, double c) {$/;"	f	class:madness::CorrelationFactor
u	src/examples/he.cc	/^static double u(double r, double c) {$/;"	f	file:
u	src/examples/helium_mp2.cc	/^static double u(double r, double c) {$/;"	f	file:
u	src/examples/spectralprop.h	/^        uT u(double dt, const std::vector<uT>& v) {$/;"	f	class:madness::SpectralPropagator
u	src/examples/spectralprop.h	/^        uT u(double dt, const std::vector<uT>& v) {$/;"	f	class:madness::SpectralPropagatorGaussLobatto
u	src/madness/misc/ran.h	/^        double u[1279];$/;"	m	struct:madness::RandomState
u	src/madness/misc/ran.h	/^        volatile double* const u;$/;"	m	class:madness::Random
u	src/madness/mra/testperiodic.cc	/^double u(const double x, const double expnt) {$/;"	f
u_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  FloatingPointUnion u_;$/;"	m	class:testing::internal::FloatingPoint
u_exact	src/madness/mra/testdiff1D.cc	/^static double u_exact(const coordT &pt) {$/;"	f	file:
u_exact	src/madness/mra/testdiff1Db.cc	/^static double u_exact(const coordT &pt) {$/;"	f	file:
u_exact	src/madness/mra/testdiff2D.cc	/^static double u_exact(const coordT &pt) {$/;"	f	file:
u_exact	src/madness/mra/testdiff3D.cc	/^static double u_exact(const coordT &pt) {$/;"	f	file:
uexact	src/examples/binaryop.cc	/^double uexact(const coord_3d& r) {$/;"	f
uexact	src/examples/heat.cc	/^    uexact(double t) : t(t) {}$/;"	f	class:uexact
uexact	src/examples/heat.cc	/^class uexact : public FunctionFunctorInterface<double,3> {$/;"	c	file:
uexact	src/examples/heat2.cc	/^    uexact(double t) : t(t) {}$/;"	f	class:uexact
uexact	src/examples/heat2.cc	/^class uexact : public FunctionFunctorInterface<double,3> {$/;"	c	file:
uinitial	src/examples/heat.cc	/^static double uinitial(const coordT& r) {$/;"	f	file:
uinitial	src/examples/heat2.cc	/^static double uinitial(const coord_3d& r) {$/;"	f	file:
ulist	src/madness/mra/nonlinsol.h	/^		std::vector<Function<double,NDIM> > ulist, rlist;$/;"	m	class:madness::NonlinearSolverND
ulist	src/madness/mra/nonlinsol.h	/^        std::vector<T> ulist, rlist; \/\/\/< Subspace information$/;"	m	class:madness::XNonlinearSolver
ulong	src/madness/world/test_tree.cc	/^    typedef unsigned long ulong;$/;"	t	class:KeyChildIterator	file:
ulong	src/madness/world/test_tree.cc	/^    typedef unsigned long ulong;$/;"	t	struct:Key	file:
ulong	src/madness/world/test_world.cc	/^    typedef unsigned long ulong;$/;"	t	struct:Key	file:
unaryXX	src/madness/mra/funcimpl.h	/^        void unaryXX(const FunctionImpl<Q,NDIM>* func, const opT& op, bool fence) {$/;"	f	class:madness::FunctionImpl
unaryXXa	src/madness/mra/funcimpl.h	/^        void unaryXXa(const keyT& key,$/;"	f	class:madness::FunctionImpl
unaryXXvalues	src/madness/mra/funcimpl.h	/^        void unaryXXvalues(const FunctionImpl<Q,NDIM>* func, const opT& op, bool fence) {$/;"	f	class:madness::FunctionImpl
unary_iterator	src/madness/tensor/tensor.h	/^        TensorIterator<T> unary_iterator(long iterlevel=0,$/;"	f	class:madness::Tensor
unary_op	src/madness/mra/mra.h	/^    unary_op(const Function<Q,NDIM>& func, const opT& op, bool fence=true) {$/;"	f	namespace:madness
unary_op_coeff_inplace	src/madness/mra/funcimpl.h	/^        void unary_op_coeff_inplace(const opT& op, bool fence) {$/;"	f	class:madness::FunctionImpl
unary_op_coeffs	src/madness/mra/mra.h	/^        Function<typename opT::resultT,NDIM>& unary_op_coeffs(const Function<Q,NDIM>& func,$/;"	f	class:madness::Function
unary_op_coeffs	src/madness/mra/mra.h	/^    unary_op_coeffs(const Function<Q,NDIM>& func, const opT& op, bool fence=true) {$/;"	f	namespace:madness
unary_op_node_inplace	src/madness/mra/funcimpl.h	/^        void unary_op_node_inplace(const opT& op, bool fence) {$/;"	f	class:madness::FunctionImpl
unary_op_value_inplace	src/madness/mra/funcimpl.h	/^        void unary_op_value_inplace(const opT& op, bool fence) {$/;"	f	class:madness::FunctionImpl
unaryexp	src/apps/chem/SCF.cc	/^struct unaryexp$/;"	s	namespace:madness	file:
unaryexp	src/apps/nick/tdse1.cc	/^struct unaryexp {$/;"	s	file:
unaryexp	src/apps/polar/moldft.cc	/^struct unaryexp$/;"	s	file:
unaryexp	src/apps/tdse/tdse.cc	/^struct unaryexp {$/;"	s	file:
unaryexp	src/apps/tdse/tdse.cc	/^struct unaryexp<double_complex,NDIM> {$/;"	s	file:
unaryexp	src/apps/tdse/tdse.confused.cc	/^struct unaryexp {$/;"	s	file:
unaryexp	src/apps/tdse/tdse.confused.cc	/^struct unaryexp<double_complex,NDIM> {$/;"	s	file:
unaryexp	src/apps/tdse/tdse4.cc	/^struct unaryexp {};$/;"	s	file:
unaryexp	src/apps/tdse/tdse4.cc	/^struct unaryexp<double_complex,NDIM> {$/;"	s	file:
unaryexp	src/examples/heat2.cc	/^struct unaryexp {$/;"	s	file:
unaryexp	src/examples/tdse1d.cc	/^struct unaryexp {$/;"	s	file:
unaryexp	src/examples/tdse_example.cc	/^struct unaryexp {$/;"	s	file:
unaryexp	src/madness/mra/testqm.cc	/^struct unaryexp {$/;"	s	file:
unaryop	src/madness/mra/mra.h	/^        void unaryop(T (*f)(T)) {$/;"	f	class:madness::Function
unaryop	src/madness/mra/mra.h	/^        void unaryop(const opT& op, bool fence=true) {$/;"	f	class:madness::Function
unaryop	src/madness/tensor/tensor.h	/^        Tensor<T>& unaryop(opT& op) {$/;"	f	class:madness::Tensor
unaryop_coeff	src/madness/mra/mra.h	/^        void unaryop_coeff(const opT& op,$/;"	f	class:madness::Function
unaryop_node	src/madness/mra/mra.h	/^        void unaryop_node(const opT& op,$/;"	f	class:madness::Function
unaryoptype	src/examples/compiler/mra-driver.hh	/^    static Type unaryoptype(const std::string& op, Type t) {$/;"	f	class:Exp
unaugment	src/apps/adrian/TDDFT.cc	/^void TDHF::unaugment($/;"	f	class:TDHF
unaugment	src/apps/adrian/TDHF.cc	/^void TDHF::unaugment(World & world,$/;"	f	class:TDHF
unaugment	src/apps/adrian/TDHF2.cc	/^void TDHF::unaugment(World & world,$/;"	f	class:TDHF
unaugment	src/apps/bryan/TDHF.cc	/^void TDHF::unaugment(World & world,$/;"	f	class:TDHF
unaugment	src/apps/bryan/TDHF2.cc	/^void TDHF::unaugment(World & world,$/;"	f	class:TDHF
unaugment_full	src/apps/adrian/TDDFT.cc	/^void TDHF::unaugment_full($/;"	f	class:TDHF
unaugment_full	src/apps/adrian/TDHF2.cc	/^void TDHF::unaugment_full(World & world,$/;"	f	class:TDHF
unaugment_full	src/apps/bryan/TDHF2.cc	/^void TDHF::unaugment_full(World & world,$/;"	f	class:TDHF
unboundFile	src/apps/nick/extract.py	/^    unboundFile = open("unbound.num", 'r')$/;"	v
unboundFile	src/apps/nick/extract.py	/^unboundFile = open("unbound.num", 'w')$/;"	v
uncaptured_fd_	src/madness/external/gtest/src/gtest-port.cc	/^  int uncaptured_fd_;$/;"	m	class:testing::internal::CapturedStream	file:
undo_redundant	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::undo_redundant(const bool fence) {$/;"	f	class:madness::FunctionImpl
undo_structure	src/madness/tensor/srconf.h	/^		void undo_structure(bool force=false) {$/;"	f	class:madness::SRConf
unfilter	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::coeffT FunctionImpl<T,NDIM>::unfilter(const coeffT& s) const {$/;"	f	class:madness::FunctionImpl
unfilter	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::tensorT FunctionImpl<T,NDIM>::unfilter(const tensorT& s) const {$/;"	f	class:madness::FunctionImpl
unified_atomic_mass_unit	src/madness/constants.h	/^        const double unified_atomic_mass_unit = 1.660538782e-27 ; \/\/   0.000000083e-27    kg$/;"	m	namespace:madness::constants
uninitialized	src/apps/chem/CCStructures.h	/^    const double uninitialized = 123.456;$/;"	m	struct:madness::CCParameters
uninitialized	src/apps/chem/mp2.h	/^    	static double uninitialized() {return 1.e10;}$/;"	f	class:madness::ElectronPair
uninitialized_copy	src/madness/world/stack.h	/^            static void uninitialized_copy(T* first, T* last, T* dest) {$/;"	f	class:madness::detail::StackBase
uninitialized_move	src/madness/world/stack.h	/^            static void uninitialized_move(T* first, T* last, T* dest) {$/;"	f	class:madness::detail::StackBase
unique	src/madness/world/worldref.h	/^            bool unique() const { return use_count() == 1; }$/;"	f	class:madness::detail::RemoteCounter
unique	src/madness/world/worldref.h	/^        bool unique() const { return counter_.unique(); }$/;"	f	class:madness::RemoteReference
unique_obj_id	src/madness/world/world.h	/^        uniqueidT unique_obj_id() { return uniqueidT(_id,obj_id++); }$/;"	f	class:madness::World
unique_reserved_tag	src/madness/world/safempi.h	/^            int unique_reserved_tag() {$/;"	f	struct:SafeMPI::Intracomm::Impl
unique_reserved_tag	src/madness/world/safempi.h	/^        int unique_reserved_tag() {$/;"	f	class:SafeMPI::Intracomm
unique_tag	src/madness/world/safempi.h	/^            int unique_tag() {$/;"	f	struct:SafeMPI::Intracomm::Impl
unique_tag	src/madness/world/safempi.h	/^        int unique_tag() {$/;"	f	class:SafeMPI::Intracomm
unique_tag	src/madness/world/worldrmi.cc	/^    int RMI::RmiTask::unique_tag() const {$/;"	f	class:madness::RMI::RmiTask
unique_tag_period	src/madness/world/worldrmi.h	/^            static constexpr int unique_tag_period() { return 2048; }$/;"	f	class:madness::RMI::RmiTask
uniqueidT	src/madness/world/uniqueid.h	/^        uniqueidT()$/;"	f	class:madness::uniqueidT
uniqueidT	src/madness/world/uniqueid.h	/^        uniqueidT(unsigned long worldid, unsigned long objid)$/;"	f	class:madness::uniqueidT
uniqueidT	src/madness/world/uniqueid.h	/^    class uniqueidT {$/;"	c	namespace:madness
unit_test_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultGlobalTestPartResultReporter
unit_test_	src/madness/external/gtest/src/gtest-internal-inl.h	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultPerThreadTestPartResultReporter
unitfunctor	src/examples/smooth.h	/^static double unitfunctor(const Vector<double,NDIM> &x){$/;"	f
units	src/apps/chem/molecule.h	/^    enum {atomic, angstrom} units;$/;"	m	class:madness::Molecule	typeref:enum:madness::Molecule::__anon49
units	src/apps/moldft/moldx.py	/^                    units = line[1]$/;"	v
units	src/apps/moldft/moldx.py	/^            units = 'au'$/;"	v
units	src/apps/polar/moldx.py	/^                    units = line[1]$/;"	v
units	src/apps/polar/moldx.py	/^            units = 'au'$/;"	v
unittest	src/madness/tensor/mtxmq_graveyard/new_mtxmq/tests/testDocStrings.py	/^import unittest$/;"	i
unitvec	src/madness/world/vector.h	/^	Vector<T,N> unitvec(const Vector<T,N>& r, const double eps=1.e-6) {$/;"	f	namespace:madness
unknown	src/madness/mra/funcimpl.h	/^        enum LeafStatus {no, yes, unknown};$/;"	e	enum:madness::CoeffTracker::LeafStatus
unlock	src/madness/world/worldmutex.h	/^        void unlock() const {$/;"	f	class:madness::Mutex
unlock	src/madness/world/worldmutex.h	/^        void unlock() const {$/;"	f	class:madness::MutexFair
unlock	src/madness/world/worldmutex.h	/^        void unlock() const {$/;"	f	class:madness::PthreadConditionVariable
unlock	src/madness/world/worldmutex.h	/^        void unlock() const {$/;"	f	class:madness::RecursiveMutex
unlock	src/madness/world/worldmutex.h	/^        void unlock() const {$/;"	f	class:madness::Spinlock
unlock	src/madness/world/worldmutex.h	/^        void unlock(int lockmode) const {$/;"	f	class:madness::MutexReaderWriter
unprojected_cc2_projector_response_	src/apps/chem/CCStructures.h	/^    vector_real_function_3d unprojected_cc2_projector_response_;$/;"	m	struct:madness::CCIntermediatePotentials
unregister_group	src/madness/world/group.cc	/^    void Group::unregister_group(const DistributedID& did) {$/;"	f	class:madness::Group
unregister_ptr	src/madness/world/world.h	/^        void unregister_ptr(T* ptr) {$/;"	f	class:madness::World
unregister_ptr	src/madness/world/world.h	/^        void unregister_ptr(const uniqueidT id) {$/;"	f	class:madness::World
unregister_ptr_	src/madness/world/worldref.h	/^            static void unregister_ptr_(void* key) {$/;"	f	class:madness::detail::RemoteCounter
unset	src/madness/world/worldhashmap.h	/^            void unset() {$/;"	f	class:madness::Hash_private::HashAccessor
unset_functor	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::unset_functor() {$/;"	f	class:madness::FunctionImpl
unshuffle	src/apps/ii/systolic.h	/^        void unshuffle() {$/;"	f	class:madness::SystolicMatrixAlgorithm
unshuffle	src/madness/tensor/systolic.h	/^        void unshuffle() {$/;"	f	class:madness::SystolicMatrixAlgorithm
update	src/apps/chem/PNOStructures.h	/^	void update(){$/;"	f	struct:madness::PairEnergies
update	src/apps/chem/molecular_optimizer.h	/^	std::string update() const {return get<std::string>("update");}$/;"	f	class:madness::MolecularOptimizationParameters
update	src/apps/chem/molopt.h	/^        const std::string update;        \/\/< update = "bfgs" (default) or "sr1"$/;"	m	class:madness::MolOpt
update	src/apps/moldft/mcpfit.cc	/^    CorePotential update (World & world, CorePotential & cp, tensorT & deriv, double & r)$/;"	f	struct:Calculation
update	src/apps/moldft/preal.cc	/^    vector_real_function_3d update(World&                            world,$/;"	f	class:MiniDFT
update	src/apps/moldft/testcosine.cc	/^vector_complex_function_3d update(World& world,$/;"	f
update	src/apps/moldft/testperiodic.cc	/^vcpairT update(World& world,$/;"	f
update	src/apps/polar/mcpfit.cc	/^    CorePotential update (World & world, CorePotential & cp, tensorT & deriv, double & r)$/;"	f	struct:Calculation
update	src/apps/polar/preal.cc	/^vector_real_function_3d update(World& world,$/;"	f
update	src/apps/polar/testperiodic.cc	/^vector_complex_function_3d update(World& world,$/;"	f
update	src/madness/mra/nonlinsol.h	/^		Function<double,NDIM> update(const Function<double,NDIM>& u, const Function<double,NDIM>& r,$/;"	f	class:madness::NonlinearSolverND
update	src/madness/mra/nonlinsol.h	/^	T update(const T& u, const T& r, const double rcondtol=1e-8, const double cabsmax=1000.0) {$/;"	f	class:madness::XNonlinearSolver
update	src/madness/tensor/kain.cc	/^    string update;              \/\/ One of BFGS or SR1$/;"	m	class:QuasiNewton	file:
update	src/madness/tensor/solvers.h	/^        std::string update;              \/\/ One of BFGS or SR1$/;"	m	class:madness::QuasiNewton
update_constant_part_adc2	src/apps/chem/CC2.h	/^    bool update_constant_part_adc2(const CC_vecfunction &ccs, CCPair &pair){$/;"	f	class:madness::CC2
update_constant_part_cc2_gs	src/apps/chem/CC2.h	/^    bool update_constant_part_cc2_gs(const CC_vecfunction &tau,CCPair &pair){$/;"	f	class:madness::CC2
update_constant_part_cispd	src/apps/chem/CC2.h	/^    bool update_constant_part_cispd(const CC_vecfunction &ccs, CCPair &pair){$/;"	f	class:madness::CC2
update_constant_part_lrcc2	src/apps/chem/CC2.h	/^    bool update_constant_part_lrcc2(CCPair &pair, const CC_vecfunction &tau,const CC_vecfunction &x){$/;"	f	class:madness::CC2
update_constant_part_mp2	src/apps/chem/CC2.h	/^    bool update_constant_part_mp2(CCPair &pair){$/;"	f	class:madness::CC2
update_elements	src/apps/chem/CCStructures.cc	/^  void CCConvolutionOperator::update_elements(const CC_vecfunction &bra, const CC_vecfunction &ket){$/;"	f	class:madness::CCConvolutionOperator
update_fluctuation_potentials	src/apps/chem/PNO.cpp	/^void PNO::update_fluctuation_potentials(PNOPairs& pairs) const {$/;"	f	class:madness::PNO
update_intermediates	src/apps/chem/CCPotentials.h	/^    void update_intermediates(const CC_vecfunction &t){$/;"	f	class:madness::CCPotentials
update_meminfo	src/apps/chem/PNOStructures.cpp	/^PNOPairs::MemInfo PNOPairs::update_meminfo() const {$/;"	f	class:madness::PNOPairs
update_mos	src/apps/chem/MolecularOrbitals.h	/^	void update_mos(const std::vector<Function<T,NDIM> >& mo_new) {$/;"	f	class:madness::MolecularOrbitals
update_mos_and_eps	src/apps/chem/MolecularOrbitals.h	/^	void update_mos_and_eps(const std::vector<Function<T,NDIM> >& mo_new,$/;"	f	class:madness::MolecularOrbitals
update_occ	src/apps/chem/MolecularOrbitals.h	/^	void update_occ(const Tensor<double>& occ_new) {$/;"	f	class:madness::MolecularOrbitals
update_occupation	src/apps/hf/eigsolver.cc	/^  void EigSolver<T,NDIM>::update_occupation()$/;"	f	class:madness::EigSolver
update_orbitals	src/apps/hf/solver.h	/^    void update_orbitals(vecfuncT& awfs,$/;"	f	class:madness::Solver
update_pno	src/apps/chem/PNO.cpp	/^bool PNO::update_pno(PNOPairs& pairs, const std::valarray<Tensor<double> >& rdm_evals_ij, const Tensor<double>& F_occ) const {$/;"	f	class:madness::PNO
update_reg_residues_ex	src/apps/chem/CC2.cc	/^  void CC2::update_reg_residues_ex(const CC_vecfunction& singles,const CC_vecfunction& response,Pairs<CCPair> &doubles)const{$/;"	f	class:madness::CC2
update_reg_residues_gs	src/apps/chem/CC2.cc	/^  void CC2::update_reg_residues_gs(const CC_vecfunction& singles,Pairs<CCPair> &doubles)const{$/;"	f	class:madness::CC2
update_response_subspace	src/apps/chem/SCF.cc	/^void SCF::update_response_subspace(World &world,$/;"	f	class:madness::SCF
update_response_subspace	src/apps/polar/moldft.cc	/^    void update_response_subspace(World &world,$/;"	f	struct:Calculation
update_subspace	src/apps/chem/SCF.cc	/^void SCF::update_subspace(World &world, vecfuncT &Vpsia, vecfuncT &Vpsib,$/;"	f	class:madness::SCF
update_subspace	src/apps/hf/solver.h	/^    void update_subspace(vecfuncT& awfs_new,$/;"	f	class:madness::Subspace
update_subspace	src/apps/hf/solver.h	/^    void update_subspace(vecfuncT& awfs_new,$/;"	f	class:madness::SubspaceK
update_subspace	src/apps/moldft/subspace.h	/^    void update_subspace(World& world,$/;"	f	class:Subspace
update_subspace	src/apps/polar/moldft.cc	/^    void update_subspace(World &world,$/;"	f	struct:Calculation
update_subspace_mp	src/apps/polar/moldft.cc	/^    void update_subspace_mp(World &world,$/;"	f	struct:Calculation
update_time	src/apps/chem/CCStructures.h	/^    void update_time(){$/;"	f	struct:madness::CCTimer
update_u	src/apps/chem/CCStructures.h	/^    void update_u(const real_function_6d &u){$/;"	f	class:madness::CCPair
updatex	src/madness/mra/minmax/y.cc	/^vector<FLOAT> updatex(const vector<FLOAT>& x, const vector<FLOAT>& p) $/;"	f
updatex	src/madness/mra/minmax/y1.cc	/^vector<FLOAT> updatex(const vector<FLOAT>& x, const vector<FLOAT>& p) $/;"	f
updatex	src/madness/mra/minmax/y_signed.cc	/^vector<FLOAT> updatex(const vector<FLOAT>& x, const vector<FLOAT>& p) $/;"	f
updatex	src/madness/mra/minmax/y_varx.cc	/^vector<FLOAT> updatex(const vector<FLOAT>& x, const vector<FLOAT>& p) $/;"	f
upsample	src/madness/mra/mraimpl.h	/^    typename FunctionImpl<T,NDIM>::coeffT FunctionImpl<T,NDIM>::upsample(const keyT& key, const coeffT& coeff) const {$/;"	f	class:madness::FunctionImpl
upsample	src/madness/mra/operator.h	/^        GenTensor<T> upsample(const Key<FDIM>& key, const GenTensor<T>& coeff) const {$/;"	f	class:madness::SeparatedConvolution
urandomb	src/apps/nick/mpreal.h	/^inline const mpreal urandomb (gmp_randstate_t& state)$/;"	f	namespace:mpfr
urtag	src/madness/world/safempi.h	/^            volatile int urtag;$/;"	m	struct:SafeMPI::Intracomm::Impl
usage	bin/taskprofile.pl	/^sub usage {$/;"	s
useMicrosoftBOM	src/madness/external/tinyxml/tinyxml.h	/^	bool useMicrosoftBOM;		\/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument
useSdc	src/madness/external/elemental/include/elemental/lapack-like/decomp/decl.hpp	/^    bool useSdc;$/;"	m	struct:elem::HermitianEigCtrl
use_bsplines	src/apps/chem/SCFOperators.h	/^	bool use_bsplines=true;$/;"	m	class:madness::Lz
use_count	src/madness/world/worldref.h	/^            long use_count() const { return (pimpl_.is_local() ? pimpl_->use_count() : 0); }$/;"	f	class:madness::detail::RemoteCounter
use_count	src/madness/world/worldref.h	/^            long use_count() const { return count_; }$/;"	f	class:madness::detail::RemoteCounterBase
use_count	src/madness/world/worldref.h	/^        long use_count() const { return counter_.use_count(); }$/;"	f	class:madness::RemoteReference
use_eps_default	src/examples/compiler/mra-driver.hh	/^    bool use_eps_default;       \/\/ False if user specified eps$/;"	m	class:mra_driver
use_k_default	src/examples/compiler/mra-driver.hh	/^    bool use_k_default;         \/\/ False if user specified k$/;"	m	class:mra_driver
use_mult_	src/apps/chem/AC.h	/^	bool use_mult_; \/\/\/ set true to use multipole approximation$/;"	m	struct:madness::ACParameters
use_v_vector	src/apps/chem/diamagneticpotentialfactor.h	/^	bool use_v_vector=true;$/;"	m	class:madness::Diamagnetic_potential_factor
use_v_vector	src/apps/chem/znemo.h	/^	bool use_v_vector() const {return get<bool>("use_v_vector");}$/;"	f	class:madness::Nemo_complex_Parameters
usedArgs_	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    std::vector<bool> usedArgs_;$/;"	m	class:elem::choice::Args
usedArgs_	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    std::vector<bool> usedArgs_;$/;"	m	class:elem::choice::MpiArgs
usedVal	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::Args::OptionalArg
usedVal	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^        std::string name, desc, typeInfo, usedVal; $/;"	m	struct:elem::choice::Args::RequiredArg
usedVal	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        std::string name, desc, typeInfo, defaultVal, usedVal; $/;"	m	struct:elem::choice::MpiArgs::OptionalArg
usedVal	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^        std::string name, desc, typeInfo, usedVal; $/;"	m	struct:elem::choice::MpiArgs::RequiredArg
usedb	src/apps/moldft/fci/timer.f	/^      double precision linux_cputime, start, usedf, usedb,/;"	v
usedf	src/apps/moldft/fci/timer.f	/^      double precision linux_cputime, start, usedf,/;"	v
userData	src/madness/external/tinyxml/tinyxml.h	/^	void*			userData;$/;"	m	class:TiXmlBase
user_dconv	src/apps/chem/SCFProtocol.h	/^    double user_dconv;      \/\/\/< density convergence provided by user$/;"	m	class:madness::SCFProtocol
user_defined_value	src/apps/chem/QCCalculationParametersBase.h	/^	std::string user_defined_value="";$/;"	m	struct:madness::QCParameter
user_state	src/madness/world/world.h	/^        void* user_state; \/\/\/< Holds a user-defined and managed local state.$/;"	m	class:madness::World
user_to_sim	src/madness/mra/funcdefaults.h	/^    static inline void user_to_sim(const Vector<double,NDIM>& xuser, Vector<double,NDIM>& xsim) {$/;"	f	namespace:madness
utag	src/madness/world/safempi.h	/^            volatile int utag;$/;"	m	struct:SafeMPI::Intracomm::Impl
utf8ByteTable	src/madness/external/tinyxml/tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase
utf8ByteTable	src/madness/external/tinyxml/tinyxmlparser.cc	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	file:
uthresh	src/examples/navstokes_cosines.cc	/^const double uthresh = pthresh; \/\/ Precision$/;"	v
uthresh1	src/examples/navstokes_cosines.cc	/^const double uthresh1 = pthresh1;$/;"	v
uxexact	src/examples/navstokes_cosines.cc	/^static double uxexact(const coordT3d& r) {$/;"	f	file:
uyexact	src/examples/navstokes_cosines.cc	/^static double uyexact(const coordT3d& r) {$/;"	f	file:
uzexact	src/examples/navstokes_cosines.cc	/^static double uzexact(const coordT3d& r) {$/;"	f	file:
v	src/apps/chem/diamagneticpotentialfactor.h	/^	std::vector<coord_3d> v;$/;"	m	class:madness::Diamagnetic_potential_factor
v	src/apps/chem/molecularbasis.h	/^        const Tensor<T> v;$/;"	m	class:madness::AtomicBasisSet::AnalysisSorter
v	src/apps/hf/molecularbasis.h	/^        const Tensor<T> v;$/;"	m	class:AtomicBasisSet::AnalysisSorter
v	src/apps/hf/test_comm.cc	/^    vector<double> v;$/;"	m	class:Array	file:
v	src/apps/hf/testconv.cc	/^    vector<double> v;$/;"	m	class:Array	file:
v	src/apps/polar/molecularbasis.h	/^        const Tensor<T> v;$/;"	m	class:AtomicBasisSet::AnalysisSorter
v	src/examples/array_worldobject.cc	/^    vector<double> v;$/;"	m	class:Array	file:
v	src/examples/testspectralprop.cc	/^    std::vector<double> v;$/;"	m	class:Fred	file:
v	src/madness/mra/minmax/y.cc	/^    std::vector<FLOAT> v;$/;"	m	class:matrix	file:
v	src/madness/mra/minmax/y1.cc	/^    std::vector<FLOAT> v;$/;"	m	class:matrix	file:
v	src/madness/mra/minmax/y_signed.cc	/^    std::vector<FLOAT> v;$/;"	m	class:matrix	file:
v	src/madness/mra/minmax/y_varx.cc	/^    std::vector<FLOAT> v;$/;"	m	class:matrix	file:
v	src/madness/mra/testsuite.cc	/^    const double v;$/;"	m	class:QMtest	file:
v	src/madness/world/future.h	/^        vectorT v;$/;"	m	class:madness::Future
v	src/madness/world/mpi_archive.h	/^            mutable std::vector<unsigned char> v; \/\/\/< The buffer.$/;"	m	class:madness::archive::MPIInputArchive
v	src/madness/world/mpi_archive.h	/^            mutable std::vector<unsigned char> v; \/\/\/< The buffer.$/;"	m	class:madness::archive::MPIOutputArchive
v	src/madness/world/test_future2.cc	/^    vector<double> v;$/;"	m	class:Array	file:
v	src/madness/world/test_stack.cc	/^            int v;$/;"	m	union:__anon3::StackTestBase::type_converter	file:
v	src/madness/world/vector_archive.h	/^            mutable std::vector<unsigned char>* v; \/\/\/< The STL vector being wrapped.$/;"	m	class:madness::archive::VectorInputArchive
v	src/madness/world/vector_archive.h	/^            mutable std::vector<unsigned char>* v; \/\/\/< The STL vector being wrapped.$/;"	m	class:madness::archive::VectorOutputArchive
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray10
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray11
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray12
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray13
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray14
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray15
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray16
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray17
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray18
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray19
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray20
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray21
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray22
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray23
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray24
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray25
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray26
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray27
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray28
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray29
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray30
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray31
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray32
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray33
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray34
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray35
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray36
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray37
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray38
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray39
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray40
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray41
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray42
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray43
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray44
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray45
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray46
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray47
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray48
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray49
v10_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray50
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray11
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray12
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray13
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray14
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray15
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray16
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray17
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray18
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray19
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray20
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray21
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray22
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray23
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray24
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray25
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray26
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray27
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray28
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray29
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray30
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray31
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray32
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray33
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray34
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray35
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray36
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray37
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray38
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray39
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray40
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray41
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray42
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray43
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray44
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray45
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray46
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray47
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray48
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray49
v11_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray50
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray12
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray13
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray14
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray15
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray16
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray17
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray18
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray19
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray20
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray21
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray22
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray23
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray24
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray25
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray26
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray27
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray28
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray29
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray30
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray31
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray32
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray33
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray34
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray35
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray36
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray37
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray38
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray39
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray40
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray41
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray42
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray43
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray44
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray45
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray46
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray47
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray48
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray49
v12_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray50
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray13
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray14
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray15
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray16
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray17
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray18
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray19
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray20
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray21
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray22
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray23
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray24
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray25
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray26
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray27
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray28
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray29
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray30
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray31
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray32
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray33
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray34
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray35
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray36
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray37
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray38
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray39
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray40
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray41
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray42
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray43
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray44
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray45
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray46
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray47
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray48
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray49
v13_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray50
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray14
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray15
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray16
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray17
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray18
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray19
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray20
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray21
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray22
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray23
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray24
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray25
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray26
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray27
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray28
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray29
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray30
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray31
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray32
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray33
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray34
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray35
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray36
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray37
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray38
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray39
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray40
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray41
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray42
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray43
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray44
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray45
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray46
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray47
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray48
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray49
v14_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray50
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray15
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray16
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray17
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray18
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray19
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray20
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray21
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray22
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray23
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray24
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray25
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray26
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray27
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray28
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray29
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray30
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray31
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray32
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray33
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray34
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray35
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray36
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray37
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray38
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray39
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray40
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray41
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray42
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray43
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray44
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray45
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray46
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray47
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray48
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray49
v15_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray50
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray16
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray17
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray18
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray19
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray20
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray21
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray22
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray23
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray24
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray25
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray26
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray27
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray28
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray29
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray30
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray31
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray32
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray33
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray34
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray35
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray36
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray37
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray38
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray39
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray40
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray41
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray42
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray43
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray44
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray45
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray46
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray47
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray48
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray49
v16_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray50
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray17
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray18
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray19
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray20
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray21
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray22
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray23
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray24
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray25
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray26
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray27
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray28
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray29
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray30
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray31
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray32
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray33
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray34
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray35
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray36
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray37
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray38
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray39
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray40
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray41
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray42
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray43
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray44
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray45
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray46
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray47
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray48
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray49
v17_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray50
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray18
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray19
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray20
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray21
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray22
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray23
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray24
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray25
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray26
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray27
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray28
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray29
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray30
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray31
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray32
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray33
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray34
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray35
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray36
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray37
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray38
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray39
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray40
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray41
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray42
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray43
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray44
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray45
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray46
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray47
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray48
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray49
v18_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray50
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray19
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray20
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray21
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray22
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray23
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray24
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray25
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray26
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray27
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray28
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray29
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray30
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray31
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray32
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray33
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray34
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray35
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray36
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray37
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray38
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray39
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray40
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray41
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray42
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray43
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray44
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray45
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray46
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray47
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray48
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray49
v19_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray50
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray1
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray10
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray11
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray12
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray13
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray14
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray15
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray16
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray17
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray18
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray19
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray2
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray20
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray21
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray22
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray23
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray24
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray25
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray26
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray27
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray28
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray29
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray3
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray30
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray31
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray32
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray33
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray34
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray35
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray36
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray37
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray38
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray39
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray4
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray40
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray41
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray42
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray43
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray44
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray45
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray46
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray47
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray48
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray49
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray5
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray50
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray6
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray7
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray8
v1_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray9
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray20
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray21
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray22
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray23
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray24
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray25
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray26
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray27
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray28
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray29
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray30
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray31
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray32
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray33
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray34
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray35
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray36
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray37
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray38
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray39
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray40
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray41
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray42
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray43
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray44
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray45
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray46
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray47
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray48
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray49
v20_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray50
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray21
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray22
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray23
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray24
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray25
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray26
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray27
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray28
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray29
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray30
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray31
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray32
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray33
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray34
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray35
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray36
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray37
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray38
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray39
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray40
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray41
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray42
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray43
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray44
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray45
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray46
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray47
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray48
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray49
v21_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray50
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray22
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray23
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray24
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray25
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray26
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray27
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray28
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray29
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray30
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray31
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray32
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray33
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray34
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray35
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray36
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray37
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray38
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray39
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray40
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray41
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray42
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray43
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray44
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray45
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray46
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray47
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray48
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray49
v22_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray50
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray23
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray24
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray25
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray26
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray27
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray28
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray29
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray30
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray31
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray32
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray33
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray34
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray35
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray36
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray37
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray38
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray39
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray40
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray41
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray42
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray43
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray44
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray45
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray46
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray47
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray48
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray49
v23_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray50
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray24
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray25
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray26
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray27
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray28
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray29
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray30
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray31
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray32
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray33
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray34
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray35
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray36
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray37
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray38
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray39
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray40
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray41
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray42
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray43
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray44
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray45
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray46
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray47
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray48
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray49
v24_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray50
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray25
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray26
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray27
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray28
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray29
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray30
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray31
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray32
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray33
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray34
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray35
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray36
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray37
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray38
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray39
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray40
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray41
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray42
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray43
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray44
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray45
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray46
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray47
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray48
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray49
v25_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray50
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray26
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray27
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray28
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray29
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray30
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray31
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray32
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray33
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray34
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray35
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray36
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray37
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray38
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray39
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray40
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray41
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray42
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray43
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray44
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray45
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray46
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray47
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray48
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray49
v26_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray50
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray27
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray28
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray29
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray30
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray31
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray32
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray33
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray34
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray35
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray36
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray37
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray38
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray39
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray40
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray41
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray42
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray43
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray44
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray45
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray46
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray47
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray48
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray49
v27_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray50
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray28
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray29
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray30
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray31
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray32
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray33
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray34
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray35
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray36
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray37
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray38
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray39
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray40
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray41
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray42
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray43
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray44
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray45
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray46
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray47
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray48
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray49
v28_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray50
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray29
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray30
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray31
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray32
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray33
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray34
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray35
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray36
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray37
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray38
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray39
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray40
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray41
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray42
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray43
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray44
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray45
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray46
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray47
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray48
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray49
v29_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray50
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray10
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray11
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray12
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray13
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray14
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray15
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray16
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray17
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray18
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray19
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray2
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray20
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray21
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray22
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray23
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray24
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray25
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray26
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray27
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray28
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray29
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray3
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray30
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray31
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray32
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray33
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray34
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray35
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray36
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray37
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray38
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray39
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray4
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray40
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray41
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray42
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray43
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray44
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray45
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray46
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray47
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray48
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray49
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray5
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray50
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray6
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray7
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray8
v2_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray9
v2k	src/madness/mra/function_common_data.h	/^        std::vector<long> v2k; \/\/\/< (2k,...) used to initialize Tensors$/;"	m	class:madness::FunctionCommonData
v2k	src/madness/mra/operator.h	/^        const std::vector<long> v2k;$/;"	m	class:madness::SeparatedConvolution
v2rhoa2	src/apps/chem/plotxc.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhoa2	src/apps/chem/testlda.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhoa2	src/apps/chem/testxc.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhoa2	src/apps/polar/testxc.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhoab	src/apps/chem/plotxc.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhoab	src/apps/chem/testlda.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhoab	src/apps/chem/testxc.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhoab	src/apps/polar/testxc.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhob2	src/apps/chem/plotxc.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhob2	src/apps/chem/testlda.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhob2	src/apps/chem/testxc.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v2rhob2	src/apps/polar/testxc.cc	/^  double v2rhoa2, v2rhoab, v2rhob2;$/;"	m	struct:xcfunc_data_point	file:
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray30
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray31
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray32
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray33
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray34
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray35
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray36
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray37
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray38
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray39
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray40
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray41
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray42
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray43
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray44
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray45
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray46
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray47
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray48
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray49
v30_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray50
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray31
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray32
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray33
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray34
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray35
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray36
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray37
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray38
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray39
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray40
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray41
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray42
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray43
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray44
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray45
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray46
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray47
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray48
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray49
v31_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray50
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray32
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray33
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray34
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray35
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray36
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray37
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray38
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray39
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray40
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray41
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray42
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray43
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray44
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray45
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray46
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray47
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray48
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray49
v32_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray50
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray33
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray34
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray35
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray36
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray37
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray38
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray39
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray40
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray41
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray42
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray43
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray44
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray45
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray46
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray47
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray48
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray49
v33_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray50
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray34
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray35
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray36
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray37
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray38
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray39
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray40
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray41
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray42
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray43
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray44
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray45
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray46
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray47
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray48
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray49
v34_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray50
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray35
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray36
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray37
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray38
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray39
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray40
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray41
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray42
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray43
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray44
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray45
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray46
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray47
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray48
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray49
v35_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray50
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray36
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray37
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray38
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray39
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray40
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray41
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray42
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray43
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray44
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray45
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray46
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray47
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray48
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray49
v36_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray50
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray37
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray38
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray39
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray40
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray41
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray42
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray43
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray44
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray45
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray46
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray47
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray48
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray49
v37_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray50
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray38
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray39
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray40
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray41
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray42
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray43
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray44
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray45
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray46
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray47
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray48
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray49
v38_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray50
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray39
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray40
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray41
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray42
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray43
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray44
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray45
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray46
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray47
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray48
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray49
v39_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray50
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray10
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray11
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray12
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray13
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray14
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray15
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray16
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray17
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray18
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray19
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray20
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray21
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray22
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray23
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray24
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray25
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray26
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray27
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray28
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray29
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray3
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray30
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray31
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray32
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray33
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray34
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray35
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray36
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray37
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray38
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray39
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray4
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray40
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray41
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray42
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray43
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray44
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray45
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray46
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray47
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray48
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray49
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray5
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray50
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray6
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray7
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray8
v3_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray9
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray40
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray41
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray42
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray43
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray44
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray45
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray46
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray47
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray48
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray49
v40_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray50
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray41
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray42
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray43
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray44
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray45
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray46
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray47
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray48
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray49
v41_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray50
v42_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray42
v42_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray43
v42_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray44
v42_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray45
v42_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray46
v42_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray47
v42_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray48
v42_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray49
v42_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray50
v43_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray43
v43_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray44
v43_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray45
v43_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray46
v43_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray47
v43_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray48
v43_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray49
v43_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray50
v44_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray44
v44_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray45
v44_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray46
v44_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray47
v44_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray48
v44_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray49
v44_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray50
v45_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray45
v45_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray46
v45_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray47
v45_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray48
v45_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray49
v45_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray50
v46_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray46
v46_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray47
v46_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray48
v46_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray49
v46_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray50
v47_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray47
v47_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray48
v47_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray49
v47_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray50
v48_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray48
v48_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray49
v48_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray50
v49_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray49
v49_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray50
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray10
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray11
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray12
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray13
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray14
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray15
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray16
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray17
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray18
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray19
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray20
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray21
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray22
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray23
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray24
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray25
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray26
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray27
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray28
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray29
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray30
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray31
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray32
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray33
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray34
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray35
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray36
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray37
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray38
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray39
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray4
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray40
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray41
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray42
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray43
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray44
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray45
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray46
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray47
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray48
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray49
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray5
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray50
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray6
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray7
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray8
v4_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray9
v50_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T50 v50_;$/;"	m	class:testing::internal::ValueArray50
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray10
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray11
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray12
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray13
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray14
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray15
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray16
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray17
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray18
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray19
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray20
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray21
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray22
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray23
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray24
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray25
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray26
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray27
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray28
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray29
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray30
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray31
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray32
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray33
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray34
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray35
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray36
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray37
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray38
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray39
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray40
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray41
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray42
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray43
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray44
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray45
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray46
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray47
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray48
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray49
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray5
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray50
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray6
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray7
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray8
v5_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray9
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray10
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray11
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray12
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray13
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray14
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray15
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray16
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray17
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray18
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray19
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray20
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray21
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray22
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray23
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray24
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray25
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray26
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray27
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray28
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray29
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray30
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray31
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray32
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray33
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray34
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray35
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray36
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray37
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray38
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray39
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray40
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray41
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray42
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray43
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray44
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray45
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray46
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray47
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray48
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray49
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray50
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray6
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray7
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray8
v6_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray9
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray10
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray11
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray12
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray13
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray14
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray15
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray16
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray17
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray18
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray19
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray20
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray21
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray22
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray23
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray24
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray25
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray26
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray27
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray28
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray29
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray30
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray31
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray32
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray33
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray34
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray35
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray36
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray37
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray38
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray39
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray40
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray41
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray42
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray43
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray44
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray45
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray46
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray47
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray48
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray49
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray50
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray7
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray8
v7_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray9
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray10
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray11
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray12
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray13
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray14
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray15
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray16
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray17
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray18
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray19
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray20
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray21
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray22
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray23
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray24
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray25
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray26
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray27
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray28
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray29
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray30
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray31
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray32
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray33
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray34
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray35
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray36
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray37
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray38
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray39
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray40
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray41
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray42
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray43
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray44
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray45
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray46
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray47
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray48
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray49
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray50
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray8
v8_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray9
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray10
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray11
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray12
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray13
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray14
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray15
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray16
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray17
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray18
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray19
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray20
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray21
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray22
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray23
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray24
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray25
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray26
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray27
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray28
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray29
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray30
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray31
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray32
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray33
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray34
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray35
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray36
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray37
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray38
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray39
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray40
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray41
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray42
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray43
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray44
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray45
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray46
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray47
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray48
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray49
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray50
v9_	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray9
v_nuc	src/apps/adrian/ResponsePotential.h	/^      real_function_3d v_nuc;                                          \/\/ Pointer to nuclear potential $/;"	m	class:madness::ResponsePotential
v_nuc	src/apps/bryan/ResponsePotential.h	/^      real_function_3d v_nuc;                                          \/\/ Pointer to nuclear potential $/;"	m	class:madness::ResponsePotential
vacuo_energy	src/apps/polar/moldft.cc	/^    double vacuo_energy;$/;"	m	struct:Calculation	file:
vacuo_rho	src/apps/polar/moldft.cc	/^    functionT vacuo_rho;$/;"	m	struct:Calculation	file:
val	src/apps/chem/test_SCFOperators.cc	/^	val(const coordT& xyz) const {$/;"	f	class:GaussianGuess
val	src/apps/hf/ewald.cc	/^  double val;$/;"	m	class:OnesFunctor	file:
val	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	/^struct IsComplex { enum { val=0 }; };$/;"	e	enum:elem::IsComplex::__anon13
val	src/madness/external/elemental/include/elemental/core/Complex/decl.hpp	/^struct IsComplex<Complex<Real>> { enum { val=1 }; };$/;"	e	enum:elem::IsComplex::__anon14
val	src/madness/world/test_vec.cc	/^    int val;$/;"	m	class:A	file:
val	src/madness/world/test_world.cc	/^    mutable uint64_t val;$/;"	m	class:Mary	file:
val1d_func	src/madness/world/test_world.cc	/^int val1d_func(int input) {$/;"	f
val_func	src/madness/world/test_world.cc	/^int val_func() {$/;"	f
val_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} val_t;$/;"	t	typeref:struct:__anon22
valarray_allocator	src/apps/chem/PNOStructures.h	/^	valarray_allocator(const size_t& indim) : dim(indim)  {};$/;"	f	struct:madness::valarray_allocator
valarray_allocator	src/apps/chem/PNOStructures.h	/^struct valarray_allocator{$/;"	s	namespace:madness
valmap_type	src/madness/external/muParser/muParserDef.h	/^  typedef std::map<string_type, value_type> valmap_type;$/;"	t	namespace:mu
value	src/apps/chem/QCCalculationParametersBase.h	/^	std::string value="";$/;"	m	struct:madness::QCParameter
value	src/apps/chem/SCF.h	/^	double value(const Tensor<double>& x) {$/;"	f	class:madness::MolecularEnergy
value	src/apps/chem/molecular_optimizer.h	/^    double value() const {return 0.0;}$/;"	f	class:madness::MolecularOptimizer
value	src/apps/chem/mp2.cc	/^double MP2::value() {$/;"	f	class:madness::MP2
value	src/apps/chem/mp2.cc	/^double MP2::value(const Tensor<double>& x) {$/;"	f	class:madness::MP2
value	src/apps/chem/mp2.h	/^        double value() {$/;"	f	class:madness::HartreeFock
value	src/apps/chem/mp2.h	/^        double value(const Tensor<double>& x) {$/;"	f	class:madness::HartreeFock
value	src/apps/chem/nemo.cc	/^double Nemo::value(const Tensor<double>& x) {$/;"	f	class:madness::Nemo
value	src/apps/chem/nemo.h	/^	double value() {return value(calc->molecule.get_all_coords());}$/;"	f	class:madness::Nemo
value	src/apps/chem/zcis.cc	/^double Zcis::value() {$/;"	f	class:madness::Zcis
value	src/apps/chem/znemo.cc	/^double Znemo::value(const Tensor<double>& x) {$/;"	f	class:madness::Znemo
value	src/apps/chem/znemo.h	/^	double value() {return value(mol.get_all_coords());}$/;"	f	class:madness::Znemo
value	src/apps/moldft/mcpfit.cc	/^    double value (const tensorT & x) {$/;"	f	struct:CoreFittingTarget
value	src/apps/moldft/mcpfit.cc	/^    double value() const$/;"	f	class:MySteepestDescent
value	src/apps/polar/mcpfit.cc	/^    double value (const tensorT & x) {$/;"	f	struct:CoreFittingTarget
value	src/apps/polar/mcpfit.cc	/^    double value() const$/;"	f	class:MySteepestDescent
value	src/apps/polar/moldft.cc	/^    double value(const Tensor<double> &x)$/;"	f	class:MolecularEnergy
value	src/madness/external/elemental/external/pmrrr/include/counter.h	/^  int             value;$/;"	m	struct:__anon18
value	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Complex<Real> value;$/;"	m	struct:elem::ValueInt
value	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Complex<Real> value;$/;"	m	struct:elem::ValueIntPair
value	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Real value;$/;"	m	struct:elem::ValueInt
value	src/madness/external/elemental/include/elemental/core/types/decl.hpp	/^    Real value;$/;"	m	struct:elem::ValueIntPair
value	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* value() const {$/;"	f	class:testing::TestProperty
value	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  const char* value;$/;"	m	struct:testing::internal::ConstCharPtr
value	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const bool value = __is_convertible(From, To);$/;"	m	class:testing::internal::ImplicitlyConvertible
value	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  static const bool value =$/;"	m	class:testing::internal::ImplicitlyConvertible
value	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^const bool ImplicitlyConvertible<From, To>::value;$/;"	m	class:testing::internal::ImplicitlyConvertible
value	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  static const bool value = bool_value;$/;"	m	struct:testing::internal::bool_constant
value	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^template <bool bool_value> const bool bool_constant<bool_value>::value;$/;"	m	class:testing::internal::bool_constant
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 0;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 10;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 1;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 2;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 3;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 4;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 5;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 6;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 7;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 8;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/gtest/include/gtest/internal/gtest-tuple.h	/^  static const int value = 9;$/;"	m	struct:std::tr1::tuple_size
value	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING	value;$/;"	m	class:TiXmlNode
value	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:TiXmlAttribute
value	src/madness/tensor/gfit.cc	/^    double value(const Tensor<double>& expnt) {$/;"	f	class:Fred
value	src/madness/tensor/kain.cc	/^    double value() const {return f;}$/;"	f	class:QuasiNewton
value	src/madness/tensor/kain.cc	/^    double value() const {return f;}$/;"	f	class:SteepestDescent
value	src/madness/tensor/kain.cc	/^    double value(const Tensor<double>& x) {$/;"	f	struct:Test
value	src/madness/tensor/kain.cc	/^    double value(const Tensor<double>& x) {$/;"	f	struct:Test2
value	src/madness/tensor/solvers.cc	/^        double QuasiNewton::value() const {return f;}$/;"	f	class:madness::QuasiNewton
value	src/madness/tensor/solvers.cc	/^    double SteepestDescent::value() const {return f;}$/;"	f	class:madness::SteepestDescent
value	src/madness/tensor/tensorexcept.h	/^        int value;$/;"	m	class:madness::TensorException
value	src/madness/tensor/test_solvers.cc	/^    double value(const Tensor<double>& x) {$/;"	f	struct:Test
value	src/madness/tensor/test_solvers.cc	/^    double value(const Tensor<double>& x) {$/;"	f	struct:Test2
value	src/madness/world/atomicint.h	/^        atomic_int value; \/\/\/< The atomic integer.$/;"	m	class:madness::AtomicInt
value	src/madness/world/dist_cache.h	/^                const madness::Future<valueT>& value() const { return value_; }$/;"	f	class:madness::detail::DistCache::CacheData
value	src/madness/world/function_traits.h	/^            static const bool value = sizeof(deduce<fnT>(0)) == sizeof(yes);$/;"	m	struct:madness::detail::is_functor
value	src/madness/world/function_traits.h	/^            static const bool value = true;$/;"	m	struct:madness::detail::callable_traits
value	src/madness/world/function_traits.h	/^            static const bool value = true;$/;"	m	struct:madness::detail::function_traits
value	src/madness/world/function_traits.h	/^            static const bool value = true;$/;"	m	struct:madness::detail::memfunc_traits
value	src/madness/world/function_traits.h	/^          static const bool value = true;$/;"	m	struct:madness::detail::function_traits
value	src/madness/world/future.cc	/^    const Future<void> Future<void>::value = Future<void>();$/;"	m	class:madness::Future	file:
value	src/madness/world/future.h	/^        T* const value; \/\/\/< Pointer to buffer when it holds a \\c T object.$/;"	m	class:madness::Future
value	src/madness/world/future.h	/^        static const Future<void> value;$/;"	m	class:madness::Future
value	src/madness/world/madness_exception.h	/^        const int value; \/\/\/< Value associated with the exception.$/;"	m	class:madness::MadnessException
value	src/madness/world/taskfn.h	/^            static const unsigned int value = 0u;$/;"	m	struct:madness::detail::ArgCountHelper
value	src/madness/world/taskfn.h	/^            static const unsigned int value = 1u;$/;"	m	struct:madness::detail::ArgCountHelper
value	src/madness/world/test_ar.cc	/^    int value;$/;"	m	class:linked_list	file:
value	src/madness/world/test_dc.cc	/^    double value;$/;"	m	class:Double	file:
value	src/madness/world/test_stack.cc	/^        int value;$/;"	m	class:__anon3::C	file:
value	src/madness/world/test_stack.cc	/^        static int value(const std::shared_ptr<int>& i) { return *i; }$/;"	f	struct:__anon3::StackTestBase
value	src/madness/world/test_stack.cc	/^        static int value(int* i) {$/;"	f	struct:__anon3::StackTestBase
value	src/madness/world/test_stack.cc	/^      static int value(const C& i) { return i.value; }$/;"	f	struct:__anon3::StackTestBase
value	src/madness/world/test_stack.cc	/^      static int value(const T& i) { return i; }$/;"	f	struct:__anon3::StackTestBase
value	src/madness/world/test_tree.cc	/^    double value;$/;"	m	struct:Node	file:
value	src/madness/world/test_world.cc	/^        double value;$/;"	m	struct:Node::do_random_insert	file:
value	src/madness/world/test_world.cc	/^    double value;$/;"	m	struct:Node	file:
value	src/madness/world/type_traits.h	/^      static const bool value = \\$/;"	m	struct:madness::is_trivially_serializable
value	src/madness/world/worlddc.h	/^        mutable value_type* value;    \/\/\/< holds the remote values$/;"	m	class:madness::WorldContainerIterator
value	src/madness/world/worldprofile.h	/^        T value, max, min, sum;  \/\/ local value, parallel max, min, sum$/;"	m	struct:madness::ProfileStat
valueT	src/apps/hf/solver.h	/^    typedef std::complex<T> valueT;$/;"	t	class:madness::Solver
valueT	src/apps/hf/solver.h	/^    typedef std::complex<T> valueT;$/;"	t	class:madness::Subspace
valueT	src/apps/hf/solver.h	/^    typedef std::complex<T> valueT;$/;"	t	class:madness::SubspaceK
valueT	src/madness/world/test_binsorter.cc	/^typedef std::pair<int,double> valueT;$/;"	t	file:
value_	src/madness/external/gtest/include/gtest/gtest.h	/^  std::string value_;$/;"	m	class:testing::TestProperty
value_	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^    RawType value_;  \/\/ The raw floating-point number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
value_	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  T* value_;$/;"	m	class:testing::internal::linked_ptr
value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    T value_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
value_	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    mutable scoped_ptr<const T> value_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
value_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^    T value_;$/;"	m	class:testing::internal::ThreadLocal::ValueHolder
value_	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  T value_;$/;"	m	class:testing::internal::ThreadLocal
value_	src/madness/world/dist_cache.h	/^                madness::Future<valueT> value_; \/\/\/< Local cached data$/;"	m	class:madness::detail::DistCache::CacheData
value_	src/madness/world/worldgop.h	/^            Future<valueT> value_; \/\/\/< The data to be sent$/;"	m	class:madness::WorldGopInterface::DelayedSend
value_and_gradient	src/madness/tensor/gfit.cc	/^    void value_and_gradient(const Tensor<double>& expnt,$/;"	f	class:Fred
value_and_gradient	src/madness/tensor/kain.cc	/^    virtual void value_and_gradient(const Tensor<double>& x,$/;"	f	struct:OptimizationTargetInterface
value_and_gradient	src/madness/tensor/solvers.h	/^        virtual void value_and_gradient(const Tensor<double>& x,$/;"	f	struct:madness::OptimizationTargetInterface
value_param	src/madness/external/gtest/include/gtest/gtest.h	/^  const char* value_param() const {$/;"	f	class:testing::TestInfo
value_param_	src/madness/external/gtest/include/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> value_param_;$/;"	m	class:testing::TestInfo
value_precision	src/apps/chem/molecular_optimizer.h	/^	double value_precision() const {return get<double>("value_precision");}$/;"	f	class:madness::MolecularOptimizationParameters
value_precision	src/apps/polar/mcpfit.cc	/^    const double value_precision;  \/\/ Numerical precision of value$/;"	m	class:MySteepestDescent	file:
value_precision	src/madness/tensor/kain.cc	/^    const double value_precision;  \/\/ Numerical precision of value$/;"	m	class:QuasiNewton	file:
value_precision	src/madness/tensor/kain.cc	/^    const double value_precision;  \/\/ Numerical precision of value$/;"	m	class:SteepestDescent	file:
value_precision	src/madness/tensor/solvers.h	/^        const double value_precision;  \/\/ Numerical precision of value$/;"	m	class:madness::QuasiNewton
value_type	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  typedef Element value_type;$/;"	t	class:testing::internal::NativeArray
value_type	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  typedef T value_type;$/;"	t	class:testing::internal::ParamIterator
value_type	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef T value_type;$/;"	t	struct:testing::internal::IteratorTraits
value_type	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  typedef typename Iterator::value_type value_type;$/;"	t	struct:testing::internal::IteratorTraits
value_type	src/madness/external/muParser/muParserDef.h	/^  typedef MUP_BASETYPE value_type;$/;"	t	namespace:mu
value_type	src/madness/mra/function_interface.h	/^	    typedef T value_type;$/;"	t	class:madness::FunctionFunctorInterface
value_type	src/madness/world/stack.h	/^        typedef T value_type; \/\/\/< Type of the stack elements.$/;"	t	class:madness::Stack
value_type	src/madness/world/worlddc.h	/^      typedef typename std::iterator_traits<internal_iteratorT>::value_type value_type;$/;"	t	class:madness::WorldContainerIterator
value_type	src/madness/world/worldhashmap.h	/^            typedef datumT value_type;$/;"	t	class:madness::Hash_private::HashAccessor
value_type	src/madness/world/worldhashmap.h	/^            typedef datumT value_type;$/;"	t	class:madness::Hash_private::HashIterator
values	src/madness/mra/function_interface.h	/^		coeffT values(const Key<NDIM>& key, const Tensor<double>& quad_x) const {$/;"	f	class:madness::ElementaryInterface
values	src/madness/mra/function_interface.h	/^	    virtual coeffT values(const keyT& key, const Tensor<double>& tensor) const {$/;"	f	class:madness::FunctionFunctorInterface
values1	src/madness/world/test_papi.cc	/^long long values1[NUMEVENTS];$/;"	v
values2NScoeffs	src/madness/mra/funcimpl.h	/^        GenTensor<Q> values2NScoeffs(const keyT& key, const GenTensor<Q>& values) const {$/;"	f	class:madness::FunctionImpl
values2coeffs	src/madness/mra/funcimpl.h	/^        GenTensor<Q> values2coeffs(const keyT& key, const GenTensor<Q>& values) const {$/;"	f	class:madness::FunctionImpl
values2coeffs	src/madness/mra/funcimpl.h	/^        Tensor<Q> values2coeffs(const keyT& key, const Tensor<Q>& values) const {$/;"	f	class:madness::FunctionImpl
vamo	src/apps/moldft/mcpfit.cc	/^    vecfuncT vamo, vbmo;$/;"	m	struct:Calculation	file:
vamo	src/apps/polar/mcpfit.cc	/^    vecfuncT vamo, vbmo;$/;"	m	struct:Calculation	file:
var	src/madness/world/mpi_archive.h	/^            madness::archive::VectorInputArchive var; \/\/\/< Archive for loading the buffer.$/;"	m	class:madness::archive::MPIInputArchive
var	src/madness/world/mpi_archive.h	/^            madness::archive::VectorOutputArchive var; \/\/\/< Archive for storing the buffer.$/;"	m	class:madness::archive::MPIOutputArchive
varmap_type	src/madness/external/muParser/muParserDef.h	/^  typedef std::map<string_type, value_type*> varmap_type;$/;"	t	namespace:mu
vars	src/madness/misc/phandler.h	/^    mutable double vars[MAX_DIM];              \/\/ variables used in expression$/;"	m	class:ParserHandler
vasymp	src/examples/nonlinschro.cc	/^static const double vasymp = c\/std::pow(eta_end,1.0\/3.0);$/;"	v	file:
vbmo	src/apps/moldft/mcpfit.cc	/^    vecfuncT vamo, vbmo;$/;"	m	struct:Calculation	file:
vbmo	src/apps/polar/mcpfit.cc	/^    vecfuncT vamo, vbmo;$/;"	m	struct:Calculation	file:
vcoul	src/apps/chem/SCFOperators.h	/^    real_function_3d vcoul; \/\/\/< the coulomb potential$/;"	m	class:madness::Coulomb
vcpairT	src/apps/moldft/testperiodic.cc	/^typedef std::pair<vector_complex_function_3d,vector_complex_function_3d> vcpairT;$/;"	t	file:
vdExp	src/madness/tensor/vmath.cc	/^void vdExp(int n, const double *x, double *y) {$/;"	f
vdSinCos	src/madness/tensor/vmath.cc	/^void vdSinCos(int n, const double* x, double* sinx, double* cosx) {$/;"	f
vec	src/madness/world/vector.h	/^    inline Vector<T, sizeof...(Ts) + 1> vec(T t, Ts... ts) {$/;"	f	namespace:madness
vec2tensor	src/apps/moldft/mcpfit.cc	/^static tensorT vec2tensor (const vector<double> & v) {$/;"	f	file:
vec2tensor	src/apps/polar/mcpfit.cc	/^static tensorT vec2tensor (const vector<double> & v) {$/;"	f	file:
vec3dT	src/apps/exciting/wannier.cc	/^typedef Vector<double,3> vec3dT;$/;"	t	file:
vec3dT	src/apps/hf/solver.h	/^      typedef Vector<double,NDIM> vec3dT;$/;"	t	class:madness::ComplexExp
vec_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} vec_t;$/;"	t	typeref:struct:__anon23
vecfuncT	src/apps/chem/SCF.h	/^typedef std::vector<functionT> vecfuncT;$/;"	t	namespace:madness
vecfuncT	src/apps/chem/SCFOperators.h	/^	typedef std::vector<functionT> vecfuncT;$/;"	t	class:madness::Exchange
vecfuncT	src/apps/chem/SCFOperators.h	/^    typedef std::vector<functionT> vecfuncT;$/;"	t	class:madness::DerivativeOperator
vecfuncT	src/apps/chem/SCFOperators.h	/^    typedef std::vector<functionT> vecfuncT;$/;"	t	class:madness::Kinetic
vecfuncT	src/apps/chem/SCFOperators.h	/^    typedef std::vector<functionT> vecfuncT;$/;"	t	class:madness::Laplacian
vecfuncT	src/apps/chem/SCFOperators.h	/^typedef std::vector<real_function_3d> vecfuncT;$/;"	t	namespace:madness
vecfuncT	src/apps/chem/corepotential.cc	/^typedef vector<functionT> vecfuncT;$/;"	t	namespace:madness	file:
vecfuncT	src/apps/chem/distpm.cc	/^typedef std::vector<functionT> vecfuncT;$/;"	t	namespace:madness	file:
vecfuncT	src/apps/chem/projector.h	/^    	typedef std::vector<Function<T,NDIM> > vecfuncT;$/;"	t	class:madness::StrongOrthogonalityProjector
vecfuncT	src/apps/chem/projector.h	/^        typedef std::vector<Function<T,NDIM> > vecfuncT;$/;"	t	class:madness::QProjector
vecfuncT	src/apps/chem/projector.h	/^        typedef std::vector<funcT> vecfuncT;$/;"	t	class:madness::Projector
vecfuncT	src/apps/hf/esolver.h	/^typedef std::vector<functionT> vecfuncT;$/;"	t
vecfuncT	src/apps/hf/solver.h	/^    typedef std::vector<functionT> vecfuncT;$/;"	t	class:madness::Solver
vecfuncT	src/apps/hf/solver.h	/^    typedef std::vector<functionT> vecfuncT;$/;"	t	class:madness::Subspace
vecfuncT	src/apps/hf/solver.h	/^    typedef std::vector<functionT> vecfuncT;$/;"	t	class:madness::SubspaceK
vecfuncT	src/apps/moldft/mcpfit.cc	/^typedef vector<functionT> vecfuncT;$/;"	t	file:
vecfuncT	src/apps/polar/corepotential.cc	/^typedef vector<functionT> vecfuncT;$/;"	t	file:
vecfuncT	src/apps/polar/distpm.cc	/^typedef std::vector<functionT> vecfuncT;$/;"	t	file:
vecfuncT	src/apps/polar/mcpfit.cc	/^typedef vector<functionT> vecfuncT;$/;"	t	file:
vecfuncT	src/apps/polar/moldft.cc	/^typedef std::vector<functionT> vecfuncT;$/;"	t	file:
vecfuncT	src/examples/h2dft.cc	/^typedef std::vector<functionT> vecfuncT;$/;"	t	file:
vecfuncT	src/examples/hedft.cc	/^typedef std::vector<functionT> vecfuncT;$/;"	t	file:
vecfuncT	src/examples/hefxc.cc	/^typedef std::vector<functionT> vecfuncT;$/;"	t	file:
vecfuncT	src/examples/newsolver_lda.cc	/^typedef std::vector<functionT> vecfuncT;$/;"	t	file:
vecfuncT	src/madness/mra/testbc.cc	/^typedef std::vector<functionT> vecfuncT;$/;"	t	file:
vecsubspaceT	src/apps/hf/solver.h	/^    typedef std::vector<subspaceT> vecsubspaceT;$/;"	t	class:madness::Solver
vecsubspaceT	src/apps/hf/solver.h	/^    typedef std::vector<subspaceT> vecsubspaceT;$/;"	t	class:madness::SubspaceK
vectensorT	src/apps/hf/solver.h	/^    typedef std::vector<tensorT> vectensorT;$/;"	t	class:madness::Solver
vectensorT	src/apps/hf/solver.h	/^    typedef std::vector<tensorT> vectensorT;$/;"	t	class:madness::SubspaceK
vector	src/madness/mra/tools/mathutil.py	/^def vector(n):$/;"	f
vector	src/madness/mra/tools/twoscalecoeffs.py	/^def vector(n):$/;"	f
vector3D	src/apps/nick/test.cc	/^typedef Vector<double,NDIM> vector3D;$/;"	t	file:
vector3D	src/apps/nick/wavef.h	/^    typedef madness::Vector<double,NDIM> vector3D;$/;"	t	class:baseWF
vector3D	src/apps/nick/wavef.h	/^typedef madness::Vector<double,NDIM> vector3D;$/;"	t
vector3D	src/apps/nick/wfSlice.cc	/^typedef Vector<double,NDIM> vector3D;$/;"	t	file:
vectorColComm_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^              vectorColComm_, vectorRowComm_;$/;"	m	class:elem::Grid
vectorColToViewingMap_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    std::vector<int> vectorColToViewingMap_;$/;"	m	class:elem::Grid
vectorLengthFunctor	src/apps/exciting/wannier.cc	/^  struct vectorLengthFunctor : public binary_function<vec3dT, vec3dT, bool>$/;"	s	class:ExcitingApp	file:
vectorLengthFunctor	src/apps/hf/ewald.cc	/^struct vectorLengthFunctor : public std::binary_function<Vector<double,3>, Vector<double,3>, bool>$/;"	s	file:
vectorRowComm_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^              vectorColComm_, vectorRowComm_;$/;"	m	class:elem::Grid
vectorT	src/madness/world/future.h	/^        typedef typename std::vector< Future<T> > vectorT;$/;"	t	class:madness::Future
vector_	src/madness/tensor/srconf.h	/^		std::vector<tensorT> vector_;$/;"	m	class:madness::SRConf
vector_complex	src/madness/mra/functypedefs.h	/^    typedef std::vector< std::complex<double> > vector_complex;$/;"	t	namespace:madness
vector_complex_function_1d	src/madness/mra/functypedefs.h	/^    typedef std::vector<complex_function_1d> vector_complex_function_1d;$/;"	t	namespace:madness
vector_complex_function_2d	src/madness/mra/functypedefs.h	/^    typedef std::vector<complex_function_2d> vector_complex_function_2d;$/;"	t	namespace:madness
vector_complex_function_3d	src/madness/mra/functypedefs.h	/^    typedef std::vector<complex_function_3d> vector_complex_function_3d;$/;"	t	namespace:madness
vector_complex_function_4d	src/madness/mra/functypedefs.h	/^    typedef std::vector<complex_function_4d> vector_complex_function_4d;$/;"	t	namespace:madness
vector_complex_function_5d	src/madness/mra/functypedefs.h	/^    typedef std::vector<complex_function_5d> vector_complex_function_5d;$/;"	t	namespace:madness
vector_complex_function_6d	src/madness/mra/functypedefs.h	/^    typedef std::vector<complex_function_6d> vector_complex_function_6d;$/;"	t	namespace:madness
vector_coord_1d	src/madness/mra/functypedefs.h	/^    typedef std::vector< Vector<double,1> > vector_coord_1d;$/;"	t	namespace:madness
vector_coord_2d	src/madness/mra/functypedefs.h	/^    typedef std::vector< Vector<double,2> > vector_coord_2d;$/;"	t	namespace:madness
vector_coord_3d	src/madness/mra/functypedefs.h	/^    typedef std::vector< Vector<double,3> > vector_coord_3d;$/;"	t	namespace:madness
vector_coord_4d	src/madness/mra/functypedefs.h	/^    typedef std::vector< Vector<double,4> > vector_coord_4d;$/;"	t	namespace:madness
vector_coord_5d	src/madness/mra/functypedefs.h	/^    typedef std::vector< Vector<double,5> > vector_coord_5d;$/;"	t	namespace:madness
vector_coord_6d	src/madness/mra/functypedefs.h	/^    typedef std::vector< Vector<double,6> > vector_coord_6d;$/;"	t	namespace:madness
vector_factory	src/madness/tensor/vector_factory.h	/^    inline std::vector<T> vector_factory(const T& v0) {$/;"	f	namespace:madness
vector_factory	src/madness/tensor/vector_factory.h	/^    inline std::vector<T> vector_factory(const T& v0, const T& v1) {$/;"	f	namespace:madness
vector_factory	src/madness/tensor/vector_factory.h	/^    inline std::vector<T> vector_factory(const T& v0, const T& v1,$/;"	f	namespace:madness
vector_norm	src/madness/mra/tools/mathutil.py	/^def vector_norm(x):$/;"	f
vector_real	src/madness/mra/functypedefs.h	/^    typedef std::vector<double> vector_real;$/;"	t	namespace:madness
vector_real_function_1d	src/madness/mra/functypedefs.h	/^    typedef std::vector<real_function_1d> vector_real_function_1d;$/;"	t	namespace:madness
vector_real_function_2d	src/madness/mra/functypedefs.h	/^    typedef std::vector<real_function_2d> vector_real_function_2d;$/;"	t	namespace:madness
vector_real_function_3d	src/madness/mra/functypedefs.h	/^    typedef std::vector<real_function_3d> vector_real_function_3d;$/;"	t	namespace:madness
vector_real_function_4d	src/madness/mra/functypedefs.h	/^    typedef std::vector<real_function_4d> vector_real_function_4d;$/;"	t	namespace:madness
vector_real_function_5d	src/madness/mra/functypedefs.h	/^    typedef std::vector<real_function_5d> vector_real_function_5d;$/;"	t	namespace:madness
vector_real_function_6d	src/madness/mra/functypedefs.h	/^    typedef std::vector<real_function_6d> vector_real_function_6d;$/;"	t	namespace:madness
vector_stats	src/apps/chem/SCF.cc	/^void SCF::vector_stats(const std::vector<double> &v, double &rms,$/;"	f	class:madness::SCF
vector_stats	src/apps/polar/moldft.cc	/^    void vector_stats(const std::vector<double> &v, double &rms, double &maxabsval)$/;"	f	struct:Calculation
velocity	src/examples/tdse1d.cc	/^static const double velocity = 3.0;$/;"	v	file:
velocity	src/examples/testspectralprop.cc	/^static const double velocity = 3.0;$/;"	v	file:
verbosity_	src/apps/chem/pointgroupsymmetry.h	/^	int verbosity_=1;$/;"	m	class:madness::projector_irrep
verify	src/apps/chem/PNOStructures.h	/^	void verify()const{$/;"	f	struct:madness::PNOPairs
verify	src/madness/mra/mra.h	/^        inline void verify() const {$/;"	f	class:madness::Function
verify	src/madness/tensor/tensortrain.h	/^		bool verify() const {$/;"	f	class:madness::TensorTrain
verify_tree	src/apps/chem/SCF.cc	/^static void verify_tree(World &world, const std::vector<Function<T, NDIM>> &v)$/;"	f	namespace:madness
verify_tree	src/madness/mra/mra.h	/^        void verify_tree() const {$/;"	f	class:madness::Function
verify_tree	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::verify_tree() const {$/;"	f	class:madness::FunctionImpl
version	src/madness/external/tinyxml/tinyxml.h	/^	TIXML_STRING version;$/;"	m	class:TiXmlDeclaration
version	src/madness/world/info.cc	/^        const char* version() {$/;"	f	namespace:madness::info
vfT	src/apps/chem/PNOStructures.h	/^	typedef std::valarray<vector_real_function_3d> vfT ;$/;"	t	struct:madness::PNOPairs
vfilter	src/madness/tensor/mtxmq_graveyard/new_mtxmq/bgq_results_parse.py	/^            vfilter = list(filter(lambda x: x[0] == variant, pcfilter))$/;"	v
vi	src/examples/he.cc	/^static const long vi = 1;        \/\/ potential (all, pot1\/2, eri, Vpsi_eri)$/;"	v	file:
viewType_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    ViewType viewType_;$/;"	m	class:elem::AbstractBlockDistMatrix
viewType_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    ViewType viewType_;$/;"	m	class:elem::AbstractDistMatrix
viewType_	src/madness/external/elemental/include/elemental/core/Matrix.hpp	/^    ViewType viewType_;$/;"	m	class:elem::Matrix
viewingComm_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    mpi::Comm viewingComm_; \/\/ all processes that create the grid$/;"	m	class:elem::Grid
viewingGroup_	src/madness/external/elemental/include/elemental/core/Grid/decl.hpp	/^    mpi::Group viewingGroup_;$/;"	m	class:elem::Grid
vimpl	src/madness/mra/mra.h	/^        static std::vector< std::shared_ptr< FunctionImpl<Q,D> > > vimpl(const std::vector< Function<Q,D> >& v) {$/;"	f	class:madness::Function
virtual_fn	src/madness/world/test_ar.cc	/^  virtual void virtual_fn() {}$/;"	f	struct:__anon8::Member
vk	src/madness/mra/derivative.h	/^        const std::vector<long> vk; \/\/\/< (k,...) used to initialize Tensors$/;"	m	class:madness::DerivativeBase
vk	src/madness/mra/function_common_data.h	/^        std::vector<long> vk; \/\/\/< (k,...) used to initialize Tensors$/;"	m	class:madness::FunctionCommonData
vk	src/madness/mra/operator.h	/^        const std::vector<long> vk;$/;"	m	class:madness::SeparatedConvolution
vl	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double           *vl;$/;"	m	struct:__anon22
vlocalp	src/apps/chem/gth_pseudopotential.h	/^    real_function_3d vlocalp;$/;"	m	class:madness::GTHPseudopotential
vlocalp	src/apps/polar/gth_pseudopotential.h	/^    real_function_3d vlocalp;$/;"	m	class:GTHPseudopotential
vlocalpot	src/apps/chem/gth_pseudopotential.h	/^    real_function_3d vlocalpot() {$/;"	f	class:madness::GTHPseudopotential
vmulXX	src/madness/mra/mra.h	/^        void vmulXX(const Function<L,NDIM>& left,$/;"	f	class:madness::Function
vmulXX	src/madness/mra/mra.h	/^    vmulXX(const Function<L,D>& left, const std::vector< Function<R,D> >& vright, double tol, bool fence=true) {$/;"	f	namespace:madness
vnuc	src/apps/chem/potentialmanager.h	/^real_function_3d vnuc;$/;"	m	class:madness::PotentialManager
vnuc	src/apps/polar/potentialmanager.h	/^real_function_3d vnuc;$/;"	m	class:PotentialManager
vnuc	src/examples/testspectralprop.cc	/^real_function_1d vnuc(World& world, double t) {$/;"	f
vnuc_cache	src/examples/testspectralprop.cc	/^std::vector< std::pair<double, real_function_1d> > vnuc_cache;$/;"	v
vnuc_mo	src/apps/chem/znemo.h	/^		std::vector<complex_function_3d> vnuc_mo;$/;"	m	struct:madness::Znemo::potentials
vnucextra	src/apps/chem/CalculationParameters.h	/^	int vnucextra() const {return get<int>("vnucextra");}$/;"	f	struct:madness::CalculationParameters
vnucextra	src/apps/polar/moldft.cc	/^    static const int vnucextra = 12; \/\/ load balance parameter for nuclear pot.$/;"	m	struct:Calculation	file:
vnuclear	src/apps/chem/potentialmanager.h	/^    const real_function_3d& vnuclear() {$/;"	f	class:madness::PotentialManager
vnuclear	src/apps/polar/potentialmanager.h	/^    real_function_3d vnuclear() {$/;"	f	class:PotentialManager
voidT	src/madness/world/taskfn.h	/^        typedef Future<void> voidT;$/;"	t	namespace:madness::detail
voidT	src/madness/world/world_object.h	/^        typedef detail::voidT voidT;$/;"	t	class:madness::WorldObject
voidT	src/madness/world/world_task_queue.h	/^        typedef detail::voidT voidT;$/;"	t	class:madness::WorldTaskQueue
void_ptr	src/madness/world/deferred_cleanup.h	/^            typedef std::shared_ptr<void> void_ptr; \/\/\/< input pointer type$/;"	t	class:madness::detail::DeferredCleanup
void_ptr_list	src/madness/world/deferred_cleanup.h	/^            typedef std::list<void_ptr> void_ptr_list;$/;"	t	class:madness::detail::DeferredCleanup
vol_nsphere	src/madness/mra/funcimpl.h	/^        double vol_nsphere(int n, double R) {$/;"	f	class:madness::FunctionImpl
volatile	build/CMakeFiles/3.8.0-rc1/CompilerIdC/CMakeCCompilerId.c	11;"	d	file:
volatile	src/madness/external/elemental/external/pmrrr/include/global.h	74;"	d
volume_two_spheres	src/examples/molecularsurface.cc	/^double volume_two_spheres(double r1, double r2, double d) {$/;"	f
vq	src/madness/mra/function_common_data.h	/^        std::vector<long> vq; \/\/\/< (npt,...) used to initialize Tensors$/;"	m	class:madness::FunctionCommonData
vrhoa	src/apps/chem/plotxc.cc	/^  double vrhoa, vrhob;$/;"	m	struct:xcfunc_data_point	file:
vrhoa	src/apps/chem/testlda.cc	/^  double vrhoa, vrhob;$/;"	m	struct:xcfunc_data_point	file:
vrhoa	src/apps/chem/testxc.cc	/^  double vrhoa, vrhob;$/;"	m	struct:xcfunc_data_point	file:
vrhoa	src/apps/polar/testxc.cc	/^  double vrhoa, vrhob;$/;"	m	struct:xcfunc_data_point	file:
vrhob	src/apps/chem/plotxc.cc	/^  double vrhoa, vrhob;$/;"	m	struct:xcfunc_data_point	file:
vrhob	src/apps/chem/testlda.cc	/^  double vrhoa, vrhob;$/;"	m	struct:xcfunc_data_point	file:
vrhob	src/apps/chem/testxc.cc	/^  double vrhoa, vrhob;$/;"	m	struct:xcfunc_data_point	file:
vrhob	src/apps/polar/testxc.cc	/^  double vrhoa, vrhob;$/;"	m	struct:xcfunc_data_point	file:
vshift	src/examples/nonlinschro.cc	/^static const double vshift = -3.0; \/\/ Only impacts BSH operator$/;"	v	file:
vsigmaaa	src/apps/chem/plotxc.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmaaa	src/apps/chem/testlda.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmaaa	src/apps/chem/testxc.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmaaa	src/apps/polar/testxc.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmaab	src/apps/chem/plotxc.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmaab	src/apps/chem/testlda.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmaab	src/apps/chem/testxc.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmaab	src/apps/polar/testxc.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmabb	src/apps/chem/plotxc.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmabb	src/apps/chem/testlda.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmabb	src/apps/chem/testxc.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsigmabb	src/apps/polar/testxc.cc	/^  double vsigmaaa, vsigmaab, vsigmabb;$/;"	m	struct:xcfunc_data_point	file:
vsnprintf	src/madness/external/gtest/src/gtest.cc	139;"	d	file:
vtol	src/apps/chem/SCF.h	/^	double vtol;$/;"	m	class:madness::SCF
vtol	src/apps/chem/correlationfactor.h	/^	double vtol;$/;"	m	class:madness::NuclearCorrelationFactor
vtol	src/apps/chem/electronic_correlation_factor.h	/^    double vtol;        \/\/\/< initial projection threshold$/;"	m	class:madness::CorrelationFactor2
vtol	src/apps/moldft/mcpfit.cc	/^    double vtol;                    \/\/\/< multiplication tolerance$/;"	m	struct:Calculation	file:
vtol	src/apps/polar/mcpfit.cc	/^    double vtol;                    \/\/\/< multiplication tolerance$/;"	m	struct:Calculation	file:
vtol	src/apps/polar/moldft.cc	/^    double vtol;$/;"	m	struct:Calculation	file:
vtransform	src/madness/mra/funcimpl.h	/^        void vtransform(const std::vector< std::shared_ptr< FunctionImpl<R,NDIM> > >& vright,$/;"	f	class:madness::FunctionImpl
vtransform	src/madness/mra/mra.h	/^        void vtransform(const std::vector< Function<R,NDIM> >& v,$/;"	f	class:madness::Function
vtransform_doit	src/madness/mra/funcimpl.h	/^        void vtransform_doit(const std::shared_ptr< FunctionImpl<R,NDIM> >& right,$/;"	f	class:madness::FunctionImpl
vu	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  double           *vu;$/;"	m	struct:__anon22
vv	src/apps/chem/diamagneticpotentialfactor.cc	/^	const std::vector<coord_3d>& vv;$/;"	m	struct:madness::R_times_arg_div_R	file:
vxc	src/apps/chem/xcfunctional_ldaonly.cc	/^std::vector<madness::Tensor<double> > XCfunctional::vxc(const std::vector< madness::Tensor<double> >& t,$/;"	f	class:madness::XCfunctional
vxc	src/apps/chem/xcfunctional_libxc.cc	/^std::vector<madness::Tensor<double> > XCfunctional::vxc($/;"	f	class:madness::XCfunctional
vxc	src/apps/polar/xcfunctional_ldaonly.cc	/^madness::Tensor<double> XCfunctional::vxc(const std::vector< madness::Tensor<double> >& t, const int ispin, const int what) const$/;"	f	class:madness::XCfunctional
vxc	src/apps/polar/xcfunctional_libxc.cc	/^madness::Tensor<double> XCfunctional::vxc(const std::vector< madness::Tensor<double> >& t, const int ispin, const int what) const$/;"	f	class:madness::XCfunctional
vzExp	src/madness/tensor/vmath.cc	/^void vzExp(int n, const double_complex* x, double_complex* y) {$/;"	f
w	src/examples/spectralprop.h	/^        std::vector<double> w;  \/\/\/< Quadrature weights on [0,1] with value 0 prepended$/;"	m	class:madness::SpectralPropagator
w	src/examples/spectralprop.h	/^        std::vector<double> w;$/;"	m	class:madness::SpectralPropagatorGaussLobatto
w	src/madness/tensor/gfit.cc	/^    const Tensor<double> f, x, w;$/;"	m	class:Fred	file:
wTime	src/apps/nick/extract.py	/^    wTime = float(time[2]) # wall time$/;"	v
w_file	src/apps/moldft/fci/crayio.c	/^static struct w_file {$/;"	s	file:
wait	src/madness/world/worldmutex.cc	/^    void MutexWaiter::wait() {$/;"	f	class:madness::MutexWaiter
wait	src/madness/world/worldmutex.h	/^        void wait() const {$/;"	f	class:madness::ConditionVariable
wait	src/madness/world/worldmutex.h	/^        void wait() const {$/;"	f	class:madness::PthreadConditionVariable
wait_until_refined	src/madness/external/elemental/external/pmrrr/include/tasks.h	/^  bool       wait_until_refined;$/;"	m	struct:__anon16
walker1	src/madness/world/test_world.cc	/^void walker1(WorldContainer<Key,Node>& d, const Key& key) {$/;"	f
walker2	src/madness/world/test_world.cc	/^void walker2(WorldContainer<Key,Node>& d, const Key& key) {$/;"	f
wall_start	src/madness/world/worldprofile.cc	/^    double WorldProfile::wall_start = madness::wall_time();$/;"	m	class:madness::WorldProfile	file:
wall_start	src/madness/world/worldprofile.h	/^        static double wall_start;$/;"	m	class:madness::WorldProfile
wall_time	src/madness/world/timers.cc	/^    double wall_time() {$/;"	f	namespace:madness
walltm_	src/apps/moldft/fci/crayio.c	/^void walltm_(double *ai)$/;"	f
wannierf	src/apps/exciting/wannier.cc	/^    wannierf(int n, int rindx, const cfunctionT& g) :$/;"	f	struct:ExcitingApp::wannierf
wannierf	src/apps/exciting/wannier.cc	/^  struct wannierf$/;"	s	class:ExcitingApp	file:
warning	src/apps/chem/CCStructures.cc	/^  CCMessenger::warning(const std::string& msg) const {$/;"	f	class:madness::CCMessenger
warning	src/apps/chem/CCStructures.h	/^    size_t warning(World& world,const std::string &msg)const{$/;"	f	struct:madness::CCParameters
warnings	src/apps/chem/CCStructures.h	/^    mutable std::vector<std::string> warnings;$/;"	m	struct:madness::CCMessenger
wave_function_exists	src/apps/nick/extra.cc	/^bool wave_function_exists(World& world, int step) {$/;"	f
wave_function_exists	src/apps/nick/hello.cc	/^bool wave_function_exists(World& world, int step) {$/;"	f
wave_function_exists	src/apps/nick/lineplot.cc	/^bool wave_function_exists(World& world, int step) {$/;"	f
wave_function_exists	src/apps/nick/tdse1.cc	/^bool wave_function_exists(World& world, int step) {$/;"	f
wave_function_exists	src/apps/nick/test.cc	/^bool wave_function_exists(World& world, int step) {$/;"	f
wave_function_exists	src/apps/nick/wfSlice.cc	/^bool wave_function_exists(World& world, int step) {$/;"	f
wave_function_exists	src/apps/tdse/tdse.cc	/^bool wave_function_exists(World& world, int step) {$/;"	f
wave_function_exists	src/apps/tdse/tdse.confused.cc	/^bool wave_function_exists(World& world, int step) {$/;"	f
wave_function_exists	src/apps/tdse/tdse4.cc	/^bool wave_function_exists(World& world, int step) {$/;"	f
wave_function_filename	src/apps/nick/extra.cc	/^const char* wave_function_filename(int step) {$/;"	f
wave_function_filename	src/apps/nick/hello.cc	/^const char* wave_function_filename(int step) {$/;"	f
wave_function_filename	src/apps/nick/lineplot.cc	/^const char* wave_function_filename(int step) {$/;"	f
wave_function_filename	src/apps/nick/tdse1.cc	/^const char* wave_function_filename(int step) {$/;"	f
wave_function_filename	src/apps/nick/test.cc	/^const char* wave_function_filename(int step) {$/;"	f
wave_function_filename	src/apps/nick/wfSlice.cc	/^const char* wave_function_filename(int step) {$/;"	f
wave_function_filename	src/apps/tdse/tdse.cc	/^const char* wave_function_filename(int step) {$/;"	f
wave_function_filename	src/apps/tdse/tdse.confused.cc	/^const char* wave_function_filename(int step) {$/;"	f
wave_function_filename	src/apps/tdse/tdse4.cc	/^const char* wave_function_filename(int step) {$/;"	f
wave_function_large_plot_filename	src/apps/nick/tdse1.cc	/^const char* wave_function_large_plot_filename(int step) {$/;"	f
wave_function_large_plot_filename	src/apps/tdse/tdse.cc	/^const char* wave_function_large_plot_filename(int step) {$/;"	f
wave_function_large_plot_filename	src/apps/tdse/tdse.confused.cc	/^const char* wave_function_large_plot_filename(int step) {$/;"	f
wave_function_large_plot_filename	src/apps/tdse/tdse4.cc	/^const char* wave_function_large_plot_filename(int step) {$/;"	f
wave_function_load	src/apps/nick/extra.cc	/^complex_functionT wave_function_load(World& world, int step) {$/;"	f
wave_function_load	src/apps/nick/hello.cc	/^complex_functionT wave_function_load(World& world, int step) {$/;"	f
wave_function_load	src/apps/nick/lineplot.cc	/^complex_functionT wave_function_load(World& world, int step) {$/;"	f
wave_function_load	src/apps/nick/tdse1.cc	/^complex_functionT wave_function_load(World& world, int step) {$/;"	f
wave_function_load	src/apps/nick/test.cc	/^complex_functionT wave_function_load(World& world, int step) {$/;"	f
wave_function_load	src/apps/nick/wfSlice.cc	/^complex_functionT wave_function_load(World& world, int step) {$/;"	f
wave_function_load	src/apps/tdse/tdse.cc	/^complex_functionT wave_function_load(World& world, int step) {$/;"	f
wave_function_load	src/apps/tdse/tdse.confused.cc	/^complex_functionT wave_function_load(World& world, int step) {$/;"	f
wave_function_load	src/apps/tdse/tdse4.cc	/^complex_functionT wave_function_load(World& world, int step) {$/;"	f
wave_function_small_plot_filename	src/apps/nick/tdse1.cc	/^const char* wave_function_small_plot_filename(int step) {$/;"	f
wave_function_small_plot_filename	src/apps/tdse/tdse.cc	/^const char* wave_function_small_plot_filename(int step) {$/;"	f
wave_function_small_plot_filename	src/apps/tdse/tdse.confused.cc	/^const char* wave_function_small_plot_filename(int step) {$/;"	f
wave_function_small_plot_filename	src/apps/tdse/tdse4.cc	/^const char* wave_function_small_plot_filename(int step) {$/;"	f
wave_function_store	src/apps/nick/extra.cc	/^void wave_function_store(World& world, int step, const complex_functionT& psi) {$/;"	f
wave_function_store	src/apps/nick/hello.cc	/^void wave_function_store(World& world, int step, const complex_functionT& psi) {$/;"	f
wave_function_store	src/apps/nick/tdse1.cc	/^void wave_function_store(World& world, int step, const complex_functionT& psi) {$/;"	f
wave_function_store	src/apps/nick/test.cc	/^void wave_function_store(World& world, int step, const complex_functionT& psi) {$/;"	f
wave_function_store	src/apps/nick/wfSlice.cc	/^void wave_function_store(World& world, int step, const complex_functionT& psi) {$/;"	f
wave_function_store	src/apps/tdse/tdse.cc	/^void wave_function_store(World& world, int step, const complex_functionT& psi) {$/;"	f
wave_function_store	src/apps/tdse/tdse.confused.cc	/^void wave_function_store(World& world, int step, const complex_functionT& psi) {$/;"	f
wave_function_store	src/apps/tdse/tdse4.cc	/^void wave_function_store(World& world, int step, const complex_functionT& psi) {$/;"	f
waveorder	src/apps/hf/electronicstructureparams.h	/^  int waveorder;$/;"	m	struct:madness::ElectronicStructureParams
wclose_	src/apps/moldft/fci/crayio.c	/^void wclose_(integer* unit, integer* ierr)$/;"	f
weight	src/apps/hf/eigsolver.h	/^  double weight() {return _weight;}$/;"	f	class:madness::KPoint
weight	src/apps/hf/esolver.h	/^  double weight;$/;"	m	struct:KPoint
weight	src/apps/moldft/fci/fci.F	/^      double precision thresh, prthresh, weight(/;"	v	program:fci
weight	src/madness/mra/minmax/y.cc	/^FLOAT weight(const FLOAT& x) {$/;"	f
weight	src/madness/mra/minmax/y.cc	/^void weight(const FLOAT& x, FLOAT& f, FLOAT& d1f, FLOAT& d2f) {$/;"	f
weight	src/madness/mra/minmax/y1.cc	/^FLOAT weight(const FLOAT& x) {$/;"	f
weight	src/madness/mra/minmax/y1.cc	/^void weight(const FLOAT& x, FLOAT& f, FLOAT& d1f, FLOAT& d2f) {$/;"	f
weight	src/madness/mra/minmax/y_signed.cc	/^FLOAT weight(const FLOAT& x) {$/;"	f
weight	src/madness/mra/minmax/y_signed.cc	/^void weight(const FLOAT& x, FLOAT& f, FLOAT& d1f, FLOAT& d2f) {$/;"	f
weight	src/madness/mra/minmax/y_varx.cc	/^FLOAT weight(const FLOAT& x) {$/;"	f
weight	src/madness/mra/minmax/y_varx.cc	/^void weight(const FLOAT& x, FLOAT& f, FLOAT& d1f, FLOAT& d2f) {$/;"	f
weights	src/madness/mra/legendre.cc	/^    static Tensor<double> weights[max_npt+1];$/;"	m	namespace:madness	file:
weights	src/madness/mra/tools/quadrature.py	/^    def weights(self):$/;"	m	class:Quadrature
weights	src/madness/tensor/srconf.h	/^		double weights(const unsigned int& i) const {return weights_(i);};$/;"	f	class:madness::SRConf
weights_	src/madness/tensor/srconf.h	/^		Tensor< typename Tensor<T>::scalar_type >  weights_;$/;"	m	class:madness::SRConf
wget	cmake/Makefile	/^wget := $(shell wget 2>\/dev\/null)$/;"	m
what	src/apps/polar/xcfunctional.h	/^    const int what;$/;"	m	struct:madness::xc_kernel
what	src/apps/polar/xcfunctional.h	/^    const int what;$/;"	m	struct:madness::xc_potential
what	src/madness/tensor/tensorexcept.h	/^        virtual const char* what() const throw() {$/;"	f	class:madness::TensorException
what	src/madness/world/madness_exception.h	/^        virtual const char* what() const throw() {$/;"	f	class:madness::MadnessException
what	src/madness/world/safempi.h	/^        virtual const char* what() const throw() { return mpi_error_string_; }$/;"	f	class:SafeMPI::Exception
what_am_i	src/madness/tensor/gentensor.h	/^		static std::string what_am_i(const TensorType& tt) {$/;"	f	struct:madness::TensorArgs
what_am_i	src/madness/tensor/gentensor.h	/^        std::string what_am_i() const {return "GenTensor, aliased to Tensor";};$/;"	f	class:madness::GenTensor
what_am_i	src/madness/tensor/gentensor.h	/^    std::string what_am_i() const {return TensorArgs::what_am_i(this->tensor_type());};$/;"	f	class:madness::GenTensor
why	src/apps/nick/mpreal.h	/^	std::string why() { return "inexact conversion from floating point"; }$/;"	f	class:mpfr::conversion_overflow
width	src/madness/mra/qmprop.cc	/^        double width;$/;"	m	class:madness::BandlimitedPropagator	file:
width_	src/apps/chem/GuessFactory.h	/^	const double width_;$/;"	m	class:madness::guessfactory::GaussFunctor
width_	src/madness/external/elemental/include/elemental/core/BlockDistMatrix/Abstract.hpp	/^    Int height_, width_;$/;"	m	class:elem::AbstractBlockDistMatrix
width_	src/madness/external/elemental/include/elemental/core/DistMatrix/Abstract.hpp	/^    Int height_, width_;$/;"	m	class:elem::AbstractDistMatrix
width_	src/madness/external/elemental/include/elemental/core/Matrix.hpp	/^    Int height_, width_, ldim_;$/;"	m	class:elem::Matrix
woT	src/madness/mra/derivative.h	/^        typedef WorldObject< DerivativeBase<T, NDIM> > woT;$/;"	t	class:madness::DerivativeBase
woT	src/madness/mra/funcimpl.h	/^        typedef WorldObject< FunctionImpl<T,NDIM> > woT; \/\/\/< Base class world object type$/;"	t	class:madness::FunctionImpl
wopen_	src/apps/moldft/fci/crayio.c	/^void wopen_(integer* unit, char* name, integer* blocks, integer* stats, integer* ierr, int lennam)$/;"	f
word	src/apps/nick/extract.py	/^                    word = line.split()$/;"	v
word	src/apps/nick/extract.py	/^            word = line.split()$/;"	v
word	src/apps/nick/parse.py	/^                        word = line.split()$/;"	v
words	src/apps/nick/extract.py	/^            words  = line.split()$/;"	v
words	src/apps/nick/extract.py	/^            words = line.split()$/;"	v
words_read	src/apps/moldft/fci/crayio.c	/^  double words_read;         \/* total no. of words read *\/$/;"	m	struct:w_file	file:
words_write	src/apps/moldft/fci/crayio.c	/^  double words_write;        \/* total no. of words written *\/$/;"	m	struct:w_file	file:
work	src/apps/moldft/fci/fci.F	/^      double precision work(/;"	v	program:fci
workQ	src/madness/external/elemental/external/pmrrr/include/structs.h	/^  workQ_t      *workQ;$/;"	m	struct:__anon31
workQ_t	src/madness/external/elemental/external/pmrrr/include/structs.h	/^} workQ_t;$/;"	t	typeref:struct:__anon27
work_even	src/madness/world/test_world.cc	/^void work_even(World& world) {$/;"	f
work_odd	src/madness/world/test_world.cc	/^void work_odd(World& world) {$/;"	f
world	src/apps/adrian/ResponsePotential.h	/^      World& world;                                                    \/\/ MPI communicator$/;"	m	class:madness::ResponsePotential
world	src/apps/adrian/TDDFT.cc	/^  World &world;$/;"	m	struct:TDHF_allocator	file:
world	src/apps/adrian/TDHF.cc	/^   World& world;$/;"	m	struct:TDHF_allocator	file:
world	src/apps/adrian/TDHF2.cc	/^   World& world;$/;"	m	struct:TDHF_allocator	file:
world	src/apps/bryan/ResponsePotential.h	/^      World& world;                                                    \/\/ MPI communicator$/;"	m	class:madness::ResponsePotential
world	src/apps/bryan/TDHF.cc	/^   World& world;$/;"	m	struct:TDHF_allocator	file:
world	src/apps/bryan/TDHF2.cc	/^   World& world;$/;"	m	struct:TDHF_allocator	file:
world	src/apps/chem/CC2.h	/^    World &world;$/;"	m	class:madness::CC2
world	src/apps/chem/CCPotentials.h	/^    World & world;$/;"	m	class:madness::CCPotentials
world	src/apps/chem/CCStructures.h	/^    World & world;$/;"	m	struct:madness::CCMessenger
world	src/apps/chem/CCStructures.h	/^    World & world;$/;"	m	struct:madness::CCTimer
world	src/apps/chem/CCStructures.h	/^    World &world;$/;"	m	struct:madness::CCConvolutionOperator
world	src/apps/chem/CCStructures.h	/^    World &world;$/;"	m	struct:madness::CCIntermediatePotentials
world	src/apps/chem/CCStructures.h	/^    World &world;$/;"	m	struct:madness::CCPairFunction
world	src/apps/chem/PNO.h	/^	World& world;$/;"	m	class:madness::PNO
world	src/apps/chem/PNOF12Potentials.h	/^	World& world;															\/\/\/< MPI Communicator$/;"	m	class:madness::F12Potentials
world	src/apps/chem/PNOGuessFunctions.h	/^	World& world;$/;"	m	class:madness::BasisFunctions
world	src/apps/chem/PNOStructures.h	/^	World& world;$/;"	m	class:madness::ParametrizedExchange
world	src/apps/chem/PNOStructures.h	/^	World& world;$/;"	m	struct:madness::MyTimer
world	src/apps/chem/SCF.h	/^	World& world;$/;"	m	class:madness::MolecularEnergy
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::Coulomb
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::DNuclear
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::DerivativeOperator
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::Exchange
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::Fock
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::Kinetic
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::Laplacian
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::Lz
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::Nuclear
world	src/apps/chem/SCFOperators.h	/^    World& world;$/;"	m	class:madness::XCOperator
world	src/apps/chem/SCFProtocol.h	/^    World& world;$/;"	m	class:madness::SCFProtocol
world	src/apps/chem/TDHF.cc	/^	World& world;$/;"	m	struct:madness::TDHF_allocator	file:
world	src/apps/chem/TDHF.h	/^	World& world;$/;"	m	class:madness::TDHF
world	src/apps/chem/correlationfactor.h	/^	World& world;$/;"	m	class:madness::NuclearCorrelationFactor
world	src/apps/chem/diamagneticpotentialfactor.h	/^	World& world;				\/\/\/< the world$/;"	m	class:madness::Diamagnetic_potential_factor
world	src/apps/chem/electronic_correlation_factor.h	/^    World& world;$/;"	m	class:madness::CorrelationFactor
world	src/apps/chem/electronic_correlation_factor.h	/^    World& world;$/;"	m	class:madness::CorrelationFactor2
world	src/apps/chem/mp2.h	/^        World& world;                           \/\/\/< the world$/;"	m	class:madness::MP2
world	src/apps/chem/mp2.h	/^        World& world;$/;"	m	class:madness::HartreeFock
world	src/apps/chem/nemo.h	/^	World& world;$/;"	m	class:madness::NemoBase
world	src/apps/chem/nemo.h	/^	World& world;$/;"	m	struct:madness::allocator
world	src/apps/chem/nemo.h	/^        World& world;$/;"	m	struct:madness::Nemo::timer
world	src/apps/chem/projector.h	/^        World& world;$/;"	m	class:madness::StrongOrthogonalityProjector
world	src/apps/chem/test_correlation_factor.h	/^	World &world;$/;"	m	struct:test_correlation_factor
world	src/apps/chem/zcis.h	/^	World& world;$/;"	m	class:madness::Zcis
world	src/apps/chem/znemo.h	/^        World& world;$/;"	m	struct:madness::Znemo::timer
world	src/apps/hf/dft.h	/^      World& world() {return _world;}$/;"	f	class:madness::DFT
world	src/apps/hf/hartreefock.h	/^    World& world() {return _world;}$/;"	f	class:madness::HartreeFock
world	src/apps/ii/eigen_solver.cc	/^    World& world;$/;"	m	class:SystolicEigensolver	file:
world	src/apps/ii/systolic.h	/^        World& world;$/;"	m	class:madness::LocalizeBoys
world	src/apps/ii/testsystolic.cc	/^    World& world;$/;"	m	class:SystolicEigensolver	file:
world	src/apps/moldft/mcpfit.cc	/^    World & world;$/;"	m	struct:CoreFittingTarget	file:
world	src/apps/polar/mcpfit.cc	/^    World & world;$/;"	m	struct:CoreFittingTarget	file:
world	src/apps/polar/moldft.cc	/^    World &world;$/;"	m	class:MolecularEnergy	file:
world	src/examples/colloid.cc	/^    World& world;$/;"	m	class:SurfaceMoleculeInteraction	file:
world	src/examples/gygi_soltion.cc	/^  World& world;$/;"	m	class:GygiPot	file:
world	src/examples/newsolver.cc	/^    World& world;$/;"	m	struct:allocator	file:
world	src/examples/smooth.h	/^	World &world;$/;"	m	class:smooth
world	src/madness/mra/derivative.h	/^        World& world;$/;"	m	class:madness::DerivativeBase
world	src/madness/mra/funcimpl.h	/^        World& world;$/;"	m	class:madness::FunctionImpl
world	src/madness/mra/function_interface.h	/^		World& world;$/;"	m	class:madness::CompositeFunctorInterface
world	src/madness/mra/lbdeux.h	/^        World& world;$/;"	m	class:madness::LoadBalanceDeux
world	src/madness/mra/mra.h	/^        World& world() const {$/;"	f	class:madness::Function
world	src/madness/mra/mraplot.cc	/^    World& world;$/;"	m	class:Plotter	file:
world	src/madness/tensor/gmres.h	/^            World &world;$/;"	m	class:madness::AbstractVectorSpace
world	src/madness/world/mpi_archive.h	/^            mutable World* world; \/\/\/< The world.$/;"	m	class:madness::archive::MPIInputArchive
world	src/madness/world/mpi_archive.h	/^            mutable World* world; \/\/\/< The world.$/;"	m	class:madness::archive::MPIOutputArchive
world	src/madness/world/mpi_archive.h	/^            mutable World* world; \/\/\/< The world.$/;"	m	class:madness::archive::MPIRawInputArchive
world	src/madness/world/mpi_archive.h	/^            mutable World* world; \/\/\/< The world.$/;"	m	class:madness::archive::MPIRawOutputArchive
world	src/madness/world/parallel_archive.h	/^            World* world; \/\/\/< The world.$/;"	m	class:madness::archive::BaseParallelArchive
world	src/madness/world/taskfn.h	/^        volatile World* world;$/;"	m	class:madness::TaskInterface
world	src/madness/world/world_object.h	/^        World& world; \/\/\/< The \\c World this object belongs to. (Think globally, act locally).$/;"	m	class:madness::WorldObject
world	src/madness/world/world_task_queue.h	/^        World& world; \/\/\/< The communication context.$/;"	m	class:madness::WorldTaskQueue
world_	src/madness/world/group.h	/^            World& world_; \/\/\/< Parent world for this group$/;"	m	class:madness::Group::Impl
world_	src/madness/world/worldgop.h	/^            World& world_; \/\/\/< The communication world$/;"	m	class:madness::WorldGopInterface::DelayedSend
world_	src/madness/world/worldgop.h	/^        World& world_; \/\/\/< MPI interface$/;"	m	class:madness::WorldGopInterface
world_	src/madness/world/worldptr.h	/^            World* world_; \/\/\/< A pointer to the world.$/;"	m	class:madness::detail::WorldPtr
world_from_id	src/madness/world/world.h	/^        static World* world_from_id(unsigned long id) {$/;"	f	class:madness::World
world_mem_buffer_overflow	src/madness/world/worldmem.cc	/^  void world_mem_buffer_overflow() {$/;"	f	namespace:madness
world_mem_buffer_underflow	src/madness/world/worldmem.cc	/^  void world_mem_buffer_underflow() {$/;"	f	namespace:madness
world_mem_info	src/madness/world/worldmem.cc	/^    WorldMemInfo* world_mem_info() {$/;"	f	namespace:madness
world_mpi	src/madness/world/worldmpi.cc	/^        std::shared_ptr<WorldMpi> WorldMpi::world_mpi;$/;"	m	class:madness::detail::WorldMpi	file:
world_mpi	src/madness/world/worldmpi.h	/^            static std::shared_ptr<WorldMpi> world_mpi;$/;"	m	class:madness::detail::WorldMpi
world_mpi	src/madness/world/worldmpi.h	/^            std::shared_ptr<WorldMpi> world_mpi;$/;"	m	class:madness::detail::WorldMpiRuntime
world_rank	src/madness/world/group.h	/^            ProcessID world_rank(const ProcessID group_rank) const {$/;"	f	class:madness::Group::Impl
world_rank	src/madness/world/group.h	/^        ProcessID world_rank(const ProcessID group_rank) const {$/;"	f	class:madness::Group
worldid	src/madness/world/uniqueid.h	/^        unsigned long worldid; \/\/\/< ID of the \\c World the object belongs to.$/;"	m	class:madness::uniqueidT
worldid	src/madness/world/worldam.h	/^        unsigned long worldid;              \/\/\/< The world which contains this instance of WorldAmInterface$/;"	m	class:madness::WorldAmInterface
worldid	src/madness/world/worldam.h	/^        unsigned long worldid;  \/\/ Id of associated world$/;"	m	class:madness::AmArg
worldidT	src/madness/world/worldptr.h	/^            typedef unsigned long worldidT; \/\/\/< World ID type.$/;"	t	class:madness::detail::WorldPtr
worldid_	src/madness/world/worldptr.h	/^            worldidT worldid_; \/\/\/< The world ID.$/;"	m	class:madness::detail::WorldPtr
worldptr	src/examples/test_gmres.cc	/^World *worldptr;$/;"	v
worlds	src/madness/world/world.h	/^        static std::list<World*> worlds; \/\/\/< Maintains list of active worlds.$/;"	m	class:madness::World
wrap	src/madness/world/archive.h	/^        inline archive_array<T> wrap(const T* ptr, unsigned int n) {$/;"	f	namespace:madness::archive
wrap_load	src/madness/world/archive.h	/^            static inline const Archive& wrap_load(const Archive& ar, const T& t) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_load	src/madness/world/archive.h	/^            static inline const Archive& wrap_load(const Archive& ar, const T(&t)[n]) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_load	src/madness/world/archive.h	/^            static inline const Archive& wrap_load(const Archive& ar, const archive_array<T>& t) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_load	src/madness/world/parallel_archive.h	/^            static inline const ParallelInputArchive& wrap_load(const ParallelInputArchive& ar, const T(&t)[n]) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_load	src/madness/world/parallel_archive.h	/^            static inline const ParallelInputArchive& wrap_load(const ParallelInputArchive& ar, const archive_array<T>& t) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_load	src/madness/world/parallel_archive.h	/^            wrap_load(const ParallelInputArchive& ar, const Q& t) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_mem_fn	src/madness/world/mem_func_wrapper.h	/^        wrap_mem_fn(const objT& obj, memfnT memfn) {$/;"	f	namespace:madness::detail
wrap_mem_fn	src/madness/world/mem_func_wrapper.h	/^        wrap_mem_fn(const objT* obj, memfnT memfn) {$/;"	f	namespace:madness::detail
wrap_mem_fn	src/madness/world/mem_func_wrapper.h	/^        wrap_mem_fn(const std::shared_ptr<objT>& obj, memfnT memfn) {$/;"	f	namespace:madness::detail
wrap_mem_fn	src/madness/world/mem_func_wrapper.h	/^        wrap_mem_fn(objT& obj, memfnT memfn) {$/;"	f	namespace:madness::detail
wrap_mem_fn	src/madness/world/mem_func_wrapper.h	/^        wrap_mem_fn(objT* obj, memfnT memfn) {$/;"	f	namespace:madness::detail
wrap_mem_fn	src/madness/world/mem_func_wrapper.h	/^        wrap_mem_fn(std::shared_ptr<objT>& obj, memfnT memfn) {$/;"	f	namespace:madness::detail
wrap_opaque	src/madness/world/archive.h	/^        inline archive_array<unsigned char> wrap_opaque(const T& t) {$/;"	f	namespace:madness::archive
wrap_opaque	src/madness/world/archive.h	/^        inline archive_array<unsigned char> wrap_opaque(const T* ptr, unsigned int n) {$/;"	f	namespace:madness::archive
wrap_ptr	src/madness/world/archive.h	/^      	inline archive_ptr<T> wrap_ptr(T* p) {$/;"	f	namespace:madness::archive
wrap_store	src/madness/world/archive.h	/^            static inline const Archive& wrap_store(const Archive& ar, const T& t) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_store	src/madness/world/archive.h	/^            static inline const Archive& wrap_store(const Archive& ar, const T(&t)[n]) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_store	src/madness/world/archive.h	/^            static inline const Archive& wrap_store(const Archive& ar, const archive_array<T>& t) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_store	src/madness/world/parallel_archive.h	/^            static inline const ParallelOutputArchive& wrap_store(const ParallelOutputArchive& ar, const T(&t)[n]) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_store	src/madness/world/parallel_archive.h	/^            static inline const ParallelOutputArchive& wrap_store(const ParallelOutputArchive& ar, const archive_array<T>& t) {$/;"	f	struct:madness::archive::ArchiveImpl
wrap_store	src/madness/world/parallel_archive.h	/^            wrap_store(const ParallelOutputArchive& ar, const Q& t) {$/;"	f	struct:madness::archive::ArchiveImpl
wrapperT	src/madness/world/world_object.h	/^            typedef MemFuncWrapper<ptrT, memfnT, typename result_of<memfnT>::type> wrapperT;$/;"	t	struct:madness::detail::WorldObjectTaskHelper
wrapperT	src/madness/world/world_object.h	/^            typedef MemFuncWrapper<shared_ptrT, memfnT, typename result_of<memfnT>::type> wrapperT;$/;"	t	struct:madness::detail::WorldObjectTaskHelper
write	src/apps/hf/test_comm.cc	/^    void write(size_t i, double value) {$/;"	f	class:Array
write	src/apps/hf/testconv.cc	/^    void write(size_t i, double value) {$/;"	f	class:Array
write	src/examples/array_worldobject.cc	/^    void write(size_t i, double value) {$/;"	f	class:Array
write	src/madness/external/elemental/include/elemental/io/Write/Ascii.hpp	/^namespace write {$/;"	n	namespace:elem
write	src/madness/external/elemental/include/elemental/io/Write/AsciiMatlab.hpp	/^namespace write {$/;"	n	namespace:elem
write	src/madness/external/elemental/include/elemental/io/Write/Binary.hpp	/^namespace write {$/;"	n	namespace:elem
write	src/madness/external/elemental/include/elemental/io/Write/BinaryFlat.hpp	/^namespace write {$/;"	n	namespace:elem
write	src/madness/external/elemental/include/elemental/io/Write/Image.hpp	/^namespace write {$/;"	n	namespace:elem
write	src/madness/external/elemental/include/elemental/io/Write/MatrixMarket.hpp	/^namespace write {$/;"	n	namespace:elem
write	src/madness/world/test_future2.cc	/^    void write(size_t i, double value) {$/;"	f	class:Array
writeEX	src/apps/nick/extract.py	/^        writeEX = True$/;"	v
writeEX	src/apps/nick/extract.py	/^writeEX  = False$/;"	v
writeION	src/apps/nick/extract.py	/^        writeION = True$/;"	v
writeION	src/apps/nick/extract.py	/^writeION = False$/;"	v
writeY	src/apps/nick/extract.py	/^        writeY = True$/;"	v
writeY	src/apps/nick/extract.py	/^writeY   = False$/;"	v
write_fd	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
write_fd	src/madness/external/gtest/src/gtest-death-test.cc	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
write_fd_	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  int write_fd_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
write_fd_	src/madness/external/gtest/src/gtest-death-test.cc	/^  int write_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
write_handle_	src/madness/external/gtest/src/gtest-death-test.cc	/^  AutoHandle write_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
write_lock	src/madness/world/worldmutex.h	/^        void write_lock() const {$/;"	f	class:madness::MutexReaderWriter
write_test_input	src/apps/chem/test_MolecularOrbitals.cc	/^    write_test_input(const CalculationParameters& param, const std::string& mol="lih") : filename_("test_MO_input") {$/;"	f	struct:write_test_input
write_test_input	src/apps/chem/test_MolecularOrbitals.cc	/^struct write_test_input {$/;"	s	file:
write_test_input	src/apps/chem/test_SCFOperators.cc	/^    write_test_input(std::string mol="lih") : filename_("test_SCFOperators_input") {$/;"	f	struct:write_test_input
write_test_input	src/apps/chem/test_SCFOperators.cc	/^struct write_test_input {$/;"	s	file:
write_test_input	src/apps/chem/test_qc.cc	/^    write_test_input(const TestCalculationParameters& param, const std::string& mol="lih") : filename_("test_input") {$/;"	f	struct:write_test_input
write_test_input	src/apps/chem/test_qc.cc	/^struct write_test_input {$/;"	s	file:
write_test_input	src/examples/oep.cc	/^void write_test_input() {$/;"	f
write_to	src/apps/chem/MolecularOrbitals.cc	/^void MolecularOrbitals<T,NDIM>::write_to(std::vector<Function<T,NDIM> >& mo_out, Tensor<double>& eps_out,$/;"	f	class:madness::MolecularOrbitals
write_to_file	src/madness/world/thread.cc	/^        void TaskProfiler::write_to_file() {$/;"	f	class:madness::profiling::TaskProfiler
write_unlock	src/madness/world/worldmutex.h	/^        void write_unlock() const {$/;"	f	class:madness::MutexReaderWriter
writeascii	src/madness/mra/tools/dump2.py	/^def writeascii(kmax,filename):$/;"	f
writeflag	src/madness/world/worldmutex.h	/^        mutable AtomicInt writeflag;$/;"	m	class:madness::MutexReaderWriter
writeflag	src/madness/world/worldmutex.h	/^        volatile mutable bool writeflag;$/;"	m	class:madness::MutexReaderWriter
writemat	src/madness/mra/tools/dump2.py	/^def writemat(k,file,a):$/;"	f
wstFunctor	src/apps/hf/test_lattice.cc	/^  wstFunctor(int kmax, double coeff, double expnt) :$/;"	f	class:wstFunctor
wstFunctor	src/apps/hf/test_lattice.cc	/^template <typename Q> class wstFunctor$/;"	c	file:
wst_munge_grho	src/apps/hf/lda.h	/^inline void wst_munge_grho(int npoint, double *rho, double *grho) {$/;"	f
wst_munge_rho	src/apps/hf/lda.h	/^inline void wst_munge_rho(int npoint, double *rho) {$/;"	f
wstart_	src/apps/chem/PNOStructures.h	/^	mutable double wstart_, cstart_;$/;"	m	struct:madness::MyTimer
wstop_	src/apps/chem/PNOStructures.h	/^	mutable double wstop_, cstop_;$/;"	m	struct:madness::MyTimer
wstring	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef ::std::wstring wstring;$/;"	t	namespace:testing::internal
wstring	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^typedef ::wstring wstring;$/;"	t	namespace:testing::internal
wtime_	src/apps/chem/PNOStructures.h	/^	mutable double wtime_, ctime_;$/;"	m	struct:madness::MyTimer
x	src/apps/adrian/ResponseFunction2.h	/^  std::vector<std::vector<Function<double, 3>>> x;$/;"	m	class:madness::ResponseFunction
x	src/apps/bryan/ResponseFunction2.h	/^      std::vector<std::vector<Function<double,3>>> x;$/;"	m	class:madness::ResponseFunction
x	src/apps/chem/CCStructures.h	/^    CCFunction x;$/;"	m	struct:madness::CCPairFunction
x	src/apps/chem/PNOGuessFunctions.h	/^		double x, y, z;   \/\/\/< origin$/;"	m	class:madness::BasisFunctions::CartesianGaussian
x	src/apps/chem/PNOGuessFunctions.h	/^		double x, y, z;   \/\/\/< origin$/;"	m	class:madness::BasisFunctions::SolidHarmonicGaussian
x	src/apps/chem/PNOStructures.h	/^	vector_real_function_3d x=vector_real_function_3d();$/;"	m	struct:madness::CISData
x	src/apps/chem/molecule.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:madness::Atom
x	src/apps/hf/mentity.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:Atom
x	src/apps/polar/molecule.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:Atom
x	src/examples/newsolver.cc	/^    real_function_3d x, y;$/;"	m	struct:F	file:
x	src/examples/spectralprop.h	/^        std::vector<double> x;  \/\/\/< Quadrature points on [0,1] with value 0 prepended$/;"	m	class:madness::SpectralPropagator
x	src/examples/spectralprop.h	/^        std::vector<double> x;$/;"	m	class:madness::SpectralPropagatorGaussLobatto
x	src/examples/testsolver.cc	/^    double x;$/;"	m	class:F	file:
x	src/madness/mra/minmax/y.cc	/^    const vector<FLOAT>& x;$/;"	m	class:Func	file:
x	src/madness/mra/minmax/y1.cc	/^    const vector<FLOAT>& x;$/;"	m	class:Func	file:
x	src/madness/mra/minmax/y_signed.cc	/^    const vector<FLOAT>& x;$/;"	m	class:Func	file:
x	src/madness/mra/minmax/y_varx.cc	/^    const vector<FLOAT>& x;$/;"	m	class:Func	file:
x	src/madness/mra/tools/mathutil.py	/^    x = choleski_solve(A,b)$/;"	v
x	src/madness/tensor/gfit.cc	/^    const Tensor<double> f, x, w;$/;"	m	class:Fred	file:
x0	src/examples/tdse1d.cc	/^static const double x0 = -L + 10.0; \/\/ Initial position of the atom$/;"	v	file:
x0	src/examples/testspectralprop.cc	/^static const double x0 = -L + 10.0; \/\/ Initial position of the atom$/;"	v	file:
x12	src/apps/chem/electronic_correlation_factor.h	/^    static double x12(const coord_6d& r, const int axis) {$/;"	f	class:madness::CorrelationFactor
x_e_residuals	src/apps/adrian/TDHF.h	/^      Tensor<double> x_e_residuals;  \/\/ Residuals of energies$/;"	m	class:TDHF
x_e_residuals	src/apps/bryan/TDHF.h	/^      Tensor<double> x_e_residuals;  \/\/ Residuals of energies$/;"	m	class:TDHF
x_omega	src/apps/adrian/TDHF.h	/^      Tensor<double> x_omega;        \/\/ Energies of response functions$/;"	m	class:TDHF
x_omega	src/apps/bryan/TDHF.h	/^      Tensor<double> x_omega;        \/\/ Energies of response functions$/;"	m	class:TDHF
x_response	src/apps/adrian/TDDFT.h	/^      x_response;  \/\/ Excited states to be solved for.$/;"	m	class:TDHF
x_response	src/apps/adrian/TDHF.h	/^      std::vector<std::vector<real_function_3d>> x_response;   \/\/ Excited states to be solved for. $/;"	m	class:TDHF
x_response	src/apps/adrian/TDHF2.h	/^      ResponseFunction x_response;    \/\/ Excited states to be solved for. $/;"	m	class:TDHF
x_response	src/apps/bryan/TDHF.h	/^      std::vector<std::vector<real_function_3d>> x_response;   \/\/ Excited states to be solved for. $/;"	m	class:TDHF
x_response	src/apps/bryan/TDHF2.h	/^      ResponseFunction x_response;    \/\/ Excited states to be solved for. $/;"	m	class:TDHF
x_rks_s	src/apps/moldft/lda.f	/^      subroutine x_rks_s(/;"	s
x_rks_s	src/apps/polar/lda.f	/^      subroutine x_rks_s(/;"	s
x_rks_s__	src/apps/chem/lda.cc	/^int x_rks_s__(const double *r__, double *f, double * dfdra) {$/;"	f	namespace:madness
x_rks_s__	src/apps/hf/lda.h	/^inline \/* Subroutine *\/ int x_rks_s__(const double *r__, double *f, double *$/;"	f
x_rks_s__	src/apps/polar/lda.cc	/^int x_rks_s__(const double *r__, double *f, double * dfdra) {$/;"	f	namespace:madness
x_s2b	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s2b(const CC_vecfunction& x,const Pairs<CCPair>& u) const {$/;"	f	class:madness::CCPotentials
x_s2c	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s2c(const CC_vecfunction& x,const Pairs<CCPair>& u) const {$/;"	f	class:madness::CCPotentials
x_s3a	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s3a(const CC_vecfunction& x,const CC_vecfunction& t) const {$/;"	f	class:madness::CCPotentials
x_s3b	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s3b(const CC_vecfunction& x,const CC_vecfunction& t) const {$/;"	f	class:madness::CCPotentials
x_s3c	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s3c(const CC_vecfunction& x,const CC_vecfunction& t) const {$/;"	f	class:madness::CCPotentials
x_s4a	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s4a(const CC_vecfunction& x,const CC_vecfunction& t,const Pairs<CCPair>& u) const {$/;"	f	class:madness::CCPotentials
x_s4b	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s4b(const CC_vecfunction& x,const CC_vecfunction& t,const Pairs<CCPair>& u) const {$/;"	f	class:madness::CCPotentials
x_s4c	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s4c(const CC_vecfunction& x,const CC_vecfunction& t,const Pairs<CCPair>& u) const {$/;"	f	class:madness::CCPotentials
x_s5b	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s5b(const CC_vecfunction& x,const CC_vecfunction& t1,const CC_vecfunction& t2) const {$/;"	f	class:madness::CCPotentials
x_s5c	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s5c(const CC_vecfunction& x,const CC_vecfunction& t1,const CC_vecfunction& t2) const {$/;"	f	class:madness::CCPotentials
x_s6	src/apps/chem/CCPotentials.cc	/^  CCPotentials::x_s6(const CC_vecfunction& x,const CC_vecfunction& t1,const CC_vecfunction& t2,const CC_vecfunction& t3) const {$/;"	f	class:madness::CCPotentials
x_uks_s	src/apps/moldft/lda.f	/^      subroutine x_uks_s(/;"	s
x_uks_s	src/apps/polar/lda.f	/^      subroutine x_uks_s(/;"	s
x_uks_s__	src/apps/chem/lda.cc	/^int x_uks_s__(double *ra, double *rb, double *f, double *dfdra, double *dfdrb) {$/;"	f	namespace:madness
x_uks_s__	src/apps/hf/lda.h	/^inline \/* Subroutine *\/ int x_uks_s__(double *ra, double *rb, double *f,$/;"	f
x_uks_s__	src/apps/polar/lda.cc	/^int x_uks_s__(double *ra, double *rb, double *f, double *dfdra, double *dfdrb) {$/;"	f	namespace:madness
xc	src/apps/adrian/GroundParameters.h	/^      std::string xc;                          \/\/\/< Name of xc functional used in ground state$/;"	m	struct:madness::GroundParameters
xc	src/apps/adrian/ResponseParameters.h	/^      std::string xc;                    \/\/\/< Controls the HF or DFT switch, as well as which DFT functional is used$/;"	m	struct:madness::ResponseParameters
xc	src/apps/bryan/GroundParameters.h	/^      std::string xc;                          \/\/\/< Name of xc functional used in ground state$/;"	m	struct:madness::GroundParameters
xc	src/apps/bryan/ResponseParameters.h	/^      std::string xc;                    \/\/\/< Controls the HF or DFT switch, as well as which DFT functional is used$/;"	m	struct:madness::ResponseParameters
xc	src/apps/chem/CalculationParameters.h	/^	std::string xc() const {return get<std::string>("xc");}$/;"	f	struct:madness::CalculationParameters
xc	src/apps/chem/SCF.h	/^	XCfunctional xc;$/;"	m	class:madness::SCF
xc	src/apps/chem/SCFOperators.h	/^    std::shared_ptr<XCfunctional> xc;$/;"	m	class:madness::XCOperator
xc	src/apps/chem/xcfunctional.h	/^    const XCfunctional* xc;$/;"	m	struct:madness::xc_functional
xc	src/apps/chem/xcfunctional.h	/^    const XCfunctional* xc;$/;"	m	struct:madness::xc_kernel_apply
xc	src/apps/chem/xcfunctional.h	/^    const XCfunctional* xc;$/;"	m	struct:madness::xc_potential
xc	src/apps/moldft/preal.cc	/^    XCfunctional xc;$/;"	m	class:MiniDFT	file:
xc	src/apps/polar/moldft.cc	/^    XCfunctional xc;$/;"	m	struct:Calculation	file:
xc	src/apps/polar/xcfunctional.h	/^    const XCfunctional* xc;$/;"	m	struct:madness::xc_functional
xc	src/apps/polar/xcfunctional.h	/^    const XCfunctional* xc;$/;"	m	struct:madness::xc_kernel
xc	src/apps/polar/xcfunctional.h	/^    const XCfunctional* xc;$/;"	m	struct:madness::xc_potential
xc	src/examples/newsolver_lda.cc	/^XCfunctional xc;$/;"	v
xc	src/examples/smooth.h	/^    const apply_kernel_helper *xc;$/;"	m	struct:slater_kernel_apply
xc_arg	src/apps/chem/xcfunctional.h	/^    enum xc_arg {$/;"	g	class:madness::XCfunctional
xc_args	src/apps/chem/SCFOperators.h	/^    mutable vecfuncT xc_args;$/;"	m	class:madness::XCOperator
xc_data	src/apps/polar/moldft.cc	/^    std::string xc_data;               \/\/\/< XC input line$/;"	m	struct:CalculationParameters	file:
xc_functional	src/apps/chem/xcfunctional.h	/^    xc_functional(const XCfunctional& xc) : xc(&xc) {}$/;"	f	struct:madness::xc_functional
xc_functional	src/apps/chem/xcfunctional.h	/^struct xc_functional {$/;"	s	namespace:madness
xc_functional	src/apps/polar/xcfunctional.h	/^    xc_functional(const XCfunctional& xc, int ispin)$/;"	f	struct:madness::xc_functional
xc_functional	src/apps/polar/xcfunctional.h	/^struct xc_functional {$/;"	s	namespace:madness
xc_functor	src/examples/ac_corr.cc	/^	xc_functor(){}$/;"	f	class:xc_functor
xc_functor	src/examples/ac_corr.cc	/^	xc_functor(std::vector<atom_information<NDIM> > atoms): atoms(atoms){}$/;"	f	class:xc_functor
xc_functor	src/examples/ac_corr.cc	/^class xc_functor : public FunctionFunctorInterface<double,NDIM>{$/;"	c	file:
xc_kernel	src/apps/polar/xcfunctional.h	/^    xc_kernel(const XCfunctional& xc, int ispin,int what)$/;"	f	struct:madness::xc_kernel
xc_kernel	src/apps/polar/xcfunctional.h	/^struct xc_kernel {$/;"	s	namespace:madness
xc_kernel_apply	src/apps/chem/xcfunctional.h	/^    xc_kernel_apply(const XCfunctional& xc, int ispin) : xc(&xc), ispin(ispin),$/;"	f	struct:madness::xc_kernel_apply
xc_kernel_apply	src/apps/chem/xcfunctional.h	/^struct xc_kernel_apply {$/;"	s	namespace:madness
xc_lda_potential	src/apps/chem/xcfunctional.h	/^    xc_lda_potential() {}$/;"	f	struct:madness::xc_lda_potential
xc_lda_potential	src/apps/chem/xcfunctional.h	/^struct xc_lda_potential {$/;"	s	namespace:madness
xc_lda_potential	src/apps/polar/xcfunctional.h	/^    xc_lda_potential() {}$/;"	f	struct:madness::xc_lda_potential
xc_lda_potential	src/apps/polar/xcfunctional.h	/^struct xc_lda_potential {$/;"	s	namespace:madness
xc_name	src/apps/adrian/ResponsePotential.h	/^      const std::string xc_name;                                       \/\/ Name of xc functional          (default = "") $/;"	m	class:madness::ResponsePotential
xc_name	src/apps/bryan/ResponsePotential.h	/^      const std::string xc_name;                                       \/\/ Name of xc functional          (default = "") $/;"	m	class:madness::ResponsePotential
xc_name_map	src/apps/polar/xcfunctional_libxc.cc	/^struct xc_name_map {$/;"	s	namespace:madness	file:
xc_potential	src/apps/chem/xcfunctional.h	/^    xc_potential(const XCfunctional& xc, int ispin) : xc(&xc), ispin(ispin)$/;"	f	struct:madness::xc_potential
xc_potential	src/apps/chem/xcfunctional.h	/^struct xc_potential {$/;"	s	namespace:madness
xc_potential	src/apps/polar/xcfunctional.h	/^    xc_potential(const XCfunctional& xc, int ispin,int what)$/;"	f	struct:madness::xc_potential
xc_potential	src/apps/polar/xcfunctional.h	/^struct xc_potential {$/;"	s	namespace:madness
xc_potential	src/examples/ac_corr.cc	/^	double xc_potential(const Vector<double, NDIM> &r) const{$/;"	f	class:xc_functor	file:
xc_rks_generic_lda	src/apps/hf/lda.h	/^inline void xc_rks_generic_lda(Tensor<double> rho_alpha,           \/\/\/< Alpha-spin density at each grid point$/;"	f
xcf	src/apps/adrian/TDDFT.h	/^  XCfunctional xcf;$/;"	m	class:TDHF
xcf	src/apps/adrian/TDHF2.h	/^      XCfunctional xcf;$/;"	m	class:TDHF
xcf	src/apps/bryan/TDHF2.h	/^      XCfunctional xcf;$/;"	m	class:TDHF
xcfunc_data_point	src/apps/chem/plotxc.cc	/^struct xcfunc_data_point$/;"	s	file:
xcfunc_data_point	src/apps/chem/testlda.cc	/^struct xcfunc_data_point$/;"	s	file:
xcfunc_data_point	src/apps/chem/testxc.cc	/^struct xcfunc_data_point$/;"	s	file:
xcfunc_data_point	src/apps/polar/testxc.cc	/^struct xcfunc_data_point$/;"	s	file:
xcpu	src/madness/world/worldprofile.h	/^        ProfileStat<double> xcpu; \/\/\/< exclusive cpu time (i.e., excluding calls)$/;"	m	struct:madness::WorldProfileEntry
xdip	src/apps/nick/parse.py	/^xdip    = []$/;"	v
xdipFile	src/apps/nick/parse.py	/^xdipFile   = open("xdip.dat",      'w')$/;"	v
xdipole	src/apps/nick/tdse1.cc	/^double xdipole(const coordT& r) {$/;"	f
xdipole	src/apps/tdse/tdse.cc	/^double xdipole(const coordT& r) {$/;"	f
xdipole	src/apps/tdse/tdse.confused.cc	/^double xdipole(const coordT& r) {$/;"	f
xdipole	src/apps/tdse/tdse4.cc	/^double xdipole(const coordT& r) {$/;"	f
xf	src/examples/smooth.h	/^static double xf(const coord_3d &x){$/;"	f
xfer	src/madness/world/test_worldptr.cc	/^            void xfer(const ProcessID dest, const WorldPtr<T>& p, bool away) const {$/;"	f	class:__anon6::WorldPtrTest::XferPtr
xfer	src/madness/world/test_worldref.cc	/^            void xfer(const ProcessID dest, const RemoteReference<T>& r, bool away) const {$/;"	f	class:__anon1::WorldRefTest::XferRef
xi	src/examples/siam_example.cc	/^const double xi = 100.0; \/\/\/< Exponent for delta function approx.$/;"	v
xleft_dirichlet	src/madness/mra/testdiff2D.cc	/^static double xleft_dirichlet(const coordT &pt) {$/;"	f	file:
xleft_dirichlet	src/madness/mra/testdiff3D.cc	/^static double xleft_dirichlet(const coordT &pt) {$/;"	f	file:
xleft_neumann	src/madness/mra/testdiff2D.cc	/^static double xleft_neumann  (const coordT &pt) {$/;"	f	file:
xleft_neumann	src/madness/mra/testdiff3D.cc	/^static double xleft_neumann  (const coordT &pt) {$/;"	f	file:
xmax	src/madness/mra/qmprop.cc	/^        double xmax;$/;"	m	class:madness::BandlimitedPropagator	file:
xnbyt_recv	src/madness/world/worldprofile.h	/^        ProfileStat<unsigned long> xnbyt_recv; \/\/\/< No. of bytes recv ... exclusive$/;"	m	struct:madness::WorldProfileEntry
xnbyt_sent	src/madness/world/worldprofile.h	/^        ProfileStat<unsigned long> xnbyt_sent; \/\/\/< No. of bytes sent ... exclusive$/;"	m	struct:madness::WorldProfileEntry
xnmsg_recv	src/madness/world/worldprofile.h	/^        ProfileStat<unsigned long> xnmsg_recv; \/\/\/< No. of active messages recv ... exclusive$/;"	m	struct:madness::WorldProfileEntry
xnmsg_sent	src/madness/world/worldprofile.h	/^        ProfileStat<unsigned long> xnmsg_sent; \/\/\/< No. of active messages sent ... exclusive$/;"	m	struct:madness::WorldProfileEntry
xright_dirichlet	src/madness/mra/testdiff2D.cc	/^static double xright_dirichlet(const coordT &pt) {$/;"	f	file:
xright_dirichlet	src/madness/mra/testdiff3D.cc	/^static double xright_dirichlet(const coordT &pt) {$/;"	f	file:
xright_neumann	src/madness/mra/testdiff2D.cc	/^static double xright_neumann  (const coordT &pt) {$/;"	f	file:
xright_neumann	src/madness/mra/testdiff3D.cc	/^static double xright_neumann  (const coordT &pt) {$/;"	f	file:
xsq	src/apps/moldft/mcpfit.cc	/^    mutable double xsq;$/;"	m	struct:CoreFittingTarget	file:
xsq	src/apps/polar/mcpfit.cc	/^    mutable double xsq;$/;"	m	struct:CoreFittingTarget	file:
xss1	src/madness/tensor/test_elemental.cc	/^double xtt1, xss1;$/;"	v
xterm_debug	src/madness/world/debug.cc	/^    void xterm_debug(const char* path, const char* display) {$/;"	f	namespace:madness
xterm_debug	src/madness/world/debug.cc	/^    void xterm_debug(const char* path, const char* display) {}$/;"	f	namespace:madness
xterm_debug_breakpoint	src/madness/world/debug.cc	/^    extern "C" void xterm_debug_breakpoint() {$/;"	f	namespace:madness
xtol	src/apps/chem/molopt.h	/^        const double xtol;          \/\/< Convergence test for Cartesian step in a.u.$/;"	m	class:madness::MolOpt
xtt1	src/madness/tensor/test_elemental.cc	/^double xtt1, xss1;$/;"	v
xx	src/apps/chem/molecularbasis.h	/^    const double xx, yy, zz; \/\/ Coordinates of the center$/;"	m	class:madness::AtomicBasisFunction
xx	src/apps/hf/molecularbasis.h	/^    const double xx, yy, zz; \/\/ Coordinates of the center$/;"	m	class:AtomicBasisFunction
xx	src/apps/polar/molecularbasis.h	/^    const double xx, yy, zz; \/\/ Coordinates of the center$/;"	m	class:AtomicBasisFunction
xyyygaussian	src/apps/chem/test_pointgroupsymmetry.cc	/^double xyyygaussian(const coord_2d& r) {$/;"	f
y	src/apps/chem/CCStructures.h	/^    CCFunction y;$/;"	m	struct:madness::CCPairFunction
y	src/apps/chem/PNOGuessFunctions.h	/^		double x, y, z;   \/\/\/< origin$/;"	m	class:madness::BasisFunctions::CartesianGaussian
y	src/apps/chem/PNOGuessFunctions.h	/^		double x, y, z;   \/\/\/< origin$/;"	m	class:madness::BasisFunctions::SolidHarmonicGaussian
y	src/apps/chem/molecule.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:madness::Atom
y	src/apps/hf/mentity.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:Atom
y	src/apps/polar/molecule.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:Atom
y	src/examples/newsolver.cc	/^    real_function_3d x, y;$/;"	m	struct:F	file:
y_e_residuals	src/apps/adrian/TDHF.h	/^      Tensor<double> y_e_residuals;  \/\/ Residuals of energies$/;"	m	class:TDHF
y_e_residuals	src/apps/bryan/TDHF.h	/^      Tensor<double> y_e_residuals;  \/\/ Residuals of energies$/;"	m	class:TDHF
y_omega	src/apps/adrian/TDHF.h	/^      Tensor<double> y_omega;        \/\/ Energies of response functions$/;"	m	class:TDHF
y_omega	src/apps/bryan/TDHF.h	/^      Tensor<double> y_omega;        \/\/ Energies of response functions$/;"	m	class:TDHF
y_response	src/apps/adrian/TDDFT.h	/^      y_response;  \/\/ De-excitation states to be solved for.$/;"	m	class:TDHF
y_response	src/apps/adrian/TDHF.h	/^      std::vector<std::vector<real_function_3d>> y_response;   \/\/ De-excitation states to be solved for. $/;"	m	class:TDHF
y_response	src/apps/adrian/TDHF2.h	/^      ResponseFunction y_response;    \/\/ De-excitation states to be solved for. $/;"	m	class:TDHF
y_response	src/apps/bryan/TDHF.h	/^      std::vector<std::vector<real_function_3d>> y_response;   \/\/ De-excitation states to be solved for. $/;"	m	class:TDHF
y_response	src/apps/bryan/TDHF2.h	/^      ResponseFunction y_response;    \/\/ De-excitation states to be solved for. $/;"	m	class:TDHF
yacobi	src/apps/moldft/fci/yacobi.F	/^      subroutine yacobi /;"	s
ydip	src/apps/nick/parse.py	/^ydip    = []$/;"	v
ydipFile	src/apps/nick/parse.py	/^ydipFile   = open("ydip.dat",      'w')$/;"	v
ydipole	src/apps/nick/tdse1.cc	/^double ydipole(const coordT& r) {$/;"	f
ydipole	src/apps/tdse/tdse.cc	/^double ydipole(const coordT& r) {$/;"	f
ydipole	src/apps/tdse/tdse.confused.cc	/^double ydipole(const coordT& r) {$/;"	f
ydipole	src/apps/tdse/tdse4.cc	/^double ydipole(const coordT& r) {$/;"	f
yes	src/madness/mra/funcimpl.h	/^        enum LeafStatus {no, yes, unknown};$/;"	e	enum:madness::CoeffTracker::LeafStatus
yes	src/madness/world/function_traits.h	/^            typedef char (& yes)[1];$/;"	t	struct:madness::detail::is_functor
yield	src/madness/world/worldmutex.h	/^        void yield(int us) {$/;"	f	class:madness::MutexWaiter
yleft_dirichlet	src/madness/mra/testdiff2D.cc	/^static double yleft_dirichlet(const coordT &pt) {$/;"	f	file:
yleft_dirichlet	src/madness/mra/testdiff3D.cc	/^static double yleft_dirichlet(const coordT &pt) {$/;"	f	file:
yleft_neumann	src/madness/mra/testdiff2D.cc	/^static double yleft_neumann  (const coordT &pt) {$/;"	f	file:
yleft_neumann	src/madness/mra/testdiff3D.cc	/^static double yleft_neumann  (const coordT &pt) {$/;"	f	file:
ylm	src/apps/polar/gth_pseudopotential.h	/^    complex_function_3d ylm(int l, int m)$/;"	f	class:YlmStore
ylms	src/apps/polar/gth_pseudopotential.h	/^    vector_complex_function_3d ylms;$/;"	m	class:YlmStore
yright_dirichlet	src/madness/mra/testdiff2D.cc	/^static double yright_dirichlet(const coordT &pt) {$/;"	f	file:
yright_dirichlet	src/madness/mra/testdiff3D.cc	/^static double yright_dirichlet(const coordT &pt) {$/;"	f	file:
yright_neumann	src/madness/mra/testdiff2D.cc	/^static double yright_neumann  (const coordT &pt) {$/;"	f	file:
yright_neumann	src/madness/mra/testdiff3D.cc	/^static double yright_neumann  (const coordT &pt) {$/;"	f	file:
yy	src/apps/chem/molecularbasis.h	/^    const double xx, yy, zz; \/\/ Coordinates of the center$/;"	m	class:madness::AtomicBasisFunction
yy	src/apps/hf/molecularbasis.h	/^    const double xx, yy, zz; \/\/ Coordinates of the center$/;"	m	class:AtomicBasisFunction
yy	src/apps/polar/molecularbasis.h	/^    const double xx, yy, zz; \/\/ Coordinates of the center$/;"	m	class:AtomicBasisFunction
z	src/apps/chem/PNOGuessFunctions.h	/^		double x, y, z;   \/\/\/< origin$/;"	m	class:madness::BasisFunctions::CartesianGaussian
z	src/apps/chem/PNOGuessFunctions.h	/^		double x, y, z;   \/\/\/< origin$/;"	m	class:madness::BasisFunctions::SolidHarmonicGaussian
z	src/apps/chem/molecule.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:madness::Atom
z	src/apps/hf/mentity.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:Atom
z	src/apps/moldft/moldx.py	/^            z = []$/;"	v
z	src/apps/polar/moldx.py	/^            z = []$/;"	v
z	src/apps/polar/molecule.h	/^    double x, y, z, q;          \/\/\/< Coordinates and charge in atomic units$/;"	m	class:Atom
z	src/examples/vnucso.cc	/^    const double z;        \/\/ z-coordinate center$/;"	m	struct:Guess	file:
zSlice	src/apps/nick/projPsi.cc	/^void zSlice(World& world, const int n, double L, double th, double phi, const int wf) {$/;"	f
zaxis	src/apps/nick/spawnK.py	/^zaxis = False$/;"	v
zdip	src/apps/nick/parse.py	/^zdip    = []$/;"	v
zdipFile	src/apps/nick/parse.py	/^zdipFile   = open("zdip.dat",      'w')$/;"	v
zdipole	src/apps/nick/extra.cc	/^complexd zdipole( const vector3D& r) {$/;"	f
zdipole	src/apps/nick/tdse1.cc	/^double zdipole(const coordT& r) {$/;"	f
zdipole	src/apps/tdse/tdse.cc	/^double zdipole(const coordT& r) {$/;"	f
zdipole	src/apps/tdse/tdse.confused.cc	/^double zdipole(const coordT& r) {$/;"	f
zdipole	src/apps/tdse/tdse4.cc	/^double zdipole(const coordT& r) {$/;"	f
zdipole	src/examples/tdse_example.cc	/^double zdipole(const coordT& r) {$/;"	f
zeeman_R_comm	src/apps/chem/znemo.h	/^		std::vector<complex_function_3d> zeeman_R_comm;$/;"	m	struct:madness::Znemo::potentials
zero	src/apps/adrian/ResponseFunction2.h	/^  void zero() {$/;"	f	class:madness::ResponseFunction
zero	src/apps/bryan/ResponseFunction2.h	/^      void zero() { $/;"	f	class:madness::ResponseFunction
zero	src/madness/mra/sdf_shape_3D.h	/^        const long double zero; \/\/\/< Numerical zero for root-finding in sdf$/;"	m	class:madness::SDFParaboloid
zero_3d	src/madness/mra/test6.cc	/^static double zero_3d(const coord_3d& r) {$/;"	f	file:
zero_field_time	src/apps/nick/tdse1.cc	/^static double zero_field_time;      \/\/ Laser actually switches on after this time (set by propagate)$/;"	v	file:
zero_field_time	src/apps/tdse/tdse.cc	/^static double zero_field_time;      \/\/ Laser actually switches on after this time (set by propagate)$/;"	v	file:
zero_field_time	src/apps/tdse/tdse.confused.cc	/^static double zero_field_time;      \/\/ Laser actually switches on after this time (set by propagate)$/;"	v	file:
zero_field_time	src/apps/tdse/tdse4.cc	/^static double zero_field_time;      \/\/ Laser actually switches on after this time (set by propagate)$/;"	v	file:
zero_functions	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> zero_functions(World& world, int n,$/;"	f	namespace:madness
zero_functions	src/madness/mra/vmra1.h	/^      zero_functions(World& world, int n) {$/;"	f	namespace:madness
zero_functions_compressed	src/madness/mra/vmra.h	/^std::vector<Function<T, NDIM>> zero_functions_compressed(World& world, int n,$/;"	f	namespace:madness
zero_me	src/madness/tensor/tensortrain.h	/^		void zero_me() {$/;"	f	class:madness::TensorTrain
zero_me	src/madness/tensor/tensortrain.h	/^        void zero_me(const std::vector<long>& dim) {$/;"	f	class:madness::TensorTrain
zero_norm_tree	src/madness/mra/mraimpl.h	/^    void FunctionImpl<T,NDIM>::zero_norm_tree() {$/;"	f	class:madness::FunctionImpl
zero_rank	src/madness/tensor/tensortrain.h	/^		bool zero_rank;$/;"	m	class:madness::TensorTrain
zeromatrix	src/madness/mra/tools/mathutil.py	/^def zeromatrix(n,m): $/;"	f
zeromatrix	src/madness/mra/tools/twoscalecoeffs.py	/^def zeromatrix(n,m): $/;"	f
zeroth_order_energy	src/apps/chem/mp2.h	/^        double zeroth_order_energy(const int i, const int j) const {$/;"	f	class:madness::MP2
zerovector	src/madness/mra/tools/mathutil.py	/^def zerovector(n): $/;"	f
zerovector	src/madness/mra/tools/twoscalecoeffs.py	/^def zerovector(n):$/;"	f
zeta	src/apps/nick/mpreal.h	/^inline const mpreal zeta (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
zeta	src/examples/vnucso.cc	/^const double zeta = 7.5;   \/\/ potential wells at +\/-zeta$/;"	v
zgelss_	src/madness/tensor/clapack_fortran.h	58;"	d
zgesv_	src/madness/tensor/clapack_fortran.h	53;"	d
zgesvd_	src/madness/tensor/clapack_fortran.h	48;"	d
zheev_	src/madness/tensor/clapack_fortran.h	63;"	d
zhegv_	src/madness/tensor/clapack_fortran.h	69;"	d
zi	src/apps/chem/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:madness::VLocalFunctor
zi	src/apps/polar/gth_pseudopotential.h	/^    double Zeff, zi, C1, C2, C3, C4;$/;"	m	class:VLocalFunctor
zk	src/apps/chem/plotxc.cc	/^  double zk;$/;"	m	struct:xcfunc_data_point	file:
zk	src/apps/chem/testlda.cc	/^  double zk;$/;"	m	struct:xcfunc_data_point	file:
zk	src/apps/chem/testxc.cc	/^  double zk;$/;"	m	struct:xcfunc_data_point	file:
zk	src/apps/polar/testxc.cc	/^  double zk;$/;"	m	struct:xcfunc_data_point	file:
zleft_dirichlet	src/madness/mra/testdiff3D.cc	/^static double zleft_dirichlet(const coordT &pt) {$/;"	f	file:
zleft_neumann	src/madness/mra/testdiff3D.cc	/^static double zleft_neumann  (const coordT &pt) {$/;"	f	file:
zmagfunc	src/examples/test_gmres.cc	/^static std::complex<double> zmagfunc(const Vector<double, 3> &pt) {$/;"	f	file:
zright_dirichlet	src/madness/mra/testdiff3D.cc	/^static double zright_dirichlet(const coordT &pt) {$/;"	f	file:
zright_neumann	src/madness/mra/testdiff3D.cc	/^static double zright_neumann  (const coordT &pt) {$/;"	f	file:
zz	src/apps/chem/molecularbasis.h	/^    const double xx, yy, zz; \/\/ Coordinates of the center$/;"	m	class:madness::AtomicBasisFunction
zz	src/apps/hf/molecularbasis.h	/^    const double xx, yy, zz; \/\/ Coordinates of the center$/;"	m	class:AtomicBasisFunction
zz	src/apps/polar/molecularbasis.h	/^    const double xx, yy, zz; \/\/ Coordinates of the center$/;"	m	class:AtomicBasisFunction
~A	src/madness/world/test_vec.cc	/^    ~A() {$/;"	f	class:A
~AC	src/apps/chem/AC.h	/^   ~AC(){}$/;"	f	class:madness::AC
~AbstractBlockDistMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/Abstract.cpp	/^AbstractBlockDistMatrix<T>::~AbstractBlockDistMatrix() { }$/;"	f	class:elem::AbstractBlockDistMatrix
~AbstractDistMatrix	src/madness/external/elemental/src/core/DistMatrix/Abstract.cpp	/^AbstractDistMatrix<T>::~AbstractDistMatrix() { }$/;"	f	class:elem::AbstractDistMatrix
~AbstractSocketWriter	src/madness/external/gtest/src/gtest-internal-inl.h	/^    virtual ~AbstractSocketWriter() {}$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
~AbstractVectorSpace	src/madness/tensor/gmres.h	/^            virtual ~AbstractVectorSpace() {}$/;"	f	class:madness::AbstractVectorSpace
~Args	src/madness/external/elemental/include/elemental/core/environment/decl.hpp	/^    virtual ~Args() { }$/;"	f	class:elem::Args
~Args	src/madness/external/elemental/include/elemental/core/imports/choice.hpp	/^    virtual ~Args() { }$/;"	f	class:elem::choice::Args
~Arguments	src/madness/external/gtest/src/gtest-death-test.cc	/^  ~Arguments() {$/;"	f	class:testing::internal::Arguments
~Array	src/madness/world/test_future2.cc	/^    virtual ~Array() { }$/;"	f	class:Array
~AssertHelper	src/madness/external/gtest/src/gtest.cc	/^AssertHelper::~AssertHelper() {$/;"	f	class:testing::internal::AssertHelper
~AutoHandle	src/madness/external/gtest/src/gtest-internal-inl.h	/^  ~AutoHandle() { Reset(); }$/;"	f	class:testing::internal::AutoHandle
~AxpyInterface	src/madness/external/elemental/include/elemental/core/AxpyInterface/impl.hpp	/^AxpyInterface<T>::~AxpyInterface()$/;"	f	class:elem::AxpyInterface
~B	src/madness/world/test_world.cc	/^    ~B() {$/;"	f	class:B
~BaseTensor	src/madness/tensor/basetensor.h	/^        virtual ~BaseTensor() {$/;"	f	class:madness::BaseTensor
~BinSorter	src/madness/world/binsorter.h	/^        virtual ~BinSorter() {$/;"	f	class:madness::BinSorter
~BlockDistMatrix	src/madness/external/elemental/src/core/BlockDistMatrix/setup.hpp	/^template<typename T> BDM::~BlockDistMatrix() { }$/;"	f	class:elem::BDM
~CCPotentials	src/apps/chem/CCPotentials.h	/^    ~CCPotentials() {};$/;"	f	class:madness::CCPotentials
~Cache	src/madness/world/dist_cache.h	/^                virtual ~Cache() { }$/;"	f	class:madness::detail::DistCache::Cache
~CacheData	src/madness/world/dist_cache.h	/^                virtual ~CacheData() { }$/;"	f	class:madness::detail::DistCache::CacheData
~CallbackInterface	src/madness/world/dependency_interface.h	/^        virtual ~CallbackInterface() {}$/;"	f	class:madness::CallbackInterface
~CapturedStream	src/madness/external/gtest/src/gtest-port.cc	/^  ~CapturedStream() {$/;"	f	class:testing::internal::CapturedStream
~CartesianProductGenerator10	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ~CartesianProductGenerator10() {}$/;"	f	class:testing::internal::CartesianProductGenerator10
~CartesianProductGenerator2	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ~CartesianProductGenerator2() {}$/;"	f	class:testing::internal::CartesianProductGenerator2
~CartesianProductGenerator3	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ~CartesianProductGenerator3() {}$/;"	f	class:testing::internal::CartesianProductGenerator3
~CartesianProductGenerator4	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ~CartesianProductGenerator4() {}$/;"	f	class:testing::internal::CartesianProductGenerator4
~CartesianProductGenerator5	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ~CartesianProductGenerator5() {}$/;"	f	class:testing::internal::CartesianProductGenerator5
~CartesianProductGenerator6	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ~CartesianProductGenerator6() {}$/;"	f	class:testing::internal::CartesianProductGenerator6
~CartesianProductGenerator7	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ~CartesianProductGenerator7() {}$/;"	f	class:testing::internal::CartesianProductGenerator7
~CartesianProductGenerator8	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ~CartesianProductGenerator8() {}$/;"	f	class:testing::internal::CartesianProductGenerator8
~CartesianProductGenerator9	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^  virtual ~CartesianProductGenerator9() {}$/;"	f	class:testing::internal::CartesianProductGenerator9
~ComplexDisplayWindow	src/madness/external/elemental/src/io/ComplexDisplayWindow.cpp	/^ComplexDisplayWindow::~ComplexDisplayWindow()$/;"	f	class:elem::ComplexDisplayWindow
~ConcurrentHashMap	src/madness/world/worldhashmap.h	/^        virtual ~ConcurrentHashMap() {$/;"	f	class:madness::ConcurrentHashMap
~ConditionVariable	src/madness/world/worldmutex.h	/^        virtual ~ConditionVariable() {}$/;"	f	class:madness::ConditionVariable
~Convolution1D	src/madness/mra/convolution1d.h	/^        virtual ~Convolution1D() {};$/;"	f	class:madness::Convolution1D
~CubicInterpolationTable	src/madness/misc/interpolation_1d.h	/^    virtual ~CubicInterpolationTable() {};$/;"	f	class:CubicInterpolationTable
~DFT	src/apps/hf/dft.cc	/^  DFT<T,NDIM>::~DFT()$/;"	f	class:madness::DFT
~DFTNuclearChargeDensityOp	src/apps/hf/dft.h	/^    ~DFTNuclearChargeDensityOp()$/;"	f	class:madness::DFTNuclearChargeDensityOp
~DQueue	src/madness/world/dqueue.h	/^        virtual ~DQueue() {$/;"	f	class:madness::DQueue
~DeathTest	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  virtual ~DeathTest() { }$/;"	f	class:testing::internal::DeathTest
~DeathTestFactory	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  virtual ~DeathTestFactory() { }$/;"	f	class:testing::internal::DeathTestFactory
~DeathTestImpl	src/madness/external/gtest/src/gtest-death-test.cc	/^  ~DeathTestImpl() { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }$/;"	f	class:testing::internal::DeathTestImpl
~DelayedSend	src/madness/world/worldgop.h	/^            virtual ~DelayedSend() { }$/;"	f	class:madness::WorldGopInterface::DelayedSend
~DependencyInterface	src/madness/world/dependency_interface.h	/^        virtual ~DependencyInterface() {$/;"	f	class:madness::DependencyInterface
~Derivative	src/madness/mra/derivative.h	/^        virtual ~Derivative() { }$/;"	f	class:madness::Derivative
~DerivativeBase	src/madness/mra/derivative.h	/^        virtual ~DerivativeBase() { }$/;"	f	class:madness::DerivativeBase
~DipoleFunctor	src/apps/hf/solver.h	/^      virtual ~DipoleFunctor() {}$/;"	f	class:madness::DipoleFunctor
~DisplayWidget	src/madness/external/elemental/include/elemental/io/DisplayWidget/impl.hpp	/^DisplayWidget<T>::~DisplayWidget()$/;"	f	class:elem::DisplayWidget
~DisplayWindow	src/madness/external/elemental/src/io/DisplayWindow.cpp	/^DisplayWindow::~DisplayWindow()$/;"	f	class:elem::DisplayWindow
~DistMatrix	src/madness/external/elemental/src/core/DistMatrix/setup.hpp	/^template<typename T> DM::~DistMatrix() { }$/;"	f	class:elem::DM
~DistributedMatrix	src/apps/ii/systolic.h	/^        virtual ~DistributedMatrix() {}$/;"	f	class:madness::DistributedMatrix
~DistributedMatrix	src/madness/tensor/distributed_matrix.h	/^        virtual ~DistributedMatrix() {}$/;"	f	class:madness::DistributedMatrix
~DistributedMatrixDistribution	src/madness/tensor/distributed_matrix.h	/^        virtual ~DistributedMatrixDistribution() {}$/;"	f	class:madness::DistributedMatrixDistribution
~DomainMaskInterface	src/madness/mra/sdf_domainmask.h	/^        virtual ~DomainMaskInterface() {}$/;"	f	class:madness::DomainMaskInterface
~DomainMaskSDFFunctor	src/madness/mra/sdf_domainmask.h	/^        virtual ~DomainMaskSDFFunctor() {}$/;"	f	class:madness::DomainMaskSDFFunctor
~Double	src/madness/world/test_dc.cc	/^    ~Double() {double_count--;}$/;"	f	class:Double
~EigSolver	src/apps/hf/eigsolver.cc	/^  EigSolver<T,NDIM>::~EigSolver()$/;"	f	class:madness::EigSolver
~EigSolverOp	src/apps/hf/eigsolver.h	/^  virtual ~EigSolverOp() {}$/;"	f	class:madness::EigSolverOp
~ElectronCuspyBox_op	src/madness/mra/leafop.h	/^    ~ElectronCuspyBox_op() {}$/;"	f	struct:madness::ElectronCuspyBox_op
~EmbeddedDirichlet	src/apps/interior_bc/test_problems.h	/^        virtual ~EmbeddedDirichlet() {$/;"	f	class:EmbeddedDirichlet
~Environment	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual ~Environment() {}$/;"	f	class:testing::Environment
~EwaldNuclearPotentialFunctor	src/apps/hf/ewald.cc	/^  virtual ~EwaldNuclearPotentialFunctor() {}$/;"	f	class:EwaldNuclearPotentialFunctor
~Exception	src/madness/world/safempi.h	/^        virtual ~Exception() throw() { }$/;"	f	class:SafeMPI::Exception
~Exp	src/examples/compiler/mra-driver.hh	/^    ~Exp() {$/;"	f	class:Exp
~Foo	src/madness/world/test_future3.cc	/^    virtual ~Foo() { }$/;"	f	class:Foo
~Foo	src/madness/world/test_world.cc	/^    virtual ~Foo() { }$/;"	f	class:Foo
~Function	src/madness/mra/mra.h	/^        ~Function() {}$/;"	f	class:madness::Function
~FunctionFactory	src/madness/mra/function_factory.h	/^    virtual ~FunctionFactory() {};$/;"	f	class:madness::FunctionFactory
~FunctionFunctorInterface	src/madness/mra/function_interface.h	/^	    virtual ~FunctionFunctorInterface() {}$/;"	f	class:madness::FunctionFunctorInterface
~FunctionImpl	src/madness/mra/funcimpl.h	/^        virtual ~FunctionImpl() { }$/;"	f	class:madness::FunctionImpl
~FunctionSpace	src/madness/tensor/gmres.h	/^            virtual ~FunctionSpace() {}$/;"	f	class:madness::FunctionSpace
~Future	src/madness/world/future.h	/^        ~Future() {$/;"	f	class:madness::Future
~FutureImpl	src/madness/world/future.h	/^        virtual ~FutureImpl() {$/;"	f	class:madness::FutureImpl
~GTestFlagSaver	src/madness/external/gtest/src/gtest-internal-inl.h	/^  ~GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
~GTestLog	src/madness/external/gtest/src/gtest-port.cc	/^GTestLog::~GTestLog() {$/;"	f	class:testing::internal::GTestLog
~GTestMutexLock	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ~GTestMutexLock() { mutex_->Unlock(); }$/;"	f	class:testing::internal::GTestMutexLock
~GaussianConvolution1D	src/madness/mra/convolution1d.h	/^        virtual ~GaussianConvolution1D() {}$/;"	f	class:madness::GaussianConvolution1D
~GaussianDomainMask	src/madness/mra/sdf_domainmask.h	/^        virtual ~GaussianDomainMask() {}$/;"	f	class:madness::GaussianDomainMask
~GenTensorTest	src/madness/mra/test_mra6.cc	/^        virtual ~GenTensorTest() {}$/;"	f	class:__anon12::GenTensorTest
~Grid	src/madness/external/elemental/include/elemental/core/Grid/impl.hpp	/^Grid::~Grid()$/;"	f	class:elem::Grid
~HartreeFock	src/apps/hf/hartreefock.cc	/^  HartreeFock<T,NDIM>::~HartreeFock()$/;"	f	class:madness::HartreeFock
~HasNewFatalFailureHelper	src/madness/external/gtest/src/gtest-test-part.cc	/^HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {$/;"	f	class:testing::internal::HasNewFatalFailureHelper
~HashAccessor	src/madness/world/worldhashmap.h	/^            ~HashAccessor() {$/;"	f	class:madness::Hash_private::HashAccessor
~HighDimIndexIterator	src/madness/mra/indexit.h	/^        virtual ~HighDimIndexIterator() {}$/;"	f	class:madness::HighDimIndexIterator
~IEigSolverObserver	src/apps/hf/eigsolver.h	/^  virtual ~IEigSolverObserver() {};$/;"	f	class:madness::IEigSolverObserver
~Impl	src/madness/world/safempi.h	/^            ~Impl() {$/;"	f	struct:SafeMPI::Group::Impl
~Impl	src/madness/world/safempi.h	/^            ~Impl() {$/;"	f	struct:SafeMPI::Intracomm::Impl
~IndexIterator	src/madness/mra/indexit.h	/^        virtual ~IndexIterator() {}$/;"	f	class:madness::IndexIterator
~InternalRunDeathTestFlag	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^  ~InternalRunDeathTestFlag() {$/;"	f	class:testing::internal::InternalRunDeathTestFlag
~Intracomm	src/madness/world/safempi.h	/^        ~Intracomm() { }$/;"	f	class:SafeMPI::Intracomm
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util-generated.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::RangeGenerator::Iterator
~Iterator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
~LLRVDomainMask	src/madness/mra/sdf_domainmask.h	/^        virtual ~LLRVDomainMask() {}$/;"	f	class:madness::LLRVDomainMask
~Leaf_op	src/madness/mra/leafop.h	/^    ~Leaf_op() {$/;"	f	class:madness::Leaf_op
~LocalizeBoys	src/apps/ii/systolic.h	/^        virtual ~LocalizeBoys() {}$/;"	f	class:madness::LocalizeBoys
~LowDimIndexIterator	src/madness/mra/indexit.h	/^        virtual ~LowDimIndexIterator() {}$/;"	f	class:madness::LowDimIndexIterator
~LowRankTensorTest	src/madness/tensor/test_gentensor.cc	/^        virtual ~LowRankTensorTest() {}$/;"	f	class:__anon43::LowRankTensorTest
~MPIOutputArchive	src/madness/world/mpi_archive.h	/^            ~MPIOutputArchive() {$/;"	f	class:madness::archive::MPIOutputArchive
~Matrix	src/madness/external/elemental/src/core/Matrix.cpp	/^Matrix<T>::~Matrix() { }$/;"	f	class:elem::Matrix
~Memory	src/madness/external/elemental/src/core/Memory.cpp	/^Memory<G>::~Memory() { delete[] buffer_; }$/;"	f	class:elem::Memory
~MpiArgs	src/madness/external/elemental/include/elemental/core/imports/mpi_choice.hpp	/^    virtual ~MpiArgs() { }$/;"	f	class:elem::choice::MpiArgs
~Mutex	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ~Mutex() {$/;"	f	class:testing::internal::Mutex
~Mutex	src/madness/world/worldmutex.h	/^        virtual ~Mutex() {$/;"	f	class:madness::Mutex
~MutexReaderWriter	src/madness/world/worldmutex.h	/^        virtual ~MutexReaderWriter() {}$/;"	f	class:madness::MutexReaderWriter
~MySteepestDescent	src/apps/moldft/mcpfit.cc	/^    virtual ~MySteepestDescent(){}$/;"	f	class:MySteepestDescent
~MySteepestDescent	src/apps/polar/mcpfit.cc	/^    virtual ~MySteepestDescent(){}$/;"	f	class:MySteepestDescent
~NativeArray	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  ~NativeArray() {$/;"	f	class:testing::internal::NativeArray
~Node	src/madness/world/test_dc.cc	/^    ~Node() {}$/;"	f	struct:Node
~NonstandardIndexIterator	src/madness/mra/indexit.h	/^        virtual ~NonstandardIndexIterator() {}$/;"	f	class:madness::NonstandardIndexIterator
~Notification	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ~Notification() {$/;"	f	class:testing::internal::Notification
~NuclearChargeDensityOp	src/apps/hf/test_hydro.cc	/^    ~NuclearChargeDensityOp()$/;"	f	class:NuclearChargeDensityOp
~NuclearCorrelationFactor	src/apps/chem/correlationfactor.h	/^	virtual ~NuclearCorrelationFactor() {};$/;"	f	class:madness::NuclearCorrelationFactor
~NuclearCuspyBox_op	src/madness/mra/leafop.h	/^    ~NuclearCuspyBox_op() {}$/;"	f	struct:madness::NuclearCuspyBox_op
~Operator	src/madness/tensor/gmres.h	/^	         virtual ~Operator() {}$/;"	f	class:madness::Operator
~OptimizationTargetInterface	src/madness/tensor/solvers.h	/^	virtual ~OptimizationTargetInterface(){}$/;"	f	struct:madness::OptimizationTargetInterface
~OptimizerInterface	src/madness/tensor/solvers.h	/^	virtual ~OptimizerInterface(){}$/;"	f	struct:madness::OptimizerInterface
~OsStackTraceGetterInterface	src/madness/external/gtest/src/gtest-internal-inl.h	/^  virtual ~OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
~OutputWriter	src/apps/hf/outputwriter.h	/^  virtual ~OutputWriter()$/;"	f	class:OutputWriter
~ParamGeneratorInterface	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ~ParamGeneratorInterface() {}$/;"	f	class:testing::internal::ParamGeneratorInterface
~ParamIteratorInterface	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ~ParamIteratorInterface() {}$/;"	f	class:testing::internal::ParamIteratorInterface
~ParameterizedTestCaseInfoBase	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ~ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
~ParameterizedTestCaseRegistry	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  ~ParameterizedTestCaseRegistry() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
~ParserBase	src/madness/external/muParser/muParserBase.cpp	/^  ParserBase::~ParserBase()$/;"	f	class:mu::ParserBase
~ParserByteCode	src/madness/external/muParser/muParserBytecode.cpp	/^  ParserByteCode::~ParserByteCode()$/;"	f	class:mu::ParserByteCode
~ParserError	src/madness/external/muParser/muParserError.cpp	/^  ParserError::~ParserError()$/;"	f	class:mu::ParserError
~ParserErrorMsg	src/madness/external/muParser/muParserError.cpp	/^  ParserErrorMsg::~ParserErrorMsg()$/;"	f	class:mu::ParserErrorMsg
~ParserStack	src/madness/external/muParser/muParserStack.h	/^      virtual ~ParserStack()$/;"	f	class:mu::ParserStack
~PointGroup	src/apps/moldft/pointgroup.h	/^    virtual ~PointGroup() {}$/;"	f	class:PointGroup
~PointGroup	src/apps/polar/pointgroup.h	/^    virtual ~PointGroup() {}$/;"	f	class:PointGroup
~PoolTaskInterface	src/madness/world/thread.h	/^        virtual ~PoolTaskInterface() {$/;"	f	class:madness::PoolTaskInterface
~PoolTaskNull	src/madness/world/thread.h	/^        virtual ~PoolTaskNull() {}$/;"	f	class:madness::PoolTaskNull
~PthreadConditionVariable	src/madness/world/worldmutex.h	/^        virtual ~PthreadConditionVariable() {$/;"	f	class:madness::PthreadConditionVariable
~QCCalculationParametersBase	src/apps/chem/QCCalculationParametersBase.h	/^	virtual ~QCCalculationParametersBase() {}$/;"	f	class:madness::QCCalculationParametersBase
~QuasiNewton	src/madness/tensor/solvers.h	/^	virtual ~QuasiNewton() {}$/;"	f	class:madness::QuasiNewton
~RE	src/madness/external/gtest/src/gtest-port.cc	/^RE::~RE() {$/;"	f	class:testing::internal::RE
~RMISendReq	src/madness/world/worldrmi.h	/^        virtual ~RMISendReq() {} \/\/ ESSENTIAL!!$/;"	f	struct:madness::RMISendReq
~Random	src/madness/misc/ran.cc	/^    Random::~Random() {delete [] u;}$/;"	f	class:madness::Random
~RangeGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ~RangeGenerator() {}$/;"	f	class:testing::internal::RangeGenerator
~RecursiveMutex	src/madness/world/worldmutex.h	/^        ~RecursiveMutex() {$/;"	f	class:madness::RecursiveMutex
~RemoteCounter	src/madness/world/worldref.h	/^            ~RemoteCounter() { destroy(); }$/;"	f	class:madness::detail::RemoteCounter
~RemoteCounterBase	src/madness/world/worldref.h	/^            virtual ~RemoteCounterBase() { }$/;"	f	class:madness::detail::RemoteCounterBase
~RemoteCounterImpl	src/madness/world/worldref.h	/^            virtual ~RemoteCounterImpl() { }$/;"	f	class:madness::detail::RemoteCounterImpl
~RemoteReference	src/madness/world/worldref.h	/^        ~RemoteReference() { }$/;"	f	class:madness::RemoteReference
~ReturnSentinel	src/madness/external/gtest/include/gtest/internal/gtest-death-test-internal.h	/^    ~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
~RmiTask	src/madness/world/worldrmi.cc	/^    RMI::RmiTask::~RmiTask() {$/;"	f	class:madness::RMI::RmiTask
~SRConf	src/madness/tensor/srconf.h	/^		~SRConf() {}$/;"	f	class:madness::SRConf
~ScopedFakeTestPartResultReporter	src/madness/external/gtest/src/gtest.cc	/^ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
~ScopedMutex	src/madness/world/worldmutex.h	/^        virtual ~ScopedMutex() { mutex->unlock(); }$/;"	f	class:madness::ScopedMutex
~ScopedPrematureExitFile	src/madness/external/gtest/src/gtest.cc	/^  ~ScopedPrematureExitFile() {$/;"	f	class:testing::internal::ScopedPrematureExitFile
~SendReq	src/madness/world/worldam.h	/^            ~SendReq() {free();}$/;"	f	class:madness::WorldAmInterface::SendReq
~SeparatedConvolution	src/madness/mra/operator.h	/^        virtual ~SeparatedConvolution() { }$/;"	f	class:madness::SeparatedConvolution
~SharedAlignedArray	src/madness/tensor/tensor.h	/^            ~SharedAlignedArray() {dec();}$/;"	f	class:madness::detail::SharedAlignedArray
~SignedDFInterface	src/madness/mra/sdf_domainmask.h	/^        virtual ~SignedDFInterface() {}$/;"	f	class:madness::SignedDFInterface
~SingleFailureChecker	src/madness/external/gtest/src/gtest.cc	/^SingleFailureChecker::~SingleFailureChecker() {$/;"	f	class:testing::internal::SingleFailureChecker
~SliceTensor	src/madness/tensor/tensor.h	/^        virtual ~SliceTensor() {};		\/\/ Tensor<T> destructor does enough$/;"	f	class:madness::SliceTensor
~SocketWriter	src/madness/external/gtest/src/gtest-internal-inl.h	/^    virtual ~SocketWriter() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
~Solver	src/apps/hf/solver.h	/^    virtual ~Solver()$/;"	f	class:madness::Solver
~SolverTargetInterface	src/madness/tensor/kain.cc	/^    virtual ~SolverTargetInterface() {};$/;"	f	struct:SolverTargetInterface
~SolverTargetInterface	src/madness/tensor/solvers.h	/^        virtual ~SolverTargetInterface() {}$/;"	f	struct:madness::SolverTargetInterface
~Specialbox_op	src/madness/mra/leafop.h	/^    virtual ~Specialbox_op() {}$/;"	f	struct:madness::Specialbox_op
~SpectralPropagator	src/examples/spectralprop.h	/^        ~SpectralPropagator() $/;"	f	class:madness::SpectralPropagator
~Spinlock	src/madness/world/worldmutex.h	/^        virtual ~Spinlock() {$/;"	f	class:madness::Spinlock
~SpyWidget	src/madness/external/elemental/include/elemental/io/SpyWidget/impl.hpp	/^SpyWidget::~SpyWidget()$/;"	f	class:elem::SpyWidget
~SpyWindow	src/madness/external/elemental/src/io/SpyWindow.cpp	/^SpyWindow::~SpyWindow()$/;"	f	class:elem::SpyWindow
~Stack	src/madness/world/stack.h	/^        ~Stack() {$/;"	f	class:madness::Stack
~StackTest	src/madness/world/test_stack.cc	/^        virtual ~StackTest() { }$/;"	f	class:__anon3::StackTest
~SteepestDescent	src/madness/tensor/solvers.h	/^        virtual ~SteepestDescent() { }$/;"	f	class:madness::SteepestDescent
~SystolicEigensolver	src/apps/ii/eigen_solver.cc	/^    virtual ~SystolicEigensolver(){}$/;"	f	class:SystolicEigensolver
~SystolicMatrixAlgorithm	src/apps/ii/systolic.h	/^        virtual ~SystolicMatrixAlgorithm() {}$/;"	f	class:madness::SystolicMatrixAlgorithm
~SystolicMatrixAlgorithm	src/madness/tensor/systolic.h	/^        virtual ~SystolicMatrixAlgorithm() {}$/;"	f	class:madness::SystolicMatrixAlgorithm
~TDHF	src/apps/chem/TDHF.h	/^	~TDHF() {};$/;"	f	class:madness::TDHF
~TaskAttributes	src/madness/world/thread.h	/^        virtual ~TaskAttributes() {}$/;"	f	class:madness::TaskAttributes
~TaskFn	src/madness/world/taskfn.h	/^        virtual ~TaskFn() { }$/;"	f	struct:madness::TaskFn
~TaskInterface	src/madness/world/taskfn.h	/^        virtual ~TaskInterface() { if (completion) completion->notify(); }$/;"	f	class:madness::TaskInterface
~TaskProfiler	src/madness/world/thread.h	/^            ~TaskProfiler() {$/;"	f	class:madness::profiling::TaskProfiler
~Tensor	src/madness/tensor/tensor.h	/^        virtual ~Tensor() {}$/;"	f	class:madness::Tensor
~TensorException	src/madness/tensor/tensorexcept.h	/^        virtual ~TensorException() throw() {}$/;"	f	class:madness::TensorException
~TensorTest	src/madness/tensor/test_tensor.cc	/^        virtual ~TensorTest() {}$/;"	f	class:__anon44::TensorTest
~Test	src/madness/external/gtest/src/gtest.cc	/^Test::~Test() {$/;"	f	class:testing::Test
~TestCase	src/madness/external/gtest/src/gtest.cc	/^TestCase::~TestCase() {$/;"	f	class:testing::TestCase
~TestEventListener	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual ~TestEventListener() {}$/;"	f	class:testing::TestEventListener
~TestEventListeners	src/madness/external/gtest/src/gtest.cc	/^TestEventListeners::~TestEventListeners() { delete repeater_; }$/;"	f	class:testing::TestEventListeners
~TestEventRepeater	src/madness/external/gtest/src/gtest.cc	/^TestEventRepeater::~TestEventRepeater() {$/;"	f	class:testing::internal::TestEventRepeater
~TestFactoryBase	src/madness/external/gtest/include/gtest/internal/gtest-internal.h	/^  virtual ~TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
~TestFutureForwarding	src/madness/world/test_world.cc	/^    virtual ~TestFutureForwarding() { }$/;"	f	class:TestFutureForwarding
~TestInfo	src/madness/external/gtest/src/gtest.cc	/^TestInfo::~TestInfo() { delete factory_; }$/;"	f	class:testing::TestInfo
~TestMetaFactoryBase	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ~TestMetaFactoryBase() {}$/;"	f	class:testing::internal::TestMetaFactoryBase
~TestPartResultReporterInterface	src/madness/external/gtest/include/gtest/gtest-test-part.h	/^  virtual ~TestPartResultReporterInterface() {}$/;"	f	class:testing::TestPartResultReporterInterface
~TestResult	src/madness/external/gtest/src/gtest.cc	/^TestResult::~TestResult() {$/;"	f	class:testing::TestResult
~TextFstreamOutputArchive	src/madness/world/text_fstream_archive.h	/^            ~TextFstreamOutputArchive() {$/;"	f	class:madness::archive::TextFstreamOutputArchive
~ThreadBase	src/madness/world/thread.h	/^        virtual ~ThreadBase() { }$/;"	f	class:madness::ThreadBase
~ThreadLocal	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ~ThreadLocal() {$/;"	f	class:testing::internal::ThreadLocal
~ThreadLocalValueHolderBase	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  virtual ~ThreadLocalValueHolderBase() {}$/;"	f	class:testing::internal::ThreadLocalValueHolderBase
~ThreadPool	src/madness/world/thread.h	/^        ~ThreadPool() {$/;"	f	class:madness::ThreadPool
~ThreadWithParam	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ~ThreadWithParam() { Join(); }$/;"	f	class:testing::internal::ThreadWithParam
~ThreadWithParamBase	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  virtual ~ThreadWithParamBase() {}$/;"	f	class:testing::internal::ThreadWithParamBase
~TiXmlAttributeSet	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet
~TiXmlBase	src/madness/external/tinyxml/tinyxml.h	/^	virtual ~TiXmlBase()			{}$/;"	f	class:TiXmlBase
~TiXmlComment	src/madness/external/tinyxml/tinyxml.h	/^	virtual ~TiXmlComment()	{}$/;"	f	class:TiXmlComment
~TiXmlDeclaration	src/madness/external/tinyxml/tinyxml.h	/^	virtual ~TiXmlDeclaration()	{}$/;"	f	class:TiXmlDeclaration
~TiXmlDocument	src/madness/external/tinyxml/tinyxml.h	/^	virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument
~TiXmlElement	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement
~TiXmlNode	src/madness/external/tinyxml/tinyxml.cc	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode
~TiXmlString	src/madness/external/tinyxml/tinystr.h	/^	~TiXmlString ()$/;"	f	class:TiXmlString
~TiXmlText	src/madness/external/tinyxml/tinyxml.h	/^	virtual ~TiXmlText() {}$/;"	f	class:TiXmlText
~TiXmlUnknown	src/madness/external/tinyxml/tinyxml.h	/^	virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown
~TiXmlVisitor	src/madness/external/tinyxml/tinyxml.h	/^	virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor
~UnitTest	src/madness/external/gtest/src/gtest.cc	/^UnitTest::~UnitTest() {$/;"	f	class:testing::UnitTest
~UnitTestImpl	src/madness/external/gtest/src/gtest.cc	/^UnitTestImpl::~UnitTestImpl() {$/;"	f	class:testing::internal::UnitTestImpl
~ValuesInIteratorRangeGenerator	src/madness/external/gtest/include/gtest/internal/gtest-param-util.h	/^  virtual ~ValuesInIteratorRangeGenerator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
~VectorOfFunctionsSpace	src/madness/tensor/gmres.h	/^            virtual ~VectorOfFunctionsSpace() {}$/;"	f	class:madness::VectorOfFunctionsSpace
~VectorSpace	src/madness/tensor/gmres.h	/^            virtual ~VectorSpace() {}$/;"	f	class:madness::VectorSpace
~WSTAtomicBasisFunctor	src/apps/hf/solver.h	/^      ~WSTAtomicBasisFunctor() {}$/;"	f	class:madness::WSTAtomicBasisFunctor
~WithParamInterface	src/madness/external/gtest/include/gtest/gtest.h	/^  virtual ~WithParamInterface() {}$/;"	f	class:testing::WithParamInterface
~World	src/madness/world/world.cc	/^    World::~World() {$/;"	f	class:madness::World
~WorldAmInterface	src/madness/world/worldam.cc	/^    WorldAmInterface::~WorldAmInterface() {$/;"	f	class:madness::WorldAmInterface
~WorldContainer	src/madness/world/worlddc.h	/^        virtual ~WorldContainer() {$/;"	f	class:madness::WorldContainer
~WorldContainerImpl	src/madness/world/worlddc.h	/^        virtual ~WorldContainerImpl() {$/;"	f	class:madness::WorldContainerImpl
~WorldContainerIterator	src/madness/world/worlddc.h	/^        ~WorldContainerIterator() {$/;"	f	class:madness::WorldContainerIterator
~WorldDCPmapInterface	src/madness/world/worlddc.h	/^        virtual ~WorldDCPmapInterface() {}$/;"	f	class:madness::WorldDCPmapInterface
~WorldDCRedistributeInterface	src/madness/world/worlddc.h	/^	virtual ~WorldDCRedistributeInterface() {};$/;"	f	class:madness::WorldDCRedistributeInterface
~WorldGopInterface	src/madness/world/worldgop.h	/^        ~WorldGopInterface() {$/;"	f	class:madness::WorldGopInterface
~WorldMpi	src/madness/world/worldmpi.h	/^            ~WorldMpi() {$/;"	f	class:madness::detail::WorldMpi
~WorldMpiRuntime	src/madness/world/worldmpi.h	/^            ~WorldMpiRuntime() { world_mpi.reset(); }$/;"	f	class:madness::detail::WorldMpiRuntime
~WorldObject	src/madness/world/world_object.h	/^        virtual ~WorldObject() {$/;"	f	class:madness::WorldObject
~WorldProfileObj	src/madness/world/worldprofile.cc	/^    WorldProfileObj::~WorldProfileObj() {$/;"	f	class:madness::WorldProfileObj
~WorldPtrTest	src/madness/world/test_worldptr.cc	/^        virtual ~WorldPtrTest() {$/;"	f	class:__anon6::WorldPtrTest
~WorldRefTest	src/madness/world/test_worldref.cc	/^        virtual ~WorldRefTest() {$/;"	f	class:__anon1::WorldRefTest
~WorldTest	src/madness/world/test_googletest.cc	/^        virtual ~WorldTest() {$/;"	f	class:__anon4::WorldTest
~XCfunctional	src/apps/chem/xcfunctional_ldaonly.cc	/^XCfunctional::~XCfunctional() {}$/;"	f	class:madness::XCfunctional
~XCfunctional	src/apps/chem/xcfunctional_libxc.cc	/^XCfunctional::~XCfunctional() {$/;"	f	class:madness::XCfunctional
~XCfunctional	src/apps/polar/xcfunctional_ldaonly.cc	/^XCfunctional::~XCfunctional() {}$/;"	f	class:madness::XCfunctional
~XCfunctional	src/apps/polar/xcfunctional_libxc.cc	/^XCfunctional::~XCfunctional() {$/;"	f	class:madness::XCfunctional
~Zcis	src/apps/chem/zcis.h	/^	virtual ~Zcis() {};$/;"	f	class:madness::Zcis
~auto_ptr	src/madness/external/muParser/muParserFixes.h	/^	 ~auto_ptr()              { delete _Myptr;    }$/;"	f	class:std::_my_auto_ptr
~bin	src/madness/world/worldhashmap.h	/^            ~bin() {$/;"	f	class:madness::Hash_private::bin
~inputfile	src/apps/chem/test_QCCalculationParametersBase.cc	/^	~inputfile() {$/;"	f	struct:inputfile
~linked_ptr	src/madness/external/gtest/include/gtest/internal/gtest-linked_ptr.h	/^  ~linked_ptr() { depart(); }$/;"	f	class:testing::internal::linked_ptr
~mpreal	src/apps/nick/mpreal.cc	/^mpreal::~mpreal() $/;"	f	class:mpfr::mpreal
~mra_driver	src/examples/compiler/mra-driver.cc	/^mra_driver::~mra_driver ()$/;"	f	class:mra_driver
~rvmove	src/madness/external/elemental/external/cmake/FindCXXFeatures/cxx11-rvalue_references.cxx	/^   ~rvmove()$/;"	f	class:rvmove
~scoped_ptr	src/madness/external/gtest/include/gtest/internal/gtest-port.h	/^  ~scoped_ptr() { reset(); }$/;"	f	class:testing::internal::scoped_ptr
~write_test_input	src/apps/chem/test_MolecularOrbitals.cc	/^    ~write_test_input() {$/;"	f	struct:write_test_input
~write_test_input	src/apps/chem/test_SCFOperators.cc	/^    ~write_test_input() {$/;"	f	struct:write_test_input
~write_test_input	src/apps/chem/test_qc.cc	/^    ~write_test_input() {$/;"	f	struct:write_test_input
